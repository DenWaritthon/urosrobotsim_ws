
megarover_joystick_uros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a63c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001908  0801a820  0801a820  0001b820  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c128  0801c128  0001e9a0  2**0
                  CONTENTS
  4 .ARM          00000008  0801c128  0801c128  0001d128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c130  0801c130  0001e9a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0801c130  0801c130  0001d130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801c140  0801c140  0001d140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000009a0  20000000  0801c144  0001e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b1b4  200009a0  0801cae4  0001e9a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000bb54  0801cae4  0001eb54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001e9a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026880  00000000  00000000  0001e9d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000052d7  00000000  00000000  00045250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e38  00000000  00000000  0004a528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000176e  00000000  00000000  0004c360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d835  00000000  00000000  0004dace  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026d3f  00000000  00000000  0007b303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00116385  00000000  00000000  000a2042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  001b83c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009014  00000000  00000000  001b8440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  001c1454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200009a0 	.word	0x200009a0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801a804 	.word	0x0801a804

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200009a4 	.word	0x200009a4
 800021c:	0801a804 	.word	0x0801a804

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_ldivmod>:
 8000bc8:	b97b      	cbnz	r3, 8000bea <__aeabi_ldivmod+0x22>
 8000bca:	b972      	cbnz	r2, 8000bea <__aeabi_ldivmod+0x22>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bfbe      	ittt	lt
 8000bd0:	2000      	movlt	r0, #0
 8000bd2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000bd6:	e006      	blt.n	8000be6 <__aeabi_ldivmod+0x1e>
 8000bd8:	bf08      	it	eq
 8000bda:	2800      	cmpeq	r0, #0
 8000bdc:	bf1c      	itt	ne
 8000bde:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000be2:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000be6:	f000 b9d3 	b.w	8000f90 <__aeabi_idiv0>
 8000bea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf2:	2900      	cmp	r1, #0
 8000bf4:	db09      	blt.n	8000c0a <__aeabi_ldivmod+0x42>
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	db1a      	blt.n	8000c30 <__aeabi_ldivmod+0x68>
 8000bfa:	f000 f86b 	bl	8000cd4 <__udivmoddi4>
 8000bfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c06:	b004      	add	sp, #16
 8000c08:	4770      	bx	lr
 8000c0a:	4240      	negs	r0, r0
 8000c0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	db1b      	blt.n	8000c4c <__aeabi_ldivmod+0x84>
 8000c14:	f000 f85e 	bl	8000cd4 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4240      	negs	r0, r0
 8000c24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c28:	4252      	negs	r2, r2
 8000c2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c2e:	4770      	bx	lr
 8000c30:	4252      	negs	r2, r2
 8000c32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c36:	f000 f84d 	bl	8000cd4 <__udivmoddi4>
 8000c3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c42:	b004      	add	sp, #16
 8000c44:	4240      	negs	r0, r0
 8000c46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c4a:	4770      	bx	lr
 8000c4c:	4252      	negs	r2, r2
 8000c4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c52:	f000 f83f 	bl	8000cd4 <__udivmoddi4>
 8000c56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c5e:	b004      	add	sp, #16
 8000c60:	4252      	negs	r2, r2
 8000c62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c7c:	f000 b988 	b.w	8000f90 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f824 	bl	8000cd4 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fce1 	bl	8000668 <__aeabi_dmul>
 8000ca6:	f000 f975 	bl	8000f94 <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fc62 	bl	8000574 <__aeabi_ui2d>
 8000cb0:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f7ff fcd8 	bl	8000668 <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff fb1a 	bl	80002f8 <__aeabi_dsub>
 8000cc4:	f000 f966 	bl	8000f94 <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <__udivmoddi4>:
 8000cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd8:	9d08      	ldr	r5, [sp, #32]
 8000cda:	460c      	mov	r4, r1
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d14e      	bne.n	8000d7e <__udivmoddi4+0xaa>
 8000ce0:	4694      	mov	ip, r2
 8000ce2:	458c      	cmp	ip, r1
 8000ce4:	4686      	mov	lr, r0
 8000ce6:	fab2 f282 	clz	r2, r2
 8000cea:	d962      	bls.n	8000db2 <__udivmoddi4+0xde>
 8000cec:	b14a      	cbz	r2, 8000d02 <__udivmoddi4+0x2e>
 8000cee:	f1c2 0320 	rsb	r3, r2, #32
 8000cf2:	4091      	lsls	r1, r2
 8000cf4:	fa20 f303 	lsr.w	r3, r0, r3
 8000cf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfc:	4319      	orrs	r1, r3
 8000cfe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f f68c 	uxth.w	r6, ip
 8000d0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb07 1114 	mls	r1, r7, r4, r1
 8000d16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1a:	fb04 f106 	mul.w	r1, r4, r6
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x64>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d2a:	f080 8112 	bcs.w	8000f52 <__udivmoddi4+0x27e>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 810f 	bls.w	8000f52 <__udivmoddi4+0x27e>
 8000d34:	3c02      	subs	r4, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a59      	subs	r1, r3, r1
 8000d3a:	fa1f f38e 	uxth.w	r3, lr
 8000d3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d42:	fb07 1110 	mls	r1, r7, r0, r1
 8000d46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4a:	fb00 f606 	mul.w	r6, r0, r6
 8000d4e:	429e      	cmp	r6, r3
 8000d50:	d90a      	bls.n	8000d68 <__udivmoddi4+0x94>
 8000d52:	eb1c 0303 	adds.w	r3, ip, r3
 8000d56:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d5a:	f080 80fc 	bcs.w	8000f56 <__udivmoddi4+0x282>
 8000d5e:	429e      	cmp	r6, r3
 8000d60:	f240 80f9 	bls.w	8000f56 <__udivmoddi4+0x282>
 8000d64:	4463      	add	r3, ip
 8000d66:	3802      	subs	r0, #2
 8000d68:	1b9b      	subs	r3, r3, r6
 8000d6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d6e:	2100      	movs	r1, #0
 8000d70:	b11d      	cbz	r5, 8000d7a <__udivmoddi4+0xa6>
 8000d72:	40d3      	lsrs	r3, r2
 8000d74:	2200      	movs	r2, #0
 8000d76:	e9c5 3200 	strd	r3, r2, [r5]
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d905      	bls.n	8000d8e <__udivmoddi4+0xba>
 8000d82:	b10d      	cbz	r5, 8000d88 <__udivmoddi4+0xb4>
 8000d84:	e9c5 0100 	strd	r0, r1, [r5]
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4608      	mov	r0, r1
 8000d8c:	e7f5      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000d8e:	fab3 f183 	clz	r1, r3
 8000d92:	2900      	cmp	r1, #0
 8000d94:	d146      	bne.n	8000e24 <__udivmoddi4+0x150>
 8000d96:	42a3      	cmp	r3, r4
 8000d98:	d302      	bcc.n	8000da0 <__udivmoddi4+0xcc>
 8000d9a:	4290      	cmp	r0, r2
 8000d9c:	f0c0 80f0 	bcc.w	8000f80 <__udivmoddi4+0x2ac>
 8000da0:	1a86      	subs	r6, r0, r2
 8000da2:	eb64 0303 	sbc.w	r3, r4, r3
 8000da6:	2001      	movs	r0, #1
 8000da8:	2d00      	cmp	r5, #0
 8000daa:	d0e6      	beq.n	8000d7a <__udivmoddi4+0xa6>
 8000dac:	e9c5 6300 	strd	r6, r3, [r5]
 8000db0:	e7e3      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000db2:	2a00      	cmp	r2, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x204>
 8000db8:	eba1 040c 	sub.w	r4, r1, ip
 8000dbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc0:	fa1f f78c 	uxth.w	r7, ip
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dce:	fb08 4416 	mls	r4, r8, r6, r4
 8000dd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dd6:	fb07 f006 	mul.w	r0, r7, r6
 8000dda:	4298      	cmp	r0, r3
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x11c>
 8000dde:	eb1c 0303 	adds.w	r3, ip, r3
 8000de2:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000de6:	d202      	bcs.n	8000dee <__udivmoddi4+0x11a>
 8000de8:	4298      	cmp	r0, r3
 8000dea:	f200 80cd 	bhi.w	8000f88 <__udivmoddi4+0x2b4>
 8000dee:	4626      	mov	r6, r4
 8000df0:	1a1c      	subs	r4, r3, r0
 8000df2:	fa1f f38e 	uxth.w	r3, lr
 8000df6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dfa:	fb08 4410 	mls	r4, r8, r0, r4
 8000dfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e02:	fb00 f707 	mul.w	r7, r0, r7
 8000e06:	429f      	cmp	r7, r3
 8000e08:	d908      	bls.n	8000e1c <__udivmoddi4+0x148>
 8000e0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e0e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x146>
 8000e14:	429f      	cmp	r7, r3
 8000e16:	f200 80b0 	bhi.w	8000f7a <__udivmoddi4+0x2a6>
 8000e1a:	4620      	mov	r0, r4
 8000e1c:	1bdb      	subs	r3, r3, r7
 8000e1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e22:	e7a5      	b.n	8000d70 <__udivmoddi4+0x9c>
 8000e24:	f1c1 0620 	rsb	r6, r1, #32
 8000e28:	408b      	lsls	r3, r1
 8000e2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e2e:	431f      	orrs	r7, r3
 8000e30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e34:	fa04 f301 	lsl.w	r3, r4, r1
 8000e38:	ea43 030c 	orr.w	r3, r3, ip
 8000e3c:	40f4      	lsrs	r4, r6
 8000e3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e42:	0c38      	lsrs	r0, r7, #16
 8000e44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e48:	fbb4 fef0 	udiv	lr, r4, r0
 8000e4c:	fa1f fc87 	uxth.w	ip, r7
 8000e50:	fb00 441e 	mls	r4, r0, lr, r4
 8000e54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e58:	fb0e f90c 	mul.w	r9, lr, ip
 8000e5c:	45a1      	cmp	r9, r4
 8000e5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e62:	d90a      	bls.n	8000e7a <__udivmoddi4+0x1a6>
 8000e64:	193c      	adds	r4, r7, r4
 8000e66:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e6a:	f080 8084 	bcs.w	8000f76 <__udivmoddi4+0x2a2>
 8000e6e:	45a1      	cmp	r9, r4
 8000e70:	f240 8081 	bls.w	8000f76 <__udivmoddi4+0x2a2>
 8000e74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e78:	443c      	add	r4, r7
 8000e7a:	eba4 0409 	sub.w	r4, r4, r9
 8000e7e:	fa1f f983 	uxth.w	r9, r3
 8000e82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e86:	fb00 4413 	mls	r4, r0, r3, r4
 8000e8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d907      	bls.n	8000ea6 <__udivmoddi4+0x1d2>
 8000e96:	193c      	adds	r4, r7, r4
 8000e98:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e9c:	d267      	bcs.n	8000f6e <__udivmoddi4+0x29a>
 8000e9e:	45a4      	cmp	ip, r4
 8000ea0:	d965      	bls.n	8000f6e <__udivmoddi4+0x29a>
 8000ea2:	3b02      	subs	r3, #2
 8000ea4:	443c      	add	r4, r7
 8000ea6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eaa:	fba0 9302 	umull	r9, r3, r0, r2
 8000eae:	eba4 040c 	sub.w	r4, r4, ip
 8000eb2:	429c      	cmp	r4, r3
 8000eb4:	46ce      	mov	lr, r9
 8000eb6:	469c      	mov	ip, r3
 8000eb8:	d351      	bcc.n	8000f5e <__udivmoddi4+0x28a>
 8000eba:	d04e      	beq.n	8000f5a <__udivmoddi4+0x286>
 8000ebc:	b155      	cbz	r5, 8000ed4 <__udivmoddi4+0x200>
 8000ebe:	ebb8 030e 	subs.w	r3, r8, lr
 8000ec2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ec6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eca:	40cb      	lsrs	r3, r1
 8000ecc:	431e      	orrs	r6, r3
 8000ece:	40cc      	lsrs	r4, r1
 8000ed0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	e750      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f103 	lsr.w	r1, r0, r3
 8000ee0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ee4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ee8:	4094      	lsls	r4, r2
 8000eea:	430c      	orrs	r4, r1
 8000eec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ef4:	fa1f f78c 	uxth.w	r7, ip
 8000ef8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000efc:	fb08 3110 	mls	r1, r8, r0, r3
 8000f00:	0c23      	lsrs	r3, r4, #16
 8000f02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f06:	fb00 f107 	mul.w	r1, r0, r7
 8000f0a:	4299      	cmp	r1, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x24c>
 8000f0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f12:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f16:	d22c      	bcs.n	8000f72 <__udivmoddi4+0x29e>
 8000f18:	4299      	cmp	r1, r3
 8000f1a:	d92a      	bls.n	8000f72 <__udivmoddi4+0x29e>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4463      	add	r3, ip
 8000f20:	1a5b      	subs	r3, r3, r1
 8000f22:	b2a4      	uxth	r4, r4
 8000f24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f28:	fb08 3311 	mls	r3, r8, r1, r3
 8000f2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f30:	fb01 f307 	mul.w	r3, r1, r7
 8000f34:	42a3      	cmp	r3, r4
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x276>
 8000f38:	eb1c 0404 	adds.w	r4, ip, r4
 8000f3c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f40:	d213      	bcs.n	8000f6a <__udivmoddi4+0x296>
 8000f42:	42a3      	cmp	r3, r4
 8000f44:	d911      	bls.n	8000f6a <__udivmoddi4+0x296>
 8000f46:	3902      	subs	r1, #2
 8000f48:	4464      	add	r4, ip
 8000f4a:	1ae4      	subs	r4, r4, r3
 8000f4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f50:	e739      	b.n	8000dc6 <__udivmoddi4+0xf2>
 8000f52:	4604      	mov	r4, r0
 8000f54:	e6f0      	b.n	8000d38 <__udivmoddi4+0x64>
 8000f56:	4608      	mov	r0, r1
 8000f58:	e706      	b.n	8000d68 <__udivmoddi4+0x94>
 8000f5a:	45c8      	cmp	r8, r9
 8000f5c:	d2ae      	bcs.n	8000ebc <__udivmoddi4+0x1e8>
 8000f5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f66:	3801      	subs	r0, #1
 8000f68:	e7a8      	b.n	8000ebc <__udivmoddi4+0x1e8>
 8000f6a:	4631      	mov	r1, r6
 8000f6c:	e7ed      	b.n	8000f4a <__udivmoddi4+0x276>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	e799      	b.n	8000ea6 <__udivmoddi4+0x1d2>
 8000f72:	4630      	mov	r0, r6
 8000f74:	e7d4      	b.n	8000f20 <__udivmoddi4+0x24c>
 8000f76:	46d6      	mov	lr, sl
 8000f78:	e77f      	b.n	8000e7a <__udivmoddi4+0x1a6>
 8000f7a:	4463      	add	r3, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e74d      	b.n	8000e1c <__udivmoddi4+0x148>
 8000f80:	4606      	mov	r6, r0
 8000f82:	4623      	mov	r3, r4
 8000f84:	4608      	mov	r0, r1
 8000f86:	e70f      	b.n	8000da8 <__udivmoddi4+0xd4>
 8000f88:	3e02      	subs	r6, #2
 8000f8a:	4463      	add	r3, ip
 8000f8c:	e730      	b.n	8000df0 <__udivmoddi4+0x11c>
 8000f8e:	bf00      	nop

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <__aeabi_d2uiz>:
 8000f94:	004a      	lsls	r2, r1, #1
 8000f96:	d211      	bcs.n	8000fbc <__aeabi_d2uiz+0x28>
 8000f98:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000f9c:	d211      	bcs.n	8000fc2 <__aeabi_d2uiz+0x2e>
 8000f9e:	d50d      	bpl.n	8000fbc <__aeabi_d2uiz+0x28>
 8000fa0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000fa4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000fa8:	d40e      	bmi.n	8000fc8 <__aeabi_d2uiz+0x34>
 8000faa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000fae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000fb2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000fb6:	fa23 f002 	lsr.w	r0, r3, r2
 8000fba:	4770      	bx	lr
 8000fbc:	f04f 0000 	mov.w	r0, #0
 8000fc0:	4770      	bx	lr
 8000fc2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000fc6:	d102      	bne.n	8000fce <__aeabi_d2uiz+0x3a>
 8000fc8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000fcc:	4770      	bx	lr
 8000fce:	f04f 0000 	mov.w	r0, #0
 8000fd2:	4770      	bx	lr

08000fd4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000fd8:	4a04      	ldr	r2, [pc, #16]	@ (8000fec <MX_FREERTOS_Init+0x18>)
 8000fda:	2100      	movs	r1, #0
 8000fdc:	4804      	ldr	r0, [pc, #16]	@ (8000ff0 <MX_FREERTOS_Init+0x1c>)
 8000fde:	f006 fdbb 	bl	8007b58 <osThreadNew>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	4a03      	ldr	r2, [pc, #12]	@ (8000ff4 <MX_FREERTOS_Init+0x20>)
 8000fe6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	0801a8e0 	.word	0x0801a8e0
 8000ff0:	08001bb1 	.word	0x08001bb1
 8000ff4:	200009bc 	.word	0x200009bc

08000ff8 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	@ 0x28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001000:	2300      	movs	r3, #0
 8001002:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001004:	f007 fe7c 	bl	8008d00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001008:	4b5a      	ldr	r3, [pc, #360]	@ (8001174 <pvPortMallocMicroROS+0x17c>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d101      	bne.n	8001014 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8001010:	f000 f986 	bl	8001320 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001014:	4b58      	ldr	r3, [pc, #352]	@ (8001178 <pvPortMallocMicroROS+0x180>)
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4013      	ands	r3, r2
 800101c:	2b00      	cmp	r3, #0
 800101e:	f040 8090 	bne.w	8001142 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d01e      	beq.n	8001066 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8001028:	2208      	movs	r2, #8
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4413      	add	r3, r2
 800102e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	2b00      	cmp	r3, #0
 8001038:	d015      	beq.n	8001066 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f023 0307 	bic.w	r3, r3, #7
 8001040:	3308      	adds	r3, #8
 8001042:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f003 0307 	and.w	r3, r3, #7
 800104a:	2b00      	cmp	r3, #0
 800104c:	d00b      	beq.n	8001066 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800104e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001052:	f383 8811 	msr	BASEPRI, r3
 8001056:	f3bf 8f6f 	isb	sy
 800105a:	f3bf 8f4f 	dsb	sy
 800105e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001060:	bf00      	nop
 8001062:	bf00      	nop
 8001064:	e7fd      	b.n	8001062 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d06a      	beq.n	8001142 <pvPortMallocMicroROS+0x14a>
 800106c:	4b43      	ldr	r3, [pc, #268]	@ (800117c <pvPortMallocMicroROS+0x184>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	429a      	cmp	r2, r3
 8001074:	d865      	bhi.n	8001142 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001076:	4b42      	ldr	r3, [pc, #264]	@ (8001180 <pvPortMallocMicroROS+0x188>)
 8001078:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800107a:	4b41      	ldr	r3, [pc, #260]	@ (8001180 <pvPortMallocMicroROS+0x188>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001080:	e004      	b.n	800108c <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8001082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001084:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800108c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	429a      	cmp	r2, r3
 8001094:	d903      	bls.n	800109e <pvPortMallocMicroROS+0xa6>
 8001096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d1f1      	bne.n	8001082 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800109e:	4b35      	ldr	r3, [pc, #212]	@ (8001174 <pvPortMallocMicroROS+0x17c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d04c      	beq.n	8001142 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80010a8:	6a3b      	ldr	r3, [r7, #32]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2208      	movs	r2, #8
 80010ae:	4413      	add	r3, r2
 80010b0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80010b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	6a3b      	ldr	r3, [r7, #32]
 80010b8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80010ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010bc:	685a      	ldr	r2, [r3, #4]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	1ad2      	subs	r2, r2, r3
 80010c2:	2308      	movs	r3, #8
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d920      	bls.n	800110c <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80010ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4413      	add	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	f003 0307 	and.w	r3, r3, #7
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d00b      	beq.n	80010f4 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 80010dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010e0:	f383 8811 	msr	BASEPRI, r3
 80010e4:	f3bf 8f6f 	isb	sy
 80010e8:	f3bf 8f4f 	dsb	sy
 80010ec:	613b      	str	r3, [r7, #16]
}
 80010ee:	bf00      	nop
 80010f0:	bf00      	nop
 80010f2:	e7fd      	b.n	80010f0 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80010f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f6:	685a      	ldr	r2, [r3, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	1ad2      	subs	r2, r2, r3
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001106:	69b8      	ldr	r0, [r7, #24]
 8001108:	f000 f96c 	bl	80013e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800110c:	4b1b      	ldr	r3, [pc, #108]	@ (800117c <pvPortMallocMicroROS+0x184>)
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	4a19      	ldr	r2, [pc, #100]	@ (800117c <pvPortMallocMicroROS+0x184>)
 8001118:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800111a:	4b18      	ldr	r3, [pc, #96]	@ (800117c <pvPortMallocMicroROS+0x184>)
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	4b19      	ldr	r3, [pc, #100]	@ (8001184 <pvPortMallocMicroROS+0x18c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	429a      	cmp	r2, r3
 8001124:	d203      	bcs.n	800112e <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001126:	4b15      	ldr	r3, [pc, #84]	@ (800117c <pvPortMallocMicroROS+0x184>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a16      	ldr	r2, [pc, #88]	@ (8001184 <pvPortMallocMicroROS+0x18c>)
 800112c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800112e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001130:	685a      	ldr	r2, [r3, #4]
 8001132:	4b11      	ldr	r3, [pc, #68]	@ (8001178 <pvPortMallocMicroROS+0x180>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	431a      	orrs	r2, r3
 8001138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800113a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800113c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001142:	f007 fdeb 	bl	8008d1c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	f003 0307 	and.w	r3, r3, #7
 800114c:	2b00      	cmp	r3, #0
 800114e:	d00b      	beq.n	8001168 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8001150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001154:	f383 8811 	msr	BASEPRI, r3
 8001158:	f3bf 8f6f 	isb	sy
 800115c:	f3bf 8f4f 	dsb	sy
 8001160:	60fb      	str	r3, [r7, #12]
}
 8001162:	bf00      	nop
 8001164:	bf00      	nop
 8001166:	e7fd      	b.n	8001164 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8001168:	69fb      	ldr	r3, [r7, #28]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3728      	adds	r7, #40	@ 0x28
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20004504 	.word	0x20004504
 8001178:	20004510 	.word	0x20004510
 800117c:	20004508 	.word	0x20004508
 8001180:	200044fc 	.word	0x200044fc
 8001184:	2000450c 	.word	0x2000450c

08001188 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d04a      	beq.n	8001230 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800119a:	2308      	movs	r3, #8
 800119c:	425b      	negs	r3, r3
 800119e:	697a      	ldr	r2, [r7, #20]
 80011a0:	4413      	add	r3, r2
 80011a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	685a      	ldr	r2, [r3, #4]
 80011ac:	4b22      	ldr	r3, [pc, #136]	@ (8001238 <vPortFreeMicroROS+0xb0>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4013      	ands	r3, r2
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d10b      	bne.n	80011ce <vPortFreeMicroROS+0x46>
	__asm volatile
 80011b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011ba:	f383 8811 	msr	BASEPRI, r3
 80011be:	f3bf 8f6f 	isb	sy
 80011c2:	f3bf 8f4f 	dsb	sy
 80011c6:	60fb      	str	r3, [r7, #12]
}
 80011c8:	bf00      	nop
 80011ca:	bf00      	nop
 80011cc:	e7fd      	b.n	80011ca <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d00b      	beq.n	80011ee <vPortFreeMicroROS+0x66>
	__asm volatile
 80011d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011da:	f383 8811 	msr	BASEPRI, r3
 80011de:	f3bf 8f6f 	isb	sy
 80011e2:	f3bf 8f4f 	dsb	sy
 80011e6:	60bb      	str	r3, [r7, #8]
}
 80011e8:	bf00      	nop
 80011ea:	bf00      	nop
 80011ec:	e7fd      	b.n	80011ea <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	685a      	ldr	r2, [r3, #4]
 80011f2:	4b11      	ldr	r3, [pc, #68]	@ (8001238 <vPortFreeMicroROS+0xb0>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4013      	ands	r3, r2
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d019      	beq.n	8001230 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d115      	bne.n	8001230 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	685a      	ldr	r2, [r3, #4]
 8001208:	4b0b      	ldr	r3, [pc, #44]	@ (8001238 <vPortFreeMicroROS+0xb0>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	43db      	mvns	r3, r3
 800120e:	401a      	ands	r2, r3
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001214:	f007 fd74 	bl	8008d00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	685a      	ldr	r2, [r3, #4]
 800121c:	4b07      	ldr	r3, [pc, #28]	@ (800123c <vPortFreeMicroROS+0xb4>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4413      	add	r3, r2
 8001222:	4a06      	ldr	r2, [pc, #24]	@ (800123c <vPortFreeMicroROS+0xb4>)
 8001224:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001226:	6938      	ldr	r0, [r7, #16]
 8001228:	f000 f8dc 	bl	80013e4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800122c:	f007 fd76 	bl	8008d1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001230:	bf00      	nop
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20004510 	.word	0x20004510
 800123c:	20004508 	.word	0x20004508

08001240 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001240:	b480      	push	{r7}
 8001242:	b087      	sub	sp, #28
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 800124c:	2308      	movs	r3, #8
 800124e:	425b      	negs	r3, r3
 8001250:	697a      	ldr	r2, [r7, #20]
 8001252:	4413      	add	r3, r2
 8001254:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	685a      	ldr	r2, [r3, #4]
 800125e:	4b06      	ldr	r3, [pc, #24]	@ (8001278 <getBlockSize+0x38>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	43db      	mvns	r3, r3
 8001264:	4013      	ands	r3, r2
 8001266:	60fb      	str	r3, [r7, #12]

	return count;
 8001268:	68fb      	ldr	r3, [r7, #12]
}
 800126a:	4618      	mov	r0, r3
 800126c:	371c      	adds	r7, #28
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	20004510 	.word	0x20004510

0800127c <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001286:	f007 fd3b 	bl	8008d00 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800128a:	6838      	ldr	r0, [r7, #0]
 800128c:	f7ff feb4 	bl	8000ff8 <pvPortMallocMicroROS>
 8001290:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d017      	beq.n	80012c8 <pvPortReallocMicroROS+0x4c>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d014      	beq.n	80012c8 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7ff ffce 	bl	8001240 <getBlockSize>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2208      	movs	r2, #8
 80012a8:	1a9b      	subs	r3, r3, r2
 80012aa:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 80012ac:	683a      	ldr	r2, [r7, #0]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d201      	bcs.n	80012b8 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 80012b8:	68fa      	ldr	r2, [r7, #12]
 80012ba:	6879      	ldr	r1, [r7, #4]
 80012bc:	68b8      	ldr	r0, [r7, #8]
 80012be:	f018 f8f0 	bl	80194a2 <memcpy>

		vPortFreeMicroROS(pv);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff ff60 	bl	8001188 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 80012c8:	f007 fd28 	bl	8008d1c <xTaskResumeAll>

	return newmem;
 80012cc:	68bb      	ldr	r3, [r7, #8]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b086      	sub	sp, #24
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
 80012de:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80012e0:	f007 fd0e 	bl	8008d00 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	fb02 f303 	mul.w	r3, r2, r3
 80012ec:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80012ee:	6978      	ldr	r0, [r7, #20]
 80012f0:	f7ff fe82 	bl	8000ff8 <pvPortMallocMicroROS>
 80012f4:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	613b      	str	r3, [r7, #16]

  	while(count--)
 80012fa:	e004      	b.n	8001306 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	1c5a      	adds	r2, r3, #1
 8001300:	613a      	str	r2, [r7, #16]
 8001302:	2200      	movs	r2, #0
 8001304:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	1e5a      	subs	r2, r3, #1
 800130a:	617a      	str	r2, [r7, #20]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d1f5      	bne.n	80012fc <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001310:	f007 fd04 	bl	8008d1c <xTaskResumeAll>
  	return mem;
 8001314:	68fb      	ldr	r3, [r7, #12]
}
 8001316:	4618      	mov	r0, r3
 8001318:	3718      	adds	r7, #24
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
	...

08001320 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001326:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800132a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800132c:	4b27      	ldr	r3, [pc, #156]	@ (80013cc <prvHeapInit+0xac>)
 800132e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	2b00      	cmp	r3, #0
 8001338:	d00c      	beq.n	8001354 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	3307      	adds	r3, #7
 800133e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	f023 0307 	bic.w	r3, r3, #7
 8001346:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001348:	68ba      	ldr	r2, [r7, #8]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	4a1f      	ldr	r2, [pc, #124]	@ (80013cc <prvHeapInit+0xac>)
 8001350:	4413      	add	r3, r2
 8001352:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001358:	4a1d      	ldr	r2, [pc, #116]	@ (80013d0 <prvHeapInit+0xb0>)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800135e:	4b1c      	ldr	r3, [pc, #112]	@ (80013d0 <prvHeapInit+0xb0>)
 8001360:	2200      	movs	r2, #0
 8001362:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	68ba      	ldr	r2, [r7, #8]
 8001368:	4413      	add	r3, r2
 800136a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800136c:	2208      	movs	r2, #8
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	1a9b      	subs	r3, r3, r2
 8001372:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f023 0307 	bic.w	r3, r3, #7
 800137a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	4a15      	ldr	r2, [pc, #84]	@ (80013d4 <prvHeapInit+0xb4>)
 8001380:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001382:	4b14      	ldr	r3, [pc, #80]	@ (80013d4 <prvHeapInit+0xb4>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2200      	movs	r2, #0
 8001388:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800138a:	4b12      	ldr	r3, [pc, #72]	@ (80013d4 <prvHeapInit+0xb4>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	68fa      	ldr	r2, [r7, #12]
 800139a:	1ad2      	subs	r2, r2, r3
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80013a0:	4b0c      	ldr	r3, [pc, #48]	@ (80013d4 <prvHeapInit+0xb4>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	4a0a      	ldr	r2, [pc, #40]	@ (80013d8 <prvHeapInit+0xb8>)
 80013ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	4a09      	ldr	r2, [pc, #36]	@ (80013dc <prvHeapInit+0xbc>)
 80013b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80013b8:	4b09      	ldr	r3, [pc, #36]	@ (80013e0 <prvHeapInit+0xc0>)
 80013ba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80013be:	601a      	str	r2, [r3, #0]
}
 80013c0:	bf00      	nop
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	200038fc 	.word	0x200038fc
 80013d0:	200044fc 	.word	0x200044fc
 80013d4:	20004504 	.word	0x20004504
 80013d8:	2000450c 	.word	0x2000450c
 80013dc:	20004508 	.word	0x20004508
 80013e0:	20004510 	.word	0x20004510

080013e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80013ec:	4b28      	ldr	r3, [pc, #160]	@ (8001490 <prvInsertBlockIntoFreeList+0xac>)
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	e002      	b.n	80013f8 <prvInsertBlockIntoFreeList+0x14>
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	429a      	cmp	r2, r3
 8001400:	d8f7      	bhi.n	80013f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	68ba      	ldr	r2, [r7, #8]
 800140c:	4413      	add	r3, r2
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	429a      	cmp	r2, r3
 8001412:	d108      	bne.n	8001426 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	685a      	ldr	r2, [r3, #4]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	441a      	add	r2, r3
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	68ba      	ldr	r2, [r7, #8]
 8001430:	441a      	add	r2, r3
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	429a      	cmp	r2, r3
 8001438:	d118      	bne.n	800146c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	4b15      	ldr	r3, [pc, #84]	@ (8001494 <prvInsertBlockIntoFreeList+0xb0>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	429a      	cmp	r2, r3
 8001444:	d00d      	beq.n	8001462 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685a      	ldr	r2, [r3, #4]
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	441a      	add	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	e008      	b.n	8001474 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001462:	4b0c      	ldr	r3, [pc, #48]	@ (8001494 <prvInsertBlockIntoFreeList+0xb0>)
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	e003      	b.n	8001474 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001474:	68fa      	ldr	r2, [r7, #12]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	429a      	cmp	r2, r3
 800147a:	d002      	beq.n	8001482 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001482:	bf00      	nop
 8001484:	3714      	adds	r7, #20
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	200044fc 	.word	0x200044fc
 8001494:	20004504 	.word	0x20004504

08001498 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800149e:	4b16      	ldr	r3, [pc, #88]	@ (80014f8 <MX_DMA_Init+0x60>)
 80014a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014a2:	4a15      	ldr	r2, [pc, #84]	@ (80014f8 <MX_DMA_Init+0x60>)
 80014a4:	f043 0304 	orr.w	r3, r3, #4
 80014a8:	6493      	str	r3, [r2, #72]	@ 0x48
 80014aa:	4b13      	ldr	r3, [pc, #76]	@ (80014f8 <MX_DMA_Init+0x60>)
 80014ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014ae:	f003 0304 	and.w	r3, r3, #4
 80014b2:	607b      	str	r3, [r7, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014b6:	4b10      	ldr	r3, [pc, #64]	@ (80014f8 <MX_DMA_Init+0x60>)
 80014b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014ba:	4a0f      	ldr	r2, [pc, #60]	@ (80014f8 <MX_DMA_Init+0x60>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	6493      	str	r3, [r2, #72]	@ 0x48
 80014c2:	4b0d      	ldr	r3, [pc, #52]	@ (80014f8 <MX_DMA_Init+0x60>)
 80014c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	603b      	str	r3, [r7, #0]
 80014cc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2105      	movs	r1, #5
 80014d2:	200b      	movs	r0, #11
 80014d4:	f001 fa3e 	bl	8002954 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014d8:	200b      	movs	r0, #11
 80014da:	f001 fa55 	bl	8002988 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80014de:	2200      	movs	r2, #0
 80014e0:	2105      	movs	r1, #5
 80014e2:	200c      	movs	r0, #12
 80014e4:	f001 fa36 	bl	8002954 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80014e8:	200c      	movs	r0, #12
 80014ea:	f001 fa4d 	bl	8002988 <HAL_NVIC_EnableIRQ>

}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40021000 	.word	0x40021000

080014fc <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800150a:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 800150c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001510:	4904      	ldr	r1, [pc, #16]	@ (8001524 <cubemx_transport_open+0x28>)
 8001512:	68f8      	ldr	r0, [r7, #12]
 8001514:	f004 f9e2 	bl	80058dc <HAL_UART_Receive_DMA>
    return true;
 8001518:	2301      	movs	r3, #1
}
 800151a:	4618      	mov	r0, r3
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20004514 	.word	0x20004514

08001528 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001536:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001538:	68f8      	ldr	r0, [r7, #12]
 800153a:	f004 fa1b 	bl	8005974 <HAL_UART_DMAStop>
    return true;
 800153e:	2301      	movs	r3, #1
}
 8001540:	4618      	mov	r0, r3
 8001542:	3710      	adds	r7, #16
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
 8001554:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800155c:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001564:	2b20      	cmp	r3, #32
 8001566:	d11b      	bne.n	80015a0 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	b29b      	uxth	r3, r3
 800156c:	461a      	mov	r2, r3
 800156e:	68b9      	ldr	r1, [r7, #8]
 8001570:	6978      	ldr	r0, [r7, #20]
 8001572:	f004 f933 	bl	80057dc <HAL_UART_Transmit_DMA>
 8001576:	4603      	mov	r3, r0
 8001578:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800157a:	e002      	b.n	8001582 <cubemx_transport_write+0x3a>
            osDelay(1);
 800157c:	2001      	movs	r0, #1
 800157e:	f006 fb7d 	bl	8007c7c <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001582:	7cfb      	ldrb	r3, [r7, #19]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d104      	bne.n	8001592 <cubemx_transport_write+0x4a>
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800158e:	2b20      	cmp	r3, #32
 8001590:	d1f4      	bne.n	800157c <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 8001592:	7cfb      	ldrb	r3, [r7, #19]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d101      	bne.n	800159c <cubemx_transport_write+0x54>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	e002      	b.n	80015a2 <cubemx_transport_write+0x5a>
 800159c:	2300      	movs	r3, #0
 800159e:	e000      	b.n	80015a2 <cubemx_transport_write+0x5a>
    }else{
        return 0;
 80015a0:	2300      	movs	r3, #0
    }
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3718      	adds	r7, #24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
	...

080015ac <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b088      	sub	sp, #32
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
 80015b8:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80015c0:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015c6:	b672      	cpsid	i
}
 80015c8:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80015d8:	4a1b      	ldr	r2, [pc, #108]	@ (8001648 <cubemx_transport_read+0x9c>)
 80015da:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80015dc:	b662      	cpsie	i
}
 80015de:	bf00      	nop
        __enable_irq();
        ms_used++;
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	3301      	adds	r3, #1
 80015e4:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80015e6:	2001      	movs	r0, #1
 80015e8:	f006 fb48 	bl	8007c7c <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80015ec:	4b17      	ldr	r3, [pc, #92]	@ (800164c <cubemx_transport_read+0xa0>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	4b15      	ldr	r3, [pc, #84]	@ (8001648 <cubemx_transport_read+0x9c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d103      	bne.n	8001600 <cubemx_transport_read+0x54>
 80015f8:	69fa      	ldr	r2, [r7, #28]
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	dbe2      	blt.n	80015c6 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001604:	e011      	b.n	800162a <cubemx_transport_read+0x7e>
        buf[wrote] = dma_buffer[dma_head];
 8001606:	4b11      	ldr	r3, [pc, #68]	@ (800164c <cubemx_transport_read+0xa0>)
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	68b9      	ldr	r1, [r7, #8]
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	440b      	add	r3, r1
 8001610:	490f      	ldr	r1, [pc, #60]	@ (8001650 <cubemx_transport_read+0xa4>)
 8001612:	5c8a      	ldrb	r2, [r1, r2]
 8001614:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8001616:	4b0d      	ldr	r3, [pc, #52]	@ (800164c <cubemx_transport_read+0xa0>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	3301      	adds	r3, #1
 800161c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001620:	4a0a      	ldr	r2, [pc, #40]	@ (800164c <cubemx_transport_read+0xa0>)
 8001622:	6013      	str	r3, [r2, #0]
        wrote++;
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	3301      	adds	r3, #1
 8001628:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 800162a:	4b08      	ldr	r3, [pc, #32]	@ (800164c <cubemx_transport_read+0xa0>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	4b06      	ldr	r3, [pc, #24]	@ (8001648 <cubemx_transport_read+0x9c>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	429a      	cmp	r2, r3
 8001634:	d003      	beq.n	800163e <cubemx_transport_read+0x92>
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	429a      	cmp	r2, r3
 800163c:	d3e3      	bcc.n	8001606 <cubemx_transport_read+0x5a>
    }
    
    return wrote;
 800163e:	69bb      	ldr	r3, [r7, #24]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3720      	adds	r7, #32
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20004d18 	.word	0x20004d18
 800164c:	20004d14 	.word	0x20004d14
 8001650:	20004514 	.word	0x20004514

08001654 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08a      	sub	sp, #40	@ 0x28
 8001658:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165a:	f107 0314 	add.w	r3, r7, #20
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]
 8001664:	609a      	str	r2, [r3, #8]
 8001666:	60da      	str	r2, [r3, #12]
 8001668:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800166a:	4b2f      	ldr	r3, [pc, #188]	@ (8001728 <MX_GPIO_Init+0xd4>)
 800166c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800166e:	4a2e      	ldr	r2, [pc, #184]	@ (8001728 <MX_GPIO_Init+0xd4>)
 8001670:	f043 0304 	orr.w	r3, r3, #4
 8001674:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001676:	4b2c      	ldr	r3, [pc, #176]	@ (8001728 <MX_GPIO_Init+0xd4>)
 8001678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800167a:	f003 0304 	and.w	r3, r3, #4
 800167e:	613b      	str	r3, [r7, #16]
 8001680:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001682:	4b29      	ldr	r3, [pc, #164]	@ (8001728 <MX_GPIO_Init+0xd4>)
 8001684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001686:	4a28      	ldr	r2, [pc, #160]	@ (8001728 <MX_GPIO_Init+0xd4>)
 8001688:	f043 0320 	orr.w	r3, r3, #32
 800168c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800168e:	4b26      	ldr	r3, [pc, #152]	@ (8001728 <MX_GPIO_Init+0xd4>)
 8001690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001692:	f003 0320 	and.w	r3, r3, #32
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800169a:	4b23      	ldr	r3, [pc, #140]	@ (8001728 <MX_GPIO_Init+0xd4>)
 800169c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800169e:	4a22      	ldr	r2, [pc, #136]	@ (8001728 <MX_GPIO_Init+0xd4>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016a6:	4b20      	ldr	r3, [pc, #128]	@ (8001728 <MX_GPIO_Init+0xd4>)
 80016a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	60bb      	str	r3, [r7, #8]
 80016b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001728 <MX_GPIO_Init+0xd4>)
 80016b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001728 <MX_GPIO_Init+0xd4>)
 80016b8:	f043 0302 	orr.w	r3, r3, #2
 80016bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016be:	4b1a      	ldr	r3, [pc, #104]	@ (8001728 <MX_GPIO_Init+0xd4>)
 80016c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	607b      	str	r3, [r7, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016ca:	2200      	movs	r2, #0
 80016cc:	2120      	movs	r1, #32
 80016ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016d2:	f001 fe27 	bl	8003324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016dc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80016e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016e6:	f107 0314 	add.w	r3, r7, #20
 80016ea:	4619      	mov	r1, r3
 80016ec:	480f      	ldr	r0, [pc, #60]	@ (800172c <MX_GPIO_Init+0xd8>)
 80016ee:	f001 fc97 	bl	8003020 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80016f2:	2320      	movs	r3, #32
 80016f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f6:	2301      	movs	r3, #1
 80016f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fe:	2300      	movs	r3, #0
 8001700:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001702:	f107 0314 	add.w	r3, r7, #20
 8001706:	4619      	mov	r1, r3
 8001708:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800170c:	f001 fc88 	bl	8003020 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001710:	2200      	movs	r2, #0
 8001712:	2105      	movs	r1, #5
 8001714:	2028      	movs	r0, #40	@ 0x28
 8001716:	f001 f91d 	bl	8002954 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800171a:	2028      	movs	r0, #40	@ 0x28
 800171c:	f001 f934 	bl	8002988 <HAL_NVIC_EnableIRQ>

}
 8001720:	bf00      	nop
 8001722:	3728      	adds	r7, #40	@ 0x28
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40021000 	.word	0x40021000
 800172c:	48000800 	.word	0x48000800

08001730 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001734:	4b1b      	ldr	r3, [pc, #108]	@ (80017a4 <MX_I2C1_Init+0x74>)
 8001736:	4a1c      	ldr	r2, [pc, #112]	@ (80017a8 <MX_I2C1_Init+0x78>)
 8001738:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40621236;
 800173a:	4b1a      	ldr	r3, [pc, #104]	@ (80017a4 <MX_I2C1_Init+0x74>)
 800173c:	4a1b      	ldr	r2, [pc, #108]	@ (80017ac <MX_I2C1_Init+0x7c>)
 800173e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001740:	4b18      	ldr	r3, [pc, #96]	@ (80017a4 <MX_I2C1_Init+0x74>)
 8001742:	2200      	movs	r2, #0
 8001744:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001746:	4b17      	ldr	r3, [pc, #92]	@ (80017a4 <MX_I2C1_Init+0x74>)
 8001748:	2201      	movs	r2, #1
 800174a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800174c:	4b15      	ldr	r3, [pc, #84]	@ (80017a4 <MX_I2C1_Init+0x74>)
 800174e:	2200      	movs	r2, #0
 8001750:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001752:	4b14      	ldr	r3, [pc, #80]	@ (80017a4 <MX_I2C1_Init+0x74>)
 8001754:	2200      	movs	r2, #0
 8001756:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001758:	4b12      	ldr	r3, [pc, #72]	@ (80017a4 <MX_I2C1_Init+0x74>)
 800175a:	2200      	movs	r2, #0
 800175c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800175e:	4b11      	ldr	r3, [pc, #68]	@ (80017a4 <MX_I2C1_Init+0x74>)
 8001760:	2200      	movs	r2, #0
 8001762:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001764:	4b0f      	ldr	r3, [pc, #60]	@ (80017a4 <MX_I2C1_Init+0x74>)
 8001766:	2200      	movs	r2, #0
 8001768:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800176a:	480e      	ldr	r0, [pc, #56]	@ (80017a4 <MX_I2C1_Init+0x74>)
 800176c:	f001 fe15 	bl	800339a <HAL_I2C_Init>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001776:	f000 fba7 	bl	8001ec8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800177a:	2100      	movs	r1, #0
 800177c:	4809      	ldr	r0, [pc, #36]	@ (80017a4 <MX_I2C1_Init+0x74>)
 800177e:	f002 fb97 	bl	8003eb0 <HAL_I2CEx_ConfigAnalogFilter>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001788:	f000 fb9e 	bl	8001ec8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800178c:	2100      	movs	r1, #0
 800178e:	4805      	ldr	r0, [pc, #20]	@ (80017a4 <MX_I2C1_Init+0x74>)
 8001790:	f002 fbd9 	bl	8003f46 <HAL_I2CEx_ConfigDigitalFilter>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800179a:	f000 fb95 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20004d1c 	.word	0x20004d1c
 80017a8:	40005400 	.word	0x40005400
 80017ac:	40621236 	.word	0x40621236

080017b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b09e      	sub	sp, #120	@ 0x78
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
 80017c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017c8:	f107 0310 	add.w	r3, r7, #16
 80017cc:	2254      	movs	r2, #84	@ 0x54
 80017ce:	2100      	movs	r1, #0
 80017d0:	4618      	mov	r0, r3
 80017d2:	f017 fd9d 	bl	8019310 <memset>
  if(i2cHandle->Instance==I2C1)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a1f      	ldr	r2, [pc, #124]	@ (8001858 <HAL_I2C_MspInit+0xa8>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d136      	bne.n	800184e <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80017e0:	2340      	movs	r3, #64	@ 0x40
 80017e2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80017e4:	2300      	movs	r3, #0
 80017e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017e8:	f107 0310 	add.w	r3, r7, #16
 80017ec:	4618      	mov	r0, r3
 80017ee:	f003 fa0b 	bl	8004c08 <HAL_RCCEx_PeriphCLKConfig>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80017f8:	f000 fb66 	bl	8001ec8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fc:	4b17      	ldr	r3, [pc, #92]	@ (800185c <HAL_I2C_MspInit+0xac>)
 80017fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001800:	4a16      	ldr	r2, [pc, #88]	@ (800185c <HAL_I2C_MspInit+0xac>)
 8001802:	f043 0302 	orr.w	r3, r3, #2
 8001806:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001808:	4b14      	ldr	r3, [pc, #80]	@ (800185c <HAL_I2C_MspInit+0xac>)
 800180a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800180c:	f003 0302 	and.w	r3, r3, #2
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001814:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001818:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800181a:	2312      	movs	r3, #18
 800181c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001822:	2300      	movs	r3, #0
 8001824:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001826:	2304      	movs	r3, #4
 8001828:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800182e:	4619      	mov	r1, r3
 8001830:	480b      	ldr	r0, [pc, #44]	@ (8001860 <HAL_I2C_MspInit+0xb0>)
 8001832:	f001 fbf5 	bl	8003020 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001836:	4b09      	ldr	r3, [pc, #36]	@ (800185c <HAL_I2C_MspInit+0xac>)
 8001838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800183a:	4a08      	ldr	r2, [pc, #32]	@ (800185c <HAL_I2C_MspInit+0xac>)
 800183c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001840:	6593      	str	r3, [r2, #88]	@ 0x58
 8001842:	4b06      	ldr	r3, [pc, #24]	@ (800185c <HAL_I2C_MspInit+0xac>)
 8001844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001846:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800184a:	60bb      	str	r3, [r7, #8]
 800184c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800184e:	bf00      	nop
 8001850:	3778      	adds	r7, #120	@ 0x78
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40005400 	.word	0x40005400
 800185c:	40021000 	.word	0x40021000
 8001860:	48000400 	.word	0x48000400
 8001864:	00000000 	.word	0x00000000

08001868 <pub_mpu6050>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void pub_mpu6050(){
 8001868:	b590      	push	{r4, r7, lr}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
	// Set value in mpu6050_msg
	mpu6050_msg.header.frame_id = micro_ros_string_utilities_init("mpu6050_frame");
 800186e:	4c5a      	ldr	r4, [pc, #360]	@ (80019d8 <pub_mpu6050+0x170>)
 8001870:	463b      	mov	r3, r7
 8001872:	495a      	ldr	r1, [pc, #360]	@ (80019dc <pub_mpu6050+0x174>)
 8001874:	4618      	mov	r0, r3
 8001876:	f009 f8c9 	bl	800aa0c <micro_ros_string_utilities_init>
 800187a:	f104 0308 	add.w	r3, r4, #8
 800187e:	463a      	mov	r2, r7
 8001880:	ca07      	ldmia	r2, {r0, r1, r2}
 8001882:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	mpu6050_msg.header.stamp.sec = rmw_uros_epoch_millis()/1000;
 8001886:	f00c fd9f 	bl	800e3c8 <rmw_uros_epoch_millis>
 800188a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800188e:	f04f 0300 	mov.w	r3, #0
 8001892:	f7ff f999 	bl	8000bc8 <__aeabi_ldivmod>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	4b4f      	ldr	r3, [pc, #316]	@ (80019d8 <pub_mpu6050+0x170>)
 800189c:	601a      	str	r2, [r3, #0]
	mpu6050_msg.header.stamp.nanosec = rmw_uros_epoch_nanos();
 800189e:	f00c fda1 	bl	800e3e4 <rmw_uros_epoch_nanos>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	4b4c      	ldr	r3, [pc, #304]	@ (80019d8 <pub_mpu6050+0x170>)
 80018a8:	605a      	str	r2, [r3, #4]

	mpu6050_msg.linear_acceleration.x = G2M_S2 * MPU6050.Ax - accel_offset.x;
 80018aa:	4b4d      	ldr	r3, [pc, #308]	@ (80019e0 <pub_mpu6050+0x178>)
 80018ac:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80018b0:	a345      	add	r3, pc, #276	@ (adr r3, 80019c8 <pub_mpu6050+0x160>)
 80018b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b6:	f7fe fed7 	bl	8000668 <__aeabi_dmul>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	4610      	mov	r0, r2
 80018c0:	4619      	mov	r1, r3
 80018c2:	4b48      	ldr	r3, [pc, #288]	@ (80019e4 <pub_mpu6050+0x17c>)
 80018c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c8:	f7fe fd16 	bl	80002f8 <__aeabi_dsub>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	4941      	ldr	r1, [pc, #260]	@ (80019d8 <pub_mpu6050+0x170>)
 80018d2:	e9c1 2338 	strd	r2, r3, [r1, #224]	@ 0xe0
	mpu6050_msg.linear_acceleration.y = G2M_S2 * MPU6050.Ay - accel_offset.y;
 80018d6:	4b42      	ldr	r3, [pc, #264]	@ (80019e0 <pub_mpu6050+0x178>)
 80018d8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80018dc:	a33a      	add	r3, pc, #232	@ (adr r3, 80019c8 <pub_mpu6050+0x160>)
 80018de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e2:	f7fe fec1 	bl	8000668 <__aeabi_dmul>
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	4610      	mov	r0, r2
 80018ec:	4619      	mov	r1, r3
 80018ee:	4b3d      	ldr	r3, [pc, #244]	@ (80019e4 <pub_mpu6050+0x17c>)
 80018f0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018f4:	f7fe fd00 	bl	80002f8 <__aeabi_dsub>
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	4936      	ldr	r1, [pc, #216]	@ (80019d8 <pub_mpu6050+0x170>)
 80018fe:	e9c1 233a 	strd	r2, r3, [r1, #232]	@ 0xe8
	mpu6050_msg.linear_acceleration.z = G2M_S2 * MPU6050.Az - accel_offset.z;
 8001902:	4b37      	ldr	r3, [pc, #220]	@ (80019e0 <pub_mpu6050+0x178>)
 8001904:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001908:	a32f      	add	r3, pc, #188	@ (adr r3, 80019c8 <pub_mpu6050+0x160>)
 800190a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800190e:	f7fe feab 	bl	8000668 <__aeabi_dmul>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	4610      	mov	r0, r2
 8001918:	4619      	mov	r1, r3
 800191a:	4b32      	ldr	r3, [pc, #200]	@ (80019e4 <pub_mpu6050+0x17c>)
 800191c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001920:	f7fe fcea 	bl	80002f8 <__aeabi_dsub>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	492b      	ldr	r1, [pc, #172]	@ (80019d8 <pub_mpu6050+0x170>)
 800192a:	e9c1 233c 	strd	r2, r3, [r1, #240]	@ 0xf0

	mpu6050_msg.angular_velocity.x = DEG2RAD * MPU6050.Gx - gyro_offset.x;
 800192e:	4b2c      	ldr	r3, [pc, #176]	@ (80019e0 <pub_mpu6050+0x178>)
 8001930:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001934:	a326      	add	r3, pc, #152	@ (adr r3, 80019d0 <pub_mpu6050+0x168>)
 8001936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193a:	f7fe fe95 	bl	8000668 <__aeabi_dmul>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	4610      	mov	r0, r2
 8001944:	4619      	mov	r1, r3
 8001946:	4b28      	ldr	r3, [pc, #160]	@ (80019e8 <pub_mpu6050+0x180>)
 8001948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194c:	f7fe fcd4 	bl	80002f8 <__aeabi_dsub>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4920      	ldr	r1, [pc, #128]	@ (80019d8 <pub_mpu6050+0x170>)
 8001956:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
	mpu6050_msg.angular_velocity.y = DEG2RAD * MPU6050.Gy - gyro_offset.y;
 800195a:	4b21      	ldr	r3, [pc, #132]	@ (80019e0 <pub_mpu6050+0x178>)
 800195c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8001960:	a31b      	add	r3, pc, #108	@ (adr r3, 80019d0 <pub_mpu6050+0x168>)
 8001962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001966:	f7fe fe7f 	bl	8000668 <__aeabi_dmul>
 800196a:	4602      	mov	r2, r0
 800196c:	460b      	mov	r3, r1
 800196e:	4610      	mov	r0, r2
 8001970:	4619      	mov	r1, r3
 8001972:	4b1d      	ldr	r3, [pc, #116]	@ (80019e8 <pub_mpu6050+0x180>)
 8001974:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001978:	f7fe fcbe 	bl	80002f8 <__aeabi_dsub>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	4915      	ldr	r1, [pc, #84]	@ (80019d8 <pub_mpu6050+0x170>)
 8001982:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
	mpu6050_msg.angular_velocity.z = DEG2RAD * MPU6050.Gz - gyro_offset.z;
 8001986:	4b16      	ldr	r3, [pc, #88]	@ (80019e0 <pub_mpu6050+0x178>)
 8001988:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800198c:	a310      	add	r3, pc, #64	@ (adr r3, 80019d0 <pub_mpu6050+0x168>)
 800198e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001992:	f7fe fe69 	bl	8000668 <__aeabi_dmul>
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	4610      	mov	r0, r2
 800199c:	4619      	mov	r1, r3
 800199e:	4b12      	ldr	r3, [pc, #72]	@ (80019e8 <pub_mpu6050+0x180>)
 80019a0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80019a4:	f7fe fca8 	bl	80002f8 <__aeabi_dsub>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	490a      	ldr	r1, [pc, #40]	@ (80019d8 <pub_mpu6050+0x170>)
 80019ae:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90

	// Publish mpu6050 data
	RCSOFTCHECK(rcl_publish(&mpu6050_publisher, &mpu6050_msg, NULL));
 80019b2:	2200      	movs	r2, #0
 80019b4:	4908      	ldr	r1, [pc, #32]	@ (80019d8 <pub_mpu6050+0x170>)
 80019b6:	480d      	ldr	r0, [pc, #52]	@ (80019ec <pub_mpu6050+0x184>)
 80019b8:	f00a fd9c 	bl	800c4f4 <rcl_publish>
}
 80019bc:	bf00      	nop
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd90      	pop	{r4, r7, pc}
 80019c4:	f3af 8000 	nop.w
 80019c8:	51eb851f 	.word	0x51eb851f
 80019cc:	40239eb8 	.word	0x40239eb8
 80019d0:	a2529d39 	.word	0xa2529d39
 80019d4:	3f91df46 	.word	0x3f91df46
 80019d8:	20004fb0 	.word	0x20004fb0
 80019dc:	0801a82c 	.word	0x0801a82c
 80019e0:	200050f0 	.word	0x200050f0
 80019e4:	20005148 	.word	0x20005148
 80019e8:	20005160 	.word	0x20005160
 80019ec:	20004e50 	.word	0x20004e50

080019f0 <service_callback>:

void service_callback(const void * request_msg, void * response_msg){
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  imu_interfaces__srv__ImuCalibration_Request * req_in = (imu_interfaces__srv__ImuCalibration_Request *) request_msg;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	613b      	str	r3, [r7, #16]
  imu_interfaces__srv__ImuCalibration_Response* res_in = (imu_interfaces__srv__ImuCalibration_Response *) response_msg;
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	60fb      	str	r3, [r7, #12]

  for(int i=0 ; i<9 ; i++){
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]
 8001a06:	e01e      	b.n	8001a46 <service_callback+0x56>
	  mpu6050_msg.linear_acceleration_covariance[i] = req_in->imu_calib.linear_acceleration_covariance[i];
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	331f      	adds	r3, #31
 8001a0e:	00db      	lsls	r3, r3, #3
 8001a10:	4413      	add	r3, r2
 8001a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a16:	4827      	ldr	r0, [pc, #156]	@ (8001ab4 <service_callback+0xc4>)
 8001a18:	6979      	ldr	r1, [r7, #20]
 8001a1a:	311f      	adds	r1, #31
 8001a1c:	00c9      	lsls	r1, r1, #3
 8001a1e:	4401      	add	r1, r0
 8001a20:	e9c1 2300 	strd	r2, r3, [r1]
	  mpu6050_msg.angular_velocity_covariance[i] = req_in->imu_calib.angular_velocity_covariance[i];
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	3313      	adds	r3, #19
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	4413      	add	r3, r2
 8001a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a32:	4820      	ldr	r0, [pc, #128]	@ (8001ab4 <service_callback+0xc4>)
 8001a34:	6979      	ldr	r1, [r7, #20]
 8001a36:	3113      	adds	r1, #19
 8001a38:	00c9      	lsls	r1, r1, #3
 8001a3a:	4401      	add	r1, r0
 8001a3c:	e9c1 2300 	strd	r2, r3, [r1]
  for(int i=0 ; i<9 ; i++){
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	3301      	adds	r3, #1
 8001a44:	617b      	str	r3, [r7, #20]
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	2b08      	cmp	r3, #8
 8001a4a:	dddd      	ble.n	8001a08 <service_callback+0x18>
  }

  accel_offset.x = req_in->imu_calib.linear_acceleration.x;
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	@ 0xe0
 8001a52:	4919      	ldr	r1, [pc, #100]	@ (8001ab8 <service_callback+0xc8>)
 8001a54:	e9c1 2300 	strd	r2, r3, [r1]
  accel_offset.y = req_in->imu_calib.linear_acceleration.y;
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	@ 0xe8
 8001a5e:	4916      	ldr	r1, [pc, #88]	@ (8001ab8 <service_callback+0xc8>)
 8001a60:	e9c1 2302 	strd	r2, r3, [r1, #8]
  accel_offset.z = req_in->imu_calib.linear_acceleration.z;
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	@ 0xf0
 8001a6a:	4913      	ldr	r1, [pc, #76]	@ (8001ab8 <service_callback+0xc8>)
 8001a6c:	e9c1 2304 	strd	r2, r3, [r1, #16]

  gyro_offset.x = req_in->imu_calib.angular_velocity.x;
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 8001a76:	4911      	ldr	r1, [pc, #68]	@ (8001abc <service_callback+0xcc>)
 8001a78:	e9c1 2300 	strd	r2, r3, [r1]
  gyro_offset.y = req_in->imu_calib.angular_velocity.y;
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8001a82:	490e      	ldr	r1, [pc, #56]	@ (8001abc <service_callback+0xcc>)
 8001a84:	e9c1 2302 	strd	r2, r3, [r1, #8]
  gyro_offset.z = req_in->imu_calib.angular_velocity.z;
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8001a8e:	490b      	ldr	r1, [pc, #44]	@ (8001abc <service_callback+0xcc>)
 8001a90:	e9c1 2304 	strd	r2, r3, [r1, #16]

  res_in->success = true;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2201      	movs	r2, #1
 8001a98:	701a      	strb	r2, [r3, #0]
  is_calibrate = true;
 8001a9a:	4b09      	ldr	r3, [pc, #36]	@ (8001ac0 <service_callback+0xd0>)
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	701a      	strb	r2, [r3, #0]

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	2120      	movs	r1, #32
 8001aa4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001aa8:	f001 fc3c 	bl	8003324 <HAL_GPIO_WritePin>
}
 8001aac:	bf00      	nop
 8001aae:	3718      	adds	r7, #24
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	20004fb0 	.word	0x20004fb0
 8001ab8:	20005148 	.word	0x20005148
 8001abc:	20005160 	.word	0x20005160
 8001ac0:	20005178 	.word	0x20005178
 8001ac4:	00000000 	.word	0x00000000

08001ac8 <imu_status_service_callback>:

void imu_status_service_callback(const void * request_msg, void * response_msg){
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  imu_interfaces__srv__ImuStatus_Request * req_in = (imu_interfaces__srv__ImuStatus_Request *) request_msg;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	617b      	str	r3, [r7, #20]
  imu_interfaces__srv__ImuStatus_Response * res_in = (imu_interfaces__srv__ImuStatus_Response *) response_msg;
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	613b      	str	r3, [r7, #16]

  if (req_in->imu_status_check.data){
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d037      	beq.n	8001b52 <imu_status_service_callback+0x8a>
	  if(is_calibrate){
 8001ae2:	4b23      	ldr	r3, [pc, #140]	@ (8001b70 <imu_status_service_callback+0xa8>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d030      	beq.n	8001b4c <imu_status_service_callback+0x84>
		  double g = G2M_S2 * MPU6050.Az - accel_offset.z;
 8001aea:	4b22      	ldr	r3, [pc, #136]	@ (8001b74 <imu_status_service_callback+0xac>)
 8001aec:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001af0:	a31b      	add	r3, pc, #108	@ (adr r3, 8001b60 <imu_status_service_callback+0x98>)
 8001af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af6:	f7fe fdb7 	bl	8000668 <__aeabi_dmul>
 8001afa:	4602      	mov	r2, r0
 8001afc:	460b      	mov	r3, r1
 8001afe:	4610      	mov	r0, r2
 8001b00:	4619      	mov	r1, r3
 8001b02:	4b1d      	ldr	r3, [pc, #116]	@ (8001b78 <imu_status_service_callback+0xb0>)
 8001b04:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001b08:	f7fe fbf6 	bl	80002f8 <__aeabi_dsub>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	e9c7 2302 	strd	r2, r3, [r7, #8]
		  if( g >= 9.0 && g <= 10.8) {
 8001b14:	f04f 0200 	mov.w	r2, #0
 8001b18:	4b18      	ldr	r3, [pc, #96]	@ (8001b7c <imu_status_service_callback+0xb4>)
 8001b1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b1e:	f7ff f829 	bl	8000b74 <__aeabi_dcmpge>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d00d      	beq.n	8001b44 <imu_status_service_callback+0x7c>
 8001b28:	a30f      	add	r3, pc, #60	@ (adr r3, 8001b68 <imu_status_service_callback+0xa0>)
 8001b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b32:	f7ff f815 	bl	8000b60 <__aeabi_dcmple>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d003      	beq.n	8001b44 <imu_status_service_callback+0x7c>
			  res_in->imu_status.data = true;
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	701a      	strb	r2, [r3, #0]
		}
	  }else {
		  res_in->imu_status.data   = false;
	}
  }
}
 8001b42:	e006      	b.n	8001b52 <imu_status_service_callback+0x8a>
			  res_in->imu_status.data = false;
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	2200      	movs	r2, #0
 8001b48:	701a      	strb	r2, [r3, #0]
}
 8001b4a:	e002      	b.n	8001b52 <imu_status_service_callback+0x8a>
		  res_in->imu_status.data   = false;
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	701a      	strb	r2, [r3, #0]
}
 8001b52:	bf00      	nop
 8001b54:	3718      	adds	r7, #24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	f3af 8000 	nop.w
 8001b60:	51eb851f 	.word	0x51eb851f
 8001b64:	40239eb8 	.word	0x40239eb8
 8001b68:	9999999a 	.word	0x9999999a
 8001b6c:	40259999 	.word	0x40259999
 8001b70:	20005178 	.word	0x20005178
 8001b74:	200050f0 	.word	0x200050f0
 8001b78:	20005148 	.word	0x20005148
 8001b7c:	40220000 	.word	0x40220000

08001b80 <timer_callback>:

void timer_callback(rcl_timer_t * timer, int64_t last_call_time){
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	e9c7 2300 	strd	r2, r3, [r7]
	if (timer != NULL) {
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d005      	beq.n	8001b9e <timer_callback+0x1e>
		// Read mpu6050
		MPU6050_Read_All(&hi2c1, &MPU6050);
 8001b92:	4905      	ldr	r1, [pc, #20]	@ (8001ba8 <timer_callback+0x28>)
 8001b94:	4805      	ldr	r0, [pc, #20]	@ (8001bac <timer_callback+0x2c>)
 8001b96:	f005 fc0f 	bl	80073b8 <MPU6050_Read_All>
		// call mpu6050 publish function
		pub_mpu6050();
 8001b9a:	f7ff fe65 	bl	8001868 <pub_mpu6050>
	}
}
 8001b9e:	bf00      	nop
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	200050f0 	.word	0x200050f0
 8001bac:	20004d1c 	.word	0x20004d1c

08001bb0 <StartDefaultTask>:

void StartDefaultTask(void *argument){
 8001bb0:	b5b0      	push	{r4, r5, r7, lr}
 8001bb2:	b0b2      	sub	sp, #200	@ 0xc8
 8001bb4:	af02      	add	r7, sp, #8
 8001bb6:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
  // micro-ROS configuration

  rmw_uros_set_custom_transport(
 8001bba:	4b63      	ldr	r3, [pc, #396]	@ (8001d48 <StartDefaultTask+0x198>)
 8001bbc:	9301      	str	r3, [sp, #4]
 8001bbe:	4b63      	ldr	r3, [pc, #396]	@ (8001d4c <StartDefaultTask+0x19c>)
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	4b63      	ldr	r3, [pc, #396]	@ (8001d50 <StartDefaultTask+0x1a0>)
 8001bc4:	4a63      	ldr	r2, [pc, #396]	@ (8001d54 <StartDefaultTask+0x1a4>)
 8001bc6:	4964      	ldr	r1, [pc, #400]	@ (8001d58 <StartDefaultTask+0x1a8>)
 8001bc8:	2001      	movs	r0, #1
 8001bca:	f00b fd21 	bl	800d610 <rmw_uros_set_custom_transport>
    cubemx_transport_open,
    cubemx_transport_close,
    cubemx_transport_write,
    cubemx_transport_read);

  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001bce:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f00b fc38 	bl	800d448 <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate = microros_allocate;
 8001bd8:	4b60      	ldr	r3, [pc, #384]	@ (8001d5c <StartDefaultTask+0x1ac>)
 8001bda:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  freeRTOS_allocator.deallocate = microros_deallocate;
 8001bde:	4b60      	ldr	r3, [pc, #384]	@ (8001d60 <StartDefaultTask+0x1b0>)
 8001be0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  freeRTOS_allocator.reallocate = microros_reallocate;
 8001be4:	4b5f      	ldr	r3, [pc, #380]	@ (8001d64 <StartDefaultTask+0x1b4>)
 8001be6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001bea:	4b5f      	ldr	r3, [pc, #380]	@ (8001d68 <StartDefaultTask+0x1b8>)
 8001bec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001bf0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f00b fc35 	bl	800d464 <rcutils_set_default_allocator>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	f083 0301 	eor.w	r3, r3, #1
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <StartDefaultTask+0x5e>
      printf("Error on default allocators (line %d)\n", __LINE__);
 8001c06:	21d7      	movs	r1, #215	@ 0xd7
 8001c08:	4858      	ldr	r0, [pc, #352]	@ (8001d6c <StartDefaultTask+0x1bc>)
 8001c0a:	f017 fa01 	bl	8019010 <iprintf>
  }

  // micro-ROS app
  allocator = rcl_get_default_allocator();
 8001c0e:	4c58      	ldr	r4, [pc, #352]	@ (8001d70 <StartDefaultTask+0x1c0>)
 8001c10:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001c14:	4618      	mov	r0, r3
 8001c16:	f00b fc43 	bl	800d4a0 <rcutils_get_default_allocator>
 8001c1a:	4625      	mov	r5, r4
 8001c1c:	f107 0488 	add.w	r4, r7, #136	@ 0x88
 8001c20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c24:	6823      	ldr	r3, [r4, #0]
 8001c26:	602b      	str	r3, [r5, #0]

  //create init_options
  init_options = rcl_get_zero_initialized_init_options();
 8001c28:	f00a fa94 	bl	800c154 <rcl_get_zero_initialized_init_options>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	4a51      	ldr	r2, [pc, #324]	@ (8001d74 <StartDefaultTask+0x1c4>)
 8001c30:	6013      	str	r3, [r2, #0]
  RCSOFTCHECK(rcl_init_options_init(&init_options, allocator));
 8001c32:	4b4f      	ldr	r3, [pc, #316]	@ (8001d70 <StartDefaultTask+0x1c0>)
 8001c34:	466c      	mov	r4, sp
 8001c36:	f103 020c 	add.w	r2, r3, #12
 8001c3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c3e:	e884 0003 	stmia.w	r4, {r0, r1}
 8001c42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c44:	484b      	ldr	r0, [pc, #300]	@ (8001d74 <StartDefaultTask+0x1c4>)
 8001c46:	f00a fa87 	bl	800c158 <rcl_init_options_init>
  RCSOFTCHECK(rcl_init_options_set_domain_id(&init_options, 50));
 8001c4a:	2132      	movs	r1, #50	@ 0x32
 8001c4c:	4849      	ldr	r0, [pc, #292]	@ (8001d74 <StartDefaultTask+0x1c4>)
 8001c4e:	f00a fb7f 	bl	800c350 <rcl_init_options_set_domain_id>

  rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 8001c52:	4b47      	ldr	r3, [pc, #284]	@ (8001d70 <StartDefaultTask+0x1c0>)
 8001c54:	9300      	str	r3, [sp, #0]
 8001c56:	4b47      	ldr	r3, [pc, #284]	@ (8001d74 <StartDefaultTask+0x1c4>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	4846      	ldr	r0, [pc, #280]	@ (8001d78 <StartDefaultTask+0x1c8>)
 8001c5e:	f00b fae3 	bl	800d228 <rclc_support_init_with_options>

  // create node
  rclc_node_init_default(&node, "mpu6050_node", "", &support);
 8001c62:	4b45      	ldr	r3, [pc, #276]	@ (8001d78 <StartDefaultTask+0x1c8>)
 8001c64:	4a45      	ldr	r2, [pc, #276]	@ (8001d7c <StartDefaultTask+0x1cc>)
 8001c66:	4946      	ldr	r1, [pc, #280]	@ (8001d80 <StartDefaultTask+0x1d0>)
 8001c68:	4846      	ldr	r0, [pc, #280]	@ (8001d84 <StartDefaultTask+0x1d4>)
 8001c6a:	f00b fb11 	bl	800d290 <rclc_node_init_default>

  // sync time
  rmw_uros_sync_session(1000);
 8001c6e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c72:	f00c fbc5 	bl	800e400 <rmw_uros_sync_session>

  // create timer
  rclc_timer_init_default(
	  &node_timer,
	  &support,
	  RCL_MS_TO_NS(dt*1000),
 8001c76:	4b44      	ldr	r3, [pc, #272]	@ (8001d88 <StartDefaultTask+0x1d8>)
 8001c78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c7c:	f04f 0200 	mov.w	r2, #0
 8001c80:	4b42      	ldr	r3, [pc, #264]	@ (8001d8c <StartDefaultTask+0x1dc>)
 8001c82:	f7fe fcf1 	bl	8000668 <__aeabi_dmul>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	4610      	mov	r0, r2
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	a32c      	add	r3, pc, #176	@ (adr r3, 8001d40 <StartDefaultTask+0x190>)
 8001c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c94:	f7fe fce8 	bl	8000668 <__aeabi_dmul>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
  rclc_timer_init_default(
 8001c9c:	4610      	mov	r0, r2
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	f7fe fffa 	bl	8000c98 <__aeabi_d2ulz>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	4939      	ldr	r1, [pc, #228]	@ (8001d90 <StartDefaultTask+0x1e0>)
 8001caa:	9100      	str	r1, [sp, #0]
 8001cac:	4932      	ldr	r1, [pc, #200]	@ (8001d78 <StartDefaultTask+0x1c8>)
 8001cae:	4839      	ldr	r0, [pc, #228]	@ (8001d94 <StartDefaultTask+0x1e4>)
 8001cb0:	f00b fb92 	bl	800d3d8 <rclc_timer_init_default>
	  timer_callback
  );

  // create publisher
  rclc_publisher_init_best_effort(
 8001cb4:	f00d f82a 	bl	800ed0c <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	4b37      	ldr	r3, [pc, #220]	@ (8001d98 <StartDefaultTask+0x1e8>)
 8001cbc:	4931      	ldr	r1, [pc, #196]	@ (8001d84 <StartDefaultTask+0x1d4>)
 8001cbe:	4837      	ldr	r0, [pc, #220]	@ (8001d9c <StartDefaultTask+0x1ec>)
 8001cc0:	f00b fb22 	bl	800d308 <rclc_publisher_init_best_effort>
  	  ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Imu),
  	  "mpu6050_publisher"
  );

  // create service
  rclc_service_init_default(
 8001cc4:	f008 fca8 	bl	800a618 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	4b35      	ldr	r3, [pc, #212]	@ (8001da0 <StartDefaultTask+0x1f0>)
 8001ccc:	492d      	ldr	r1, [pc, #180]	@ (8001d84 <StartDefaultTask+0x1d4>)
 8001cce:	4835      	ldr	r0, [pc, #212]	@ (8001da4 <StartDefaultTask+0x1f4>)
 8001cd0:	f00b fb4e 	bl	800d370 <rclc_service_init_default>
	  &node,
	  ROSIDL_GET_SRV_TYPE_SUPPORT(imu_interfaces, srv, ImuCalibration),
	  "mpu6050_calibration"
  );

  rclc_service_init_default(
 8001cd4:	f008 fcc0 	bl	800a658 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuStatus>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	4b33      	ldr	r3, [pc, #204]	@ (8001da8 <StartDefaultTask+0x1f8>)
 8001cdc:	4929      	ldr	r1, [pc, #164]	@ (8001d84 <StartDefaultTask+0x1d4>)
 8001cde:	4833      	ldr	r0, [pc, #204]	@ (8001dac <StartDefaultTask+0x1fc>)
 8001ce0:	f00b fb46 	bl	800d370 <rclc_service_init_default>
	  ROSIDL_GET_SRV_TYPE_SUPPORT(imu_interfaces, srv, ImuStatus),
	  "status"
  );

  // create executor
  executor = rclc_executor_get_zero_initialized_executor();
 8001ce4:	4c32      	ldr	r4, [pc, #200]	@ (8001db0 <StartDefaultTask+0x200>)
 8001ce6:	463b      	mov	r3, r7
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f00a ff91 	bl	800cc10 <rclc_executor_get_zero_initialized_executor>
 8001cee:	4620      	mov	r0, r4
 8001cf0:	463b      	mov	r3, r7
 8001cf2:	2288      	movs	r2, #136	@ 0x88
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	f017 fbd4 	bl	80194a2 <memcpy>
  rclc_executor_init(&executor, &support.context, 3, &allocator);
 8001cfa:	4b1d      	ldr	r3, [pc, #116]	@ (8001d70 <StartDefaultTask+0x1c0>)
 8001cfc:	2203      	movs	r2, #3
 8001cfe:	491e      	ldr	r1, [pc, #120]	@ (8001d78 <StartDefaultTask+0x1c8>)
 8001d00:	482b      	ldr	r0, [pc, #172]	@ (8001db0 <StartDefaultTask+0x200>)
 8001d02:	f00a ff91 	bl	800cc28 <rclc_executor_init>
  rclc_executor_add_timer(&executor, &node_timer);
 8001d06:	4923      	ldr	r1, [pc, #140]	@ (8001d94 <StartDefaultTask+0x1e4>)
 8001d08:	4829      	ldr	r0, [pc, #164]	@ (8001db0 <StartDefaultTask+0x200>)
 8001d0a:	f00a fffd 	bl	800cd08 <rclc_executor_add_timer>
  rclc_executor_add_service(&executor, &mpu6050_status_service, &mpu6050_status_request, &mpu6050_status_response, imu_status_service_callback);
 8001d0e:	4b29      	ldr	r3, [pc, #164]	@ (8001db4 <StartDefaultTask+0x204>)
 8001d10:	9300      	str	r3, [sp, #0]
 8001d12:	4b29      	ldr	r3, [pc, #164]	@ (8001db8 <StartDefaultTask+0x208>)
 8001d14:	4a29      	ldr	r2, [pc, #164]	@ (8001dbc <StartDefaultTask+0x20c>)
 8001d16:	4925      	ldr	r1, [pc, #148]	@ (8001dac <StartDefaultTask+0x1fc>)
 8001d18:	4825      	ldr	r0, [pc, #148]	@ (8001db0 <StartDefaultTask+0x200>)
 8001d1a:	f00b f81f 	bl	800cd5c <rclc_executor_add_service>
  rclc_executor_add_service(&executor, &mpu6050_service, &mpu6050_request, &mpu6050_response, service_callback);
 8001d1e:	4b28      	ldr	r3, [pc, #160]	@ (8001dc0 <StartDefaultTask+0x210>)
 8001d20:	9300      	str	r3, [sp, #0]
 8001d22:	4b28      	ldr	r3, [pc, #160]	@ (8001dc4 <StartDefaultTask+0x214>)
 8001d24:	4a28      	ldr	r2, [pc, #160]	@ (8001dc8 <StartDefaultTask+0x218>)
 8001d26:	491f      	ldr	r1, [pc, #124]	@ (8001da4 <StartDefaultTask+0x1f4>)
 8001d28:	4821      	ldr	r0, [pc, #132]	@ (8001db0 <StartDefaultTask+0x200>)
 8001d2a:	f00b f817 	bl	800cd5c <rclc_executor_add_service>
  rclc_executor_spin(&executor);
 8001d2e:	4820      	ldr	r0, [pc, #128]	@ (8001db0 <StartDefaultTask+0x200>)
 8001d30:	f00b fa3a 	bl	800d1a8 <rclc_executor_spin>

  for(;;){
    osDelay(10);
 8001d34:	200a      	movs	r0, #10
 8001d36:	f005 ffa1 	bl	8007c7c <osDelay>
 8001d3a:	e7fb      	b.n	8001d34 <StartDefaultTask+0x184>
 8001d3c:	f3af 8000 	nop.w
 8001d40:	00000000 	.word	0x00000000
 8001d44:	412e8480 	.word	0x412e8480
 8001d48:	080015ad 	.word	0x080015ad
 8001d4c:	08001549 	.word	0x08001549
 8001d50:	08001529 	.word	0x08001529
 8001d54:	080014fd 	.word	0x080014fd
 8001d58:	200051d8 	.word	0x200051d8
 8001d5c:	08001ed5 	.word	0x08001ed5
 8001d60:	08001f19 	.word	0x08001f19
 8001d64:	08001f51 	.word	0x08001f51
 8001d68:	08001fbd 	.word	0x08001fbd
 8001d6c:	0801a83c 	.word	0x0801a83c
 8001d70:	20004da4 	.word	0x20004da4
 8001d74:	20004dc0 	.word	0x20004dc0
 8001d78:	20004d70 	.word	0x20004d70
 8001d7c:	0801a864 	.word	0x0801a864
 8001d80:	0801a868 	.word	0x0801a868
 8001d84:	20004db8 	.word	0x20004db8
 8001d88:	20000000 	.word	0x20000000
 8001d8c:	408f4000 	.word	0x408f4000
 8001d90:	08001b81 	.word	0x08001b81
 8001d94:	20004dc4 	.word	0x20004dc4
 8001d98:	0801a878 	.word	0x0801a878
 8001d9c:	20004e50 	.word	0x20004e50
 8001da0:	0801a88c 	.word	0x0801a88c
 8001da4:	20004e54 	.word	0x20004e54
 8001da8:	0801a8a0 	.word	0x0801a8a0
 8001dac:	20004fa0 	.word	0x20004fa0
 8001db0:	20004dc8 	.word	0x20004dc8
 8001db4:	08001ac9 	.word	0x08001ac9
 8001db8:	20004fa8 	.word	0x20004fa8
 8001dbc:	20004fa4 	.word	0x20004fa4
 8001dc0:	080019f1 	.word	0x080019f1
 8001dc4:	20004e58 	.word	0x20004e58
 8001dc8:	20004e60 	.word	0x20004e60

08001dcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dd0:	f000 fcd1 	bl	8002776 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dd4:	f000 f81a 	bl	8001e0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dd8:	f7ff fc3c 	bl	8001654 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ddc:	f7ff fb5c 	bl	8001498 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8001de0:	f000 fb98 	bl	8002514 <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 8001de4:	f7ff fca4 	bl	8001730 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  while (MPU6050_Init(&hi2c1) == 1);
 8001de8:	bf00      	nop
 8001dea:	4807      	ldr	r0, [pc, #28]	@ (8001e08 <main+0x3c>)
 8001dec:	f005 fa8a 	bl	8007304 <MPU6050_Init>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d0f9      	beq.n	8001dea <main+0x1e>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001df6:	f005 fe65 	bl	8007ac4 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001dfa:	f7ff f8eb 	bl	8000fd4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001dfe:	f005 fe85 	bl	8007b0c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001e02:	bf00      	nop
 8001e04:	e7fd      	b.n	8001e02 <main+0x36>
 8001e06:	bf00      	nop
 8001e08:	20004d1c 	.word	0x20004d1c

08001e0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b094      	sub	sp, #80	@ 0x50
 8001e10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e12:	f107 0318 	add.w	r3, r7, #24
 8001e16:	2238      	movs	r2, #56	@ 0x38
 8001e18:	2100      	movs	r1, #0
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f017 fa78 	bl	8019310 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e20:	1d3b      	adds	r3, r7, #4
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	605a      	str	r2, [r3, #4]
 8001e28:	609a      	str	r2, [r3, #8]
 8001e2a:	60da      	str	r2, [r3, #12]
 8001e2c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001e2e:	2000      	movs	r0, #0
 8001e30:	f002 f8d6 	bl	8003fe0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e34:	2302      	movs	r3, #2
 8001e36:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e3c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e3e:	2340      	movs	r3, #64	@ 0x40
 8001e40:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e42:	2302      	movs	r3, #2
 8001e44:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e46:	2302      	movs	r3, #2
 8001e48:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001e4a:	2304      	movs	r3, #4
 8001e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001e4e:	2355      	movs	r3, #85	@ 0x55
 8001e50:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e52:	2302      	movs	r3, #2
 8001e54:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001e56:	2302      	movs	r3, #2
 8001e58:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e5e:	f107 0318 	add.w	r3, r7, #24
 8001e62:	4618      	mov	r0, r3
 8001e64:	f002 f970 	bl	8004148 <HAL_RCC_OscConfig>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001e6e:	f000 f82b 	bl	8001ec8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e72:	230f      	movs	r3, #15
 8001e74:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e76:	2303      	movs	r3, #3
 8001e78:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e82:	2300      	movs	r3, #0
 8001e84:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001e86:	1d3b      	adds	r3, r7, #4
 8001e88:	2104      	movs	r1, #4
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f002 fc6e 	bl	800476c <HAL_RCC_ClockConfig>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001e96:	f000 f817 	bl	8001ec8 <Error_Handler>
  }
}
 8001e9a:	bf00      	nop
 8001e9c:	3750      	adds	r7, #80	@ 0x50
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
	...

08001ea4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a04      	ldr	r2, [pc, #16]	@ (8001ec4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d101      	bne.n	8001eba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001eb6:	f000 fc77 	bl	80027a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40012c00 	.word	0x40012c00

08001ec8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001ecc:	b672      	cpsid	i
}
 8001ece:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ed0:	bf00      	nop
 8001ed2:	e7fd      	b.n	8001ed0 <Error_Handler+0x8>

08001ed4 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001ede:	4b0c      	ldr	r3, [pc, #48]	@ (8001f10 <microros_allocate+0x3c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	461a      	mov	r2, r3
 8001eea:	4b09      	ldr	r3, [pc, #36]	@ (8001f10 <microros_allocate+0x3c>)
 8001eec:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001eee:	4b09      	ldr	r3, [pc, #36]	@ (8001f14 <microros_allocate+0x40>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	461a      	mov	r2, r3
 8001efa:	4b06      	ldr	r3, [pc, #24]	@ (8001f14 <microros_allocate+0x40>)
 8001efc:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7ff f87a 	bl	8000ff8 <pvPortMallocMicroROS>
 8001f04:	4603      	mov	r3, r0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	2000517c 	.word	0x2000517c
 8001f14:	20005180 	.word	0x20005180

08001f18 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d00c      	beq.n	8001f42 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f7ff f989 	bl	8001240 <getBlockSize>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	4a06      	ldr	r2, [pc, #24]	@ (8001f4c <microros_deallocate+0x34>)
 8001f32:	6812      	ldr	r2, [r2, #0]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	461a      	mov	r2, r3
 8001f38:	4b04      	ldr	r3, [pc, #16]	@ (8001f4c <microros_deallocate+0x34>)
 8001f3a:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f7ff f923 	bl	8001188 <vPortFreeMicroROS>
  }
}
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	20005180 	.word	0x20005180

08001f50 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001f5c:	4b15      	ldr	r3, [pc, #84]	@ (8001fb4 <microros_reallocate+0x64>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	461a      	mov	r2, r3
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	4413      	add	r3, r2
 8001f66:	461a      	mov	r2, r3
 8001f68:	4b12      	ldr	r3, [pc, #72]	@ (8001fb4 <microros_reallocate+0x64>)
 8001f6a:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001f6c:	4b12      	ldr	r3, [pc, #72]	@ (8001fb8 <microros_reallocate+0x68>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	461a      	mov	r2, r3
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	4413      	add	r3, r2
 8001f76:	461a      	mov	r2, r3
 8001f78:	4b0f      	ldr	r3, [pc, #60]	@ (8001fb8 <microros_reallocate+0x68>)
 8001f7a:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d104      	bne.n	8001f8c <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001f82:	68b8      	ldr	r0, [r7, #8]
 8001f84:	f7ff f838 	bl	8000ff8 <pvPortMallocMicroROS>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	e00e      	b.n	8001faa <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001f8c:	68f8      	ldr	r0, [r7, #12]
 8001f8e:	f7ff f957 	bl	8001240 <getBlockSize>
 8001f92:	4603      	mov	r3, r0
 8001f94:	4a08      	ldr	r2, [pc, #32]	@ (8001fb8 <microros_reallocate+0x68>)
 8001f96:	6812      	ldr	r2, [r2, #0]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	4b06      	ldr	r3, [pc, #24]	@ (8001fb8 <microros_reallocate+0x68>)
 8001f9e:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001fa0:	68b9      	ldr	r1, [r7, #8]
 8001fa2:	68f8      	ldr	r0, [r7, #12]
 8001fa4:	f7ff f96a 	bl	800127c <pvPortReallocMicroROS>
 8001fa8:	4603      	mov	r3, r0
  }
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	2000517c 	.word	0x2000517c
 8001fb8:	20005180 	.word	0x20005180

08001fbc <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	68ba      	ldr	r2, [r7, #8]
 8001fcc:	fb02 f303 	mul.w	r3, r2, r3
 8001fd0:	4a0c      	ldr	r2, [pc, #48]	@ (8002004 <microros_zero_allocate+0x48>)
 8001fd2:	6812      	ldr	r2, [r2, #0]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	4b0a      	ldr	r3, [pc, #40]	@ (8002004 <microros_zero_allocate+0x48>)
 8001fda:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	fb02 f303 	mul.w	r3, r2, r3
 8001fe4:	4a08      	ldr	r2, [pc, #32]	@ (8002008 <microros_zero_allocate+0x4c>)
 8001fe6:	6812      	ldr	r2, [r2, #0]
 8001fe8:	4413      	add	r3, r2
 8001fea:	461a      	mov	r2, r3
 8001fec:	4b06      	ldr	r3, [pc, #24]	@ (8002008 <microros_zero_allocate+0x4c>)
 8001fee:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001ff0:	68b9      	ldr	r1, [r7, #8]
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f7ff f96f 	bl	80012d6 <pvPortCallocMicroROS>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	2000517c 	.word	0x2000517c
 8002008:	20005180 	.word	0x20005180
 800200c:	00000000 	.word	0x00000000

08002010 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002010:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002014:	b086      	sub	sp, #24
 8002016:	af00      	add	r7, sp, #0
 8002018:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800201c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 800201e:	2300      	movs	r3, #0
 8002020:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8002022:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002026:	a320      	add	r3, pc, #128	@ (adr r3, 80020a8 <UTILS_NanosecondsToTimespec+0x98>)
 8002028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202c:	f7fe fdcc 	bl	8000bc8 <__aeabi_ldivmod>
 8002030:	4602      	mov	r2, r0
 8002032:	460b      	mov	r3, r1
 8002034:	6879      	ldr	r1, [r7, #4]
 8002036:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 800203a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800203e:	a31a      	add	r3, pc, #104	@ (adr r3, 80020a8 <UTILS_NanosecondsToTimespec+0x98>)
 8002040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002044:	f7fe fdc0 	bl	8000bc8 <__aeabi_ldivmod>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	2b00      	cmp	r3, #0
 8002052:	da20      	bge.n	8002096 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	4a11      	ldr	r2, [pc, #68]	@ (80020a0 <UTILS_NanosecondsToTimespec+0x90>)
 800205a:	fb82 1203 	smull	r1, r2, r2, r3
 800205e:	1712      	asrs	r2, r2, #28
 8002060:	17db      	asrs	r3, r3, #31
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	3301      	adds	r3, #1
 8002066:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800206e:	6979      	ldr	r1, [r7, #20]
 8002070:	17c8      	asrs	r0, r1, #31
 8002072:	460c      	mov	r4, r1
 8002074:	4605      	mov	r5, r0
 8002076:	ebb2 0804 	subs.w	r8, r2, r4
 800207a:	eb63 0905 	sbc.w	r9, r3, r5
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	4906      	ldr	r1, [pc, #24]	@ (80020a4 <UTILS_NanosecondsToTimespec+0x94>)
 800208c:	fb01 f303 	mul.w	r3, r1, r3
 8002090:	441a      	add	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	609a      	str	r2, [r3, #8]
    }
}
 8002096:	bf00      	nop
 8002098:	3718      	adds	r7, #24
 800209a:	46bd      	mov	sp, r7
 800209c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80020a0:	44b82fa1 	.word	0x44b82fa1
 80020a4:	3b9aca00 	.word	0x3b9aca00
 80020a8:	3b9aca00 	.word	0x3b9aca00
 80020ac:	00000000 	.word	0x00000000

080020b0 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80020b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020b4:	b08e      	sub	sp, #56	@ 0x38
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6278      	str	r0, [r7, #36]	@ 0x24
 80020ba:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80020bc:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80020c0:	2300      	movs	r3, #0
 80020c2:	6013      	str	r3, [r2, #0]
 80020c4:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80020c6:	f04f 0200 	mov.w	r2, #0
 80020ca:	f04f 0300 	mov.w	r3, #0
 80020ce:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80020d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80020d6:	4618      	mov	r0, r3
 80020d8:	f007 f89c 	bl	8009214 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80020dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020de:	17da      	asrs	r2, r3, #31
 80020e0:	61bb      	str	r3, [r7, #24]
 80020e2:	61fa      	str	r2, [r7, #28]
 80020e4:	f04f 0200 	mov.w	r2, #0
 80020e8:	f04f 0300 	mov.w	r3, #0
 80020ec:	69b9      	ldr	r1, [r7, #24]
 80020ee:	000b      	movs	r3, r1
 80020f0:	2200      	movs	r2, #0
 80020f2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80020f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020f8:	2200      	movs	r2, #0
 80020fa:	461c      	mov	r4, r3
 80020fc:	4615      	mov	r5, r2
 80020fe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002102:	1911      	adds	r1, r2, r4
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	416b      	adcs	r3, r5
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800210e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8002112:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002116:	4602      	mov	r2, r0
 8002118:	460b      	mov	r3, r1
 800211a:	f04f 0400 	mov.w	r4, #0
 800211e:	f04f 0500 	mov.w	r5, #0
 8002122:	015d      	lsls	r5, r3, #5
 8002124:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002128:	0154      	lsls	r4, r2, #5
 800212a:	4622      	mov	r2, r4
 800212c:	462b      	mov	r3, r5
 800212e:	ebb2 0800 	subs.w	r8, r2, r0
 8002132:	eb63 0901 	sbc.w	r9, r3, r1
 8002136:	f04f 0200 	mov.w	r2, #0
 800213a:	f04f 0300 	mov.w	r3, #0
 800213e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002142:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002146:	ea4f 2248 	mov.w	r2, r8, lsl #9
 800214a:	4690      	mov	r8, r2
 800214c:	4699      	mov	r9, r3
 800214e:	eb18 0a00 	adds.w	sl, r8, r0
 8002152:	eb49 0b01 	adc.w	fp, r9, r1
 8002156:	f04f 0200 	mov.w	r2, #0
 800215a:	f04f 0300 	mov.w	r3, #0
 800215e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002162:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002166:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800216a:	ebb2 040a 	subs.w	r4, r2, sl
 800216e:	603c      	str	r4, [r7, #0]
 8002170:	eb63 030b 	sbc.w	r3, r3, fp
 8002174:	607b      	str	r3, [r7, #4]
 8002176:	e9d7 4500 	ldrd	r4, r5, [r7]
 800217a:	4623      	mov	r3, r4
 800217c:	181b      	adds	r3, r3, r0
 800217e:	613b      	str	r3, [r7, #16]
 8002180:	462b      	mov	r3, r5
 8002182:	eb41 0303 	adc.w	r3, r1, r3
 8002186:	617b      	str	r3, [r7, #20]
 8002188:	6a3a      	ldr	r2, [r7, #32]
 800218a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800218e:	f7ff ff3f 	bl	8002010 <UTILS_NanosecondsToTimespec>

    return 0;
 8002192:	2300      	movs	r3, #0
 8002194:	4618      	mov	r0, r3
 8002196:	3738      	adds	r7, #56	@ 0x38
 8002198:	46bd      	mov	sp, r7
 800219a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080021a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021a6:	4b12      	ldr	r3, [pc, #72]	@ (80021f0 <HAL_MspInit+0x50>)
 80021a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021aa:	4a11      	ldr	r2, [pc, #68]	@ (80021f0 <HAL_MspInit+0x50>)
 80021ac:	f043 0301 	orr.w	r3, r3, #1
 80021b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80021b2:	4b0f      	ldr	r3, [pc, #60]	@ (80021f0 <HAL_MspInit+0x50>)
 80021b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	607b      	str	r3, [r7, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021be:	4b0c      	ldr	r3, [pc, #48]	@ (80021f0 <HAL_MspInit+0x50>)
 80021c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021c2:	4a0b      	ldr	r2, [pc, #44]	@ (80021f0 <HAL_MspInit+0x50>)
 80021c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80021ca:	4b09      	ldr	r3, [pc, #36]	@ (80021f0 <HAL_MspInit+0x50>)
 80021cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021d2:	603b      	str	r3, [r7, #0]
 80021d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80021d6:	2200      	movs	r2, #0
 80021d8:	210f      	movs	r1, #15
 80021da:	f06f 0001 	mvn.w	r0, #1
 80021de:	f000 fbb9 	bl	8002954 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80021e2:	f001 ffa1 	bl	8004128 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40021000 	.word	0x40021000

080021f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b08c      	sub	sp, #48	@ 0x30
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80021fc:	2300      	movs	r3, #0
 80021fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8002200:	2300      	movs	r3, #0
 8002202:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002204:	4b2c      	ldr	r3, [pc, #176]	@ (80022b8 <HAL_InitTick+0xc4>)
 8002206:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002208:	4a2b      	ldr	r2, [pc, #172]	@ (80022b8 <HAL_InitTick+0xc4>)
 800220a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800220e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002210:	4b29      	ldr	r3, [pc, #164]	@ (80022b8 <HAL_InitTick+0xc4>)
 8002212:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002214:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002218:	60bb      	str	r3, [r7, #8]
 800221a:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800221c:	f107 020c 	add.w	r2, r7, #12
 8002220:	f107 0310 	add.w	r3, r7, #16
 8002224:	4611      	mov	r1, r2
 8002226:	4618      	mov	r0, r3
 8002228:	f002 fc76 	bl	8004b18 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800222c:	f002 fc5e 	bl	8004aec <HAL_RCC_GetPCLK2Freq>
 8002230:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002234:	4a21      	ldr	r2, [pc, #132]	@ (80022bc <HAL_InitTick+0xc8>)
 8002236:	fba2 2303 	umull	r2, r3, r2, r3
 800223a:	0c9b      	lsrs	r3, r3, #18
 800223c:	3b01      	subs	r3, #1
 800223e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002240:	4b1f      	ldr	r3, [pc, #124]	@ (80022c0 <HAL_InitTick+0xcc>)
 8002242:	4a20      	ldr	r2, [pc, #128]	@ (80022c4 <HAL_InitTick+0xd0>)
 8002244:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002246:	4b1e      	ldr	r3, [pc, #120]	@ (80022c0 <HAL_InitTick+0xcc>)
 8002248:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800224c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800224e:	4a1c      	ldr	r2, [pc, #112]	@ (80022c0 <HAL_InitTick+0xcc>)
 8002250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002252:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002254:	4b1a      	ldr	r3, [pc, #104]	@ (80022c0 <HAL_InitTick+0xcc>)
 8002256:	2200      	movs	r2, #0
 8002258:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800225a:	4b19      	ldr	r3, [pc, #100]	@ (80022c0 <HAL_InitTick+0xcc>)
 800225c:	2200      	movs	r2, #0
 800225e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8002260:	4817      	ldr	r0, [pc, #92]	@ (80022c0 <HAL_InitTick+0xcc>)
 8002262:	f002 ff1f 	bl	80050a4 <HAL_TIM_Base_Init>
 8002266:	4603      	mov	r3, r0
 8002268:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800226c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002270:	2b00      	cmp	r3, #0
 8002272:	d11b      	bne.n	80022ac <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002274:	4812      	ldr	r0, [pc, #72]	@ (80022c0 <HAL_InitTick+0xcc>)
 8002276:	f002 ff77 	bl	8005168 <HAL_TIM_Base_Start_IT>
 800227a:	4603      	mov	r3, r0
 800227c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002280:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002284:	2b00      	cmp	r3, #0
 8002286:	d111      	bne.n	80022ac <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002288:	2019      	movs	r0, #25
 800228a:	f000 fb7d 	bl	8002988 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2b0f      	cmp	r3, #15
 8002292:	d808      	bhi.n	80022a6 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8002294:	2200      	movs	r2, #0
 8002296:	6879      	ldr	r1, [r7, #4]
 8002298:	2019      	movs	r0, #25
 800229a:	f000 fb5b 	bl	8002954 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800229e:	4a0a      	ldr	r2, [pc, #40]	@ (80022c8 <HAL_InitTick+0xd4>)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6013      	str	r3, [r2, #0]
 80022a4:	e002      	b.n	80022ac <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80022ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3730      	adds	r7, #48	@ 0x30
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40021000 	.word	0x40021000
 80022bc:	431bde83 	.word	0x431bde83
 80022c0:	20005184 	.word	0x20005184
 80022c4:	40012c00 	.word	0x40012c00
 80022c8:	20000010 	.word	0x20000010

080022cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022d0:	bf00      	nop
 80022d2:	e7fd      	b.n	80022d0 <NMI_Handler+0x4>

080022d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022d8:	bf00      	nop
 80022da:	e7fd      	b.n	80022d8 <HardFault_Handler+0x4>

080022dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022e0:	bf00      	nop
 80022e2:	e7fd      	b.n	80022e0 <MemManage_Handler+0x4>

080022e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022e8:	bf00      	nop
 80022ea:	e7fd      	b.n	80022e8 <BusFault_Handler+0x4>

080022ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022f0:	bf00      	nop
 80022f2:	e7fd      	b.n	80022f0 <UsageFault_Handler+0x4>

080022f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022f8:	bf00      	nop
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
	...

08002304 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002308:	4802      	ldr	r0, [pc, #8]	@ (8002314 <DMA1_Channel1_IRQHandler+0x10>)
 800230a:	f000 fd2e 	bl	8002d6a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800230e:	bf00      	nop
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	2000526c 	.word	0x2000526c

08002318 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 800231c:	4802      	ldr	r0, [pc, #8]	@ (8002328 <DMA1_Channel2_IRQHandler+0x10>)
 800231e:	f000 fd24 	bl	8002d6a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002322:	bf00      	nop
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	200052cc 	.word	0x200052cc

0800232c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002330:	4802      	ldr	r0, [pc, #8]	@ (800233c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002332:	f002 ff91 	bl	8005258 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002336:	bf00      	nop
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	20005184 	.word	0x20005184

08002340 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002344:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002348:	f001 f804 	bl	8003354 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800234c:	bf00      	nop
 800234e:	bd80      	pop	{r7, pc}

08002350 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002354:	4802      	ldr	r0, [pc, #8]	@ (8002360 <LPUART1_IRQHandler+0x10>)
 8002356:	f003 fba3 	bl	8005aa0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	200051d8 	.word	0x200051d8

08002364 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  return 1;
 8002368:	2301      	movs	r3, #1
}
 800236a:	4618      	mov	r0, r3
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <_kill>:

int _kill(int pid, int sig)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800237e:	f017 f85b 	bl	8019438 <__errno>
 8002382:	4603      	mov	r3, r0
 8002384:	2216      	movs	r2, #22
 8002386:	601a      	str	r2, [r3, #0]
  return -1;
 8002388:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800238c:	4618      	mov	r0, r3
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <_exit>:

void _exit (int status)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800239c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7ff ffe7 	bl	8002374 <_kill>
  while (1) {}    /* Make sure we hang here */
 80023a6:	bf00      	nop
 80023a8:	e7fd      	b.n	80023a6 <_exit+0x12>

080023aa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b086      	sub	sp, #24
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	60f8      	str	r0, [r7, #12]
 80023b2:	60b9      	str	r1, [r7, #8]
 80023b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023b6:	2300      	movs	r3, #0
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	e00a      	b.n	80023d2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023bc:	f3af 8000 	nop.w
 80023c0:	4601      	mov	r1, r0
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	1c5a      	adds	r2, r3, #1
 80023c6:	60ba      	str	r2, [r7, #8]
 80023c8:	b2ca      	uxtb	r2, r1
 80023ca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	3301      	adds	r3, #1
 80023d0:	617b      	str	r3, [r7, #20]
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	dbf0      	blt.n	80023bc <_read+0x12>
  }

  return len;
 80023da:	687b      	ldr	r3, [r7, #4]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3718      	adds	r7, #24
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023f0:	2300      	movs	r3, #0
 80023f2:	617b      	str	r3, [r7, #20]
 80023f4:	e009      	b.n	800240a <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	1c5a      	adds	r2, r3, #1
 80023fa:	60ba      	str	r2, [r7, #8]
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	4618      	mov	r0, r3
 8002400:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	3301      	adds	r3, #1
 8002408:	617b      	str	r3, [r7, #20]
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	429a      	cmp	r2, r3
 8002410:	dbf1      	blt.n	80023f6 <_write+0x12>
  }
  return len;
 8002412:	687b      	ldr	r3, [r7, #4]
}
 8002414:	4618      	mov	r0, r3
 8002416:	3718      	adds	r7, #24
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <_close>:

int _close(int file)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002424:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002428:	4618      	mov	r0, r3
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002444:	605a      	str	r2, [r3, #4]
  return 0;
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <_isatty>:

int _isatty(int file)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800245c:	2301      	movs	r3, #1
}
 800245e:	4618      	mov	r0, r3
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr

0800246a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800246a:	b480      	push	{r7}
 800246c:	b085      	sub	sp, #20
 800246e:	af00      	add	r7, sp, #0
 8002470:	60f8      	str	r0, [r7, #12]
 8002472:	60b9      	str	r1, [r7, #8]
 8002474:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800248c:	4a14      	ldr	r2, [pc, #80]	@ (80024e0 <_sbrk+0x5c>)
 800248e:	4b15      	ldr	r3, [pc, #84]	@ (80024e4 <_sbrk+0x60>)
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002498:	4b13      	ldr	r3, [pc, #76]	@ (80024e8 <_sbrk+0x64>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d102      	bne.n	80024a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024a0:	4b11      	ldr	r3, [pc, #68]	@ (80024e8 <_sbrk+0x64>)
 80024a2:	4a12      	ldr	r2, [pc, #72]	@ (80024ec <_sbrk+0x68>)
 80024a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024a6:	4b10      	ldr	r3, [pc, #64]	@ (80024e8 <_sbrk+0x64>)
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4413      	add	r3, r2
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d207      	bcs.n	80024c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024b4:	f016 ffc0 	bl	8019438 <__errno>
 80024b8:	4603      	mov	r3, r0
 80024ba:	220c      	movs	r2, #12
 80024bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80024c2:	e009      	b.n	80024d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024c4:	4b08      	ldr	r3, [pc, #32]	@ (80024e8 <_sbrk+0x64>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024ca:	4b07      	ldr	r3, [pc, #28]	@ (80024e8 <_sbrk+0x64>)
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4413      	add	r3, r2
 80024d2:	4a05      	ldr	r2, [pc, #20]	@ (80024e8 <_sbrk+0x64>)
 80024d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024d6:	68fb      	ldr	r3, [r7, #12]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3718      	adds	r7, #24
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	20020000 	.word	0x20020000
 80024e4:	00000400 	.word	0x00000400
 80024e8:	200051d4 	.word	0x200051d4
 80024ec:	2000bb58 	.word	0x2000bb58

080024f0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80024f4:	4b06      	ldr	r3, [pc, #24]	@ (8002510 <SystemInit+0x20>)
 80024f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024fa:	4a05      	ldr	r2, [pc, #20]	@ (8002510 <SystemInit+0x20>)
 80024fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002500:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002504:	bf00      	nop
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	e000ed00 	.word	0xe000ed00

08002514 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002518:	4b20      	ldr	r3, [pc, #128]	@ (800259c <MX_LPUART1_UART_Init+0x88>)
 800251a:	4a21      	ldr	r2, [pc, #132]	@ (80025a0 <MX_LPUART1_UART_Init+0x8c>)
 800251c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 800251e:	4b1f      	ldr	r3, [pc, #124]	@ (800259c <MX_LPUART1_UART_Init+0x88>)
 8002520:	4a20      	ldr	r2, [pc, #128]	@ (80025a4 <MX_LPUART1_UART_Init+0x90>)
 8002522:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002524:	4b1d      	ldr	r3, [pc, #116]	@ (800259c <MX_LPUART1_UART_Init+0x88>)
 8002526:	2200      	movs	r2, #0
 8002528:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800252a:	4b1c      	ldr	r3, [pc, #112]	@ (800259c <MX_LPUART1_UART_Init+0x88>)
 800252c:	2200      	movs	r2, #0
 800252e:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002530:	4b1a      	ldr	r3, [pc, #104]	@ (800259c <MX_LPUART1_UART_Init+0x88>)
 8002532:	2200      	movs	r2, #0
 8002534:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002536:	4b19      	ldr	r3, [pc, #100]	@ (800259c <MX_LPUART1_UART_Init+0x88>)
 8002538:	220c      	movs	r2, #12
 800253a:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800253c:	4b17      	ldr	r3, [pc, #92]	@ (800259c <MX_LPUART1_UART_Init+0x88>)
 800253e:	2200      	movs	r2, #0
 8002540:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002542:	4b16      	ldr	r3, [pc, #88]	@ (800259c <MX_LPUART1_UART_Init+0x88>)
 8002544:	2200      	movs	r2, #0
 8002546:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002548:	4b14      	ldr	r3, [pc, #80]	@ (800259c <MX_LPUART1_UART_Init+0x88>)
 800254a:	2200      	movs	r2, #0
 800254c:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800254e:	4b13      	ldr	r3, [pc, #76]	@ (800259c <MX_LPUART1_UART_Init+0x88>)
 8002550:	2200      	movs	r2, #0
 8002552:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002554:	4811      	ldr	r0, [pc, #68]	@ (800259c <MX_LPUART1_UART_Init+0x88>)
 8002556:	f003 f8f1 	bl	800573c <HAL_UART_Init>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8002560:	f7ff fcb2 	bl	8001ec8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002564:	2100      	movs	r1, #0
 8002566:	480d      	ldr	r0, [pc, #52]	@ (800259c <MX_LPUART1_UART_Init+0x88>)
 8002568:	f004 fe01 	bl	800716e <HAL_UARTEx_SetTxFifoThreshold>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8002572:	f7ff fca9 	bl	8001ec8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002576:	2100      	movs	r1, #0
 8002578:	4808      	ldr	r0, [pc, #32]	@ (800259c <MX_LPUART1_UART_Init+0x88>)
 800257a:	f004 fe36 	bl	80071ea <HAL_UARTEx_SetRxFifoThreshold>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8002584:	f7ff fca0 	bl	8001ec8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002588:	4804      	ldr	r0, [pc, #16]	@ (800259c <MX_LPUART1_UART_Init+0x88>)
 800258a:	f004 fdb7 	bl	80070fc <HAL_UARTEx_DisableFifoMode>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8002594:	f7ff fc98 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002598:	bf00      	nop
 800259a:	bd80      	pop	{r7, pc}
 800259c:	200051d8 	.word	0x200051d8
 80025a0:	40008000 	.word	0x40008000
 80025a4:	001e8480 	.word	0x001e8480

080025a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b09e      	sub	sp, #120	@ 0x78
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	605a      	str	r2, [r3, #4]
 80025ba:	609a      	str	r2, [r3, #8]
 80025bc:	60da      	str	r2, [r3, #12]
 80025be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025c0:	f107 0310 	add.w	r3, r7, #16
 80025c4:	2254      	movs	r2, #84	@ 0x54
 80025c6:	2100      	movs	r1, #0
 80025c8:	4618      	mov	r0, r3
 80025ca:	f016 fea1 	bl	8019310 <memset>
  if(uartHandle->Instance==LPUART1)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a4e      	ldr	r2, [pc, #312]	@ (800270c <HAL_UART_MspInit+0x164>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	f040 8094 	bne.w	8002702 <HAL_UART_MspInit+0x15a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80025da:	2320      	movs	r3, #32
 80025dc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80025de:	2300      	movs	r3, #0
 80025e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025e2:	f107 0310 	add.w	r3, r7, #16
 80025e6:	4618      	mov	r0, r3
 80025e8:	f002 fb0e 	bl	8004c08 <HAL_RCCEx_PeriphCLKConfig>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80025f2:	f7ff fc69 	bl	8001ec8 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80025f6:	4b46      	ldr	r3, [pc, #280]	@ (8002710 <HAL_UART_MspInit+0x168>)
 80025f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025fa:	4a45      	ldr	r2, [pc, #276]	@ (8002710 <HAL_UART_MspInit+0x168>)
 80025fc:	f043 0301 	orr.w	r3, r3, #1
 8002600:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002602:	4b43      	ldr	r3, [pc, #268]	@ (8002710 <HAL_UART_MspInit+0x168>)
 8002604:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800260e:	4b40      	ldr	r3, [pc, #256]	@ (8002710 <HAL_UART_MspInit+0x168>)
 8002610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002612:	4a3f      	ldr	r2, [pc, #252]	@ (8002710 <HAL_UART_MspInit+0x168>)
 8002614:	f043 0301 	orr.w	r3, r3, #1
 8002618:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800261a:	4b3d      	ldr	r3, [pc, #244]	@ (8002710 <HAL_UART_MspInit+0x168>)
 800261c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	60bb      	str	r3, [r7, #8]
 8002624:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8002626:	230c      	movs	r3, #12
 8002628:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800262a:	2302      	movs	r3, #2
 800262c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262e:	2300      	movs	r3, #0
 8002630:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002632:	2300      	movs	r3, #0
 8002634:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002636:	230c      	movs	r3, #12
 8002638:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800263a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800263e:	4619      	mov	r1, r3
 8002640:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002644:	f000 fcec 	bl	8003020 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel1;
 8002648:	4b32      	ldr	r3, [pc, #200]	@ (8002714 <HAL_UART_MspInit+0x16c>)
 800264a:	4a33      	ldr	r2, [pc, #204]	@ (8002718 <HAL_UART_MspInit+0x170>)
 800264c:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 800264e:	4b31      	ldr	r3, [pc, #196]	@ (8002714 <HAL_UART_MspInit+0x16c>)
 8002650:	2223      	movs	r2, #35	@ 0x23
 8002652:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002654:	4b2f      	ldr	r3, [pc, #188]	@ (8002714 <HAL_UART_MspInit+0x16c>)
 8002656:	2210      	movs	r2, #16
 8002658:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800265a:	4b2e      	ldr	r3, [pc, #184]	@ (8002714 <HAL_UART_MspInit+0x16c>)
 800265c:	2200      	movs	r2, #0
 800265e:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002660:	4b2c      	ldr	r3, [pc, #176]	@ (8002714 <HAL_UART_MspInit+0x16c>)
 8002662:	2280      	movs	r2, #128	@ 0x80
 8002664:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002666:	4b2b      	ldr	r3, [pc, #172]	@ (8002714 <HAL_UART_MspInit+0x16c>)
 8002668:	2200      	movs	r2, #0
 800266a:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800266c:	4b29      	ldr	r3, [pc, #164]	@ (8002714 <HAL_UART_MspInit+0x16c>)
 800266e:	2200      	movs	r2, #0
 8002670:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8002672:	4b28      	ldr	r3, [pc, #160]	@ (8002714 <HAL_UART_MspInit+0x16c>)
 8002674:	2200      	movs	r2, #0
 8002676:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002678:	4b26      	ldr	r3, [pc, #152]	@ (8002714 <HAL_UART_MspInit+0x16c>)
 800267a:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 800267e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8002680:	4824      	ldr	r0, [pc, #144]	@ (8002714 <HAL_UART_MspInit+0x16c>)
 8002682:	f000 f98f 	bl	80029a4 <HAL_DMA_Init>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 800268c:	f7ff fc1c 	bl	8001ec8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a20      	ldr	r2, [pc, #128]	@ (8002714 <HAL_UART_MspInit+0x16c>)
 8002694:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002696:	4a1f      	ldr	r2, [pc, #124]	@ (8002714 <HAL_UART_MspInit+0x16c>)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel2;
 800269c:	4b1f      	ldr	r3, [pc, #124]	@ (800271c <HAL_UART_MspInit+0x174>)
 800269e:	4a20      	ldr	r2, [pc, #128]	@ (8002720 <HAL_UART_MspInit+0x178>)
 80026a0:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 80026a2:	4b1e      	ldr	r3, [pc, #120]	@ (800271c <HAL_UART_MspInit+0x174>)
 80026a4:	2222      	movs	r2, #34	@ 0x22
 80026a6:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026a8:	4b1c      	ldr	r3, [pc, #112]	@ (800271c <HAL_UART_MspInit+0x174>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026ae:	4b1b      	ldr	r3, [pc, #108]	@ (800271c <HAL_UART_MspInit+0x174>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026b4:	4b19      	ldr	r3, [pc, #100]	@ (800271c <HAL_UART_MspInit+0x174>)
 80026b6:	2280      	movs	r2, #128	@ 0x80
 80026b8:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026ba:	4b18      	ldr	r3, [pc, #96]	@ (800271c <HAL_UART_MspInit+0x174>)
 80026bc:	2200      	movs	r2, #0
 80026be:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026c0:	4b16      	ldr	r3, [pc, #88]	@ (800271c <HAL_UART_MspInit+0x174>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 80026c6:	4b15      	ldr	r3, [pc, #84]	@ (800271c <HAL_UART_MspInit+0x174>)
 80026c8:	2220      	movs	r2, #32
 80026ca:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80026cc:	4b13      	ldr	r3, [pc, #76]	@ (800271c <HAL_UART_MspInit+0x174>)
 80026ce:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80026d2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80026d4:	4811      	ldr	r0, [pc, #68]	@ (800271c <HAL_UART_MspInit+0x174>)
 80026d6:	f000 f965 	bl	80029a4 <HAL_DMA_Init>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <HAL_UART_MspInit+0x13c>
    {
      Error_Handler();
 80026e0:	f7ff fbf2 	bl	8001ec8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4a0d      	ldr	r2, [pc, #52]	@ (800271c <HAL_UART_MspInit+0x174>)
 80026e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80026ec:	4a0b      	ldr	r2, [pc, #44]	@ (800271c <HAL_UART_MspInit+0x174>)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 80026f2:	2200      	movs	r2, #0
 80026f4:	2105      	movs	r1, #5
 80026f6:	205b      	movs	r0, #91	@ 0x5b
 80026f8:	f000 f92c 	bl	8002954 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80026fc:	205b      	movs	r0, #91	@ 0x5b
 80026fe:	f000 f943 	bl	8002988 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8002702:	bf00      	nop
 8002704:	3778      	adds	r7, #120	@ 0x78
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40008000 	.word	0x40008000
 8002710:	40021000 	.word	0x40021000
 8002714:	2000526c 	.word	0x2000526c
 8002718:	40020008 	.word	0x40020008
 800271c:	200052cc 	.word	0x200052cc
 8002720:	4002001c 	.word	0x4002001c

08002724 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002724:	480d      	ldr	r0, [pc, #52]	@ (800275c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002726:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002728:	f7ff fee2 	bl	80024f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800272c:	480c      	ldr	r0, [pc, #48]	@ (8002760 <LoopForever+0x6>)
  ldr r1, =_edata
 800272e:	490d      	ldr	r1, [pc, #52]	@ (8002764 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002730:	4a0d      	ldr	r2, [pc, #52]	@ (8002768 <LoopForever+0xe>)
  movs r3, #0
 8002732:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002734:	e002      	b.n	800273c <LoopCopyDataInit>

08002736 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002736:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002738:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800273a:	3304      	adds	r3, #4

0800273c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800273c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800273e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002740:	d3f9      	bcc.n	8002736 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002742:	4a0a      	ldr	r2, [pc, #40]	@ (800276c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002744:	4c0a      	ldr	r4, [pc, #40]	@ (8002770 <LoopForever+0x16>)
  movs r3, #0
 8002746:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002748:	e001      	b.n	800274e <LoopFillZerobss>

0800274a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800274a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800274c:	3204      	adds	r2, #4

0800274e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800274e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002750:	d3fb      	bcc.n	800274a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002752:	f016 fe77 	bl	8019444 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002756:	f7ff fb39 	bl	8001dcc <main>

0800275a <LoopForever>:

LoopForever:
    b LoopForever
 800275a:	e7fe      	b.n	800275a <LoopForever>
  ldr   r0, =_estack
 800275c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002760:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002764:	200009a0 	.word	0x200009a0
  ldr r2, =_sidata
 8002768:	0801c144 	.word	0x0801c144
  ldr r2, =_sbss
 800276c:	200009a0 	.word	0x200009a0
  ldr r4, =_ebss
 8002770:	2000bb54 	.word	0x2000bb54

08002774 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002774:	e7fe      	b.n	8002774 <ADC1_2_IRQHandler>

08002776 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b082      	sub	sp, #8
 800277a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800277c:	2300      	movs	r3, #0
 800277e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002780:	2003      	movs	r0, #3
 8002782:	f000 f8dc 	bl	800293e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002786:	200f      	movs	r0, #15
 8002788:	f7ff fd34 	bl	80021f4 <HAL_InitTick>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d002      	beq.n	8002798 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	71fb      	strb	r3, [r7, #7]
 8002796:	e001      	b.n	800279c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002798:	f7ff fd02 	bl	80021a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800279c:	79fb      	ldrb	r3, [r7, #7]

}
 800279e:	4618      	mov	r0, r3
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
	...

080027a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027ac:	4b05      	ldr	r3, [pc, #20]	@ (80027c4 <HAL_IncTick+0x1c>)
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	4b05      	ldr	r3, [pc, #20]	@ (80027c8 <HAL_IncTick+0x20>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4413      	add	r3, r2
 80027b6:	4a03      	ldr	r2, [pc, #12]	@ (80027c4 <HAL_IncTick+0x1c>)
 80027b8:	6013      	str	r3, [r2, #0]
}
 80027ba:	bf00      	nop
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr
 80027c4:	2000532c 	.word	0x2000532c
 80027c8:	20000014 	.word	0x20000014

080027cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  return uwTick;
 80027d0:	4b03      	ldr	r3, [pc, #12]	@ (80027e0 <HAL_GetTick+0x14>)
 80027d2:	681b      	ldr	r3, [r3, #0]
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	2000532c 	.word	0x2000532c

080027e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f003 0307 	and.w	r3, r3, #7
 80027f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002828 <__NVIC_SetPriorityGrouping+0x44>)
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027fa:	68ba      	ldr	r2, [r7, #8]
 80027fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002800:	4013      	ands	r3, r2
 8002802:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800280c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002810:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002816:	4a04      	ldr	r2, [pc, #16]	@ (8002828 <__NVIC_SetPriorityGrouping+0x44>)
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	60d3      	str	r3, [r2, #12]
}
 800281c:	bf00      	nop
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr
 8002828:	e000ed00 	.word	0xe000ed00

0800282c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002830:	4b04      	ldr	r3, [pc, #16]	@ (8002844 <__NVIC_GetPriorityGrouping+0x18>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	0a1b      	lsrs	r3, r3, #8
 8002836:	f003 0307 	and.w	r3, r3, #7
}
 800283a:	4618      	mov	r0, r3
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	e000ed00 	.word	0xe000ed00

08002848 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	4603      	mov	r3, r0
 8002850:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002856:	2b00      	cmp	r3, #0
 8002858:	db0b      	blt.n	8002872 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800285a:	79fb      	ldrb	r3, [r7, #7]
 800285c:	f003 021f 	and.w	r2, r3, #31
 8002860:	4907      	ldr	r1, [pc, #28]	@ (8002880 <__NVIC_EnableIRQ+0x38>)
 8002862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002866:	095b      	lsrs	r3, r3, #5
 8002868:	2001      	movs	r0, #1
 800286a:	fa00 f202 	lsl.w	r2, r0, r2
 800286e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	e000e100 	.word	0xe000e100

08002884 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	4603      	mov	r3, r0
 800288c:	6039      	str	r1, [r7, #0]
 800288e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002894:	2b00      	cmp	r3, #0
 8002896:	db0a      	blt.n	80028ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	b2da      	uxtb	r2, r3
 800289c:	490c      	ldr	r1, [pc, #48]	@ (80028d0 <__NVIC_SetPriority+0x4c>)
 800289e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a2:	0112      	lsls	r2, r2, #4
 80028a4:	b2d2      	uxtb	r2, r2
 80028a6:	440b      	add	r3, r1
 80028a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028ac:	e00a      	b.n	80028c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	b2da      	uxtb	r2, r3
 80028b2:	4908      	ldr	r1, [pc, #32]	@ (80028d4 <__NVIC_SetPriority+0x50>)
 80028b4:	79fb      	ldrb	r3, [r7, #7]
 80028b6:	f003 030f 	and.w	r3, r3, #15
 80028ba:	3b04      	subs	r3, #4
 80028bc:	0112      	lsls	r2, r2, #4
 80028be:	b2d2      	uxtb	r2, r2
 80028c0:	440b      	add	r3, r1
 80028c2:	761a      	strb	r2, [r3, #24]
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr
 80028d0:	e000e100 	.word	0xe000e100
 80028d4:	e000ed00 	.word	0xe000ed00

080028d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028d8:	b480      	push	{r7}
 80028da:	b089      	sub	sp, #36	@ 0x24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f003 0307 	and.w	r3, r3, #7
 80028ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	f1c3 0307 	rsb	r3, r3, #7
 80028f2:	2b04      	cmp	r3, #4
 80028f4:	bf28      	it	cs
 80028f6:	2304      	movcs	r3, #4
 80028f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	3304      	adds	r3, #4
 80028fe:	2b06      	cmp	r3, #6
 8002900:	d902      	bls.n	8002908 <NVIC_EncodePriority+0x30>
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	3b03      	subs	r3, #3
 8002906:	e000      	b.n	800290a <NVIC_EncodePriority+0x32>
 8002908:	2300      	movs	r3, #0
 800290a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800290c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	43da      	mvns	r2, r3
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	401a      	ands	r2, r3
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002920:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	fa01 f303 	lsl.w	r3, r1, r3
 800292a:	43d9      	mvns	r1, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002930:	4313      	orrs	r3, r2
         );
}
 8002932:	4618      	mov	r0, r3
 8002934:	3724      	adds	r7, #36	@ 0x24
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr

0800293e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b082      	sub	sp, #8
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7ff ff4c 	bl	80027e4 <__NVIC_SetPriorityGrouping>
}
 800294c:	bf00      	nop
 800294e:	3708      	adds	r7, #8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
 800295a:	4603      	mov	r3, r0
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
 8002960:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002962:	f7ff ff63 	bl	800282c <__NVIC_GetPriorityGrouping>
 8002966:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	68b9      	ldr	r1, [r7, #8]
 800296c:	6978      	ldr	r0, [r7, #20]
 800296e:	f7ff ffb3 	bl	80028d8 <NVIC_EncodePriority>
 8002972:	4602      	mov	r2, r0
 8002974:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002978:	4611      	mov	r1, r2
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff ff82 	bl	8002884 <__NVIC_SetPriority>
}
 8002980:	bf00      	nop
 8002982:	3718      	adds	r7, #24
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	4603      	mov	r3, r0
 8002990:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff ff56 	bl	8002848 <__NVIC_EnableIRQ>
}
 800299c:	bf00      	nop
 800299e:	3708      	adds	r7, #8
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e08d      	b.n	8002ad2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	461a      	mov	r2, r3
 80029bc:	4b47      	ldr	r3, [pc, #284]	@ (8002adc <HAL_DMA_Init+0x138>)
 80029be:	429a      	cmp	r2, r3
 80029c0:	d80f      	bhi.n	80029e2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	461a      	mov	r2, r3
 80029c8:	4b45      	ldr	r3, [pc, #276]	@ (8002ae0 <HAL_DMA_Init+0x13c>)
 80029ca:	4413      	add	r3, r2
 80029cc:	4a45      	ldr	r2, [pc, #276]	@ (8002ae4 <HAL_DMA_Init+0x140>)
 80029ce:	fba2 2303 	umull	r2, r3, r2, r3
 80029d2:	091b      	lsrs	r3, r3, #4
 80029d4:	009a      	lsls	r2, r3, #2
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a42      	ldr	r2, [pc, #264]	@ (8002ae8 <HAL_DMA_Init+0x144>)
 80029de:	641a      	str	r2, [r3, #64]	@ 0x40
 80029e0:	e00e      	b.n	8002a00 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	461a      	mov	r2, r3
 80029e8:	4b40      	ldr	r3, [pc, #256]	@ (8002aec <HAL_DMA_Init+0x148>)
 80029ea:	4413      	add	r3, r2
 80029ec:	4a3d      	ldr	r2, [pc, #244]	@ (8002ae4 <HAL_DMA_Init+0x140>)
 80029ee:	fba2 2303 	umull	r2, r3, r2, r3
 80029f2:	091b      	lsrs	r3, r3, #4
 80029f4:	009a      	lsls	r2, r3, #2
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a3c      	ldr	r2, [pc, #240]	@ (8002af0 <HAL_DMA_Init+0x14c>)
 80029fe:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2202      	movs	r2, #2
 8002a04:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002a16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a1a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002a24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 fa82 	bl	8002f5c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a60:	d102      	bne.n	8002a68 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a70:	b2d2      	uxtb	r2, r2
 8002a72:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002a7c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d010      	beq.n	8002aa8 <HAL_DMA_Init+0x104>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	d80c      	bhi.n	8002aa8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 faa2 	bl	8002fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002aa4:	605a      	str	r2, [r3, #4]
 8002aa6:	e008      	b.n	8002aba <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	40020407 	.word	0x40020407
 8002ae0:	bffdfff8 	.word	0xbffdfff8
 8002ae4:	cccccccd 	.word	0xcccccccd
 8002ae8:	40020000 	.word	0x40020000
 8002aec:	bffdfbf8 	.word	0xbffdfbf8
 8002af0:	40020400 	.word	0x40020400

08002af4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
 8002b00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b02:	2300      	movs	r3, #0
 8002b04:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d101      	bne.n	8002b14 <HAL_DMA_Start_IT+0x20>
 8002b10:	2302      	movs	r3, #2
 8002b12:	e066      	b.n	8002be2 <HAL_DMA_Start_IT+0xee>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d155      	bne.n	8002bd4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 0201 	bic.w	r2, r2, #1
 8002b44:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	68b9      	ldr	r1, [r7, #8]
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f000 f9c7 	bl	8002ee0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d008      	beq.n	8002b6c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f042 020e 	orr.w	r2, r2, #14
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	e00f      	b.n	8002b8c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 0204 	bic.w	r2, r2, #4
 8002b7a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f042 020a 	orr.w	r2, r2, #10
 8002b8a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d007      	beq.n	8002baa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ba4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ba8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d007      	beq.n	8002bc2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bbc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bc0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f042 0201 	orr.w	r2, r2, #1
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	e005      	b.n	8002be0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002bdc:	2302      	movs	r3, #2
 8002bde:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002be0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3718      	adds	r7, #24
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002bea:	b480      	push	{r7}
 8002bec:	b085      	sub	sp, #20
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d005      	beq.n	8002c0e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2204      	movs	r2, #4
 8002c06:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	73fb      	strb	r3, [r7, #15]
 8002c0c:	e037      	b.n	8002c7e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 020e 	bic.w	r2, r2, #14
 8002c1c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c2c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 0201 	bic.w	r2, r2, #1
 8002c3c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c42:	f003 021f 	and.w	r2, r3, #31
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c50:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002c5a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00c      	beq.n	8002c7e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c6e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c72:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002c7c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8002c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3714      	adds	r7, #20
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d00d      	beq.n	8002cd0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2204      	movs	r2, #4
 8002cb8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	73fb      	strb	r3, [r7, #15]
 8002cce:	e047      	b.n	8002d60 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f022 020e 	bic.w	r2, r2, #14
 8002cde:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f022 0201 	bic.w	r2, r2, #1
 8002cee:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cfa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002cfe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d04:	f003 021f 	and.w	r2, r3, #31
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0c:	2101      	movs	r1, #1
 8002d0e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d12:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002d1c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00c      	beq.n	8002d40 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d34:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002d3e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d003      	beq.n	8002d60 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	4798      	blx	r3
    }
  }
  return status;
 8002d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b084      	sub	sp, #16
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d86:	f003 031f 	and.w	r3, r3, #31
 8002d8a:	2204      	movs	r2, #4
 8002d8c:	409a      	lsls	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	4013      	ands	r3, r2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d026      	beq.n	8002de4 <HAL_DMA_IRQHandler+0x7a>
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	f003 0304 	and.w	r3, r3, #4
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d021      	beq.n	8002de4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0320 	and.w	r3, r3, #32
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d107      	bne.n	8002dbe <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 0204 	bic.w	r2, r2, #4
 8002dbc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dc2:	f003 021f 	and.w	r2, r3, #31
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dca:	2104      	movs	r1, #4
 8002dcc:	fa01 f202 	lsl.w	r2, r1, r2
 8002dd0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d071      	beq.n	8002ebe <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002de2:	e06c      	b.n	8002ebe <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de8:	f003 031f 	and.w	r3, r3, #31
 8002dec:	2202      	movs	r2, #2
 8002dee:	409a      	lsls	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	4013      	ands	r3, r2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d02e      	beq.n	8002e56 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d029      	beq.n	8002e56 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0320 	and.w	r3, r3, #32
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10b      	bne.n	8002e28 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 020a 	bic.w	r2, r2, #10
 8002e1e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e2c:	f003 021f 	and.w	r2, r3, #31
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e34:	2102      	movs	r1, #2
 8002e36:	fa01 f202 	lsl.w	r2, r1, r2
 8002e3a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d038      	beq.n	8002ebe <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002e54:	e033      	b.n	8002ebe <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e5a:	f003 031f 	and.w	r3, r3, #31
 8002e5e:	2208      	movs	r2, #8
 8002e60:	409a      	lsls	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	4013      	ands	r3, r2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d02a      	beq.n	8002ec0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	f003 0308 	and.w	r3, r3, #8
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d025      	beq.n	8002ec0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 020e 	bic.w	r2, r2, #14
 8002e82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e88:	f003 021f 	and.w	r2, r3, #31
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e90:	2101      	movs	r1, #1
 8002e92:	fa01 f202 	lsl.w	r2, r1, r2
 8002e96:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d004      	beq.n	8002ec0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002ebe:	bf00      	nop
 8002ec0:	bf00      	nop
}
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
 8002eec:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002ef6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d004      	beq.n	8002f0a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002f08:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f0e:	f003 021f 	and.w	r2, r3, #31
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f16:	2101      	movs	r1, #1
 8002f18:	fa01 f202 	lsl.w	r2, r1, r2
 8002f1c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	2b10      	cmp	r3, #16
 8002f2c:	d108      	bne.n	8002f40 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68ba      	ldr	r2, [r7, #8]
 8002f3c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002f3e:	e007      	b.n	8002f50 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68ba      	ldr	r2, [r7, #8]
 8002f46:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	60da      	str	r2, [r3, #12]
}
 8002f50:	bf00      	nop
 8002f52:	3714      	adds	r7, #20
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b087      	sub	sp, #28
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	461a      	mov	r2, r3
 8002f6a:	4b16      	ldr	r3, [pc, #88]	@ (8002fc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d802      	bhi.n	8002f76 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002f70:	4b15      	ldr	r3, [pc, #84]	@ (8002fc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002f72:	617b      	str	r3, [r7, #20]
 8002f74:	e001      	b.n	8002f7a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8002f76:	4b15      	ldr	r3, [pc, #84]	@ (8002fcc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002f78:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	3b08      	subs	r3, #8
 8002f86:	4a12      	ldr	r2, [pc, #72]	@ (8002fd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002f88:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8c:	091b      	lsrs	r3, r3, #4
 8002f8e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f94:	089b      	lsrs	r3, r3, #2
 8002f96:	009a      	lsls	r2, r3, #2
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a0b      	ldr	r2, [pc, #44]	@ (8002fd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002fa6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f003 031f 	and.w	r3, r3, #31
 8002fae:	2201      	movs	r2, #1
 8002fb0:	409a      	lsls	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002fb6:	bf00      	nop
 8002fb8:	371c      	adds	r7, #28
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	40020407 	.word	0x40020407
 8002fc8:	40020800 	.word	0x40020800
 8002fcc:	40020820 	.word	0x40020820
 8002fd0:	cccccccd 	.word	0xcccccccd
 8002fd4:	40020880 	.word	0x40020880

08002fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	4b0b      	ldr	r3, [pc, #44]	@ (8003018 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002fec:	4413      	add	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a08      	ldr	r2, [pc, #32]	@ (800301c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002ffa:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	3b01      	subs	r3, #1
 8003000:	f003 031f 	and.w	r3, r3, #31
 8003004:	2201      	movs	r2, #1
 8003006:	409a      	lsls	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800300c:	bf00      	nop
 800300e:	3714      	adds	r7, #20
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr
 8003018:	1000823f 	.word	0x1000823f
 800301c:	40020940 	.word	0x40020940

08003020 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003020:	b480      	push	{r7}
 8003022:	b087      	sub	sp, #28
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800302a:	2300      	movs	r3, #0
 800302c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800302e:	e15a      	b.n	80032e6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	2101      	movs	r1, #1
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	fa01 f303 	lsl.w	r3, r1, r3
 800303c:	4013      	ands	r3, r2
 800303e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2b00      	cmp	r3, #0
 8003044:	f000 814c 	beq.w	80032e0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f003 0303 	and.w	r3, r3, #3
 8003050:	2b01      	cmp	r3, #1
 8003052:	d005      	beq.n	8003060 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800305c:	2b02      	cmp	r3, #2
 800305e:	d130      	bne.n	80030c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	2203      	movs	r2, #3
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	43db      	mvns	r3, r3
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	4013      	ands	r3, r2
 8003076:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	68da      	ldr	r2, [r3, #12]
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	4313      	orrs	r3, r2
 8003088:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003096:	2201      	movs	r2, #1
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	fa02 f303 	lsl.w	r3, r2, r3
 800309e:	43db      	mvns	r3, r3
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	4013      	ands	r3, r2
 80030a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	091b      	lsrs	r3, r3, #4
 80030ac:	f003 0201 	and.w	r2, r3, #1
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	fa02 f303 	lsl.w	r3, r2, r3
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f003 0303 	and.w	r3, r3, #3
 80030ca:	2b03      	cmp	r3, #3
 80030cc:	d017      	beq.n	80030fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	2203      	movs	r2, #3
 80030da:	fa02 f303 	lsl.w	r3, r2, r3
 80030de:	43db      	mvns	r3, r3
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	4013      	ands	r3, r2
 80030e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	689a      	ldr	r2, [r3, #8]
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f003 0303 	and.w	r3, r3, #3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d123      	bne.n	8003152 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	08da      	lsrs	r2, r3, #3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	3208      	adds	r2, #8
 8003112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003116:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	f003 0307 	and.w	r3, r3, #7
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	220f      	movs	r2, #15
 8003122:	fa02 f303 	lsl.w	r3, r2, r3
 8003126:	43db      	mvns	r3, r3
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	4013      	ands	r3, r2
 800312c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	691a      	ldr	r2, [r3, #16]
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	f003 0307 	and.w	r3, r3, #7
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	fa02 f303 	lsl.w	r3, r2, r3
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	4313      	orrs	r3, r2
 8003142:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	08da      	lsrs	r2, r3, #3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3208      	adds	r2, #8
 800314c:	6939      	ldr	r1, [r7, #16]
 800314e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	2203      	movs	r2, #3
 800315e:	fa02 f303 	lsl.w	r3, r2, r3
 8003162:	43db      	mvns	r3, r3
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	4013      	ands	r3, r2
 8003168:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f003 0203 	and.w	r2, r3, #3
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	fa02 f303 	lsl.w	r3, r2, r3
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	4313      	orrs	r3, r2
 800317e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800318e:	2b00      	cmp	r3, #0
 8003190:	f000 80a6 	beq.w	80032e0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003194:	4b5b      	ldr	r3, [pc, #364]	@ (8003304 <HAL_GPIO_Init+0x2e4>)
 8003196:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003198:	4a5a      	ldr	r2, [pc, #360]	@ (8003304 <HAL_GPIO_Init+0x2e4>)
 800319a:	f043 0301 	orr.w	r3, r3, #1
 800319e:	6613      	str	r3, [r2, #96]	@ 0x60
 80031a0:	4b58      	ldr	r3, [pc, #352]	@ (8003304 <HAL_GPIO_Init+0x2e4>)
 80031a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	60bb      	str	r3, [r7, #8]
 80031aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031ac:	4a56      	ldr	r2, [pc, #344]	@ (8003308 <HAL_GPIO_Init+0x2e8>)
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	089b      	lsrs	r3, r3, #2
 80031b2:	3302      	adds	r3, #2
 80031b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	f003 0303 	and.w	r3, r3, #3
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	220f      	movs	r2, #15
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	43db      	mvns	r3, r3
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	4013      	ands	r3, r2
 80031ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80031d6:	d01f      	beq.n	8003218 <HAL_GPIO_Init+0x1f8>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a4c      	ldr	r2, [pc, #304]	@ (800330c <HAL_GPIO_Init+0x2ec>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d019      	beq.n	8003214 <HAL_GPIO_Init+0x1f4>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a4b      	ldr	r2, [pc, #300]	@ (8003310 <HAL_GPIO_Init+0x2f0>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d013      	beq.n	8003210 <HAL_GPIO_Init+0x1f0>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a4a      	ldr	r2, [pc, #296]	@ (8003314 <HAL_GPIO_Init+0x2f4>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d00d      	beq.n	800320c <HAL_GPIO_Init+0x1ec>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a49      	ldr	r2, [pc, #292]	@ (8003318 <HAL_GPIO_Init+0x2f8>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d007      	beq.n	8003208 <HAL_GPIO_Init+0x1e8>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a48      	ldr	r2, [pc, #288]	@ (800331c <HAL_GPIO_Init+0x2fc>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d101      	bne.n	8003204 <HAL_GPIO_Init+0x1e4>
 8003200:	2305      	movs	r3, #5
 8003202:	e00a      	b.n	800321a <HAL_GPIO_Init+0x1fa>
 8003204:	2306      	movs	r3, #6
 8003206:	e008      	b.n	800321a <HAL_GPIO_Init+0x1fa>
 8003208:	2304      	movs	r3, #4
 800320a:	e006      	b.n	800321a <HAL_GPIO_Init+0x1fa>
 800320c:	2303      	movs	r3, #3
 800320e:	e004      	b.n	800321a <HAL_GPIO_Init+0x1fa>
 8003210:	2302      	movs	r3, #2
 8003212:	e002      	b.n	800321a <HAL_GPIO_Init+0x1fa>
 8003214:	2301      	movs	r3, #1
 8003216:	e000      	b.n	800321a <HAL_GPIO_Init+0x1fa>
 8003218:	2300      	movs	r3, #0
 800321a:	697a      	ldr	r2, [r7, #20]
 800321c:	f002 0203 	and.w	r2, r2, #3
 8003220:	0092      	lsls	r2, r2, #2
 8003222:	4093      	lsls	r3, r2
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	4313      	orrs	r3, r2
 8003228:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800322a:	4937      	ldr	r1, [pc, #220]	@ (8003308 <HAL_GPIO_Init+0x2e8>)
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	089b      	lsrs	r3, r3, #2
 8003230:	3302      	adds	r3, #2
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003238:	4b39      	ldr	r3, [pc, #228]	@ (8003320 <HAL_GPIO_Init+0x300>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	43db      	mvns	r3, r3
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	4013      	ands	r3, r2
 8003246:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d003      	beq.n	800325c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	4313      	orrs	r3, r2
 800325a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800325c:	4a30      	ldr	r2, [pc, #192]	@ (8003320 <HAL_GPIO_Init+0x300>)
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003262:	4b2f      	ldr	r3, [pc, #188]	@ (8003320 <HAL_GPIO_Init+0x300>)
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	43db      	mvns	r3, r3
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	4013      	ands	r3, r2
 8003270:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d003      	beq.n	8003286 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	4313      	orrs	r3, r2
 8003284:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003286:	4a26      	ldr	r2, [pc, #152]	@ (8003320 <HAL_GPIO_Init+0x300>)
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800328c:	4b24      	ldr	r3, [pc, #144]	@ (8003320 <HAL_GPIO_Init+0x300>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	43db      	mvns	r3, r3
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	4013      	ands	r3, r2
 800329a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d003      	beq.n	80032b0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80032a8:	693a      	ldr	r2, [r7, #16]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80032b0:	4a1b      	ldr	r2, [pc, #108]	@ (8003320 <HAL_GPIO_Init+0x300>)
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80032b6:	4b1a      	ldr	r3, [pc, #104]	@ (8003320 <HAL_GPIO_Init+0x300>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	43db      	mvns	r3, r3
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	4013      	ands	r3, r2
 80032c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80032da:	4a11      	ldr	r2, [pc, #68]	@ (8003320 <HAL_GPIO_Init+0x300>)
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	3301      	adds	r3, #1
 80032e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	fa22 f303 	lsr.w	r3, r2, r3
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f47f ae9d 	bne.w	8003030 <HAL_GPIO_Init+0x10>
  }
}
 80032f6:	bf00      	nop
 80032f8:	bf00      	nop
 80032fa:	371c      	adds	r7, #28
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	40021000 	.word	0x40021000
 8003308:	40010000 	.word	0x40010000
 800330c:	48000400 	.word	0x48000400
 8003310:	48000800 	.word	0x48000800
 8003314:	48000c00 	.word	0x48000c00
 8003318:	48001000 	.word	0x48001000
 800331c:	48001400 	.word	0x48001400
 8003320:	40010400 	.word	0x40010400

08003324 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	460b      	mov	r3, r1
 800332e:	807b      	strh	r3, [r7, #2]
 8003330:	4613      	mov	r3, r2
 8003332:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003334:	787b      	ldrb	r3, [r7, #1]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d003      	beq.n	8003342 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800333a:	887a      	ldrh	r2, [r7, #2]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003340:	e002      	b.n	8003348 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003342:	887a      	ldrh	r2, [r7, #2]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	4603      	mov	r3, r0
 800335c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800335e:	4b08      	ldr	r3, [pc, #32]	@ (8003380 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003360:	695a      	ldr	r2, [r3, #20]
 8003362:	88fb      	ldrh	r3, [r7, #6]
 8003364:	4013      	ands	r3, r2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d006      	beq.n	8003378 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800336a:	4a05      	ldr	r2, [pc, #20]	@ (8003380 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800336c:	88fb      	ldrh	r3, [r7, #6]
 800336e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003370:	88fb      	ldrh	r3, [r7, #6]
 8003372:	4618      	mov	r0, r3
 8003374:	f000 f806 	bl	8003384 <HAL_GPIO_EXTI_Callback>
  }
}
 8003378:	bf00      	nop
 800337a:	3708      	adds	r7, #8
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	40010400 	.word	0x40010400

08003384 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	4603      	mov	r3, r0
 800338c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800338e:	bf00      	nop
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr

0800339a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b082      	sub	sp, #8
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d101      	bne.n	80033ac <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e08d      	b.n	80034c8 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d106      	bne.n	80033c6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f7fe f9f5 	bl	80017b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2224      	movs	r2, #36	@ 0x24
 80033ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 0201 	bic.w	r2, r2, #1
 80033dc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685a      	ldr	r2, [r3, #4]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80033ea:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689a      	ldr	r2, [r3, #8]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80033fa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d107      	bne.n	8003414 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689a      	ldr	r2, [r3, #8]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003410:	609a      	str	r2, [r3, #8]
 8003412:	e006      	b.n	8003422 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689a      	ldr	r2, [r3, #8]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003420:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	2b02      	cmp	r3, #2
 8003428:	d108      	bne.n	800343c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	685a      	ldr	r2, [r3, #4]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003438:	605a      	str	r2, [r3, #4]
 800343a:	e007      	b.n	800344c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	685a      	ldr	r2, [r3, #4]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800344a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	6812      	ldr	r2, [r2, #0]
 8003456:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800345a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800345e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68da      	ldr	r2, [r3, #12]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800346e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	691a      	ldr	r2, [r3, #16]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	695b      	ldr	r3, [r3, #20]
 8003478:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	430a      	orrs	r2, r1
 8003488:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	69d9      	ldr	r1, [r3, #28]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1a      	ldr	r2, [r3, #32]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f042 0201 	orr.w	r2, r2, #1
 80034a8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2220      	movs	r2, #32
 80034b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3708      	adds	r7, #8
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b088      	sub	sp, #32
 80034d4:	af02      	add	r7, sp, #8
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	4608      	mov	r0, r1
 80034da:	4611      	mov	r1, r2
 80034dc:	461a      	mov	r2, r3
 80034de:	4603      	mov	r3, r0
 80034e0:	817b      	strh	r3, [r7, #10]
 80034e2:	460b      	mov	r3, r1
 80034e4:	813b      	strh	r3, [r7, #8]
 80034e6:	4613      	mov	r3, r2
 80034e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b20      	cmp	r3, #32
 80034f4:	f040 80f9 	bne.w	80036ea <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034f8:	6a3b      	ldr	r3, [r7, #32]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d002      	beq.n	8003504 <HAL_I2C_Mem_Write+0x34>
 80034fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003500:	2b00      	cmp	r3, #0
 8003502:	d105      	bne.n	8003510 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800350a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e0ed      	b.n	80036ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003516:	2b01      	cmp	r3, #1
 8003518:	d101      	bne.n	800351e <HAL_I2C_Mem_Write+0x4e>
 800351a:	2302      	movs	r3, #2
 800351c:	e0e6      	b.n	80036ec <HAL_I2C_Mem_Write+0x21c>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003526:	f7ff f951 	bl	80027cc <HAL_GetTick>
 800352a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	2319      	movs	r3, #25
 8003532:	2201      	movs	r2, #1
 8003534:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f000 fac3 	bl	8003ac4 <I2C_WaitOnFlagUntilTimeout>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d001      	beq.n	8003548 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e0d1      	b.n	80036ec <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2221      	movs	r2, #33	@ 0x21
 800354c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2240      	movs	r2, #64	@ 0x40
 8003554:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6a3a      	ldr	r2, [r7, #32]
 8003562:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003568:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003570:	88f8      	ldrh	r0, [r7, #6]
 8003572:	893a      	ldrh	r2, [r7, #8]
 8003574:	8979      	ldrh	r1, [r7, #10]
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	9301      	str	r3, [sp, #4]
 800357a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	4603      	mov	r3, r0
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f000 f9d3 	bl	800392c <I2C_RequestMemoryWrite>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d005      	beq.n	8003598 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e0a9      	b.n	80036ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800359c:	b29b      	uxth	r3, r3
 800359e:	2bff      	cmp	r3, #255	@ 0xff
 80035a0:	d90e      	bls.n	80035c0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	22ff      	movs	r2, #255	@ 0xff
 80035a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ac:	b2da      	uxtb	r2, r3
 80035ae:	8979      	ldrh	r1, [r7, #10]
 80035b0:	2300      	movs	r3, #0
 80035b2:	9300      	str	r3, [sp, #0]
 80035b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80035b8:	68f8      	ldr	r0, [r7, #12]
 80035ba:	f000 fc47 	bl	8003e4c <I2C_TransferConfig>
 80035be:	e00f      	b.n	80035e0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ce:	b2da      	uxtb	r2, r3
 80035d0:	8979      	ldrh	r1, [r7, #10]
 80035d2:	2300      	movs	r3, #0
 80035d4:	9300      	str	r3, [sp, #0]
 80035d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f000 fc36 	bl	8003e4c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035e0:	697a      	ldr	r2, [r7, #20]
 80035e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f000 fac6 	bl	8003b76 <I2C_WaitOnTXISFlagUntilTimeout>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e07b      	b.n	80036ec <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f8:	781a      	ldrb	r2, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003604:	1c5a      	adds	r2, r3, #1
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800360e:	b29b      	uxth	r3, r3
 8003610:	3b01      	subs	r3, #1
 8003612:	b29a      	uxth	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800361c:	3b01      	subs	r3, #1
 800361e:	b29a      	uxth	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003628:	b29b      	uxth	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d034      	beq.n	8003698 <HAL_I2C_Mem_Write+0x1c8>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003632:	2b00      	cmp	r3, #0
 8003634:	d130      	bne.n	8003698 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	9300      	str	r3, [sp, #0]
 800363a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800363c:	2200      	movs	r2, #0
 800363e:	2180      	movs	r1, #128	@ 0x80
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f000 fa3f 	bl	8003ac4 <I2C_WaitOnFlagUntilTimeout>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e04d      	b.n	80036ec <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003654:	b29b      	uxth	r3, r3
 8003656:	2bff      	cmp	r3, #255	@ 0xff
 8003658:	d90e      	bls.n	8003678 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	22ff      	movs	r2, #255	@ 0xff
 800365e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003664:	b2da      	uxtb	r2, r3
 8003666:	8979      	ldrh	r1, [r7, #10]
 8003668:	2300      	movs	r3, #0
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f000 fbeb 	bl	8003e4c <I2C_TransferConfig>
 8003676:	e00f      	b.n	8003698 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800367c:	b29a      	uxth	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003686:	b2da      	uxtb	r2, r3
 8003688:	8979      	ldrh	r1, [r7, #10]
 800368a:	2300      	movs	r3, #0
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f000 fbda 	bl	8003e4c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800369c:	b29b      	uxth	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d19e      	bne.n	80035e0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f000 faac 	bl	8003c04 <I2C_WaitOnSTOPFlagUntilTimeout>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e01a      	b.n	80036ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2220      	movs	r2, #32
 80036bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	6859      	ldr	r1, [r3, #4]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	4b0a      	ldr	r3, [pc, #40]	@ (80036f4 <HAL_I2C_Mem_Write+0x224>)
 80036ca:	400b      	ands	r3, r1
 80036cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2220      	movs	r2, #32
 80036d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80036e6:	2300      	movs	r3, #0
 80036e8:	e000      	b.n	80036ec <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80036ea:	2302      	movs	r3, #2
  }
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3718      	adds	r7, #24
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	fe00e800 	.word	0xfe00e800

080036f8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b088      	sub	sp, #32
 80036fc:	af02      	add	r7, sp, #8
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	4608      	mov	r0, r1
 8003702:	4611      	mov	r1, r2
 8003704:	461a      	mov	r2, r3
 8003706:	4603      	mov	r3, r0
 8003708:	817b      	strh	r3, [r7, #10]
 800370a:	460b      	mov	r3, r1
 800370c:	813b      	strh	r3, [r7, #8]
 800370e:	4613      	mov	r3, r2
 8003710:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b20      	cmp	r3, #32
 800371c:	f040 80fd 	bne.w	800391a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003720:	6a3b      	ldr	r3, [r7, #32]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d002      	beq.n	800372c <HAL_I2C_Mem_Read+0x34>
 8003726:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003728:	2b00      	cmp	r3, #0
 800372a:	d105      	bne.n	8003738 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003732:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e0f1      	b.n	800391c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800373e:	2b01      	cmp	r3, #1
 8003740:	d101      	bne.n	8003746 <HAL_I2C_Mem_Read+0x4e>
 8003742:	2302      	movs	r3, #2
 8003744:	e0ea      	b.n	800391c <HAL_I2C_Mem_Read+0x224>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800374e:	f7ff f83d 	bl	80027cc <HAL_GetTick>
 8003752:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	9300      	str	r3, [sp, #0]
 8003758:	2319      	movs	r3, #25
 800375a:	2201      	movs	r2, #1
 800375c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f000 f9af 	bl	8003ac4 <I2C_WaitOnFlagUntilTimeout>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d001      	beq.n	8003770 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e0d5      	b.n	800391c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2222      	movs	r2, #34	@ 0x22
 8003774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2240      	movs	r2, #64	@ 0x40
 800377c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6a3a      	ldr	r2, [r7, #32]
 800378a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003790:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003798:	88f8      	ldrh	r0, [r7, #6]
 800379a:	893a      	ldrh	r2, [r7, #8]
 800379c:	8979      	ldrh	r1, [r7, #10]
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	9301      	str	r3, [sp, #4]
 80037a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	4603      	mov	r3, r0
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f000 f913 	bl	80039d4 <I2C_RequestMemoryRead>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d005      	beq.n	80037c0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e0ad      	b.n	800391c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	2bff      	cmp	r3, #255	@ 0xff
 80037c8:	d90e      	bls.n	80037e8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	22ff      	movs	r2, #255	@ 0xff
 80037ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037d4:	b2da      	uxtb	r2, r3
 80037d6:	8979      	ldrh	r1, [r7, #10]
 80037d8:	4b52      	ldr	r3, [pc, #328]	@ (8003924 <HAL_I2C_Mem_Read+0x22c>)
 80037da:	9300      	str	r3, [sp, #0]
 80037dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f000 fb33 	bl	8003e4c <I2C_TransferConfig>
 80037e6:	e00f      	b.n	8003808 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037f6:	b2da      	uxtb	r2, r3
 80037f8:	8979      	ldrh	r1, [r7, #10]
 80037fa:	4b4a      	ldr	r3, [pc, #296]	@ (8003924 <HAL_I2C_Mem_Read+0x22c>)
 80037fc:	9300      	str	r3, [sp, #0]
 80037fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003802:	68f8      	ldr	r0, [r7, #12]
 8003804:	f000 fb22 	bl	8003e4c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	9300      	str	r3, [sp, #0]
 800380c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800380e:	2200      	movs	r2, #0
 8003810:	2104      	movs	r1, #4
 8003812:	68f8      	ldr	r0, [r7, #12]
 8003814:	f000 f956 	bl	8003ac4 <I2C_WaitOnFlagUntilTimeout>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e07c      	b.n	800391c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800382c:	b2d2      	uxtb	r2, r2
 800382e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003834:	1c5a      	adds	r2, r3, #1
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800383e:	3b01      	subs	r3, #1
 8003840:	b29a      	uxth	r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800384a:	b29b      	uxth	r3, r3
 800384c:	3b01      	subs	r3, #1
 800384e:	b29a      	uxth	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003858:	b29b      	uxth	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d034      	beq.n	80038c8 <HAL_I2C_Mem_Read+0x1d0>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003862:	2b00      	cmp	r3, #0
 8003864:	d130      	bne.n	80038c8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	9300      	str	r3, [sp, #0]
 800386a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800386c:	2200      	movs	r2, #0
 800386e:	2180      	movs	r1, #128	@ 0x80
 8003870:	68f8      	ldr	r0, [r7, #12]
 8003872:	f000 f927 	bl	8003ac4 <I2C_WaitOnFlagUntilTimeout>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e04d      	b.n	800391c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003884:	b29b      	uxth	r3, r3
 8003886:	2bff      	cmp	r3, #255	@ 0xff
 8003888:	d90e      	bls.n	80038a8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	22ff      	movs	r2, #255	@ 0xff
 800388e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003894:	b2da      	uxtb	r2, r3
 8003896:	8979      	ldrh	r1, [r7, #10]
 8003898:	2300      	movs	r3, #0
 800389a:	9300      	str	r3, [sp, #0]
 800389c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80038a0:	68f8      	ldr	r0, [r7, #12]
 80038a2:	f000 fad3 	bl	8003e4c <I2C_TransferConfig>
 80038a6:	e00f      	b.n	80038c8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038b6:	b2da      	uxtb	r2, r3
 80038b8:	8979      	ldrh	r1, [r7, #10]
 80038ba:	2300      	movs	r3, #0
 80038bc:	9300      	str	r3, [sp, #0]
 80038be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80038c2:	68f8      	ldr	r0, [r7, #12]
 80038c4:	f000 fac2 	bl	8003e4c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d19a      	bne.n	8003808 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f000 f994 	bl	8003c04 <I2C_WaitOnSTOPFlagUntilTimeout>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e01a      	b.n	800391c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2220      	movs	r2, #32
 80038ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6859      	ldr	r1, [r3, #4]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003928 <HAL_I2C_Mem_Read+0x230>)
 80038fa:	400b      	ands	r3, r1
 80038fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2220      	movs	r2, #32
 8003902:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003916:	2300      	movs	r3, #0
 8003918:	e000      	b.n	800391c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800391a:	2302      	movs	r3, #2
  }
}
 800391c:	4618      	mov	r0, r3
 800391e:	3718      	adds	r7, #24
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	80002400 	.word	0x80002400
 8003928:	fe00e800 	.word	0xfe00e800

0800392c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af02      	add	r7, sp, #8
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	4608      	mov	r0, r1
 8003936:	4611      	mov	r1, r2
 8003938:	461a      	mov	r2, r3
 800393a:	4603      	mov	r3, r0
 800393c:	817b      	strh	r3, [r7, #10]
 800393e:	460b      	mov	r3, r1
 8003940:	813b      	strh	r3, [r7, #8]
 8003942:	4613      	mov	r3, r2
 8003944:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003946:	88fb      	ldrh	r3, [r7, #6]
 8003948:	b2da      	uxtb	r2, r3
 800394a:	8979      	ldrh	r1, [r7, #10]
 800394c:	4b20      	ldr	r3, [pc, #128]	@ (80039d0 <I2C_RequestMemoryWrite+0xa4>)
 800394e:	9300      	str	r3, [sp, #0]
 8003950:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f000 fa79 	bl	8003e4c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800395a:	69fa      	ldr	r2, [r7, #28]
 800395c:	69b9      	ldr	r1, [r7, #24]
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f000 f909 	bl	8003b76 <I2C_WaitOnTXISFlagUntilTimeout>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e02c      	b.n	80039c8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800396e:	88fb      	ldrh	r3, [r7, #6]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d105      	bne.n	8003980 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003974:	893b      	ldrh	r3, [r7, #8]
 8003976:	b2da      	uxtb	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	629a      	str	r2, [r3, #40]	@ 0x28
 800397e:	e015      	b.n	80039ac <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003980:	893b      	ldrh	r3, [r7, #8]
 8003982:	0a1b      	lsrs	r3, r3, #8
 8003984:	b29b      	uxth	r3, r3
 8003986:	b2da      	uxtb	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800398e:	69fa      	ldr	r2, [r7, #28]
 8003990:	69b9      	ldr	r1, [r7, #24]
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f000 f8ef 	bl	8003b76 <I2C_WaitOnTXISFlagUntilTimeout>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e012      	b.n	80039c8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80039a2:	893b      	ldrh	r3, [r7, #8]
 80039a4:	b2da      	uxtb	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	9300      	str	r3, [sp, #0]
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	2200      	movs	r2, #0
 80039b4:	2180      	movs	r1, #128	@ 0x80
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f000 f884 	bl	8003ac4 <I2C_WaitOnFlagUntilTimeout>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e000      	b.n	80039c8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3710      	adds	r7, #16
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	80002000 	.word	0x80002000

080039d4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af02      	add	r7, sp, #8
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	4608      	mov	r0, r1
 80039de:	4611      	mov	r1, r2
 80039e0:	461a      	mov	r2, r3
 80039e2:	4603      	mov	r3, r0
 80039e4:	817b      	strh	r3, [r7, #10]
 80039e6:	460b      	mov	r3, r1
 80039e8:	813b      	strh	r3, [r7, #8]
 80039ea:	4613      	mov	r3, r2
 80039ec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80039ee:	88fb      	ldrh	r3, [r7, #6]
 80039f0:	b2da      	uxtb	r2, r3
 80039f2:	8979      	ldrh	r1, [r7, #10]
 80039f4:	4b20      	ldr	r3, [pc, #128]	@ (8003a78 <I2C_RequestMemoryRead+0xa4>)
 80039f6:	9300      	str	r3, [sp, #0]
 80039f8:	2300      	movs	r3, #0
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	f000 fa26 	bl	8003e4c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a00:	69fa      	ldr	r2, [r7, #28]
 8003a02:	69b9      	ldr	r1, [r7, #24]
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f000 f8b6 	bl	8003b76 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d001      	beq.n	8003a14 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e02c      	b.n	8003a6e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a14:	88fb      	ldrh	r3, [r7, #6]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d105      	bne.n	8003a26 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a1a:	893b      	ldrh	r3, [r7, #8]
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a24:	e015      	b.n	8003a52 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003a26:	893b      	ldrh	r3, [r7, #8]
 8003a28:	0a1b      	lsrs	r3, r3, #8
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	b2da      	uxtb	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a34:	69fa      	ldr	r2, [r7, #28]
 8003a36:	69b9      	ldr	r1, [r7, #24]
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	f000 f89c 	bl	8003b76 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d001      	beq.n	8003a48 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e012      	b.n	8003a6e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a48:	893b      	ldrh	r3, [r7, #8]
 8003a4a:	b2da      	uxtb	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	9300      	str	r3, [sp, #0]
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	2140      	movs	r1, #64	@ 0x40
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	f000 f831 	bl	8003ac4 <I2C_WaitOnFlagUntilTimeout>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d001      	beq.n	8003a6c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e000      	b.n	8003a6e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	80002000 	.word	0x80002000

08003a7c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d103      	bne.n	8003a9a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2200      	movs	r2, #0
 8003a98:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d007      	beq.n	8003ab8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	699a      	ldr	r2, [r3, #24]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f042 0201 	orr.w	r2, r2, #1
 8003ab6:	619a      	str	r2, [r3, #24]
  }
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	603b      	str	r3, [r7, #0]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ad4:	e03b      	b.n	8003b4e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	6839      	ldr	r1, [r7, #0]
 8003ada:	68f8      	ldr	r0, [r7, #12]
 8003adc:	f000 f8d6 	bl	8003c8c <I2C_IsErrorOccurred>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e041      	b.n	8003b6e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003af0:	d02d      	beq.n	8003b4e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003af2:	f7fe fe6b 	bl	80027cc <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	683a      	ldr	r2, [r7, #0]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d302      	bcc.n	8003b08 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d122      	bne.n	8003b4e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	699a      	ldr	r2, [r3, #24]
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	4013      	ands	r3, r2
 8003b12:	68ba      	ldr	r2, [r7, #8]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	bf0c      	ite	eq
 8003b18:	2301      	moveq	r3, #1
 8003b1a:	2300      	movne	r3, #0
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	461a      	mov	r2, r3
 8003b20:	79fb      	ldrb	r3, [r7, #7]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d113      	bne.n	8003b4e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b2a:	f043 0220 	orr.w	r2, r3, #32
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2220      	movs	r2, #32
 8003b36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e00f      	b.n	8003b6e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	699a      	ldr	r2, [r3, #24]
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	4013      	ands	r3, r2
 8003b58:	68ba      	ldr	r2, [r7, #8]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	bf0c      	ite	eq
 8003b5e:	2301      	moveq	r3, #1
 8003b60:	2300      	movne	r3, #0
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	461a      	mov	r2, r3
 8003b66:	79fb      	ldrb	r3, [r7, #7]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d0b4      	beq.n	8003ad6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b084      	sub	sp, #16
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	60f8      	str	r0, [r7, #12]
 8003b7e:	60b9      	str	r1, [r7, #8]
 8003b80:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b82:	e033      	b.n	8003bec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	68b9      	ldr	r1, [r7, #8]
 8003b88:	68f8      	ldr	r0, [r7, #12]
 8003b8a:	f000 f87f 	bl	8003c8c <I2C_IsErrorOccurred>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d001      	beq.n	8003b98 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e031      	b.n	8003bfc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b9e:	d025      	beq.n	8003bec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ba0:	f7fe fe14 	bl	80027cc <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	68ba      	ldr	r2, [r7, #8]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d302      	bcc.n	8003bb6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d11a      	bne.n	8003bec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d013      	beq.n	8003bec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bc8:	f043 0220 	orr.w	r2, r3, #32
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e007      	b.n	8003bfc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d1c4      	bne.n	8003b84 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3710      	adds	r7, #16
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c10:	e02f      	b.n	8003c72 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	68b9      	ldr	r1, [r7, #8]
 8003c16:	68f8      	ldr	r0, [r7, #12]
 8003c18:	f000 f838 	bl	8003c8c <I2C_IsErrorOccurred>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e02d      	b.n	8003c82 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c26:	f7fe fdd1 	bl	80027cc <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	68ba      	ldr	r2, [r7, #8]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d302      	bcc.n	8003c3c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d11a      	bne.n	8003c72 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	f003 0320 	and.w	r3, r3, #32
 8003c46:	2b20      	cmp	r3, #32
 8003c48:	d013      	beq.n	8003c72 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c4e:	f043 0220 	orr.w	r2, r3, #32
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2220      	movs	r2, #32
 8003c5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e007      	b.n	8003c82 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	f003 0320 	and.w	r3, r3, #32
 8003c7c:	2b20      	cmp	r3, #32
 8003c7e:	d1c8      	bne.n	8003c12 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
	...

08003c8c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b08a      	sub	sp, #40	@ 0x28
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	f003 0310 	and.w	r3, r3, #16
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d068      	beq.n	8003d8a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2210      	movs	r2, #16
 8003cbe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003cc0:	e049      	b.n	8003d56 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003cc8:	d045      	beq.n	8003d56 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003cca:	f7fe fd7f 	bl	80027cc <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	68ba      	ldr	r2, [r7, #8]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d302      	bcc.n	8003ce0 <I2C_IsErrorOccurred+0x54>
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d13a      	bne.n	8003d56 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003cf2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003cfe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d02:	d121      	bne.n	8003d48 <I2C_IsErrorOccurred+0xbc>
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d0a:	d01d      	beq.n	8003d48 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003d0c:	7cfb      	ldrb	r3, [r7, #19]
 8003d0e:	2b20      	cmp	r3, #32
 8003d10:	d01a      	beq.n	8003d48 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d20:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003d22:	f7fe fd53 	bl	80027cc <HAL_GetTick>
 8003d26:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d28:	e00e      	b.n	8003d48 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003d2a:	f7fe fd4f 	bl	80027cc <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	2b19      	cmp	r3, #25
 8003d36:	d907      	bls.n	8003d48 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003d38:	6a3b      	ldr	r3, [r7, #32]
 8003d3a:	f043 0320 	orr.w	r3, r3, #32
 8003d3e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003d46:	e006      	b.n	8003d56 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	f003 0320 	and.w	r3, r3, #32
 8003d52:	2b20      	cmp	r3, #32
 8003d54:	d1e9      	bne.n	8003d2a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	f003 0320 	and.w	r3, r3, #32
 8003d60:	2b20      	cmp	r3, #32
 8003d62:	d003      	beq.n	8003d6c <I2C_IsErrorOccurred+0xe0>
 8003d64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d0aa      	beq.n	8003cc2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003d6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d103      	bne.n	8003d7c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2220      	movs	r2, #32
 8003d7a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003d7c:	6a3b      	ldr	r3, [r7, #32]
 8003d7e:	f043 0304 	orr.w	r3, r3, #4
 8003d82:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00b      	beq.n	8003db4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003d9c:	6a3b      	ldr	r3, [r7, #32]
 8003d9e:	f043 0301 	orr.w	r3, r3, #1
 8003da2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003dac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00b      	beq.n	8003dd6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003dbe:	6a3b      	ldr	r3, [r7, #32]
 8003dc0:	f043 0308 	orr.w	r3, r3, #8
 8003dc4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003dce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00b      	beq.n	8003df8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003de0:	6a3b      	ldr	r3, [r7, #32]
 8003de2:	f043 0302 	orr.w	r3, r3, #2
 8003de6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003df0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003df8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d01c      	beq.n	8003e3a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f7ff fe3b 	bl	8003a7c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	6859      	ldr	r1, [r3, #4]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	4b0d      	ldr	r3, [pc, #52]	@ (8003e48 <I2C_IsErrorOccurred+0x1bc>)
 8003e12:	400b      	ands	r3, r1
 8003e14:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e1a:	6a3b      	ldr	r3, [r7, #32]
 8003e1c:	431a      	orrs	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2220      	movs	r2, #32
 8003e26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003e3a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3728      	adds	r7, #40	@ 0x28
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	fe00e800 	.word	0xfe00e800

08003e4c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b087      	sub	sp, #28
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	607b      	str	r3, [r7, #4]
 8003e56:	460b      	mov	r3, r1
 8003e58:	817b      	strh	r3, [r7, #10]
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e5e:	897b      	ldrh	r3, [r7, #10]
 8003e60:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e64:	7a7b      	ldrb	r3, [r7, #9]
 8003e66:	041b      	lsls	r3, r3, #16
 8003e68:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e6c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e72:	6a3b      	ldr	r3, [r7, #32]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003e7a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	685a      	ldr	r2, [r3, #4]
 8003e82:	6a3b      	ldr	r3, [r7, #32]
 8003e84:	0d5b      	lsrs	r3, r3, #21
 8003e86:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003e8a:	4b08      	ldr	r3, [pc, #32]	@ (8003eac <I2C_TransferConfig+0x60>)
 8003e8c:	430b      	orrs	r3, r1
 8003e8e:	43db      	mvns	r3, r3
 8003e90:	ea02 0103 	and.w	r1, r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003e9e:	bf00      	nop
 8003ea0:	371c      	adds	r7, #28
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	03ff63ff 	.word	0x03ff63ff

08003eb0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b20      	cmp	r3, #32
 8003ec4:	d138      	bne.n	8003f38 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d101      	bne.n	8003ed4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	e032      	b.n	8003f3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2224      	movs	r2, #36	@ 0x24
 8003ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 0201 	bic.w	r2, r2, #1
 8003ef2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003f02:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	6819      	ldr	r1, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	683a      	ldr	r2, [r7, #0]
 8003f10:	430a      	orrs	r2, r1
 8003f12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f042 0201 	orr.w	r2, r2, #1
 8003f22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2220      	movs	r2, #32
 8003f28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f34:	2300      	movs	r3, #0
 8003f36:	e000      	b.n	8003f3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f38:	2302      	movs	r3, #2
  }
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	370c      	adds	r7, #12
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr

08003f46 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f46:	b480      	push	{r7}
 8003f48:	b085      	sub	sp, #20
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
 8003f4e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b20      	cmp	r3, #32
 8003f5a:	d139      	bne.n	8003fd0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d101      	bne.n	8003f6a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003f66:	2302      	movs	r3, #2
 8003f68:	e033      	b.n	8003fd2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2224      	movs	r2, #36	@ 0x24
 8003f76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f022 0201 	bic.w	r2, r2, #1
 8003f88:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003f98:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	021b      	lsls	r3, r3, #8
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f042 0201 	orr.w	r2, r2, #1
 8003fba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2220      	movs	r2, #32
 8003fc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	e000      	b.n	8003fd2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003fd0:	2302      	movs	r3, #2
  }
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3714      	adds	r7, #20
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
	...

08003fe0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d141      	bne.n	8004072 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003fee:	4b4b      	ldr	r3, [pc, #300]	@ (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003ff6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ffa:	d131      	bne.n	8004060 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ffc:	4b47      	ldr	r3, [pc, #284]	@ (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ffe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004002:	4a46      	ldr	r2, [pc, #280]	@ (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004004:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004008:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800400c:	4b43      	ldr	r3, [pc, #268]	@ (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004014:	4a41      	ldr	r2, [pc, #260]	@ (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004016:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800401a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800401c:	4b40      	ldr	r3, [pc, #256]	@ (8004120 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2232      	movs	r2, #50	@ 0x32
 8004022:	fb02 f303 	mul.w	r3, r2, r3
 8004026:	4a3f      	ldr	r2, [pc, #252]	@ (8004124 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004028:	fba2 2303 	umull	r2, r3, r2, r3
 800402c:	0c9b      	lsrs	r3, r3, #18
 800402e:	3301      	adds	r3, #1
 8004030:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004032:	e002      	b.n	800403a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	3b01      	subs	r3, #1
 8004038:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800403a:	4b38      	ldr	r3, [pc, #224]	@ (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004042:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004046:	d102      	bne.n	800404e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1f2      	bne.n	8004034 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800404e:	4b33      	ldr	r3, [pc, #204]	@ (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004056:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800405a:	d158      	bne.n	800410e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e057      	b.n	8004110 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004060:	4b2e      	ldr	r3, [pc, #184]	@ (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004062:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004066:	4a2d      	ldr	r2, [pc, #180]	@ (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004068:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800406c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004070:	e04d      	b.n	800410e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004078:	d141      	bne.n	80040fe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800407a:	4b28      	ldr	r3, [pc, #160]	@ (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004082:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004086:	d131      	bne.n	80040ec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004088:	4b24      	ldr	r3, [pc, #144]	@ (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800408a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800408e:	4a23      	ldr	r2, [pc, #140]	@ (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004090:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004094:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004098:	4b20      	ldr	r3, [pc, #128]	@ (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80040a0:	4a1e      	ldr	r2, [pc, #120]	@ (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80040a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80040a8:	4b1d      	ldr	r3, [pc, #116]	@ (8004120 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2232      	movs	r2, #50	@ 0x32
 80040ae:	fb02 f303 	mul.w	r3, r2, r3
 80040b2:	4a1c      	ldr	r2, [pc, #112]	@ (8004124 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80040b4:	fba2 2303 	umull	r2, r3, r2, r3
 80040b8:	0c9b      	lsrs	r3, r3, #18
 80040ba:	3301      	adds	r3, #1
 80040bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040be:	e002      	b.n	80040c6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	3b01      	subs	r3, #1
 80040c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040c6:	4b15      	ldr	r3, [pc, #84]	@ (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040d2:	d102      	bne.n	80040da <HAL_PWREx_ControlVoltageScaling+0xfa>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1f2      	bne.n	80040c0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040da:	4b10      	ldr	r3, [pc, #64]	@ (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040e6:	d112      	bne.n	800410e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e011      	b.n	8004110 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040ec:	4b0b      	ldr	r3, [pc, #44]	@ (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040f2:	4a0a      	ldr	r2, [pc, #40]	@ (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80040fc:	e007      	b.n	800410e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80040fe:	4b07      	ldr	r3, [pc, #28]	@ (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004106:	4a05      	ldr	r2, [pc, #20]	@ (800411c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004108:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800410c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3714      	adds	r7, #20
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr
 800411c:	40007000 	.word	0x40007000
 8004120:	2000000c 	.word	0x2000000c
 8004124:	431bde83 	.word	0x431bde83

08004128 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004128:	b480      	push	{r7}
 800412a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800412c:	4b05      	ldr	r3, [pc, #20]	@ (8004144 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	4a04      	ldr	r2, [pc, #16]	@ (8004144 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004132:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004136:	6093      	str	r3, [r2, #8]
}
 8004138:	bf00      	nop
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	40007000 	.word	0x40007000

08004148 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b088      	sub	sp, #32
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e2fe      	b.n	8004758 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b00      	cmp	r3, #0
 8004164:	d075      	beq.n	8004252 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004166:	4b97      	ldr	r3, [pc, #604]	@ (80043c4 <HAL_RCC_OscConfig+0x27c>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f003 030c 	and.w	r3, r3, #12
 800416e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004170:	4b94      	ldr	r3, [pc, #592]	@ (80043c4 <HAL_RCC_OscConfig+0x27c>)
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	f003 0303 	and.w	r3, r3, #3
 8004178:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	2b0c      	cmp	r3, #12
 800417e:	d102      	bne.n	8004186 <HAL_RCC_OscConfig+0x3e>
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	2b03      	cmp	r3, #3
 8004184:	d002      	beq.n	800418c <HAL_RCC_OscConfig+0x44>
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	2b08      	cmp	r3, #8
 800418a:	d10b      	bne.n	80041a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800418c:	4b8d      	ldr	r3, [pc, #564]	@ (80043c4 <HAL_RCC_OscConfig+0x27c>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d05b      	beq.n	8004250 <HAL_RCC_OscConfig+0x108>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d157      	bne.n	8004250 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e2d9      	b.n	8004758 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041ac:	d106      	bne.n	80041bc <HAL_RCC_OscConfig+0x74>
 80041ae:	4b85      	ldr	r3, [pc, #532]	@ (80043c4 <HAL_RCC_OscConfig+0x27c>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a84      	ldr	r2, [pc, #528]	@ (80043c4 <HAL_RCC_OscConfig+0x27c>)
 80041b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041b8:	6013      	str	r3, [r2, #0]
 80041ba:	e01d      	b.n	80041f8 <HAL_RCC_OscConfig+0xb0>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80041c4:	d10c      	bne.n	80041e0 <HAL_RCC_OscConfig+0x98>
 80041c6:	4b7f      	ldr	r3, [pc, #508]	@ (80043c4 <HAL_RCC_OscConfig+0x27c>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a7e      	ldr	r2, [pc, #504]	@ (80043c4 <HAL_RCC_OscConfig+0x27c>)
 80041cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041d0:	6013      	str	r3, [r2, #0]
 80041d2:	4b7c      	ldr	r3, [pc, #496]	@ (80043c4 <HAL_RCC_OscConfig+0x27c>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a7b      	ldr	r2, [pc, #492]	@ (80043c4 <HAL_RCC_OscConfig+0x27c>)
 80041d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041dc:	6013      	str	r3, [r2, #0]
 80041de:	e00b      	b.n	80041f8 <HAL_RCC_OscConfig+0xb0>
 80041e0:	4b78      	ldr	r3, [pc, #480]	@ (80043c4 <HAL_RCC_OscConfig+0x27c>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a77      	ldr	r2, [pc, #476]	@ (80043c4 <HAL_RCC_OscConfig+0x27c>)
 80041e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041ea:	6013      	str	r3, [r2, #0]
 80041ec:	4b75      	ldr	r3, [pc, #468]	@ (80043c4 <HAL_RCC_OscConfig+0x27c>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a74      	ldr	r2, [pc, #464]	@ (80043c4 <HAL_RCC_OscConfig+0x27c>)
 80041f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d013      	beq.n	8004228 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004200:	f7fe fae4 	bl	80027cc <HAL_GetTick>
 8004204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004206:	e008      	b.n	800421a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004208:	f7fe fae0 	bl	80027cc <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	2b64      	cmp	r3, #100	@ 0x64
 8004214:	d901      	bls.n	800421a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e29e      	b.n	8004758 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800421a:	4b6a      	ldr	r3, [pc, #424]	@ (80043c4 <HAL_RCC_OscConfig+0x27c>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d0f0      	beq.n	8004208 <HAL_RCC_OscConfig+0xc0>
 8004226:	e014      	b.n	8004252 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004228:	f7fe fad0 	bl	80027cc <HAL_GetTick>
 800422c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800422e:	e008      	b.n	8004242 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004230:	f7fe facc 	bl	80027cc <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b64      	cmp	r3, #100	@ 0x64
 800423c:	d901      	bls.n	8004242 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e28a      	b.n	8004758 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004242:	4b60      	ldr	r3, [pc, #384]	@ (80043c4 <HAL_RCC_OscConfig+0x27c>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1f0      	bne.n	8004230 <HAL_RCC_OscConfig+0xe8>
 800424e:	e000      	b.n	8004252 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004250:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d075      	beq.n	800434a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800425e:	4b59      	ldr	r3, [pc, #356]	@ (80043c4 <HAL_RCC_OscConfig+0x27c>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f003 030c 	and.w	r3, r3, #12
 8004266:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004268:	4b56      	ldr	r3, [pc, #344]	@ (80043c4 <HAL_RCC_OscConfig+0x27c>)
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	f003 0303 	and.w	r3, r3, #3
 8004270:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	2b0c      	cmp	r3, #12
 8004276:	d102      	bne.n	800427e <HAL_RCC_OscConfig+0x136>
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	2b02      	cmp	r3, #2
 800427c:	d002      	beq.n	8004284 <HAL_RCC_OscConfig+0x13c>
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	2b04      	cmp	r3, #4
 8004282:	d11f      	bne.n	80042c4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004284:	4b4f      	ldr	r3, [pc, #316]	@ (80043c4 <HAL_RCC_OscConfig+0x27c>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800428c:	2b00      	cmp	r3, #0
 800428e:	d005      	beq.n	800429c <HAL_RCC_OscConfig+0x154>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d101      	bne.n	800429c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e25d      	b.n	8004758 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800429c:	4b49      	ldr	r3, [pc, #292]	@ (80043c4 <HAL_RCC_OscConfig+0x27c>)
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	061b      	lsls	r3, r3, #24
 80042aa:	4946      	ldr	r1, [pc, #280]	@ (80043c4 <HAL_RCC_OscConfig+0x27c>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80042b0:	4b45      	ldr	r3, [pc, #276]	@ (80043c8 <HAL_RCC_OscConfig+0x280>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7fd ff9d 	bl	80021f4 <HAL_InitTick>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d043      	beq.n	8004348 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e249      	b.n	8004758 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d023      	beq.n	8004314 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042cc:	4b3d      	ldr	r3, [pc, #244]	@ (80043c4 <HAL_RCC_OscConfig+0x27c>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a3c      	ldr	r2, [pc, #240]	@ (80043c4 <HAL_RCC_OscConfig+0x27c>)
 80042d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d8:	f7fe fa78 	bl	80027cc <HAL_GetTick>
 80042dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042de:	e008      	b.n	80042f2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042e0:	f7fe fa74 	bl	80027cc <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d901      	bls.n	80042f2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e232      	b.n	8004758 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042f2:	4b34      	ldr	r3, [pc, #208]	@ (80043c4 <HAL_RCC_OscConfig+0x27c>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d0f0      	beq.n	80042e0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042fe:	4b31      	ldr	r3, [pc, #196]	@ (80043c4 <HAL_RCC_OscConfig+0x27c>)
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	061b      	lsls	r3, r3, #24
 800430c:	492d      	ldr	r1, [pc, #180]	@ (80043c4 <HAL_RCC_OscConfig+0x27c>)
 800430e:	4313      	orrs	r3, r2
 8004310:	604b      	str	r3, [r1, #4]
 8004312:	e01a      	b.n	800434a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004314:	4b2b      	ldr	r3, [pc, #172]	@ (80043c4 <HAL_RCC_OscConfig+0x27c>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a2a      	ldr	r2, [pc, #168]	@ (80043c4 <HAL_RCC_OscConfig+0x27c>)
 800431a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800431e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004320:	f7fe fa54 	bl	80027cc <HAL_GetTick>
 8004324:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004326:	e008      	b.n	800433a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004328:	f7fe fa50 	bl	80027cc <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	2b02      	cmp	r3, #2
 8004334:	d901      	bls.n	800433a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e20e      	b.n	8004758 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800433a:	4b22      	ldr	r3, [pc, #136]	@ (80043c4 <HAL_RCC_OscConfig+0x27c>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1f0      	bne.n	8004328 <HAL_RCC_OscConfig+0x1e0>
 8004346:	e000      	b.n	800434a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004348:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0308 	and.w	r3, r3, #8
 8004352:	2b00      	cmp	r3, #0
 8004354:	d041      	beq.n	80043da <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d01c      	beq.n	8004398 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800435e:	4b19      	ldr	r3, [pc, #100]	@ (80043c4 <HAL_RCC_OscConfig+0x27c>)
 8004360:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004364:	4a17      	ldr	r2, [pc, #92]	@ (80043c4 <HAL_RCC_OscConfig+0x27c>)
 8004366:	f043 0301 	orr.w	r3, r3, #1
 800436a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800436e:	f7fe fa2d 	bl	80027cc <HAL_GetTick>
 8004372:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004374:	e008      	b.n	8004388 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004376:	f7fe fa29 	bl	80027cc <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	2b02      	cmp	r3, #2
 8004382:	d901      	bls.n	8004388 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e1e7      	b.n	8004758 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004388:	4b0e      	ldr	r3, [pc, #56]	@ (80043c4 <HAL_RCC_OscConfig+0x27c>)
 800438a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d0ef      	beq.n	8004376 <HAL_RCC_OscConfig+0x22e>
 8004396:	e020      	b.n	80043da <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004398:	4b0a      	ldr	r3, [pc, #40]	@ (80043c4 <HAL_RCC_OscConfig+0x27c>)
 800439a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800439e:	4a09      	ldr	r2, [pc, #36]	@ (80043c4 <HAL_RCC_OscConfig+0x27c>)
 80043a0:	f023 0301 	bic.w	r3, r3, #1
 80043a4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043a8:	f7fe fa10 	bl	80027cc <HAL_GetTick>
 80043ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043ae:	e00d      	b.n	80043cc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043b0:	f7fe fa0c 	bl	80027cc <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d906      	bls.n	80043cc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e1ca      	b.n	8004758 <HAL_RCC_OscConfig+0x610>
 80043c2:	bf00      	nop
 80043c4:	40021000 	.word	0x40021000
 80043c8:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043cc:	4b8c      	ldr	r3, [pc, #560]	@ (8004600 <HAL_RCC_OscConfig+0x4b8>)
 80043ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1ea      	bne.n	80043b0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0304 	and.w	r3, r3, #4
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	f000 80a6 	beq.w	8004534 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043e8:	2300      	movs	r3, #0
 80043ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80043ec:	4b84      	ldr	r3, [pc, #528]	@ (8004600 <HAL_RCC_OscConfig+0x4b8>)
 80043ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d101      	bne.n	80043fc <HAL_RCC_OscConfig+0x2b4>
 80043f8:	2301      	movs	r3, #1
 80043fa:	e000      	b.n	80043fe <HAL_RCC_OscConfig+0x2b6>
 80043fc:	2300      	movs	r3, #0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00d      	beq.n	800441e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004402:	4b7f      	ldr	r3, [pc, #508]	@ (8004600 <HAL_RCC_OscConfig+0x4b8>)
 8004404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004406:	4a7e      	ldr	r2, [pc, #504]	@ (8004600 <HAL_RCC_OscConfig+0x4b8>)
 8004408:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800440c:	6593      	str	r3, [r2, #88]	@ 0x58
 800440e:	4b7c      	ldr	r3, [pc, #496]	@ (8004600 <HAL_RCC_OscConfig+0x4b8>)
 8004410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004412:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004416:	60fb      	str	r3, [r7, #12]
 8004418:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800441a:	2301      	movs	r3, #1
 800441c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800441e:	4b79      	ldr	r3, [pc, #484]	@ (8004604 <HAL_RCC_OscConfig+0x4bc>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004426:	2b00      	cmp	r3, #0
 8004428:	d118      	bne.n	800445c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800442a:	4b76      	ldr	r3, [pc, #472]	@ (8004604 <HAL_RCC_OscConfig+0x4bc>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a75      	ldr	r2, [pc, #468]	@ (8004604 <HAL_RCC_OscConfig+0x4bc>)
 8004430:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004434:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004436:	f7fe f9c9 	bl	80027cc <HAL_GetTick>
 800443a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800443c:	e008      	b.n	8004450 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800443e:	f7fe f9c5 	bl	80027cc <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	2b02      	cmp	r3, #2
 800444a:	d901      	bls.n	8004450 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e183      	b.n	8004758 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004450:	4b6c      	ldr	r3, [pc, #432]	@ (8004604 <HAL_RCC_OscConfig+0x4bc>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004458:	2b00      	cmp	r3, #0
 800445a:	d0f0      	beq.n	800443e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d108      	bne.n	8004476 <HAL_RCC_OscConfig+0x32e>
 8004464:	4b66      	ldr	r3, [pc, #408]	@ (8004600 <HAL_RCC_OscConfig+0x4b8>)
 8004466:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800446a:	4a65      	ldr	r2, [pc, #404]	@ (8004600 <HAL_RCC_OscConfig+0x4b8>)
 800446c:	f043 0301 	orr.w	r3, r3, #1
 8004470:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004474:	e024      	b.n	80044c0 <HAL_RCC_OscConfig+0x378>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	2b05      	cmp	r3, #5
 800447c:	d110      	bne.n	80044a0 <HAL_RCC_OscConfig+0x358>
 800447e:	4b60      	ldr	r3, [pc, #384]	@ (8004600 <HAL_RCC_OscConfig+0x4b8>)
 8004480:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004484:	4a5e      	ldr	r2, [pc, #376]	@ (8004600 <HAL_RCC_OscConfig+0x4b8>)
 8004486:	f043 0304 	orr.w	r3, r3, #4
 800448a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800448e:	4b5c      	ldr	r3, [pc, #368]	@ (8004600 <HAL_RCC_OscConfig+0x4b8>)
 8004490:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004494:	4a5a      	ldr	r2, [pc, #360]	@ (8004600 <HAL_RCC_OscConfig+0x4b8>)
 8004496:	f043 0301 	orr.w	r3, r3, #1
 800449a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800449e:	e00f      	b.n	80044c0 <HAL_RCC_OscConfig+0x378>
 80044a0:	4b57      	ldr	r3, [pc, #348]	@ (8004600 <HAL_RCC_OscConfig+0x4b8>)
 80044a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044a6:	4a56      	ldr	r2, [pc, #344]	@ (8004600 <HAL_RCC_OscConfig+0x4b8>)
 80044a8:	f023 0301 	bic.w	r3, r3, #1
 80044ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80044b0:	4b53      	ldr	r3, [pc, #332]	@ (8004600 <HAL_RCC_OscConfig+0x4b8>)
 80044b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044b6:	4a52      	ldr	r2, [pc, #328]	@ (8004600 <HAL_RCC_OscConfig+0x4b8>)
 80044b8:	f023 0304 	bic.w	r3, r3, #4
 80044bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d016      	beq.n	80044f6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c8:	f7fe f980 	bl	80027cc <HAL_GetTick>
 80044cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044ce:	e00a      	b.n	80044e6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044d0:	f7fe f97c 	bl	80027cc <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044de:	4293      	cmp	r3, r2
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e138      	b.n	8004758 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044e6:	4b46      	ldr	r3, [pc, #280]	@ (8004600 <HAL_RCC_OscConfig+0x4b8>)
 80044e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d0ed      	beq.n	80044d0 <HAL_RCC_OscConfig+0x388>
 80044f4:	e015      	b.n	8004522 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f6:	f7fe f969 	bl	80027cc <HAL_GetTick>
 80044fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044fc:	e00a      	b.n	8004514 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044fe:	f7fe f965 	bl	80027cc <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	f241 3288 	movw	r2, #5000	@ 0x1388
 800450c:	4293      	cmp	r3, r2
 800450e:	d901      	bls.n	8004514 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e121      	b.n	8004758 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004514:	4b3a      	ldr	r3, [pc, #232]	@ (8004600 <HAL_RCC_OscConfig+0x4b8>)
 8004516:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1ed      	bne.n	80044fe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004522:	7ffb      	ldrb	r3, [r7, #31]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d105      	bne.n	8004534 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004528:	4b35      	ldr	r3, [pc, #212]	@ (8004600 <HAL_RCC_OscConfig+0x4b8>)
 800452a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800452c:	4a34      	ldr	r2, [pc, #208]	@ (8004600 <HAL_RCC_OscConfig+0x4b8>)
 800452e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004532:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0320 	and.w	r3, r3, #32
 800453c:	2b00      	cmp	r3, #0
 800453e:	d03c      	beq.n	80045ba <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d01c      	beq.n	8004582 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004548:	4b2d      	ldr	r3, [pc, #180]	@ (8004600 <HAL_RCC_OscConfig+0x4b8>)
 800454a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800454e:	4a2c      	ldr	r2, [pc, #176]	@ (8004600 <HAL_RCC_OscConfig+0x4b8>)
 8004550:	f043 0301 	orr.w	r3, r3, #1
 8004554:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004558:	f7fe f938 	bl	80027cc <HAL_GetTick>
 800455c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800455e:	e008      	b.n	8004572 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004560:	f7fe f934 	bl	80027cc <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	2b02      	cmp	r3, #2
 800456c:	d901      	bls.n	8004572 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e0f2      	b.n	8004758 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004572:	4b23      	ldr	r3, [pc, #140]	@ (8004600 <HAL_RCC_OscConfig+0x4b8>)
 8004574:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d0ef      	beq.n	8004560 <HAL_RCC_OscConfig+0x418>
 8004580:	e01b      	b.n	80045ba <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004582:	4b1f      	ldr	r3, [pc, #124]	@ (8004600 <HAL_RCC_OscConfig+0x4b8>)
 8004584:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004588:	4a1d      	ldr	r2, [pc, #116]	@ (8004600 <HAL_RCC_OscConfig+0x4b8>)
 800458a:	f023 0301 	bic.w	r3, r3, #1
 800458e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004592:	f7fe f91b 	bl	80027cc <HAL_GetTick>
 8004596:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004598:	e008      	b.n	80045ac <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800459a:	f7fe f917 	bl	80027cc <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d901      	bls.n	80045ac <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e0d5      	b.n	8004758 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80045ac:	4b14      	ldr	r3, [pc, #80]	@ (8004600 <HAL_RCC_OscConfig+0x4b8>)
 80045ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045b2:	f003 0302 	and.w	r3, r3, #2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1ef      	bne.n	800459a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	69db      	ldr	r3, [r3, #28]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f000 80c9 	beq.w	8004756 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045c4:	4b0e      	ldr	r3, [pc, #56]	@ (8004600 <HAL_RCC_OscConfig+0x4b8>)
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f003 030c 	and.w	r3, r3, #12
 80045cc:	2b0c      	cmp	r3, #12
 80045ce:	f000 8083 	beq.w	80046d8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	69db      	ldr	r3, [r3, #28]
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d15e      	bne.n	8004698 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045da:	4b09      	ldr	r3, [pc, #36]	@ (8004600 <HAL_RCC_OscConfig+0x4b8>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a08      	ldr	r2, [pc, #32]	@ (8004600 <HAL_RCC_OscConfig+0x4b8>)
 80045e0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e6:	f7fe f8f1 	bl	80027cc <HAL_GetTick>
 80045ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045ec:	e00c      	b.n	8004608 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045ee:	f7fe f8ed 	bl	80027cc <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d905      	bls.n	8004608 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e0ab      	b.n	8004758 <HAL_RCC_OscConfig+0x610>
 8004600:	40021000 	.word	0x40021000
 8004604:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004608:	4b55      	ldr	r3, [pc, #340]	@ (8004760 <HAL_RCC_OscConfig+0x618>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1ec      	bne.n	80045ee <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004614:	4b52      	ldr	r3, [pc, #328]	@ (8004760 <HAL_RCC_OscConfig+0x618>)
 8004616:	68da      	ldr	r2, [r3, #12]
 8004618:	4b52      	ldr	r3, [pc, #328]	@ (8004764 <HAL_RCC_OscConfig+0x61c>)
 800461a:	4013      	ands	r3, r2
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	6a11      	ldr	r1, [r2, #32]
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004624:	3a01      	subs	r2, #1
 8004626:	0112      	lsls	r2, r2, #4
 8004628:	4311      	orrs	r1, r2
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800462e:	0212      	lsls	r2, r2, #8
 8004630:	4311      	orrs	r1, r2
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004636:	0852      	lsrs	r2, r2, #1
 8004638:	3a01      	subs	r2, #1
 800463a:	0552      	lsls	r2, r2, #21
 800463c:	4311      	orrs	r1, r2
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004642:	0852      	lsrs	r2, r2, #1
 8004644:	3a01      	subs	r2, #1
 8004646:	0652      	lsls	r2, r2, #25
 8004648:	4311      	orrs	r1, r2
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800464e:	06d2      	lsls	r2, r2, #27
 8004650:	430a      	orrs	r2, r1
 8004652:	4943      	ldr	r1, [pc, #268]	@ (8004760 <HAL_RCC_OscConfig+0x618>)
 8004654:	4313      	orrs	r3, r2
 8004656:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004658:	4b41      	ldr	r3, [pc, #260]	@ (8004760 <HAL_RCC_OscConfig+0x618>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a40      	ldr	r2, [pc, #256]	@ (8004760 <HAL_RCC_OscConfig+0x618>)
 800465e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004662:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004664:	4b3e      	ldr	r3, [pc, #248]	@ (8004760 <HAL_RCC_OscConfig+0x618>)
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	4a3d      	ldr	r2, [pc, #244]	@ (8004760 <HAL_RCC_OscConfig+0x618>)
 800466a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800466e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004670:	f7fe f8ac 	bl	80027cc <HAL_GetTick>
 8004674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004676:	e008      	b.n	800468a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004678:	f7fe f8a8 	bl	80027cc <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	2b02      	cmp	r3, #2
 8004684:	d901      	bls.n	800468a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e066      	b.n	8004758 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800468a:	4b35      	ldr	r3, [pc, #212]	@ (8004760 <HAL_RCC_OscConfig+0x618>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d0f0      	beq.n	8004678 <HAL_RCC_OscConfig+0x530>
 8004696:	e05e      	b.n	8004756 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004698:	4b31      	ldr	r3, [pc, #196]	@ (8004760 <HAL_RCC_OscConfig+0x618>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a30      	ldr	r2, [pc, #192]	@ (8004760 <HAL_RCC_OscConfig+0x618>)
 800469e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80046a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a4:	f7fe f892 	bl	80027cc <HAL_GetTick>
 80046a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046aa:	e008      	b.n	80046be <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ac:	f7fe f88e 	bl	80027cc <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e04c      	b.n	8004758 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046be:	4b28      	ldr	r3, [pc, #160]	@ (8004760 <HAL_RCC_OscConfig+0x618>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1f0      	bne.n	80046ac <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80046ca:	4b25      	ldr	r3, [pc, #148]	@ (8004760 <HAL_RCC_OscConfig+0x618>)
 80046cc:	68da      	ldr	r2, [r3, #12]
 80046ce:	4924      	ldr	r1, [pc, #144]	@ (8004760 <HAL_RCC_OscConfig+0x618>)
 80046d0:	4b25      	ldr	r3, [pc, #148]	@ (8004768 <HAL_RCC_OscConfig+0x620>)
 80046d2:	4013      	ands	r3, r2
 80046d4:	60cb      	str	r3, [r1, #12]
 80046d6:	e03e      	b.n	8004756 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	69db      	ldr	r3, [r3, #28]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d101      	bne.n	80046e4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e039      	b.n	8004758 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80046e4:	4b1e      	ldr	r3, [pc, #120]	@ (8004760 <HAL_RCC_OscConfig+0x618>)
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	f003 0203 	and.w	r2, r3, #3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a1b      	ldr	r3, [r3, #32]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d12c      	bne.n	8004752 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004702:	3b01      	subs	r3, #1
 8004704:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004706:	429a      	cmp	r2, r3
 8004708:	d123      	bne.n	8004752 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004714:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004716:	429a      	cmp	r2, r3
 8004718:	d11b      	bne.n	8004752 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004724:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004726:	429a      	cmp	r2, r3
 8004728:	d113      	bne.n	8004752 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004734:	085b      	lsrs	r3, r3, #1
 8004736:	3b01      	subs	r3, #1
 8004738:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800473a:	429a      	cmp	r2, r3
 800473c:	d109      	bne.n	8004752 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004748:	085b      	lsrs	r3, r3, #1
 800474a:	3b01      	subs	r3, #1
 800474c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800474e:	429a      	cmp	r2, r3
 8004750:	d001      	beq.n	8004756 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e000      	b.n	8004758 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3720      	adds	r7, #32
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}
 8004760:	40021000 	.word	0x40021000
 8004764:	019f800c 	.word	0x019f800c
 8004768:	feeefffc 	.word	0xfeeefffc

0800476c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004776:	2300      	movs	r3, #0
 8004778:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d101      	bne.n	8004784 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e11e      	b.n	80049c2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004784:	4b91      	ldr	r3, [pc, #580]	@ (80049cc <HAL_RCC_ClockConfig+0x260>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 030f 	and.w	r3, r3, #15
 800478c:	683a      	ldr	r2, [r7, #0]
 800478e:	429a      	cmp	r2, r3
 8004790:	d910      	bls.n	80047b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004792:	4b8e      	ldr	r3, [pc, #568]	@ (80049cc <HAL_RCC_ClockConfig+0x260>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f023 020f 	bic.w	r2, r3, #15
 800479a:	498c      	ldr	r1, [pc, #560]	@ (80049cc <HAL_RCC_ClockConfig+0x260>)
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	4313      	orrs	r3, r2
 80047a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047a2:	4b8a      	ldr	r3, [pc, #552]	@ (80049cc <HAL_RCC_ClockConfig+0x260>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 030f 	and.w	r3, r3, #15
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d001      	beq.n	80047b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e106      	b.n	80049c2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0301 	and.w	r3, r3, #1
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d073      	beq.n	80048a8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	2b03      	cmp	r3, #3
 80047c6:	d129      	bne.n	800481c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047c8:	4b81      	ldr	r3, [pc, #516]	@ (80049d0 <HAL_RCC_ClockConfig+0x264>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d101      	bne.n	80047d8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e0f4      	b.n	80049c2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80047d8:	f000 f9d0 	bl	8004b7c <RCC_GetSysClockFreqFromPLLSource>
 80047dc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	4a7c      	ldr	r2, [pc, #496]	@ (80049d4 <HAL_RCC_ClockConfig+0x268>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d93f      	bls.n	8004866 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80047e6:	4b7a      	ldr	r3, [pc, #488]	@ (80049d0 <HAL_RCC_ClockConfig+0x264>)
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d009      	beq.n	8004806 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d033      	beq.n	8004866 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004802:	2b00      	cmp	r3, #0
 8004804:	d12f      	bne.n	8004866 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004806:	4b72      	ldr	r3, [pc, #456]	@ (80049d0 <HAL_RCC_ClockConfig+0x264>)
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800480e:	4a70      	ldr	r2, [pc, #448]	@ (80049d0 <HAL_RCC_ClockConfig+0x264>)
 8004810:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004814:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004816:	2380      	movs	r3, #128	@ 0x80
 8004818:	617b      	str	r3, [r7, #20]
 800481a:	e024      	b.n	8004866 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	2b02      	cmp	r3, #2
 8004822:	d107      	bne.n	8004834 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004824:	4b6a      	ldr	r3, [pc, #424]	@ (80049d0 <HAL_RCC_ClockConfig+0x264>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d109      	bne.n	8004844 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e0c6      	b.n	80049c2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004834:	4b66      	ldr	r3, [pc, #408]	@ (80049d0 <HAL_RCC_ClockConfig+0x264>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800483c:	2b00      	cmp	r3, #0
 800483e:	d101      	bne.n	8004844 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e0be      	b.n	80049c2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004844:	f000 f8ce 	bl	80049e4 <HAL_RCC_GetSysClockFreq>
 8004848:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	4a61      	ldr	r2, [pc, #388]	@ (80049d4 <HAL_RCC_ClockConfig+0x268>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d909      	bls.n	8004866 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004852:	4b5f      	ldr	r3, [pc, #380]	@ (80049d0 <HAL_RCC_ClockConfig+0x264>)
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800485a:	4a5d      	ldr	r2, [pc, #372]	@ (80049d0 <HAL_RCC_ClockConfig+0x264>)
 800485c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004860:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004862:	2380      	movs	r3, #128	@ 0x80
 8004864:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004866:	4b5a      	ldr	r3, [pc, #360]	@ (80049d0 <HAL_RCC_ClockConfig+0x264>)
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f023 0203 	bic.w	r2, r3, #3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	4957      	ldr	r1, [pc, #348]	@ (80049d0 <HAL_RCC_ClockConfig+0x264>)
 8004874:	4313      	orrs	r3, r2
 8004876:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004878:	f7fd ffa8 	bl	80027cc <HAL_GetTick>
 800487c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800487e:	e00a      	b.n	8004896 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004880:	f7fd ffa4 	bl	80027cc <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800488e:	4293      	cmp	r3, r2
 8004890:	d901      	bls.n	8004896 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e095      	b.n	80049c2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004896:	4b4e      	ldr	r3, [pc, #312]	@ (80049d0 <HAL_RCC_ClockConfig+0x264>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f003 020c 	and.w	r2, r3, #12
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d1eb      	bne.n	8004880 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d023      	beq.n	80048fc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0304 	and.w	r3, r3, #4
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d005      	beq.n	80048cc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048c0:	4b43      	ldr	r3, [pc, #268]	@ (80049d0 <HAL_RCC_ClockConfig+0x264>)
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	4a42      	ldr	r2, [pc, #264]	@ (80049d0 <HAL_RCC_ClockConfig+0x264>)
 80048c6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80048ca:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0308 	and.w	r3, r3, #8
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d007      	beq.n	80048e8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80048d8:	4b3d      	ldr	r3, [pc, #244]	@ (80049d0 <HAL_RCC_ClockConfig+0x264>)
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80048e0:	4a3b      	ldr	r2, [pc, #236]	@ (80049d0 <HAL_RCC_ClockConfig+0x264>)
 80048e2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80048e6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048e8:	4b39      	ldr	r3, [pc, #228]	@ (80049d0 <HAL_RCC_ClockConfig+0x264>)
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	4936      	ldr	r1, [pc, #216]	@ (80049d0 <HAL_RCC_ClockConfig+0x264>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	608b      	str	r3, [r1, #8]
 80048fa:	e008      	b.n	800490e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	2b80      	cmp	r3, #128	@ 0x80
 8004900:	d105      	bne.n	800490e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004902:	4b33      	ldr	r3, [pc, #204]	@ (80049d0 <HAL_RCC_ClockConfig+0x264>)
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	4a32      	ldr	r2, [pc, #200]	@ (80049d0 <HAL_RCC_ClockConfig+0x264>)
 8004908:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800490c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800490e:	4b2f      	ldr	r3, [pc, #188]	@ (80049cc <HAL_RCC_ClockConfig+0x260>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 030f 	and.w	r3, r3, #15
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	429a      	cmp	r2, r3
 800491a:	d21d      	bcs.n	8004958 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800491c:	4b2b      	ldr	r3, [pc, #172]	@ (80049cc <HAL_RCC_ClockConfig+0x260>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f023 020f 	bic.w	r2, r3, #15
 8004924:	4929      	ldr	r1, [pc, #164]	@ (80049cc <HAL_RCC_ClockConfig+0x260>)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	4313      	orrs	r3, r2
 800492a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800492c:	f7fd ff4e 	bl	80027cc <HAL_GetTick>
 8004930:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004932:	e00a      	b.n	800494a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004934:	f7fd ff4a 	bl	80027cc <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004942:	4293      	cmp	r3, r2
 8004944:	d901      	bls.n	800494a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e03b      	b.n	80049c2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800494a:	4b20      	ldr	r3, [pc, #128]	@ (80049cc <HAL_RCC_ClockConfig+0x260>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 030f 	and.w	r3, r3, #15
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	429a      	cmp	r2, r3
 8004956:	d1ed      	bne.n	8004934 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0304 	and.w	r3, r3, #4
 8004960:	2b00      	cmp	r3, #0
 8004962:	d008      	beq.n	8004976 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004964:	4b1a      	ldr	r3, [pc, #104]	@ (80049d0 <HAL_RCC_ClockConfig+0x264>)
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	4917      	ldr	r1, [pc, #92]	@ (80049d0 <HAL_RCC_ClockConfig+0x264>)
 8004972:	4313      	orrs	r3, r2
 8004974:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0308 	and.w	r3, r3, #8
 800497e:	2b00      	cmp	r3, #0
 8004980:	d009      	beq.n	8004996 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004982:	4b13      	ldr	r3, [pc, #76]	@ (80049d0 <HAL_RCC_ClockConfig+0x264>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	490f      	ldr	r1, [pc, #60]	@ (80049d0 <HAL_RCC_ClockConfig+0x264>)
 8004992:	4313      	orrs	r3, r2
 8004994:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004996:	f000 f825 	bl	80049e4 <HAL_RCC_GetSysClockFreq>
 800499a:	4602      	mov	r2, r0
 800499c:	4b0c      	ldr	r3, [pc, #48]	@ (80049d0 <HAL_RCC_ClockConfig+0x264>)
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	091b      	lsrs	r3, r3, #4
 80049a2:	f003 030f 	and.w	r3, r3, #15
 80049a6:	490c      	ldr	r1, [pc, #48]	@ (80049d8 <HAL_RCC_ClockConfig+0x26c>)
 80049a8:	5ccb      	ldrb	r3, [r1, r3]
 80049aa:	f003 031f 	and.w	r3, r3, #31
 80049ae:	fa22 f303 	lsr.w	r3, r2, r3
 80049b2:	4a0a      	ldr	r2, [pc, #40]	@ (80049dc <HAL_RCC_ClockConfig+0x270>)
 80049b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80049b6:	4b0a      	ldr	r3, [pc, #40]	@ (80049e0 <HAL_RCC_ClockConfig+0x274>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7fd fc1a 	bl	80021f4 <HAL_InitTick>
 80049c0:	4603      	mov	r3, r0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3718      	adds	r7, #24
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	40022000 	.word	0x40022000
 80049d0:	40021000 	.word	0x40021000
 80049d4:	04c4b400 	.word	0x04c4b400
 80049d8:	0801a904 	.word	0x0801a904
 80049dc:	2000000c 	.word	0x2000000c
 80049e0:	20000010 	.word	0x20000010

080049e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b087      	sub	sp, #28
 80049e8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80049ea:	4b2c      	ldr	r3, [pc, #176]	@ (8004a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f003 030c 	and.w	r3, r3, #12
 80049f2:	2b04      	cmp	r3, #4
 80049f4:	d102      	bne.n	80049fc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80049f6:	4b2a      	ldr	r3, [pc, #168]	@ (8004aa0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80049f8:	613b      	str	r3, [r7, #16]
 80049fa:	e047      	b.n	8004a8c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80049fc:	4b27      	ldr	r3, [pc, #156]	@ (8004a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f003 030c 	and.w	r3, r3, #12
 8004a04:	2b08      	cmp	r3, #8
 8004a06:	d102      	bne.n	8004a0e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a08:	4b26      	ldr	r3, [pc, #152]	@ (8004aa4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a0a:	613b      	str	r3, [r7, #16]
 8004a0c:	e03e      	b.n	8004a8c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004a0e:	4b23      	ldr	r3, [pc, #140]	@ (8004a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f003 030c 	and.w	r3, r3, #12
 8004a16:	2b0c      	cmp	r3, #12
 8004a18:	d136      	bne.n	8004a88 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a1a:	4b20      	ldr	r3, [pc, #128]	@ (8004a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	f003 0303 	and.w	r3, r3, #3
 8004a22:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a24:	4b1d      	ldr	r3, [pc, #116]	@ (8004a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	091b      	lsrs	r3, r3, #4
 8004a2a:	f003 030f 	and.w	r3, r3, #15
 8004a2e:	3301      	adds	r3, #1
 8004a30:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2b03      	cmp	r3, #3
 8004a36:	d10c      	bne.n	8004a52 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a38:	4a1a      	ldr	r2, [pc, #104]	@ (8004aa4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a40:	4a16      	ldr	r2, [pc, #88]	@ (8004a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a42:	68d2      	ldr	r2, [r2, #12]
 8004a44:	0a12      	lsrs	r2, r2, #8
 8004a46:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004a4a:	fb02 f303 	mul.w	r3, r2, r3
 8004a4e:	617b      	str	r3, [r7, #20]
      break;
 8004a50:	e00c      	b.n	8004a6c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a52:	4a13      	ldr	r2, [pc, #76]	@ (8004aa0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a5a:	4a10      	ldr	r2, [pc, #64]	@ (8004a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a5c:	68d2      	ldr	r2, [r2, #12]
 8004a5e:	0a12      	lsrs	r2, r2, #8
 8004a60:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004a64:	fb02 f303 	mul.w	r3, r2, r3
 8004a68:	617b      	str	r3, [r7, #20]
      break;
 8004a6a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8004a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	0e5b      	lsrs	r3, r3, #25
 8004a72:	f003 0303 	and.w	r3, r3, #3
 8004a76:	3301      	adds	r3, #1
 8004a78:	005b      	lsls	r3, r3, #1
 8004a7a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004a7c:	697a      	ldr	r2, [r7, #20]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a84:	613b      	str	r3, [r7, #16]
 8004a86:	e001      	b.n	8004a8c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004a8c:	693b      	ldr	r3, [r7, #16]
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	371c      	adds	r7, #28
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	40021000 	.word	0x40021000
 8004aa0:	00f42400 	.word	0x00f42400
 8004aa4:	016e3600 	.word	0x016e3600

08004aa8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004aac:	4b03      	ldr	r3, [pc, #12]	@ (8004abc <HAL_RCC_GetHCLKFreq+0x14>)
 8004aae:	681b      	ldr	r3, [r3, #0]
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	2000000c 	.word	0x2000000c

08004ac0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004ac4:	f7ff fff0 	bl	8004aa8 <HAL_RCC_GetHCLKFreq>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	4b06      	ldr	r3, [pc, #24]	@ (8004ae4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	0a1b      	lsrs	r3, r3, #8
 8004ad0:	f003 0307 	and.w	r3, r3, #7
 8004ad4:	4904      	ldr	r1, [pc, #16]	@ (8004ae8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ad6:	5ccb      	ldrb	r3, [r1, r3]
 8004ad8:	f003 031f 	and.w	r3, r3, #31
 8004adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	40021000 	.word	0x40021000
 8004ae8:	0801a914 	.word	0x0801a914

08004aec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004af0:	f7ff ffda 	bl	8004aa8 <HAL_RCC_GetHCLKFreq>
 8004af4:	4602      	mov	r2, r0
 8004af6:	4b06      	ldr	r3, [pc, #24]	@ (8004b10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	0adb      	lsrs	r3, r3, #11
 8004afc:	f003 0307 	and.w	r3, r3, #7
 8004b00:	4904      	ldr	r1, [pc, #16]	@ (8004b14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b02:	5ccb      	ldrb	r3, [r1, r3]
 8004b04:	f003 031f 	and.w	r3, r3, #31
 8004b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	40021000 	.word	0x40021000
 8004b14:	0801a914 	.word	0x0801a914

08004b18 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	220f      	movs	r2, #15
 8004b26:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004b28:	4b12      	ldr	r3, [pc, #72]	@ (8004b74 <HAL_RCC_GetClockConfig+0x5c>)
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f003 0203 	and.w	r2, r3, #3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004b34:	4b0f      	ldr	r3, [pc, #60]	@ (8004b74 <HAL_RCC_GetClockConfig+0x5c>)
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004b40:	4b0c      	ldr	r3, [pc, #48]	@ (8004b74 <HAL_RCC_GetClockConfig+0x5c>)
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004b4c:	4b09      	ldr	r3, [pc, #36]	@ (8004b74 <HAL_RCC_GetClockConfig+0x5c>)
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	08db      	lsrs	r3, r3, #3
 8004b52:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004b5a:	4b07      	ldr	r3, [pc, #28]	@ (8004b78 <HAL_RCC_GetClockConfig+0x60>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 020f 	and.w	r2, r3, #15
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	601a      	str	r2, [r3, #0]
}
 8004b66:	bf00      	nop
 8004b68:	370c      	adds	r7, #12
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	40021000 	.word	0x40021000
 8004b78:	40022000 	.word	0x40022000

08004b7c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b087      	sub	sp, #28
 8004b80:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b82:	4b1e      	ldr	r3, [pc, #120]	@ (8004bfc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	f003 0303 	and.w	r3, r3, #3
 8004b8a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b8c:	4b1b      	ldr	r3, [pc, #108]	@ (8004bfc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	091b      	lsrs	r3, r3, #4
 8004b92:	f003 030f 	and.w	r3, r3, #15
 8004b96:	3301      	adds	r3, #1
 8004b98:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	2b03      	cmp	r3, #3
 8004b9e:	d10c      	bne.n	8004bba <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ba0:	4a17      	ldr	r2, [pc, #92]	@ (8004c00 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba8:	4a14      	ldr	r2, [pc, #80]	@ (8004bfc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004baa:	68d2      	ldr	r2, [r2, #12]
 8004bac:	0a12      	lsrs	r2, r2, #8
 8004bae:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004bb2:	fb02 f303 	mul.w	r3, r2, r3
 8004bb6:	617b      	str	r3, [r7, #20]
    break;
 8004bb8:	e00c      	b.n	8004bd4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004bba:	4a12      	ldr	r2, [pc, #72]	@ (8004c04 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc2:	4a0e      	ldr	r2, [pc, #56]	@ (8004bfc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004bc4:	68d2      	ldr	r2, [r2, #12]
 8004bc6:	0a12      	lsrs	r2, r2, #8
 8004bc8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004bcc:	fb02 f303 	mul.w	r3, r2, r3
 8004bd0:	617b      	str	r3, [r7, #20]
    break;
 8004bd2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004bd4:	4b09      	ldr	r3, [pc, #36]	@ (8004bfc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	0e5b      	lsrs	r3, r3, #25
 8004bda:	f003 0303 	and.w	r3, r3, #3
 8004bde:	3301      	adds	r3, #1
 8004be0:	005b      	lsls	r3, r3, #1
 8004be2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004be4:	697a      	ldr	r2, [r7, #20]
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bec:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004bee:	687b      	ldr	r3, [r7, #4]
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	371c      	adds	r7, #28
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr
 8004bfc:	40021000 	.word	0x40021000
 8004c00:	016e3600 	.word	0x016e3600
 8004c04:	00f42400 	.word	0x00f42400

08004c08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c10:	2300      	movs	r3, #0
 8004c12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c14:	2300      	movs	r3, #0
 8004c16:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	f000 8098 	beq.w	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c26:	2300      	movs	r3, #0
 8004c28:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c2a:	4b43      	ldr	r3, [pc, #268]	@ (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d10d      	bne.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c36:	4b40      	ldr	r3, [pc, #256]	@ (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c3a:	4a3f      	ldr	r2, [pc, #252]	@ (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c40:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c42:	4b3d      	ldr	r3, [pc, #244]	@ (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c4a:	60bb      	str	r3, [r7, #8]
 8004c4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c52:	4b3a      	ldr	r3, [pc, #232]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a39      	ldr	r2, [pc, #228]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c5c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c5e:	f7fd fdb5 	bl	80027cc <HAL_GetTick>
 8004c62:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c64:	e009      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c66:	f7fd fdb1 	bl	80027cc <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d902      	bls.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	74fb      	strb	r3, [r7, #19]
        break;
 8004c78:	e005      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c7a:	4b30      	ldr	r3, [pc, #192]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d0ef      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004c86:	7cfb      	ldrb	r3, [r7, #19]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d159      	bne.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c8c:	4b2a      	ldr	r3, [pc, #168]	@ (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c96:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d01e      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ca2:	697a      	ldr	r2, [r7, #20]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d019      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ca8:	4b23      	ldr	r3, [pc, #140]	@ (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cb2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004cb4:	4b20      	ldr	r3, [pc, #128]	@ (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cba:	4a1f      	ldr	r2, [pc, #124]	@ (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004cc4:	4b1c      	ldr	r3, [pc, #112]	@ (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cca:	4a1b      	ldr	r2, [pc, #108]	@ (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ccc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004cd4:	4a18      	ldr	r2, [pc, #96]	@ (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	f003 0301 	and.w	r3, r3, #1
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d016      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce6:	f7fd fd71 	bl	80027cc <HAL_GetTick>
 8004cea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cec:	e00b      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cee:	f7fd fd6d 	bl	80027cc <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d902      	bls.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	74fb      	strb	r3, [r7, #19]
            break;
 8004d04:	e006      	b.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d06:	4b0c      	ldr	r3, [pc, #48]	@ (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d0c:	f003 0302 	and.w	r3, r3, #2
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d0ec      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004d14:	7cfb      	ldrb	r3, [r7, #19]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d10b      	bne.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d1a:	4b07      	ldr	r3, [pc, #28]	@ (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d20:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d28:	4903      	ldr	r1, [pc, #12]	@ (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004d30:	e008      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d32:	7cfb      	ldrb	r3, [r7, #19]
 8004d34:	74bb      	strb	r3, [r7, #18]
 8004d36:	e005      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004d38:	40021000 	.word	0x40021000
 8004d3c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d40:	7cfb      	ldrb	r3, [r7, #19]
 8004d42:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d44:	7c7b      	ldrb	r3, [r7, #17]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d105      	bne.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d4a:	4ba7      	ldr	r3, [pc, #668]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d4e:	4aa6      	ldr	r2, [pc, #664]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d54:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0301 	and.w	r3, r3, #1
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00a      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d62:	4ba1      	ldr	r3, [pc, #644]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d68:	f023 0203 	bic.w	r2, r3, #3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	499d      	ldr	r1, [pc, #628]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d00a      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d84:	4b98      	ldr	r3, [pc, #608]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d8a:	f023 020c 	bic.w	r2, r3, #12
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	4995      	ldr	r1, [pc, #596]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0304 	and.w	r3, r3, #4
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00a      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004da6:	4b90      	ldr	r3, [pc, #576]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	498c      	ldr	r1, [pc, #560]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0308 	and.w	r3, r3, #8
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00a      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004dc8:	4b87      	ldr	r3, [pc, #540]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	4984      	ldr	r1, [pc, #528]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0310 	and.w	r3, r3, #16
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00a      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004dea:	4b7f      	ldr	r3, [pc, #508]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004df0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	695b      	ldr	r3, [r3, #20]
 8004df8:	497b      	ldr	r1, [pc, #492]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0320 	and.w	r3, r3, #32
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00a      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e0c:	4b76      	ldr	r3, [pc, #472]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e12:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	4973      	ldr	r1, [pc, #460]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00a      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e2e:	4b6e      	ldr	r3, [pc, #440]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e34:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	69db      	ldr	r3, [r3, #28]
 8004e3c:	496a      	ldr	r1, [pc, #424]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00a      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e50:	4b65      	ldr	r3, [pc, #404]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e56:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	4962      	ldr	r1, [pc, #392]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00a      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e72:	4b5d      	ldr	r3, [pc, #372]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e78:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e80:	4959      	ldr	r1, [pc, #356]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00a      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e94:	4b54      	ldr	r3, [pc, #336]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e96:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e9a:	f023 0203 	bic.w	r2, r3, #3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ea2:	4951      	ldr	r1, [pc, #324]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00a      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004eb6:	4b4c      	ldr	r3, [pc, #304]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ebc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec4:	4948      	ldr	r1, [pc, #288]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d015      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ed8:	4b43      	ldr	r3, [pc, #268]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ede:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ee6:	4940      	ldr	r1, [pc, #256]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ef2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ef6:	d105      	bne.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ef8:	4b3b      	ldr	r3, [pc, #236]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	4a3a      	ldr	r2, [pc, #232]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004efe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f02:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d015      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004f10:	4b35      	ldr	r3, [pc, #212]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f16:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f1e:	4932      	ldr	r1, [pc, #200]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f2e:	d105      	bne.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f30:	4b2d      	ldr	r3, [pc, #180]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	4a2c      	ldr	r2, [pc, #176]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f3a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d015      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004f48:	4b27      	ldr	r3, [pc, #156]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f4e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f56:	4924      	ldr	r1, [pc, #144]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f62:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f66:	d105      	bne.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f68:	4b1f      	ldr	r3, [pc, #124]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	4a1e      	ldr	r2, [pc, #120]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f72:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d015      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f80:	4b19      	ldr	r3, [pc, #100]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f86:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f8e:	4916      	ldr	r1, [pc, #88]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f9e:	d105      	bne.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fa0:	4b11      	ldr	r3, [pc, #68]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	4a10      	ldr	r2, [pc, #64]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fa6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004faa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d019      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fbe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc6:	4908      	ldr	r1, [pc, #32]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004fd6:	d109      	bne.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fd8:	4b03      	ldr	r3, [pc, #12]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	4a02      	ldr	r2, [pc, #8]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004fe2:	60d3      	str	r3, [r2, #12]
 8004fe4:	e002      	b.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004fe6:	bf00      	nop
 8004fe8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d015      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004ff8:	4b29      	ldr	r3, [pc, #164]	@ (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ffe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005006:	4926      	ldr	r1, [pc, #152]	@ (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005008:	4313      	orrs	r3, r2
 800500a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005012:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005016:	d105      	bne.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005018:	4b21      	ldr	r3, [pc, #132]	@ (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	4a20      	ldr	r2, [pc, #128]	@ (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800501e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005022:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d015      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005030:	4b1b      	ldr	r3, [pc, #108]	@ (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005032:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005036:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800503e:	4918      	ldr	r1, [pc, #96]	@ (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005040:	4313      	orrs	r3, r2
 8005042:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800504a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800504e:	d105      	bne.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005050:	4b13      	ldr	r3, [pc, #76]	@ (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	4a12      	ldr	r2, [pc, #72]	@ (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005056:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800505a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d015      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005068:	4b0d      	ldr	r3, [pc, #52]	@ (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800506a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800506e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005076:	490a      	ldr	r1, [pc, #40]	@ (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005078:	4313      	orrs	r3, r2
 800507a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005082:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005086:	d105      	bne.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005088:	4b05      	ldr	r3, [pc, #20]	@ (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	4a04      	ldr	r2, [pc, #16]	@ (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800508e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005092:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005094:	7cbb      	ldrb	r3, [r7, #18]
}
 8005096:	4618      	mov	r0, r3
 8005098:	3718      	adds	r7, #24
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	40021000 	.word	0x40021000

080050a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d101      	bne.n	80050b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e049      	b.n	800514a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d106      	bne.n	80050d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 f841 	bl	8005152 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2202      	movs	r2, #2
 80050d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	3304      	adds	r3, #4
 80050e0:	4619      	mov	r1, r3
 80050e2:	4610      	mov	r0, r2
 80050e4:	f000 fa30 	bl	8005548 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3708      	adds	r7, #8
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005152:	b480      	push	{r7}
 8005154:	b083      	sub	sp, #12
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800515a:	bf00      	nop
 800515c:	370c      	adds	r7, #12
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
	...

08005168 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005168:	b480      	push	{r7}
 800516a:	b085      	sub	sp, #20
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005176:	b2db      	uxtb	r3, r3
 8005178:	2b01      	cmp	r3, #1
 800517a:	d001      	beq.n	8005180 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e054      	b.n	800522a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2202      	movs	r2, #2
 8005184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68da      	ldr	r2, [r3, #12]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f042 0201 	orr.w	r2, r2, #1
 8005196:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a26      	ldr	r2, [pc, #152]	@ (8005238 <HAL_TIM_Base_Start_IT+0xd0>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d022      	beq.n	80051e8 <HAL_TIM_Base_Start_IT+0x80>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051aa:	d01d      	beq.n	80051e8 <HAL_TIM_Base_Start_IT+0x80>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a22      	ldr	r2, [pc, #136]	@ (800523c <HAL_TIM_Base_Start_IT+0xd4>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d018      	beq.n	80051e8 <HAL_TIM_Base_Start_IT+0x80>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a21      	ldr	r2, [pc, #132]	@ (8005240 <HAL_TIM_Base_Start_IT+0xd8>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d013      	beq.n	80051e8 <HAL_TIM_Base_Start_IT+0x80>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a1f      	ldr	r2, [pc, #124]	@ (8005244 <HAL_TIM_Base_Start_IT+0xdc>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d00e      	beq.n	80051e8 <HAL_TIM_Base_Start_IT+0x80>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a1e      	ldr	r2, [pc, #120]	@ (8005248 <HAL_TIM_Base_Start_IT+0xe0>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d009      	beq.n	80051e8 <HAL_TIM_Base_Start_IT+0x80>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a1c      	ldr	r2, [pc, #112]	@ (800524c <HAL_TIM_Base_Start_IT+0xe4>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d004      	beq.n	80051e8 <HAL_TIM_Base_Start_IT+0x80>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a1b      	ldr	r2, [pc, #108]	@ (8005250 <HAL_TIM_Base_Start_IT+0xe8>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d115      	bne.n	8005214 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	689a      	ldr	r2, [r3, #8]
 80051ee:	4b19      	ldr	r3, [pc, #100]	@ (8005254 <HAL_TIM_Base_Start_IT+0xec>)
 80051f0:	4013      	ands	r3, r2
 80051f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2b06      	cmp	r3, #6
 80051f8:	d015      	beq.n	8005226 <HAL_TIM_Base_Start_IT+0xbe>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005200:	d011      	beq.n	8005226 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f042 0201 	orr.w	r2, r2, #1
 8005210:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005212:	e008      	b.n	8005226 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f042 0201 	orr.w	r2, r2, #1
 8005222:	601a      	str	r2, [r3, #0]
 8005224:	e000      	b.n	8005228 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005226:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3714      	adds	r7, #20
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr
 8005236:	bf00      	nop
 8005238:	40012c00 	.word	0x40012c00
 800523c:	40000400 	.word	0x40000400
 8005240:	40000800 	.word	0x40000800
 8005244:	40000c00 	.word	0x40000c00
 8005248:	40013400 	.word	0x40013400
 800524c:	40014000 	.word	0x40014000
 8005250:	40015000 	.word	0x40015000
 8005254:	00010007 	.word	0x00010007

08005258 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	f003 0302 	and.w	r3, r3, #2
 8005276:	2b00      	cmp	r3, #0
 8005278:	d020      	beq.n	80052bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f003 0302 	and.w	r3, r3, #2
 8005280:	2b00      	cmp	r3, #0
 8005282:	d01b      	beq.n	80052bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f06f 0202 	mvn.w	r2, #2
 800528c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2201      	movs	r2, #1
 8005292:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	f003 0303 	and.w	r3, r3, #3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d003      	beq.n	80052aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 f931 	bl	800550a <HAL_TIM_IC_CaptureCallback>
 80052a8:	e005      	b.n	80052b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 f923 	bl	80054f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f000 f934 	bl	800551e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	f003 0304 	and.w	r3, r3, #4
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d020      	beq.n	8005308 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f003 0304 	and.w	r3, r3, #4
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d01b      	beq.n	8005308 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f06f 0204 	mvn.w	r2, #4
 80052d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2202      	movs	r2, #2
 80052de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d003      	beq.n	80052f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 f90b 	bl	800550a <HAL_TIM_IC_CaptureCallback>
 80052f4:	e005      	b.n	8005302 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 f8fd 	bl	80054f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f000 f90e 	bl	800551e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	f003 0308 	and.w	r3, r3, #8
 800530e:	2b00      	cmp	r3, #0
 8005310:	d020      	beq.n	8005354 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f003 0308 	and.w	r3, r3, #8
 8005318:	2b00      	cmp	r3, #0
 800531a:	d01b      	beq.n	8005354 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f06f 0208 	mvn.w	r2, #8
 8005324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2204      	movs	r2, #4
 800532a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	69db      	ldr	r3, [r3, #28]
 8005332:	f003 0303 	and.w	r3, r3, #3
 8005336:	2b00      	cmp	r3, #0
 8005338:	d003      	beq.n	8005342 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 f8e5 	bl	800550a <HAL_TIM_IC_CaptureCallback>
 8005340:	e005      	b.n	800534e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 f8d7 	bl	80054f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f000 f8e8 	bl	800551e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	f003 0310 	and.w	r3, r3, #16
 800535a:	2b00      	cmp	r3, #0
 800535c:	d020      	beq.n	80053a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f003 0310 	and.w	r3, r3, #16
 8005364:	2b00      	cmp	r3, #0
 8005366:	d01b      	beq.n	80053a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f06f 0210 	mvn.w	r2, #16
 8005370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2208      	movs	r2, #8
 8005376:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	69db      	ldr	r3, [r3, #28]
 800537e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005382:	2b00      	cmp	r3, #0
 8005384:	d003      	beq.n	800538e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 f8bf 	bl	800550a <HAL_TIM_IC_CaptureCallback>
 800538c:	e005      	b.n	800539a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 f8b1 	bl	80054f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f000 f8c2 	bl	800551e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00c      	beq.n	80053c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f003 0301 	and.w	r3, r3, #1
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d007      	beq.n	80053c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f06f 0201 	mvn.w	r2, #1
 80053bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f7fc fd70 	bl	8001ea4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d104      	bne.n	80053d8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00c      	beq.n	80053f2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d007      	beq.n	80053f2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80053ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 f969 	bl	80056c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00c      	beq.n	8005416 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005402:	2b00      	cmp	r3, #0
 8005404:	d007      	beq.n	8005416 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800540e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f000 f961 	bl	80056d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00c      	beq.n	800543a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005426:	2b00      	cmp	r3, #0
 8005428:	d007      	beq.n	800543a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005432:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 f87c 	bl	8005532 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	f003 0320 	and.w	r3, r3, #32
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00c      	beq.n	800545e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f003 0320 	and.w	r3, r3, #32
 800544a:	2b00      	cmp	r3, #0
 800544c:	d007      	beq.n	800545e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f06f 0220 	mvn.w	r2, #32
 8005456:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 f929 	bl	80056b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00c      	beq.n	8005482 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d007      	beq.n	8005482 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800547a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 f935 	bl	80056ec <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005488:	2b00      	cmp	r3, #0
 800548a:	d00c      	beq.n	80054a6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005492:	2b00      	cmp	r3, #0
 8005494:	d007      	beq.n	80054a6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800549e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 f92d 	bl	8005700 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00c      	beq.n	80054ca <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d007      	beq.n	80054ca <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80054c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 f925 	bl	8005714 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d00c      	beq.n	80054ee <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d007      	beq.n	80054ee <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80054e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 f91d 	bl	8005728 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054ee:	bf00      	nop
 80054f0:	3710      	adds	r7, #16
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}

080054f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054f6:	b480      	push	{r7}
 80054f8:	b083      	sub	sp, #12
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054fe:	bf00      	nop
 8005500:	370c      	adds	r7, #12
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr

0800550a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800550a:	b480      	push	{r7}
 800550c:	b083      	sub	sp, #12
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005512:	bf00      	nop
 8005514:	370c      	adds	r7, #12
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr

0800551e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800551e:	b480      	push	{r7}
 8005520:	b083      	sub	sp, #12
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005526:	bf00      	nop
 8005528:	370c      	adds	r7, #12
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr

08005532 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005532:	b480      	push	{r7}
 8005534:	b083      	sub	sp, #12
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800553a:	bf00      	nop
 800553c:	370c      	adds	r7, #12
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
	...

08005548 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005548:	b480      	push	{r7}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a4c      	ldr	r2, [pc, #304]	@ (800568c <TIM_Base_SetConfig+0x144>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d017      	beq.n	8005590 <TIM_Base_SetConfig+0x48>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005566:	d013      	beq.n	8005590 <TIM_Base_SetConfig+0x48>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a49      	ldr	r2, [pc, #292]	@ (8005690 <TIM_Base_SetConfig+0x148>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d00f      	beq.n	8005590 <TIM_Base_SetConfig+0x48>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a48      	ldr	r2, [pc, #288]	@ (8005694 <TIM_Base_SetConfig+0x14c>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d00b      	beq.n	8005590 <TIM_Base_SetConfig+0x48>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a47      	ldr	r2, [pc, #284]	@ (8005698 <TIM_Base_SetConfig+0x150>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d007      	beq.n	8005590 <TIM_Base_SetConfig+0x48>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a46      	ldr	r2, [pc, #280]	@ (800569c <TIM_Base_SetConfig+0x154>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d003      	beq.n	8005590 <TIM_Base_SetConfig+0x48>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a45      	ldr	r2, [pc, #276]	@ (80056a0 <TIM_Base_SetConfig+0x158>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d108      	bne.n	80055a2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005596:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	4313      	orrs	r3, r2
 80055a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a39      	ldr	r2, [pc, #228]	@ (800568c <TIM_Base_SetConfig+0x144>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d023      	beq.n	80055f2 <TIM_Base_SetConfig+0xaa>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055b0:	d01f      	beq.n	80055f2 <TIM_Base_SetConfig+0xaa>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a36      	ldr	r2, [pc, #216]	@ (8005690 <TIM_Base_SetConfig+0x148>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d01b      	beq.n	80055f2 <TIM_Base_SetConfig+0xaa>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a35      	ldr	r2, [pc, #212]	@ (8005694 <TIM_Base_SetConfig+0x14c>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d017      	beq.n	80055f2 <TIM_Base_SetConfig+0xaa>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a34      	ldr	r2, [pc, #208]	@ (8005698 <TIM_Base_SetConfig+0x150>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d013      	beq.n	80055f2 <TIM_Base_SetConfig+0xaa>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a33      	ldr	r2, [pc, #204]	@ (800569c <TIM_Base_SetConfig+0x154>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d00f      	beq.n	80055f2 <TIM_Base_SetConfig+0xaa>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a33      	ldr	r2, [pc, #204]	@ (80056a4 <TIM_Base_SetConfig+0x15c>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d00b      	beq.n	80055f2 <TIM_Base_SetConfig+0xaa>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a32      	ldr	r2, [pc, #200]	@ (80056a8 <TIM_Base_SetConfig+0x160>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d007      	beq.n	80055f2 <TIM_Base_SetConfig+0xaa>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a31      	ldr	r2, [pc, #196]	@ (80056ac <TIM_Base_SetConfig+0x164>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d003      	beq.n	80055f2 <TIM_Base_SetConfig+0xaa>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a2c      	ldr	r2, [pc, #176]	@ (80056a0 <TIM_Base_SetConfig+0x158>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d108      	bne.n	8005604 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	4313      	orrs	r3, r2
 8005602:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	4313      	orrs	r3, r2
 8005610:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	689a      	ldr	r2, [r3, #8]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a18      	ldr	r2, [pc, #96]	@ (800568c <TIM_Base_SetConfig+0x144>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d013      	beq.n	8005658 <TIM_Base_SetConfig+0x110>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a1a      	ldr	r2, [pc, #104]	@ (800569c <TIM_Base_SetConfig+0x154>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d00f      	beq.n	8005658 <TIM_Base_SetConfig+0x110>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a1a      	ldr	r2, [pc, #104]	@ (80056a4 <TIM_Base_SetConfig+0x15c>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d00b      	beq.n	8005658 <TIM_Base_SetConfig+0x110>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a19      	ldr	r2, [pc, #100]	@ (80056a8 <TIM_Base_SetConfig+0x160>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d007      	beq.n	8005658 <TIM_Base_SetConfig+0x110>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a18      	ldr	r2, [pc, #96]	@ (80056ac <TIM_Base_SetConfig+0x164>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d003      	beq.n	8005658 <TIM_Base_SetConfig+0x110>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a13      	ldr	r2, [pc, #76]	@ (80056a0 <TIM_Base_SetConfig+0x158>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d103      	bne.n	8005660 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	691a      	ldr	r2, [r3, #16]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	f003 0301 	and.w	r3, r3, #1
 800566e:	2b01      	cmp	r3, #1
 8005670:	d105      	bne.n	800567e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	f023 0201 	bic.w	r2, r3, #1
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	611a      	str	r2, [r3, #16]
  }
}
 800567e:	bf00      	nop
 8005680:	3714      	adds	r7, #20
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	40012c00 	.word	0x40012c00
 8005690:	40000400 	.word	0x40000400
 8005694:	40000800 	.word	0x40000800
 8005698:	40000c00 	.word	0x40000c00
 800569c:	40013400 	.word	0x40013400
 80056a0:	40015000 	.word	0x40015000
 80056a4:	40014000 	.word	0x40014000
 80056a8:	40014400 	.word	0x40014400
 80056ac:	40014800 	.word	0x40014800

080056b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056b8:	bf00      	nop
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80056e0:	bf00      	nop
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800571c:	bf00      	nop
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005730:	bf00      	nop
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d101      	bne.n	800574e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e042      	b.n	80057d4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005754:	2b00      	cmp	r3, #0
 8005756:	d106      	bne.n	8005766 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f7fc ff21 	bl	80025a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2224      	movs	r2, #36	@ 0x24
 800576a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f022 0201 	bic.w	r2, r2, #1
 800577c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005782:	2b00      	cmp	r3, #0
 8005784:	d002      	beq.n	800578c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f001 f806 	bl	8006798 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 fd07 	bl	80061a0 <UART_SetConfig>
 8005792:	4603      	mov	r3, r0
 8005794:	2b01      	cmp	r3, #1
 8005796:	d101      	bne.n	800579c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e01b      	b.n	80057d4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	685a      	ldr	r2, [r3, #4]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80057aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	689a      	ldr	r2, [r3, #8]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80057ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f042 0201 	orr.w	r2, r2, #1
 80057ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f001 f885 	bl	80068dc <UART_CheckIdleState>
 80057d2:	4603      	mov	r3, r0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3708      	adds	r7, #8
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b08a      	sub	sp, #40	@ 0x28
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	4613      	mov	r3, r2
 80057e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057f0:	2b20      	cmp	r3, #32
 80057f2:	d167      	bne.n	80058c4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d002      	beq.n	8005800 <HAL_UART_Transmit_DMA+0x24>
 80057fa:	88fb      	ldrh	r3, [r7, #6]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d101      	bne.n	8005804 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e060      	b.n	80058c6 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	88fa      	ldrh	r2, [r7, #6]
 800580e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	88fa      	ldrh	r2, [r7, #6]
 8005816:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2200      	movs	r2, #0
 800581e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2221      	movs	r2, #33	@ 0x21
 8005826:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800582e:	2b00      	cmp	r3, #0
 8005830:	d028      	beq.n	8005884 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005836:	4a26      	ldr	r2, [pc, #152]	@ (80058d0 <HAL_UART_Transmit_DMA+0xf4>)
 8005838:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800583e:	4a25      	ldr	r2, [pc, #148]	@ (80058d4 <HAL_UART_Transmit_DMA+0xf8>)
 8005840:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005846:	4a24      	ldr	r2, [pc, #144]	@ (80058d8 <HAL_UART_Transmit_DMA+0xfc>)
 8005848:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800584e:	2200      	movs	r2, #0
 8005850:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800585a:	4619      	mov	r1, r3
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	3328      	adds	r3, #40	@ 0x28
 8005862:	461a      	mov	r2, r3
 8005864:	88fb      	ldrh	r3, [r7, #6]
 8005866:	f7fd f945 	bl	8002af4 <HAL_DMA_Start_IT>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d009      	beq.n	8005884 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2210      	movs	r2, #16
 8005874:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2220      	movs	r2, #32
 800587c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e020      	b.n	80058c6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2240      	movs	r2, #64	@ 0x40
 800588a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	3308      	adds	r3, #8
 8005892:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	e853 3f00 	ldrex	r3, [r3]
 800589a:	613b      	str	r3, [r7, #16]
   return(result);
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	3308      	adds	r3, #8
 80058aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058ac:	623a      	str	r2, [r7, #32]
 80058ae:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b0:	69f9      	ldr	r1, [r7, #28]
 80058b2:	6a3a      	ldr	r2, [r7, #32]
 80058b4:	e841 2300 	strex	r3, r2, [r1]
 80058b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d1e5      	bne.n	800588c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80058c0:	2300      	movs	r3, #0
 80058c2:	e000      	b.n	80058c6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80058c4:	2302      	movs	r3, #2
  }
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3728      	adds	r7, #40	@ 0x28
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	08006da7 	.word	0x08006da7
 80058d4:	08006e41 	.word	0x08006e41
 80058d8:	08006fc7 	.word	0x08006fc7

080058dc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b08a      	sub	sp, #40	@ 0x28
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	4613      	mov	r3, r2
 80058e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058f0:	2b20      	cmp	r3, #32
 80058f2:	d137      	bne.n	8005964 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d002      	beq.n	8005900 <HAL_UART_Receive_DMA+0x24>
 80058fa:	88fb      	ldrh	r3, [r7, #6]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d101      	bne.n	8005904 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e030      	b.n	8005966 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a18      	ldr	r2, [pc, #96]	@ (8005970 <HAL_UART_Receive_DMA+0x94>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d01f      	beq.n	8005954 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d018      	beq.n	8005954 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	e853 3f00 	ldrex	r3, [r3]
 800592e:	613b      	str	r3, [r7, #16]
   return(result);
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005936:	627b      	str	r3, [r7, #36]	@ 0x24
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	461a      	mov	r2, r3
 800593e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005940:	623b      	str	r3, [r7, #32]
 8005942:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005944:	69f9      	ldr	r1, [r7, #28]
 8005946:	6a3a      	ldr	r2, [r7, #32]
 8005948:	e841 2300 	strex	r3, r2, [r1]
 800594c:	61bb      	str	r3, [r7, #24]
   return(result);
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d1e6      	bne.n	8005922 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005954:	88fb      	ldrh	r3, [r7, #6]
 8005956:	461a      	mov	r2, r3
 8005958:	68b9      	ldr	r1, [r7, #8]
 800595a:	68f8      	ldr	r0, [r7, #12]
 800595c:	f001 f8d6 	bl	8006b0c <UART_Start_Receive_DMA>
 8005960:	4603      	mov	r3, r0
 8005962:	e000      	b.n	8005966 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005964:	2302      	movs	r3, #2
  }
}
 8005966:	4618      	mov	r0, r3
 8005968:	3728      	adds	r7, #40	@ 0x28
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	40008000 	.word	0x40008000

08005974 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b090      	sub	sp, #64	@ 0x40
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005982:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800598a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005996:	2b80      	cmp	r3, #128	@ 0x80
 8005998:	d139      	bne.n	8005a0e <HAL_UART_DMAStop+0x9a>
 800599a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800599c:	2b21      	cmp	r3, #33	@ 0x21
 800599e:	d136      	bne.n	8005a0e <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	3308      	adds	r3, #8
 80059a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a8:	6a3b      	ldr	r3, [r7, #32]
 80059aa:	e853 3f00 	ldrex	r3, [r3]
 80059ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	3308      	adds	r3, #8
 80059be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80059c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80059c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80059c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059c8:	e841 2300 	strex	r3, r2, [r1]
 80059cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80059ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d1e5      	bne.n	80059a0 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d015      	beq.n	8005a08 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80059e0:	4618      	mov	r0, r3
 80059e2:	f7fd f902 	bl	8002bea <HAL_DMA_Abort>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d00d      	beq.n	8005a08 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80059f0:	4618      	mov	r0, r3
 80059f2:	f7fd fa69 	bl	8002ec8 <HAL_DMA_GetError>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b20      	cmp	r3, #32
 80059fa:	d105      	bne.n	8005a08 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2210      	movs	r2, #16
 8005a00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8005a04:	2303      	movs	r3, #3
 8005a06:	e047      	b.n	8005a98 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f001 f925 	bl	8006c58 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a18:	2b40      	cmp	r3, #64	@ 0x40
 8005a1a:	d13c      	bne.n	8005a96 <HAL_UART_DMAStop+0x122>
 8005a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a1e:	2b22      	cmp	r3, #34	@ 0x22
 8005a20:	d139      	bne.n	8005a96 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	3308      	adds	r3, #8
 8005a28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	e853 3f00 	ldrex	r3, [r3]
 8005a30:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a38:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	3308      	adds	r3, #8
 8005a40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a42:	61ba      	str	r2, [r7, #24]
 8005a44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a46:	6979      	ldr	r1, [r7, #20]
 8005a48:	69ba      	ldr	r2, [r7, #24]
 8005a4a:	e841 2300 	strex	r3, r2, [r1]
 8005a4e:	613b      	str	r3, [r7, #16]
   return(result);
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1e5      	bne.n	8005a22 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d017      	beq.n	8005a90 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7fd f8bf 	bl	8002bea <HAL_DMA_Abort>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00e      	beq.n	8005a90 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f7fd fa25 	bl	8002ec8 <HAL_DMA_GetError>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b20      	cmp	r3, #32
 8005a82:	d105      	bne.n	8005a90 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2210      	movs	r2, #16
 8005a88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	e003      	b.n	8005a98 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f001 f922 	bl	8006cda <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3740      	adds	r7, #64	@ 0x40
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b0ba      	sub	sp, #232	@ 0xe8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	69db      	ldr	r3, [r3, #28]
 8005aae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005ac6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005aca:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005ace:	4013      	ands	r3, r2
 8005ad0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005ad4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d11b      	bne.n	8005b14 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ae0:	f003 0320 	and.w	r3, r3, #32
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d015      	beq.n	8005b14 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005aec:	f003 0320 	and.w	r3, r3, #32
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d105      	bne.n	8005b00 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005af4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005af8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d009      	beq.n	8005b14 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	f000 8300 	beq.w	800610a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	4798      	blx	r3
      }
      return;
 8005b12:	e2fa      	b.n	800610a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005b14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	f000 8123 	beq.w	8005d64 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005b1e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005b22:	4b8d      	ldr	r3, [pc, #564]	@ (8005d58 <HAL_UART_IRQHandler+0x2b8>)
 8005b24:	4013      	ands	r3, r2
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d106      	bne.n	8005b38 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005b2a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005b2e:	4b8b      	ldr	r3, [pc, #556]	@ (8005d5c <HAL_UART_IRQHandler+0x2bc>)
 8005b30:	4013      	ands	r3, r2
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f000 8116 	beq.w	8005d64 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005b38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b3c:	f003 0301 	and.w	r3, r3, #1
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d011      	beq.n	8005b68 <HAL_UART_IRQHandler+0xc8>
 8005b44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d00b      	beq.n	8005b68 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2201      	movs	r2, #1
 8005b56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b5e:	f043 0201 	orr.w	r2, r3, #1
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b6c:	f003 0302 	and.w	r3, r3, #2
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d011      	beq.n	8005b98 <HAL_UART_IRQHandler+0xf8>
 8005b74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b78:	f003 0301 	and.w	r3, r3, #1
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d00b      	beq.n	8005b98 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2202      	movs	r2, #2
 8005b86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b8e:	f043 0204 	orr.w	r2, r3, #4
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b9c:	f003 0304 	and.w	r3, r3, #4
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d011      	beq.n	8005bc8 <HAL_UART_IRQHandler+0x128>
 8005ba4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ba8:	f003 0301 	and.w	r3, r3, #1
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00b      	beq.n	8005bc8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2204      	movs	r2, #4
 8005bb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bbe:	f043 0202 	orr.w	r2, r3, #2
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005bc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bcc:	f003 0308 	and.w	r3, r3, #8
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d017      	beq.n	8005c04 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005bd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bd8:	f003 0320 	and.w	r3, r3, #32
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d105      	bne.n	8005bec <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005be0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005be4:	4b5c      	ldr	r3, [pc, #368]	@ (8005d58 <HAL_UART_IRQHandler+0x2b8>)
 8005be6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d00b      	beq.n	8005c04 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2208      	movs	r2, #8
 8005bf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bfa:	f043 0208 	orr.w	r2, r3, #8
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005c04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d012      	beq.n	8005c36 <HAL_UART_IRQHandler+0x196>
 8005c10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c14:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d00c      	beq.n	8005c36 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005c24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c2c:	f043 0220 	orr.w	r2, r3, #32
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	f000 8266 	beq.w	800610e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c46:	f003 0320 	and.w	r3, r3, #32
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d013      	beq.n	8005c76 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005c4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c52:	f003 0320 	and.w	r3, r3, #32
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d105      	bne.n	8005c66 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005c5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d007      	beq.n	8005c76 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d003      	beq.n	8005c76 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c7c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c8a:	2b40      	cmp	r3, #64	@ 0x40
 8005c8c:	d005      	beq.n	8005c9a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005c8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c92:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d054      	beq.n	8005d44 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f001 f81d 	bl	8006cda <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005caa:	2b40      	cmp	r3, #64	@ 0x40
 8005cac:	d146      	bne.n	8005d3c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	3308      	adds	r3, #8
 8005cb4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005cbc:	e853 3f00 	ldrex	r3, [r3]
 8005cc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005cc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005cc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ccc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	3308      	adds	r3, #8
 8005cd6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005cda:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005cde:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005ce6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005cea:	e841 2300 	strex	r3, r2, [r1]
 8005cee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005cf2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d1d9      	bne.n	8005cae <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d017      	beq.n	8005d34 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d0a:	4a15      	ldr	r2, [pc, #84]	@ (8005d60 <HAL_UART_IRQHandler+0x2c0>)
 8005d0c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d14:	4618      	mov	r0, r3
 8005d16:	f7fc ffc1 	bl	8002c9c <HAL_DMA_Abort_IT>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d019      	beq.n	8005d54 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005d2e:	4610      	mov	r0, r2
 8005d30:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d32:	e00f      	b.n	8005d54 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f000 fa1d 	bl	8006174 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d3a:	e00b      	b.n	8005d54 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f000 fa19 	bl	8006174 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d42:	e007      	b.n	8005d54 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 fa15 	bl	8006174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005d52:	e1dc      	b.n	800610e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d54:	bf00      	nop
    return;
 8005d56:	e1da      	b.n	800610e <HAL_UART_IRQHandler+0x66e>
 8005d58:	10000001 	.word	0x10000001
 8005d5c:	04000120 	.word	0x04000120
 8005d60:	08007047 	.word	0x08007047

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	f040 8170 	bne.w	800604e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d72:	f003 0310 	and.w	r3, r3, #16
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f000 8169 	beq.w	800604e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005d7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d80:	f003 0310 	and.w	r3, r3, #16
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f000 8162 	beq.w	800604e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2210      	movs	r2, #16
 8005d90:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d9c:	2b40      	cmp	r3, #64	@ 0x40
 8005d9e:	f040 80d8 	bne.w	8005f52 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005db0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	f000 80af 	beq.w	8005f18 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005dc0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	f080 80a7 	bcs.w	8005f18 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005dd0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 0320 	and.w	r3, r3, #32
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	f040 8087 	bne.w	8005ef6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005df4:	e853 3f00 	ldrex	r3, [r3]
 8005df8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005dfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005e00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005e12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005e16:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e1a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005e1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005e22:	e841 2300 	strex	r3, r2, [r1]
 8005e26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005e2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d1da      	bne.n	8005de8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	3308      	adds	r3, #8
 8005e38:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e3c:	e853 3f00 	ldrex	r3, [r3]
 8005e40:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005e42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005e44:	f023 0301 	bic.w	r3, r3, #1
 8005e48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	3308      	adds	r3, #8
 8005e52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005e56:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005e5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e5c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005e5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005e62:	e841 2300 	strex	r3, r2, [r1]
 8005e66:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005e68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d1e1      	bne.n	8005e32 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	3308      	adds	r3, #8
 8005e74:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005e78:	e853 3f00 	ldrex	r3, [r3]
 8005e7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005e7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	3308      	adds	r3, #8
 8005e8e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005e92:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005e94:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e96:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005e98:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005e9a:	e841 2300 	strex	r3, r2, [r1]
 8005e9e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005ea0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d1e3      	bne.n	8005e6e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2220      	movs	r2, #32
 8005eaa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ebc:	e853 3f00 	ldrex	r3, [r3]
 8005ec0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005ec2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ec4:	f023 0310 	bic.w	r3, r3, #16
 8005ec8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005ed6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005ed8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eda:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005edc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005ede:	e841 2300 	strex	r3, r2, [r1]
 8005ee2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005ee4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d1e4      	bne.n	8005eb4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f7fc fe7a 	bl	8002bea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2202      	movs	r2, #2
 8005efa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	1ad3      	subs	r3, r2, r3
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	4619      	mov	r1, r3
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 f939 	bl	8006188 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005f16:	e0fc      	b.n	8006112 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005f1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005f22:	429a      	cmp	r2, r3
 8005f24:	f040 80f5 	bne.w	8006112 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 0320 	and.w	r3, r3, #32
 8005f36:	2b20      	cmp	r3, #32
 8005f38:	f040 80eb 	bne.w	8006112 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2202      	movs	r2, #2
 8005f40:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005f48:	4619      	mov	r1, r3
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 f91c 	bl	8006188 <HAL_UARTEx_RxEventCallback>
      return;
 8005f50:	e0df      	b.n	8006112 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	f000 80d1 	beq.w	8006116 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8005f74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f000 80cc 	beq.w	8006116 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f86:	e853 3f00 	ldrex	r3, [r3]
 8005f8a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005f8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f8e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f92:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005fa0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fa2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005fa6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005fa8:	e841 2300 	strex	r3, r2, [r1]
 8005fac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005fae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d1e4      	bne.n	8005f7e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	3308      	adds	r3, #8
 8005fba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fbe:	e853 3f00 	ldrex	r3, [r3]
 8005fc2:	623b      	str	r3, [r7, #32]
   return(result);
 8005fc4:	6a3b      	ldr	r3, [r7, #32]
 8005fc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005fca:	f023 0301 	bic.w	r3, r3, #1
 8005fce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	3308      	adds	r3, #8
 8005fd8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005fdc:	633a      	str	r2, [r7, #48]	@ 0x30
 8005fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005fe2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fe4:	e841 2300 	strex	r3, r2, [r1]
 8005fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d1e1      	bne.n	8005fb4 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2220      	movs	r2, #32
 8005ff4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	e853 3f00 	ldrex	r3, [r3]
 8006010:	60fb      	str	r3, [r7, #12]
   return(result);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f023 0310 	bic.w	r3, r3, #16
 8006018:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	461a      	mov	r2, r3
 8006022:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006026:	61fb      	str	r3, [r7, #28]
 8006028:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602a:	69b9      	ldr	r1, [r7, #24]
 800602c:	69fa      	ldr	r2, [r7, #28]
 800602e:	e841 2300 	strex	r3, r2, [r1]
 8006032:	617b      	str	r3, [r7, #20]
   return(result);
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d1e4      	bne.n	8006004 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2202      	movs	r2, #2
 800603e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006040:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006044:	4619      	mov	r1, r3
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 f89e 	bl	8006188 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800604c:	e063      	b.n	8006116 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800604e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006052:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00e      	beq.n	8006078 <HAL_UART_IRQHandler+0x5d8>
 800605a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800605e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006062:	2b00      	cmp	r3, #0
 8006064:	d008      	beq.n	8006078 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800606e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f001 f825 	bl	80070c0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006076:	e051      	b.n	800611c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800607c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006080:	2b00      	cmp	r3, #0
 8006082:	d014      	beq.n	80060ae <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006088:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800608c:	2b00      	cmp	r3, #0
 800608e:	d105      	bne.n	800609c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006090:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006094:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006098:	2b00      	cmp	r3, #0
 800609a:	d008      	beq.n	80060ae <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d03a      	beq.n	800611a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	4798      	blx	r3
    }
    return;
 80060ac:	e035      	b.n	800611a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80060ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d009      	beq.n	80060ce <HAL_UART_IRQHandler+0x62e>
 80060ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d003      	beq.n	80060ce <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 ffcf 	bl	800706a <UART_EndTransmit_IT>
    return;
 80060cc:	e026      	b.n	800611c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80060ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d009      	beq.n	80060ee <HAL_UART_IRQHandler+0x64e>
 80060da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060de:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d003      	beq.n	80060ee <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 fffe 	bl	80070e8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80060ec:	e016      	b.n	800611c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80060ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d010      	beq.n	800611c <HAL_UART_IRQHandler+0x67c>
 80060fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	da0c      	bge.n	800611c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 ffe6 	bl	80070d4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006108:	e008      	b.n	800611c <HAL_UART_IRQHandler+0x67c>
      return;
 800610a:	bf00      	nop
 800610c:	e006      	b.n	800611c <HAL_UART_IRQHandler+0x67c>
    return;
 800610e:	bf00      	nop
 8006110:	e004      	b.n	800611c <HAL_UART_IRQHandler+0x67c>
      return;
 8006112:	bf00      	nop
 8006114:	e002      	b.n	800611c <HAL_UART_IRQHandler+0x67c>
      return;
 8006116:	bf00      	nop
 8006118:	e000      	b.n	800611c <HAL_UART_IRQHandler+0x67c>
    return;
 800611a:	bf00      	nop
  }
}
 800611c:	37e8      	adds	r7, #232	@ 0xe8
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop

08006124 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800612c:	bf00      	nop
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006140:	bf00      	nop
 8006142:	370c      	adds	r7, #12
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006154:	bf00      	nop
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006168:	bf00      	nop
 800616a:	370c      	adds	r7, #12
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800617c:	bf00      	nop
 800617e:	370c      	adds	r7, #12
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	460b      	mov	r3, r1
 8006192:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006194:	bf00      	nop
 8006196:	370c      	adds	r7, #12
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061a4:	b08c      	sub	sp, #48	@ 0x30
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80061aa:	2300      	movs	r3, #0
 80061ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	689a      	ldr	r2, [r3, #8]
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	431a      	orrs	r2, r3
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	695b      	ldr	r3, [r3, #20]
 80061be:	431a      	orrs	r2, r3
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	69db      	ldr	r3, [r3, #28]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	4baa      	ldr	r3, [pc, #680]	@ (8006478 <UART_SetConfig+0x2d8>)
 80061d0:	4013      	ands	r3, r2
 80061d2:	697a      	ldr	r2, [r7, #20]
 80061d4:	6812      	ldr	r2, [r2, #0]
 80061d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80061d8:	430b      	orrs	r3, r1
 80061da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	68da      	ldr	r2, [r3, #12]
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	430a      	orrs	r2, r1
 80061f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	699b      	ldr	r3, [r3, #24]
 80061f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a9f      	ldr	r2, [pc, #636]	@ (800647c <UART_SetConfig+0x2dc>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d004      	beq.n	800620c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	6a1b      	ldr	r3, [r3, #32]
 8006206:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006208:	4313      	orrs	r3, r2
 800620a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006216:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800621a:	697a      	ldr	r2, [r7, #20]
 800621c:	6812      	ldr	r2, [r2, #0]
 800621e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006220:	430b      	orrs	r3, r1
 8006222:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800622a:	f023 010f 	bic.w	r1, r3, #15
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	430a      	orrs	r2, r1
 8006238:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a90      	ldr	r2, [pc, #576]	@ (8006480 <UART_SetConfig+0x2e0>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d125      	bne.n	8006290 <UART_SetConfig+0xf0>
 8006244:	4b8f      	ldr	r3, [pc, #572]	@ (8006484 <UART_SetConfig+0x2e4>)
 8006246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800624a:	f003 0303 	and.w	r3, r3, #3
 800624e:	2b03      	cmp	r3, #3
 8006250:	d81a      	bhi.n	8006288 <UART_SetConfig+0xe8>
 8006252:	a201      	add	r2, pc, #4	@ (adr r2, 8006258 <UART_SetConfig+0xb8>)
 8006254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006258:	08006269 	.word	0x08006269
 800625c:	08006279 	.word	0x08006279
 8006260:	08006271 	.word	0x08006271
 8006264:	08006281 	.word	0x08006281
 8006268:	2301      	movs	r3, #1
 800626a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800626e:	e116      	b.n	800649e <UART_SetConfig+0x2fe>
 8006270:	2302      	movs	r3, #2
 8006272:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006276:	e112      	b.n	800649e <UART_SetConfig+0x2fe>
 8006278:	2304      	movs	r3, #4
 800627a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800627e:	e10e      	b.n	800649e <UART_SetConfig+0x2fe>
 8006280:	2308      	movs	r3, #8
 8006282:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006286:	e10a      	b.n	800649e <UART_SetConfig+0x2fe>
 8006288:	2310      	movs	r3, #16
 800628a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800628e:	e106      	b.n	800649e <UART_SetConfig+0x2fe>
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a7c      	ldr	r2, [pc, #496]	@ (8006488 <UART_SetConfig+0x2e8>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d138      	bne.n	800630c <UART_SetConfig+0x16c>
 800629a:	4b7a      	ldr	r3, [pc, #488]	@ (8006484 <UART_SetConfig+0x2e4>)
 800629c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062a0:	f003 030c 	and.w	r3, r3, #12
 80062a4:	2b0c      	cmp	r3, #12
 80062a6:	d82d      	bhi.n	8006304 <UART_SetConfig+0x164>
 80062a8:	a201      	add	r2, pc, #4	@ (adr r2, 80062b0 <UART_SetConfig+0x110>)
 80062aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ae:	bf00      	nop
 80062b0:	080062e5 	.word	0x080062e5
 80062b4:	08006305 	.word	0x08006305
 80062b8:	08006305 	.word	0x08006305
 80062bc:	08006305 	.word	0x08006305
 80062c0:	080062f5 	.word	0x080062f5
 80062c4:	08006305 	.word	0x08006305
 80062c8:	08006305 	.word	0x08006305
 80062cc:	08006305 	.word	0x08006305
 80062d0:	080062ed 	.word	0x080062ed
 80062d4:	08006305 	.word	0x08006305
 80062d8:	08006305 	.word	0x08006305
 80062dc:	08006305 	.word	0x08006305
 80062e0:	080062fd 	.word	0x080062fd
 80062e4:	2300      	movs	r3, #0
 80062e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062ea:	e0d8      	b.n	800649e <UART_SetConfig+0x2fe>
 80062ec:	2302      	movs	r3, #2
 80062ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062f2:	e0d4      	b.n	800649e <UART_SetConfig+0x2fe>
 80062f4:	2304      	movs	r3, #4
 80062f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062fa:	e0d0      	b.n	800649e <UART_SetConfig+0x2fe>
 80062fc:	2308      	movs	r3, #8
 80062fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006302:	e0cc      	b.n	800649e <UART_SetConfig+0x2fe>
 8006304:	2310      	movs	r3, #16
 8006306:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800630a:	e0c8      	b.n	800649e <UART_SetConfig+0x2fe>
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a5e      	ldr	r2, [pc, #376]	@ (800648c <UART_SetConfig+0x2ec>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d125      	bne.n	8006362 <UART_SetConfig+0x1c2>
 8006316:	4b5b      	ldr	r3, [pc, #364]	@ (8006484 <UART_SetConfig+0x2e4>)
 8006318:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800631c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006320:	2b30      	cmp	r3, #48	@ 0x30
 8006322:	d016      	beq.n	8006352 <UART_SetConfig+0x1b2>
 8006324:	2b30      	cmp	r3, #48	@ 0x30
 8006326:	d818      	bhi.n	800635a <UART_SetConfig+0x1ba>
 8006328:	2b20      	cmp	r3, #32
 800632a:	d00a      	beq.n	8006342 <UART_SetConfig+0x1a2>
 800632c:	2b20      	cmp	r3, #32
 800632e:	d814      	bhi.n	800635a <UART_SetConfig+0x1ba>
 8006330:	2b00      	cmp	r3, #0
 8006332:	d002      	beq.n	800633a <UART_SetConfig+0x19a>
 8006334:	2b10      	cmp	r3, #16
 8006336:	d008      	beq.n	800634a <UART_SetConfig+0x1aa>
 8006338:	e00f      	b.n	800635a <UART_SetConfig+0x1ba>
 800633a:	2300      	movs	r3, #0
 800633c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006340:	e0ad      	b.n	800649e <UART_SetConfig+0x2fe>
 8006342:	2302      	movs	r3, #2
 8006344:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006348:	e0a9      	b.n	800649e <UART_SetConfig+0x2fe>
 800634a:	2304      	movs	r3, #4
 800634c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006350:	e0a5      	b.n	800649e <UART_SetConfig+0x2fe>
 8006352:	2308      	movs	r3, #8
 8006354:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006358:	e0a1      	b.n	800649e <UART_SetConfig+0x2fe>
 800635a:	2310      	movs	r3, #16
 800635c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006360:	e09d      	b.n	800649e <UART_SetConfig+0x2fe>
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a4a      	ldr	r2, [pc, #296]	@ (8006490 <UART_SetConfig+0x2f0>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d125      	bne.n	80063b8 <UART_SetConfig+0x218>
 800636c:	4b45      	ldr	r3, [pc, #276]	@ (8006484 <UART_SetConfig+0x2e4>)
 800636e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006372:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006376:	2bc0      	cmp	r3, #192	@ 0xc0
 8006378:	d016      	beq.n	80063a8 <UART_SetConfig+0x208>
 800637a:	2bc0      	cmp	r3, #192	@ 0xc0
 800637c:	d818      	bhi.n	80063b0 <UART_SetConfig+0x210>
 800637e:	2b80      	cmp	r3, #128	@ 0x80
 8006380:	d00a      	beq.n	8006398 <UART_SetConfig+0x1f8>
 8006382:	2b80      	cmp	r3, #128	@ 0x80
 8006384:	d814      	bhi.n	80063b0 <UART_SetConfig+0x210>
 8006386:	2b00      	cmp	r3, #0
 8006388:	d002      	beq.n	8006390 <UART_SetConfig+0x1f0>
 800638a:	2b40      	cmp	r3, #64	@ 0x40
 800638c:	d008      	beq.n	80063a0 <UART_SetConfig+0x200>
 800638e:	e00f      	b.n	80063b0 <UART_SetConfig+0x210>
 8006390:	2300      	movs	r3, #0
 8006392:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006396:	e082      	b.n	800649e <UART_SetConfig+0x2fe>
 8006398:	2302      	movs	r3, #2
 800639a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800639e:	e07e      	b.n	800649e <UART_SetConfig+0x2fe>
 80063a0:	2304      	movs	r3, #4
 80063a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063a6:	e07a      	b.n	800649e <UART_SetConfig+0x2fe>
 80063a8:	2308      	movs	r3, #8
 80063aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063ae:	e076      	b.n	800649e <UART_SetConfig+0x2fe>
 80063b0:	2310      	movs	r3, #16
 80063b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063b6:	e072      	b.n	800649e <UART_SetConfig+0x2fe>
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a35      	ldr	r2, [pc, #212]	@ (8006494 <UART_SetConfig+0x2f4>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d12a      	bne.n	8006418 <UART_SetConfig+0x278>
 80063c2:	4b30      	ldr	r3, [pc, #192]	@ (8006484 <UART_SetConfig+0x2e4>)
 80063c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063d0:	d01a      	beq.n	8006408 <UART_SetConfig+0x268>
 80063d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063d6:	d81b      	bhi.n	8006410 <UART_SetConfig+0x270>
 80063d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063dc:	d00c      	beq.n	80063f8 <UART_SetConfig+0x258>
 80063de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063e2:	d815      	bhi.n	8006410 <UART_SetConfig+0x270>
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d003      	beq.n	80063f0 <UART_SetConfig+0x250>
 80063e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063ec:	d008      	beq.n	8006400 <UART_SetConfig+0x260>
 80063ee:	e00f      	b.n	8006410 <UART_SetConfig+0x270>
 80063f0:	2300      	movs	r3, #0
 80063f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063f6:	e052      	b.n	800649e <UART_SetConfig+0x2fe>
 80063f8:	2302      	movs	r3, #2
 80063fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063fe:	e04e      	b.n	800649e <UART_SetConfig+0x2fe>
 8006400:	2304      	movs	r3, #4
 8006402:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006406:	e04a      	b.n	800649e <UART_SetConfig+0x2fe>
 8006408:	2308      	movs	r3, #8
 800640a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800640e:	e046      	b.n	800649e <UART_SetConfig+0x2fe>
 8006410:	2310      	movs	r3, #16
 8006412:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006416:	e042      	b.n	800649e <UART_SetConfig+0x2fe>
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a17      	ldr	r2, [pc, #92]	@ (800647c <UART_SetConfig+0x2dc>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d13a      	bne.n	8006498 <UART_SetConfig+0x2f8>
 8006422:	4b18      	ldr	r3, [pc, #96]	@ (8006484 <UART_SetConfig+0x2e4>)
 8006424:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006428:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800642c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006430:	d01a      	beq.n	8006468 <UART_SetConfig+0x2c8>
 8006432:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006436:	d81b      	bhi.n	8006470 <UART_SetConfig+0x2d0>
 8006438:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800643c:	d00c      	beq.n	8006458 <UART_SetConfig+0x2b8>
 800643e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006442:	d815      	bhi.n	8006470 <UART_SetConfig+0x2d0>
 8006444:	2b00      	cmp	r3, #0
 8006446:	d003      	beq.n	8006450 <UART_SetConfig+0x2b0>
 8006448:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800644c:	d008      	beq.n	8006460 <UART_SetConfig+0x2c0>
 800644e:	e00f      	b.n	8006470 <UART_SetConfig+0x2d0>
 8006450:	2300      	movs	r3, #0
 8006452:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006456:	e022      	b.n	800649e <UART_SetConfig+0x2fe>
 8006458:	2302      	movs	r3, #2
 800645a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800645e:	e01e      	b.n	800649e <UART_SetConfig+0x2fe>
 8006460:	2304      	movs	r3, #4
 8006462:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006466:	e01a      	b.n	800649e <UART_SetConfig+0x2fe>
 8006468:	2308      	movs	r3, #8
 800646a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800646e:	e016      	b.n	800649e <UART_SetConfig+0x2fe>
 8006470:	2310      	movs	r3, #16
 8006472:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006476:	e012      	b.n	800649e <UART_SetConfig+0x2fe>
 8006478:	cfff69f3 	.word	0xcfff69f3
 800647c:	40008000 	.word	0x40008000
 8006480:	40013800 	.word	0x40013800
 8006484:	40021000 	.word	0x40021000
 8006488:	40004400 	.word	0x40004400
 800648c:	40004800 	.word	0x40004800
 8006490:	40004c00 	.word	0x40004c00
 8006494:	40005000 	.word	0x40005000
 8006498:	2310      	movs	r3, #16
 800649a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4aae      	ldr	r2, [pc, #696]	@ (800675c <UART_SetConfig+0x5bc>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	f040 8097 	bne.w	80065d8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80064aa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80064ae:	2b08      	cmp	r3, #8
 80064b0:	d823      	bhi.n	80064fa <UART_SetConfig+0x35a>
 80064b2:	a201      	add	r2, pc, #4	@ (adr r2, 80064b8 <UART_SetConfig+0x318>)
 80064b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b8:	080064dd 	.word	0x080064dd
 80064bc:	080064fb 	.word	0x080064fb
 80064c0:	080064e5 	.word	0x080064e5
 80064c4:	080064fb 	.word	0x080064fb
 80064c8:	080064eb 	.word	0x080064eb
 80064cc:	080064fb 	.word	0x080064fb
 80064d0:	080064fb 	.word	0x080064fb
 80064d4:	080064fb 	.word	0x080064fb
 80064d8:	080064f3 	.word	0x080064f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064dc:	f7fe faf0 	bl	8004ac0 <HAL_RCC_GetPCLK1Freq>
 80064e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80064e2:	e010      	b.n	8006506 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064e4:	4b9e      	ldr	r3, [pc, #632]	@ (8006760 <UART_SetConfig+0x5c0>)
 80064e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80064e8:	e00d      	b.n	8006506 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064ea:	f7fe fa7b 	bl	80049e4 <HAL_RCC_GetSysClockFreq>
 80064ee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80064f0:	e009      	b.n	8006506 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80064f8:	e005      	b.n	8006506 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80064fa:	2300      	movs	r3, #0
 80064fc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006504:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006508:	2b00      	cmp	r3, #0
 800650a:	f000 8130 	beq.w	800676e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006512:	4a94      	ldr	r2, [pc, #592]	@ (8006764 <UART_SetConfig+0x5c4>)
 8006514:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006518:	461a      	mov	r2, r3
 800651a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800651c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006520:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	685a      	ldr	r2, [r3, #4]
 8006526:	4613      	mov	r3, r2
 8006528:	005b      	lsls	r3, r3, #1
 800652a:	4413      	add	r3, r2
 800652c:	69ba      	ldr	r2, [r7, #24]
 800652e:	429a      	cmp	r2, r3
 8006530:	d305      	bcc.n	800653e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006538:	69ba      	ldr	r2, [r7, #24]
 800653a:	429a      	cmp	r2, r3
 800653c:	d903      	bls.n	8006546 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006544:	e113      	b.n	800676e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006548:	2200      	movs	r2, #0
 800654a:	60bb      	str	r3, [r7, #8]
 800654c:	60fa      	str	r2, [r7, #12]
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006552:	4a84      	ldr	r2, [pc, #528]	@ (8006764 <UART_SetConfig+0x5c4>)
 8006554:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006558:	b29b      	uxth	r3, r3
 800655a:	2200      	movs	r2, #0
 800655c:	603b      	str	r3, [r7, #0]
 800655e:	607a      	str	r2, [r7, #4]
 8006560:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006564:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006568:	f7fa fb7e 	bl	8000c68 <__aeabi_uldivmod>
 800656c:	4602      	mov	r2, r0
 800656e:	460b      	mov	r3, r1
 8006570:	4610      	mov	r0, r2
 8006572:	4619      	mov	r1, r3
 8006574:	f04f 0200 	mov.w	r2, #0
 8006578:	f04f 0300 	mov.w	r3, #0
 800657c:	020b      	lsls	r3, r1, #8
 800657e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006582:	0202      	lsls	r2, r0, #8
 8006584:	6979      	ldr	r1, [r7, #20]
 8006586:	6849      	ldr	r1, [r1, #4]
 8006588:	0849      	lsrs	r1, r1, #1
 800658a:	2000      	movs	r0, #0
 800658c:	460c      	mov	r4, r1
 800658e:	4605      	mov	r5, r0
 8006590:	eb12 0804 	adds.w	r8, r2, r4
 8006594:	eb43 0905 	adc.w	r9, r3, r5
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	469a      	mov	sl, r3
 80065a0:	4693      	mov	fp, r2
 80065a2:	4652      	mov	r2, sl
 80065a4:	465b      	mov	r3, fp
 80065a6:	4640      	mov	r0, r8
 80065a8:	4649      	mov	r1, r9
 80065aa:	f7fa fb5d 	bl	8000c68 <__aeabi_uldivmod>
 80065ae:	4602      	mov	r2, r0
 80065b0:	460b      	mov	r3, r1
 80065b2:	4613      	mov	r3, r2
 80065b4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80065b6:	6a3b      	ldr	r3, [r7, #32]
 80065b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065bc:	d308      	bcc.n	80065d0 <UART_SetConfig+0x430>
 80065be:	6a3b      	ldr	r3, [r7, #32]
 80065c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80065c4:	d204      	bcs.n	80065d0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	6a3a      	ldr	r2, [r7, #32]
 80065cc:	60da      	str	r2, [r3, #12]
 80065ce:	e0ce      	b.n	800676e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80065d6:	e0ca      	b.n	800676e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	69db      	ldr	r3, [r3, #28]
 80065dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065e0:	d166      	bne.n	80066b0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80065e2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80065e6:	2b08      	cmp	r3, #8
 80065e8:	d827      	bhi.n	800663a <UART_SetConfig+0x49a>
 80065ea:	a201      	add	r2, pc, #4	@ (adr r2, 80065f0 <UART_SetConfig+0x450>)
 80065ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f0:	08006615 	.word	0x08006615
 80065f4:	0800661d 	.word	0x0800661d
 80065f8:	08006625 	.word	0x08006625
 80065fc:	0800663b 	.word	0x0800663b
 8006600:	0800662b 	.word	0x0800662b
 8006604:	0800663b 	.word	0x0800663b
 8006608:	0800663b 	.word	0x0800663b
 800660c:	0800663b 	.word	0x0800663b
 8006610:	08006633 	.word	0x08006633
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006614:	f7fe fa54 	bl	8004ac0 <HAL_RCC_GetPCLK1Freq>
 8006618:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800661a:	e014      	b.n	8006646 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800661c:	f7fe fa66 	bl	8004aec <HAL_RCC_GetPCLK2Freq>
 8006620:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006622:	e010      	b.n	8006646 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006624:	4b4e      	ldr	r3, [pc, #312]	@ (8006760 <UART_SetConfig+0x5c0>)
 8006626:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006628:	e00d      	b.n	8006646 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800662a:	f7fe f9db 	bl	80049e4 <HAL_RCC_GetSysClockFreq>
 800662e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006630:	e009      	b.n	8006646 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006632:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006636:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006638:	e005      	b.n	8006646 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800663a:	2300      	movs	r3, #0
 800663c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006644:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006648:	2b00      	cmp	r3, #0
 800664a:	f000 8090 	beq.w	800676e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006652:	4a44      	ldr	r2, [pc, #272]	@ (8006764 <UART_SetConfig+0x5c4>)
 8006654:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006658:	461a      	mov	r2, r3
 800665a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800665c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006660:	005a      	lsls	r2, r3, #1
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	085b      	lsrs	r3, r3, #1
 8006668:	441a      	add	r2, r3
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006672:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006674:	6a3b      	ldr	r3, [r7, #32]
 8006676:	2b0f      	cmp	r3, #15
 8006678:	d916      	bls.n	80066a8 <UART_SetConfig+0x508>
 800667a:	6a3b      	ldr	r3, [r7, #32]
 800667c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006680:	d212      	bcs.n	80066a8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006682:	6a3b      	ldr	r3, [r7, #32]
 8006684:	b29b      	uxth	r3, r3
 8006686:	f023 030f 	bic.w	r3, r3, #15
 800668a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800668c:	6a3b      	ldr	r3, [r7, #32]
 800668e:	085b      	lsrs	r3, r3, #1
 8006690:	b29b      	uxth	r3, r3
 8006692:	f003 0307 	and.w	r3, r3, #7
 8006696:	b29a      	uxth	r2, r3
 8006698:	8bfb      	ldrh	r3, [r7, #30]
 800669a:	4313      	orrs	r3, r2
 800669c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	8bfa      	ldrh	r2, [r7, #30]
 80066a4:	60da      	str	r2, [r3, #12]
 80066a6:	e062      	b.n	800676e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80066ae:	e05e      	b.n	800676e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80066b0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80066b4:	2b08      	cmp	r3, #8
 80066b6:	d828      	bhi.n	800670a <UART_SetConfig+0x56a>
 80066b8:	a201      	add	r2, pc, #4	@ (adr r2, 80066c0 <UART_SetConfig+0x520>)
 80066ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066be:	bf00      	nop
 80066c0:	080066e5 	.word	0x080066e5
 80066c4:	080066ed 	.word	0x080066ed
 80066c8:	080066f5 	.word	0x080066f5
 80066cc:	0800670b 	.word	0x0800670b
 80066d0:	080066fb 	.word	0x080066fb
 80066d4:	0800670b 	.word	0x0800670b
 80066d8:	0800670b 	.word	0x0800670b
 80066dc:	0800670b 	.word	0x0800670b
 80066e0:	08006703 	.word	0x08006703
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066e4:	f7fe f9ec 	bl	8004ac0 <HAL_RCC_GetPCLK1Freq>
 80066e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80066ea:	e014      	b.n	8006716 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066ec:	f7fe f9fe 	bl	8004aec <HAL_RCC_GetPCLK2Freq>
 80066f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80066f2:	e010      	b.n	8006716 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066f4:	4b1a      	ldr	r3, [pc, #104]	@ (8006760 <UART_SetConfig+0x5c0>)
 80066f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80066f8:	e00d      	b.n	8006716 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066fa:	f7fe f973 	bl	80049e4 <HAL_RCC_GetSysClockFreq>
 80066fe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006700:	e009      	b.n	8006716 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006702:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006706:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006708:	e005      	b.n	8006716 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800670a:	2300      	movs	r3, #0
 800670c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006714:	bf00      	nop
    }

    if (pclk != 0U)
 8006716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006718:	2b00      	cmp	r3, #0
 800671a:	d028      	beq.n	800676e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006720:	4a10      	ldr	r2, [pc, #64]	@ (8006764 <UART_SetConfig+0x5c4>)
 8006722:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006726:	461a      	mov	r2, r3
 8006728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800672a:	fbb3 f2f2 	udiv	r2, r3, r2
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	085b      	lsrs	r3, r3, #1
 8006734:	441a      	add	r2, r3
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	fbb2 f3f3 	udiv	r3, r2, r3
 800673e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006740:	6a3b      	ldr	r3, [r7, #32]
 8006742:	2b0f      	cmp	r3, #15
 8006744:	d910      	bls.n	8006768 <UART_SetConfig+0x5c8>
 8006746:	6a3b      	ldr	r3, [r7, #32]
 8006748:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800674c:	d20c      	bcs.n	8006768 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800674e:	6a3b      	ldr	r3, [r7, #32]
 8006750:	b29a      	uxth	r2, r3
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	60da      	str	r2, [r3, #12]
 8006758:	e009      	b.n	800676e <UART_SetConfig+0x5ce>
 800675a:	bf00      	nop
 800675c:	40008000 	.word	0x40008000
 8006760:	00f42400 	.word	0x00f42400
 8006764:	0801a91c 	.word	0x0801a91c
      }
      else
      {
        ret = HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	2201      	movs	r2, #1
 8006772:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	2201      	movs	r2, #1
 800677a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	2200      	movs	r2, #0
 8006782:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	2200      	movs	r2, #0
 8006788:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800678a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800678e:	4618      	mov	r0, r3
 8006790:	3730      	adds	r7, #48	@ 0x30
 8006792:	46bd      	mov	sp, r7
 8006794:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006798 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067a4:	f003 0308 	and.w	r3, r3, #8
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d00a      	beq.n	80067c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	430a      	orrs	r2, r1
 80067c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067c6:	f003 0301 	and.w	r3, r3, #1
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00a      	beq.n	80067e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	430a      	orrs	r2, r1
 80067e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067e8:	f003 0302 	and.w	r3, r3, #2
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d00a      	beq.n	8006806 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	430a      	orrs	r2, r1
 8006804:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800680a:	f003 0304 	and.w	r3, r3, #4
 800680e:	2b00      	cmp	r3, #0
 8006810:	d00a      	beq.n	8006828 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	430a      	orrs	r2, r1
 8006826:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800682c:	f003 0310 	and.w	r3, r3, #16
 8006830:	2b00      	cmp	r3, #0
 8006832:	d00a      	beq.n	800684a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	430a      	orrs	r2, r1
 8006848:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800684e:	f003 0320 	and.w	r3, r3, #32
 8006852:	2b00      	cmp	r3, #0
 8006854:	d00a      	beq.n	800686c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	430a      	orrs	r2, r1
 800686a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006870:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006874:	2b00      	cmp	r3, #0
 8006876:	d01a      	beq.n	80068ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	430a      	orrs	r2, r1
 800688c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006892:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006896:	d10a      	bne.n	80068ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	430a      	orrs	r2, r1
 80068ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d00a      	beq.n	80068d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	430a      	orrs	r2, r1
 80068ce:	605a      	str	r2, [r3, #4]
  }
}
 80068d0:	bf00      	nop
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b098      	sub	sp, #96	@ 0x60
 80068e0:	af02      	add	r7, sp, #8
 80068e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80068ec:	f7fb ff6e 	bl	80027cc <HAL_GetTick>
 80068f0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f003 0308 	and.w	r3, r3, #8
 80068fc:	2b08      	cmp	r3, #8
 80068fe:	d12f      	bne.n	8006960 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006900:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006904:	9300      	str	r3, [sp, #0]
 8006906:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006908:	2200      	movs	r2, #0
 800690a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 f88e 	bl	8006a30 <UART_WaitOnFlagUntilTimeout>
 8006914:	4603      	mov	r3, r0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d022      	beq.n	8006960 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006922:	e853 3f00 	ldrex	r3, [r3]
 8006926:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800692a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800692e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	461a      	mov	r2, r3
 8006936:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006938:	647b      	str	r3, [r7, #68]	@ 0x44
 800693a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800693e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006940:	e841 2300 	strex	r3, r2, [r1]
 8006944:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006946:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006948:	2b00      	cmp	r3, #0
 800694a:	d1e6      	bne.n	800691a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2220      	movs	r2, #32
 8006950:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800695c:	2303      	movs	r3, #3
 800695e:	e063      	b.n	8006a28 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 0304 	and.w	r3, r3, #4
 800696a:	2b04      	cmp	r3, #4
 800696c:	d149      	bne.n	8006a02 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800696e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006972:	9300      	str	r3, [sp, #0]
 8006974:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006976:	2200      	movs	r2, #0
 8006978:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 f857 	bl	8006a30 <UART_WaitOnFlagUntilTimeout>
 8006982:	4603      	mov	r3, r0
 8006984:	2b00      	cmp	r3, #0
 8006986:	d03c      	beq.n	8006a02 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006990:	e853 3f00 	ldrex	r3, [r3]
 8006994:	623b      	str	r3, [r7, #32]
   return(result);
 8006996:	6a3b      	ldr	r3, [r7, #32]
 8006998:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800699c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	461a      	mov	r2, r3
 80069a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80069a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069ae:	e841 2300 	strex	r3, r2, [r1]
 80069b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80069b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d1e6      	bne.n	8006988 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	3308      	adds	r3, #8
 80069c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	e853 3f00 	ldrex	r3, [r3]
 80069c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f023 0301 	bic.w	r3, r3, #1
 80069d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	3308      	adds	r3, #8
 80069d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069da:	61fa      	str	r2, [r7, #28]
 80069dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069de:	69b9      	ldr	r1, [r7, #24]
 80069e0:	69fa      	ldr	r2, [r7, #28]
 80069e2:	e841 2300 	strex	r3, r2, [r1]
 80069e6:	617b      	str	r3, [r7, #20]
   return(result);
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d1e5      	bne.n	80069ba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2220      	movs	r2, #32
 80069f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069fe:	2303      	movs	r3, #3
 8006a00:	e012      	b.n	8006a28 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2220      	movs	r2, #32
 8006a06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2220      	movs	r2, #32
 8006a0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006a26:	2300      	movs	r3, #0
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3758      	adds	r7, #88	@ 0x58
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	603b      	str	r3, [r7, #0]
 8006a3c:	4613      	mov	r3, r2
 8006a3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a40:	e04f      	b.n	8006ae2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a48:	d04b      	beq.n	8006ae2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a4a:	f7fb febf 	bl	80027cc <HAL_GetTick>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	1ad3      	subs	r3, r2, r3
 8006a54:	69ba      	ldr	r2, [r7, #24]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d302      	bcc.n	8006a60 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a5a:	69bb      	ldr	r3, [r7, #24]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d101      	bne.n	8006a64 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006a60:	2303      	movs	r3, #3
 8006a62:	e04e      	b.n	8006b02 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 0304 	and.w	r3, r3, #4
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d037      	beq.n	8006ae2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	2b80      	cmp	r3, #128	@ 0x80
 8006a76:	d034      	beq.n	8006ae2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	2b40      	cmp	r3, #64	@ 0x40
 8006a7c:	d031      	beq.n	8006ae2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	69db      	ldr	r3, [r3, #28]
 8006a84:	f003 0308 	and.w	r3, r3, #8
 8006a88:	2b08      	cmp	r3, #8
 8006a8a:	d110      	bne.n	8006aae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2208      	movs	r2, #8
 8006a92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a94:	68f8      	ldr	r0, [r7, #12]
 8006a96:	f000 f920 	bl	8006cda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2208      	movs	r2, #8
 8006a9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e029      	b.n	8006b02 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	69db      	ldr	r3, [r3, #28]
 8006ab4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ab8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006abc:	d111      	bne.n	8006ae2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006ac6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ac8:	68f8      	ldr	r0, [r7, #12]
 8006aca:	f000 f906 	bl	8006cda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2220      	movs	r2, #32
 8006ad2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006ade:	2303      	movs	r3, #3
 8006ae0:	e00f      	b.n	8006b02 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	69da      	ldr	r2, [r3, #28]
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	4013      	ands	r3, r2
 8006aec:	68ba      	ldr	r2, [r7, #8]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	bf0c      	ite	eq
 8006af2:	2301      	moveq	r3, #1
 8006af4:	2300      	movne	r3, #0
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	461a      	mov	r2, r3
 8006afa:	79fb      	ldrb	r3, [r7, #7]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d0a0      	beq.n	8006a42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3710      	adds	r7, #16
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
	...

08006b0c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b096      	sub	sp, #88	@ 0x58
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	4613      	mov	r3, r2
 8006b18:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	68ba      	ldr	r2, [r7, #8]
 8006b1e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	88fa      	ldrh	r2, [r7, #6]
 8006b24:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2222      	movs	r2, #34	@ 0x22
 8006b34:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d02d      	beq.n	8006b9e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b48:	4a40      	ldr	r2, [pc, #256]	@ (8006c4c <UART_Start_Receive_DMA+0x140>)
 8006b4a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b52:	4a3f      	ldr	r2, [pc, #252]	@ (8006c50 <UART_Start_Receive_DMA+0x144>)
 8006b54:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b5c:	4a3d      	ldr	r2, [pc, #244]	@ (8006c54 <UART_Start_Receive_DMA+0x148>)
 8006b5e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b66:	2200      	movs	r2, #0
 8006b68:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	3324      	adds	r3, #36	@ 0x24
 8006b76:	4619      	mov	r1, r3
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	88fb      	ldrh	r3, [r7, #6]
 8006b80:	f7fb ffb8 	bl	8002af4 <HAL_DMA_Start_IT>
 8006b84:	4603      	mov	r3, r0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d009      	beq.n	8006b9e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2210      	movs	r2, #16
 8006b8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2220      	movs	r2, #32
 8006b96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e051      	b.n	8006c42 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d018      	beq.n	8006bd8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bae:	e853 3f00 	ldrex	r3, [r3]
 8006bb2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006bb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006bba:	657b      	str	r3, [r7, #84]	@ 0x54
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006bc4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bc6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006bca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006bcc:	e841 2300 	strex	r3, r2, [r1]
 8006bd0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006bd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d1e6      	bne.n	8006ba6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	3308      	adds	r3, #8
 8006bde:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006be2:	e853 3f00 	ldrex	r3, [r3]
 8006be6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bea:	f043 0301 	orr.w	r3, r3, #1
 8006bee:	653b      	str	r3, [r7, #80]	@ 0x50
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	3308      	adds	r3, #8
 8006bf6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006bf8:	637a      	str	r2, [r7, #52]	@ 0x34
 8006bfa:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bfc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006bfe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006c00:	e841 2300 	strex	r3, r2, [r1]
 8006c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006c06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d1e5      	bne.n	8006bd8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	3308      	adds	r3, #8
 8006c12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	e853 3f00 	ldrex	r3, [r3]
 8006c1a:	613b      	str	r3, [r7, #16]
   return(result);
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	3308      	adds	r3, #8
 8006c2a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006c2c:	623a      	str	r2, [r7, #32]
 8006c2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c30:	69f9      	ldr	r1, [r7, #28]
 8006c32:	6a3a      	ldr	r2, [r7, #32]
 8006c34:	e841 2300 	strex	r3, r2, [r1]
 8006c38:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d1e5      	bne.n	8006c0c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8006c40:	2300      	movs	r3, #0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3758      	adds	r7, #88	@ 0x58
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	08006e5d 	.word	0x08006e5d
 8006c50:	08006f89 	.word	0x08006f89
 8006c54:	08006fc7 	.word	0x08006fc7

08006c58 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b08f      	sub	sp, #60	@ 0x3c
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c66:	6a3b      	ldr	r3, [r7, #32]
 8006c68:	e853 3f00 	ldrex	r3, [r3]
 8006c6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006c74:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c80:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c86:	e841 2300 	strex	r3, r2, [r1]
 8006c8a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d1e6      	bne.n	8006c60 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	3308      	adds	r3, #8
 8006c98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	e853 3f00 	ldrex	r3, [r3]
 8006ca0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006ca8:	633b      	str	r3, [r7, #48]	@ 0x30
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	3308      	adds	r3, #8
 8006cb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cb2:	61ba      	str	r2, [r7, #24]
 8006cb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb6:	6979      	ldr	r1, [r7, #20]
 8006cb8:	69ba      	ldr	r2, [r7, #24]
 8006cba:	e841 2300 	strex	r3, r2, [r1]
 8006cbe:	613b      	str	r3, [r7, #16]
   return(result);
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d1e5      	bne.n	8006c92 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2220      	movs	r2, #32
 8006cca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8006cce:	bf00      	nop
 8006cd0:	373c      	adds	r7, #60	@ 0x3c
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr

08006cda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006cda:	b480      	push	{r7}
 8006cdc:	b095      	sub	sp, #84	@ 0x54
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cea:	e853 3f00 	ldrex	r3, [r3]
 8006cee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006cf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d00:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d02:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d04:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006d06:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006d08:	e841 2300 	strex	r3, r2, [r1]
 8006d0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d1e6      	bne.n	8006ce2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	3308      	adds	r3, #8
 8006d1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d1c:	6a3b      	ldr	r3, [r7, #32]
 8006d1e:	e853 3f00 	ldrex	r3, [r3]
 8006d22:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d2a:	f023 0301 	bic.w	r3, r3, #1
 8006d2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	3308      	adds	r3, #8
 8006d36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d38:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d40:	e841 2300 	strex	r3, r2, [r1]
 8006d44:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d1e3      	bne.n	8006d14 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d118      	bne.n	8006d86 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	e853 3f00 	ldrex	r3, [r3]
 8006d60:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	f023 0310 	bic.w	r3, r3, #16
 8006d68:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	461a      	mov	r2, r3
 8006d70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d72:	61bb      	str	r3, [r7, #24]
 8006d74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d76:	6979      	ldr	r1, [r7, #20]
 8006d78:	69ba      	ldr	r2, [r7, #24]
 8006d7a:	e841 2300 	strex	r3, r2, [r1]
 8006d7e:	613b      	str	r3, [r7, #16]
   return(result);
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d1e6      	bne.n	8006d54 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2220      	movs	r2, #32
 8006d8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006d9a:	bf00      	nop
 8006d9c:	3754      	adds	r7, #84	@ 0x54
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr

08006da6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006da6:	b580      	push	{r7, lr}
 8006da8:	b090      	sub	sp, #64	@ 0x40
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006db2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f003 0320 	and.w	r3, r3, #32
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d137      	bne.n	8006e32 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8006dc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006dca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	3308      	adds	r3, #8
 8006dd0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd4:	e853 3f00 	ldrex	r3, [r3]
 8006dd8:	623b      	str	r3, [r7, #32]
   return(result);
 8006dda:	6a3b      	ldr	r3, [r7, #32]
 8006ddc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006de0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006de2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	3308      	adds	r3, #8
 8006de8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006dea:	633a      	str	r2, [r7, #48]	@ 0x30
 8006dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006df0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006df2:	e841 2300 	strex	r3, r2, [r1]
 8006df6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d1e5      	bne.n	8006dca <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006dfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	e853 3f00 	ldrex	r3, [r3]
 8006e0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e12:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	461a      	mov	r2, r3
 8006e1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e1c:	61fb      	str	r3, [r7, #28]
 8006e1e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e20:	69b9      	ldr	r1, [r7, #24]
 8006e22:	69fa      	ldr	r2, [r7, #28]
 8006e24:	e841 2300 	strex	r3, r2, [r1]
 8006e28:	617b      	str	r3, [r7, #20]
   return(result);
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d1e6      	bne.n	8006dfe <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006e30:	e002      	b.n	8006e38 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006e32:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006e34:	f7ff f976 	bl	8006124 <HAL_UART_TxCpltCallback>
}
 8006e38:	bf00      	nop
 8006e3a:	3740      	adds	r7, #64	@ 0x40
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e4c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006e4e:	68f8      	ldr	r0, [r7, #12]
 8006e50:	f7ff f972 	bl	8006138 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e54:	bf00      	nop
 8006e56:	3710      	adds	r7, #16
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b09c      	sub	sp, #112	@ 0x70
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e68:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f003 0320 	and.w	r3, r3, #32
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d171      	bne.n	8006f5c <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8006e78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e88:	e853 3f00 	ldrex	r3, [r3]
 8006e8c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006e8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006e9e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ea0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006ea4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006ea6:	e841 2300 	strex	r3, r2, [r1]
 8006eaa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006eac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d1e6      	bne.n	8006e80 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	3308      	adds	r3, #8
 8006eb8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ebc:	e853 3f00 	ldrex	r3, [r3]
 8006ec0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ec2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ec4:	f023 0301 	bic.w	r3, r3, #1
 8006ec8:	667b      	str	r3, [r7, #100]	@ 0x64
 8006eca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	3308      	adds	r3, #8
 8006ed0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006ed2:	647a      	str	r2, [r7, #68]	@ 0x44
 8006ed4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ed8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006eda:	e841 2300 	strex	r3, r2, [r1]
 8006ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ee0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1e5      	bne.n	8006eb2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ee6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	3308      	adds	r3, #8
 8006eec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef0:	e853 3f00 	ldrex	r3, [r3]
 8006ef4:	623b      	str	r3, [r7, #32]
   return(result);
 8006ef6:	6a3b      	ldr	r3, [r7, #32]
 8006ef8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006efc:	663b      	str	r3, [r7, #96]	@ 0x60
 8006efe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	3308      	adds	r3, #8
 8006f04:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006f06:	633a      	str	r2, [r7, #48]	@ 0x30
 8006f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f0e:	e841 2300 	strex	r3, r2, [r1]
 8006f12:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d1e5      	bne.n	8006ee6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006f1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f1c:	2220      	movs	r2, #32
 8006f1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d118      	bne.n	8006f5c <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	e853 3f00 	ldrex	r3, [r3]
 8006f36:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f023 0310 	bic.w	r3, r3, #16
 8006f3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	461a      	mov	r2, r3
 8006f46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f48:	61fb      	str	r3, [r7, #28]
 8006f4a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4c:	69b9      	ldr	r1, [r7, #24]
 8006f4e:	69fa      	ldr	r2, [r7, #28]
 8006f50:	e841 2300 	strex	r3, r2, [r1]
 8006f54:	617b      	str	r3, [r7, #20]
   return(result);
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d1e6      	bne.n	8006f2a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f5e:	2200      	movs	r2, #0
 8006f60:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d107      	bne.n	8006f7a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006f70:	4619      	mov	r1, r3
 8006f72:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006f74:	f7ff f908 	bl	8006188 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006f78:	e002      	b.n	8006f80 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006f7a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006f7c:	f7ff f8e6 	bl	800614c <HAL_UART_RxCpltCallback>
}
 8006f80:	bf00      	nop
 8006f82:	3770      	adds	r7, #112	@ 0x70
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f94:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d109      	bne.n	8006fb8 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006faa:	085b      	lsrs	r3, r3, #1
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	4619      	mov	r1, r3
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f7ff f8e9 	bl	8006188 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006fb6:	e002      	b.n	8006fbe <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8006fb8:	68f8      	ldr	r0, [r7, #12]
 8006fba:	f7ff f8d1 	bl	8006160 <HAL_UART_RxHalfCpltCallback>
}
 8006fbe:	bf00      	nop
 8006fc0:	3710      	adds	r7, #16
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}

08006fc6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006fc6:	b580      	push	{r7, lr}
 8006fc8:	b086      	sub	sp, #24
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fd2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fda:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006fe2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fee:	2b80      	cmp	r3, #128	@ 0x80
 8006ff0:	d109      	bne.n	8007006 <UART_DMAError+0x40>
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	2b21      	cmp	r3, #33	@ 0x21
 8006ff6:	d106      	bne.n	8007006 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8007000:	6978      	ldr	r0, [r7, #20]
 8007002:	f7ff fe29 	bl	8006c58 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007010:	2b40      	cmp	r3, #64	@ 0x40
 8007012:	d109      	bne.n	8007028 <UART_DMAError+0x62>
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2b22      	cmp	r3, #34	@ 0x22
 8007018:	d106      	bne.n	8007028 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	2200      	movs	r2, #0
 800701e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8007022:	6978      	ldr	r0, [r7, #20]
 8007024:	f7ff fe59 	bl	8006cda <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800702e:	f043 0210 	orr.w	r2, r3, #16
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007038:	6978      	ldr	r0, [r7, #20]
 800703a:	f7ff f89b 	bl	8006174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800703e:	bf00      	nop
 8007040:	3718      	adds	r7, #24
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}

08007046 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007046:	b580      	push	{r7, lr}
 8007048:	b084      	sub	sp, #16
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007052:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2200      	movs	r2, #0
 8007058:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800705c:	68f8      	ldr	r0, [r7, #12]
 800705e:	f7ff f889 	bl	8006174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007062:	bf00      	nop
 8007064:	3710      	adds	r7, #16
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}

0800706a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800706a:	b580      	push	{r7, lr}
 800706c:	b088      	sub	sp, #32
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	e853 3f00 	ldrex	r3, [r3]
 800707e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007086:	61fb      	str	r3, [r7, #28]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	461a      	mov	r2, r3
 800708e:	69fb      	ldr	r3, [r7, #28]
 8007090:	61bb      	str	r3, [r7, #24]
 8007092:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007094:	6979      	ldr	r1, [r7, #20]
 8007096:	69ba      	ldr	r2, [r7, #24]
 8007098:	e841 2300 	strex	r3, r2, [r1]
 800709c:	613b      	str	r3, [r7, #16]
   return(result);
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d1e6      	bne.n	8007072 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2220      	movs	r2, #32
 80070a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f7ff f836 	bl	8006124 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070b8:	bf00      	nop
 80070ba:	3720      	adds	r7, #32
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80070c8:	bf00      	nop
 80070ca:	370c      	adds	r7, #12
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80070dc:	bf00      	nop
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80070f0:	bf00      	nop
 80070f2:	370c      	adds	r7, #12
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b085      	sub	sp, #20
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800710a:	2b01      	cmp	r3, #1
 800710c:	d101      	bne.n	8007112 <HAL_UARTEx_DisableFifoMode+0x16>
 800710e:	2302      	movs	r3, #2
 8007110:	e027      	b.n	8007162 <HAL_UARTEx_DisableFifoMode+0x66>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2201      	movs	r2, #1
 8007116:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2224      	movs	r2, #36	@ 0x24
 800711e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f022 0201 	bic.w	r2, r2, #1
 8007138:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007140:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	68fa      	ldr	r2, [r7, #12]
 800714e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2220      	movs	r2, #32
 8007154:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3714      	adds	r7, #20
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr

0800716e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800716e:	b580      	push	{r7, lr}
 8007170:	b084      	sub	sp, #16
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
 8007176:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800717e:	2b01      	cmp	r3, #1
 8007180:	d101      	bne.n	8007186 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007182:	2302      	movs	r3, #2
 8007184:	e02d      	b.n	80071e2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2201      	movs	r2, #1
 800718a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2224      	movs	r2, #36	@ 0x24
 8007192:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f022 0201 	bic.w	r2, r2, #1
 80071ac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	683a      	ldr	r2, [r7, #0]
 80071be:	430a      	orrs	r2, r1
 80071c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 f850 	bl	8007268 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2220      	movs	r2, #32
 80071d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3710      	adds	r7, #16
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}

080071ea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80071ea:	b580      	push	{r7, lr}
 80071ec:	b084      	sub	sp, #16
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
 80071f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d101      	bne.n	8007202 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80071fe:	2302      	movs	r3, #2
 8007200:	e02d      	b.n	800725e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2201      	movs	r2, #1
 8007206:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2224      	movs	r2, #36	@ 0x24
 800720e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f022 0201 	bic.w	r2, r2, #1
 8007228:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	683a      	ldr	r2, [r7, #0]
 800723a:	430a      	orrs	r2, r1
 800723c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 f812 	bl	8007268 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	68fa      	ldr	r2, [r7, #12]
 800724a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2220      	movs	r2, #32
 8007250:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800725c:	2300      	movs	r3, #0
}
 800725e:	4618      	mov	r0, r3
 8007260:	3710      	adds	r7, #16
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
	...

08007268 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007268:	b480      	push	{r7}
 800726a:	b085      	sub	sp, #20
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007274:	2b00      	cmp	r3, #0
 8007276:	d108      	bne.n	800728a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2201      	movs	r2, #1
 800727c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2201      	movs	r2, #1
 8007284:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007288:	e031      	b.n	80072ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800728a:	2308      	movs	r3, #8
 800728c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800728e:	2308      	movs	r3, #8
 8007290:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	0e5b      	lsrs	r3, r3, #25
 800729a:	b2db      	uxtb	r3, r3
 800729c:	f003 0307 	and.w	r3, r3, #7
 80072a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	0f5b      	lsrs	r3, r3, #29
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	f003 0307 	and.w	r3, r3, #7
 80072b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072b2:	7bbb      	ldrb	r3, [r7, #14]
 80072b4:	7b3a      	ldrb	r2, [r7, #12]
 80072b6:	4911      	ldr	r1, [pc, #68]	@ (80072fc <UARTEx_SetNbDataToProcess+0x94>)
 80072b8:	5c8a      	ldrb	r2, [r1, r2]
 80072ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80072be:	7b3a      	ldrb	r2, [r7, #12]
 80072c0:	490f      	ldr	r1, [pc, #60]	@ (8007300 <UARTEx_SetNbDataToProcess+0x98>)
 80072c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80072c8:	b29a      	uxth	r2, r3
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80072d0:	7bfb      	ldrb	r3, [r7, #15]
 80072d2:	7b7a      	ldrb	r2, [r7, #13]
 80072d4:	4909      	ldr	r1, [pc, #36]	@ (80072fc <UARTEx_SetNbDataToProcess+0x94>)
 80072d6:	5c8a      	ldrb	r2, [r1, r2]
 80072d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80072dc:	7b7a      	ldrb	r2, [r7, #13]
 80072de:	4908      	ldr	r1, [pc, #32]	@ (8007300 <UARTEx_SetNbDataToProcess+0x98>)
 80072e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80072e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80072e6:	b29a      	uxth	r2, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80072ee:	bf00      	nop
 80072f0:	3714      	adds	r7, #20
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr
 80072fa:	bf00      	nop
 80072fc:	0801a934 	.word	0x0801a934
 8007300:	0801a93c 	.word	0x0801a93c

08007304 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b088      	sub	sp, #32
 8007308:	af04      	add	r7, sp, #16
 800730a:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 800730c:	2364      	movs	r3, #100	@ 0x64
 800730e:	9302      	str	r3, [sp, #8]
 8007310:	2301      	movs	r3, #1
 8007312:	9301      	str	r3, [sp, #4]
 8007314:	f107 030f 	add.w	r3, r7, #15
 8007318:	9300      	str	r3, [sp, #0]
 800731a:	2301      	movs	r3, #1
 800731c:	2275      	movs	r2, #117	@ 0x75
 800731e:	21d0      	movs	r1, #208	@ 0xd0
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f7fc f9e9 	bl	80036f8 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8007326:	7bfb      	ldrb	r3, [r7, #15]
 8007328:	2b68      	cmp	r3, #104	@ 0x68
 800732a:	d13d      	bne.n	80073a8 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 800732c:	2300      	movs	r3, #0
 800732e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8007330:	2364      	movs	r3, #100	@ 0x64
 8007332:	9302      	str	r3, [sp, #8]
 8007334:	2301      	movs	r3, #1
 8007336:	9301      	str	r3, [sp, #4]
 8007338:	f107 030e 	add.w	r3, r7, #14
 800733c:	9300      	str	r3, [sp, #0]
 800733e:	2301      	movs	r3, #1
 8007340:	226b      	movs	r2, #107	@ 0x6b
 8007342:	21d0      	movs	r1, #208	@ 0xd0
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f7fc f8c3 	bl	80034d0 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 800734a:	2307      	movs	r3, #7
 800734c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 800734e:	2364      	movs	r3, #100	@ 0x64
 8007350:	9302      	str	r3, [sp, #8]
 8007352:	2301      	movs	r3, #1
 8007354:	9301      	str	r3, [sp, #4]
 8007356:	f107 030e 	add.w	r3, r7, #14
 800735a:	9300      	str	r3, [sp, #0]
 800735c:	2301      	movs	r3, #1
 800735e:	2219      	movs	r2, #25
 8007360:	21d0      	movs	r1, #208	@ 0xd0
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f7fc f8b4 	bl	80034d0 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8007368:	2300      	movs	r3, #0
 800736a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800736c:	2364      	movs	r3, #100	@ 0x64
 800736e:	9302      	str	r3, [sp, #8]
 8007370:	2301      	movs	r3, #1
 8007372:	9301      	str	r3, [sp, #4]
 8007374:	f107 030e 	add.w	r3, r7, #14
 8007378:	9300      	str	r3, [sp, #0]
 800737a:	2301      	movs	r3, #1
 800737c:	221c      	movs	r2, #28
 800737e:	21d0      	movs	r1, #208	@ 0xd0
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f7fc f8a5 	bl	80034d0 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8007386:	2300      	movs	r3, #0
 8007388:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800738a:	2364      	movs	r3, #100	@ 0x64
 800738c:	9302      	str	r3, [sp, #8]
 800738e:	2301      	movs	r3, #1
 8007390:	9301      	str	r3, [sp, #4]
 8007392:	f107 030e 	add.w	r3, r7, #14
 8007396:	9300      	str	r3, [sp, #0]
 8007398:	2301      	movs	r3, #1
 800739a:	221b      	movs	r2, #27
 800739c:	21d0      	movs	r1, #208	@ 0xd0
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f7fc f896 	bl	80034d0 <HAL_I2C_Mem_Write>
        return 0;
 80073a4:	2300      	movs	r3, #0
 80073a6:	e000      	b.n	80073aa <MPU6050_Init+0xa6>
    }
    return 1;
 80073a8:	2301      	movs	r3, #1
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3710      	adds	r7, #16
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	0000      	movs	r0, r0
 80073b4:	0000      	movs	r0, r0
	...

080073b8 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 80073b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073bc:	b094      	sub	sp, #80	@ 0x50
 80073be:	af04      	add	r7, sp, #16
 80073c0:	6078      	str	r0, [r7, #4]
 80073c2:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 80073c4:	2364      	movs	r3, #100	@ 0x64
 80073c6:	9302      	str	r3, [sp, #8]
 80073c8:	230e      	movs	r3, #14
 80073ca:	9301      	str	r3, [sp, #4]
 80073cc:	f107 0308 	add.w	r3, r7, #8
 80073d0:	9300      	str	r3, [sp, #0]
 80073d2:	2301      	movs	r3, #1
 80073d4:	223b      	movs	r2, #59	@ 0x3b
 80073d6:	21d0      	movs	r1, #208	@ 0xd0
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f7fc f98d 	bl	80036f8 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 80073de:	7a3b      	ldrb	r3, [r7, #8]
 80073e0:	021b      	lsls	r3, r3, #8
 80073e2:	b21a      	sxth	r2, r3
 80073e4:	7a7b      	ldrb	r3, [r7, #9]
 80073e6:	b21b      	sxth	r3, r3
 80073e8:	4313      	orrs	r3, r2
 80073ea:	b21a      	sxth	r2, r3
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 80073f0:	7abb      	ldrb	r3, [r7, #10]
 80073f2:	021b      	lsls	r3, r3, #8
 80073f4:	b21a      	sxth	r2, r3
 80073f6:	7afb      	ldrb	r3, [r7, #11]
 80073f8:	b21b      	sxth	r3, r3
 80073fa:	4313      	orrs	r3, r2
 80073fc:	b21a      	sxth	r2, r3
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8007402:	7b3b      	ldrb	r3, [r7, #12]
 8007404:	021b      	lsls	r3, r3, #8
 8007406:	b21a      	sxth	r2, r3
 8007408:	7b7b      	ldrb	r3, [r7, #13]
 800740a:	b21b      	sxth	r3, r3
 800740c:	4313      	orrs	r3, r2
 800740e:	b21a      	sxth	r2, r3
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8007414:	7bbb      	ldrb	r3, [r7, #14]
 8007416:	021b      	lsls	r3, r3, #8
 8007418:	b21a      	sxth	r2, r3
 800741a:	7bfb      	ldrb	r3, [r7, #15]
 800741c:	b21b      	sxth	r3, r3
 800741e:	4313      	orrs	r3, r2
 8007420:	86fb      	strh	r3, [r7, #54]	@ 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8007422:	7c3b      	ldrb	r3, [r7, #16]
 8007424:	021b      	lsls	r3, r3, #8
 8007426:	b21a      	sxth	r2, r3
 8007428:	7c7b      	ldrb	r3, [r7, #17]
 800742a:	b21b      	sxth	r3, r3
 800742c:	4313      	orrs	r3, r2
 800742e:	b21a      	sxth	r2, r3
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8007434:	7cbb      	ldrb	r3, [r7, #18]
 8007436:	021b      	lsls	r3, r3, #8
 8007438:	b21a      	sxth	r2, r3
 800743a:	7cfb      	ldrb	r3, [r7, #19]
 800743c:	b21b      	sxth	r3, r3
 800743e:	4313      	orrs	r3, r2
 8007440:	b21a      	sxth	r2, r3
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8007446:	7d3b      	ldrb	r3, [r7, #20]
 8007448:	021b      	lsls	r3, r3, #8
 800744a:	b21a      	sxth	r2, r3
 800744c:	7d7b      	ldrb	r3, [r7, #21]
 800744e:	b21b      	sxth	r3, r3
 8007450:	4313      	orrs	r3, r2
 8007452:	b21a      	sxth	r2, r3
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	849a      	strh	r2, [r3, #36]	@ 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800745e:	4618      	mov	r0, r3
 8007460:	f7f9 f898 	bl	8000594 <__aeabi_i2d>
 8007464:	f04f 0200 	mov.w	r2, #0
 8007468:	4bbd      	ldr	r3, [pc, #756]	@ (8007760 <MPU6050_Read_All+0x3a8>)
 800746a:	f7f9 fa27 	bl	80008bc <__aeabi_ddiv>
 800746e:	4602      	mov	r2, r0
 8007470:	460b      	mov	r3, r1
 8007472:	6839      	ldr	r1, [r7, #0]
 8007474:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800747e:	4618      	mov	r0, r3
 8007480:	f7f9 f888 	bl	8000594 <__aeabi_i2d>
 8007484:	f04f 0200 	mov.w	r2, #0
 8007488:	4bb5      	ldr	r3, [pc, #724]	@ (8007760 <MPU6050_Read_All+0x3a8>)
 800748a:	f7f9 fa17 	bl	80008bc <__aeabi_ddiv>
 800748e:	4602      	mov	r2, r0
 8007490:	460b      	mov	r3, r1
 8007492:	6839      	ldr	r1, [r7, #0]
 8007494:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800749e:	4618      	mov	r0, r3
 80074a0:	f7f9 f878 	bl	8000594 <__aeabi_i2d>
 80074a4:	a3a8      	add	r3, pc, #672	@ (adr r3, 8007748 <MPU6050_Read_All+0x390>)
 80074a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074aa:	f7f9 fa07 	bl	80008bc <__aeabi_ddiv>
 80074ae:	4602      	mov	r2, r0
 80074b0:	460b      	mov	r3, r1
 80074b2:	6839      	ldr	r1, [r7, #0]
 80074b4:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 80074b8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80074bc:	ee07 3a90 	vmov	s15, r3
 80074c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80074c4:	eddf 6aa7 	vldr	s13, [pc, #668]	@ 8007764 <MPU6050_Read_All+0x3ac>
 80074c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80074cc:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 8007768 <MPU6050_Read_All+0x3b0>
 80074d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7f9 f857 	bl	8000594 <__aeabi_i2d>
 80074e6:	a39a      	add	r3, pc, #616	@ (adr r3, 8007750 <MPU6050_Read_All+0x398>)
 80074e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ec:	f7f9 f9e6 	bl	80008bc <__aeabi_ddiv>
 80074f0:	4602      	mov	r2, r0
 80074f2:	460b      	mov	r3, r1
 80074f4:	6839      	ldr	r1, [r7, #0]
 80074f6:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8007500:	4618      	mov	r0, r3
 8007502:	f7f9 f847 	bl	8000594 <__aeabi_i2d>
 8007506:	a392      	add	r3, pc, #584	@ (adr r3, 8007750 <MPU6050_Read_All+0x398>)
 8007508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800750c:	f7f9 f9d6 	bl	80008bc <__aeabi_ddiv>
 8007510:	4602      	mov	r2, r0
 8007512:	460b      	mov	r3, r1
 8007514:	6839      	ldr	r1, [r7, #0]
 8007516:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8007520:	4618      	mov	r0, r3
 8007522:	f7f9 f837 	bl	8000594 <__aeabi_i2d>
 8007526:	a38a      	add	r3, pc, #552	@ (adr r3, 8007750 <MPU6050_Read_All+0x398>)
 8007528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800752c:	f7f9 f9c6 	bl	80008bc <__aeabi_ddiv>
 8007530:	4602      	mov	r2, r0
 8007532:	460b      	mov	r3, r1
 8007534:	6839      	ldr	r1, [r7, #0]
 8007536:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 800753a:	f7fb f947 	bl	80027cc <HAL_GetTick>
 800753e:	4602      	mov	r2, r0
 8007540:	4b8a      	ldr	r3, [pc, #552]	@ (800776c <MPU6050_Read_All+0x3b4>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	1ad3      	subs	r3, r2, r3
 8007546:	4618      	mov	r0, r3
 8007548:	f7f9 f814 	bl	8000574 <__aeabi_ui2d>
 800754c:	f04f 0200 	mov.w	r2, #0
 8007550:	4b87      	ldr	r3, [pc, #540]	@ (8007770 <MPU6050_Read_All+0x3b8>)
 8007552:	f7f9 f9b3 	bl	80008bc <__aeabi_ddiv>
 8007556:	4602      	mov	r2, r0
 8007558:	460b      	mov	r3, r1
 800755a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    timer = HAL_GetTick();
 800755e:	f7fb f935 	bl	80027cc <HAL_GetTick>
 8007562:	4603      	mov	r3, r0
 8007564:	4a81      	ldr	r2, [pc, #516]	@ (800776c <MPU6050_Read_All+0x3b4>)
 8007566:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800756e:	461a      	mov	r2, r3
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007576:	fb03 f202 	mul.w	r2, r3, r2
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007580:	4619      	mov	r1, r3
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007588:	fb01 f303 	mul.w	r3, r1, r3
 800758c:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 800758e:	4618      	mov	r0, r3
 8007590:	f7f9 f800 	bl	8000594 <__aeabi_i2d>
 8007594:	4602      	mov	r2, r0
 8007596:	460b      	mov	r3, r1
 8007598:	ec43 2b10 	vmov	d0, r2, r3
 800759c:	f012 fdc4 	bl	801a128 <sqrt>
 80075a0:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 80075a4:	f04f 0200 	mov.w	r2, #0
 80075a8:	f04f 0300 	mov.w	r3, #0
 80075ac:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80075b0:	f7f9 fac2 	bl	8000b38 <__aeabi_dcmpeq>
 80075b4:	4603      	mov	r3, r0
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d11f      	bne.n	80075fa <MPU6050_Read_All+0x242>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80075c0:	4618      	mov	r0, r3
 80075c2:	f7f8 ffe7 	bl	8000594 <__aeabi_i2d>
 80075c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80075ca:	f7f9 f977 	bl	80008bc <__aeabi_ddiv>
 80075ce:	4602      	mov	r2, r0
 80075d0:	460b      	mov	r3, r1
 80075d2:	ec43 2b17 	vmov	d7, r2, r3
 80075d6:	eeb0 0a47 	vmov.f32	s0, s14
 80075da:	eef0 0a67 	vmov.f32	s1, s15
 80075de:	f012 fdcf 	bl	801a180 <atan>
 80075e2:	ec51 0b10 	vmov	r0, r1, d0
 80075e6:	a35c      	add	r3, pc, #368	@ (adr r3, 8007758 <MPU6050_Read_All+0x3a0>)
 80075e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ec:	f7f9 f83c 	bl	8000668 <__aeabi_dmul>
 80075f0:	4602      	mov	r2, r0
 80075f2:	460b      	mov	r3, r1
 80075f4:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 80075f8:	e005      	b.n	8007606 <MPU6050_Read_All+0x24e>
    }
    else
    {
        roll = 0.0;
 80075fa:	f04f 0200 	mov.w	r2, #0
 80075fe:	f04f 0300 	mov.w	r3, #0
 8007602:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	f9b3 3000 	ldrsh.w	r3, [r3]
 800760c:	425b      	negs	r3, r3
 800760e:	4618      	mov	r0, r3
 8007610:	f7f8 ffc0 	bl	8000594 <__aeabi_i2d>
 8007614:	4682      	mov	sl, r0
 8007616:	468b      	mov	fp, r1
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800761e:	4618      	mov	r0, r3
 8007620:	f7f8 ffb8 	bl	8000594 <__aeabi_i2d>
 8007624:	4602      	mov	r2, r0
 8007626:	460b      	mov	r3, r1
 8007628:	ec43 2b11 	vmov	d1, r2, r3
 800762c:	ec4b ab10 	vmov	d0, sl, fp
 8007630:	f012 fd78 	bl	801a124 <atan2>
 8007634:	ec51 0b10 	vmov	r0, r1, d0
 8007638:	a347      	add	r3, pc, #284	@ (adr r3, 8007758 <MPU6050_Read_All+0x3a0>)
 800763a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800763e:	f7f9 f813 	bl	8000668 <__aeabi_dmul>
 8007642:	4602      	mov	r2, r0
 8007644:	460b      	mov	r3, r1
 8007646:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 800764a:	f04f 0200 	mov.w	r2, #0
 800764e:	4b49      	ldr	r3, [pc, #292]	@ (8007774 <MPU6050_Read_All+0x3bc>)
 8007650:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007654:	f7f9 fa7a 	bl	8000b4c <__aeabi_dcmplt>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00a      	beq.n	8007674 <MPU6050_Read_All+0x2bc>
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8007664:	f04f 0200 	mov.w	r2, #0
 8007668:	4b43      	ldr	r3, [pc, #268]	@ (8007778 <MPU6050_Read_All+0x3c0>)
 800766a:	f7f9 fa8d 	bl	8000b88 <__aeabi_dcmpgt>
 800766e:	4603      	mov	r3, r0
 8007670:	2b00      	cmp	r3, #0
 8007672:	d114      	bne.n	800769e <MPU6050_Read_All+0x2e6>
 8007674:	f04f 0200 	mov.w	r2, #0
 8007678:	4b3f      	ldr	r3, [pc, #252]	@ (8007778 <MPU6050_Read_All+0x3c0>)
 800767a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800767e:	f7f9 fa83 	bl	8000b88 <__aeabi_dcmpgt>
 8007682:	4603      	mov	r3, r0
 8007684:	2b00      	cmp	r3, #0
 8007686:	d015      	beq.n	80076b4 <MPU6050_Read_All+0x2fc>
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800768e:	f04f 0200 	mov.w	r2, #0
 8007692:	4b38      	ldr	r3, [pc, #224]	@ (8007774 <MPU6050_Read_All+0x3bc>)
 8007694:	f7f9 fa5a 	bl	8000b4c <__aeabi_dcmplt>
 8007698:	4603      	mov	r3, r0
 800769a:	2b00      	cmp	r3, #0
 800769c:	d00a      	beq.n	80076b4 <MPU6050_Read_All+0x2fc>
    {
        KalmanY.angle = pitch;
 800769e:	4937      	ldr	r1, [pc, #220]	@ (800777c <MPU6050_Read_All+0x3c4>)
 80076a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80076a4:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 80076a8:	6839      	ldr	r1, [r7, #0]
 80076aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80076ae:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 80076b2:	e014      	b.n	80076de <MPU6050_Read_All+0x326>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 80076ba:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 80076be:	eeb0 1a47 	vmov.f32	s2, s14
 80076c2:	eef0 1a67 	vmov.f32	s3, s15
 80076c6:	ed97 0b06 	vldr	d0, [r7, #24]
 80076ca:	482c      	ldr	r0, [pc, #176]	@ (800777c <MPU6050_Read_All+0x3c4>)
 80076cc:	f000 f85a 	bl	8007784 <Kalman_getAngle>
 80076d0:	eeb0 7a40 	vmov.f32	s14, s0
 80076d4:	eef0 7a60 	vmov.f32	s15, s1
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80076e4:	4690      	mov	r8, r2
 80076e6:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 80076ea:	f04f 0200 	mov.w	r2, #0
 80076ee:	4b22      	ldr	r3, [pc, #136]	@ (8007778 <MPU6050_Read_All+0x3c0>)
 80076f0:	4640      	mov	r0, r8
 80076f2:	4649      	mov	r1, r9
 80076f4:	f7f9 fa48 	bl	8000b88 <__aeabi_dcmpgt>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d008      	beq.n	8007710 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8007704:	4614      	mov	r4, r2
 8007706:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8007716:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 800771a:	eeb0 1a47 	vmov.f32	s2, s14
 800771e:	eef0 1a67 	vmov.f32	s3, s15
 8007722:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8007726:	4816      	ldr	r0, [pc, #88]	@ (8007780 <MPU6050_Read_All+0x3c8>)
 8007728:	f000 f82c 	bl	8007784 <Kalman_getAngle>
 800772c:	eeb0 7a40 	vmov.f32	s14, s0
 8007730:	eef0 7a60 	vmov.f32	s15, s1
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48
}
 800773a:	bf00      	nop
 800773c:	3740      	adds	r7, #64	@ 0x40
 800773e:	46bd      	mov	sp, r7
 8007740:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007744:	f3af 8000 	nop.w
 8007748:	00000000 	.word	0x00000000
 800774c:	40cc2900 	.word	0x40cc2900
 8007750:	00000000 	.word	0x00000000
 8007754:	40606000 	.word	0x40606000
 8007758:	1a63c1f8 	.word	0x1a63c1f8
 800775c:	404ca5dc 	.word	0x404ca5dc
 8007760:	40d00000 	.word	0x40d00000
 8007764:	43aa0000 	.word	0x43aa0000
 8007768:	42121eb8 	.word	0x42121eb8
 800776c:	20005330 	.word	0x20005330
 8007770:	408f4000 	.word	0x408f4000
 8007774:	c0568000 	.word	0xc0568000
 8007778:	40568000 	.word	0x40568000
 800777c:	20000060 	.word	0x20000060
 8007780:	20000018 	.word	0x20000018

08007784 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8007784:	b5b0      	push	{r4, r5, r7, lr}
 8007786:	b096      	sub	sp, #88	@ 0x58
 8007788:	af00      	add	r7, sp, #0
 800778a:	61f8      	str	r0, [r7, #28]
 800778c:	ed87 0b04 	vstr	d0, [r7, #16]
 8007790:	ed87 1b02 	vstr	d1, [r7, #8]
 8007794:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8007798:	69fb      	ldr	r3, [r7, #28]
 800779a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800779e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80077a2:	f7f8 fda9 	bl	80002f8 <__aeabi_dsub>
 80077a6:	4602      	mov	r2, r0
 80077a8:	460b      	mov	r3, r1
 80077aa:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    Kalman->angle += dt * rate;
 80077ae:	69fb      	ldr	r3, [r7, #28]
 80077b0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80077b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80077b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80077bc:	f7f8 ff54 	bl	8000668 <__aeabi_dmul>
 80077c0:	4602      	mov	r2, r0
 80077c2:	460b      	mov	r3, r1
 80077c4:	4620      	mov	r0, r4
 80077c6:	4629      	mov	r1, r5
 80077c8:	f7f8 fd98 	bl	80002fc <__adddf3>
 80077cc:	4602      	mov	r2, r0
 80077ce:	460b      	mov	r3, r1
 80077d0:	69f9      	ldr	r1, [r7, #28]
 80077d2:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 80077d6:	69fb      	ldr	r3, [r7, #28]
 80077d8:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 80077dc:	69fb      	ldr	r3, [r7, #28]
 80077de:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80077e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077e6:	f7f8 ff3f 	bl	8000668 <__aeabi_dmul>
 80077ea:	4602      	mov	r2, r0
 80077ec:	460b      	mov	r3, r1
 80077ee:	4610      	mov	r0, r2
 80077f0:	4619      	mov	r1, r3
 80077f2:	69fb      	ldr	r3, [r7, #28]
 80077f4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80077f8:	f7f8 fd7e 	bl	80002f8 <__aeabi_dsub>
 80077fc:	4602      	mov	r2, r0
 80077fe:	460b      	mov	r3, r1
 8007800:	4610      	mov	r0, r2
 8007802:	4619      	mov	r1, r3
 8007804:	69fb      	ldr	r3, [r7, #28]
 8007806:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800780a:	f7f8 fd75 	bl	80002f8 <__aeabi_dsub>
 800780e:	4602      	mov	r2, r0
 8007810:	460b      	mov	r3, r1
 8007812:	4610      	mov	r0, r2
 8007814:	4619      	mov	r1, r3
 8007816:	69fb      	ldr	r3, [r7, #28]
 8007818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800781c:	f7f8 fd6e 	bl	80002fc <__adddf3>
 8007820:	4602      	mov	r2, r0
 8007822:	460b      	mov	r3, r1
 8007824:	4610      	mov	r0, r2
 8007826:	4619      	mov	r1, r3
 8007828:	e9d7 2300 	ldrd	r2, r3, [r7]
 800782c:	f7f8 ff1c 	bl	8000668 <__aeabi_dmul>
 8007830:	4602      	mov	r2, r0
 8007832:	460b      	mov	r3, r1
 8007834:	4620      	mov	r0, r4
 8007836:	4629      	mov	r1, r5
 8007838:	f7f8 fd60 	bl	80002fc <__adddf3>
 800783c:	4602      	mov	r2, r0
 800783e:	460b      	mov	r3, r1
 8007840:	69f9      	ldr	r1, [r7, #28]
 8007842:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8007846:	69fb      	ldr	r3, [r7, #28]
 8007848:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 800784c:	69fb      	ldr	r3, [r7, #28]
 800784e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8007852:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007856:	f7f8 ff07 	bl	8000668 <__aeabi_dmul>
 800785a:	4602      	mov	r2, r0
 800785c:	460b      	mov	r3, r1
 800785e:	4620      	mov	r0, r4
 8007860:	4629      	mov	r1, r5
 8007862:	f7f8 fd49 	bl	80002f8 <__aeabi_dsub>
 8007866:	4602      	mov	r2, r0
 8007868:	460b      	mov	r3, r1
 800786a:	69f9      	ldr	r1, [r7, #28]
 800786c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8007870:	69fb      	ldr	r3, [r7, #28]
 8007872:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8007876:	69fb      	ldr	r3, [r7, #28]
 8007878:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800787c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007880:	f7f8 fef2 	bl	8000668 <__aeabi_dmul>
 8007884:	4602      	mov	r2, r0
 8007886:	460b      	mov	r3, r1
 8007888:	4620      	mov	r0, r4
 800788a:	4629      	mov	r1, r5
 800788c:	f7f8 fd34 	bl	80002f8 <__aeabi_dsub>
 8007890:	4602      	mov	r2, r0
 8007892:	460b      	mov	r3, r1
 8007894:	69f9      	ldr	r1, [r7, #28]
 8007896:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 80078a0:	69fb      	ldr	r3, [r7, #28]
 80078a2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80078a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078aa:	f7f8 fedd 	bl	8000668 <__aeabi_dmul>
 80078ae:	4602      	mov	r2, r0
 80078b0:	460b      	mov	r3, r1
 80078b2:	4620      	mov	r0, r4
 80078b4:	4629      	mov	r1, r5
 80078b6:	f7f8 fd21 	bl	80002fc <__adddf3>
 80078ba:	4602      	mov	r2, r0
 80078bc:	460b      	mov	r3, r1
 80078be:	69f9      	ldr	r1, [r7, #28]
 80078c0:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 80078c4:	69fb      	ldr	r3, [r7, #28]
 80078c6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80078ca:	69fb      	ldr	r3, [r7, #28]
 80078cc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80078d0:	f7f8 fd14 	bl	80002fc <__adddf3>
 80078d4:	4602      	mov	r2, r0
 80078d6:	460b      	mov	r3, r1
 80078d8:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 80078dc:	69fb      	ldr	r3, [r7, #28]
 80078de:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80078e2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80078e6:	f7f8 ffe9 	bl	80008bc <__aeabi_ddiv>
 80078ea:	4602      	mov	r2, r0
 80078ec:	460b      	mov	r3, r1
 80078ee:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 80078f2:	69fb      	ldr	r3, [r7, #28]
 80078f4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80078f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80078fc:	f7f8 ffde 	bl	80008bc <__aeabi_ddiv>
 8007900:	4602      	mov	r2, r0
 8007902:	460b      	mov	r3, r1
 8007904:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    double y = newAngle - Kalman->angle;
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800790e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007912:	f7f8 fcf1 	bl	80002f8 <__aeabi_dsub>
 8007916:	4602      	mov	r2, r0
 8007918:	460b      	mov	r3, r1
 800791a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += K[0] * y;
 800791e:	69fb      	ldr	r3, [r7, #28]
 8007920:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8007924:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007928:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800792c:	f7f8 fe9c 	bl	8000668 <__aeabi_dmul>
 8007930:	4602      	mov	r2, r0
 8007932:	460b      	mov	r3, r1
 8007934:	4620      	mov	r0, r4
 8007936:	4629      	mov	r1, r5
 8007938:	f7f8 fce0 	bl	80002fc <__adddf3>
 800793c:	4602      	mov	r2, r0
 800793e:	460b      	mov	r3, r1
 8007940:	69f9      	ldr	r1, [r7, #28]
 8007942:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8007946:	69fb      	ldr	r3, [r7, #28]
 8007948:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800794c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007950:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007954:	f7f8 fe88 	bl	8000668 <__aeabi_dmul>
 8007958:	4602      	mov	r2, r0
 800795a:	460b      	mov	r3, r1
 800795c:	4620      	mov	r0, r4
 800795e:	4629      	mov	r1, r5
 8007960:	f7f8 fccc 	bl	80002fc <__adddf3>
 8007964:	4602      	mov	r2, r0
 8007966:	460b      	mov	r3, r1
 8007968:	69f9      	ldr	r1, [r7, #28]
 800796a:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 800796e:	69fb      	ldr	r3, [r7, #28]
 8007970:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8007974:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double P01_temp = Kalman->P[0][1];
 8007978:	69fb      	ldr	r3, [r7, #28]
 800797a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800797e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8007988:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800798c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007990:	f7f8 fe6a 	bl	8000668 <__aeabi_dmul>
 8007994:	4602      	mov	r2, r0
 8007996:	460b      	mov	r3, r1
 8007998:	4620      	mov	r0, r4
 800799a:	4629      	mov	r1, r5
 800799c:	f7f8 fcac 	bl	80002f8 <__aeabi_dsub>
 80079a0:	4602      	mov	r2, r0
 80079a2:	460b      	mov	r3, r1
 80079a4:	69f9      	ldr	r1, [r7, #28]
 80079a6:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 80079b0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80079b4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80079b8:	f7f8 fe56 	bl	8000668 <__aeabi_dmul>
 80079bc:	4602      	mov	r2, r0
 80079be:	460b      	mov	r3, r1
 80079c0:	4620      	mov	r0, r4
 80079c2:	4629      	mov	r1, r5
 80079c4:	f7f8 fc98 	bl	80002f8 <__aeabi_dsub>
 80079c8:	4602      	mov	r2, r0
 80079ca:	460b      	mov	r3, r1
 80079cc:	69f9      	ldr	r1, [r7, #28]
 80079ce:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 80079d2:	69fb      	ldr	r3, [r7, #28]
 80079d4:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 80079d8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80079dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80079e0:	f7f8 fe42 	bl	8000668 <__aeabi_dmul>
 80079e4:	4602      	mov	r2, r0
 80079e6:	460b      	mov	r3, r1
 80079e8:	4620      	mov	r0, r4
 80079ea:	4629      	mov	r1, r5
 80079ec:	f7f8 fc84 	bl	80002f8 <__aeabi_dsub>
 80079f0:	4602      	mov	r2, r0
 80079f2:	460b      	mov	r3, r1
 80079f4:	69f9      	ldr	r1, [r7, #28]
 80079f6:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 80079fa:	69fb      	ldr	r3, [r7, #28]
 80079fc:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8007a00:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007a04:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8007a08:	f7f8 fe2e 	bl	8000668 <__aeabi_dmul>
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	460b      	mov	r3, r1
 8007a10:	4620      	mov	r0, r4
 8007a12:	4629      	mov	r1, r5
 8007a14:	f7f8 fc70 	bl	80002f8 <__aeabi_dsub>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	460b      	mov	r3, r1
 8007a1c:	69f9      	ldr	r1, [r7, #28]
 8007a1e:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 8007a22:	69fb      	ldr	r3, [r7, #28]
 8007a24:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8007a28:	ec43 2b17 	vmov	d7, r2, r3
};
 8007a2c:	eeb0 0a47 	vmov.f32	s0, s14
 8007a30:	eef0 0a67 	vmov.f32	s1, s15
 8007a34:	3758      	adds	r7, #88	@ 0x58
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007a3c <__NVIC_SetPriority>:
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b083      	sub	sp, #12
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	4603      	mov	r3, r0
 8007a44:	6039      	str	r1, [r7, #0]
 8007a46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	db0a      	blt.n	8007a66 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	b2da      	uxtb	r2, r3
 8007a54:	490c      	ldr	r1, [pc, #48]	@ (8007a88 <__NVIC_SetPriority+0x4c>)
 8007a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a5a:	0112      	lsls	r2, r2, #4
 8007a5c:	b2d2      	uxtb	r2, r2
 8007a5e:	440b      	add	r3, r1
 8007a60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007a64:	e00a      	b.n	8007a7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	b2da      	uxtb	r2, r3
 8007a6a:	4908      	ldr	r1, [pc, #32]	@ (8007a8c <__NVIC_SetPriority+0x50>)
 8007a6c:	79fb      	ldrb	r3, [r7, #7]
 8007a6e:	f003 030f 	and.w	r3, r3, #15
 8007a72:	3b04      	subs	r3, #4
 8007a74:	0112      	lsls	r2, r2, #4
 8007a76:	b2d2      	uxtb	r2, r2
 8007a78:	440b      	add	r3, r1
 8007a7a:	761a      	strb	r2, [r3, #24]
}
 8007a7c:	bf00      	nop
 8007a7e:	370c      	adds	r7, #12
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr
 8007a88:	e000e100 	.word	0xe000e100
 8007a8c:	e000ed00 	.word	0xe000ed00

08007a90 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007a90:	b580      	push	{r7, lr}
 8007a92:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007a94:	4b05      	ldr	r3, [pc, #20]	@ (8007aac <SysTick_Handler+0x1c>)
 8007a96:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007a98:	f001 fd40 	bl	800951c <xTaskGetSchedulerState>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d001      	beq.n	8007aa6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007aa2:	f002 fb39 	bl	800a118 <xPortSysTickHandler>
  }
}
 8007aa6:	bf00      	nop
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	e000e010 	.word	0xe000e010

08007ab0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007ab4:	2100      	movs	r1, #0
 8007ab6:	f06f 0004 	mvn.w	r0, #4
 8007aba:	f7ff ffbf 	bl	8007a3c <__NVIC_SetPriority>
#endif
}
 8007abe:	bf00      	nop
 8007ac0:	bd80      	pop	{r7, pc}
	...

08007ac4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007ac4:	b480      	push	{r7}
 8007ac6:	b083      	sub	sp, #12
 8007ac8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007aca:	f3ef 8305 	mrs	r3, IPSR
 8007ace:	603b      	str	r3, [r7, #0]
  return(result);
 8007ad0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d003      	beq.n	8007ade <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007ad6:	f06f 0305 	mvn.w	r3, #5
 8007ada:	607b      	str	r3, [r7, #4]
 8007adc:	e00c      	b.n	8007af8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007ade:	4b0a      	ldr	r3, [pc, #40]	@ (8007b08 <osKernelInitialize+0x44>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d105      	bne.n	8007af2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007ae6:	4b08      	ldr	r3, [pc, #32]	@ (8007b08 <osKernelInitialize+0x44>)
 8007ae8:	2201      	movs	r2, #1
 8007aea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007aec:	2300      	movs	r3, #0
 8007aee:	607b      	str	r3, [r7, #4]
 8007af0:	e002      	b.n	8007af8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007af2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007af6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007af8:	687b      	ldr	r3, [r7, #4]
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	370c      	adds	r7, #12
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr
 8007b06:	bf00      	nop
 8007b08:	20005334 	.word	0x20005334

08007b0c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b082      	sub	sp, #8
 8007b10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b12:	f3ef 8305 	mrs	r3, IPSR
 8007b16:	603b      	str	r3, [r7, #0]
  return(result);
 8007b18:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d003      	beq.n	8007b26 <osKernelStart+0x1a>
    stat = osErrorISR;
 8007b1e:	f06f 0305 	mvn.w	r3, #5
 8007b22:	607b      	str	r3, [r7, #4]
 8007b24:	e010      	b.n	8007b48 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007b26:	4b0b      	ldr	r3, [pc, #44]	@ (8007b54 <osKernelStart+0x48>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d109      	bne.n	8007b42 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007b2e:	f7ff ffbf 	bl	8007ab0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007b32:	4b08      	ldr	r3, [pc, #32]	@ (8007b54 <osKernelStart+0x48>)
 8007b34:	2202      	movs	r2, #2
 8007b36:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007b38:	f001 f87a 	bl	8008c30 <vTaskStartScheduler>
      stat = osOK;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	607b      	str	r3, [r7, #4]
 8007b40:	e002      	b.n	8007b48 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007b42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007b46:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007b48:	687b      	ldr	r3, [r7, #4]
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3708      	adds	r7, #8
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
 8007b52:	bf00      	nop
 8007b54:	20005334 	.word	0x20005334

08007b58 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b08e      	sub	sp, #56	@ 0x38
 8007b5c:	af04      	add	r7, sp, #16
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	60b9      	str	r1, [r7, #8]
 8007b62:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007b64:	2300      	movs	r3, #0
 8007b66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b68:	f3ef 8305 	mrs	r3, IPSR
 8007b6c:	617b      	str	r3, [r7, #20]
  return(result);
 8007b6e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d17e      	bne.n	8007c72 <osThreadNew+0x11a>
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d07b      	beq.n	8007c72 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007b7a:	2380      	movs	r3, #128	@ 0x80
 8007b7c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007b7e:	2318      	movs	r3, #24
 8007b80:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007b82:	2300      	movs	r3, #0
 8007b84:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007b86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007b8a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d045      	beq.n	8007c1e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d002      	beq.n	8007ba0 <osThreadNew+0x48>
        name = attr->name;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	699b      	ldr	r3, [r3, #24]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d002      	beq.n	8007bae <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	699b      	ldr	r3, [r3, #24]
 8007bac:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007bae:	69fb      	ldr	r3, [r7, #28]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d008      	beq.n	8007bc6 <osThreadNew+0x6e>
 8007bb4:	69fb      	ldr	r3, [r7, #28]
 8007bb6:	2b38      	cmp	r3, #56	@ 0x38
 8007bb8:	d805      	bhi.n	8007bc6 <osThreadNew+0x6e>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	f003 0301 	and.w	r3, r3, #1
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d001      	beq.n	8007bca <osThreadNew+0x72>
        return (NULL);
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	e054      	b.n	8007c74 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	695b      	ldr	r3, [r3, #20]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d003      	beq.n	8007bda <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	695b      	ldr	r3, [r3, #20]
 8007bd6:	089b      	lsrs	r3, r3, #2
 8007bd8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	689b      	ldr	r3, [r3, #8]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d00e      	beq.n	8007c00 <osThreadNew+0xa8>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	2b5b      	cmp	r3, #91	@ 0x5b
 8007be8:	d90a      	bls.n	8007c00 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d006      	beq.n	8007c00 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	695b      	ldr	r3, [r3, #20]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d002      	beq.n	8007c00 <osThreadNew+0xa8>
        mem = 1;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	61bb      	str	r3, [r7, #24]
 8007bfe:	e010      	b.n	8007c22 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d10c      	bne.n	8007c22 <osThreadNew+0xca>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	68db      	ldr	r3, [r3, #12]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d108      	bne.n	8007c22 <osThreadNew+0xca>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	691b      	ldr	r3, [r3, #16]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d104      	bne.n	8007c22 <osThreadNew+0xca>
          mem = 0;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	61bb      	str	r3, [r7, #24]
 8007c1c:	e001      	b.n	8007c22 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007c22:	69bb      	ldr	r3, [r7, #24]
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d110      	bne.n	8007c4a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007c30:	9202      	str	r2, [sp, #8]
 8007c32:	9301      	str	r3, [sp, #4]
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	9300      	str	r3, [sp, #0]
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	6a3a      	ldr	r2, [r7, #32]
 8007c3c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007c3e:	68f8      	ldr	r0, [r7, #12]
 8007c40:	f000 fe1a 	bl	8008878 <xTaskCreateStatic>
 8007c44:	4603      	mov	r3, r0
 8007c46:	613b      	str	r3, [r7, #16]
 8007c48:	e013      	b.n	8007c72 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007c4a:	69bb      	ldr	r3, [r7, #24]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d110      	bne.n	8007c72 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007c50:	6a3b      	ldr	r3, [r7, #32]
 8007c52:	b29a      	uxth	r2, r3
 8007c54:	f107 0310 	add.w	r3, r7, #16
 8007c58:	9301      	str	r3, [sp, #4]
 8007c5a:	69fb      	ldr	r3, [r7, #28]
 8007c5c:	9300      	str	r3, [sp, #0]
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007c62:	68f8      	ldr	r0, [r7, #12]
 8007c64:	f000 fe68 	bl	8008938 <xTaskCreate>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d001      	beq.n	8007c72 <osThreadNew+0x11a>
            hTask = NULL;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007c72:	693b      	ldr	r3, [r7, #16]
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3728      	adds	r7, #40	@ 0x28
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c84:	f3ef 8305 	mrs	r3, IPSR
 8007c88:	60bb      	str	r3, [r7, #8]
  return(result);
 8007c8a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d003      	beq.n	8007c98 <osDelay+0x1c>
    stat = osErrorISR;
 8007c90:	f06f 0305 	mvn.w	r3, #5
 8007c94:	60fb      	str	r3, [r7, #12]
 8007c96:	e007      	b.n	8007ca8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d002      	beq.n	8007ca8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 ff8e 	bl	8008bc4 <vTaskDelay>
    }
  }

  return (stat);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3710      	adds	r7, #16
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
	...

08007cb4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007cb4:	b480      	push	{r7}
 8007cb6:	b085      	sub	sp, #20
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	60b9      	str	r1, [r7, #8]
 8007cbe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	4a07      	ldr	r2, [pc, #28]	@ (8007ce0 <vApplicationGetIdleTaskMemory+0x2c>)
 8007cc4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	4a06      	ldr	r2, [pc, #24]	@ (8007ce4 <vApplicationGetIdleTaskMemory+0x30>)
 8007cca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2280      	movs	r2, #128	@ 0x80
 8007cd0:	601a      	str	r2, [r3, #0]
}
 8007cd2:	bf00      	nop
 8007cd4:	3714      	adds	r7, #20
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr
 8007cde:	bf00      	nop
 8007ce0:	20005338 	.word	0x20005338
 8007ce4:	20005394 	.word	0x20005394

08007ce8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007ce8:	b480      	push	{r7}
 8007cea:	b085      	sub	sp, #20
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	4a07      	ldr	r2, [pc, #28]	@ (8007d14 <vApplicationGetTimerTaskMemory+0x2c>)
 8007cf8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	4a06      	ldr	r2, [pc, #24]	@ (8007d18 <vApplicationGetTimerTaskMemory+0x30>)
 8007cfe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007d06:	601a      	str	r2, [r3, #0]
}
 8007d08:	bf00      	nop
 8007d0a:	3714      	adds	r7, #20
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr
 8007d14:	20005594 	.word	0x20005594
 8007d18:	200055f0 	.word	0x200055f0

08007d1c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f103 0208 	add.w	r2, r3, #8
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007d34:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f103 0208 	add.w	r2, r3, #8
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f103 0208 	add.w	r2, r3, #8
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007d50:	bf00      	nop
 8007d52:	370c      	adds	r7, #12
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b083      	sub	sp, #12
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007d6a:	bf00      	nop
 8007d6c:	370c      	adds	r7, #12
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr

08007d76 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007d76:	b480      	push	{r7}
 8007d78:	b085      	sub	sp, #20
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	6078      	str	r0, [r7, #4]
 8007d7e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	68fa      	ldr	r2, [r7, #12]
 8007d8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	689a      	ldr	r2, [r3, #8]
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	683a      	ldr	r2, [r7, #0]
 8007d9a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	683a      	ldr	r2, [r7, #0]
 8007da0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	1c5a      	adds	r2, r3, #1
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	601a      	str	r2, [r3, #0]
}
 8007db2:	bf00      	nop
 8007db4:	3714      	adds	r7, #20
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr

08007dbe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007dbe:	b480      	push	{r7}
 8007dc0:	b085      	sub	sp, #20
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
 8007dc6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007dd4:	d103      	bne.n	8007dde <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	691b      	ldr	r3, [r3, #16]
 8007dda:	60fb      	str	r3, [r7, #12]
 8007ddc:	e00c      	b.n	8007df8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	3308      	adds	r3, #8
 8007de2:	60fb      	str	r3, [r7, #12]
 8007de4:	e002      	b.n	8007dec <vListInsert+0x2e>
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	60fb      	str	r3, [r7, #12]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	68ba      	ldr	r2, [r7, #8]
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d2f6      	bcs.n	8007de6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	685a      	ldr	r2, [r3, #4]
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	683a      	ldr	r2, [r7, #0]
 8007e06:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	68fa      	ldr	r2, [r7, #12]
 8007e0c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	683a      	ldr	r2, [r7, #0]
 8007e12:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	687a      	ldr	r2, [r7, #4]
 8007e18:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	1c5a      	adds	r2, r3, #1
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	601a      	str	r2, [r3, #0]
}
 8007e24:	bf00      	nop
 8007e26:	3714      	adds	r7, #20
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr

08007e30 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007e30:	b480      	push	{r7}
 8007e32:	b085      	sub	sp, #20
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	691b      	ldr	r3, [r3, #16]
 8007e3c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	6892      	ldr	r2, [r2, #8]
 8007e46:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	687a      	ldr	r2, [r7, #4]
 8007e4e:	6852      	ldr	r2, [r2, #4]
 8007e50:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d103      	bne.n	8007e64 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	689a      	ldr	r2, [r3, #8]
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	1e5a      	subs	r2, r3, #1
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3714      	adds	r7, #20
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b084      	sub	sp, #16
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d10b      	bne.n	8007eb0 <xQueueGenericReset+0x2c>
	__asm volatile
 8007e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e9c:	f383 8811 	msr	BASEPRI, r3
 8007ea0:	f3bf 8f6f 	isb	sy
 8007ea4:	f3bf 8f4f 	dsb	sy
 8007ea8:	60bb      	str	r3, [r7, #8]
}
 8007eaa:	bf00      	nop
 8007eac:	bf00      	nop
 8007eae:	e7fd      	b.n	8007eac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007eb0:	f002 f8a2 	bl	8009ff8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ebc:	68f9      	ldr	r1, [r7, #12]
 8007ebe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007ec0:	fb01 f303 	mul.w	r3, r1, r3
 8007ec4:	441a      	add	r2, r3
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ee0:	3b01      	subs	r3, #1
 8007ee2:	68f9      	ldr	r1, [r7, #12]
 8007ee4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007ee6:	fb01 f303 	mul.w	r3, r1, r3
 8007eea:	441a      	add	r2, r3
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	22ff      	movs	r2, #255	@ 0xff
 8007ef4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	22ff      	movs	r2, #255	@ 0xff
 8007efc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d114      	bne.n	8007f30 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	691b      	ldr	r3, [r3, #16]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d01a      	beq.n	8007f44 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	3310      	adds	r3, #16
 8007f12:	4618      	mov	r0, r3
 8007f14:	f001 f91a 	bl	800914c <xTaskRemoveFromEventList>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d012      	beq.n	8007f44 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8007f54 <xQueueGenericReset+0xd0>)
 8007f20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f24:	601a      	str	r2, [r3, #0]
 8007f26:	f3bf 8f4f 	dsb	sy
 8007f2a:	f3bf 8f6f 	isb	sy
 8007f2e:	e009      	b.n	8007f44 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	3310      	adds	r3, #16
 8007f34:	4618      	mov	r0, r3
 8007f36:	f7ff fef1 	bl	8007d1c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	3324      	adds	r3, #36	@ 0x24
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f7ff feec 	bl	8007d1c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007f44:	f002 f88a 	bl	800a05c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007f48:	2301      	movs	r3, #1
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3710      	adds	r7, #16
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}
 8007f52:	bf00      	nop
 8007f54:	e000ed04 	.word	0xe000ed04

08007f58 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b08e      	sub	sp, #56	@ 0x38
 8007f5c:	af02      	add	r7, sp, #8
 8007f5e:	60f8      	str	r0, [r7, #12]
 8007f60:	60b9      	str	r1, [r7, #8]
 8007f62:	607a      	str	r2, [r7, #4]
 8007f64:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d10b      	bne.n	8007f84 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007f6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f70:	f383 8811 	msr	BASEPRI, r3
 8007f74:	f3bf 8f6f 	isb	sy
 8007f78:	f3bf 8f4f 	dsb	sy
 8007f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007f7e:	bf00      	nop
 8007f80:	bf00      	nop
 8007f82:	e7fd      	b.n	8007f80 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d10b      	bne.n	8007fa2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f8e:	f383 8811 	msr	BASEPRI, r3
 8007f92:	f3bf 8f6f 	isb	sy
 8007f96:	f3bf 8f4f 	dsb	sy
 8007f9a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007f9c:	bf00      	nop
 8007f9e:	bf00      	nop
 8007fa0:	e7fd      	b.n	8007f9e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d002      	beq.n	8007fae <xQueueGenericCreateStatic+0x56>
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d001      	beq.n	8007fb2 <xQueueGenericCreateStatic+0x5a>
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e000      	b.n	8007fb4 <xQueueGenericCreateStatic+0x5c>
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d10b      	bne.n	8007fd0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fbc:	f383 8811 	msr	BASEPRI, r3
 8007fc0:	f3bf 8f6f 	isb	sy
 8007fc4:	f3bf 8f4f 	dsb	sy
 8007fc8:	623b      	str	r3, [r7, #32]
}
 8007fca:	bf00      	nop
 8007fcc:	bf00      	nop
 8007fce:	e7fd      	b.n	8007fcc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d102      	bne.n	8007fdc <xQueueGenericCreateStatic+0x84>
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d101      	bne.n	8007fe0 <xQueueGenericCreateStatic+0x88>
 8007fdc:	2301      	movs	r3, #1
 8007fde:	e000      	b.n	8007fe2 <xQueueGenericCreateStatic+0x8a>
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d10b      	bne.n	8007ffe <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fea:	f383 8811 	msr	BASEPRI, r3
 8007fee:	f3bf 8f6f 	isb	sy
 8007ff2:	f3bf 8f4f 	dsb	sy
 8007ff6:	61fb      	str	r3, [r7, #28]
}
 8007ff8:	bf00      	nop
 8007ffa:	bf00      	nop
 8007ffc:	e7fd      	b.n	8007ffa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007ffe:	2350      	movs	r3, #80	@ 0x50
 8008000:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	2b50      	cmp	r3, #80	@ 0x50
 8008006:	d00b      	beq.n	8008020 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800800c:	f383 8811 	msr	BASEPRI, r3
 8008010:	f3bf 8f6f 	isb	sy
 8008014:	f3bf 8f4f 	dsb	sy
 8008018:	61bb      	str	r3, [r7, #24]
}
 800801a:	bf00      	nop
 800801c:	bf00      	nop
 800801e:	e7fd      	b.n	800801c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008020:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008028:	2b00      	cmp	r3, #0
 800802a:	d00d      	beq.n	8008048 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800802c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800802e:	2201      	movs	r2, #1
 8008030:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008034:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800803a:	9300      	str	r3, [sp, #0]
 800803c:	4613      	mov	r3, r2
 800803e:	687a      	ldr	r2, [r7, #4]
 8008040:	68b9      	ldr	r1, [r7, #8]
 8008042:	68f8      	ldr	r0, [r7, #12]
 8008044:	f000 f805 	bl	8008052 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800804a:	4618      	mov	r0, r3
 800804c:	3730      	adds	r7, #48	@ 0x30
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}

08008052 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008052:	b580      	push	{r7, lr}
 8008054:	b084      	sub	sp, #16
 8008056:	af00      	add	r7, sp, #0
 8008058:	60f8      	str	r0, [r7, #12]
 800805a:	60b9      	str	r1, [r7, #8]
 800805c:	607a      	str	r2, [r7, #4]
 800805e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d103      	bne.n	800806e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008066:	69bb      	ldr	r3, [r7, #24]
 8008068:	69ba      	ldr	r2, [r7, #24]
 800806a:	601a      	str	r2, [r3, #0]
 800806c:	e002      	b.n	8008074 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800806e:	69bb      	ldr	r3, [r7, #24]
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008074:	69bb      	ldr	r3, [r7, #24]
 8008076:	68fa      	ldr	r2, [r7, #12]
 8008078:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800807a:	69bb      	ldr	r3, [r7, #24]
 800807c:	68ba      	ldr	r2, [r7, #8]
 800807e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008080:	2101      	movs	r1, #1
 8008082:	69b8      	ldr	r0, [r7, #24]
 8008084:	f7ff fefe 	bl	8007e84 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008088:	69bb      	ldr	r3, [r7, #24]
 800808a:	78fa      	ldrb	r2, [r7, #3]
 800808c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008090:	bf00      	nop
 8008092:	3710      	adds	r7, #16
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b08e      	sub	sp, #56	@ 0x38
 800809c:	af00      	add	r7, sp, #0
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	60b9      	str	r1, [r7, #8]
 80080a2:	607a      	str	r2, [r7, #4]
 80080a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80080a6:	2300      	movs	r3, #0
 80080a8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80080ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d10b      	bne.n	80080cc <xQueueGenericSend+0x34>
	__asm volatile
 80080b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080b8:	f383 8811 	msr	BASEPRI, r3
 80080bc:	f3bf 8f6f 	isb	sy
 80080c0:	f3bf 8f4f 	dsb	sy
 80080c4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80080c6:	bf00      	nop
 80080c8:	bf00      	nop
 80080ca:	e7fd      	b.n	80080c8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d103      	bne.n	80080da <xQueueGenericSend+0x42>
 80080d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d101      	bne.n	80080de <xQueueGenericSend+0x46>
 80080da:	2301      	movs	r3, #1
 80080dc:	e000      	b.n	80080e0 <xQueueGenericSend+0x48>
 80080de:	2300      	movs	r3, #0
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d10b      	bne.n	80080fc <xQueueGenericSend+0x64>
	__asm volatile
 80080e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080e8:	f383 8811 	msr	BASEPRI, r3
 80080ec:	f3bf 8f6f 	isb	sy
 80080f0:	f3bf 8f4f 	dsb	sy
 80080f4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80080f6:	bf00      	nop
 80080f8:	bf00      	nop
 80080fa:	e7fd      	b.n	80080f8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	2b02      	cmp	r3, #2
 8008100:	d103      	bne.n	800810a <xQueueGenericSend+0x72>
 8008102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008104:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008106:	2b01      	cmp	r3, #1
 8008108:	d101      	bne.n	800810e <xQueueGenericSend+0x76>
 800810a:	2301      	movs	r3, #1
 800810c:	e000      	b.n	8008110 <xQueueGenericSend+0x78>
 800810e:	2300      	movs	r3, #0
 8008110:	2b00      	cmp	r3, #0
 8008112:	d10b      	bne.n	800812c <xQueueGenericSend+0x94>
	__asm volatile
 8008114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008118:	f383 8811 	msr	BASEPRI, r3
 800811c:	f3bf 8f6f 	isb	sy
 8008120:	f3bf 8f4f 	dsb	sy
 8008124:	623b      	str	r3, [r7, #32]
}
 8008126:	bf00      	nop
 8008128:	bf00      	nop
 800812a:	e7fd      	b.n	8008128 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800812c:	f001 f9f6 	bl	800951c <xTaskGetSchedulerState>
 8008130:	4603      	mov	r3, r0
 8008132:	2b00      	cmp	r3, #0
 8008134:	d102      	bne.n	800813c <xQueueGenericSend+0xa4>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d101      	bne.n	8008140 <xQueueGenericSend+0xa8>
 800813c:	2301      	movs	r3, #1
 800813e:	e000      	b.n	8008142 <xQueueGenericSend+0xaa>
 8008140:	2300      	movs	r3, #0
 8008142:	2b00      	cmp	r3, #0
 8008144:	d10b      	bne.n	800815e <xQueueGenericSend+0xc6>
	__asm volatile
 8008146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800814a:	f383 8811 	msr	BASEPRI, r3
 800814e:	f3bf 8f6f 	isb	sy
 8008152:	f3bf 8f4f 	dsb	sy
 8008156:	61fb      	str	r3, [r7, #28]
}
 8008158:	bf00      	nop
 800815a:	bf00      	nop
 800815c:	e7fd      	b.n	800815a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800815e:	f001 ff4b 	bl	8009ff8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008164:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008168:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800816a:	429a      	cmp	r2, r3
 800816c:	d302      	bcc.n	8008174 <xQueueGenericSend+0xdc>
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	2b02      	cmp	r3, #2
 8008172:	d129      	bne.n	80081c8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008174:	683a      	ldr	r2, [r7, #0]
 8008176:	68b9      	ldr	r1, [r7, #8]
 8008178:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800817a:	f000 fa0f 	bl	800859c <prvCopyDataToQueue>
 800817e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008184:	2b00      	cmp	r3, #0
 8008186:	d010      	beq.n	80081aa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800818a:	3324      	adds	r3, #36	@ 0x24
 800818c:	4618      	mov	r0, r3
 800818e:	f000 ffdd 	bl	800914c <xTaskRemoveFromEventList>
 8008192:	4603      	mov	r3, r0
 8008194:	2b00      	cmp	r3, #0
 8008196:	d013      	beq.n	80081c0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008198:	4b3f      	ldr	r3, [pc, #252]	@ (8008298 <xQueueGenericSend+0x200>)
 800819a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800819e:	601a      	str	r2, [r3, #0]
 80081a0:	f3bf 8f4f 	dsb	sy
 80081a4:	f3bf 8f6f 	isb	sy
 80081a8:	e00a      	b.n	80081c0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80081aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d007      	beq.n	80081c0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80081b0:	4b39      	ldr	r3, [pc, #228]	@ (8008298 <xQueueGenericSend+0x200>)
 80081b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081b6:	601a      	str	r2, [r3, #0]
 80081b8:	f3bf 8f4f 	dsb	sy
 80081bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80081c0:	f001 ff4c 	bl	800a05c <vPortExitCritical>
				return pdPASS;
 80081c4:	2301      	movs	r3, #1
 80081c6:	e063      	b.n	8008290 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d103      	bne.n	80081d6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80081ce:	f001 ff45 	bl	800a05c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80081d2:	2300      	movs	r3, #0
 80081d4:	e05c      	b.n	8008290 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80081d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d106      	bne.n	80081ea <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80081dc:	f107 0314 	add.w	r3, r7, #20
 80081e0:	4618      	mov	r0, r3
 80081e2:	f001 f83f 	bl	8009264 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80081e6:	2301      	movs	r3, #1
 80081e8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80081ea:	f001 ff37 	bl	800a05c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80081ee:	f000 fd87 	bl	8008d00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80081f2:	f001 ff01 	bl	8009ff8 <vPortEnterCritical>
 80081f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80081fc:	b25b      	sxtb	r3, r3
 80081fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008202:	d103      	bne.n	800820c <xQueueGenericSend+0x174>
 8008204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008206:	2200      	movs	r2, #0
 8008208:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800820c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800820e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008212:	b25b      	sxtb	r3, r3
 8008214:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008218:	d103      	bne.n	8008222 <xQueueGenericSend+0x18a>
 800821a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800821c:	2200      	movs	r2, #0
 800821e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008222:	f001 ff1b 	bl	800a05c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008226:	1d3a      	adds	r2, r7, #4
 8008228:	f107 0314 	add.w	r3, r7, #20
 800822c:	4611      	mov	r1, r2
 800822e:	4618      	mov	r0, r3
 8008230:	f001 f82e 	bl	8009290 <xTaskCheckForTimeOut>
 8008234:	4603      	mov	r3, r0
 8008236:	2b00      	cmp	r3, #0
 8008238:	d124      	bne.n	8008284 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800823a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800823c:	f000 faa6 	bl	800878c <prvIsQueueFull>
 8008240:	4603      	mov	r3, r0
 8008242:	2b00      	cmp	r3, #0
 8008244:	d018      	beq.n	8008278 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008248:	3310      	adds	r3, #16
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	4611      	mov	r1, r2
 800824e:	4618      	mov	r0, r3
 8008250:	f000 ff2a 	bl	80090a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008254:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008256:	f000 fa31 	bl	80086bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800825a:	f000 fd5f 	bl	8008d1c <xTaskResumeAll>
 800825e:	4603      	mov	r3, r0
 8008260:	2b00      	cmp	r3, #0
 8008262:	f47f af7c 	bne.w	800815e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008266:	4b0c      	ldr	r3, [pc, #48]	@ (8008298 <xQueueGenericSend+0x200>)
 8008268:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800826c:	601a      	str	r2, [r3, #0]
 800826e:	f3bf 8f4f 	dsb	sy
 8008272:	f3bf 8f6f 	isb	sy
 8008276:	e772      	b.n	800815e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008278:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800827a:	f000 fa1f 	bl	80086bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800827e:	f000 fd4d 	bl	8008d1c <xTaskResumeAll>
 8008282:	e76c      	b.n	800815e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008284:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008286:	f000 fa19 	bl	80086bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800828a:	f000 fd47 	bl	8008d1c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800828e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008290:	4618      	mov	r0, r3
 8008292:	3738      	adds	r7, #56	@ 0x38
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}
 8008298:	e000ed04 	.word	0xe000ed04

0800829c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b090      	sub	sp, #64	@ 0x40
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	60f8      	str	r0, [r7, #12]
 80082a4:	60b9      	str	r1, [r7, #8]
 80082a6:	607a      	str	r2, [r7, #4]
 80082a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80082ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d10b      	bne.n	80082cc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80082b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082b8:	f383 8811 	msr	BASEPRI, r3
 80082bc:	f3bf 8f6f 	isb	sy
 80082c0:	f3bf 8f4f 	dsb	sy
 80082c4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80082c6:	bf00      	nop
 80082c8:	bf00      	nop
 80082ca:	e7fd      	b.n	80082c8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d103      	bne.n	80082da <xQueueGenericSendFromISR+0x3e>
 80082d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d101      	bne.n	80082de <xQueueGenericSendFromISR+0x42>
 80082da:	2301      	movs	r3, #1
 80082dc:	e000      	b.n	80082e0 <xQueueGenericSendFromISR+0x44>
 80082de:	2300      	movs	r3, #0
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d10b      	bne.n	80082fc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80082e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082e8:	f383 8811 	msr	BASEPRI, r3
 80082ec:	f3bf 8f6f 	isb	sy
 80082f0:	f3bf 8f4f 	dsb	sy
 80082f4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80082f6:	bf00      	nop
 80082f8:	bf00      	nop
 80082fa:	e7fd      	b.n	80082f8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	2b02      	cmp	r3, #2
 8008300:	d103      	bne.n	800830a <xQueueGenericSendFromISR+0x6e>
 8008302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008304:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008306:	2b01      	cmp	r3, #1
 8008308:	d101      	bne.n	800830e <xQueueGenericSendFromISR+0x72>
 800830a:	2301      	movs	r3, #1
 800830c:	e000      	b.n	8008310 <xQueueGenericSendFromISR+0x74>
 800830e:	2300      	movs	r3, #0
 8008310:	2b00      	cmp	r3, #0
 8008312:	d10b      	bne.n	800832c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008318:	f383 8811 	msr	BASEPRI, r3
 800831c:	f3bf 8f6f 	isb	sy
 8008320:	f3bf 8f4f 	dsb	sy
 8008324:	623b      	str	r3, [r7, #32]
}
 8008326:	bf00      	nop
 8008328:	bf00      	nop
 800832a:	e7fd      	b.n	8008328 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800832c:	f001 ff44 	bl	800a1b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008330:	f3ef 8211 	mrs	r2, BASEPRI
 8008334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008338:	f383 8811 	msr	BASEPRI, r3
 800833c:	f3bf 8f6f 	isb	sy
 8008340:	f3bf 8f4f 	dsb	sy
 8008344:	61fa      	str	r2, [r7, #28]
 8008346:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008348:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800834a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800834c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800834e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008352:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008354:	429a      	cmp	r2, r3
 8008356:	d302      	bcc.n	800835e <xQueueGenericSendFromISR+0xc2>
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	2b02      	cmp	r3, #2
 800835c:	d12f      	bne.n	80083be <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800835e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008360:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008364:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800836a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800836c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800836e:	683a      	ldr	r2, [r7, #0]
 8008370:	68b9      	ldr	r1, [r7, #8]
 8008372:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008374:	f000 f912 	bl	800859c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008378:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800837c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008380:	d112      	bne.n	80083a8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008386:	2b00      	cmp	r3, #0
 8008388:	d016      	beq.n	80083b8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800838a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800838c:	3324      	adds	r3, #36	@ 0x24
 800838e:	4618      	mov	r0, r3
 8008390:	f000 fedc 	bl	800914c <xTaskRemoveFromEventList>
 8008394:	4603      	mov	r3, r0
 8008396:	2b00      	cmp	r3, #0
 8008398:	d00e      	beq.n	80083b8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d00b      	beq.n	80083b8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2201      	movs	r2, #1
 80083a4:	601a      	str	r2, [r3, #0]
 80083a6:	e007      	b.n	80083b8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80083a8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80083ac:	3301      	adds	r3, #1
 80083ae:	b2db      	uxtb	r3, r3
 80083b0:	b25a      	sxtb	r2, r3
 80083b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80083b8:	2301      	movs	r3, #1
 80083ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80083bc:	e001      	b.n	80083c2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80083be:	2300      	movs	r3, #0
 80083c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083c4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80083cc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80083ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3740      	adds	r7, #64	@ 0x40
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}

080083d8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b08c      	sub	sp, #48	@ 0x30
 80083dc:	af00      	add	r7, sp, #0
 80083de:	60f8      	str	r0, [r7, #12]
 80083e0:	60b9      	str	r1, [r7, #8]
 80083e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80083e4:	2300      	movs	r3, #0
 80083e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80083ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d10b      	bne.n	800840a <xQueueReceive+0x32>
	__asm volatile
 80083f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083f6:	f383 8811 	msr	BASEPRI, r3
 80083fa:	f3bf 8f6f 	isb	sy
 80083fe:	f3bf 8f4f 	dsb	sy
 8008402:	623b      	str	r3, [r7, #32]
}
 8008404:	bf00      	nop
 8008406:	bf00      	nop
 8008408:	e7fd      	b.n	8008406 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d103      	bne.n	8008418 <xQueueReceive+0x40>
 8008410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008414:	2b00      	cmp	r3, #0
 8008416:	d101      	bne.n	800841c <xQueueReceive+0x44>
 8008418:	2301      	movs	r3, #1
 800841a:	e000      	b.n	800841e <xQueueReceive+0x46>
 800841c:	2300      	movs	r3, #0
 800841e:	2b00      	cmp	r3, #0
 8008420:	d10b      	bne.n	800843a <xQueueReceive+0x62>
	__asm volatile
 8008422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008426:	f383 8811 	msr	BASEPRI, r3
 800842a:	f3bf 8f6f 	isb	sy
 800842e:	f3bf 8f4f 	dsb	sy
 8008432:	61fb      	str	r3, [r7, #28]
}
 8008434:	bf00      	nop
 8008436:	bf00      	nop
 8008438:	e7fd      	b.n	8008436 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800843a:	f001 f86f 	bl	800951c <xTaskGetSchedulerState>
 800843e:	4603      	mov	r3, r0
 8008440:	2b00      	cmp	r3, #0
 8008442:	d102      	bne.n	800844a <xQueueReceive+0x72>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d101      	bne.n	800844e <xQueueReceive+0x76>
 800844a:	2301      	movs	r3, #1
 800844c:	e000      	b.n	8008450 <xQueueReceive+0x78>
 800844e:	2300      	movs	r3, #0
 8008450:	2b00      	cmp	r3, #0
 8008452:	d10b      	bne.n	800846c <xQueueReceive+0x94>
	__asm volatile
 8008454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008458:	f383 8811 	msr	BASEPRI, r3
 800845c:	f3bf 8f6f 	isb	sy
 8008460:	f3bf 8f4f 	dsb	sy
 8008464:	61bb      	str	r3, [r7, #24]
}
 8008466:	bf00      	nop
 8008468:	bf00      	nop
 800846a:	e7fd      	b.n	8008468 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800846c:	f001 fdc4 	bl	8009ff8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008474:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008478:	2b00      	cmp	r3, #0
 800847a:	d01f      	beq.n	80084bc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800847c:	68b9      	ldr	r1, [r7, #8]
 800847e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008480:	f000 f8f6 	bl	8008670 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008486:	1e5a      	subs	r2, r3, #1
 8008488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800848a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800848c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800848e:	691b      	ldr	r3, [r3, #16]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d00f      	beq.n	80084b4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008496:	3310      	adds	r3, #16
 8008498:	4618      	mov	r0, r3
 800849a:	f000 fe57 	bl	800914c <xTaskRemoveFromEventList>
 800849e:	4603      	mov	r3, r0
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d007      	beq.n	80084b4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80084a4:	4b3c      	ldr	r3, [pc, #240]	@ (8008598 <xQueueReceive+0x1c0>)
 80084a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084aa:	601a      	str	r2, [r3, #0]
 80084ac:	f3bf 8f4f 	dsb	sy
 80084b0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80084b4:	f001 fdd2 	bl	800a05c <vPortExitCritical>
				return pdPASS;
 80084b8:	2301      	movs	r3, #1
 80084ba:	e069      	b.n	8008590 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d103      	bne.n	80084ca <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80084c2:	f001 fdcb 	bl	800a05c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80084c6:	2300      	movs	r3, #0
 80084c8:	e062      	b.n	8008590 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80084ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d106      	bne.n	80084de <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80084d0:	f107 0310 	add.w	r3, r7, #16
 80084d4:	4618      	mov	r0, r3
 80084d6:	f000 fec5 	bl	8009264 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80084da:	2301      	movs	r3, #1
 80084dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80084de:	f001 fdbd 	bl	800a05c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80084e2:	f000 fc0d 	bl	8008d00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80084e6:	f001 fd87 	bl	8009ff8 <vPortEnterCritical>
 80084ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80084f0:	b25b      	sxtb	r3, r3
 80084f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80084f6:	d103      	bne.n	8008500 <xQueueReceive+0x128>
 80084f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084fa:	2200      	movs	r2, #0
 80084fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008502:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008506:	b25b      	sxtb	r3, r3
 8008508:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800850c:	d103      	bne.n	8008516 <xQueueReceive+0x13e>
 800850e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008510:	2200      	movs	r2, #0
 8008512:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008516:	f001 fda1 	bl	800a05c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800851a:	1d3a      	adds	r2, r7, #4
 800851c:	f107 0310 	add.w	r3, r7, #16
 8008520:	4611      	mov	r1, r2
 8008522:	4618      	mov	r0, r3
 8008524:	f000 feb4 	bl	8009290 <xTaskCheckForTimeOut>
 8008528:	4603      	mov	r3, r0
 800852a:	2b00      	cmp	r3, #0
 800852c:	d123      	bne.n	8008576 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800852e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008530:	f000 f916 	bl	8008760 <prvIsQueueEmpty>
 8008534:	4603      	mov	r3, r0
 8008536:	2b00      	cmp	r3, #0
 8008538:	d017      	beq.n	800856a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800853a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800853c:	3324      	adds	r3, #36	@ 0x24
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	4611      	mov	r1, r2
 8008542:	4618      	mov	r0, r3
 8008544:	f000 fdb0 	bl	80090a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008548:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800854a:	f000 f8b7 	bl	80086bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800854e:	f000 fbe5 	bl	8008d1c <xTaskResumeAll>
 8008552:	4603      	mov	r3, r0
 8008554:	2b00      	cmp	r3, #0
 8008556:	d189      	bne.n	800846c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008558:	4b0f      	ldr	r3, [pc, #60]	@ (8008598 <xQueueReceive+0x1c0>)
 800855a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800855e:	601a      	str	r2, [r3, #0]
 8008560:	f3bf 8f4f 	dsb	sy
 8008564:	f3bf 8f6f 	isb	sy
 8008568:	e780      	b.n	800846c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800856a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800856c:	f000 f8a6 	bl	80086bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008570:	f000 fbd4 	bl	8008d1c <xTaskResumeAll>
 8008574:	e77a      	b.n	800846c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008576:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008578:	f000 f8a0 	bl	80086bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800857c:	f000 fbce 	bl	8008d1c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008580:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008582:	f000 f8ed 	bl	8008760 <prvIsQueueEmpty>
 8008586:	4603      	mov	r3, r0
 8008588:	2b00      	cmp	r3, #0
 800858a:	f43f af6f 	beq.w	800846c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800858e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008590:	4618      	mov	r0, r3
 8008592:	3730      	adds	r7, #48	@ 0x30
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}
 8008598:	e000ed04 	.word	0xe000ed04

0800859c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b086      	sub	sp, #24
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	60f8      	str	r0, [r7, #12]
 80085a4:	60b9      	str	r1, [r7, #8]
 80085a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80085a8:	2300      	movs	r3, #0
 80085aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d10d      	bne.n	80085d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d14d      	bne.n	800865e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	689b      	ldr	r3, [r3, #8]
 80085c6:	4618      	mov	r0, r3
 80085c8:	f000 ffc6 	bl	8009558 <xTaskPriorityDisinherit>
 80085cc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2200      	movs	r2, #0
 80085d2:	609a      	str	r2, [r3, #8]
 80085d4:	e043      	b.n	800865e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d119      	bne.n	8008610 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	6858      	ldr	r0, [r3, #4]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085e4:	461a      	mov	r2, r3
 80085e6:	68b9      	ldr	r1, [r7, #8]
 80085e8:	f010 ff5b 	bl	80194a2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	685a      	ldr	r2, [r3, #4]
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085f4:	441a      	add	r2, r3
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	685a      	ldr	r2, [r3, #4]
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	689b      	ldr	r3, [r3, #8]
 8008602:	429a      	cmp	r2, r3
 8008604:	d32b      	bcc.n	800865e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681a      	ldr	r2, [r3, #0]
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	605a      	str	r2, [r3, #4]
 800860e:	e026      	b.n	800865e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	68d8      	ldr	r0, [r3, #12]
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008618:	461a      	mov	r2, r3
 800861a:	68b9      	ldr	r1, [r7, #8]
 800861c:	f010 ff41 	bl	80194a2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	68da      	ldr	r2, [r3, #12]
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008628:	425b      	negs	r3, r3
 800862a:	441a      	add	r2, r3
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	68da      	ldr	r2, [r3, #12]
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	429a      	cmp	r2, r3
 800863a:	d207      	bcs.n	800864c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	689a      	ldr	r2, [r3, #8]
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008644:	425b      	negs	r3, r3
 8008646:	441a      	add	r2, r3
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2b02      	cmp	r3, #2
 8008650:	d105      	bne.n	800865e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d002      	beq.n	800865e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	3b01      	subs	r3, #1
 800865c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	1c5a      	adds	r2, r3, #1
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008666:	697b      	ldr	r3, [r7, #20]
}
 8008668:	4618      	mov	r0, r3
 800866a:	3718      	adds	r7, #24
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b082      	sub	sp, #8
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800867e:	2b00      	cmp	r3, #0
 8008680:	d018      	beq.n	80086b4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	68da      	ldr	r2, [r3, #12]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800868a:	441a      	add	r2, r3
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	68da      	ldr	r2, [r3, #12]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	689b      	ldr	r3, [r3, #8]
 8008698:	429a      	cmp	r2, r3
 800869a:	d303      	bcc.n	80086a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681a      	ldr	r2, [r3, #0]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	68d9      	ldr	r1, [r3, #12]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086ac:	461a      	mov	r2, r3
 80086ae:	6838      	ldr	r0, [r7, #0]
 80086b0:	f010 fef7 	bl	80194a2 <memcpy>
	}
}
 80086b4:	bf00      	nop
 80086b6:	3708      	adds	r7, #8
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b084      	sub	sp, #16
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80086c4:	f001 fc98 	bl	8009ff8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80086ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80086d0:	e011      	b.n	80086f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d012      	beq.n	8008700 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	3324      	adds	r3, #36	@ 0x24
 80086de:	4618      	mov	r0, r3
 80086e0:	f000 fd34 	bl	800914c <xTaskRemoveFromEventList>
 80086e4:	4603      	mov	r3, r0
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d001      	beq.n	80086ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80086ea:	f000 fe35 	bl	8009358 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80086ee:	7bfb      	ldrb	r3, [r7, #15]
 80086f0:	3b01      	subs	r3, #1
 80086f2:	b2db      	uxtb	r3, r3
 80086f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80086f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	dce9      	bgt.n	80086d2 <prvUnlockQueue+0x16>
 80086fe:	e000      	b.n	8008702 <prvUnlockQueue+0x46>
					break;
 8008700:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	22ff      	movs	r2, #255	@ 0xff
 8008706:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800870a:	f001 fca7 	bl	800a05c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800870e:	f001 fc73 	bl	8009ff8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008718:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800871a:	e011      	b.n	8008740 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	691b      	ldr	r3, [r3, #16]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d012      	beq.n	800874a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	3310      	adds	r3, #16
 8008728:	4618      	mov	r0, r3
 800872a:	f000 fd0f 	bl	800914c <xTaskRemoveFromEventList>
 800872e:	4603      	mov	r3, r0
 8008730:	2b00      	cmp	r3, #0
 8008732:	d001      	beq.n	8008738 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008734:	f000 fe10 	bl	8009358 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008738:	7bbb      	ldrb	r3, [r7, #14]
 800873a:	3b01      	subs	r3, #1
 800873c:	b2db      	uxtb	r3, r3
 800873e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008740:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008744:	2b00      	cmp	r3, #0
 8008746:	dce9      	bgt.n	800871c <prvUnlockQueue+0x60>
 8008748:	e000      	b.n	800874c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800874a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	22ff      	movs	r2, #255	@ 0xff
 8008750:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008754:	f001 fc82 	bl	800a05c <vPortExitCritical>
}
 8008758:	bf00      	nop
 800875a:	3710      	adds	r7, #16
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}

08008760 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b084      	sub	sp, #16
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008768:	f001 fc46 	bl	8009ff8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008770:	2b00      	cmp	r3, #0
 8008772:	d102      	bne.n	800877a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008774:	2301      	movs	r3, #1
 8008776:	60fb      	str	r3, [r7, #12]
 8008778:	e001      	b.n	800877e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800877a:	2300      	movs	r3, #0
 800877c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800877e:	f001 fc6d 	bl	800a05c <vPortExitCritical>

	return xReturn;
 8008782:	68fb      	ldr	r3, [r7, #12]
}
 8008784:	4618      	mov	r0, r3
 8008786:	3710      	adds	r7, #16
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008794:	f001 fc30 	bl	8009ff8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d102      	bne.n	80087aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80087a4:	2301      	movs	r3, #1
 80087a6:	60fb      	str	r3, [r7, #12]
 80087a8:	e001      	b.n	80087ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80087aa:	2300      	movs	r3, #0
 80087ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80087ae:	f001 fc55 	bl	800a05c <vPortExitCritical>

	return xReturn;
 80087b2:	68fb      	ldr	r3, [r7, #12]
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3710      	adds	r7, #16
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80087bc:	b480      	push	{r7}
 80087be:	b085      	sub	sp, #20
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80087c6:	2300      	movs	r3, #0
 80087c8:	60fb      	str	r3, [r7, #12]
 80087ca:	e014      	b.n	80087f6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80087cc:	4a0f      	ldr	r2, [pc, #60]	@ (800880c <vQueueAddToRegistry+0x50>)
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d10b      	bne.n	80087f0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80087d8:	490c      	ldr	r1, [pc, #48]	@ (800880c <vQueueAddToRegistry+0x50>)
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	683a      	ldr	r2, [r7, #0]
 80087de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80087e2:	4a0a      	ldr	r2, [pc, #40]	@ (800880c <vQueueAddToRegistry+0x50>)
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	00db      	lsls	r3, r3, #3
 80087e8:	4413      	add	r3, r2
 80087ea:	687a      	ldr	r2, [r7, #4]
 80087ec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80087ee:	e006      	b.n	80087fe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	3301      	adds	r3, #1
 80087f4:	60fb      	str	r3, [r7, #12]
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2b07      	cmp	r3, #7
 80087fa:	d9e7      	bls.n	80087cc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80087fc:	bf00      	nop
 80087fe:	bf00      	nop
 8008800:	3714      	adds	r7, #20
 8008802:	46bd      	mov	sp, r7
 8008804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008808:	4770      	bx	lr
 800880a:	bf00      	nop
 800880c:	200059f0 	.word	0x200059f0

08008810 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008810:	b580      	push	{r7, lr}
 8008812:	b086      	sub	sp, #24
 8008814:	af00      	add	r7, sp, #0
 8008816:	60f8      	str	r0, [r7, #12]
 8008818:	60b9      	str	r1, [r7, #8]
 800881a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008820:	f001 fbea 	bl	8009ff8 <vPortEnterCritical>
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800882a:	b25b      	sxtb	r3, r3
 800882c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008830:	d103      	bne.n	800883a <vQueueWaitForMessageRestricted+0x2a>
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	2200      	movs	r2, #0
 8008836:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008840:	b25b      	sxtb	r3, r3
 8008842:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008846:	d103      	bne.n	8008850 <vQueueWaitForMessageRestricted+0x40>
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	2200      	movs	r2, #0
 800884c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008850:	f001 fc04 	bl	800a05c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008858:	2b00      	cmp	r3, #0
 800885a:	d106      	bne.n	800886a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	3324      	adds	r3, #36	@ 0x24
 8008860:	687a      	ldr	r2, [r7, #4]
 8008862:	68b9      	ldr	r1, [r7, #8]
 8008864:	4618      	mov	r0, r3
 8008866:	f000 fc45 	bl	80090f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800886a:	6978      	ldr	r0, [r7, #20]
 800886c:	f7ff ff26 	bl	80086bc <prvUnlockQueue>
	}
 8008870:	bf00      	nop
 8008872:	3718      	adds	r7, #24
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008878:	b580      	push	{r7, lr}
 800887a:	b08e      	sub	sp, #56	@ 0x38
 800887c:	af04      	add	r7, sp, #16
 800887e:	60f8      	str	r0, [r7, #12]
 8008880:	60b9      	str	r1, [r7, #8]
 8008882:	607a      	str	r2, [r7, #4]
 8008884:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008886:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008888:	2b00      	cmp	r3, #0
 800888a:	d10b      	bne.n	80088a4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800888c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008890:	f383 8811 	msr	BASEPRI, r3
 8008894:	f3bf 8f6f 	isb	sy
 8008898:	f3bf 8f4f 	dsb	sy
 800889c:	623b      	str	r3, [r7, #32]
}
 800889e:	bf00      	nop
 80088a0:	bf00      	nop
 80088a2:	e7fd      	b.n	80088a0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80088a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d10b      	bne.n	80088c2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80088aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088ae:	f383 8811 	msr	BASEPRI, r3
 80088b2:	f3bf 8f6f 	isb	sy
 80088b6:	f3bf 8f4f 	dsb	sy
 80088ba:	61fb      	str	r3, [r7, #28]
}
 80088bc:	bf00      	nop
 80088be:	bf00      	nop
 80088c0:	e7fd      	b.n	80088be <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80088c2:	235c      	movs	r3, #92	@ 0x5c
 80088c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	2b5c      	cmp	r3, #92	@ 0x5c
 80088ca:	d00b      	beq.n	80088e4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80088cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088d0:	f383 8811 	msr	BASEPRI, r3
 80088d4:	f3bf 8f6f 	isb	sy
 80088d8:	f3bf 8f4f 	dsb	sy
 80088dc:	61bb      	str	r3, [r7, #24]
}
 80088de:	bf00      	nop
 80088e0:	bf00      	nop
 80088e2:	e7fd      	b.n	80088e0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80088e4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80088e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d01e      	beq.n	800892a <xTaskCreateStatic+0xb2>
 80088ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d01b      	beq.n	800892a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80088f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088f4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80088f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80088fa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80088fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088fe:	2202      	movs	r2, #2
 8008900:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008904:	2300      	movs	r3, #0
 8008906:	9303      	str	r3, [sp, #12]
 8008908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800890a:	9302      	str	r3, [sp, #8]
 800890c:	f107 0314 	add.w	r3, r7, #20
 8008910:	9301      	str	r3, [sp, #4]
 8008912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008914:	9300      	str	r3, [sp, #0]
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	687a      	ldr	r2, [r7, #4]
 800891a:	68b9      	ldr	r1, [r7, #8]
 800891c:	68f8      	ldr	r0, [r7, #12]
 800891e:	f000 f850 	bl	80089c2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008922:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008924:	f000 f8de 	bl	8008ae4 <prvAddNewTaskToReadyList>
 8008928:	e001      	b.n	800892e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800892a:	2300      	movs	r3, #0
 800892c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800892e:	697b      	ldr	r3, [r7, #20]
	}
 8008930:	4618      	mov	r0, r3
 8008932:	3728      	adds	r7, #40	@ 0x28
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008938:	b580      	push	{r7, lr}
 800893a:	b08c      	sub	sp, #48	@ 0x30
 800893c:	af04      	add	r7, sp, #16
 800893e:	60f8      	str	r0, [r7, #12]
 8008940:	60b9      	str	r1, [r7, #8]
 8008942:	603b      	str	r3, [r7, #0]
 8008944:	4613      	mov	r3, r2
 8008946:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008948:	88fb      	ldrh	r3, [r7, #6]
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	4618      	mov	r0, r3
 800894e:	f001 fc75 	bl	800a23c <pvPortMalloc>
 8008952:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d00e      	beq.n	8008978 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800895a:	205c      	movs	r0, #92	@ 0x5c
 800895c:	f001 fc6e 	bl	800a23c <pvPortMalloc>
 8008960:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008962:	69fb      	ldr	r3, [r7, #28]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d003      	beq.n	8008970 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008968:	69fb      	ldr	r3, [r7, #28]
 800896a:	697a      	ldr	r2, [r7, #20]
 800896c:	631a      	str	r2, [r3, #48]	@ 0x30
 800896e:	e005      	b.n	800897c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008970:	6978      	ldr	r0, [r7, #20]
 8008972:	f001 fd31 	bl	800a3d8 <vPortFree>
 8008976:	e001      	b.n	800897c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008978:	2300      	movs	r3, #0
 800897a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800897c:	69fb      	ldr	r3, [r7, #28]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d017      	beq.n	80089b2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008982:	69fb      	ldr	r3, [r7, #28]
 8008984:	2200      	movs	r2, #0
 8008986:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800898a:	88fa      	ldrh	r2, [r7, #6]
 800898c:	2300      	movs	r3, #0
 800898e:	9303      	str	r3, [sp, #12]
 8008990:	69fb      	ldr	r3, [r7, #28]
 8008992:	9302      	str	r3, [sp, #8]
 8008994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008996:	9301      	str	r3, [sp, #4]
 8008998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800899a:	9300      	str	r3, [sp, #0]
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	68b9      	ldr	r1, [r7, #8]
 80089a0:	68f8      	ldr	r0, [r7, #12]
 80089a2:	f000 f80e 	bl	80089c2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80089a6:	69f8      	ldr	r0, [r7, #28]
 80089a8:	f000 f89c 	bl	8008ae4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80089ac:	2301      	movs	r3, #1
 80089ae:	61bb      	str	r3, [r7, #24]
 80089b0:	e002      	b.n	80089b8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80089b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80089b6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80089b8:	69bb      	ldr	r3, [r7, #24]
	}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3720      	adds	r7, #32
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}

080089c2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80089c2:	b580      	push	{r7, lr}
 80089c4:	b088      	sub	sp, #32
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	60f8      	str	r0, [r7, #12]
 80089ca:	60b9      	str	r1, [r7, #8]
 80089cc:	607a      	str	r2, [r7, #4]
 80089ce:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80089d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089d2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	009b      	lsls	r3, r3, #2
 80089d8:	461a      	mov	r2, r3
 80089da:	21a5      	movs	r1, #165	@ 0xa5
 80089dc:	f010 fc98 	bl	8019310 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80089e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80089ea:	3b01      	subs	r3, #1
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	4413      	add	r3, r2
 80089f0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80089f2:	69bb      	ldr	r3, [r7, #24]
 80089f4:	f023 0307 	bic.w	r3, r3, #7
 80089f8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80089fa:	69bb      	ldr	r3, [r7, #24]
 80089fc:	f003 0307 	and.w	r3, r3, #7
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d00b      	beq.n	8008a1c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a08:	f383 8811 	msr	BASEPRI, r3
 8008a0c:	f3bf 8f6f 	isb	sy
 8008a10:	f3bf 8f4f 	dsb	sy
 8008a14:	617b      	str	r3, [r7, #20]
}
 8008a16:	bf00      	nop
 8008a18:	bf00      	nop
 8008a1a:	e7fd      	b.n	8008a18 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d01f      	beq.n	8008a62 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008a22:	2300      	movs	r3, #0
 8008a24:	61fb      	str	r3, [r7, #28]
 8008a26:	e012      	b.n	8008a4e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008a28:	68ba      	ldr	r2, [r7, #8]
 8008a2a:	69fb      	ldr	r3, [r7, #28]
 8008a2c:	4413      	add	r3, r2
 8008a2e:	7819      	ldrb	r1, [r3, #0]
 8008a30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a32:	69fb      	ldr	r3, [r7, #28]
 8008a34:	4413      	add	r3, r2
 8008a36:	3334      	adds	r3, #52	@ 0x34
 8008a38:	460a      	mov	r2, r1
 8008a3a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008a3c:	68ba      	ldr	r2, [r7, #8]
 8008a3e:	69fb      	ldr	r3, [r7, #28]
 8008a40:	4413      	add	r3, r2
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d006      	beq.n	8008a56 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008a48:	69fb      	ldr	r3, [r7, #28]
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	61fb      	str	r3, [r7, #28]
 8008a4e:	69fb      	ldr	r3, [r7, #28]
 8008a50:	2b0f      	cmp	r3, #15
 8008a52:	d9e9      	bls.n	8008a28 <prvInitialiseNewTask+0x66>
 8008a54:	e000      	b.n	8008a58 <prvInitialiseNewTask+0x96>
			{
				break;
 8008a56:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008a60:	e003      	b.n	8008a6a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a64:	2200      	movs	r2, #0
 8008a66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a6c:	2b37      	cmp	r3, #55	@ 0x37
 8008a6e:	d901      	bls.n	8008a74 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008a70:	2337      	movs	r3, #55	@ 0x37
 8008a72:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008a78:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008a7e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a82:	2200      	movs	r2, #0
 8008a84:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a88:	3304      	adds	r3, #4
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f7ff f966 	bl	8007d5c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a92:	3318      	adds	r3, #24
 8008a94:	4618      	mov	r0, r3
 8008a96:	f7ff f961 	bl	8007d5c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a9e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aa2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aa8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008aae:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ab8:	2200      	movs	r2, #0
 8008aba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008abe:	683a      	ldr	r2, [r7, #0]
 8008ac0:	68f9      	ldr	r1, [r7, #12]
 8008ac2:	69b8      	ldr	r0, [r7, #24]
 8008ac4:	f001 f966 	bl	8009d94 <pxPortInitialiseStack>
 8008ac8:	4602      	mov	r2, r0
 8008aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008acc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d002      	beq.n	8008ada <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ad6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ad8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ada:	bf00      	nop
 8008adc:	3720      	adds	r7, #32
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}
	...

08008ae4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b082      	sub	sp, #8
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008aec:	f001 fa84 	bl	8009ff8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008af0:	4b2d      	ldr	r3, [pc, #180]	@ (8008ba8 <prvAddNewTaskToReadyList+0xc4>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	3301      	adds	r3, #1
 8008af6:	4a2c      	ldr	r2, [pc, #176]	@ (8008ba8 <prvAddNewTaskToReadyList+0xc4>)
 8008af8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008afa:	4b2c      	ldr	r3, [pc, #176]	@ (8008bac <prvAddNewTaskToReadyList+0xc8>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d109      	bne.n	8008b16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008b02:	4a2a      	ldr	r2, [pc, #168]	@ (8008bac <prvAddNewTaskToReadyList+0xc8>)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008b08:	4b27      	ldr	r3, [pc, #156]	@ (8008ba8 <prvAddNewTaskToReadyList+0xc4>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d110      	bne.n	8008b32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008b10:	f000 fc46 	bl	80093a0 <prvInitialiseTaskLists>
 8008b14:	e00d      	b.n	8008b32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008b16:	4b26      	ldr	r3, [pc, #152]	@ (8008bb0 <prvAddNewTaskToReadyList+0xcc>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d109      	bne.n	8008b32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008b1e:	4b23      	ldr	r3, [pc, #140]	@ (8008bac <prvAddNewTaskToReadyList+0xc8>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	d802      	bhi.n	8008b32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008b2c:	4a1f      	ldr	r2, [pc, #124]	@ (8008bac <prvAddNewTaskToReadyList+0xc8>)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008b32:	4b20      	ldr	r3, [pc, #128]	@ (8008bb4 <prvAddNewTaskToReadyList+0xd0>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	3301      	adds	r3, #1
 8008b38:	4a1e      	ldr	r2, [pc, #120]	@ (8008bb4 <prvAddNewTaskToReadyList+0xd0>)
 8008b3a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008b3c:	4b1d      	ldr	r3, [pc, #116]	@ (8008bb4 <prvAddNewTaskToReadyList+0xd0>)
 8008b3e:	681a      	ldr	r2, [r3, #0]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b48:	4b1b      	ldr	r3, [pc, #108]	@ (8008bb8 <prvAddNewTaskToReadyList+0xd4>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d903      	bls.n	8008b58 <prvAddNewTaskToReadyList+0x74>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b54:	4a18      	ldr	r2, [pc, #96]	@ (8008bb8 <prvAddNewTaskToReadyList+0xd4>)
 8008b56:	6013      	str	r3, [r2, #0]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b5c:	4613      	mov	r3, r2
 8008b5e:	009b      	lsls	r3, r3, #2
 8008b60:	4413      	add	r3, r2
 8008b62:	009b      	lsls	r3, r3, #2
 8008b64:	4a15      	ldr	r2, [pc, #84]	@ (8008bbc <prvAddNewTaskToReadyList+0xd8>)
 8008b66:	441a      	add	r2, r3
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	3304      	adds	r3, #4
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	4610      	mov	r0, r2
 8008b70:	f7ff f901 	bl	8007d76 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008b74:	f001 fa72 	bl	800a05c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008b78:	4b0d      	ldr	r3, [pc, #52]	@ (8008bb0 <prvAddNewTaskToReadyList+0xcc>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d00e      	beq.n	8008b9e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008b80:	4b0a      	ldr	r3, [pc, #40]	@ (8008bac <prvAddNewTaskToReadyList+0xc8>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d207      	bcs.n	8008b9e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8008bc0 <prvAddNewTaskToReadyList+0xdc>)
 8008b90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b94:	601a      	str	r2, [r3, #0]
 8008b96:	f3bf 8f4f 	dsb	sy
 8008b9a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b9e:	bf00      	nop
 8008ba0:	3708      	adds	r7, #8
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
 8008ba6:	bf00      	nop
 8008ba8:	20005f04 	.word	0x20005f04
 8008bac:	20005a30 	.word	0x20005a30
 8008bb0:	20005f10 	.word	0x20005f10
 8008bb4:	20005f20 	.word	0x20005f20
 8008bb8:	20005f0c 	.word	0x20005f0c
 8008bbc:	20005a34 	.word	0x20005a34
 8008bc0:	e000ed04 	.word	0xe000ed04

08008bc4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b084      	sub	sp, #16
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d018      	beq.n	8008c08 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008bd6:	4b14      	ldr	r3, [pc, #80]	@ (8008c28 <vTaskDelay+0x64>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d00b      	beq.n	8008bf6 <vTaskDelay+0x32>
	__asm volatile
 8008bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008be2:	f383 8811 	msr	BASEPRI, r3
 8008be6:	f3bf 8f6f 	isb	sy
 8008bea:	f3bf 8f4f 	dsb	sy
 8008bee:	60bb      	str	r3, [r7, #8]
}
 8008bf0:	bf00      	nop
 8008bf2:	bf00      	nop
 8008bf4:	e7fd      	b.n	8008bf2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008bf6:	f000 f883 	bl	8008d00 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008bfa:	2100      	movs	r1, #0
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f000 fd1b 	bl	8009638 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008c02:	f000 f88b 	bl	8008d1c <xTaskResumeAll>
 8008c06:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d107      	bne.n	8008c1e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008c0e:	4b07      	ldr	r3, [pc, #28]	@ (8008c2c <vTaskDelay+0x68>)
 8008c10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c14:	601a      	str	r2, [r3, #0]
 8008c16:	f3bf 8f4f 	dsb	sy
 8008c1a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008c1e:	bf00      	nop
 8008c20:	3710      	adds	r7, #16
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	bf00      	nop
 8008c28:	20005f2c 	.word	0x20005f2c
 8008c2c:	e000ed04 	.word	0xe000ed04

08008c30 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b08a      	sub	sp, #40	@ 0x28
 8008c34:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008c36:	2300      	movs	r3, #0
 8008c38:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008c3e:	463a      	mov	r2, r7
 8008c40:	1d39      	adds	r1, r7, #4
 8008c42:	f107 0308 	add.w	r3, r7, #8
 8008c46:	4618      	mov	r0, r3
 8008c48:	f7ff f834 	bl	8007cb4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008c4c:	6839      	ldr	r1, [r7, #0]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	68ba      	ldr	r2, [r7, #8]
 8008c52:	9202      	str	r2, [sp, #8]
 8008c54:	9301      	str	r3, [sp, #4]
 8008c56:	2300      	movs	r3, #0
 8008c58:	9300      	str	r3, [sp, #0]
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	460a      	mov	r2, r1
 8008c5e:	4922      	ldr	r1, [pc, #136]	@ (8008ce8 <vTaskStartScheduler+0xb8>)
 8008c60:	4822      	ldr	r0, [pc, #136]	@ (8008cec <vTaskStartScheduler+0xbc>)
 8008c62:	f7ff fe09 	bl	8008878 <xTaskCreateStatic>
 8008c66:	4603      	mov	r3, r0
 8008c68:	4a21      	ldr	r2, [pc, #132]	@ (8008cf0 <vTaskStartScheduler+0xc0>)
 8008c6a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008c6c:	4b20      	ldr	r3, [pc, #128]	@ (8008cf0 <vTaskStartScheduler+0xc0>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d002      	beq.n	8008c7a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008c74:	2301      	movs	r3, #1
 8008c76:	617b      	str	r3, [r7, #20]
 8008c78:	e001      	b.n	8008c7e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d102      	bne.n	8008c8a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008c84:	f000 fd2c 	bl	80096e0 <xTimerCreateTimerTask>
 8008c88:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	2b01      	cmp	r3, #1
 8008c8e:	d116      	bne.n	8008cbe <vTaskStartScheduler+0x8e>
	__asm volatile
 8008c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c94:	f383 8811 	msr	BASEPRI, r3
 8008c98:	f3bf 8f6f 	isb	sy
 8008c9c:	f3bf 8f4f 	dsb	sy
 8008ca0:	613b      	str	r3, [r7, #16]
}
 8008ca2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008ca4:	4b13      	ldr	r3, [pc, #76]	@ (8008cf4 <vTaskStartScheduler+0xc4>)
 8008ca6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008caa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008cac:	4b12      	ldr	r3, [pc, #72]	@ (8008cf8 <vTaskStartScheduler+0xc8>)
 8008cae:	2201      	movs	r2, #1
 8008cb0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008cb2:	4b12      	ldr	r3, [pc, #72]	@ (8008cfc <vTaskStartScheduler+0xcc>)
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008cb8:	f001 f8fa 	bl	8009eb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008cbc:	e00f      	b.n	8008cde <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008cc4:	d10b      	bne.n	8008cde <vTaskStartScheduler+0xae>
	__asm volatile
 8008cc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cca:	f383 8811 	msr	BASEPRI, r3
 8008cce:	f3bf 8f6f 	isb	sy
 8008cd2:	f3bf 8f4f 	dsb	sy
 8008cd6:	60fb      	str	r3, [r7, #12]
}
 8008cd8:	bf00      	nop
 8008cda:	bf00      	nop
 8008cdc:	e7fd      	b.n	8008cda <vTaskStartScheduler+0xaa>
}
 8008cde:	bf00      	nop
 8008ce0:	3718      	adds	r7, #24
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
 8008ce6:	bf00      	nop
 8008ce8:	0801a8a8 	.word	0x0801a8a8
 8008cec:	08009371 	.word	0x08009371
 8008cf0:	20005f28 	.word	0x20005f28
 8008cf4:	20005f24 	.word	0x20005f24
 8008cf8:	20005f10 	.word	0x20005f10
 8008cfc:	20005f08 	.word	0x20005f08

08008d00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008d00:	b480      	push	{r7}
 8008d02:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008d04:	4b04      	ldr	r3, [pc, #16]	@ (8008d18 <vTaskSuspendAll+0x18>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	3301      	adds	r3, #1
 8008d0a:	4a03      	ldr	r2, [pc, #12]	@ (8008d18 <vTaskSuspendAll+0x18>)
 8008d0c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008d0e:	bf00      	nop
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr
 8008d18:	20005f2c 	.word	0x20005f2c

08008d1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b084      	sub	sp, #16
 8008d20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008d22:	2300      	movs	r3, #0
 8008d24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008d26:	2300      	movs	r3, #0
 8008d28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008d2a:	4b42      	ldr	r3, [pc, #264]	@ (8008e34 <xTaskResumeAll+0x118>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d10b      	bne.n	8008d4a <xTaskResumeAll+0x2e>
	__asm volatile
 8008d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d36:	f383 8811 	msr	BASEPRI, r3
 8008d3a:	f3bf 8f6f 	isb	sy
 8008d3e:	f3bf 8f4f 	dsb	sy
 8008d42:	603b      	str	r3, [r7, #0]
}
 8008d44:	bf00      	nop
 8008d46:	bf00      	nop
 8008d48:	e7fd      	b.n	8008d46 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008d4a:	f001 f955 	bl	8009ff8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008d4e:	4b39      	ldr	r3, [pc, #228]	@ (8008e34 <xTaskResumeAll+0x118>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	3b01      	subs	r3, #1
 8008d54:	4a37      	ldr	r2, [pc, #220]	@ (8008e34 <xTaskResumeAll+0x118>)
 8008d56:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d58:	4b36      	ldr	r3, [pc, #216]	@ (8008e34 <xTaskResumeAll+0x118>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d162      	bne.n	8008e26 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008d60:	4b35      	ldr	r3, [pc, #212]	@ (8008e38 <xTaskResumeAll+0x11c>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d05e      	beq.n	8008e26 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008d68:	e02f      	b.n	8008dca <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d6a:	4b34      	ldr	r3, [pc, #208]	@ (8008e3c <xTaskResumeAll+0x120>)
 8008d6c:	68db      	ldr	r3, [r3, #12]
 8008d6e:	68db      	ldr	r3, [r3, #12]
 8008d70:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	3318      	adds	r3, #24
 8008d76:	4618      	mov	r0, r3
 8008d78:	f7ff f85a 	bl	8007e30 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	3304      	adds	r3, #4
 8008d80:	4618      	mov	r0, r3
 8008d82:	f7ff f855 	bl	8007e30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d8a:	4b2d      	ldr	r3, [pc, #180]	@ (8008e40 <xTaskResumeAll+0x124>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d903      	bls.n	8008d9a <xTaskResumeAll+0x7e>
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d96:	4a2a      	ldr	r2, [pc, #168]	@ (8008e40 <xTaskResumeAll+0x124>)
 8008d98:	6013      	str	r3, [r2, #0]
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d9e:	4613      	mov	r3, r2
 8008da0:	009b      	lsls	r3, r3, #2
 8008da2:	4413      	add	r3, r2
 8008da4:	009b      	lsls	r3, r3, #2
 8008da6:	4a27      	ldr	r2, [pc, #156]	@ (8008e44 <xTaskResumeAll+0x128>)
 8008da8:	441a      	add	r2, r3
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	3304      	adds	r3, #4
 8008dae:	4619      	mov	r1, r3
 8008db0:	4610      	mov	r0, r2
 8008db2:	f7fe ffe0 	bl	8007d76 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dba:	4b23      	ldr	r3, [pc, #140]	@ (8008e48 <xTaskResumeAll+0x12c>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	d302      	bcc.n	8008dca <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008dc4:	4b21      	ldr	r3, [pc, #132]	@ (8008e4c <xTaskResumeAll+0x130>)
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008dca:	4b1c      	ldr	r3, [pc, #112]	@ (8008e3c <xTaskResumeAll+0x120>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d1cb      	bne.n	8008d6a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d001      	beq.n	8008ddc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008dd8:	f000 fb80 	bl	80094dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008ddc:	4b1c      	ldr	r3, [pc, #112]	@ (8008e50 <xTaskResumeAll+0x134>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d010      	beq.n	8008e0a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008de8:	f000 f846 	bl	8008e78 <xTaskIncrementTick>
 8008dec:	4603      	mov	r3, r0
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d002      	beq.n	8008df8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008df2:	4b16      	ldr	r3, [pc, #88]	@ (8008e4c <xTaskResumeAll+0x130>)
 8008df4:	2201      	movs	r2, #1
 8008df6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	3b01      	subs	r3, #1
 8008dfc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d1f1      	bne.n	8008de8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008e04:	4b12      	ldr	r3, [pc, #72]	@ (8008e50 <xTaskResumeAll+0x134>)
 8008e06:	2200      	movs	r2, #0
 8008e08:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008e0a:	4b10      	ldr	r3, [pc, #64]	@ (8008e4c <xTaskResumeAll+0x130>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d009      	beq.n	8008e26 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008e12:	2301      	movs	r3, #1
 8008e14:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008e16:	4b0f      	ldr	r3, [pc, #60]	@ (8008e54 <xTaskResumeAll+0x138>)
 8008e18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e1c:	601a      	str	r2, [r3, #0]
 8008e1e:	f3bf 8f4f 	dsb	sy
 8008e22:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008e26:	f001 f919 	bl	800a05c <vPortExitCritical>

	return xAlreadyYielded;
 8008e2a:	68bb      	ldr	r3, [r7, #8]
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3710      	adds	r7, #16
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}
 8008e34:	20005f2c 	.word	0x20005f2c
 8008e38:	20005f04 	.word	0x20005f04
 8008e3c:	20005ec4 	.word	0x20005ec4
 8008e40:	20005f0c 	.word	0x20005f0c
 8008e44:	20005a34 	.word	0x20005a34
 8008e48:	20005a30 	.word	0x20005a30
 8008e4c:	20005f18 	.word	0x20005f18
 8008e50:	20005f14 	.word	0x20005f14
 8008e54:	e000ed04 	.word	0xe000ed04

08008e58 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b083      	sub	sp, #12
 8008e5c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008e5e:	4b05      	ldr	r3, [pc, #20]	@ (8008e74 <xTaskGetTickCount+0x1c>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008e64:	687b      	ldr	r3, [r7, #4]
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	370c      	adds	r7, #12
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e70:	4770      	bx	lr
 8008e72:	bf00      	nop
 8008e74:	20005f08 	.word	0x20005f08

08008e78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b086      	sub	sp, #24
 8008e7c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e82:	4b4f      	ldr	r3, [pc, #316]	@ (8008fc0 <xTaskIncrementTick+0x148>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	f040 8090 	bne.w	8008fac <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008e8c:	4b4d      	ldr	r3, [pc, #308]	@ (8008fc4 <xTaskIncrementTick+0x14c>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	3301      	adds	r3, #1
 8008e92:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008e94:	4a4b      	ldr	r2, [pc, #300]	@ (8008fc4 <xTaskIncrementTick+0x14c>)
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d121      	bne.n	8008ee4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008ea0:	4b49      	ldr	r3, [pc, #292]	@ (8008fc8 <xTaskIncrementTick+0x150>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d00b      	beq.n	8008ec2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8008eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eae:	f383 8811 	msr	BASEPRI, r3
 8008eb2:	f3bf 8f6f 	isb	sy
 8008eb6:	f3bf 8f4f 	dsb	sy
 8008eba:	603b      	str	r3, [r7, #0]
}
 8008ebc:	bf00      	nop
 8008ebe:	bf00      	nop
 8008ec0:	e7fd      	b.n	8008ebe <xTaskIncrementTick+0x46>
 8008ec2:	4b41      	ldr	r3, [pc, #260]	@ (8008fc8 <xTaskIncrementTick+0x150>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	60fb      	str	r3, [r7, #12]
 8008ec8:	4b40      	ldr	r3, [pc, #256]	@ (8008fcc <xTaskIncrementTick+0x154>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a3e      	ldr	r2, [pc, #248]	@ (8008fc8 <xTaskIncrementTick+0x150>)
 8008ece:	6013      	str	r3, [r2, #0]
 8008ed0:	4a3e      	ldr	r2, [pc, #248]	@ (8008fcc <xTaskIncrementTick+0x154>)
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	6013      	str	r3, [r2, #0]
 8008ed6:	4b3e      	ldr	r3, [pc, #248]	@ (8008fd0 <xTaskIncrementTick+0x158>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	3301      	adds	r3, #1
 8008edc:	4a3c      	ldr	r2, [pc, #240]	@ (8008fd0 <xTaskIncrementTick+0x158>)
 8008ede:	6013      	str	r3, [r2, #0]
 8008ee0:	f000 fafc 	bl	80094dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008ee4:	4b3b      	ldr	r3, [pc, #236]	@ (8008fd4 <xTaskIncrementTick+0x15c>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	693a      	ldr	r2, [r7, #16]
 8008eea:	429a      	cmp	r2, r3
 8008eec:	d349      	bcc.n	8008f82 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008eee:	4b36      	ldr	r3, [pc, #216]	@ (8008fc8 <xTaskIncrementTick+0x150>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d104      	bne.n	8008f02 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ef8:	4b36      	ldr	r3, [pc, #216]	@ (8008fd4 <xTaskIncrementTick+0x15c>)
 8008efa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008efe:	601a      	str	r2, [r3, #0]
					break;
 8008f00:	e03f      	b.n	8008f82 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f02:	4b31      	ldr	r3, [pc, #196]	@ (8008fc8 <xTaskIncrementTick+0x150>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	68db      	ldr	r3, [r3, #12]
 8008f08:	68db      	ldr	r3, [r3, #12]
 8008f0a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	685b      	ldr	r3, [r3, #4]
 8008f10:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008f12:	693a      	ldr	r2, [r7, #16]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d203      	bcs.n	8008f22 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008f1a:	4a2e      	ldr	r2, [pc, #184]	@ (8008fd4 <xTaskIncrementTick+0x15c>)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008f20:	e02f      	b.n	8008f82 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	3304      	adds	r3, #4
 8008f26:	4618      	mov	r0, r3
 8008f28:	f7fe ff82 	bl	8007e30 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d004      	beq.n	8008f3e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	3318      	adds	r3, #24
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f7fe ff79 	bl	8007e30 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f42:	4b25      	ldr	r3, [pc, #148]	@ (8008fd8 <xTaskIncrementTick+0x160>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d903      	bls.n	8008f52 <xTaskIncrementTick+0xda>
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f4e:	4a22      	ldr	r2, [pc, #136]	@ (8008fd8 <xTaskIncrementTick+0x160>)
 8008f50:	6013      	str	r3, [r2, #0]
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f56:	4613      	mov	r3, r2
 8008f58:	009b      	lsls	r3, r3, #2
 8008f5a:	4413      	add	r3, r2
 8008f5c:	009b      	lsls	r3, r3, #2
 8008f5e:	4a1f      	ldr	r2, [pc, #124]	@ (8008fdc <xTaskIncrementTick+0x164>)
 8008f60:	441a      	add	r2, r3
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	3304      	adds	r3, #4
 8008f66:	4619      	mov	r1, r3
 8008f68:	4610      	mov	r0, r2
 8008f6a:	f7fe ff04 	bl	8007d76 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f72:	4b1b      	ldr	r3, [pc, #108]	@ (8008fe0 <xTaskIncrementTick+0x168>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d3b8      	bcc.n	8008eee <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f80:	e7b5      	b.n	8008eee <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008f82:	4b17      	ldr	r3, [pc, #92]	@ (8008fe0 <xTaskIncrementTick+0x168>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f88:	4914      	ldr	r1, [pc, #80]	@ (8008fdc <xTaskIncrementTick+0x164>)
 8008f8a:	4613      	mov	r3, r2
 8008f8c:	009b      	lsls	r3, r3, #2
 8008f8e:	4413      	add	r3, r2
 8008f90:	009b      	lsls	r3, r3, #2
 8008f92:	440b      	add	r3, r1
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	d901      	bls.n	8008f9e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008f9e:	4b11      	ldr	r3, [pc, #68]	@ (8008fe4 <xTaskIncrementTick+0x16c>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d007      	beq.n	8008fb6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	617b      	str	r3, [r7, #20]
 8008faa:	e004      	b.n	8008fb6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008fac:	4b0e      	ldr	r3, [pc, #56]	@ (8008fe8 <xTaskIncrementTick+0x170>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	3301      	adds	r3, #1
 8008fb2:	4a0d      	ldr	r2, [pc, #52]	@ (8008fe8 <xTaskIncrementTick+0x170>)
 8008fb4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008fb6:	697b      	ldr	r3, [r7, #20]
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3718      	adds	r7, #24
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}
 8008fc0:	20005f2c 	.word	0x20005f2c
 8008fc4:	20005f08 	.word	0x20005f08
 8008fc8:	20005ebc 	.word	0x20005ebc
 8008fcc:	20005ec0 	.word	0x20005ec0
 8008fd0:	20005f1c 	.word	0x20005f1c
 8008fd4:	20005f24 	.word	0x20005f24
 8008fd8:	20005f0c 	.word	0x20005f0c
 8008fdc:	20005a34 	.word	0x20005a34
 8008fe0:	20005a30 	.word	0x20005a30
 8008fe4:	20005f18 	.word	0x20005f18
 8008fe8:	20005f14 	.word	0x20005f14

08008fec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008fec:	b480      	push	{r7}
 8008fee:	b085      	sub	sp, #20
 8008ff0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008ff2:	4b28      	ldr	r3, [pc, #160]	@ (8009094 <vTaskSwitchContext+0xa8>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d003      	beq.n	8009002 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008ffa:	4b27      	ldr	r3, [pc, #156]	@ (8009098 <vTaskSwitchContext+0xac>)
 8008ffc:	2201      	movs	r2, #1
 8008ffe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009000:	e042      	b.n	8009088 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8009002:	4b25      	ldr	r3, [pc, #148]	@ (8009098 <vTaskSwitchContext+0xac>)
 8009004:	2200      	movs	r2, #0
 8009006:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009008:	4b24      	ldr	r3, [pc, #144]	@ (800909c <vTaskSwitchContext+0xb0>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	60fb      	str	r3, [r7, #12]
 800900e:	e011      	b.n	8009034 <vTaskSwitchContext+0x48>
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d10b      	bne.n	800902e <vTaskSwitchContext+0x42>
	__asm volatile
 8009016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800901a:	f383 8811 	msr	BASEPRI, r3
 800901e:	f3bf 8f6f 	isb	sy
 8009022:	f3bf 8f4f 	dsb	sy
 8009026:	607b      	str	r3, [r7, #4]
}
 8009028:	bf00      	nop
 800902a:	bf00      	nop
 800902c:	e7fd      	b.n	800902a <vTaskSwitchContext+0x3e>
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	3b01      	subs	r3, #1
 8009032:	60fb      	str	r3, [r7, #12]
 8009034:	491a      	ldr	r1, [pc, #104]	@ (80090a0 <vTaskSwitchContext+0xb4>)
 8009036:	68fa      	ldr	r2, [r7, #12]
 8009038:	4613      	mov	r3, r2
 800903a:	009b      	lsls	r3, r3, #2
 800903c:	4413      	add	r3, r2
 800903e:	009b      	lsls	r3, r3, #2
 8009040:	440b      	add	r3, r1
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d0e3      	beq.n	8009010 <vTaskSwitchContext+0x24>
 8009048:	68fa      	ldr	r2, [r7, #12]
 800904a:	4613      	mov	r3, r2
 800904c:	009b      	lsls	r3, r3, #2
 800904e:	4413      	add	r3, r2
 8009050:	009b      	lsls	r3, r3, #2
 8009052:	4a13      	ldr	r2, [pc, #76]	@ (80090a0 <vTaskSwitchContext+0xb4>)
 8009054:	4413      	add	r3, r2
 8009056:	60bb      	str	r3, [r7, #8]
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	685a      	ldr	r2, [r3, #4]
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	605a      	str	r2, [r3, #4]
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	685a      	ldr	r2, [r3, #4]
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	3308      	adds	r3, #8
 800906a:	429a      	cmp	r2, r3
 800906c:	d104      	bne.n	8009078 <vTaskSwitchContext+0x8c>
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	685a      	ldr	r2, [r3, #4]
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	605a      	str	r2, [r3, #4]
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	68db      	ldr	r3, [r3, #12]
 800907e:	4a09      	ldr	r2, [pc, #36]	@ (80090a4 <vTaskSwitchContext+0xb8>)
 8009080:	6013      	str	r3, [r2, #0]
 8009082:	4a06      	ldr	r2, [pc, #24]	@ (800909c <vTaskSwitchContext+0xb0>)
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	6013      	str	r3, [r2, #0]
}
 8009088:	bf00      	nop
 800908a:	3714      	adds	r7, #20
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr
 8009094:	20005f2c 	.word	0x20005f2c
 8009098:	20005f18 	.word	0x20005f18
 800909c:	20005f0c 	.word	0x20005f0c
 80090a0:	20005a34 	.word	0x20005a34
 80090a4:	20005a30 	.word	0x20005a30

080090a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b084      	sub	sp, #16
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d10b      	bne.n	80090d0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80090b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090bc:	f383 8811 	msr	BASEPRI, r3
 80090c0:	f3bf 8f6f 	isb	sy
 80090c4:	f3bf 8f4f 	dsb	sy
 80090c8:	60fb      	str	r3, [r7, #12]
}
 80090ca:	bf00      	nop
 80090cc:	bf00      	nop
 80090ce:	e7fd      	b.n	80090cc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80090d0:	4b07      	ldr	r3, [pc, #28]	@ (80090f0 <vTaskPlaceOnEventList+0x48>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	3318      	adds	r3, #24
 80090d6:	4619      	mov	r1, r3
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f7fe fe70 	bl	8007dbe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80090de:	2101      	movs	r1, #1
 80090e0:	6838      	ldr	r0, [r7, #0]
 80090e2:	f000 faa9 	bl	8009638 <prvAddCurrentTaskToDelayedList>
}
 80090e6:	bf00      	nop
 80090e8:	3710      	adds	r7, #16
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	20005a30 	.word	0x20005a30

080090f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b086      	sub	sp, #24
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	60f8      	str	r0, [r7, #12]
 80090fc:	60b9      	str	r1, [r7, #8]
 80090fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d10b      	bne.n	800911e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800910a:	f383 8811 	msr	BASEPRI, r3
 800910e:	f3bf 8f6f 	isb	sy
 8009112:	f3bf 8f4f 	dsb	sy
 8009116:	617b      	str	r3, [r7, #20]
}
 8009118:	bf00      	nop
 800911a:	bf00      	nop
 800911c:	e7fd      	b.n	800911a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800911e:	4b0a      	ldr	r3, [pc, #40]	@ (8009148 <vTaskPlaceOnEventListRestricted+0x54>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	3318      	adds	r3, #24
 8009124:	4619      	mov	r1, r3
 8009126:	68f8      	ldr	r0, [r7, #12]
 8009128:	f7fe fe25 	bl	8007d76 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d002      	beq.n	8009138 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009132:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009136:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009138:	6879      	ldr	r1, [r7, #4]
 800913a:	68b8      	ldr	r0, [r7, #8]
 800913c:	f000 fa7c 	bl	8009638 <prvAddCurrentTaskToDelayedList>
	}
 8009140:	bf00      	nop
 8009142:	3718      	adds	r7, #24
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}
 8009148:	20005a30 	.word	0x20005a30

0800914c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b086      	sub	sp, #24
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	68db      	ldr	r3, [r3, #12]
 8009158:	68db      	ldr	r3, [r3, #12]
 800915a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d10b      	bne.n	800917a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009166:	f383 8811 	msr	BASEPRI, r3
 800916a:	f3bf 8f6f 	isb	sy
 800916e:	f3bf 8f4f 	dsb	sy
 8009172:	60fb      	str	r3, [r7, #12]
}
 8009174:	bf00      	nop
 8009176:	bf00      	nop
 8009178:	e7fd      	b.n	8009176 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	3318      	adds	r3, #24
 800917e:	4618      	mov	r0, r3
 8009180:	f7fe fe56 	bl	8007e30 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009184:	4b1d      	ldr	r3, [pc, #116]	@ (80091fc <xTaskRemoveFromEventList+0xb0>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d11d      	bne.n	80091c8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	3304      	adds	r3, #4
 8009190:	4618      	mov	r0, r3
 8009192:	f7fe fe4d 	bl	8007e30 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800919a:	4b19      	ldr	r3, [pc, #100]	@ (8009200 <xTaskRemoveFromEventList+0xb4>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	429a      	cmp	r2, r3
 80091a0:	d903      	bls.n	80091aa <xTaskRemoveFromEventList+0x5e>
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091a6:	4a16      	ldr	r2, [pc, #88]	@ (8009200 <xTaskRemoveFromEventList+0xb4>)
 80091a8:	6013      	str	r3, [r2, #0]
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091ae:	4613      	mov	r3, r2
 80091b0:	009b      	lsls	r3, r3, #2
 80091b2:	4413      	add	r3, r2
 80091b4:	009b      	lsls	r3, r3, #2
 80091b6:	4a13      	ldr	r2, [pc, #76]	@ (8009204 <xTaskRemoveFromEventList+0xb8>)
 80091b8:	441a      	add	r2, r3
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	3304      	adds	r3, #4
 80091be:	4619      	mov	r1, r3
 80091c0:	4610      	mov	r0, r2
 80091c2:	f7fe fdd8 	bl	8007d76 <vListInsertEnd>
 80091c6:	e005      	b.n	80091d4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	3318      	adds	r3, #24
 80091cc:	4619      	mov	r1, r3
 80091ce:	480e      	ldr	r0, [pc, #56]	@ (8009208 <xTaskRemoveFromEventList+0xbc>)
 80091d0:	f7fe fdd1 	bl	8007d76 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091d8:	4b0c      	ldr	r3, [pc, #48]	@ (800920c <xTaskRemoveFromEventList+0xc0>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091de:	429a      	cmp	r2, r3
 80091e0:	d905      	bls.n	80091ee <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80091e2:	2301      	movs	r3, #1
 80091e4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80091e6:	4b0a      	ldr	r3, [pc, #40]	@ (8009210 <xTaskRemoveFromEventList+0xc4>)
 80091e8:	2201      	movs	r2, #1
 80091ea:	601a      	str	r2, [r3, #0]
 80091ec:	e001      	b.n	80091f2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80091ee:	2300      	movs	r3, #0
 80091f0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80091f2:	697b      	ldr	r3, [r7, #20]
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3718      	adds	r7, #24
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}
 80091fc:	20005f2c 	.word	0x20005f2c
 8009200:	20005f0c 	.word	0x20005f0c
 8009204:	20005a34 	.word	0x20005a34
 8009208:	20005ec4 	.word	0x20005ec4
 800920c:	20005a30 	.word	0x20005a30
 8009210:	20005f18 	.word	0x20005f18

08009214 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b084      	sub	sp, #16
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d10b      	bne.n	800923a <vTaskSetTimeOutState+0x26>
	__asm volatile
 8009222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009226:	f383 8811 	msr	BASEPRI, r3
 800922a:	f3bf 8f6f 	isb	sy
 800922e:	f3bf 8f4f 	dsb	sy
 8009232:	60fb      	str	r3, [r7, #12]
}
 8009234:	bf00      	nop
 8009236:	bf00      	nop
 8009238:	e7fd      	b.n	8009236 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800923a:	f000 fedd 	bl	8009ff8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800923e:	4b07      	ldr	r3, [pc, #28]	@ (800925c <vTaskSetTimeOutState+0x48>)
 8009240:	681a      	ldr	r2, [r3, #0]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8009246:	4b06      	ldr	r3, [pc, #24]	@ (8009260 <vTaskSetTimeOutState+0x4c>)
 8009248:	681a      	ldr	r2, [r3, #0]
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800924e:	f000 ff05 	bl	800a05c <vPortExitCritical>
}
 8009252:	bf00      	nop
 8009254:	3710      	adds	r7, #16
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
 800925a:	bf00      	nop
 800925c:	20005f1c 	.word	0x20005f1c
 8009260:	20005f08 	.word	0x20005f08

08009264 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009264:	b480      	push	{r7}
 8009266:	b083      	sub	sp, #12
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800926c:	4b06      	ldr	r3, [pc, #24]	@ (8009288 <vTaskInternalSetTimeOutState+0x24>)
 800926e:	681a      	ldr	r2, [r3, #0]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009274:	4b05      	ldr	r3, [pc, #20]	@ (800928c <vTaskInternalSetTimeOutState+0x28>)
 8009276:	681a      	ldr	r2, [r3, #0]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	605a      	str	r2, [r3, #4]
}
 800927c:	bf00      	nop
 800927e:	370c      	adds	r7, #12
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr
 8009288:	20005f1c 	.word	0x20005f1c
 800928c:	20005f08 	.word	0x20005f08

08009290 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b088      	sub	sp, #32
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d10b      	bne.n	80092b8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80092a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092a4:	f383 8811 	msr	BASEPRI, r3
 80092a8:	f3bf 8f6f 	isb	sy
 80092ac:	f3bf 8f4f 	dsb	sy
 80092b0:	613b      	str	r3, [r7, #16]
}
 80092b2:	bf00      	nop
 80092b4:	bf00      	nop
 80092b6:	e7fd      	b.n	80092b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d10b      	bne.n	80092d6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80092be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092c2:	f383 8811 	msr	BASEPRI, r3
 80092c6:	f3bf 8f6f 	isb	sy
 80092ca:	f3bf 8f4f 	dsb	sy
 80092ce:	60fb      	str	r3, [r7, #12]
}
 80092d0:	bf00      	nop
 80092d2:	bf00      	nop
 80092d4:	e7fd      	b.n	80092d2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80092d6:	f000 fe8f 	bl	8009ff8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80092da:	4b1d      	ldr	r3, [pc, #116]	@ (8009350 <xTaskCheckForTimeOut+0xc0>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	69ba      	ldr	r2, [r7, #24]
 80092e6:	1ad3      	subs	r3, r2, r3
 80092e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80092f2:	d102      	bne.n	80092fa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80092f4:	2300      	movs	r3, #0
 80092f6:	61fb      	str	r3, [r7, #28]
 80092f8:	e023      	b.n	8009342 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681a      	ldr	r2, [r3, #0]
 80092fe:	4b15      	ldr	r3, [pc, #84]	@ (8009354 <xTaskCheckForTimeOut+0xc4>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	429a      	cmp	r2, r3
 8009304:	d007      	beq.n	8009316 <xTaskCheckForTimeOut+0x86>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	685b      	ldr	r3, [r3, #4]
 800930a:	69ba      	ldr	r2, [r7, #24]
 800930c:	429a      	cmp	r2, r3
 800930e:	d302      	bcc.n	8009316 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009310:	2301      	movs	r3, #1
 8009312:	61fb      	str	r3, [r7, #28]
 8009314:	e015      	b.n	8009342 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	697a      	ldr	r2, [r7, #20]
 800931c:	429a      	cmp	r2, r3
 800931e:	d20b      	bcs.n	8009338 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	681a      	ldr	r2, [r3, #0]
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	1ad2      	subs	r2, r2, r3
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f7ff ff99 	bl	8009264 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009332:	2300      	movs	r3, #0
 8009334:	61fb      	str	r3, [r7, #28]
 8009336:	e004      	b.n	8009342 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	2200      	movs	r2, #0
 800933c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800933e:	2301      	movs	r3, #1
 8009340:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009342:	f000 fe8b 	bl	800a05c <vPortExitCritical>

	return xReturn;
 8009346:	69fb      	ldr	r3, [r7, #28]
}
 8009348:	4618      	mov	r0, r3
 800934a:	3720      	adds	r7, #32
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}
 8009350:	20005f08 	.word	0x20005f08
 8009354:	20005f1c 	.word	0x20005f1c

08009358 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009358:	b480      	push	{r7}
 800935a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800935c:	4b03      	ldr	r3, [pc, #12]	@ (800936c <vTaskMissedYield+0x14>)
 800935e:	2201      	movs	r2, #1
 8009360:	601a      	str	r2, [r3, #0]
}
 8009362:	bf00      	nop
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr
 800936c:	20005f18 	.word	0x20005f18

08009370 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b082      	sub	sp, #8
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009378:	f000 f852 	bl	8009420 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800937c:	4b06      	ldr	r3, [pc, #24]	@ (8009398 <prvIdleTask+0x28>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	2b01      	cmp	r3, #1
 8009382:	d9f9      	bls.n	8009378 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009384:	4b05      	ldr	r3, [pc, #20]	@ (800939c <prvIdleTask+0x2c>)
 8009386:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800938a:	601a      	str	r2, [r3, #0]
 800938c:	f3bf 8f4f 	dsb	sy
 8009390:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009394:	e7f0      	b.n	8009378 <prvIdleTask+0x8>
 8009396:	bf00      	nop
 8009398:	20005a34 	.word	0x20005a34
 800939c:	e000ed04 	.word	0xe000ed04

080093a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b082      	sub	sp, #8
 80093a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80093a6:	2300      	movs	r3, #0
 80093a8:	607b      	str	r3, [r7, #4]
 80093aa:	e00c      	b.n	80093c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80093ac:	687a      	ldr	r2, [r7, #4]
 80093ae:	4613      	mov	r3, r2
 80093b0:	009b      	lsls	r3, r3, #2
 80093b2:	4413      	add	r3, r2
 80093b4:	009b      	lsls	r3, r3, #2
 80093b6:	4a12      	ldr	r2, [pc, #72]	@ (8009400 <prvInitialiseTaskLists+0x60>)
 80093b8:	4413      	add	r3, r2
 80093ba:	4618      	mov	r0, r3
 80093bc:	f7fe fcae 	bl	8007d1c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	3301      	adds	r3, #1
 80093c4:	607b      	str	r3, [r7, #4]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2b37      	cmp	r3, #55	@ 0x37
 80093ca:	d9ef      	bls.n	80093ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80093cc:	480d      	ldr	r0, [pc, #52]	@ (8009404 <prvInitialiseTaskLists+0x64>)
 80093ce:	f7fe fca5 	bl	8007d1c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80093d2:	480d      	ldr	r0, [pc, #52]	@ (8009408 <prvInitialiseTaskLists+0x68>)
 80093d4:	f7fe fca2 	bl	8007d1c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80093d8:	480c      	ldr	r0, [pc, #48]	@ (800940c <prvInitialiseTaskLists+0x6c>)
 80093da:	f7fe fc9f 	bl	8007d1c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80093de:	480c      	ldr	r0, [pc, #48]	@ (8009410 <prvInitialiseTaskLists+0x70>)
 80093e0:	f7fe fc9c 	bl	8007d1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80093e4:	480b      	ldr	r0, [pc, #44]	@ (8009414 <prvInitialiseTaskLists+0x74>)
 80093e6:	f7fe fc99 	bl	8007d1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80093ea:	4b0b      	ldr	r3, [pc, #44]	@ (8009418 <prvInitialiseTaskLists+0x78>)
 80093ec:	4a05      	ldr	r2, [pc, #20]	@ (8009404 <prvInitialiseTaskLists+0x64>)
 80093ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80093f0:	4b0a      	ldr	r3, [pc, #40]	@ (800941c <prvInitialiseTaskLists+0x7c>)
 80093f2:	4a05      	ldr	r2, [pc, #20]	@ (8009408 <prvInitialiseTaskLists+0x68>)
 80093f4:	601a      	str	r2, [r3, #0]
}
 80093f6:	bf00      	nop
 80093f8:	3708      	adds	r7, #8
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}
 80093fe:	bf00      	nop
 8009400:	20005a34 	.word	0x20005a34
 8009404:	20005e94 	.word	0x20005e94
 8009408:	20005ea8 	.word	0x20005ea8
 800940c:	20005ec4 	.word	0x20005ec4
 8009410:	20005ed8 	.word	0x20005ed8
 8009414:	20005ef0 	.word	0x20005ef0
 8009418:	20005ebc 	.word	0x20005ebc
 800941c:	20005ec0 	.word	0x20005ec0

08009420 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b082      	sub	sp, #8
 8009424:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009426:	e019      	b.n	800945c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009428:	f000 fde6 	bl	8009ff8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800942c:	4b10      	ldr	r3, [pc, #64]	@ (8009470 <prvCheckTasksWaitingTermination+0x50>)
 800942e:	68db      	ldr	r3, [r3, #12]
 8009430:	68db      	ldr	r3, [r3, #12]
 8009432:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	3304      	adds	r3, #4
 8009438:	4618      	mov	r0, r3
 800943a:	f7fe fcf9 	bl	8007e30 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800943e:	4b0d      	ldr	r3, [pc, #52]	@ (8009474 <prvCheckTasksWaitingTermination+0x54>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	3b01      	subs	r3, #1
 8009444:	4a0b      	ldr	r2, [pc, #44]	@ (8009474 <prvCheckTasksWaitingTermination+0x54>)
 8009446:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009448:	4b0b      	ldr	r3, [pc, #44]	@ (8009478 <prvCheckTasksWaitingTermination+0x58>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	3b01      	subs	r3, #1
 800944e:	4a0a      	ldr	r2, [pc, #40]	@ (8009478 <prvCheckTasksWaitingTermination+0x58>)
 8009450:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009452:	f000 fe03 	bl	800a05c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f000 f810 	bl	800947c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800945c:	4b06      	ldr	r3, [pc, #24]	@ (8009478 <prvCheckTasksWaitingTermination+0x58>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d1e1      	bne.n	8009428 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009464:	bf00      	nop
 8009466:	bf00      	nop
 8009468:	3708      	adds	r7, #8
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}
 800946e:	bf00      	nop
 8009470:	20005ed8 	.word	0x20005ed8
 8009474:	20005f04 	.word	0x20005f04
 8009478:	20005eec 	.word	0x20005eec

0800947c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800947c:	b580      	push	{r7, lr}
 800947e:	b084      	sub	sp, #16
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800948a:	2b00      	cmp	r3, #0
 800948c:	d108      	bne.n	80094a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009492:	4618      	mov	r0, r3
 8009494:	f000 ffa0 	bl	800a3d8 <vPortFree>
				vPortFree( pxTCB );
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f000 ff9d 	bl	800a3d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800949e:	e019      	b.n	80094d4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80094a6:	2b01      	cmp	r3, #1
 80094a8:	d103      	bne.n	80094b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 ff94 	bl	800a3d8 <vPortFree>
	}
 80094b0:	e010      	b.n	80094d4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80094b8:	2b02      	cmp	r3, #2
 80094ba:	d00b      	beq.n	80094d4 <prvDeleteTCB+0x58>
	__asm volatile
 80094bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094c0:	f383 8811 	msr	BASEPRI, r3
 80094c4:	f3bf 8f6f 	isb	sy
 80094c8:	f3bf 8f4f 	dsb	sy
 80094cc:	60fb      	str	r3, [r7, #12]
}
 80094ce:	bf00      	nop
 80094d0:	bf00      	nop
 80094d2:	e7fd      	b.n	80094d0 <prvDeleteTCB+0x54>
	}
 80094d4:	bf00      	nop
 80094d6:	3710      	adds	r7, #16
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}

080094dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80094dc:	b480      	push	{r7}
 80094de:	b083      	sub	sp, #12
 80094e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80094e2:	4b0c      	ldr	r3, [pc, #48]	@ (8009514 <prvResetNextTaskUnblockTime+0x38>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d104      	bne.n	80094f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80094ec:	4b0a      	ldr	r3, [pc, #40]	@ (8009518 <prvResetNextTaskUnblockTime+0x3c>)
 80094ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80094f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80094f4:	e008      	b.n	8009508 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094f6:	4b07      	ldr	r3, [pc, #28]	@ (8009514 <prvResetNextTaskUnblockTime+0x38>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	68db      	ldr	r3, [r3, #12]
 80094fc:	68db      	ldr	r3, [r3, #12]
 80094fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	685b      	ldr	r3, [r3, #4]
 8009504:	4a04      	ldr	r2, [pc, #16]	@ (8009518 <prvResetNextTaskUnblockTime+0x3c>)
 8009506:	6013      	str	r3, [r2, #0]
}
 8009508:	bf00      	nop
 800950a:	370c      	adds	r7, #12
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr
 8009514:	20005ebc 	.word	0x20005ebc
 8009518:	20005f24 	.word	0x20005f24

0800951c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800951c:	b480      	push	{r7}
 800951e:	b083      	sub	sp, #12
 8009520:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009522:	4b0b      	ldr	r3, [pc, #44]	@ (8009550 <xTaskGetSchedulerState+0x34>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d102      	bne.n	8009530 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800952a:	2301      	movs	r3, #1
 800952c:	607b      	str	r3, [r7, #4]
 800952e:	e008      	b.n	8009542 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009530:	4b08      	ldr	r3, [pc, #32]	@ (8009554 <xTaskGetSchedulerState+0x38>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d102      	bne.n	800953e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009538:	2302      	movs	r3, #2
 800953a:	607b      	str	r3, [r7, #4]
 800953c:	e001      	b.n	8009542 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800953e:	2300      	movs	r3, #0
 8009540:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009542:	687b      	ldr	r3, [r7, #4]
	}
 8009544:	4618      	mov	r0, r3
 8009546:	370c      	adds	r7, #12
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr
 8009550:	20005f10 	.word	0x20005f10
 8009554:	20005f2c 	.word	0x20005f2c

08009558 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009558:	b580      	push	{r7, lr}
 800955a:	b086      	sub	sp, #24
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009564:	2300      	movs	r3, #0
 8009566:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d058      	beq.n	8009620 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800956e:	4b2f      	ldr	r3, [pc, #188]	@ (800962c <xTaskPriorityDisinherit+0xd4>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	693a      	ldr	r2, [r7, #16]
 8009574:	429a      	cmp	r2, r3
 8009576:	d00b      	beq.n	8009590 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800957c:	f383 8811 	msr	BASEPRI, r3
 8009580:	f3bf 8f6f 	isb	sy
 8009584:	f3bf 8f4f 	dsb	sy
 8009588:	60fb      	str	r3, [r7, #12]
}
 800958a:	bf00      	nop
 800958c:	bf00      	nop
 800958e:	e7fd      	b.n	800958c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009590:	693b      	ldr	r3, [r7, #16]
 8009592:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009594:	2b00      	cmp	r3, #0
 8009596:	d10b      	bne.n	80095b0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800959c:	f383 8811 	msr	BASEPRI, r3
 80095a0:	f3bf 8f6f 	isb	sy
 80095a4:	f3bf 8f4f 	dsb	sy
 80095a8:	60bb      	str	r3, [r7, #8]
}
 80095aa:	bf00      	nop
 80095ac:	bf00      	nop
 80095ae:	e7fd      	b.n	80095ac <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095b4:	1e5a      	subs	r2, r3, #1
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80095ba:	693b      	ldr	r3, [r7, #16]
 80095bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d02c      	beq.n	8009620 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d128      	bne.n	8009620 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	3304      	adds	r3, #4
 80095d2:	4618      	mov	r0, r3
 80095d4:	f7fe fc2c 	bl	8007e30 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095e0:	693b      	ldr	r3, [r7, #16]
 80095e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095e4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095f0:	4b0f      	ldr	r3, [pc, #60]	@ (8009630 <xTaskPriorityDisinherit+0xd8>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d903      	bls.n	8009600 <xTaskPriorityDisinherit+0xa8>
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095fc:	4a0c      	ldr	r2, [pc, #48]	@ (8009630 <xTaskPriorityDisinherit+0xd8>)
 80095fe:	6013      	str	r3, [r2, #0]
 8009600:	693b      	ldr	r3, [r7, #16]
 8009602:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009604:	4613      	mov	r3, r2
 8009606:	009b      	lsls	r3, r3, #2
 8009608:	4413      	add	r3, r2
 800960a:	009b      	lsls	r3, r3, #2
 800960c:	4a09      	ldr	r2, [pc, #36]	@ (8009634 <xTaskPriorityDisinherit+0xdc>)
 800960e:	441a      	add	r2, r3
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	3304      	adds	r3, #4
 8009614:	4619      	mov	r1, r3
 8009616:	4610      	mov	r0, r2
 8009618:	f7fe fbad 	bl	8007d76 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800961c:	2301      	movs	r3, #1
 800961e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009620:	697b      	ldr	r3, [r7, #20]
	}
 8009622:	4618      	mov	r0, r3
 8009624:	3718      	adds	r7, #24
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
 800962a:	bf00      	nop
 800962c:	20005a30 	.word	0x20005a30
 8009630:	20005f0c 	.word	0x20005f0c
 8009634:	20005a34 	.word	0x20005a34

08009638 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b084      	sub	sp, #16
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009642:	4b21      	ldr	r3, [pc, #132]	@ (80096c8 <prvAddCurrentTaskToDelayedList+0x90>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009648:	4b20      	ldr	r3, [pc, #128]	@ (80096cc <prvAddCurrentTaskToDelayedList+0x94>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	3304      	adds	r3, #4
 800964e:	4618      	mov	r0, r3
 8009650:	f7fe fbee 	bl	8007e30 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800965a:	d10a      	bne.n	8009672 <prvAddCurrentTaskToDelayedList+0x3a>
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d007      	beq.n	8009672 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009662:	4b1a      	ldr	r3, [pc, #104]	@ (80096cc <prvAddCurrentTaskToDelayedList+0x94>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	3304      	adds	r3, #4
 8009668:	4619      	mov	r1, r3
 800966a:	4819      	ldr	r0, [pc, #100]	@ (80096d0 <prvAddCurrentTaskToDelayedList+0x98>)
 800966c:	f7fe fb83 	bl	8007d76 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009670:	e026      	b.n	80096c0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009672:	68fa      	ldr	r2, [r7, #12]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	4413      	add	r3, r2
 8009678:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800967a:	4b14      	ldr	r3, [pc, #80]	@ (80096cc <prvAddCurrentTaskToDelayedList+0x94>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	68ba      	ldr	r2, [r7, #8]
 8009680:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009682:	68ba      	ldr	r2, [r7, #8]
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	429a      	cmp	r2, r3
 8009688:	d209      	bcs.n	800969e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800968a:	4b12      	ldr	r3, [pc, #72]	@ (80096d4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800968c:	681a      	ldr	r2, [r3, #0]
 800968e:	4b0f      	ldr	r3, [pc, #60]	@ (80096cc <prvAddCurrentTaskToDelayedList+0x94>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	3304      	adds	r3, #4
 8009694:	4619      	mov	r1, r3
 8009696:	4610      	mov	r0, r2
 8009698:	f7fe fb91 	bl	8007dbe <vListInsert>
}
 800969c:	e010      	b.n	80096c0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800969e:	4b0e      	ldr	r3, [pc, #56]	@ (80096d8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80096a0:	681a      	ldr	r2, [r3, #0]
 80096a2:	4b0a      	ldr	r3, [pc, #40]	@ (80096cc <prvAddCurrentTaskToDelayedList+0x94>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	3304      	adds	r3, #4
 80096a8:	4619      	mov	r1, r3
 80096aa:	4610      	mov	r0, r2
 80096ac:	f7fe fb87 	bl	8007dbe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80096b0:	4b0a      	ldr	r3, [pc, #40]	@ (80096dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	68ba      	ldr	r2, [r7, #8]
 80096b6:	429a      	cmp	r2, r3
 80096b8:	d202      	bcs.n	80096c0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80096ba:	4a08      	ldr	r2, [pc, #32]	@ (80096dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	6013      	str	r3, [r2, #0]
}
 80096c0:	bf00      	nop
 80096c2:	3710      	adds	r7, #16
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}
 80096c8:	20005f08 	.word	0x20005f08
 80096cc:	20005a30 	.word	0x20005a30
 80096d0:	20005ef0 	.word	0x20005ef0
 80096d4:	20005ec0 	.word	0x20005ec0
 80096d8:	20005ebc 	.word	0x20005ebc
 80096dc:	20005f24 	.word	0x20005f24

080096e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b08a      	sub	sp, #40	@ 0x28
 80096e4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80096e6:	2300      	movs	r3, #0
 80096e8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80096ea:	f000 fb13 	bl	8009d14 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80096ee:	4b1d      	ldr	r3, [pc, #116]	@ (8009764 <xTimerCreateTimerTask+0x84>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d021      	beq.n	800973a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80096f6:	2300      	movs	r3, #0
 80096f8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80096fa:	2300      	movs	r3, #0
 80096fc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80096fe:	1d3a      	adds	r2, r7, #4
 8009700:	f107 0108 	add.w	r1, r7, #8
 8009704:	f107 030c 	add.w	r3, r7, #12
 8009708:	4618      	mov	r0, r3
 800970a:	f7fe faed 	bl	8007ce8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800970e:	6879      	ldr	r1, [r7, #4]
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	68fa      	ldr	r2, [r7, #12]
 8009714:	9202      	str	r2, [sp, #8]
 8009716:	9301      	str	r3, [sp, #4]
 8009718:	2302      	movs	r3, #2
 800971a:	9300      	str	r3, [sp, #0]
 800971c:	2300      	movs	r3, #0
 800971e:	460a      	mov	r2, r1
 8009720:	4911      	ldr	r1, [pc, #68]	@ (8009768 <xTimerCreateTimerTask+0x88>)
 8009722:	4812      	ldr	r0, [pc, #72]	@ (800976c <xTimerCreateTimerTask+0x8c>)
 8009724:	f7ff f8a8 	bl	8008878 <xTaskCreateStatic>
 8009728:	4603      	mov	r3, r0
 800972a:	4a11      	ldr	r2, [pc, #68]	@ (8009770 <xTimerCreateTimerTask+0x90>)
 800972c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800972e:	4b10      	ldr	r3, [pc, #64]	@ (8009770 <xTimerCreateTimerTask+0x90>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d001      	beq.n	800973a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009736:	2301      	movs	r3, #1
 8009738:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d10b      	bne.n	8009758 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009744:	f383 8811 	msr	BASEPRI, r3
 8009748:	f3bf 8f6f 	isb	sy
 800974c:	f3bf 8f4f 	dsb	sy
 8009750:	613b      	str	r3, [r7, #16]
}
 8009752:	bf00      	nop
 8009754:	bf00      	nop
 8009756:	e7fd      	b.n	8009754 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009758:	697b      	ldr	r3, [r7, #20]
}
 800975a:	4618      	mov	r0, r3
 800975c:	3718      	adds	r7, #24
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
 8009762:	bf00      	nop
 8009764:	20005f60 	.word	0x20005f60
 8009768:	0801a8b0 	.word	0x0801a8b0
 800976c:	080098ad 	.word	0x080098ad
 8009770:	20005f64 	.word	0x20005f64

08009774 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b08a      	sub	sp, #40	@ 0x28
 8009778:	af00      	add	r7, sp, #0
 800977a:	60f8      	str	r0, [r7, #12]
 800977c:	60b9      	str	r1, [r7, #8]
 800977e:	607a      	str	r2, [r7, #4]
 8009780:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009782:	2300      	movs	r3, #0
 8009784:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d10b      	bne.n	80097a4 <xTimerGenericCommand+0x30>
	__asm volatile
 800978c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009790:	f383 8811 	msr	BASEPRI, r3
 8009794:	f3bf 8f6f 	isb	sy
 8009798:	f3bf 8f4f 	dsb	sy
 800979c:	623b      	str	r3, [r7, #32]
}
 800979e:	bf00      	nop
 80097a0:	bf00      	nop
 80097a2:	e7fd      	b.n	80097a0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80097a4:	4b19      	ldr	r3, [pc, #100]	@ (800980c <xTimerGenericCommand+0x98>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d02a      	beq.n	8009802 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	2b05      	cmp	r3, #5
 80097bc:	dc18      	bgt.n	80097f0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80097be:	f7ff fead 	bl	800951c <xTaskGetSchedulerState>
 80097c2:	4603      	mov	r3, r0
 80097c4:	2b02      	cmp	r3, #2
 80097c6:	d109      	bne.n	80097dc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80097c8:	4b10      	ldr	r3, [pc, #64]	@ (800980c <xTimerGenericCommand+0x98>)
 80097ca:	6818      	ldr	r0, [r3, #0]
 80097cc:	f107 0110 	add.w	r1, r7, #16
 80097d0:	2300      	movs	r3, #0
 80097d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097d4:	f7fe fc60 	bl	8008098 <xQueueGenericSend>
 80097d8:	6278      	str	r0, [r7, #36]	@ 0x24
 80097da:	e012      	b.n	8009802 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80097dc:	4b0b      	ldr	r3, [pc, #44]	@ (800980c <xTimerGenericCommand+0x98>)
 80097de:	6818      	ldr	r0, [r3, #0]
 80097e0:	f107 0110 	add.w	r1, r7, #16
 80097e4:	2300      	movs	r3, #0
 80097e6:	2200      	movs	r2, #0
 80097e8:	f7fe fc56 	bl	8008098 <xQueueGenericSend>
 80097ec:	6278      	str	r0, [r7, #36]	@ 0x24
 80097ee:	e008      	b.n	8009802 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80097f0:	4b06      	ldr	r3, [pc, #24]	@ (800980c <xTimerGenericCommand+0x98>)
 80097f2:	6818      	ldr	r0, [r3, #0]
 80097f4:	f107 0110 	add.w	r1, r7, #16
 80097f8:	2300      	movs	r3, #0
 80097fa:	683a      	ldr	r2, [r7, #0]
 80097fc:	f7fe fd4e 	bl	800829c <xQueueGenericSendFromISR>
 8009800:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009804:	4618      	mov	r0, r3
 8009806:	3728      	adds	r7, #40	@ 0x28
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}
 800980c:	20005f60 	.word	0x20005f60

08009810 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b088      	sub	sp, #32
 8009814:	af02      	add	r7, sp, #8
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800981a:	4b23      	ldr	r3, [pc, #140]	@ (80098a8 <prvProcessExpiredTimer+0x98>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	68db      	ldr	r3, [r3, #12]
 8009820:	68db      	ldr	r3, [r3, #12]
 8009822:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	3304      	adds	r3, #4
 8009828:	4618      	mov	r0, r3
 800982a:	f7fe fb01 	bl	8007e30 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009834:	f003 0304 	and.w	r3, r3, #4
 8009838:	2b00      	cmp	r3, #0
 800983a:	d023      	beq.n	8009884 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	699a      	ldr	r2, [r3, #24]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	18d1      	adds	r1, r2, r3
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	683a      	ldr	r2, [r7, #0]
 8009848:	6978      	ldr	r0, [r7, #20]
 800984a:	f000 f8d5 	bl	80099f8 <prvInsertTimerInActiveList>
 800984e:	4603      	mov	r3, r0
 8009850:	2b00      	cmp	r3, #0
 8009852:	d020      	beq.n	8009896 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009854:	2300      	movs	r3, #0
 8009856:	9300      	str	r3, [sp, #0]
 8009858:	2300      	movs	r3, #0
 800985a:	687a      	ldr	r2, [r7, #4]
 800985c:	2100      	movs	r1, #0
 800985e:	6978      	ldr	r0, [r7, #20]
 8009860:	f7ff ff88 	bl	8009774 <xTimerGenericCommand>
 8009864:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d114      	bne.n	8009896 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800986c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009870:	f383 8811 	msr	BASEPRI, r3
 8009874:	f3bf 8f6f 	isb	sy
 8009878:	f3bf 8f4f 	dsb	sy
 800987c:	60fb      	str	r3, [r7, #12]
}
 800987e:	bf00      	nop
 8009880:	bf00      	nop
 8009882:	e7fd      	b.n	8009880 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009884:	697b      	ldr	r3, [r7, #20]
 8009886:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800988a:	f023 0301 	bic.w	r3, r3, #1
 800988e:	b2da      	uxtb	r2, r3
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	6a1b      	ldr	r3, [r3, #32]
 800989a:	6978      	ldr	r0, [r7, #20]
 800989c:	4798      	blx	r3
}
 800989e:	bf00      	nop
 80098a0:	3718      	adds	r7, #24
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}
 80098a6:	bf00      	nop
 80098a8:	20005f58 	.word	0x20005f58

080098ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b084      	sub	sp, #16
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80098b4:	f107 0308 	add.w	r3, r7, #8
 80098b8:	4618      	mov	r0, r3
 80098ba:	f000 f859 	bl	8009970 <prvGetNextExpireTime>
 80098be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	4619      	mov	r1, r3
 80098c4:	68f8      	ldr	r0, [r7, #12]
 80098c6:	f000 f805 	bl	80098d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80098ca:	f000 f8d7 	bl	8009a7c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80098ce:	bf00      	nop
 80098d0:	e7f0      	b.n	80098b4 <prvTimerTask+0x8>
	...

080098d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b084      	sub	sp, #16
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80098de:	f7ff fa0f 	bl	8008d00 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80098e2:	f107 0308 	add.w	r3, r7, #8
 80098e6:	4618      	mov	r0, r3
 80098e8:	f000 f866 	bl	80099b8 <prvSampleTimeNow>
 80098ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d130      	bne.n	8009956 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d10a      	bne.n	8009910 <prvProcessTimerOrBlockTask+0x3c>
 80098fa:	687a      	ldr	r2, [r7, #4]
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	429a      	cmp	r2, r3
 8009900:	d806      	bhi.n	8009910 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009902:	f7ff fa0b 	bl	8008d1c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009906:	68f9      	ldr	r1, [r7, #12]
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f7ff ff81 	bl	8009810 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800990e:	e024      	b.n	800995a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d008      	beq.n	8009928 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009916:	4b13      	ldr	r3, [pc, #76]	@ (8009964 <prvProcessTimerOrBlockTask+0x90>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d101      	bne.n	8009924 <prvProcessTimerOrBlockTask+0x50>
 8009920:	2301      	movs	r3, #1
 8009922:	e000      	b.n	8009926 <prvProcessTimerOrBlockTask+0x52>
 8009924:	2300      	movs	r3, #0
 8009926:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009928:	4b0f      	ldr	r3, [pc, #60]	@ (8009968 <prvProcessTimerOrBlockTask+0x94>)
 800992a:	6818      	ldr	r0, [r3, #0]
 800992c:	687a      	ldr	r2, [r7, #4]
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	1ad3      	subs	r3, r2, r3
 8009932:	683a      	ldr	r2, [r7, #0]
 8009934:	4619      	mov	r1, r3
 8009936:	f7fe ff6b 	bl	8008810 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800993a:	f7ff f9ef 	bl	8008d1c <xTaskResumeAll>
 800993e:	4603      	mov	r3, r0
 8009940:	2b00      	cmp	r3, #0
 8009942:	d10a      	bne.n	800995a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009944:	4b09      	ldr	r3, [pc, #36]	@ (800996c <prvProcessTimerOrBlockTask+0x98>)
 8009946:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800994a:	601a      	str	r2, [r3, #0]
 800994c:	f3bf 8f4f 	dsb	sy
 8009950:	f3bf 8f6f 	isb	sy
}
 8009954:	e001      	b.n	800995a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009956:	f7ff f9e1 	bl	8008d1c <xTaskResumeAll>
}
 800995a:	bf00      	nop
 800995c:	3710      	adds	r7, #16
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}
 8009962:	bf00      	nop
 8009964:	20005f5c 	.word	0x20005f5c
 8009968:	20005f60 	.word	0x20005f60
 800996c:	e000ed04 	.word	0xe000ed04

08009970 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009970:	b480      	push	{r7}
 8009972:	b085      	sub	sp, #20
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009978:	4b0e      	ldr	r3, [pc, #56]	@ (80099b4 <prvGetNextExpireTime+0x44>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d101      	bne.n	8009986 <prvGetNextExpireTime+0x16>
 8009982:	2201      	movs	r2, #1
 8009984:	e000      	b.n	8009988 <prvGetNextExpireTime+0x18>
 8009986:	2200      	movs	r2, #0
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d105      	bne.n	80099a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009994:	4b07      	ldr	r3, [pc, #28]	@ (80099b4 <prvGetNextExpireTime+0x44>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	68db      	ldr	r3, [r3, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	60fb      	str	r3, [r7, #12]
 800999e:	e001      	b.n	80099a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80099a0:	2300      	movs	r3, #0
 80099a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80099a4:	68fb      	ldr	r3, [r7, #12]
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3714      	adds	r7, #20
 80099aa:	46bd      	mov	sp, r7
 80099ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b0:	4770      	bx	lr
 80099b2:	bf00      	nop
 80099b4:	20005f58 	.word	0x20005f58

080099b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b084      	sub	sp, #16
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80099c0:	f7ff fa4a 	bl	8008e58 <xTaskGetTickCount>
 80099c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80099c6:	4b0b      	ldr	r3, [pc, #44]	@ (80099f4 <prvSampleTimeNow+0x3c>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	68fa      	ldr	r2, [r7, #12]
 80099cc:	429a      	cmp	r2, r3
 80099ce:	d205      	bcs.n	80099dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80099d0:	f000 f93a 	bl	8009c48 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2201      	movs	r2, #1
 80099d8:	601a      	str	r2, [r3, #0]
 80099da:	e002      	b.n	80099e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2200      	movs	r2, #0
 80099e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80099e2:	4a04      	ldr	r2, [pc, #16]	@ (80099f4 <prvSampleTimeNow+0x3c>)
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80099e8:	68fb      	ldr	r3, [r7, #12]
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3710      	adds	r7, #16
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}
 80099f2:	bf00      	nop
 80099f4:	20005f68 	.word	0x20005f68

080099f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b086      	sub	sp, #24
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	60f8      	str	r0, [r7, #12]
 8009a00:	60b9      	str	r1, [r7, #8]
 8009a02:	607a      	str	r2, [r7, #4]
 8009a04:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009a06:	2300      	movs	r3, #0
 8009a08:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	68ba      	ldr	r2, [r7, #8]
 8009a0e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	68fa      	ldr	r2, [r7, #12]
 8009a14:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009a16:	68ba      	ldr	r2, [r7, #8]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	429a      	cmp	r2, r3
 8009a1c:	d812      	bhi.n	8009a44 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a1e:	687a      	ldr	r2, [r7, #4]
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	1ad2      	subs	r2, r2, r3
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	699b      	ldr	r3, [r3, #24]
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d302      	bcc.n	8009a32 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	617b      	str	r3, [r7, #20]
 8009a30:	e01b      	b.n	8009a6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009a32:	4b10      	ldr	r3, [pc, #64]	@ (8009a74 <prvInsertTimerInActiveList+0x7c>)
 8009a34:	681a      	ldr	r2, [r3, #0]
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	3304      	adds	r3, #4
 8009a3a:	4619      	mov	r1, r3
 8009a3c:	4610      	mov	r0, r2
 8009a3e:	f7fe f9be 	bl	8007dbe <vListInsert>
 8009a42:	e012      	b.n	8009a6a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009a44:	687a      	ldr	r2, [r7, #4]
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	429a      	cmp	r2, r3
 8009a4a:	d206      	bcs.n	8009a5a <prvInsertTimerInActiveList+0x62>
 8009a4c:	68ba      	ldr	r2, [r7, #8]
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d302      	bcc.n	8009a5a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009a54:	2301      	movs	r3, #1
 8009a56:	617b      	str	r3, [r7, #20]
 8009a58:	e007      	b.n	8009a6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009a5a:	4b07      	ldr	r3, [pc, #28]	@ (8009a78 <prvInsertTimerInActiveList+0x80>)
 8009a5c:	681a      	ldr	r2, [r3, #0]
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	3304      	adds	r3, #4
 8009a62:	4619      	mov	r1, r3
 8009a64:	4610      	mov	r0, r2
 8009a66:	f7fe f9aa 	bl	8007dbe <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009a6a:	697b      	ldr	r3, [r7, #20]
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3718      	adds	r7, #24
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}
 8009a74:	20005f5c 	.word	0x20005f5c
 8009a78:	20005f58 	.word	0x20005f58

08009a7c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b08e      	sub	sp, #56	@ 0x38
 8009a80:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009a82:	e0ce      	b.n	8009c22 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	da19      	bge.n	8009abe <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009a8a:	1d3b      	adds	r3, r7, #4
 8009a8c:	3304      	adds	r3, #4
 8009a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d10b      	bne.n	8009aae <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a9a:	f383 8811 	msr	BASEPRI, r3
 8009a9e:	f3bf 8f6f 	isb	sy
 8009aa2:	f3bf 8f4f 	dsb	sy
 8009aa6:	61fb      	str	r3, [r7, #28]
}
 8009aa8:	bf00      	nop
 8009aaa:	bf00      	nop
 8009aac:	e7fd      	b.n	8009aaa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ab4:	6850      	ldr	r0, [r2, #4]
 8009ab6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ab8:	6892      	ldr	r2, [r2, #8]
 8009aba:	4611      	mov	r1, r2
 8009abc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	f2c0 80ae 	blt.w	8009c22 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009acc:	695b      	ldr	r3, [r3, #20]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d004      	beq.n	8009adc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ad4:	3304      	adds	r3, #4
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f7fe f9aa 	bl	8007e30 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009adc:	463b      	mov	r3, r7
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f7ff ff6a 	bl	80099b8 <prvSampleTimeNow>
 8009ae4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2b09      	cmp	r3, #9
 8009aea:	f200 8097 	bhi.w	8009c1c <prvProcessReceivedCommands+0x1a0>
 8009aee:	a201      	add	r2, pc, #4	@ (adr r2, 8009af4 <prvProcessReceivedCommands+0x78>)
 8009af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009af4:	08009b1d 	.word	0x08009b1d
 8009af8:	08009b1d 	.word	0x08009b1d
 8009afc:	08009b1d 	.word	0x08009b1d
 8009b00:	08009b93 	.word	0x08009b93
 8009b04:	08009ba7 	.word	0x08009ba7
 8009b08:	08009bf3 	.word	0x08009bf3
 8009b0c:	08009b1d 	.word	0x08009b1d
 8009b10:	08009b1d 	.word	0x08009b1d
 8009b14:	08009b93 	.word	0x08009b93
 8009b18:	08009ba7 	.word	0x08009ba7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b1e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b22:	f043 0301 	orr.w	r3, r3, #1
 8009b26:	b2da      	uxtb	r2, r3
 8009b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b2a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009b2e:	68ba      	ldr	r2, [r7, #8]
 8009b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b32:	699b      	ldr	r3, [r3, #24]
 8009b34:	18d1      	adds	r1, r2, r3
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b3c:	f7ff ff5c 	bl	80099f8 <prvInsertTimerInActiveList>
 8009b40:	4603      	mov	r3, r0
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d06c      	beq.n	8009c20 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b48:	6a1b      	ldr	r3, [r3, #32]
 8009b4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b4c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b54:	f003 0304 	and.w	r3, r3, #4
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d061      	beq.n	8009c20 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009b5c:	68ba      	ldr	r2, [r7, #8]
 8009b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b60:	699b      	ldr	r3, [r3, #24]
 8009b62:	441a      	add	r2, r3
 8009b64:	2300      	movs	r3, #0
 8009b66:	9300      	str	r3, [sp, #0]
 8009b68:	2300      	movs	r3, #0
 8009b6a:	2100      	movs	r1, #0
 8009b6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b6e:	f7ff fe01 	bl	8009774 <xTimerGenericCommand>
 8009b72:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009b74:	6a3b      	ldr	r3, [r7, #32]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d152      	bne.n	8009c20 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b7e:	f383 8811 	msr	BASEPRI, r3
 8009b82:	f3bf 8f6f 	isb	sy
 8009b86:	f3bf 8f4f 	dsb	sy
 8009b8a:	61bb      	str	r3, [r7, #24]
}
 8009b8c:	bf00      	nop
 8009b8e:	bf00      	nop
 8009b90:	e7fd      	b.n	8009b8e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b98:	f023 0301 	bic.w	r3, r3, #1
 8009b9c:	b2da      	uxtb	r2, r3
 8009b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ba0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009ba4:	e03d      	b.n	8009c22 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ba8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009bac:	f043 0301 	orr.w	r3, r3, #1
 8009bb0:	b2da      	uxtb	r2, r3
 8009bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bb4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009bb8:	68ba      	ldr	r2, [r7, #8]
 8009bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bbc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bc0:	699b      	ldr	r3, [r3, #24]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d10b      	bne.n	8009bde <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bca:	f383 8811 	msr	BASEPRI, r3
 8009bce:	f3bf 8f6f 	isb	sy
 8009bd2:	f3bf 8f4f 	dsb	sy
 8009bd6:	617b      	str	r3, [r7, #20]
}
 8009bd8:	bf00      	nop
 8009bda:	bf00      	nop
 8009bdc:	e7fd      	b.n	8009bda <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009be0:	699a      	ldr	r2, [r3, #24]
 8009be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009be4:	18d1      	adds	r1, r2, r3
 8009be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009be8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009bea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009bec:	f7ff ff04 	bl	80099f8 <prvInsertTimerInActiveList>
					break;
 8009bf0:	e017      	b.n	8009c22 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bf4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009bf8:	f003 0302 	and.w	r3, r3, #2
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d103      	bne.n	8009c08 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009c00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c02:	f000 fbe9 	bl	800a3d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009c06:	e00c      	b.n	8009c22 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c0a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c0e:	f023 0301 	bic.w	r3, r3, #1
 8009c12:	b2da      	uxtb	r2, r3
 8009c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c16:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009c1a:	e002      	b.n	8009c22 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009c1c:	bf00      	nop
 8009c1e:	e000      	b.n	8009c22 <prvProcessReceivedCommands+0x1a6>
					break;
 8009c20:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009c22:	4b08      	ldr	r3, [pc, #32]	@ (8009c44 <prvProcessReceivedCommands+0x1c8>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	1d39      	adds	r1, r7, #4
 8009c28:	2200      	movs	r2, #0
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f7fe fbd4 	bl	80083d8 <xQueueReceive>
 8009c30:	4603      	mov	r3, r0
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	f47f af26 	bne.w	8009a84 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009c38:	bf00      	nop
 8009c3a:	bf00      	nop
 8009c3c:	3730      	adds	r7, #48	@ 0x30
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}
 8009c42:	bf00      	nop
 8009c44:	20005f60 	.word	0x20005f60

08009c48 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b088      	sub	sp, #32
 8009c4c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009c4e:	e049      	b.n	8009ce4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009c50:	4b2e      	ldr	r3, [pc, #184]	@ (8009d0c <prvSwitchTimerLists+0xc4>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	68db      	ldr	r3, [r3, #12]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c5a:	4b2c      	ldr	r3, [pc, #176]	@ (8009d0c <prvSwitchTimerLists+0xc4>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	68db      	ldr	r3, [r3, #12]
 8009c60:	68db      	ldr	r3, [r3, #12]
 8009c62:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	3304      	adds	r3, #4
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f7fe f8e1 	bl	8007e30 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	6a1b      	ldr	r3, [r3, #32]
 8009c72:	68f8      	ldr	r0, [r7, #12]
 8009c74:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c7c:	f003 0304 	and.w	r3, r3, #4
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d02f      	beq.n	8009ce4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	699b      	ldr	r3, [r3, #24]
 8009c88:	693a      	ldr	r2, [r7, #16]
 8009c8a:	4413      	add	r3, r2
 8009c8c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009c8e:	68ba      	ldr	r2, [r7, #8]
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	429a      	cmp	r2, r3
 8009c94:	d90e      	bls.n	8009cb4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	68ba      	ldr	r2, [r7, #8]
 8009c9a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	68fa      	ldr	r2, [r7, #12]
 8009ca0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009ca2:	4b1a      	ldr	r3, [pc, #104]	@ (8009d0c <prvSwitchTimerLists+0xc4>)
 8009ca4:	681a      	ldr	r2, [r3, #0]
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	3304      	adds	r3, #4
 8009caa:	4619      	mov	r1, r3
 8009cac:	4610      	mov	r0, r2
 8009cae:	f7fe f886 	bl	8007dbe <vListInsert>
 8009cb2:	e017      	b.n	8009ce4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	9300      	str	r3, [sp, #0]
 8009cb8:	2300      	movs	r3, #0
 8009cba:	693a      	ldr	r2, [r7, #16]
 8009cbc:	2100      	movs	r1, #0
 8009cbe:	68f8      	ldr	r0, [r7, #12]
 8009cc0:	f7ff fd58 	bl	8009774 <xTimerGenericCommand>
 8009cc4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d10b      	bne.n	8009ce4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009ccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cd0:	f383 8811 	msr	BASEPRI, r3
 8009cd4:	f3bf 8f6f 	isb	sy
 8009cd8:	f3bf 8f4f 	dsb	sy
 8009cdc:	603b      	str	r3, [r7, #0]
}
 8009cde:	bf00      	nop
 8009ce0:	bf00      	nop
 8009ce2:	e7fd      	b.n	8009ce0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009ce4:	4b09      	ldr	r3, [pc, #36]	@ (8009d0c <prvSwitchTimerLists+0xc4>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d1b0      	bne.n	8009c50 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009cee:	4b07      	ldr	r3, [pc, #28]	@ (8009d0c <prvSwitchTimerLists+0xc4>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009cf4:	4b06      	ldr	r3, [pc, #24]	@ (8009d10 <prvSwitchTimerLists+0xc8>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	4a04      	ldr	r2, [pc, #16]	@ (8009d0c <prvSwitchTimerLists+0xc4>)
 8009cfa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009cfc:	4a04      	ldr	r2, [pc, #16]	@ (8009d10 <prvSwitchTimerLists+0xc8>)
 8009cfe:	697b      	ldr	r3, [r7, #20]
 8009d00:	6013      	str	r3, [r2, #0]
}
 8009d02:	bf00      	nop
 8009d04:	3718      	adds	r7, #24
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
 8009d0a:	bf00      	nop
 8009d0c:	20005f58 	.word	0x20005f58
 8009d10:	20005f5c 	.word	0x20005f5c

08009d14 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b082      	sub	sp, #8
 8009d18:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009d1a:	f000 f96d 	bl	8009ff8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009d1e:	4b15      	ldr	r3, [pc, #84]	@ (8009d74 <prvCheckForValidListAndQueue+0x60>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d120      	bne.n	8009d68 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009d26:	4814      	ldr	r0, [pc, #80]	@ (8009d78 <prvCheckForValidListAndQueue+0x64>)
 8009d28:	f7fd fff8 	bl	8007d1c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009d2c:	4813      	ldr	r0, [pc, #76]	@ (8009d7c <prvCheckForValidListAndQueue+0x68>)
 8009d2e:	f7fd fff5 	bl	8007d1c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009d32:	4b13      	ldr	r3, [pc, #76]	@ (8009d80 <prvCheckForValidListAndQueue+0x6c>)
 8009d34:	4a10      	ldr	r2, [pc, #64]	@ (8009d78 <prvCheckForValidListAndQueue+0x64>)
 8009d36:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009d38:	4b12      	ldr	r3, [pc, #72]	@ (8009d84 <prvCheckForValidListAndQueue+0x70>)
 8009d3a:	4a10      	ldr	r2, [pc, #64]	@ (8009d7c <prvCheckForValidListAndQueue+0x68>)
 8009d3c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009d3e:	2300      	movs	r3, #0
 8009d40:	9300      	str	r3, [sp, #0]
 8009d42:	4b11      	ldr	r3, [pc, #68]	@ (8009d88 <prvCheckForValidListAndQueue+0x74>)
 8009d44:	4a11      	ldr	r2, [pc, #68]	@ (8009d8c <prvCheckForValidListAndQueue+0x78>)
 8009d46:	2110      	movs	r1, #16
 8009d48:	200a      	movs	r0, #10
 8009d4a:	f7fe f905 	bl	8007f58 <xQueueGenericCreateStatic>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	4a08      	ldr	r2, [pc, #32]	@ (8009d74 <prvCheckForValidListAndQueue+0x60>)
 8009d52:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009d54:	4b07      	ldr	r3, [pc, #28]	@ (8009d74 <prvCheckForValidListAndQueue+0x60>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d005      	beq.n	8009d68 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009d5c:	4b05      	ldr	r3, [pc, #20]	@ (8009d74 <prvCheckForValidListAndQueue+0x60>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	490b      	ldr	r1, [pc, #44]	@ (8009d90 <prvCheckForValidListAndQueue+0x7c>)
 8009d62:	4618      	mov	r0, r3
 8009d64:	f7fe fd2a 	bl	80087bc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009d68:	f000 f978 	bl	800a05c <vPortExitCritical>
}
 8009d6c:	bf00      	nop
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}
 8009d72:	bf00      	nop
 8009d74:	20005f60 	.word	0x20005f60
 8009d78:	20005f30 	.word	0x20005f30
 8009d7c:	20005f44 	.word	0x20005f44
 8009d80:	20005f58 	.word	0x20005f58
 8009d84:	20005f5c 	.word	0x20005f5c
 8009d88:	2000600c 	.word	0x2000600c
 8009d8c:	20005f6c 	.word	0x20005f6c
 8009d90:	0801a8b8 	.word	0x0801a8b8

08009d94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009d94:	b480      	push	{r7}
 8009d96:	b085      	sub	sp, #20
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	60f8      	str	r0, [r7, #12]
 8009d9c:	60b9      	str	r1, [r7, #8]
 8009d9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	3b04      	subs	r3, #4
 8009da4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009dac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	3b04      	subs	r3, #4
 8009db2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	f023 0201 	bic.w	r2, r3, #1
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	3b04      	subs	r3, #4
 8009dc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009dc4:	4a0c      	ldr	r2, [pc, #48]	@ (8009df8 <pxPortInitialiseStack+0x64>)
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	3b14      	subs	r3, #20
 8009dce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009dd0:	687a      	ldr	r2, [r7, #4]
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	3b04      	subs	r3, #4
 8009dda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	f06f 0202 	mvn.w	r2, #2
 8009de2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	3b20      	subs	r3, #32
 8009de8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009dea:	68fb      	ldr	r3, [r7, #12]
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3714      	adds	r7, #20
 8009df0:	46bd      	mov	sp, r7
 8009df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df6:	4770      	bx	lr
 8009df8:	08009dfd 	.word	0x08009dfd

08009dfc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b085      	sub	sp, #20
 8009e00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009e02:	2300      	movs	r3, #0
 8009e04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009e06:	4b13      	ldr	r3, [pc, #76]	@ (8009e54 <prvTaskExitError+0x58>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009e0e:	d00b      	beq.n	8009e28 <prvTaskExitError+0x2c>
	__asm volatile
 8009e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e14:	f383 8811 	msr	BASEPRI, r3
 8009e18:	f3bf 8f6f 	isb	sy
 8009e1c:	f3bf 8f4f 	dsb	sy
 8009e20:	60fb      	str	r3, [r7, #12]
}
 8009e22:	bf00      	nop
 8009e24:	bf00      	nop
 8009e26:	e7fd      	b.n	8009e24 <prvTaskExitError+0x28>
	__asm volatile
 8009e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e2c:	f383 8811 	msr	BASEPRI, r3
 8009e30:	f3bf 8f6f 	isb	sy
 8009e34:	f3bf 8f4f 	dsb	sy
 8009e38:	60bb      	str	r3, [r7, #8]
}
 8009e3a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009e3c:	bf00      	nop
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d0fc      	beq.n	8009e3e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009e44:	bf00      	nop
 8009e46:	bf00      	nop
 8009e48:	3714      	adds	r7, #20
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e50:	4770      	bx	lr
 8009e52:	bf00      	nop
 8009e54:	200000a8 	.word	0x200000a8
	...

08009e60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009e60:	4b07      	ldr	r3, [pc, #28]	@ (8009e80 <pxCurrentTCBConst2>)
 8009e62:	6819      	ldr	r1, [r3, #0]
 8009e64:	6808      	ldr	r0, [r1, #0]
 8009e66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e6a:	f380 8809 	msr	PSP, r0
 8009e6e:	f3bf 8f6f 	isb	sy
 8009e72:	f04f 0000 	mov.w	r0, #0
 8009e76:	f380 8811 	msr	BASEPRI, r0
 8009e7a:	4770      	bx	lr
 8009e7c:	f3af 8000 	nop.w

08009e80 <pxCurrentTCBConst2>:
 8009e80:	20005a30 	.word	0x20005a30
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009e84:	bf00      	nop
 8009e86:	bf00      	nop

08009e88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009e88:	4808      	ldr	r0, [pc, #32]	@ (8009eac <prvPortStartFirstTask+0x24>)
 8009e8a:	6800      	ldr	r0, [r0, #0]
 8009e8c:	6800      	ldr	r0, [r0, #0]
 8009e8e:	f380 8808 	msr	MSP, r0
 8009e92:	f04f 0000 	mov.w	r0, #0
 8009e96:	f380 8814 	msr	CONTROL, r0
 8009e9a:	b662      	cpsie	i
 8009e9c:	b661      	cpsie	f
 8009e9e:	f3bf 8f4f 	dsb	sy
 8009ea2:	f3bf 8f6f 	isb	sy
 8009ea6:	df00      	svc	0
 8009ea8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009eaa:	bf00      	nop
 8009eac:	e000ed08 	.word	0xe000ed08

08009eb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b086      	sub	sp, #24
 8009eb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009eb6:	4b47      	ldr	r3, [pc, #284]	@ (8009fd4 <xPortStartScheduler+0x124>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	4a47      	ldr	r2, [pc, #284]	@ (8009fd8 <xPortStartScheduler+0x128>)
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	d10b      	bne.n	8009ed8 <xPortStartScheduler+0x28>
	__asm volatile
 8009ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ec4:	f383 8811 	msr	BASEPRI, r3
 8009ec8:	f3bf 8f6f 	isb	sy
 8009ecc:	f3bf 8f4f 	dsb	sy
 8009ed0:	613b      	str	r3, [r7, #16]
}
 8009ed2:	bf00      	nop
 8009ed4:	bf00      	nop
 8009ed6:	e7fd      	b.n	8009ed4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009ed8:	4b3e      	ldr	r3, [pc, #248]	@ (8009fd4 <xPortStartScheduler+0x124>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	4a3f      	ldr	r2, [pc, #252]	@ (8009fdc <xPortStartScheduler+0x12c>)
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	d10b      	bne.n	8009efa <xPortStartScheduler+0x4a>
	__asm volatile
 8009ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ee6:	f383 8811 	msr	BASEPRI, r3
 8009eea:	f3bf 8f6f 	isb	sy
 8009eee:	f3bf 8f4f 	dsb	sy
 8009ef2:	60fb      	str	r3, [r7, #12]
}
 8009ef4:	bf00      	nop
 8009ef6:	bf00      	nop
 8009ef8:	e7fd      	b.n	8009ef6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009efa:	4b39      	ldr	r3, [pc, #228]	@ (8009fe0 <xPortStartScheduler+0x130>)
 8009efc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	781b      	ldrb	r3, [r3, #0]
 8009f02:	b2db      	uxtb	r3, r3
 8009f04:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	22ff      	movs	r2, #255	@ 0xff
 8009f0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	781b      	ldrb	r3, [r3, #0]
 8009f10:	b2db      	uxtb	r3, r3
 8009f12:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009f14:	78fb      	ldrb	r3, [r7, #3]
 8009f16:	b2db      	uxtb	r3, r3
 8009f18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009f1c:	b2da      	uxtb	r2, r3
 8009f1e:	4b31      	ldr	r3, [pc, #196]	@ (8009fe4 <xPortStartScheduler+0x134>)
 8009f20:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009f22:	4b31      	ldr	r3, [pc, #196]	@ (8009fe8 <xPortStartScheduler+0x138>)
 8009f24:	2207      	movs	r2, #7
 8009f26:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009f28:	e009      	b.n	8009f3e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009f2a:	4b2f      	ldr	r3, [pc, #188]	@ (8009fe8 <xPortStartScheduler+0x138>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	3b01      	subs	r3, #1
 8009f30:	4a2d      	ldr	r2, [pc, #180]	@ (8009fe8 <xPortStartScheduler+0x138>)
 8009f32:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009f34:	78fb      	ldrb	r3, [r7, #3]
 8009f36:	b2db      	uxtb	r3, r3
 8009f38:	005b      	lsls	r3, r3, #1
 8009f3a:	b2db      	uxtb	r3, r3
 8009f3c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009f3e:	78fb      	ldrb	r3, [r7, #3]
 8009f40:	b2db      	uxtb	r3, r3
 8009f42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f46:	2b80      	cmp	r3, #128	@ 0x80
 8009f48:	d0ef      	beq.n	8009f2a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009f4a:	4b27      	ldr	r3, [pc, #156]	@ (8009fe8 <xPortStartScheduler+0x138>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f1c3 0307 	rsb	r3, r3, #7
 8009f52:	2b04      	cmp	r3, #4
 8009f54:	d00b      	beq.n	8009f6e <xPortStartScheduler+0xbe>
	__asm volatile
 8009f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f5a:	f383 8811 	msr	BASEPRI, r3
 8009f5e:	f3bf 8f6f 	isb	sy
 8009f62:	f3bf 8f4f 	dsb	sy
 8009f66:	60bb      	str	r3, [r7, #8]
}
 8009f68:	bf00      	nop
 8009f6a:	bf00      	nop
 8009f6c:	e7fd      	b.n	8009f6a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009f6e:	4b1e      	ldr	r3, [pc, #120]	@ (8009fe8 <xPortStartScheduler+0x138>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	021b      	lsls	r3, r3, #8
 8009f74:	4a1c      	ldr	r2, [pc, #112]	@ (8009fe8 <xPortStartScheduler+0x138>)
 8009f76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009f78:	4b1b      	ldr	r3, [pc, #108]	@ (8009fe8 <xPortStartScheduler+0x138>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009f80:	4a19      	ldr	r2, [pc, #100]	@ (8009fe8 <xPortStartScheduler+0x138>)
 8009f82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	b2da      	uxtb	r2, r3
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009f8c:	4b17      	ldr	r3, [pc, #92]	@ (8009fec <xPortStartScheduler+0x13c>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	4a16      	ldr	r2, [pc, #88]	@ (8009fec <xPortStartScheduler+0x13c>)
 8009f92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009f96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009f98:	4b14      	ldr	r3, [pc, #80]	@ (8009fec <xPortStartScheduler+0x13c>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	4a13      	ldr	r2, [pc, #76]	@ (8009fec <xPortStartScheduler+0x13c>)
 8009f9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009fa2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009fa4:	f000 f8da 	bl	800a15c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009fa8:	4b11      	ldr	r3, [pc, #68]	@ (8009ff0 <xPortStartScheduler+0x140>)
 8009faa:	2200      	movs	r2, #0
 8009fac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009fae:	f000 f8f9 	bl	800a1a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009fb2:	4b10      	ldr	r3, [pc, #64]	@ (8009ff4 <xPortStartScheduler+0x144>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	4a0f      	ldr	r2, [pc, #60]	@ (8009ff4 <xPortStartScheduler+0x144>)
 8009fb8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009fbc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009fbe:	f7ff ff63 	bl	8009e88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009fc2:	f7ff f813 	bl	8008fec <vTaskSwitchContext>
	prvTaskExitError();
 8009fc6:	f7ff ff19 	bl	8009dfc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009fca:	2300      	movs	r3, #0
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3718      	adds	r7, #24
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}
 8009fd4:	e000ed00 	.word	0xe000ed00
 8009fd8:	410fc271 	.word	0x410fc271
 8009fdc:	410fc270 	.word	0x410fc270
 8009fe0:	e000e400 	.word	0xe000e400
 8009fe4:	2000605c 	.word	0x2000605c
 8009fe8:	20006060 	.word	0x20006060
 8009fec:	e000ed20 	.word	0xe000ed20
 8009ff0:	200000a8 	.word	0x200000a8
 8009ff4:	e000ef34 	.word	0xe000ef34

08009ff8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b083      	sub	sp, #12
 8009ffc:	af00      	add	r7, sp, #0
	__asm volatile
 8009ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a002:	f383 8811 	msr	BASEPRI, r3
 800a006:	f3bf 8f6f 	isb	sy
 800a00a:	f3bf 8f4f 	dsb	sy
 800a00e:	607b      	str	r3, [r7, #4]
}
 800a010:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a012:	4b10      	ldr	r3, [pc, #64]	@ (800a054 <vPortEnterCritical+0x5c>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	3301      	adds	r3, #1
 800a018:	4a0e      	ldr	r2, [pc, #56]	@ (800a054 <vPortEnterCritical+0x5c>)
 800a01a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a01c:	4b0d      	ldr	r3, [pc, #52]	@ (800a054 <vPortEnterCritical+0x5c>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	2b01      	cmp	r3, #1
 800a022:	d110      	bne.n	800a046 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a024:	4b0c      	ldr	r3, [pc, #48]	@ (800a058 <vPortEnterCritical+0x60>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	b2db      	uxtb	r3, r3
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d00b      	beq.n	800a046 <vPortEnterCritical+0x4e>
	__asm volatile
 800a02e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a032:	f383 8811 	msr	BASEPRI, r3
 800a036:	f3bf 8f6f 	isb	sy
 800a03a:	f3bf 8f4f 	dsb	sy
 800a03e:	603b      	str	r3, [r7, #0]
}
 800a040:	bf00      	nop
 800a042:	bf00      	nop
 800a044:	e7fd      	b.n	800a042 <vPortEnterCritical+0x4a>
	}
}
 800a046:	bf00      	nop
 800a048:	370c      	adds	r7, #12
 800a04a:	46bd      	mov	sp, r7
 800a04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a050:	4770      	bx	lr
 800a052:	bf00      	nop
 800a054:	200000a8 	.word	0x200000a8
 800a058:	e000ed04 	.word	0xe000ed04

0800a05c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a05c:	b480      	push	{r7}
 800a05e:	b083      	sub	sp, #12
 800a060:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a062:	4b12      	ldr	r3, [pc, #72]	@ (800a0ac <vPortExitCritical+0x50>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d10b      	bne.n	800a082 <vPortExitCritical+0x26>
	__asm volatile
 800a06a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a06e:	f383 8811 	msr	BASEPRI, r3
 800a072:	f3bf 8f6f 	isb	sy
 800a076:	f3bf 8f4f 	dsb	sy
 800a07a:	607b      	str	r3, [r7, #4]
}
 800a07c:	bf00      	nop
 800a07e:	bf00      	nop
 800a080:	e7fd      	b.n	800a07e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a082:	4b0a      	ldr	r3, [pc, #40]	@ (800a0ac <vPortExitCritical+0x50>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	3b01      	subs	r3, #1
 800a088:	4a08      	ldr	r2, [pc, #32]	@ (800a0ac <vPortExitCritical+0x50>)
 800a08a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a08c:	4b07      	ldr	r3, [pc, #28]	@ (800a0ac <vPortExitCritical+0x50>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d105      	bne.n	800a0a0 <vPortExitCritical+0x44>
 800a094:	2300      	movs	r3, #0
 800a096:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	f383 8811 	msr	BASEPRI, r3
}
 800a09e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a0a0:	bf00      	nop
 800a0a2:	370c      	adds	r7, #12
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0aa:	4770      	bx	lr
 800a0ac:	200000a8 	.word	0x200000a8

0800a0b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a0b0:	f3ef 8009 	mrs	r0, PSP
 800a0b4:	f3bf 8f6f 	isb	sy
 800a0b8:	4b15      	ldr	r3, [pc, #84]	@ (800a110 <pxCurrentTCBConst>)
 800a0ba:	681a      	ldr	r2, [r3, #0]
 800a0bc:	f01e 0f10 	tst.w	lr, #16
 800a0c0:	bf08      	it	eq
 800a0c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a0c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0ca:	6010      	str	r0, [r2, #0]
 800a0cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a0d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a0d4:	f380 8811 	msr	BASEPRI, r0
 800a0d8:	f3bf 8f4f 	dsb	sy
 800a0dc:	f3bf 8f6f 	isb	sy
 800a0e0:	f7fe ff84 	bl	8008fec <vTaskSwitchContext>
 800a0e4:	f04f 0000 	mov.w	r0, #0
 800a0e8:	f380 8811 	msr	BASEPRI, r0
 800a0ec:	bc09      	pop	{r0, r3}
 800a0ee:	6819      	ldr	r1, [r3, #0]
 800a0f0:	6808      	ldr	r0, [r1, #0]
 800a0f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0f6:	f01e 0f10 	tst.w	lr, #16
 800a0fa:	bf08      	it	eq
 800a0fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a100:	f380 8809 	msr	PSP, r0
 800a104:	f3bf 8f6f 	isb	sy
 800a108:	4770      	bx	lr
 800a10a:	bf00      	nop
 800a10c:	f3af 8000 	nop.w

0800a110 <pxCurrentTCBConst>:
 800a110:	20005a30 	.word	0x20005a30
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a114:	bf00      	nop
 800a116:	bf00      	nop

0800a118 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b082      	sub	sp, #8
 800a11c:	af00      	add	r7, sp, #0
	__asm volatile
 800a11e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a122:	f383 8811 	msr	BASEPRI, r3
 800a126:	f3bf 8f6f 	isb	sy
 800a12a:	f3bf 8f4f 	dsb	sy
 800a12e:	607b      	str	r3, [r7, #4]
}
 800a130:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a132:	f7fe fea1 	bl	8008e78 <xTaskIncrementTick>
 800a136:	4603      	mov	r3, r0
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d003      	beq.n	800a144 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a13c:	4b06      	ldr	r3, [pc, #24]	@ (800a158 <xPortSysTickHandler+0x40>)
 800a13e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a142:	601a      	str	r2, [r3, #0]
 800a144:	2300      	movs	r3, #0
 800a146:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	f383 8811 	msr	BASEPRI, r3
}
 800a14e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a150:	bf00      	nop
 800a152:	3708      	adds	r7, #8
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}
 800a158:	e000ed04 	.word	0xe000ed04

0800a15c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a15c:	b480      	push	{r7}
 800a15e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a160:	4b0b      	ldr	r3, [pc, #44]	@ (800a190 <vPortSetupTimerInterrupt+0x34>)
 800a162:	2200      	movs	r2, #0
 800a164:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a166:	4b0b      	ldr	r3, [pc, #44]	@ (800a194 <vPortSetupTimerInterrupt+0x38>)
 800a168:	2200      	movs	r2, #0
 800a16a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a16c:	4b0a      	ldr	r3, [pc, #40]	@ (800a198 <vPortSetupTimerInterrupt+0x3c>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	4a0a      	ldr	r2, [pc, #40]	@ (800a19c <vPortSetupTimerInterrupt+0x40>)
 800a172:	fba2 2303 	umull	r2, r3, r2, r3
 800a176:	099b      	lsrs	r3, r3, #6
 800a178:	4a09      	ldr	r2, [pc, #36]	@ (800a1a0 <vPortSetupTimerInterrupt+0x44>)
 800a17a:	3b01      	subs	r3, #1
 800a17c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a17e:	4b04      	ldr	r3, [pc, #16]	@ (800a190 <vPortSetupTimerInterrupt+0x34>)
 800a180:	2207      	movs	r2, #7
 800a182:	601a      	str	r2, [r3, #0]
}
 800a184:	bf00      	nop
 800a186:	46bd      	mov	sp, r7
 800a188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18c:	4770      	bx	lr
 800a18e:	bf00      	nop
 800a190:	e000e010 	.word	0xe000e010
 800a194:	e000e018 	.word	0xe000e018
 800a198:	2000000c 	.word	0x2000000c
 800a19c:	10624dd3 	.word	0x10624dd3
 800a1a0:	e000e014 	.word	0xe000e014

0800a1a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a1a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a1b4 <vPortEnableVFP+0x10>
 800a1a8:	6801      	ldr	r1, [r0, #0]
 800a1aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a1ae:	6001      	str	r1, [r0, #0]
 800a1b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a1b2:	bf00      	nop
 800a1b4:	e000ed88 	.word	0xe000ed88

0800a1b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b085      	sub	sp, #20
 800a1bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a1be:	f3ef 8305 	mrs	r3, IPSR
 800a1c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	2b0f      	cmp	r3, #15
 800a1c8:	d915      	bls.n	800a1f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a1ca:	4a18      	ldr	r2, [pc, #96]	@ (800a22c <vPortValidateInterruptPriority+0x74>)
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	4413      	add	r3, r2
 800a1d0:	781b      	ldrb	r3, [r3, #0]
 800a1d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a1d4:	4b16      	ldr	r3, [pc, #88]	@ (800a230 <vPortValidateInterruptPriority+0x78>)
 800a1d6:	781b      	ldrb	r3, [r3, #0]
 800a1d8:	7afa      	ldrb	r2, [r7, #11]
 800a1da:	429a      	cmp	r2, r3
 800a1dc:	d20b      	bcs.n	800a1f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a1de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1e2:	f383 8811 	msr	BASEPRI, r3
 800a1e6:	f3bf 8f6f 	isb	sy
 800a1ea:	f3bf 8f4f 	dsb	sy
 800a1ee:	607b      	str	r3, [r7, #4]
}
 800a1f0:	bf00      	nop
 800a1f2:	bf00      	nop
 800a1f4:	e7fd      	b.n	800a1f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a1f6:	4b0f      	ldr	r3, [pc, #60]	@ (800a234 <vPortValidateInterruptPriority+0x7c>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a1fe:	4b0e      	ldr	r3, [pc, #56]	@ (800a238 <vPortValidateInterruptPriority+0x80>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	429a      	cmp	r2, r3
 800a204:	d90b      	bls.n	800a21e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a20a:	f383 8811 	msr	BASEPRI, r3
 800a20e:	f3bf 8f6f 	isb	sy
 800a212:	f3bf 8f4f 	dsb	sy
 800a216:	603b      	str	r3, [r7, #0]
}
 800a218:	bf00      	nop
 800a21a:	bf00      	nop
 800a21c:	e7fd      	b.n	800a21a <vPortValidateInterruptPriority+0x62>
	}
 800a21e:	bf00      	nop
 800a220:	3714      	adds	r7, #20
 800a222:	46bd      	mov	sp, r7
 800a224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a228:	4770      	bx	lr
 800a22a:	bf00      	nop
 800a22c:	e000e3f0 	.word	0xe000e3f0
 800a230:	2000605c 	.word	0x2000605c
 800a234:	e000ed0c 	.word	0xe000ed0c
 800a238:	20006060 	.word	0x20006060

0800a23c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b08a      	sub	sp, #40	@ 0x28
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a244:	2300      	movs	r3, #0
 800a246:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a248:	f7fe fd5a 	bl	8008d00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a24c:	4b5c      	ldr	r3, [pc, #368]	@ (800a3c0 <pvPortMalloc+0x184>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d101      	bne.n	800a258 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a254:	f000 f924 	bl	800a4a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a258:	4b5a      	ldr	r3, [pc, #360]	@ (800a3c4 <pvPortMalloc+0x188>)
 800a25a:	681a      	ldr	r2, [r3, #0]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	4013      	ands	r3, r2
 800a260:	2b00      	cmp	r3, #0
 800a262:	f040 8095 	bne.w	800a390 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d01e      	beq.n	800a2aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a26c:	2208      	movs	r2, #8
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	4413      	add	r3, r2
 800a272:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f003 0307 	and.w	r3, r3, #7
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d015      	beq.n	800a2aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f023 0307 	bic.w	r3, r3, #7
 800a284:	3308      	adds	r3, #8
 800a286:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f003 0307 	and.w	r3, r3, #7
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d00b      	beq.n	800a2aa <pvPortMalloc+0x6e>
	__asm volatile
 800a292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a296:	f383 8811 	msr	BASEPRI, r3
 800a29a:	f3bf 8f6f 	isb	sy
 800a29e:	f3bf 8f4f 	dsb	sy
 800a2a2:	617b      	str	r3, [r7, #20]
}
 800a2a4:	bf00      	nop
 800a2a6:	bf00      	nop
 800a2a8:	e7fd      	b.n	800a2a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d06f      	beq.n	800a390 <pvPortMalloc+0x154>
 800a2b0:	4b45      	ldr	r3, [pc, #276]	@ (800a3c8 <pvPortMalloc+0x18c>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	687a      	ldr	r2, [r7, #4]
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	d86a      	bhi.n	800a390 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a2ba:	4b44      	ldr	r3, [pc, #272]	@ (800a3cc <pvPortMalloc+0x190>)
 800a2bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a2be:	4b43      	ldr	r3, [pc, #268]	@ (800a3cc <pvPortMalloc+0x190>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a2c4:	e004      	b.n	800a2d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a2c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a2ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a2d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2d2:	685b      	ldr	r3, [r3, #4]
 800a2d4:	687a      	ldr	r2, [r7, #4]
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d903      	bls.n	800a2e2 <pvPortMalloc+0xa6>
 800a2da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d1f1      	bne.n	800a2c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a2e2:	4b37      	ldr	r3, [pc, #220]	@ (800a3c0 <pvPortMalloc+0x184>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d051      	beq.n	800a390 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a2ec:	6a3b      	ldr	r3, [r7, #32]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	2208      	movs	r2, #8
 800a2f2:	4413      	add	r3, r2
 800a2f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a2f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2f8:	681a      	ldr	r2, [r3, #0]
 800a2fa:	6a3b      	ldr	r3, [r7, #32]
 800a2fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a2fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a300:	685a      	ldr	r2, [r3, #4]
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	1ad2      	subs	r2, r2, r3
 800a306:	2308      	movs	r3, #8
 800a308:	005b      	lsls	r3, r3, #1
 800a30a:	429a      	cmp	r2, r3
 800a30c:	d920      	bls.n	800a350 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a30e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	4413      	add	r3, r2
 800a314:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a316:	69bb      	ldr	r3, [r7, #24]
 800a318:	f003 0307 	and.w	r3, r3, #7
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d00b      	beq.n	800a338 <pvPortMalloc+0xfc>
	__asm volatile
 800a320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a324:	f383 8811 	msr	BASEPRI, r3
 800a328:	f3bf 8f6f 	isb	sy
 800a32c:	f3bf 8f4f 	dsb	sy
 800a330:	613b      	str	r3, [r7, #16]
}
 800a332:	bf00      	nop
 800a334:	bf00      	nop
 800a336:	e7fd      	b.n	800a334 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a33a:	685a      	ldr	r2, [r3, #4]
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	1ad2      	subs	r2, r2, r3
 800a340:	69bb      	ldr	r3, [r7, #24]
 800a342:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a346:	687a      	ldr	r2, [r7, #4]
 800a348:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a34a:	69b8      	ldr	r0, [r7, #24]
 800a34c:	f000 f90a 	bl	800a564 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a350:	4b1d      	ldr	r3, [pc, #116]	@ (800a3c8 <pvPortMalloc+0x18c>)
 800a352:	681a      	ldr	r2, [r3, #0]
 800a354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a356:	685b      	ldr	r3, [r3, #4]
 800a358:	1ad3      	subs	r3, r2, r3
 800a35a:	4a1b      	ldr	r2, [pc, #108]	@ (800a3c8 <pvPortMalloc+0x18c>)
 800a35c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a35e:	4b1a      	ldr	r3, [pc, #104]	@ (800a3c8 <pvPortMalloc+0x18c>)
 800a360:	681a      	ldr	r2, [r3, #0]
 800a362:	4b1b      	ldr	r3, [pc, #108]	@ (800a3d0 <pvPortMalloc+0x194>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	429a      	cmp	r2, r3
 800a368:	d203      	bcs.n	800a372 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a36a:	4b17      	ldr	r3, [pc, #92]	@ (800a3c8 <pvPortMalloc+0x18c>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	4a18      	ldr	r2, [pc, #96]	@ (800a3d0 <pvPortMalloc+0x194>)
 800a370:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a374:	685a      	ldr	r2, [r3, #4]
 800a376:	4b13      	ldr	r3, [pc, #76]	@ (800a3c4 <pvPortMalloc+0x188>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	431a      	orrs	r2, r3
 800a37c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a37e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a382:	2200      	movs	r2, #0
 800a384:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a386:	4b13      	ldr	r3, [pc, #76]	@ (800a3d4 <pvPortMalloc+0x198>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	3301      	adds	r3, #1
 800a38c:	4a11      	ldr	r2, [pc, #68]	@ (800a3d4 <pvPortMalloc+0x198>)
 800a38e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a390:	f7fe fcc4 	bl	8008d1c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a394:	69fb      	ldr	r3, [r7, #28]
 800a396:	f003 0307 	and.w	r3, r3, #7
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d00b      	beq.n	800a3b6 <pvPortMalloc+0x17a>
	__asm volatile
 800a39e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3a2:	f383 8811 	msr	BASEPRI, r3
 800a3a6:	f3bf 8f6f 	isb	sy
 800a3aa:	f3bf 8f4f 	dsb	sy
 800a3ae:	60fb      	str	r3, [r7, #12]
}
 800a3b0:	bf00      	nop
 800a3b2:	bf00      	nop
 800a3b4:	e7fd      	b.n	800a3b2 <pvPortMalloc+0x176>
	return pvReturn;
 800a3b6:	69fb      	ldr	r3, [r7, #28]
}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	3728      	adds	r7, #40	@ 0x28
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}
 800a3c0:	20006c6c 	.word	0x20006c6c
 800a3c4:	20006c80 	.word	0x20006c80
 800a3c8:	20006c70 	.word	0x20006c70
 800a3cc:	20006c64 	.word	0x20006c64
 800a3d0:	20006c74 	.word	0x20006c74
 800a3d4:	20006c78 	.word	0x20006c78

0800a3d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b086      	sub	sp, #24
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d04f      	beq.n	800a48a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a3ea:	2308      	movs	r3, #8
 800a3ec:	425b      	negs	r3, r3
 800a3ee:	697a      	ldr	r2, [r7, #20]
 800a3f0:	4413      	add	r3, r2
 800a3f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	685a      	ldr	r2, [r3, #4]
 800a3fc:	4b25      	ldr	r3, [pc, #148]	@ (800a494 <vPortFree+0xbc>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	4013      	ands	r3, r2
 800a402:	2b00      	cmp	r3, #0
 800a404:	d10b      	bne.n	800a41e <vPortFree+0x46>
	__asm volatile
 800a406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a40a:	f383 8811 	msr	BASEPRI, r3
 800a40e:	f3bf 8f6f 	isb	sy
 800a412:	f3bf 8f4f 	dsb	sy
 800a416:	60fb      	str	r3, [r7, #12]
}
 800a418:	bf00      	nop
 800a41a:	bf00      	nop
 800a41c:	e7fd      	b.n	800a41a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a41e:	693b      	ldr	r3, [r7, #16]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d00b      	beq.n	800a43e <vPortFree+0x66>
	__asm volatile
 800a426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a42a:	f383 8811 	msr	BASEPRI, r3
 800a42e:	f3bf 8f6f 	isb	sy
 800a432:	f3bf 8f4f 	dsb	sy
 800a436:	60bb      	str	r3, [r7, #8]
}
 800a438:	bf00      	nop
 800a43a:	bf00      	nop
 800a43c:	e7fd      	b.n	800a43a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	685a      	ldr	r2, [r3, #4]
 800a442:	4b14      	ldr	r3, [pc, #80]	@ (800a494 <vPortFree+0xbc>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	4013      	ands	r3, r2
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d01e      	beq.n	800a48a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d11a      	bne.n	800a48a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a454:	693b      	ldr	r3, [r7, #16]
 800a456:	685a      	ldr	r2, [r3, #4]
 800a458:	4b0e      	ldr	r3, [pc, #56]	@ (800a494 <vPortFree+0xbc>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	43db      	mvns	r3, r3
 800a45e:	401a      	ands	r2, r3
 800a460:	693b      	ldr	r3, [r7, #16]
 800a462:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a464:	f7fe fc4c 	bl	8008d00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	685a      	ldr	r2, [r3, #4]
 800a46c:	4b0a      	ldr	r3, [pc, #40]	@ (800a498 <vPortFree+0xc0>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	4413      	add	r3, r2
 800a472:	4a09      	ldr	r2, [pc, #36]	@ (800a498 <vPortFree+0xc0>)
 800a474:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a476:	6938      	ldr	r0, [r7, #16]
 800a478:	f000 f874 	bl	800a564 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a47c:	4b07      	ldr	r3, [pc, #28]	@ (800a49c <vPortFree+0xc4>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	3301      	adds	r3, #1
 800a482:	4a06      	ldr	r2, [pc, #24]	@ (800a49c <vPortFree+0xc4>)
 800a484:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a486:	f7fe fc49 	bl	8008d1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a48a:	bf00      	nop
 800a48c:	3718      	adds	r7, #24
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}
 800a492:	bf00      	nop
 800a494:	20006c80 	.word	0x20006c80
 800a498:	20006c70 	.word	0x20006c70
 800a49c:	20006c7c 	.word	0x20006c7c

0800a4a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b085      	sub	sp, #20
 800a4a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a4a6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800a4aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a4ac:	4b27      	ldr	r3, [pc, #156]	@ (800a54c <prvHeapInit+0xac>)
 800a4ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	f003 0307 	and.w	r3, r3, #7
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d00c      	beq.n	800a4d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	3307      	adds	r3, #7
 800a4be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	f023 0307 	bic.w	r3, r3, #7
 800a4c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a4c8:	68ba      	ldr	r2, [r7, #8]
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	1ad3      	subs	r3, r2, r3
 800a4ce:	4a1f      	ldr	r2, [pc, #124]	@ (800a54c <prvHeapInit+0xac>)
 800a4d0:	4413      	add	r3, r2
 800a4d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a4d8:	4a1d      	ldr	r2, [pc, #116]	@ (800a550 <prvHeapInit+0xb0>)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a4de:	4b1c      	ldr	r3, [pc, #112]	@ (800a550 <prvHeapInit+0xb0>)
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	68ba      	ldr	r2, [r7, #8]
 800a4e8:	4413      	add	r3, r2
 800a4ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a4ec:	2208      	movs	r2, #8
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	1a9b      	subs	r3, r3, r2
 800a4f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f023 0307 	bic.w	r3, r3, #7
 800a4fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	4a15      	ldr	r2, [pc, #84]	@ (800a554 <prvHeapInit+0xb4>)
 800a500:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a502:	4b14      	ldr	r3, [pc, #80]	@ (800a554 <prvHeapInit+0xb4>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	2200      	movs	r2, #0
 800a508:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a50a:	4b12      	ldr	r3, [pc, #72]	@ (800a554 <prvHeapInit+0xb4>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	2200      	movs	r2, #0
 800a510:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	68fa      	ldr	r2, [r7, #12]
 800a51a:	1ad2      	subs	r2, r2, r3
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a520:	4b0c      	ldr	r3, [pc, #48]	@ (800a554 <prvHeapInit+0xb4>)
 800a522:	681a      	ldr	r2, [r3, #0]
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	685b      	ldr	r3, [r3, #4]
 800a52c:	4a0a      	ldr	r2, [pc, #40]	@ (800a558 <prvHeapInit+0xb8>)
 800a52e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	685b      	ldr	r3, [r3, #4]
 800a534:	4a09      	ldr	r2, [pc, #36]	@ (800a55c <prvHeapInit+0xbc>)
 800a536:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a538:	4b09      	ldr	r3, [pc, #36]	@ (800a560 <prvHeapInit+0xc0>)
 800a53a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a53e:	601a      	str	r2, [r3, #0]
}
 800a540:	bf00      	nop
 800a542:	3714      	adds	r7, #20
 800a544:	46bd      	mov	sp, r7
 800a546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54a:	4770      	bx	lr
 800a54c:	20006064 	.word	0x20006064
 800a550:	20006c64 	.word	0x20006c64
 800a554:	20006c6c 	.word	0x20006c6c
 800a558:	20006c74 	.word	0x20006c74
 800a55c:	20006c70 	.word	0x20006c70
 800a560:	20006c80 	.word	0x20006c80

0800a564 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a564:	b480      	push	{r7}
 800a566:	b085      	sub	sp, #20
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a56c:	4b28      	ldr	r3, [pc, #160]	@ (800a610 <prvInsertBlockIntoFreeList+0xac>)
 800a56e:	60fb      	str	r3, [r7, #12]
 800a570:	e002      	b.n	800a578 <prvInsertBlockIntoFreeList+0x14>
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	60fb      	str	r3, [r7, #12]
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	687a      	ldr	r2, [r7, #4]
 800a57e:	429a      	cmp	r2, r3
 800a580:	d8f7      	bhi.n	800a572 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	685b      	ldr	r3, [r3, #4]
 800a58a:	68ba      	ldr	r2, [r7, #8]
 800a58c:	4413      	add	r3, r2
 800a58e:	687a      	ldr	r2, [r7, #4]
 800a590:	429a      	cmp	r2, r3
 800a592:	d108      	bne.n	800a5a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	685a      	ldr	r2, [r3, #4]
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	685b      	ldr	r3, [r3, #4]
 800a59c:	441a      	add	r2, r3
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	685b      	ldr	r3, [r3, #4]
 800a5ae:	68ba      	ldr	r2, [r7, #8]
 800a5b0:	441a      	add	r2, r3
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d118      	bne.n	800a5ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681a      	ldr	r2, [r3, #0]
 800a5be:	4b15      	ldr	r3, [pc, #84]	@ (800a614 <prvInsertBlockIntoFreeList+0xb0>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	d00d      	beq.n	800a5e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	685a      	ldr	r2, [r3, #4]
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	685b      	ldr	r3, [r3, #4]
 800a5d0:	441a      	add	r2, r3
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	681a      	ldr	r2, [r3, #0]
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	601a      	str	r2, [r3, #0]
 800a5e0:	e008      	b.n	800a5f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a5e2:	4b0c      	ldr	r3, [pc, #48]	@ (800a614 <prvInsertBlockIntoFreeList+0xb0>)
 800a5e4:	681a      	ldr	r2, [r3, #0]
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	601a      	str	r2, [r3, #0]
 800a5ea:	e003      	b.n	800a5f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681a      	ldr	r2, [r3, #0]
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a5f4:	68fa      	ldr	r2, [r7, #12]
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	429a      	cmp	r2, r3
 800a5fa:	d002      	beq.n	800a602 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	687a      	ldr	r2, [r7, #4]
 800a600:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a602:	bf00      	nop
 800a604:	3714      	adds	r7, #20
 800a606:	46bd      	mov	sp, r7
 800a608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60c:	4770      	bx	lr
 800a60e:	bf00      	nop
 800a610:	20006c64 	.word	0x20006c64
 800a614:	20006c6c 	.word	0x20006c6c

0800a618 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration>:
 800a618:	4b04      	ldr	r3, [pc, #16]	@ (800a62c <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x14>)
 800a61a:	681a      	ldr	r2, [r3, #0]
 800a61c:	b10a      	cbz	r2, 800a622 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xa>
 800a61e:	4803      	ldr	r0, [pc, #12]	@ (800a62c <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x14>)
 800a620:	4770      	bx	lr
 800a622:	4a03      	ldr	r2, [pc, #12]	@ (800a630 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x18>)
 800a624:	4801      	ldr	r0, [pc, #4]	@ (800a62c <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x14>)
 800a626:	6812      	ldr	r2, [r2, #0]
 800a628:	601a      	str	r2, [r3, #0]
 800a62a:	4770      	bx	lr
 800a62c:	200000b4 	.word	0x200000b4
 800a630:	20000368 	.word	0x20000368

0800a634 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request>:
 800a634:	4b04      	ldr	r3, [pc, #16]	@ (800a648 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x14>)
 800a636:	4805      	ldr	r0, [pc, #20]	@ (800a64c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x18>)
 800a638:	4905      	ldr	r1, [pc, #20]	@ (800a650 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x1c>)
 800a63a:	4a06      	ldr	r2, [pc, #24]	@ (800a654 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x20>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	6003      	str	r3, [r0, #0]
 800a640:	600b      	str	r3, [r1, #0]
 800a642:	6013      	str	r3, [r2, #0]
 800a644:	4770      	bx	lr
 800a646:	bf00      	nop
 800a648:	20000368 	.word	0x20000368
 800a64c:	200000d0 	.word	0x200000d0
 800a650:	200000dc 	.word	0x200000dc
 800a654:	200000b4 	.word	0x200000b4

0800a658 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuStatus>:
 800a658:	4b04      	ldr	r3, [pc, #16]	@ (800a66c <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuStatus+0x14>)
 800a65a:	681a      	ldr	r2, [r3, #0]
 800a65c:	b10a      	cbz	r2, 800a662 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuStatus+0xa>
 800a65e:	4803      	ldr	r0, [pc, #12]	@ (800a66c <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuStatus+0x14>)
 800a660:	4770      	bx	lr
 800a662:	4a03      	ldr	r2, [pc, #12]	@ (800a670 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuStatus+0x18>)
 800a664:	4801      	ldr	r0, [pc, #4]	@ (800a66c <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuStatus+0x14>)
 800a666:	6812      	ldr	r2, [r2, #0]
 800a668:	601a      	str	r2, [r3, #0]
 800a66a:	4770      	bx	lr
 800a66c:	200000f0 	.word	0x200000f0
 800a670:	20000368 	.word	0x20000368

0800a674 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuStatus_Request>:
 800a674:	4b04      	ldr	r3, [pc, #16]	@ (800a688 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuStatus_Request+0x14>)
 800a676:	4805      	ldr	r0, [pc, #20]	@ (800a68c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuStatus_Request+0x18>)
 800a678:	4905      	ldr	r1, [pc, #20]	@ (800a690 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuStatus_Request+0x1c>)
 800a67a:	4a06      	ldr	r2, [pc, #24]	@ (800a694 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuStatus_Request+0x20>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	6003      	str	r3, [r0, #0]
 800a680:	600b      	str	r3, [r1, #0]
 800a682:	6013      	str	r3, [r2, #0]
 800a684:	4770      	bx	lr
 800a686:	bf00      	nop
 800a688:	20000368 	.word	0x20000368
 800a68c:	2000010c 	.word	0x2000010c
 800a690:	20000118 	.word	0x20000118
 800a694:	200000f0 	.word	0x200000f0

0800a698 <imu_interfaces__srv__ImuCalibration_Request__rosidl_typesupport_introspection_c__ImuCalibration_Request_init_function>:
 800a698:	f004 bf8e 	b.w	800f5b8 <imu_interfaces__srv__ImuCalibration_Request__init>

0800a69c <imu_interfaces__srv__ImuCalibration_Request__rosidl_typesupport_introspection_c__ImuCalibration_Request_fini_function>:
 800a69c:	f004 bf9e 	b.w	800f5dc <imu_interfaces__srv__ImuCalibration_Request__fini>

0800a6a0 <imu_interfaces__srv__ImuCalibration_Response__rosidl_typesupport_introspection_c__ImuCalibration_Response_init_function>:
 800a6a0:	f004 bfa0 	b.w	800f5e4 <imu_interfaces__srv__ImuCalibration_Response__init>

0800a6a4 <imu_interfaces__srv__ImuCalibration_Response__rosidl_typesupport_introspection_c__ImuCalibration_Response_fini_function>:
 800a6a4:	f004 bfa2 	b.w	800f5ec <imu_interfaces__srv__ImuCalibration_Response__fini>

0800a6a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request>:
 800a6a8:	b508      	push	{r3, lr}
 800a6aa:	f004 fb99 	bl	800ede0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800a6ae:	4b06      	ldr	r3, [pc, #24]	@ (800a6c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x20>)
 800a6b0:	4906      	ldr	r1, [pc, #24]	@ (800a6cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x24>)
 800a6b2:	681a      	ldr	r2, [r3, #0]
 800a6b4:	60c8      	str	r0, [r1, #12]
 800a6b6:	b10a      	cbz	r2, 800a6bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x14>
 800a6b8:	4803      	ldr	r0, [pc, #12]	@ (800a6c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x20>)
 800a6ba:	bd08      	pop	{r3, pc}
 800a6bc:	4a04      	ldr	r2, [pc, #16]	@ (800a6d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x28>)
 800a6be:	4802      	ldr	r0, [pc, #8]	@ (800a6c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x20>)
 800a6c0:	6812      	ldr	r2, [r2, #0]
 800a6c2:	601a      	str	r2, [r3, #0]
 800a6c4:	bd08      	pop	{r3, pc}
 800a6c6:	bf00      	nop
 800a6c8:	20000160 	.word	0x20000160
 800a6cc:	20000124 	.word	0x20000124
 800a6d0:	2000036c 	.word	0x2000036c

0800a6d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response>:
 800a6d4:	4b04      	ldr	r3, [pc, #16]	@ (800a6e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x14>)
 800a6d6:	681a      	ldr	r2, [r3, #0]
 800a6d8:	b10a      	cbz	r2, 800a6de <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0xa>
 800a6da:	4803      	ldr	r0, [pc, #12]	@ (800a6e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x14>)
 800a6dc:	4770      	bx	lr
 800a6de:	4a03      	ldr	r2, [pc, #12]	@ (800a6ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x18>)
 800a6e0:	4801      	ldr	r0, [pc, #4]	@ (800a6e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x14>)
 800a6e2:	6812      	ldr	r2, [r2, #0]
 800a6e4:	601a      	str	r2, [r3, #0]
 800a6e6:	4770      	bx	lr
 800a6e8:	200001a8 	.word	0x200001a8
 800a6ec:	2000036c 	.word	0x2000036c

0800a6f0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration>:
 800a6f0:	4b16      	ldr	r3, [pc, #88]	@ (800a74c <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x5c>)
 800a6f2:	681a      	ldr	r2, [r3, #0]
 800a6f4:	b510      	push	{r4, lr}
 800a6f6:	b132      	cbz	r2, 800a706 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x16>
 800a6f8:	685c      	ldr	r4, [r3, #4]
 800a6fa:	68a3      	ldr	r3, [r4, #8]
 800a6fc:	b153      	cbz	r3, 800a714 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x24>
 800a6fe:	68e3      	ldr	r3, [r4, #12]
 800a700:	b1a3      	cbz	r3, 800a72c <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x3c>
 800a702:	4812      	ldr	r0, [pc, #72]	@ (800a74c <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x5c>)
 800a704:	bd10      	pop	{r4, pc}
 800a706:	4a12      	ldr	r2, [pc, #72]	@ (800a750 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x60>)
 800a708:	685c      	ldr	r4, [r3, #4]
 800a70a:	6812      	ldr	r2, [r2, #0]
 800a70c:	601a      	str	r2, [r3, #0]
 800a70e:	68a3      	ldr	r3, [r4, #8]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d1f4      	bne.n	800a6fe <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xe>
 800a714:	f004 fb64 	bl	800ede0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800a718:	4b0e      	ldr	r3, [pc, #56]	@ (800a754 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x64>)
 800a71a:	490f      	ldr	r1, [pc, #60]	@ (800a758 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x68>)
 800a71c:	681a      	ldr	r2, [r3, #0]
 800a71e:	60c8      	str	r0, [r1, #12]
 800a720:	b17a      	cbz	r2, 800a742 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x52>
 800a722:	685b      	ldr	r3, [r3, #4]
 800a724:	60a3      	str	r3, [r4, #8]
 800a726:	68e3      	ldr	r3, [r4, #12]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d1ea      	bne.n	800a702 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x12>
 800a72c:	4b0b      	ldr	r3, [pc, #44]	@ (800a75c <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x6c>)
 800a72e:	681a      	ldr	r2, [r3, #0]
 800a730:	b11a      	cbz	r2, 800a73a <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x4a>
 800a732:	685b      	ldr	r3, [r3, #4]
 800a734:	4805      	ldr	r0, [pc, #20]	@ (800a74c <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x5c>)
 800a736:	60e3      	str	r3, [r4, #12]
 800a738:	bd10      	pop	{r4, pc}
 800a73a:	4a05      	ldr	r2, [pc, #20]	@ (800a750 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x60>)
 800a73c:	6812      	ldr	r2, [r2, #0]
 800a73e:	601a      	str	r2, [r3, #0]
 800a740:	e7f7      	b.n	800a732 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x42>
 800a742:	4a03      	ldr	r2, [pc, #12]	@ (800a750 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x60>)
 800a744:	6812      	ldr	r2, [r2, #0]
 800a746:	601a      	str	r2, [r3, #0]
 800a748:	e7eb      	b.n	800a722 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x32>
 800a74a:	bf00      	nop
 800a74c:	200001c4 	.word	0x200001c4
 800a750:	2000036c 	.word	0x2000036c
 800a754:	20000160 	.word	0x20000160
 800a758:	20000124 	.word	0x20000124
 800a75c:	200001a8 	.word	0x200001a8

0800a760 <imu_interfaces__srv__ImuStatus_Request__rosidl_typesupport_introspection_c__ImuStatus_Request_init_function>:
 800a760:	f004 bf46 	b.w	800f5f0 <imu_interfaces__srv__ImuStatus_Request__init>

0800a764 <imu_interfaces__srv__ImuStatus_Request__rosidl_typesupport_introspection_c__ImuStatus_Request_fini_function>:
 800a764:	f004 bf56 	b.w	800f614 <imu_interfaces__srv__ImuStatus_Request__fini>

0800a768 <imu_interfaces__srv__ImuStatus_Response__rosidl_typesupport_introspection_c__ImuStatus_Response_init_function>:
 800a768:	f004 bf58 	b.w	800f61c <imu_interfaces__srv__ImuStatus_Response__init>

0800a76c <imu_interfaces__srv__ImuStatus_Response__rosidl_typesupport_introspection_c__ImuStatus_Response_fini_function>:
 800a76c:	f004 bf68 	b.w	800f640 <imu_interfaces__srv__ImuStatus_Response__fini>

0800a770 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuStatus_Request>:
 800a770:	b508      	push	{r3, lr}
 800a772:	f004 fc47 	bl	800f004 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool>
 800a776:	4b06      	ldr	r3, [pc, #24]	@ (800a790 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuStatus_Request+0x20>)
 800a778:	4906      	ldr	r1, [pc, #24]	@ (800a794 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuStatus_Request+0x24>)
 800a77a:	681a      	ldr	r2, [r3, #0]
 800a77c:	60c8      	str	r0, [r1, #12]
 800a77e:	b10a      	cbz	r2, 800a784 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuStatus_Request+0x14>
 800a780:	4803      	ldr	r0, [pc, #12]	@ (800a790 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuStatus_Request+0x20>)
 800a782:	bd08      	pop	{r3, pc}
 800a784:	4a04      	ldr	r2, [pc, #16]	@ (800a798 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuStatus_Request+0x28>)
 800a786:	4802      	ldr	r0, [pc, #8]	@ (800a790 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuStatus_Request+0x20>)
 800a788:	6812      	ldr	r2, [r2, #0]
 800a78a:	601a      	str	r2, [r3, #0]
 800a78c:	bd08      	pop	{r3, pc}
 800a78e:	bf00      	nop
 800a790:	2000020c 	.word	0x2000020c
 800a794:	200001d0 	.word	0x200001d0
 800a798:	2000036c 	.word	0x2000036c

0800a79c <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuStatus_Response>:
 800a79c:	b508      	push	{r3, lr}
 800a79e:	f004 fc31 	bl	800f004 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool>
 800a7a2:	4b06      	ldr	r3, [pc, #24]	@ (800a7bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuStatus_Response+0x20>)
 800a7a4:	4906      	ldr	r1, [pc, #24]	@ (800a7c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuStatus_Response+0x24>)
 800a7a6:	681a      	ldr	r2, [r3, #0]
 800a7a8:	60c8      	str	r0, [r1, #12]
 800a7aa:	b10a      	cbz	r2, 800a7b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuStatus_Response+0x14>
 800a7ac:	4803      	ldr	r0, [pc, #12]	@ (800a7bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuStatus_Response+0x20>)
 800a7ae:	bd08      	pop	{r3, pc}
 800a7b0:	4a04      	ldr	r2, [pc, #16]	@ (800a7c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuStatus_Response+0x28>)
 800a7b2:	4802      	ldr	r0, [pc, #8]	@ (800a7bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuStatus_Response+0x20>)
 800a7b4:	6812      	ldr	r2, [r2, #0]
 800a7b6:	601a      	str	r2, [r3, #0]
 800a7b8:	bd08      	pop	{r3, pc}
 800a7ba:	bf00      	nop
 800a7bc:	20000254 	.word	0x20000254
 800a7c0:	20000218 	.word	0x20000218
 800a7c4:	2000036c 	.word	0x2000036c

0800a7c8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuStatus>:
 800a7c8:	4b18      	ldr	r3, [pc, #96]	@ (800a82c <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuStatus+0x64>)
 800a7ca:	681a      	ldr	r2, [r3, #0]
 800a7cc:	b510      	push	{r4, lr}
 800a7ce:	b132      	cbz	r2, 800a7de <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuStatus+0x16>
 800a7d0:	685c      	ldr	r4, [r3, #4]
 800a7d2:	68a3      	ldr	r3, [r4, #8]
 800a7d4:	b153      	cbz	r3, 800a7ec <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuStatus+0x24>
 800a7d6:	68e3      	ldr	r3, [r4, #12]
 800a7d8:	b1a3      	cbz	r3, 800a804 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuStatus+0x3c>
 800a7da:	4814      	ldr	r0, [pc, #80]	@ (800a82c <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuStatus+0x64>)
 800a7dc:	bd10      	pop	{r4, pc}
 800a7de:	4a14      	ldr	r2, [pc, #80]	@ (800a830 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuStatus+0x68>)
 800a7e0:	685c      	ldr	r4, [r3, #4]
 800a7e2:	6812      	ldr	r2, [r2, #0]
 800a7e4:	601a      	str	r2, [r3, #0]
 800a7e6:	68a3      	ldr	r3, [r4, #8]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d1f4      	bne.n	800a7d6 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuStatus+0xe>
 800a7ec:	f004 fc0a 	bl	800f004 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool>
 800a7f0:	4b10      	ldr	r3, [pc, #64]	@ (800a834 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuStatus+0x6c>)
 800a7f2:	4911      	ldr	r1, [pc, #68]	@ (800a838 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuStatus+0x70>)
 800a7f4:	681a      	ldr	r2, [r3, #0]
 800a7f6:	60c8      	str	r0, [r1, #12]
 800a7f8:	b19a      	cbz	r2, 800a822 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuStatus+0x5a>
 800a7fa:	685b      	ldr	r3, [r3, #4]
 800a7fc:	60a3      	str	r3, [r4, #8]
 800a7fe:	68e3      	ldr	r3, [r4, #12]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d1ea      	bne.n	800a7da <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuStatus+0x12>
 800a804:	f004 fbfe 	bl	800f004 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool>
 800a808:	4b0c      	ldr	r3, [pc, #48]	@ (800a83c <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuStatus+0x74>)
 800a80a:	490d      	ldr	r1, [pc, #52]	@ (800a840 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuStatus+0x78>)
 800a80c:	681a      	ldr	r2, [r3, #0]
 800a80e:	60c8      	str	r0, [r1, #12]
 800a810:	b11a      	cbz	r2, 800a81a <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuStatus+0x52>
 800a812:	685b      	ldr	r3, [r3, #4]
 800a814:	4805      	ldr	r0, [pc, #20]	@ (800a82c <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuStatus+0x64>)
 800a816:	60e3      	str	r3, [r4, #12]
 800a818:	bd10      	pop	{r4, pc}
 800a81a:	4a05      	ldr	r2, [pc, #20]	@ (800a830 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuStatus+0x68>)
 800a81c:	6812      	ldr	r2, [r2, #0]
 800a81e:	601a      	str	r2, [r3, #0]
 800a820:	e7f7      	b.n	800a812 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuStatus+0x4a>
 800a822:	4a03      	ldr	r2, [pc, #12]	@ (800a830 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuStatus+0x68>)
 800a824:	6812      	ldr	r2, [r2, #0]
 800a826:	601a      	str	r2, [r3, #0]
 800a828:	e7e7      	b.n	800a7fa <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuStatus+0x32>
 800a82a:	bf00      	nop
 800a82c:	20000270 	.word	0x20000270
 800a830:	2000036c 	.word	0x2000036c
 800a834:	2000020c 	.word	0x2000020c
 800a838:	200001d0 	.word	0x200001d0
 800a83c:	20000254 	.word	0x20000254
 800a840:	20000218 	.word	0x20000218

0800a844 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request>:
 800a844:	4800      	ldr	r0, [pc, #0]	@ (800a848 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x4>)
 800a846:	4770      	bx	lr
 800a848:	20000298 	.word	0x20000298

0800a84c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response>:
 800a84c:	4800      	ldr	r0, [pc, #0]	@ (800a850 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x4>)
 800a84e:	4770      	bx	lr
 800a850:	200002a4 	.word	0x200002a4

0800a854 <get_serialized_size_imu_interfaces__srv__ImuCalibration_Request>:
 800a854:	b108      	cbz	r0, 800a85a <get_serialized_size_imu_interfaces__srv__ImuCalibration_Request+0x6>
 800a856:	f004 bb15 	b.w	800ee84 <get_serialized_size_sensor_msgs__msg__Imu>
 800a85a:	4770      	bx	lr

0800a85c <_ImuCalibration_Request__max_serialized_size>:
 800a85c:	b500      	push	{lr}
 800a85e:	b083      	sub	sp, #12
 800a860:	2301      	movs	r3, #1
 800a862:	2100      	movs	r1, #0
 800a864:	f10d 0007 	add.w	r0, sp, #7
 800a868:	f88d 3007 	strb.w	r3, [sp, #7]
 800a86c:	f004 fb88 	bl	800ef80 <max_serialized_size_sensor_msgs__msg__Imu>
 800a870:	b003      	add	sp, #12
 800a872:	f85d fb04 	ldr.w	pc, [sp], #4
 800a876:	bf00      	nop

0800a878 <_ImuCalibration_Response__max_serialized_size>:
 800a878:	b508      	push	{r3, lr}
 800a87a:	2101      	movs	r1, #1
 800a87c:	2000      	movs	r0, #0
 800a87e:	f001 fbfd 	bl	800c07c <ucdr_alignment>
 800a882:	3001      	adds	r0, #1
 800a884:	bd08      	pop	{r3, pc}
 800a886:	bf00      	nop

0800a888 <_ImuCalibration_Response__cdr_deserialize>:
 800a888:	b109      	cbz	r1, 800a88e <_ImuCalibration_Response__cdr_deserialize+0x6>
 800a88a:	f000 b8f9 	b.w	800aa80 <ucdr_deserialize_bool>
 800a88e:	4608      	mov	r0, r1
 800a890:	4770      	bx	lr
 800a892:	bf00      	nop

0800a894 <_ImuCalibration_Request__get_serialized_size>:
 800a894:	b110      	cbz	r0, 800a89c <_ImuCalibration_Request__get_serialized_size+0x8>
 800a896:	2100      	movs	r1, #0
 800a898:	f004 baf4 	b.w	800ee84 <get_serialized_size_sensor_msgs__msg__Imu>
 800a89c:	4770      	bx	lr
 800a89e:	bf00      	nop

0800a8a0 <_ImuCalibration_Request__cdr_deserialize>:
 800a8a0:	b570      	push	{r4, r5, r6, lr}
 800a8a2:	460c      	mov	r4, r1
 800a8a4:	b149      	cbz	r1, 800a8ba <_ImuCalibration_Request__cdr_deserialize+0x1a>
 800a8a6:	4605      	mov	r5, r0
 800a8a8:	f004 fba4 	bl	800eff4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800a8ac:	6843      	ldr	r3, [r0, #4]
 800a8ae:	4621      	mov	r1, r4
 800a8b0:	4628      	mov	r0, r5
 800a8b2:	68db      	ldr	r3, [r3, #12]
 800a8b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a8b8:	4718      	bx	r3
 800a8ba:	4608      	mov	r0, r1
 800a8bc:	bd70      	pop	{r4, r5, r6, pc}
 800a8be:	bf00      	nop

0800a8c0 <_ImuCalibration_Request__cdr_serialize>:
 800a8c0:	b158      	cbz	r0, 800a8da <_ImuCalibration_Request__cdr_serialize+0x1a>
 800a8c2:	b570      	push	{r4, r5, r6, lr}
 800a8c4:	460d      	mov	r5, r1
 800a8c6:	4604      	mov	r4, r0
 800a8c8:	f004 fb94 	bl	800eff4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800a8cc:	6843      	ldr	r3, [r0, #4]
 800a8ce:	4629      	mov	r1, r5
 800a8d0:	4620      	mov	r0, r4
 800a8d2:	689b      	ldr	r3, [r3, #8]
 800a8d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a8d8:	4718      	bx	r3
 800a8da:	4770      	bx	lr

0800a8dc <get_serialized_size_imu_interfaces__srv__ImuCalibration_Response>:
 800a8dc:	b138      	cbz	r0, 800a8ee <get_serialized_size_imu_interfaces__srv__ImuCalibration_Response+0x12>
 800a8de:	b508      	push	{r3, lr}
 800a8e0:	460b      	mov	r3, r1
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	2101      	movs	r1, #1
 800a8e6:	f001 fbc9 	bl	800c07c <ucdr_alignment>
 800a8ea:	3001      	adds	r0, #1
 800a8ec:	bd08      	pop	{r3, pc}
 800a8ee:	4770      	bx	lr

0800a8f0 <_ImuCalibration_Response__cdr_serialize>:
 800a8f0:	460a      	mov	r2, r1
 800a8f2:	b118      	cbz	r0, 800a8fc <_ImuCalibration_Response__cdr_serialize+0xc>
 800a8f4:	7801      	ldrb	r1, [r0, #0]
 800a8f6:	4610      	mov	r0, r2
 800a8f8:	f000 b8ac 	b.w	800aa54 <ucdr_serialize_bool>
 800a8fc:	4770      	bx	lr
 800a8fe:	bf00      	nop

0800a900 <_ImuCalibration_Response__get_serialized_size>:
 800a900:	b130      	cbz	r0, 800a910 <_ImuCalibration_Response__get_serialized_size+0x10>
 800a902:	b508      	push	{r3, lr}
 800a904:	2101      	movs	r1, #1
 800a906:	2000      	movs	r0, #0
 800a908:	f001 fbb8 	bl	800c07c <ucdr_alignment>
 800a90c:	3001      	adds	r0, #1
 800a90e:	bd08      	pop	{r3, pc}
 800a910:	4770      	bx	lr
 800a912:	bf00      	nop

0800a914 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration>:
 800a914:	4800      	ldr	r0, [pc, #0]	@ (800a918 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x4>)
 800a916:	4770      	bx	lr
 800a918:	2000028c 	.word	0x2000028c

0800a91c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuStatus_Request>:
 800a91c:	4800      	ldr	r0, [pc, #0]	@ (800a920 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuStatus_Request+0x4>)
 800a91e:	4770      	bx	lr
 800a920:	20000304 	.word	0x20000304

0800a924 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuStatus_Response>:
 800a924:	4800      	ldr	r0, [pc, #0]	@ (800a928 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuStatus_Response+0x4>)
 800a926:	4770      	bx	lr
 800a928:	20000310 	.word	0x20000310

0800a92c <get_serialized_size_imu_interfaces__srv__ImuStatus_Request>:
 800a92c:	b108      	cbz	r0, 800a932 <get_serialized_size_imu_interfaces__srv__ImuStatus_Request+0x6>
 800a92e:	f004 bb9f 	b.w	800f070 <get_serialized_size_std_msgs__msg__Bool>
 800a932:	4770      	bx	lr

0800a934 <get_serialized_size_imu_interfaces__srv__ImuStatus_Response>:
 800a934:	b108      	cbz	r0, 800a93a <get_serialized_size_imu_interfaces__srv__ImuStatus_Response+0x6>
 800a936:	f004 bb9b 	b.w	800f070 <get_serialized_size_std_msgs__msg__Bool>
 800a93a:	4770      	bx	lr

0800a93c <_ImuStatus_Request__max_serialized_size>:
 800a93c:	b500      	push	{lr}
 800a93e:	b083      	sub	sp, #12
 800a940:	2301      	movs	r3, #1
 800a942:	2100      	movs	r1, #0
 800a944:	f10d 0007 	add.w	r0, sp, #7
 800a948:	f88d 3007 	strb.w	r3, [sp, #7]
 800a94c:	f004 fbac 	bl	800f0a8 <max_serialized_size_std_msgs__msg__Bool>
 800a950:	b003      	add	sp, #12
 800a952:	f85d fb04 	ldr.w	pc, [sp], #4
 800a956:	bf00      	nop

0800a958 <_ImuStatus_Request__get_serialized_size>:
 800a958:	b110      	cbz	r0, 800a960 <_ImuStatus_Request__get_serialized_size+0x8>
 800a95a:	2100      	movs	r1, #0
 800a95c:	f004 bb88 	b.w	800f070 <get_serialized_size_std_msgs__msg__Bool>
 800a960:	4770      	bx	lr
 800a962:	bf00      	nop

0800a964 <_ImuStatus_Response__get_serialized_size>:
 800a964:	b110      	cbz	r0, 800a96c <_ImuStatus_Response__get_serialized_size+0x8>
 800a966:	2100      	movs	r1, #0
 800a968:	f004 bb82 	b.w	800f070 <get_serialized_size_std_msgs__msg__Bool>
 800a96c:	4770      	bx	lr
 800a96e:	bf00      	nop

0800a970 <_ImuStatus_Request__cdr_deserialize>:
 800a970:	b570      	push	{r4, r5, r6, lr}
 800a972:	460c      	mov	r4, r1
 800a974:	b149      	cbz	r1, 800a98a <_ImuStatus_Request__cdr_deserialize+0x1a>
 800a976:	4605      	mov	r5, r0
 800a978:	f004 fba0 	bl	800f0bc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Bool>
 800a97c:	6843      	ldr	r3, [r0, #4]
 800a97e:	4621      	mov	r1, r4
 800a980:	4628      	mov	r0, r5
 800a982:	68db      	ldr	r3, [r3, #12]
 800a984:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a988:	4718      	bx	r3
 800a98a:	4608      	mov	r0, r1
 800a98c:	bd70      	pop	{r4, r5, r6, pc}
 800a98e:	bf00      	nop

0800a990 <_ImuStatus_Request__cdr_serialize>:
 800a990:	b158      	cbz	r0, 800a9aa <_ImuStatus_Request__cdr_serialize+0x1a>
 800a992:	b570      	push	{r4, r5, r6, lr}
 800a994:	460d      	mov	r5, r1
 800a996:	4604      	mov	r4, r0
 800a998:	f004 fb90 	bl	800f0bc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Bool>
 800a99c:	6843      	ldr	r3, [r0, #4]
 800a99e:	4629      	mov	r1, r5
 800a9a0:	4620      	mov	r0, r4
 800a9a2:	689b      	ldr	r3, [r3, #8]
 800a9a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a9a8:	4718      	bx	r3
 800a9aa:	4770      	bx	lr

0800a9ac <_ImuStatus_Response__cdr_deserialize>:
 800a9ac:	b570      	push	{r4, r5, r6, lr}
 800a9ae:	460c      	mov	r4, r1
 800a9b0:	b149      	cbz	r1, 800a9c6 <_ImuStatus_Response__cdr_deserialize+0x1a>
 800a9b2:	4605      	mov	r5, r0
 800a9b4:	f004 fb82 	bl	800f0bc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Bool>
 800a9b8:	6843      	ldr	r3, [r0, #4]
 800a9ba:	4621      	mov	r1, r4
 800a9bc:	4628      	mov	r0, r5
 800a9be:	68db      	ldr	r3, [r3, #12]
 800a9c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a9c4:	4718      	bx	r3
 800a9c6:	4608      	mov	r0, r1
 800a9c8:	bd70      	pop	{r4, r5, r6, pc}
 800a9ca:	bf00      	nop

0800a9cc <_ImuStatus_Response__cdr_serialize>:
 800a9cc:	b158      	cbz	r0, 800a9e6 <_ImuStatus_Response__cdr_serialize+0x1a>
 800a9ce:	b570      	push	{r4, r5, r6, lr}
 800a9d0:	460d      	mov	r5, r1
 800a9d2:	4604      	mov	r4, r0
 800a9d4:	f004 fb72 	bl	800f0bc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Bool>
 800a9d8:	6843      	ldr	r3, [r0, #4]
 800a9da:	4629      	mov	r1, r5
 800a9dc:	4620      	mov	r0, r4
 800a9de:	689b      	ldr	r3, [r3, #8]
 800a9e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a9e4:	4718      	bx	r3
 800a9e6:	4770      	bx	lr

0800a9e8 <_ImuStatus_Response__max_serialized_size>:
 800a9e8:	b500      	push	{lr}
 800a9ea:	b083      	sub	sp, #12
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	2100      	movs	r1, #0
 800a9f0:	f10d 0007 	add.w	r0, sp, #7
 800a9f4:	f88d 3007 	strb.w	r3, [sp, #7]
 800a9f8:	f004 fb56 	bl	800f0a8 <max_serialized_size_std_msgs__msg__Bool>
 800a9fc:	b003      	add	sp, #12
 800a9fe:	f85d fb04 	ldr.w	pc, [sp], #4
 800aa02:	bf00      	nop

0800aa04 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__imu_interfaces__srv__ImuStatus>:
 800aa04:	4800      	ldr	r0, [pc, #0]	@ (800aa08 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__imu_interfaces__srv__ImuStatus+0x4>)
 800aa06:	4770      	bx	lr
 800aa08:	200002f8 	.word	0x200002f8

0800aa0c <micro_ros_string_utilities_init>:
 800aa0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa10:	b086      	sub	sp, #24
 800aa12:	460f      	mov	r7, r1
 800aa14:	4604      	mov	r4, r0
 800aa16:	a801      	add	r0, sp, #4
 800aa18:	f002 fd42 	bl	800d4a0 <rcutils_get_default_allocator>
 800aa1c:	4638      	mov	r0, r7
 800aa1e:	f7f5 fc09 	bl	8000234 <strlen>
 800aa22:	f100 0801 	add.w	r8, r0, #1
 800aa26:	9b01      	ldr	r3, [sp, #4]
 800aa28:	9905      	ldr	r1, [sp, #20]
 800aa2a:	4605      	mov	r5, r0
 800aa2c:	4640      	mov	r0, r8
 800aa2e:	4798      	blx	r3
 800aa30:	4642      	mov	r2, r8
 800aa32:	4606      	mov	r6, r0
 800aa34:	2100      	movs	r1, #0
 800aa36:	f00e fc6b 	bl	8019310 <memset>
 800aa3a:	462a      	mov	r2, r5
 800aa3c:	4639      	mov	r1, r7
 800aa3e:	4630      	mov	r0, r6
 800aa40:	f00e fd2f 	bl	80194a2 <memcpy>
 800aa44:	4620      	mov	r0, r4
 800aa46:	e9c4 6500 	strd	r6, r5, [r4]
 800aa4a:	f8c4 8008 	str.w	r8, [r4, #8]
 800aa4e:	b006      	add	sp, #24
 800aa50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800aa54 <ucdr_serialize_bool>:
 800aa54:	b538      	push	{r3, r4, r5, lr}
 800aa56:	460d      	mov	r5, r1
 800aa58:	2101      	movs	r1, #1
 800aa5a:	4604      	mov	r4, r0
 800aa5c:	f001 fac2 	bl	800bfe4 <ucdr_check_final_buffer_behavior>
 800aa60:	b148      	cbz	r0, 800aa76 <ucdr_serialize_bool+0x22>
 800aa62:	68a3      	ldr	r3, [r4, #8]
 800aa64:	701d      	strb	r5, [r3, #0]
 800aa66:	68a2      	ldr	r2, [r4, #8]
 800aa68:	6923      	ldr	r3, [r4, #16]
 800aa6a:	2101      	movs	r1, #1
 800aa6c:	440a      	add	r2, r1
 800aa6e:	440b      	add	r3, r1
 800aa70:	60a2      	str	r2, [r4, #8]
 800aa72:	6123      	str	r3, [r4, #16]
 800aa74:	7561      	strb	r1, [r4, #21]
 800aa76:	7da0      	ldrb	r0, [r4, #22]
 800aa78:	f080 0001 	eor.w	r0, r0, #1
 800aa7c:	bd38      	pop	{r3, r4, r5, pc}
 800aa7e:	bf00      	nop

0800aa80 <ucdr_deserialize_bool>:
 800aa80:	b538      	push	{r3, r4, r5, lr}
 800aa82:	460d      	mov	r5, r1
 800aa84:	2101      	movs	r1, #1
 800aa86:	4604      	mov	r4, r0
 800aa88:	f001 faac 	bl	800bfe4 <ucdr_check_final_buffer_behavior>
 800aa8c:	b160      	cbz	r0, 800aaa8 <ucdr_deserialize_bool+0x28>
 800aa8e:	68a2      	ldr	r2, [r4, #8]
 800aa90:	6923      	ldr	r3, [r4, #16]
 800aa92:	f812 1b01 	ldrb.w	r1, [r2], #1
 800aa96:	3900      	subs	r1, #0
 800aa98:	bf18      	it	ne
 800aa9a:	2101      	movne	r1, #1
 800aa9c:	7029      	strb	r1, [r5, #0]
 800aa9e:	3301      	adds	r3, #1
 800aaa0:	2101      	movs	r1, #1
 800aaa2:	60a2      	str	r2, [r4, #8]
 800aaa4:	6123      	str	r3, [r4, #16]
 800aaa6:	7561      	strb	r1, [r4, #21]
 800aaa8:	7da0      	ldrb	r0, [r4, #22]
 800aaaa:	f080 0001 	eor.w	r0, r0, #1
 800aaae:	bd38      	pop	{r3, r4, r5, pc}

0800aab0 <ucdr_serialize_uint8_t>:
 800aab0:	b538      	push	{r3, r4, r5, lr}
 800aab2:	460d      	mov	r5, r1
 800aab4:	2101      	movs	r1, #1
 800aab6:	4604      	mov	r4, r0
 800aab8:	f001 fa94 	bl	800bfe4 <ucdr_check_final_buffer_behavior>
 800aabc:	b148      	cbz	r0, 800aad2 <ucdr_serialize_uint8_t+0x22>
 800aabe:	68a3      	ldr	r3, [r4, #8]
 800aac0:	701d      	strb	r5, [r3, #0]
 800aac2:	68a2      	ldr	r2, [r4, #8]
 800aac4:	6923      	ldr	r3, [r4, #16]
 800aac6:	2101      	movs	r1, #1
 800aac8:	440a      	add	r2, r1
 800aaca:	440b      	add	r3, r1
 800aacc:	60a2      	str	r2, [r4, #8]
 800aace:	6123      	str	r3, [r4, #16]
 800aad0:	7561      	strb	r1, [r4, #21]
 800aad2:	7da0      	ldrb	r0, [r4, #22]
 800aad4:	f080 0001 	eor.w	r0, r0, #1
 800aad8:	bd38      	pop	{r3, r4, r5, pc}
 800aada:	bf00      	nop

0800aadc <ucdr_deserialize_uint8_t>:
 800aadc:	b538      	push	{r3, r4, r5, lr}
 800aade:	460d      	mov	r5, r1
 800aae0:	2101      	movs	r1, #1
 800aae2:	4604      	mov	r4, r0
 800aae4:	f001 fa7e 	bl	800bfe4 <ucdr_check_final_buffer_behavior>
 800aae8:	b150      	cbz	r0, 800ab00 <ucdr_deserialize_uint8_t+0x24>
 800aaea:	68a3      	ldr	r3, [r4, #8]
 800aaec:	781b      	ldrb	r3, [r3, #0]
 800aaee:	702b      	strb	r3, [r5, #0]
 800aaf0:	68a2      	ldr	r2, [r4, #8]
 800aaf2:	6923      	ldr	r3, [r4, #16]
 800aaf4:	2101      	movs	r1, #1
 800aaf6:	440a      	add	r2, r1
 800aaf8:	440b      	add	r3, r1
 800aafa:	60a2      	str	r2, [r4, #8]
 800aafc:	6123      	str	r3, [r4, #16]
 800aafe:	7561      	strb	r1, [r4, #21]
 800ab00:	7da0      	ldrb	r0, [r4, #22]
 800ab02:	f080 0001 	eor.w	r0, r0, #1
 800ab06:	bd38      	pop	{r3, r4, r5, pc}

0800ab08 <ucdr_serialize_uint16_t>:
 800ab08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab0c:	b082      	sub	sp, #8
 800ab0e:	460b      	mov	r3, r1
 800ab10:	2102      	movs	r1, #2
 800ab12:	4604      	mov	r4, r0
 800ab14:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ab18:	f001 fab8 	bl	800c08c <ucdr_buffer_alignment>
 800ab1c:	4601      	mov	r1, r0
 800ab1e:	4620      	mov	r0, r4
 800ab20:	7d67      	ldrb	r7, [r4, #21]
 800ab22:	f001 faf7 	bl	800c114 <ucdr_advance_buffer>
 800ab26:	2102      	movs	r1, #2
 800ab28:	4620      	mov	r0, r4
 800ab2a:	f001 fa4f 	bl	800bfcc <ucdr_check_buffer_available_for>
 800ab2e:	bb78      	cbnz	r0, 800ab90 <ucdr_serialize_uint16_t+0x88>
 800ab30:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ab34:	42ab      	cmp	r3, r5
 800ab36:	d926      	bls.n	800ab86 <ucdr_serialize_uint16_t+0x7e>
 800ab38:	1b5e      	subs	r6, r3, r5
 800ab3a:	60a3      	str	r3, [r4, #8]
 800ab3c:	6923      	ldr	r3, [r4, #16]
 800ab3e:	f1c6 0802 	rsb	r8, r6, #2
 800ab42:	4433      	add	r3, r6
 800ab44:	6123      	str	r3, [r4, #16]
 800ab46:	4641      	mov	r1, r8
 800ab48:	4620      	mov	r0, r4
 800ab4a:	f001 fa4b 	bl	800bfe4 <ucdr_check_final_buffer_behavior>
 800ab4e:	2800      	cmp	r0, #0
 800ab50:	d03b      	beq.n	800abca <ucdr_serialize_uint16_t+0xc2>
 800ab52:	7d23      	ldrb	r3, [r4, #20]
 800ab54:	2b01      	cmp	r3, #1
 800ab56:	d04a      	beq.n	800abee <ucdr_serialize_uint16_t+0xe6>
 800ab58:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ab5c:	702b      	strb	r3, [r5, #0]
 800ab5e:	2e00      	cmp	r6, #0
 800ab60:	d040      	beq.n	800abe4 <ucdr_serialize_uint16_t+0xdc>
 800ab62:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ab66:	706b      	strb	r3, [r5, #1]
 800ab68:	6923      	ldr	r3, [r4, #16]
 800ab6a:	68a2      	ldr	r2, [r4, #8]
 800ab6c:	7da0      	ldrb	r0, [r4, #22]
 800ab6e:	3302      	adds	r3, #2
 800ab70:	1b9e      	subs	r6, r3, r6
 800ab72:	4442      	add	r2, r8
 800ab74:	2302      	movs	r3, #2
 800ab76:	f080 0001 	eor.w	r0, r0, #1
 800ab7a:	60a2      	str	r2, [r4, #8]
 800ab7c:	6126      	str	r6, [r4, #16]
 800ab7e:	7563      	strb	r3, [r4, #21]
 800ab80:	b002      	add	sp, #8
 800ab82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab86:	2102      	movs	r1, #2
 800ab88:	4620      	mov	r0, r4
 800ab8a:	f001 fa2b 	bl	800bfe4 <ucdr_check_final_buffer_behavior>
 800ab8e:	b190      	cbz	r0, 800abb6 <ucdr_serialize_uint16_t+0xae>
 800ab90:	7d23      	ldrb	r3, [r4, #20]
 800ab92:	2b01      	cmp	r3, #1
 800ab94:	68a3      	ldr	r3, [r4, #8]
 800ab96:	d014      	beq.n	800abc2 <ucdr_serialize_uint16_t+0xba>
 800ab98:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ab9c:	701a      	strb	r2, [r3, #0]
 800ab9e:	68a3      	ldr	r3, [r4, #8]
 800aba0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800aba4:	705a      	strb	r2, [r3, #1]
 800aba6:	68a2      	ldr	r2, [r4, #8]
 800aba8:	6923      	ldr	r3, [r4, #16]
 800abaa:	3202      	adds	r2, #2
 800abac:	3302      	adds	r3, #2
 800abae:	2102      	movs	r1, #2
 800abb0:	60a2      	str	r2, [r4, #8]
 800abb2:	6123      	str	r3, [r4, #16]
 800abb4:	7561      	strb	r1, [r4, #21]
 800abb6:	7da0      	ldrb	r0, [r4, #22]
 800abb8:	f080 0001 	eor.w	r0, r0, #1
 800abbc:	b002      	add	sp, #8
 800abbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abc2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800abc6:	801a      	strh	r2, [r3, #0]
 800abc8:	e7ed      	b.n	800aba6 <ucdr_serialize_uint16_t+0x9e>
 800abca:	68a2      	ldr	r2, [r4, #8]
 800abcc:	6923      	ldr	r3, [r4, #16]
 800abce:	7da0      	ldrb	r0, [r4, #22]
 800abd0:	7567      	strb	r7, [r4, #21]
 800abd2:	1b92      	subs	r2, r2, r6
 800abd4:	1b9b      	subs	r3, r3, r6
 800abd6:	f080 0001 	eor.w	r0, r0, #1
 800abda:	60a2      	str	r2, [r4, #8]
 800abdc:	6123      	str	r3, [r4, #16]
 800abde:	b002      	add	sp, #8
 800abe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abe4:	68a3      	ldr	r3, [r4, #8]
 800abe6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800abea:	701a      	strb	r2, [r3, #0]
 800abec:	e7bc      	b.n	800ab68 <ucdr_serialize_uint16_t+0x60>
 800abee:	4628      	mov	r0, r5
 800abf0:	f10d 0506 	add.w	r5, sp, #6
 800abf4:	4629      	mov	r1, r5
 800abf6:	4632      	mov	r2, r6
 800abf8:	f00e fc53 	bl	80194a2 <memcpy>
 800abfc:	68a0      	ldr	r0, [r4, #8]
 800abfe:	4642      	mov	r2, r8
 800ac00:	19a9      	adds	r1, r5, r6
 800ac02:	f00e fc4e 	bl	80194a2 <memcpy>
 800ac06:	e7af      	b.n	800ab68 <ucdr_serialize_uint16_t+0x60>

0800ac08 <ucdr_serialize_endian_uint16_t>:
 800ac08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ac0c:	b083      	sub	sp, #12
 800ac0e:	460d      	mov	r5, r1
 800ac10:	2102      	movs	r1, #2
 800ac12:	4604      	mov	r4, r0
 800ac14:	f8ad 2006 	strh.w	r2, [sp, #6]
 800ac18:	f001 fa38 	bl	800c08c <ucdr_buffer_alignment>
 800ac1c:	4601      	mov	r1, r0
 800ac1e:	4620      	mov	r0, r4
 800ac20:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ac24:	f001 fa76 	bl	800c114 <ucdr_advance_buffer>
 800ac28:	2102      	movs	r1, #2
 800ac2a:	4620      	mov	r0, r4
 800ac2c:	f001 f9ce 	bl	800bfcc <ucdr_check_buffer_available_for>
 800ac30:	bb70      	cbnz	r0, 800ac90 <ucdr_serialize_endian_uint16_t+0x88>
 800ac32:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800ac36:	42be      	cmp	r6, r7
 800ac38:	d925      	bls.n	800ac86 <ucdr_serialize_endian_uint16_t+0x7e>
 800ac3a:	6923      	ldr	r3, [r4, #16]
 800ac3c:	60a6      	str	r6, [r4, #8]
 800ac3e:	1bf6      	subs	r6, r6, r7
 800ac40:	4433      	add	r3, r6
 800ac42:	f1c6 0902 	rsb	r9, r6, #2
 800ac46:	6123      	str	r3, [r4, #16]
 800ac48:	4649      	mov	r1, r9
 800ac4a:	4620      	mov	r0, r4
 800ac4c:	f001 f9ca 	bl	800bfe4 <ucdr_check_final_buffer_behavior>
 800ac50:	2800      	cmp	r0, #0
 800ac52:	d039      	beq.n	800acc8 <ucdr_serialize_endian_uint16_t+0xc0>
 800ac54:	2d01      	cmp	r5, #1
 800ac56:	d04a      	beq.n	800acee <ucdr_serialize_endian_uint16_t+0xe6>
 800ac58:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ac5c:	703b      	strb	r3, [r7, #0]
 800ac5e:	2e00      	cmp	r6, #0
 800ac60:	d040      	beq.n	800ace4 <ucdr_serialize_endian_uint16_t+0xdc>
 800ac62:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ac66:	707b      	strb	r3, [r7, #1]
 800ac68:	6923      	ldr	r3, [r4, #16]
 800ac6a:	68a2      	ldr	r2, [r4, #8]
 800ac6c:	7da0      	ldrb	r0, [r4, #22]
 800ac6e:	3302      	adds	r3, #2
 800ac70:	444a      	add	r2, r9
 800ac72:	1b9b      	subs	r3, r3, r6
 800ac74:	2102      	movs	r1, #2
 800ac76:	f080 0001 	eor.w	r0, r0, #1
 800ac7a:	60a2      	str	r2, [r4, #8]
 800ac7c:	6123      	str	r3, [r4, #16]
 800ac7e:	7561      	strb	r1, [r4, #21]
 800ac80:	b003      	add	sp, #12
 800ac82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac86:	2102      	movs	r1, #2
 800ac88:	4620      	mov	r0, r4
 800ac8a:	f001 f9ab 	bl	800bfe4 <ucdr_check_final_buffer_behavior>
 800ac8e:	b188      	cbz	r0, 800acb4 <ucdr_serialize_endian_uint16_t+0xac>
 800ac90:	2d01      	cmp	r5, #1
 800ac92:	68a3      	ldr	r3, [r4, #8]
 800ac94:	d014      	beq.n	800acc0 <ucdr_serialize_endian_uint16_t+0xb8>
 800ac96:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ac9a:	701a      	strb	r2, [r3, #0]
 800ac9c:	68a3      	ldr	r3, [r4, #8]
 800ac9e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800aca2:	705a      	strb	r2, [r3, #1]
 800aca4:	68a2      	ldr	r2, [r4, #8]
 800aca6:	6923      	ldr	r3, [r4, #16]
 800aca8:	3202      	adds	r2, #2
 800acaa:	3302      	adds	r3, #2
 800acac:	2102      	movs	r1, #2
 800acae:	60a2      	str	r2, [r4, #8]
 800acb0:	6123      	str	r3, [r4, #16]
 800acb2:	7561      	strb	r1, [r4, #21]
 800acb4:	7da0      	ldrb	r0, [r4, #22]
 800acb6:	f080 0001 	eor.w	r0, r0, #1
 800acba:	b003      	add	sp, #12
 800acbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800acc0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800acc4:	801a      	strh	r2, [r3, #0]
 800acc6:	e7ed      	b.n	800aca4 <ucdr_serialize_endian_uint16_t+0x9c>
 800acc8:	68a2      	ldr	r2, [r4, #8]
 800acca:	6923      	ldr	r3, [r4, #16]
 800accc:	7da0      	ldrb	r0, [r4, #22]
 800acce:	f884 8015 	strb.w	r8, [r4, #21]
 800acd2:	1b92      	subs	r2, r2, r6
 800acd4:	1b9b      	subs	r3, r3, r6
 800acd6:	f080 0001 	eor.w	r0, r0, #1
 800acda:	60a2      	str	r2, [r4, #8]
 800acdc:	6123      	str	r3, [r4, #16]
 800acde:	b003      	add	sp, #12
 800ace0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ace4:	68a3      	ldr	r3, [r4, #8]
 800ace6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800acea:	701a      	strb	r2, [r3, #0]
 800acec:	e7bc      	b.n	800ac68 <ucdr_serialize_endian_uint16_t+0x60>
 800acee:	f10d 0506 	add.w	r5, sp, #6
 800acf2:	4629      	mov	r1, r5
 800acf4:	4632      	mov	r2, r6
 800acf6:	4638      	mov	r0, r7
 800acf8:	f00e fbd3 	bl	80194a2 <memcpy>
 800acfc:	68a0      	ldr	r0, [r4, #8]
 800acfe:	464a      	mov	r2, r9
 800ad00:	19a9      	adds	r1, r5, r6
 800ad02:	f00e fbce 	bl	80194a2 <memcpy>
 800ad06:	e7af      	b.n	800ac68 <ucdr_serialize_endian_uint16_t+0x60>

0800ad08 <ucdr_deserialize_uint16_t>:
 800ad08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad0c:	460d      	mov	r5, r1
 800ad0e:	2102      	movs	r1, #2
 800ad10:	4604      	mov	r4, r0
 800ad12:	f001 f9bb 	bl	800c08c <ucdr_buffer_alignment>
 800ad16:	4601      	mov	r1, r0
 800ad18:	4620      	mov	r0, r4
 800ad1a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ad1e:	f001 f9f9 	bl	800c114 <ucdr_advance_buffer>
 800ad22:	2102      	movs	r1, #2
 800ad24:	4620      	mov	r0, r4
 800ad26:	f001 f951 	bl	800bfcc <ucdr_check_buffer_available_for>
 800ad2a:	bb60      	cbnz	r0, 800ad86 <ucdr_deserialize_uint16_t+0x7e>
 800ad2c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800ad30:	42be      	cmp	r6, r7
 800ad32:	d923      	bls.n	800ad7c <ucdr_deserialize_uint16_t+0x74>
 800ad34:	6923      	ldr	r3, [r4, #16]
 800ad36:	60a6      	str	r6, [r4, #8]
 800ad38:	1bf6      	subs	r6, r6, r7
 800ad3a:	4433      	add	r3, r6
 800ad3c:	f1c6 0902 	rsb	r9, r6, #2
 800ad40:	6123      	str	r3, [r4, #16]
 800ad42:	4649      	mov	r1, r9
 800ad44:	4620      	mov	r0, r4
 800ad46:	f001 f94d 	bl	800bfe4 <ucdr_check_final_buffer_behavior>
 800ad4a:	2800      	cmp	r0, #0
 800ad4c:	d034      	beq.n	800adb8 <ucdr_deserialize_uint16_t+0xb0>
 800ad4e:	7d23      	ldrb	r3, [r4, #20]
 800ad50:	2b01      	cmp	r3, #1
 800ad52:	d042      	beq.n	800adda <ucdr_deserialize_uint16_t+0xd2>
 800ad54:	787b      	ldrb	r3, [r7, #1]
 800ad56:	702b      	strb	r3, [r5, #0]
 800ad58:	2e00      	cmp	r6, #0
 800ad5a:	d03a      	beq.n	800add2 <ucdr_deserialize_uint16_t+0xca>
 800ad5c:	783b      	ldrb	r3, [r7, #0]
 800ad5e:	706b      	strb	r3, [r5, #1]
 800ad60:	6923      	ldr	r3, [r4, #16]
 800ad62:	68a2      	ldr	r2, [r4, #8]
 800ad64:	7da0      	ldrb	r0, [r4, #22]
 800ad66:	2102      	movs	r1, #2
 800ad68:	3302      	adds	r3, #2
 800ad6a:	444a      	add	r2, r9
 800ad6c:	1b9b      	subs	r3, r3, r6
 800ad6e:	7561      	strb	r1, [r4, #21]
 800ad70:	60a2      	str	r2, [r4, #8]
 800ad72:	6123      	str	r3, [r4, #16]
 800ad74:	f080 0001 	eor.w	r0, r0, #1
 800ad78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad7c:	2102      	movs	r1, #2
 800ad7e:	4620      	mov	r0, r4
 800ad80:	f001 f930 	bl	800bfe4 <ucdr_check_final_buffer_behavior>
 800ad84:	b180      	cbz	r0, 800ada8 <ucdr_deserialize_uint16_t+0xa0>
 800ad86:	7d23      	ldrb	r3, [r4, #20]
 800ad88:	2b01      	cmp	r3, #1
 800ad8a:	68a3      	ldr	r3, [r4, #8]
 800ad8c:	d011      	beq.n	800adb2 <ucdr_deserialize_uint16_t+0xaa>
 800ad8e:	785b      	ldrb	r3, [r3, #1]
 800ad90:	702b      	strb	r3, [r5, #0]
 800ad92:	68a3      	ldr	r3, [r4, #8]
 800ad94:	781b      	ldrb	r3, [r3, #0]
 800ad96:	706b      	strb	r3, [r5, #1]
 800ad98:	68a2      	ldr	r2, [r4, #8]
 800ad9a:	6923      	ldr	r3, [r4, #16]
 800ad9c:	3202      	adds	r2, #2
 800ad9e:	3302      	adds	r3, #2
 800ada0:	2102      	movs	r1, #2
 800ada2:	60a2      	str	r2, [r4, #8]
 800ada4:	6123      	str	r3, [r4, #16]
 800ada6:	7561      	strb	r1, [r4, #21]
 800ada8:	7da0      	ldrb	r0, [r4, #22]
 800adaa:	f080 0001 	eor.w	r0, r0, #1
 800adae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adb2:	881b      	ldrh	r3, [r3, #0]
 800adb4:	802b      	strh	r3, [r5, #0]
 800adb6:	e7ef      	b.n	800ad98 <ucdr_deserialize_uint16_t+0x90>
 800adb8:	68a2      	ldr	r2, [r4, #8]
 800adba:	6923      	ldr	r3, [r4, #16]
 800adbc:	7da0      	ldrb	r0, [r4, #22]
 800adbe:	f884 8015 	strb.w	r8, [r4, #21]
 800adc2:	1b92      	subs	r2, r2, r6
 800adc4:	1b9b      	subs	r3, r3, r6
 800adc6:	60a2      	str	r2, [r4, #8]
 800adc8:	6123      	str	r3, [r4, #16]
 800adca:	f080 0001 	eor.w	r0, r0, #1
 800adce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800add2:	68a3      	ldr	r3, [r4, #8]
 800add4:	781b      	ldrb	r3, [r3, #0]
 800add6:	706b      	strb	r3, [r5, #1]
 800add8:	e7c2      	b.n	800ad60 <ucdr_deserialize_uint16_t+0x58>
 800adda:	4639      	mov	r1, r7
 800addc:	4632      	mov	r2, r6
 800adde:	4628      	mov	r0, r5
 800ade0:	f00e fb5f 	bl	80194a2 <memcpy>
 800ade4:	68a1      	ldr	r1, [r4, #8]
 800ade6:	464a      	mov	r2, r9
 800ade8:	19a8      	adds	r0, r5, r6
 800adea:	f00e fb5a 	bl	80194a2 <memcpy>
 800adee:	e7b7      	b.n	800ad60 <ucdr_deserialize_uint16_t+0x58>

0800adf0 <ucdr_deserialize_endian_uint16_t>:
 800adf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adf4:	460e      	mov	r6, r1
 800adf6:	2102      	movs	r1, #2
 800adf8:	4604      	mov	r4, r0
 800adfa:	4615      	mov	r5, r2
 800adfc:	f001 f946 	bl	800c08c <ucdr_buffer_alignment>
 800ae00:	4601      	mov	r1, r0
 800ae02:	4620      	mov	r0, r4
 800ae04:	f894 9015 	ldrb.w	r9, [r4, #21]
 800ae08:	f001 f984 	bl	800c114 <ucdr_advance_buffer>
 800ae0c:	2102      	movs	r1, #2
 800ae0e:	4620      	mov	r0, r4
 800ae10:	f001 f8dc 	bl	800bfcc <ucdr_check_buffer_available_for>
 800ae14:	bb70      	cbnz	r0, 800ae74 <ucdr_deserialize_endian_uint16_t+0x84>
 800ae16:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800ae1a:	4547      	cmp	r7, r8
 800ae1c:	d925      	bls.n	800ae6a <ucdr_deserialize_endian_uint16_t+0x7a>
 800ae1e:	6923      	ldr	r3, [r4, #16]
 800ae20:	60a7      	str	r7, [r4, #8]
 800ae22:	eba7 0708 	sub.w	r7, r7, r8
 800ae26:	443b      	add	r3, r7
 800ae28:	f1c7 0a02 	rsb	sl, r7, #2
 800ae2c:	6123      	str	r3, [r4, #16]
 800ae2e:	4651      	mov	r1, sl
 800ae30:	4620      	mov	r0, r4
 800ae32:	f001 f8d7 	bl	800bfe4 <ucdr_check_final_buffer_behavior>
 800ae36:	2800      	cmp	r0, #0
 800ae38:	d034      	beq.n	800aea4 <ucdr_deserialize_endian_uint16_t+0xb4>
 800ae3a:	2e01      	cmp	r6, #1
 800ae3c:	d043      	beq.n	800aec6 <ucdr_deserialize_endian_uint16_t+0xd6>
 800ae3e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ae42:	702b      	strb	r3, [r5, #0]
 800ae44:	2f00      	cmp	r7, #0
 800ae46:	d03a      	beq.n	800aebe <ucdr_deserialize_endian_uint16_t+0xce>
 800ae48:	f898 3000 	ldrb.w	r3, [r8]
 800ae4c:	706b      	strb	r3, [r5, #1]
 800ae4e:	6923      	ldr	r3, [r4, #16]
 800ae50:	68a2      	ldr	r2, [r4, #8]
 800ae52:	7da0      	ldrb	r0, [r4, #22]
 800ae54:	2102      	movs	r1, #2
 800ae56:	3302      	adds	r3, #2
 800ae58:	4452      	add	r2, sl
 800ae5a:	1bdb      	subs	r3, r3, r7
 800ae5c:	7561      	strb	r1, [r4, #21]
 800ae5e:	60a2      	str	r2, [r4, #8]
 800ae60:	6123      	str	r3, [r4, #16]
 800ae62:	f080 0001 	eor.w	r0, r0, #1
 800ae66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae6a:	2102      	movs	r1, #2
 800ae6c:	4620      	mov	r0, r4
 800ae6e:	f001 f8b9 	bl	800bfe4 <ucdr_check_final_buffer_behavior>
 800ae72:	b178      	cbz	r0, 800ae94 <ucdr_deserialize_endian_uint16_t+0xa4>
 800ae74:	2e01      	cmp	r6, #1
 800ae76:	68a3      	ldr	r3, [r4, #8]
 800ae78:	d011      	beq.n	800ae9e <ucdr_deserialize_endian_uint16_t+0xae>
 800ae7a:	785b      	ldrb	r3, [r3, #1]
 800ae7c:	702b      	strb	r3, [r5, #0]
 800ae7e:	68a3      	ldr	r3, [r4, #8]
 800ae80:	781b      	ldrb	r3, [r3, #0]
 800ae82:	706b      	strb	r3, [r5, #1]
 800ae84:	68a2      	ldr	r2, [r4, #8]
 800ae86:	6923      	ldr	r3, [r4, #16]
 800ae88:	3202      	adds	r2, #2
 800ae8a:	3302      	adds	r3, #2
 800ae8c:	2102      	movs	r1, #2
 800ae8e:	60a2      	str	r2, [r4, #8]
 800ae90:	6123      	str	r3, [r4, #16]
 800ae92:	7561      	strb	r1, [r4, #21]
 800ae94:	7da0      	ldrb	r0, [r4, #22]
 800ae96:	f080 0001 	eor.w	r0, r0, #1
 800ae9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae9e:	881b      	ldrh	r3, [r3, #0]
 800aea0:	802b      	strh	r3, [r5, #0]
 800aea2:	e7ef      	b.n	800ae84 <ucdr_deserialize_endian_uint16_t+0x94>
 800aea4:	68a2      	ldr	r2, [r4, #8]
 800aea6:	6923      	ldr	r3, [r4, #16]
 800aea8:	7da0      	ldrb	r0, [r4, #22]
 800aeaa:	f884 9015 	strb.w	r9, [r4, #21]
 800aeae:	1bd2      	subs	r2, r2, r7
 800aeb0:	1bdb      	subs	r3, r3, r7
 800aeb2:	60a2      	str	r2, [r4, #8]
 800aeb4:	6123      	str	r3, [r4, #16]
 800aeb6:	f080 0001 	eor.w	r0, r0, #1
 800aeba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aebe:	68a3      	ldr	r3, [r4, #8]
 800aec0:	781b      	ldrb	r3, [r3, #0]
 800aec2:	706b      	strb	r3, [r5, #1]
 800aec4:	e7c3      	b.n	800ae4e <ucdr_deserialize_endian_uint16_t+0x5e>
 800aec6:	4641      	mov	r1, r8
 800aec8:	463a      	mov	r2, r7
 800aeca:	4628      	mov	r0, r5
 800aecc:	f00e fae9 	bl	80194a2 <memcpy>
 800aed0:	68a1      	ldr	r1, [r4, #8]
 800aed2:	4652      	mov	r2, sl
 800aed4:	19e8      	adds	r0, r5, r7
 800aed6:	f00e fae4 	bl	80194a2 <memcpy>
 800aeda:	e7b8      	b.n	800ae4e <ucdr_deserialize_endian_uint16_t+0x5e>

0800aedc <ucdr_serialize_uint32_t>:
 800aedc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aee0:	b082      	sub	sp, #8
 800aee2:	4604      	mov	r4, r0
 800aee4:	9101      	str	r1, [sp, #4]
 800aee6:	2104      	movs	r1, #4
 800aee8:	f001 f8d0 	bl	800c08c <ucdr_buffer_alignment>
 800aeec:	4601      	mov	r1, r0
 800aeee:	4620      	mov	r0, r4
 800aef0:	7d67      	ldrb	r7, [r4, #21]
 800aef2:	f001 f90f 	bl	800c114 <ucdr_advance_buffer>
 800aef6:	2104      	movs	r1, #4
 800aef8:	4620      	mov	r0, r4
 800aefa:	f001 f867 	bl	800bfcc <ucdr_check_buffer_available_for>
 800aefe:	2800      	cmp	r0, #0
 800af00:	d139      	bne.n	800af76 <ucdr_serialize_uint32_t+0x9a>
 800af02:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800af06:	42ab      	cmp	r3, r5
 800af08:	d930      	bls.n	800af6c <ucdr_serialize_uint32_t+0x90>
 800af0a:	1b5e      	subs	r6, r3, r5
 800af0c:	60a3      	str	r3, [r4, #8]
 800af0e:	6923      	ldr	r3, [r4, #16]
 800af10:	f1c6 0804 	rsb	r8, r6, #4
 800af14:	4433      	add	r3, r6
 800af16:	6123      	str	r3, [r4, #16]
 800af18:	4641      	mov	r1, r8
 800af1a:	4620      	mov	r0, r4
 800af1c:	f001 f862 	bl	800bfe4 <ucdr_check_final_buffer_behavior>
 800af20:	2800      	cmp	r0, #0
 800af22:	d04c      	beq.n	800afbe <ucdr_serialize_uint32_t+0xe2>
 800af24:	7d23      	ldrb	r3, [r4, #20]
 800af26:	2b01      	cmp	r3, #1
 800af28:	d063      	beq.n	800aff2 <ucdr_serialize_uint32_t+0x116>
 800af2a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800af2e:	702b      	strb	r3, [r5, #0]
 800af30:	2e00      	cmp	r6, #0
 800af32:	d051      	beq.n	800afd8 <ucdr_serialize_uint32_t+0xfc>
 800af34:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800af38:	706b      	strb	r3, [r5, #1]
 800af3a:	2e01      	cmp	r6, #1
 800af3c:	d050      	beq.n	800afe0 <ucdr_serialize_uint32_t+0x104>
 800af3e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800af42:	70ab      	strb	r3, [r5, #2]
 800af44:	2e02      	cmp	r6, #2
 800af46:	d04f      	beq.n	800afe8 <ucdr_serialize_uint32_t+0x10c>
 800af48:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800af4c:	70eb      	strb	r3, [r5, #3]
 800af4e:	6923      	ldr	r3, [r4, #16]
 800af50:	68a2      	ldr	r2, [r4, #8]
 800af52:	7da0      	ldrb	r0, [r4, #22]
 800af54:	3304      	adds	r3, #4
 800af56:	1b9e      	subs	r6, r3, r6
 800af58:	4442      	add	r2, r8
 800af5a:	2304      	movs	r3, #4
 800af5c:	f080 0001 	eor.w	r0, r0, #1
 800af60:	60a2      	str	r2, [r4, #8]
 800af62:	6126      	str	r6, [r4, #16]
 800af64:	7563      	strb	r3, [r4, #21]
 800af66:	b002      	add	sp, #8
 800af68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af6c:	2104      	movs	r1, #4
 800af6e:	4620      	mov	r0, r4
 800af70:	f001 f838 	bl	800bfe4 <ucdr_check_final_buffer_behavior>
 800af74:	b1d0      	cbz	r0, 800afac <ucdr_serialize_uint32_t+0xd0>
 800af76:	7d23      	ldrb	r3, [r4, #20]
 800af78:	2b01      	cmp	r3, #1
 800af7a:	68a3      	ldr	r3, [r4, #8]
 800af7c:	d01c      	beq.n	800afb8 <ucdr_serialize_uint32_t+0xdc>
 800af7e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800af82:	701a      	strb	r2, [r3, #0]
 800af84:	68a3      	ldr	r3, [r4, #8]
 800af86:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800af8a:	705a      	strb	r2, [r3, #1]
 800af8c:	68a3      	ldr	r3, [r4, #8]
 800af8e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800af92:	709a      	strb	r2, [r3, #2]
 800af94:	68a3      	ldr	r3, [r4, #8]
 800af96:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800af9a:	70da      	strb	r2, [r3, #3]
 800af9c:	68a2      	ldr	r2, [r4, #8]
 800af9e:	6923      	ldr	r3, [r4, #16]
 800afa0:	3204      	adds	r2, #4
 800afa2:	3304      	adds	r3, #4
 800afa4:	2104      	movs	r1, #4
 800afa6:	60a2      	str	r2, [r4, #8]
 800afa8:	6123      	str	r3, [r4, #16]
 800afaa:	7561      	strb	r1, [r4, #21]
 800afac:	7da0      	ldrb	r0, [r4, #22]
 800afae:	f080 0001 	eor.w	r0, r0, #1
 800afb2:	b002      	add	sp, #8
 800afb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afb8:	9a01      	ldr	r2, [sp, #4]
 800afba:	601a      	str	r2, [r3, #0]
 800afbc:	e7ee      	b.n	800af9c <ucdr_serialize_uint32_t+0xc0>
 800afbe:	68a2      	ldr	r2, [r4, #8]
 800afc0:	6923      	ldr	r3, [r4, #16]
 800afc2:	7da0      	ldrb	r0, [r4, #22]
 800afc4:	7567      	strb	r7, [r4, #21]
 800afc6:	1b92      	subs	r2, r2, r6
 800afc8:	1b9b      	subs	r3, r3, r6
 800afca:	f080 0001 	eor.w	r0, r0, #1
 800afce:	60a2      	str	r2, [r4, #8]
 800afd0:	6123      	str	r3, [r4, #16]
 800afd2:	b002      	add	sp, #8
 800afd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afd8:	68a3      	ldr	r3, [r4, #8]
 800afda:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800afde:	701a      	strb	r2, [r3, #0]
 800afe0:	68a3      	ldr	r3, [r4, #8]
 800afe2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800afe6:	701a      	strb	r2, [r3, #0]
 800afe8:	68a3      	ldr	r3, [r4, #8]
 800afea:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800afee:	701a      	strb	r2, [r3, #0]
 800aff0:	e7ad      	b.n	800af4e <ucdr_serialize_uint32_t+0x72>
 800aff2:	4628      	mov	r0, r5
 800aff4:	ad01      	add	r5, sp, #4
 800aff6:	4629      	mov	r1, r5
 800aff8:	4632      	mov	r2, r6
 800affa:	f00e fa52 	bl	80194a2 <memcpy>
 800affe:	68a0      	ldr	r0, [r4, #8]
 800b000:	4642      	mov	r2, r8
 800b002:	19a9      	adds	r1, r5, r6
 800b004:	f00e fa4d 	bl	80194a2 <memcpy>
 800b008:	e7a1      	b.n	800af4e <ucdr_serialize_uint32_t+0x72>
 800b00a:	bf00      	nop

0800b00c <ucdr_serialize_endian_uint32_t>:
 800b00c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b010:	b083      	sub	sp, #12
 800b012:	460d      	mov	r5, r1
 800b014:	2104      	movs	r1, #4
 800b016:	4604      	mov	r4, r0
 800b018:	9201      	str	r2, [sp, #4]
 800b01a:	f001 f837 	bl	800c08c <ucdr_buffer_alignment>
 800b01e:	4601      	mov	r1, r0
 800b020:	4620      	mov	r0, r4
 800b022:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b026:	f001 f875 	bl	800c114 <ucdr_advance_buffer>
 800b02a:	2104      	movs	r1, #4
 800b02c:	4620      	mov	r0, r4
 800b02e:	f000 ffcd 	bl	800bfcc <ucdr_check_buffer_available_for>
 800b032:	2800      	cmp	r0, #0
 800b034:	d138      	bne.n	800b0a8 <ucdr_serialize_endian_uint32_t+0x9c>
 800b036:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b03a:	42b7      	cmp	r7, r6
 800b03c:	d92f      	bls.n	800b09e <ucdr_serialize_endian_uint32_t+0x92>
 800b03e:	6923      	ldr	r3, [r4, #16]
 800b040:	60a7      	str	r7, [r4, #8]
 800b042:	1bbf      	subs	r7, r7, r6
 800b044:	443b      	add	r3, r7
 800b046:	f1c7 0904 	rsb	r9, r7, #4
 800b04a:	6123      	str	r3, [r4, #16]
 800b04c:	4649      	mov	r1, r9
 800b04e:	4620      	mov	r0, r4
 800b050:	f000 ffc8 	bl	800bfe4 <ucdr_check_final_buffer_behavior>
 800b054:	2800      	cmp	r0, #0
 800b056:	d04a      	beq.n	800b0ee <ucdr_serialize_endian_uint32_t+0xe2>
 800b058:	2d01      	cmp	r5, #1
 800b05a:	d063      	beq.n	800b124 <ucdr_serialize_endian_uint32_t+0x118>
 800b05c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b060:	7033      	strb	r3, [r6, #0]
 800b062:	2f00      	cmp	r7, #0
 800b064:	d051      	beq.n	800b10a <ucdr_serialize_endian_uint32_t+0xfe>
 800b066:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b06a:	7073      	strb	r3, [r6, #1]
 800b06c:	2f01      	cmp	r7, #1
 800b06e:	d050      	beq.n	800b112 <ucdr_serialize_endian_uint32_t+0x106>
 800b070:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b074:	70b3      	strb	r3, [r6, #2]
 800b076:	2f02      	cmp	r7, #2
 800b078:	d04f      	beq.n	800b11a <ucdr_serialize_endian_uint32_t+0x10e>
 800b07a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b07e:	70f3      	strb	r3, [r6, #3]
 800b080:	6923      	ldr	r3, [r4, #16]
 800b082:	68a2      	ldr	r2, [r4, #8]
 800b084:	7da0      	ldrb	r0, [r4, #22]
 800b086:	3304      	adds	r3, #4
 800b088:	444a      	add	r2, r9
 800b08a:	1bdb      	subs	r3, r3, r7
 800b08c:	2104      	movs	r1, #4
 800b08e:	f080 0001 	eor.w	r0, r0, #1
 800b092:	60a2      	str	r2, [r4, #8]
 800b094:	6123      	str	r3, [r4, #16]
 800b096:	7561      	strb	r1, [r4, #21]
 800b098:	b003      	add	sp, #12
 800b09a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b09e:	2104      	movs	r1, #4
 800b0a0:	4620      	mov	r0, r4
 800b0a2:	f000 ff9f 	bl	800bfe4 <ucdr_check_final_buffer_behavior>
 800b0a6:	b1c8      	cbz	r0, 800b0dc <ucdr_serialize_endian_uint32_t+0xd0>
 800b0a8:	2d01      	cmp	r5, #1
 800b0aa:	68a3      	ldr	r3, [r4, #8]
 800b0ac:	d01c      	beq.n	800b0e8 <ucdr_serialize_endian_uint32_t+0xdc>
 800b0ae:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b0b2:	701a      	strb	r2, [r3, #0]
 800b0b4:	68a3      	ldr	r3, [r4, #8]
 800b0b6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b0ba:	705a      	strb	r2, [r3, #1]
 800b0bc:	68a3      	ldr	r3, [r4, #8]
 800b0be:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b0c2:	709a      	strb	r2, [r3, #2]
 800b0c4:	68a3      	ldr	r3, [r4, #8]
 800b0c6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b0ca:	70da      	strb	r2, [r3, #3]
 800b0cc:	68a2      	ldr	r2, [r4, #8]
 800b0ce:	6923      	ldr	r3, [r4, #16]
 800b0d0:	3204      	adds	r2, #4
 800b0d2:	3304      	adds	r3, #4
 800b0d4:	2104      	movs	r1, #4
 800b0d6:	60a2      	str	r2, [r4, #8]
 800b0d8:	6123      	str	r3, [r4, #16]
 800b0da:	7561      	strb	r1, [r4, #21]
 800b0dc:	7da0      	ldrb	r0, [r4, #22]
 800b0de:	f080 0001 	eor.w	r0, r0, #1
 800b0e2:	b003      	add	sp, #12
 800b0e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b0e8:	9a01      	ldr	r2, [sp, #4]
 800b0ea:	601a      	str	r2, [r3, #0]
 800b0ec:	e7ee      	b.n	800b0cc <ucdr_serialize_endian_uint32_t+0xc0>
 800b0ee:	68a2      	ldr	r2, [r4, #8]
 800b0f0:	6923      	ldr	r3, [r4, #16]
 800b0f2:	7da0      	ldrb	r0, [r4, #22]
 800b0f4:	f884 8015 	strb.w	r8, [r4, #21]
 800b0f8:	1bd2      	subs	r2, r2, r7
 800b0fa:	1bdb      	subs	r3, r3, r7
 800b0fc:	f080 0001 	eor.w	r0, r0, #1
 800b100:	60a2      	str	r2, [r4, #8]
 800b102:	6123      	str	r3, [r4, #16]
 800b104:	b003      	add	sp, #12
 800b106:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b10a:	68a3      	ldr	r3, [r4, #8]
 800b10c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b110:	701a      	strb	r2, [r3, #0]
 800b112:	68a3      	ldr	r3, [r4, #8]
 800b114:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b118:	701a      	strb	r2, [r3, #0]
 800b11a:	68a3      	ldr	r3, [r4, #8]
 800b11c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b120:	701a      	strb	r2, [r3, #0]
 800b122:	e7ad      	b.n	800b080 <ucdr_serialize_endian_uint32_t+0x74>
 800b124:	ad01      	add	r5, sp, #4
 800b126:	4629      	mov	r1, r5
 800b128:	463a      	mov	r2, r7
 800b12a:	4630      	mov	r0, r6
 800b12c:	f00e f9b9 	bl	80194a2 <memcpy>
 800b130:	68a0      	ldr	r0, [r4, #8]
 800b132:	464a      	mov	r2, r9
 800b134:	19e9      	adds	r1, r5, r7
 800b136:	f00e f9b4 	bl	80194a2 <memcpy>
 800b13a:	e7a1      	b.n	800b080 <ucdr_serialize_endian_uint32_t+0x74>

0800b13c <ucdr_deserialize_uint32_t>:
 800b13c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b140:	460d      	mov	r5, r1
 800b142:	2104      	movs	r1, #4
 800b144:	4604      	mov	r4, r0
 800b146:	f000 ffa1 	bl	800c08c <ucdr_buffer_alignment>
 800b14a:	4601      	mov	r1, r0
 800b14c:	4620      	mov	r0, r4
 800b14e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b152:	f000 ffdf 	bl	800c114 <ucdr_advance_buffer>
 800b156:	2104      	movs	r1, #4
 800b158:	4620      	mov	r0, r4
 800b15a:	f000 ff37 	bl	800bfcc <ucdr_check_buffer_available_for>
 800b15e:	2800      	cmp	r0, #0
 800b160:	d138      	bne.n	800b1d4 <ucdr_deserialize_uint32_t+0x98>
 800b162:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b166:	42b7      	cmp	r7, r6
 800b168:	d92f      	bls.n	800b1ca <ucdr_deserialize_uint32_t+0x8e>
 800b16a:	6923      	ldr	r3, [r4, #16]
 800b16c:	60a7      	str	r7, [r4, #8]
 800b16e:	1bbf      	subs	r7, r7, r6
 800b170:	443b      	add	r3, r7
 800b172:	f1c7 0904 	rsb	r9, r7, #4
 800b176:	6123      	str	r3, [r4, #16]
 800b178:	4649      	mov	r1, r9
 800b17a:	4620      	mov	r0, r4
 800b17c:	f000 ff32 	bl	800bfe4 <ucdr_check_final_buffer_behavior>
 800b180:	2800      	cmp	r0, #0
 800b182:	d046      	beq.n	800b212 <ucdr_deserialize_uint32_t+0xd6>
 800b184:	7d23      	ldrb	r3, [r4, #20]
 800b186:	2b01      	cmp	r3, #1
 800b188:	d05c      	beq.n	800b244 <ucdr_deserialize_uint32_t+0x108>
 800b18a:	78f3      	ldrb	r3, [r6, #3]
 800b18c:	702b      	strb	r3, [r5, #0]
 800b18e:	2f00      	cmp	r7, #0
 800b190:	d04c      	beq.n	800b22c <ucdr_deserialize_uint32_t+0xf0>
 800b192:	78b3      	ldrb	r3, [r6, #2]
 800b194:	706b      	strb	r3, [r5, #1]
 800b196:	2f01      	cmp	r7, #1
 800b198:	f105 0302 	add.w	r3, r5, #2
 800b19c:	d04a      	beq.n	800b234 <ucdr_deserialize_uint32_t+0xf8>
 800b19e:	7873      	ldrb	r3, [r6, #1]
 800b1a0:	70ab      	strb	r3, [r5, #2]
 800b1a2:	2f02      	cmp	r7, #2
 800b1a4:	f105 0303 	add.w	r3, r5, #3
 800b1a8:	d048      	beq.n	800b23c <ucdr_deserialize_uint32_t+0x100>
 800b1aa:	7833      	ldrb	r3, [r6, #0]
 800b1ac:	70eb      	strb	r3, [r5, #3]
 800b1ae:	6923      	ldr	r3, [r4, #16]
 800b1b0:	68a2      	ldr	r2, [r4, #8]
 800b1b2:	7da0      	ldrb	r0, [r4, #22]
 800b1b4:	2104      	movs	r1, #4
 800b1b6:	3304      	adds	r3, #4
 800b1b8:	444a      	add	r2, r9
 800b1ba:	1bdb      	subs	r3, r3, r7
 800b1bc:	7561      	strb	r1, [r4, #21]
 800b1be:	60a2      	str	r2, [r4, #8]
 800b1c0:	6123      	str	r3, [r4, #16]
 800b1c2:	f080 0001 	eor.w	r0, r0, #1
 800b1c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1ca:	2104      	movs	r1, #4
 800b1cc:	4620      	mov	r0, r4
 800b1ce:	f000 ff09 	bl	800bfe4 <ucdr_check_final_buffer_behavior>
 800b1d2:	b1b0      	cbz	r0, 800b202 <ucdr_deserialize_uint32_t+0xc6>
 800b1d4:	7d23      	ldrb	r3, [r4, #20]
 800b1d6:	2b01      	cmp	r3, #1
 800b1d8:	68a3      	ldr	r3, [r4, #8]
 800b1da:	d017      	beq.n	800b20c <ucdr_deserialize_uint32_t+0xd0>
 800b1dc:	78db      	ldrb	r3, [r3, #3]
 800b1de:	702b      	strb	r3, [r5, #0]
 800b1e0:	68a3      	ldr	r3, [r4, #8]
 800b1e2:	789b      	ldrb	r3, [r3, #2]
 800b1e4:	706b      	strb	r3, [r5, #1]
 800b1e6:	68a3      	ldr	r3, [r4, #8]
 800b1e8:	785b      	ldrb	r3, [r3, #1]
 800b1ea:	70ab      	strb	r3, [r5, #2]
 800b1ec:	68a3      	ldr	r3, [r4, #8]
 800b1ee:	781b      	ldrb	r3, [r3, #0]
 800b1f0:	70eb      	strb	r3, [r5, #3]
 800b1f2:	68a2      	ldr	r2, [r4, #8]
 800b1f4:	6923      	ldr	r3, [r4, #16]
 800b1f6:	3204      	adds	r2, #4
 800b1f8:	3304      	adds	r3, #4
 800b1fa:	2104      	movs	r1, #4
 800b1fc:	60a2      	str	r2, [r4, #8]
 800b1fe:	6123      	str	r3, [r4, #16]
 800b200:	7561      	strb	r1, [r4, #21]
 800b202:	7da0      	ldrb	r0, [r4, #22]
 800b204:	f080 0001 	eor.w	r0, r0, #1
 800b208:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	602b      	str	r3, [r5, #0]
 800b210:	e7ef      	b.n	800b1f2 <ucdr_deserialize_uint32_t+0xb6>
 800b212:	68a2      	ldr	r2, [r4, #8]
 800b214:	6923      	ldr	r3, [r4, #16]
 800b216:	7da0      	ldrb	r0, [r4, #22]
 800b218:	f884 8015 	strb.w	r8, [r4, #21]
 800b21c:	1bd2      	subs	r2, r2, r7
 800b21e:	1bdb      	subs	r3, r3, r7
 800b220:	60a2      	str	r2, [r4, #8]
 800b222:	6123      	str	r3, [r4, #16]
 800b224:	f080 0001 	eor.w	r0, r0, #1
 800b228:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b22c:	68a3      	ldr	r3, [r4, #8]
 800b22e:	789b      	ldrb	r3, [r3, #2]
 800b230:	706b      	strb	r3, [r5, #1]
 800b232:	1cab      	adds	r3, r5, #2
 800b234:	68a2      	ldr	r2, [r4, #8]
 800b236:	7852      	ldrb	r2, [r2, #1]
 800b238:	f803 2b01 	strb.w	r2, [r3], #1
 800b23c:	68a2      	ldr	r2, [r4, #8]
 800b23e:	7812      	ldrb	r2, [r2, #0]
 800b240:	701a      	strb	r2, [r3, #0]
 800b242:	e7b4      	b.n	800b1ae <ucdr_deserialize_uint32_t+0x72>
 800b244:	4631      	mov	r1, r6
 800b246:	463a      	mov	r2, r7
 800b248:	4628      	mov	r0, r5
 800b24a:	f00e f92a 	bl	80194a2 <memcpy>
 800b24e:	68a1      	ldr	r1, [r4, #8]
 800b250:	464a      	mov	r2, r9
 800b252:	19e8      	adds	r0, r5, r7
 800b254:	f00e f925 	bl	80194a2 <memcpy>
 800b258:	e7a9      	b.n	800b1ae <ucdr_deserialize_uint32_t+0x72>
 800b25a:	bf00      	nop

0800b25c <ucdr_deserialize_endian_uint32_t>:
 800b25c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b260:	460e      	mov	r6, r1
 800b262:	2104      	movs	r1, #4
 800b264:	4604      	mov	r4, r0
 800b266:	4615      	mov	r5, r2
 800b268:	f000 ff10 	bl	800c08c <ucdr_buffer_alignment>
 800b26c:	4601      	mov	r1, r0
 800b26e:	4620      	mov	r0, r4
 800b270:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b274:	f000 ff4e 	bl	800c114 <ucdr_advance_buffer>
 800b278:	2104      	movs	r1, #4
 800b27a:	4620      	mov	r0, r4
 800b27c:	f000 fea6 	bl	800bfcc <ucdr_check_buffer_available_for>
 800b280:	2800      	cmp	r0, #0
 800b282:	d13c      	bne.n	800b2fe <ucdr_deserialize_endian_uint32_t+0xa2>
 800b284:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800b288:	42bb      	cmp	r3, r7
 800b28a:	d933      	bls.n	800b2f4 <ucdr_deserialize_endian_uint32_t+0x98>
 800b28c:	eba3 0807 	sub.w	r8, r3, r7
 800b290:	60a3      	str	r3, [r4, #8]
 800b292:	6923      	ldr	r3, [r4, #16]
 800b294:	f1c8 0a04 	rsb	sl, r8, #4
 800b298:	4443      	add	r3, r8
 800b29a:	6123      	str	r3, [r4, #16]
 800b29c:	4651      	mov	r1, sl
 800b29e:	4620      	mov	r0, r4
 800b2a0:	f000 fea0 	bl	800bfe4 <ucdr_check_final_buffer_behavior>
 800b2a4:	2800      	cmp	r0, #0
 800b2a6:	d048      	beq.n	800b33a <ucdr_deserialize_endian_uint32_t+0xde>
 800b2a8:	2e01      	cmp	r6, #1
 800b2aa:	d061      	beq.n	800b370 <ucdr_deserialize_endian_uint32_t+0x114>
 800b2ac:	78fb      	ldrb	r3, [r7, #3]
 800b2ae:	702b      	strb	r3, [r5, #0]
 800b2b0:	f1b8 0f00 	cmp.w	r8, #0
 800b2b4:	d050      	beq.n	800b358 <ucdr_deserialize_endian_uint32_t+0xfc>
 800b2b6:	78bb      	ldrb	r3, [r7, #2]
 800b2b8:	706b      	strb	r3, [r5, #1]
 800b2ba:	f1b8 0f01 	cmp.w	r8, #1
 800b2be:	f105 0302 	add.w	r3, r5, #2
 800b2c2:	d04d      	beq.n	800b360 <ucdr_deserialize_endian_uint32_t+0x104>
 800b2c4:	787b      	ldrb	r3, [r7, #1]
 800b2c6:	70ab      	strb	r3, [r5, #2]
 800b2c8:	f1b8 0f02 	cmp.w	r8, #2
 800b2cc:	f105 0303 	add.w	r3, r5, #3
 800b2d0:	d04a      	beq.n	800b368 <ucdr_deserialize_endian_uint32_t+0x10c>
 800b2d2:	783b      	ldrb	r3, [r7, #0]
 800b2d4:	70eb      	strb	r3, [r5, #3]
 800b2d6:	6923      	ldr	r3, [r4, #16]
 800b2d8:	68a2      	ldr	r2, [r4, #8]
 800b2da:	7da0      	ldrb	r0, [r4, #22]
 800b2dc:	2104      	movs	r1, #4
 800b2de:	3304      	adds	r3, #4
 800b2e0:	4452      	add	r2, sl
 800b2e2:	eba3 0308 	sub.w	r3, r3, r8
 800b2e6:	7561      	strb	r1, [r4, #21]
 800b2e8:	60a2      	str	r2, [r4, #8]
 800b2ea:	6123      	str	r3, [r4, #16]
 800b2ec:	f080 0001 	eor.w	r0, r0, #1
 800b2f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2f4:	2104      	movs	r1, #4
 800b2f6:	4620      	mov	r0, r4
 800b2f8:	f000 fe74 	bl	800bfe4 <ucdr_check_final_buffer_behavior>
 800b2fc:	b1a8      	cbz	r0, 800b32a <ucdr_deserialize_endian_uint32_t+0xce>
 800b2fe:	2e01      	cmp	r6, #1
 800b300:	68a3      	ldr	r3, [r4, #8]
 800b302:	d017      	beq.n	800b334 <ucdr_deserialize_endian_uint32_t+0xd8>
 800b304:	78db      	ldrb	r3, [r3, #3]
 800b306:	702b      	strb	r3, [r5, #0]
 800b308:	68a3      	ldr	r3, [r4, #8]
 800b30a:	789b      	ldrb	r3, [r3, #2]
 800b30c:	706b      	strb	r3, [r5, #1]
 800b30e:	68a3      	ldr	r3, [r4, #8]
 800b310:	785b      	ldrb	r3, [r3, #1]
 800b312:	70ab      	strb	r3, [r5, #2]
 800b314:	68a3      	ldr	r3, [r4, #8]
 800b316:	781b      	ldrb	r3, [r3, #0]
 800b318:	70eb      	strb	r3, [r5, #3]
 800b31a:	68a2      	ldr	r2, [r4, #8]
 800b31c:	6923      	ldr	r3, [r4, #16]
 800b31e:	3204      	adds	r2, #4
 800b320:	3304      	adds	r3, #4
 800b322:	2104      	movs	r1, #4
 800b324:	60a2      	str	r2, [r4, #8]
 800b326:	6123      	str	r3, [r4, #16]
 800b328:	7561      	strb	r1, [r4, #21]
 800b32a:	7da0      	ldrb	r0, [r4, #22]
 800b32c:	f080 0001 	eor.w	r0, r0, #1
 800b330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	602b      	str	r3, [r5, #0]
 800b338:	e7ef      	b.n	800b31a <ucdr_deserialize_endian_uint32_t+0xbe>
 800b33a:	68a2      	ldr	r2, [r4, #8]
 800b33c:	6923      	ldr	r3, [r4, #16]
 800b33e:	7da0      	ldrb	r0, [r4, #22]
 800b340:	f884 9015 	strb.w	r9, [r4, #21]
 800b344:	eba2 0208 	sub.w	r2, r2, r8
 800b348:	eba3 0308 	sub.w	r3, r3, r8
 800b34c:	60a2      	str	r2, [r4, #8]
 800b34e:	6123      	str	r3, [r4, #16]
 800b350:	f080 0001 	eor.w	r0, r0, #1
 800b354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b358:	68a3      	ldr	r3, [r4, #8]
 800b35a:	789b      	ldrb	r3, [r3, #2]
 800b35c:	706b      	strb	r3, [r5, #1]
 800b35e:	1cab      	adds	r3, r5, #2
 800b360:	68a2      	ldr	r2, [r4, #8]
 800b362:	7852      	ldrb	r2, [r2, #1]
 800b364:	f803 2b01 	strb.w	r2, [r3], #1
 800b368:	68a2      	ldr	r2, [r4, #8]
 800b36a:	7812      	ldrb	r2, [r2, #0]
 800b36c:	701a      	strb	r2, [r3, #0]
 800b36e:	e7b2      	b.n	800b2d6 <ucdr_deserialize_endian_uint32_t+0x7a>
 800b370:	4639      	mov	r1, r7
 800b372:	4642      	mov	r2, r8
 800b374:	4628      	mov	r0, r5
 800b376:	f00e f894 	bl	80194a2 <memcpy>
 800b37a:	68a1      	ldr	r1, [r4, #8]
 800b37c:	4652      	mov	r2, sl
 800b37e:	eb05 0008 	add.w	r0, r5, r8
 800b382:	f00e f88e 	bl	80194a2 <memcpy>
 800b386:	e7a6      	b.n	800b2d6 <ucdr_deserialize_endian_uint32_t+0x7a>

0800b388 <ucdr_serialize_uint64_t>:
 800b388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b38c:	2108      	movs	r1, #8
 800b38e:	b082      	sub	sp, #8
 800b390:	4604      	mov	r4, r0
 800b392:	e9cd 2300 	strd	r2, r3, [sp]
 800b396:	f000 fe79 	bl	800c08c <ucdr_buffer_alignment>
 800b39a:	4601      	mov	r1, r0
 800b39c:	4620      	mov	r0, r4
 800b39e:	7d67      	ldrb	r7, [r4, #21]
 800b3a0:	f000 feb8 	bl	800c114 <ucdr_advance_buffer>
 800b3a4:	2108      	movs	r1, #8
 800b3a6:	4620      	mov	r0, r4
 800b3a8:	f000 fe10 	bl	800bfcc <ucdr_check_buffer_available_for>
 800b3ac:	2800      	cmp	r0, #0
 800b3ae:	d14e      	bne.n	800b44e <ucdr_serialize_uint64_t+0xc6>
 800b3b0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b3b4:	42ab      	cmp	r3, r5
 800b3b6:	d945      	bls.n	800b444 <ucdr_serialize_uint64_t+0xbc>
 800b3b8:	1b5e      	subs	r6, r3, r5
 800b3ba:	60a3      	str	r3, [r4, #8]
 800b3bc:	6923      	ldr	r3, [r4, #16]
 800b3be:	f1c6 0808 	rsb	r8, r6, #8
 800b3c2:	4433      	add	r3, r6
 800b3c4:	6123      	str	r3, [r4, #16]
 800b3c6:	4641      	mov	r1, r8
 800b3c8:	4620      	mov	r0, r4
 800b3ca:	f000 fe0b 	bl	800bfe4 <ucdr_check_final_buffer_behavior>
 800b3ce:	2800      	cmp	r0, #0
 800b3d0:	d074      	beq.n	800b4bc <ucdr_serialize_uint64_t+0x134>
 800b3d2:	7d23      	ldrb	r3, [r4, #20]
 800b3d4:	2b01      	cmp	r3, #1
 800b3d6:	f000 809b 	beq.w	800b510 <ucdr_serialize_uint64_t+0x188>
 800b3da:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b3de:	702b      	strb	r3, [r5, #0]
 800b3e0:	2e00      	cmp	r6, #0
 800b3e2:	d078      	beq.n	800b4d6 <ucdr_serialize_uint64_t+0x14e>
 800b3e4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b3e8:	706b      	strb	r3, [r5, #1]
 800b3ea:	2e01      	cmp	r6, #1
 800b3ec:	d077      	beq.n	800b4de <ucdr_serialize_uint64_t+0x156>
 800b3ee:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b3f2:	70ab      	strb	r3, [r5, #2]
 800b3f4:	2e02      	cmp	r6, #2
 800b3f6:	d076      	beq.n	800b4e6 <ucdr_serialize_uint64_t+0x15e>
 800b3f8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b3fc:	70eb      	strb	r3, [r5, #3]
 800b3fe:	2e03      	cmp	r6, #3
 800b400:	d075      	beq.n	800b4ee <ucdr_serialize_uint64_t+0x166>
 800b402:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b406:	712b      	strb	r3, [r5, #4]
 800b408:	2e04      	cmp	r6, #4
 800b40a:	d074      	beq.n	800b4f6 <ucdr_serialize_uint64_t+0x16e>
 800b40c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800b410:	716b      	strb	r3, [r5, #5]
 800b412:	2e05      	cmp	r6, #5
 800b414:	d073      	beq.n	800b4fe <ucdr_serialize_uint64_t+0x176>
 800b416:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800b41a:	71ab      	strb	r3, [r5, #6]
 800b41c:	2e06      	cmp	r6, #6
 800b41e:	d072      	beq.n	800b506 <ucdr_serialize_uint64_t+0x17e>
 800b420:	f89d 3000 	ldrb.w	r3, [sp]
 800b424:	71eb      	strb	r3, [r5, #7]
 800b426:	6923      	ldr	r3, [r4, #16]
 800b428:	68a2      	ldr	r2, [r4, #8]
 800b42a:	7da0      	ldrb	r0, [r4, #22]
 800b42c:	3308      	adds	r3, #8
 800b42e:	1b9e      	subs	r6, r3, r6
 800b430:	4442      	add	r2, r8
 800b432:	2308      	movs	r3, #8
 800b434:	f080 0001 	eor.w	r0, r0, #1
 800b438:	60a2      	str	r2, [r4, #8]
 800b43a:	6126      	str	r6, [r4, #16]
 800b43c:	7563      	strb	r3, [r4, #21]
 800b43e:	b002      	add	sp, #8
 800b440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b444:	2108      	movs	r1, #8
 800b446:	4620      	mov	r0, r4
 800b448:	f000 fdcc 	bl	800bfe4 <ucdr_check_final_buffer_behavior>
 800b44c:	b350      	cbz	r0, 800b4a4 <ucdr_serialize_uint64_t+0x11c>
 800b44e:	7d23      	ldrb	r3, [r4, #20]
 800b450:	2b01      	cmp	r3, #1
 800b452:	d02d      	beq.n	800b4b0 <ucdr_serialize_uint64_t+0x128>
 800b454:	68a3      	ldr	r3, [r4, #8]
 800b456:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b45a:	701a      	strb	r2, [r3, #0]
 800b45c:	68a3      	ldr	r3, [r4, #8]
 800b45e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b462:	705a      	strb	r2, [r3, #1]
 800b464:	68a3      	ldr	r3, [r4, #8]
 800b466:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b46a:	709a      	strb	r2, [r3, #2]
 800b46c:	68a3      	ldr	r3, [r4, #8]
 800b46e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b472:	70da      	strb	r2, [r3, #3]
 800b474:	68a3      	ldr	r3, [r4, #8]
 800b476:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b47a:	711a      	strb	r2, [r3, #4]
 800b47c:	68a3      	ldr	r3, [r4, #8]
 800b47e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b482:	715a      	strb	r2, [r3, #5]
 800b484:	68a3      	ldr	r3, [r4, #8]
 800b486:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b48a:	719a      	strb	r2, [r3, #6]
 800b48c:	68a3      	ldr	r3, [r4, #8]
 800b48e:	f89d 2000 	ldrb.w	r2, [sp]
 800b492:	71da      	strb	r2, [r3, #7]
 800b494:	68a2      	ldr	r2, [r4, #8]
 800b496:	6923      	ldr	r3, [r4, #16]
 800b498:	3208      	adds	r2, #8
 800b49a:	3308      	adds	r3, #8
 800b49c:	2108      	movs	r1, #8
 800b49e:	60a2      	str	r2, [r4, #8]
 800b4a0:	6123      	str	r3, [r4, #16]
 800b4a2:	7561      	strb	r1, [r4, #21]
 800b4a4:	7da0      	ldrb	r0, [r4, #22]
 800b4a6:	f080 0001 	eor.w	r0, r0, #1
 800b4aa:	b002      	add	sp, #8
 800b4ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4b0:	466b      	mov	r3, sp
 800b4b2:	cb03      	ldmia	r3!, {r0, r1}
 800b4b4:	68a3      	ldr	r3, [r4, #8]
 800b4b6:	6018      	str	r0, [r3, #0]
 800b4b8:	6059      	str	r1, [r3, #4]
 800b4ba:	e7eb      	b.n	800b494 <ucdr_serialize_uint64_t+0x10c>
 800b4bc:	68a2      	ldr	r2, [r4, #8]
 800b4be:	6923      	ldr	r3, [r4, #16]
 800b4c0:	7da0      	ldrb	r0, [r4, #22]
 800b4c2:	7567      	strb	r7, [r4, #21]
 800b4c4:	1b92      	subs	r2, r2, r6
 800b4c6:	1b9b      	subs	r3, r3, r6
 800b4c8:	f080 0001 	eor.w	r0, r0, #1
 800b4cc:	60a2      	str	r2, [r4, #8]
 800b4ce:	6123      	str	r3, [r4, #16]
 800b4d0:	b002      	add	sp, #8
 800b4d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4d6:	68a3      	ldr	r3, [r4, #8]
 800b4d8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b4dc:	701a      	strb	r2, [r3, #0]
 800b4de:	68a3      	ldr	r3, [r4, #8]
 800b4e0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b4e4:	701a      	strb	r2, [r3, #0]
 800b4e6:	68a3      	ldr	r3, [r4, #8]
 800b4e8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b4ec:	701a      	strb	r2, [r3, #0]
 800b4ee:	68a3      	ldr	r3, [r4, #8]
 800b4f0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b4f4:	701a      	strb	r2, [r3, #0]
 800b4f6:	68a3      	ldr	r3, [r4, #8]
 800b4f8:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b4fc:	701a      	strb	r2, [r3, #0]
 800b4fe:	68a3      	ldr	r3, [r4, #8]
 800b500:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b504:	701a      	strb	r2, [r3, #0]
 800b506:	68a3      	ldr	r3, [r4, #8]
 800b508:	f89d 2000 	ldrb.w	r2, [sp]
 800b50c:	701a      	strb	r2, [r3, #0]
 800b50e:	e78a      	b.n	800b426 <ucdr_serialize_uint64_t+0x9e>
 800b510:	4628      	mov	r0, r5
 800b512:	466d      	mov	r5, sp
 800b514:	4629      	mov	r1, r5
 800b516:	4632      	mov	r2, r6
 800b518:	f00d ffc3 	bl	80194a2 <memcpy>
 800b51c:	68a0      	ldr	r0, [r4, #8]
 800b51e:	4642      	mov	r2, r8
 800b520:	19a9      	adds	r1, r5, r6
 800b522:	f00d ffbe 	bl	80194a2 <memcpy>
 800b526:	e77e      	b.n	800b426 <ucdr_serialize_uint64_t+0x9e>

0800b528 <ucdr_serialize_int16_t>:
 800b528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b52c:	b082      	sub	sp, #8
 800b52e:	460b      	mov	r3, r1
 800b530:	2102      	movs	r1, #2
 800b532:	4604      	mov	r4, r0
 800b534:	f8ad 3006 	strh.w	r3, [sp, #6]
 800b538:	f000 fda8 	bl	800c08c <ucdr_buffer_alignment>
 800b53c:	4601      	mov	r1, r0
 800b53e:	4620      	mov	r0, r4
 800b540:	7d67      	ldrb	r7, [r4, #21]
 800b542:	f000 fde7 	bl	800c114 <ucdr_advance_buffer>
 800b546:	2102      	movs	r1, #2
 800b548:	4620      	mov	r0, r4
 800b54a:	f000 fd3f 	bl	800bfcc <ucdr_check_buffer_available_for>
 800b54e:	bb78      	cbnz	r0, 800b5b0 <ucdr_serialize_int16_t+0x88>
 800b550:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b554:	42ab      	cmp	r3, r5
 800b556:	d926      	bls.n	800b5a6 <ucdr_serialize_int16_t+0x7e>
 800b558:	1b5e      	subs	r6, r3, r5
 800b55a:	60a3      	str	r3, [r4, #8]
 800b55c:	6923      	ldr	r3, [r4, #16]
 800b55e:	f1c6 0802 	rsb	r8, r6, #2
 800b562:	4433      	add	r3, r6
 800b564:	6123      	str	r3, [r4, #16]
 800b566:	4641      	mov	r1, r8
 800b568:	4620      	mov	r0, r4
 800b56a:	f000 fd3b 	bl	800bfe4 <ucdr_check_final_buffer_behavior>
 800b56e:	2800      	cmp	r0, #0
 800b570:	d03b      	beq.n	800b5ea <ucdr_serialize_int16_t+0xc2>
 800b572:	7d23      	ldrb	r3, [r4, #20]
 800b574:	2b01      	cmp	r3, #1
 800b576:	d04a      	beq.n	800b60e <ucdr_serialize_int16_t+0xe6>
 800b578:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b57c:	702b      	strb	r3, [r5, #0]
 800b57e:	2e00      	cmp	r6, #0
 800b580:	d040      	beq.n	800b604 <ucdr_serialize_int16_t+0xdc>
 800b582:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b586:	706b      	strb	r3, [r5, #1]
 800b588:	6923      	ldr	r3, [r4, #16]
 800b58a:	68a2      	ldr	r2, [r4, #8]
 800b58c:	7da0      	ldrb	r0, [r4, #22]
 800b58e:	3302      	adds	r3, #2
 800b590:	1b9e      	subs	r6, r3, r6
 800b592:	4442      	add	r2, r8
 800b594:	2302      	movs	r3, #2
 800b596:	f080 0001 	eor.w	r0, r0, #1
 800b59a:	60a2      	str	r2, [r4, #8]
 800b59c:	6126      	str	r6, [r4, #16]
 800b59e:	7563      	strb	r3, [r4, #21]
 800b5a0:	b002      	add	sp, #8
 800b5a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5a6:	2102      	movs	r1, #2
 800b5a8:	4620      	mov	r0, r4
 800b5aa:	f000 fd1b 	bl	800bfe4 <ucdr_check_final_buffer_behavior>
 800b5ae:	b190      	cbz	r0, 800b5d6 <ucdr_serialize_int16_t+0xae>
 800b5b0:	7d23      	ldrb	r3, [r4, #20]
 800b5b2:	2b01      	cmp	r3, #1
 800b5b4:	68a3      	ldr	r3, [r4, #8]
 800b5b6:	d014      	beq.n	800b5e2 <ucdr_serialize_int16_t+0xba>
 800b5b8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b5bc:	701a      	strb	r2, [r3, #0]
 800b5be:	68a3      	ldr	r3, [r4, #8]
 800b5c0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b5c4:	705a      	strb	r2, [r3, #1]
 800b5c6:	68a2      	ldr	r2, [r4, #8]
 800b5c8:	6923      	ldr	r3, [r4, #16]
 800b5ca:	3202      	adds	r2, #2
 800b5cc:	3302      	adds	r3, #2
 800b5ce:	2102      	movs	r1, #2
 800b5d0:	60a2      	str	r2, [r4, #8]
 800b5d2:	6123      	str	r3, [r4, #16]
 800b5d4:	7561      	strb	r1, [r4, #21]
 800b5d6:	7da0      	ldrb	r0, [r4, #22]
 800b5d8:	f080 0001 	eor.w	r0, r0, #1
 800b5dc:	b002      	add	sp, #8
 800b5de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5e2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b5e6:	801a      	strh	r2, [r3, #0]
 800b5e8:	e7ed      	b.n	800b5c6 <ucdr_serialize_int16_t+0x9e>
 800b5ea:	68a2      	ldr	r2, [r4, #8]
 800b5ec:	6923      	ldr	r3, [r4, #16]
 800b5ee:	7da0      	ldrb	r0, [r4, #22]
 800b5f0:	7567      	strb	r7, [r4, #21]
 800b5f2:	1b92      	subs	r2, r2, r6
 800b5f4:	1b9b      	subs	r3, r3, r6
 800b5f6:	f080 0001 	eor.w	r0, r0, #1
 800b5fa:	60a2      	str	r2, [r4, #8]
 800b5fc:	6123      	str	r3, [r4, #16]
 800b5fe:	b002      	add	sp, #8
 800b600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b604:	68a3      	ldr	r3, [r4, #8]
 800b606:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b60a:	701a      	strb	r2, [r3, #0]
 800b60c:	e7bc      	b.n	800b588 <ucdr_serialize_int16_t+0x60>
 800b60e:	4628      	mov	r0, r5
 800b610:	f10d 0506 	add.w	r5, sp, #6
 800b614:	4629      	mov	r1, r5
 800b616:	4632      	mov	r2, r6
 800b618:	f00d ff43 	bl	80194a2 <memcpy>
 800b61c:	68a0      	ldr	r0, [r4, #8]
 800b61e:	4642      	mov	r2, r8
 800b620:	19a9      	adds	r1, r5, r6
 800b622:	f00d ff3e 	bl	80194a2 <memcpy>
 800b626:	e7af      	b.n	800b588 <ucdr_serialize_int16_t+0x60>

0800b628 <ucdr_deserialize_int16_t>:
 800b628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b62c:	460d      	mov	r5, r1
 800b62e:	2102      	movs	r1, #2
 800b630:	4604      	mov	r4, r0
 800b632:	f000 fd2b 	bl	800c08c <ucdr_buffer_alignment>
 800b636:	4601      	mov	r1, r0
 800b638:	4620      	mov	r0, r4
 800b63a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b63e:	f000 fd69 	bl	800c114 <ucdr_advance_buffer>
 800b642:	2102      	movs	r1, #2
 800b644:	4620      	mov	r0, r4
 800b646:	f000 fcc1 	bl	800bfcc <ucdr_check_buffer_available_for>
 800b64a:	bb60      	cbnz	r0, 800b6a6 <ucdr_deserialize_int16_t+0x7e>
 800b64c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b650:	42be      	cmp	r6, r7
 800b652:	d923      	bls.n	800b69c <ucdr_deserialize_int16_t+0x74>
 800b654:	6923      	ldr	r3, [r4, #16]
 800b656:	60a6      	str	r6, [r4, #8]
 800b658:	1bf6      	subs	r6, r6, r7
 800b65a:	4433      	add	r3, r6
 800b65c:	f1c6 0902 	rsb	r9, r6, #2
 800b660:	6123      	str	r3, [r4, #16]
 800b662:	4649      	mov	r1, r9
 800b664:	4620      	mov	r0, r4
 800b666:	f000 fcbd 	bl	800bfe4 <ucdr_check_final_buffer_behavior>
 800b66a:	2800      	cmp	r0, #0
 800b66c:	d034      	beq.n	800b6d8 <ucdr_deserialize_int16_t+0xb0>
 800b66e:	7d23      	ldrb	r3, [r4, #20]
 800b670:	2b01      	cmp	r3, #1
 800b672:	d042      	beq.n	800b6fa <ucdr_deserialize_int16_t+0xd2>
 800b674:	787b      	ldrb	r3, [r7, #1]
 800b676:	702b      	strb	r3, [r5, #0]
 800b678:	2e00      	cmp	r6, #0
 800b67a:	d03a      	beq.n	800b6f2 <ucdr_deserialize_int16_t+0xca>
 800b67c:	783b      	ldrb	r3, [r7, #0]
 800b67e:	706b      	strb	r3, [r5, #1]
 800b680:	6923      	ldr	r3, [r4, #16]
 800b682:	68a2      	ldr	r2, [r4, #8]
 800b684:	7da0      	ldrb	r0, [r4, #22]
 800b686:	2102      	movs	r1, #2
 800b688:	3302      	adds	r3, #2
 800b68a:	444a      	add	r2, r9
 800b68c:	1b9b      	subs	r3, r3, r6
 800b68e:	7561      	strb	r1, [r4, #21]
 800b690:	60a2      	str	r2, [r4, #8]
 800b692:	6123      	str	r3, [r4, #16]
 800b694:	f080 0001 	eor.w	r0, r0, #1
 800b698:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b69c:	2102      	movs	r1, #2
 800b69e:	4620      	mov	r0, r4
 800b6a0:	f000 fca0 	bl	800bfe4 <ucdr_check_final_buffer_behavior>
 800b6a4:	b180      	cbz	r0, 800b6c8 <ucdr_deserialize_int16_t+0xa0>
 800b6a6:	7d23      	ldrb	r3, [r4, #20]
 800b6a8:	2b01      	cmp	r3, #1
 800b6aa:	68a3      	ldr	r3, [r4, #8]
 800b6ac:	d011      	beq.n	800b6d2 <ucdr_deserialize_int16_t+0xaa>
 800b6ae:	785b      	ldrb	r3, [r3, #1]
 800b6b0:	702b      	strb	r3, [r5, #0]
 800b6b2:	68a3      	ldr	r3, [r4, #8]
 800b6b4:	781b      	ldrb	r3, [r3, #0]
 800b6b6:	706b      	strb	r3, [r5, #1]
 800b6b8:	68a2      	ldr	r2, [r4, #8]
 800b6ba:	6923      	ldr	r3, [r4, #16]
 800b6bc:	3202      	adds	r2, #2
 800b6be:	3302      	adds	r3, #2
 800b6c0:	2102      	movs	r1, #2
 800b6c2:	60a2      	str	r2, [r4, #8]
 800b6c4:	6123      	str	r3, [r4, #16]
 800b6c6:	7561      	strb	r1, [r4, #21]
 800b6c8:	7da0      	ldrb	r0, [r4, #22]
 800b6ca:	f080 0001 	eor.w	r0, r0, #1
 800b6ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6d2:	881b      	ldrh	r3, [r3, #0]
 800b6d4:	802b      	strh	r3, [r5, #0]
 800b6d6:	e7ef      	b.n	800b6b8 <ucdr_deserialize_int16_t+0x90>
 800b6d8:	68a2      	ldr	r2, [r4, #8]
 800b6da:	6923      	ldr	r3, [r4, #16]
 800b6dc:	7da0      	ldrb	r0, [r4, #22]
 800b6de:	f884 8015 	strb.w	r8, [r4, #21]
 800b6e2:	1b92      	subs	r2, r2, r6
 800b6e4:	1b9b      	subs	r3, r3, r6
 800b6e6:	60a2      	str	r2, [r4, #8]
 800b6e8:	6123      	str	r3, [r4, #16]
 800b6ea:	f080 0001 	eor.w	r0, r0, #1
 800b6ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6f2:	68a3      	ldr	r3, [r4, #8]
 800b6f4:	781b      	ldrb	r3, [r3, #0]
 800b6f6:	706b      	strb	r3, [r5, #1]
 800b6f8:	e7c2      	b.n	800b680 <ucdr_deserialize_int16_t+0x58>
 800b6fa:	4639      	mov	r1, r7
 800b6fc:	4632      	mov	r2, r6
 800b6fe:	4628      	mov	r0, r5
 800b700:	f00d fecf 	bl	80194a2 <memcpy>
 800b704:	68a1      	ldr	r1, [r4, #8]
 800b706:	464a      	mov	r2, r9
 800b708:	19a8      	adds	r0, r5, r6
 800b70a:	f00d feca 	bl	80194a2 <memcpy>
 800b70e:	e7b7      	b.n	800b680 <ucdr_deserialize_int16_t+0x58>

0800b710 <ucdr_serialize_int32_t>:
 800b710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b714:	b082      	sub	sp, #8
 800b716:	4604      	mov	r4, r0
 800b718:	9101      	str	r1, [sp, #4]
 800b71a:	2104      	movs	r1, #4
 800b71c:	f000 fcb6 	bl	800c08c <ucdr_buffer_alignment>
 800b720:	4601      	mov	r1, r0
 800b722:	4620      	mov	r0, r4
 800b724:	7d67      	ldrb	r7, [r4, #21]
 800b726:	f000 fcf5 	bl	800c114 <ucdr_advance_buffer>
 800b72a:	2104      	movs	r1, #4
 800b72c:	4620      	mov	r0, r4
 800b72e:	f000 fc4d 	bl	800bfcc <ucdr_check_buffer_available_for>
 800b732:	2800      	cmp	r0, #0
 800b734:	d139      	bne.n	800b7aa <ucdr_serialize_int32_t+0x9a>
 800b736:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b73a:	42ab      	cmp	r3, r5
 800b73c:	d930      	bls.n	800b7a0 <ucdr_serialize_int32_t+0x90>
 800b73e:	1b5e      	subs	r6, r3, r5
 800b740:	60a3      	str	r3, [r4, #8]
 800b742:	6923      	ldr	r3, [r4, #16]
 800b744:	f1c6 0804 	rsb	r8, r6, #4
 800b748:	4433      	add	r3, r6
 800b74a:	6123      	str	r3, [r4, #16]
 800b74c:	4641      	mov	r1, r8
 800b74e:	4620      	mov	r0, r4
 800b750:	f000 fc48 	bl	800bfe4 <ucdr_check_final_buffer_behavior>
 800b754:	2800      	cmp	r0, #0
 800b756:	d04c      	beq.n	800b7f2 <ucdr_serialize_int32_t+0xe2>
 800b758:	7d23      	ldrb	r3, [r4, #20]
 800b75a:	2b01      	cmp	r3, #1
 800b75c:	d063      	beq.n	800b826 <ucdr_serialize_int32_t+0x116>
 800b75e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b762:	702b      	strb	r3, [r5, #0]
 800b764:	2e00      	cmp	r6, #0
 800b766:	d051      	beq.n	800b80c <ucdr_serialize_int32_t+0xfc>
 800b768:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b76c:	706b      	strb	r3, [r5, #1]
 800b76e:	2e01      	cmp	r6, #1
 800b770:	d050      	beq.n	800b814 <ucdr_serialize_int32_t+0x104>
 800b772:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b776:	70ab      	strb	r3, [r5, #2]
 800b778:	2e02      	cmp	r6, #2
 800b77a:	d04f      	beq.n	800b81c <ucdr_serialize_int32_t+0x10c>
 800b77c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b780:	70eb      	strb	r3, [r5, #3]
 800b782:	6923      	ldr	r3, [r4, #16]
 800b784:	68a2      	ldr	r2, [r4, #8]
 800b786:	7da0      	ldrb	r0, [r4, #22]
 800b788:	3304      	adds	r3, #4
 800b78a:	1b9e      	subs	r6, r3, r6
 800b78c:	4442      	add	r2, r8
 800b78e:	2304      	movs	r3, #4
 800b790:	f080 0001 	eor.w	r0, r0, #1
 800b794:	60a2      	str	r2, [r4, #8]
 800b796:	6126      	str	r6, [r4, #16]
 800b798:	7563      	strb	r3, [r4, #21]
 800b79a:	b002      	add	sp, #8
 800b79c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7a0:	2104      	movs	r1, #4
 800b7a2:	4620      	mov	r0, r4
 800b7a4:	f000 fc1e 	bl	800bfe4 <ucdr_check_final_buffer_behavior>
 800b7a8:	b1d0      	cbz	r0, 800b7e0 <ucdr_serialize_int32_t+0xd0>
 800b7aa:	7d23      	ldrb	r3, [r4, #20]
 800b7ac:	2b01      	cmp	r3, #1
 800b7ae:	68a3      	ldr	r3, [r4, #8]
 800b7b0:	d01c      	beq.n	800b7ec <ucdr_serialize_int32_t+0xdc>
 800b7b2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b7b6:	701a      	strb	r2, [r3, #0]
 800b7b8:	68a3      	ldr	r3, [r4, #8]
 800b7ba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b7be:	705a      	strb	r2, [r3, #1]
 800b7c0:	68a3      	ldr	r3, [r4, #8]
 800b7c2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b7c6:	709a      	strb	r2, [r3, #2]
 800b7c8:	68a3      	ldr	r3, [r4, #8]
 800b7ca:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b7ce:	70da      	strb	r2, [r3, #3]
 800b7d0:	68a2      	ldr	r2, [r4, #8]
 800b7d2:	6923      	ldr	r3, [r4, #16]
 800b7d4:	3204      	adds	r2, #4
 800b7d6:	3304      	adds	r3, #4
 800b7d8:	2104      	movs	r1, #4
 800b7da:	60a2      	str	r2, [r4, #8]
 800b7dc:	6123      	str	r3, [r4, #16]
 800b7de:	7561      	strb	r1, [r4, #21]
 800b7e0:	7da0      	ldrb	r0, [r4, #22]
 800b7e2:	f080 0001 	eor.w	r0, r0, #1
 800b7e6:	b002      	add	sp, #8
 800b7e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7ec:	9a01      	ldr	r2, [sp, #4]
 800b7ee:	601a      	str	r2, [r3, #0]
 800b7f0:	e7ee      	b.n	800b7d0 <ucdr_serialize_int32_t+0xc0>
 800b7f2:	68a2      	ldr	r2, [r4, #8]
 800b7f4:	6923      	ldr	r3, [r4, #16]
 800b7f6:	7da0      	ldrb	r0, [r4, #22]
 800b7f8:	7567      	strb	r7, [r4, #21]
 800b7fa:	1b92      	subs	r2, r2, r6
 800b7fc:	1b9b      	subs	r3, r3, r6
 800b7fe:	f080 0001 	eor.w	r0, r0, #1
 800b802:	60a2      	str	r2, [r4, #8]
 800b804:	6123      	str	r3, [r4, #16]
 800b806:	b002      	add	sp, #8
 800b808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b80c:	68a3      	ldr	r3, [r4, #8]
 800b80e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b812:	701a      	strb	r2, [r3, #0]
 800b814:	68a3      	ldr	r3, [r4, #8]
 800b816:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b81a:	701a      	strb	r2, [r3, #0]
 800b81c:	68a3      	ldr	r3, [r4, #8]
 800b81e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b822:	701a      	strb	r2, [r3, #0]
 800b824:	e7ad      	b.n	800b782 <ucdr_serialize_int32_t+0x72>
 800b826:	4628      	mov	r0, r5
 800b828:	ad01      	add	r5, sp, #4
 800b82a:	4629      	mov	r1, r5
 800b82c:	4632      	mov	r2, r6
 800b82e:	f00d fe38 	bl	80194a2 <memcpy>
 800b832:	68a0      	ldr	r0, [r4, #8]
 800b834:	4642      	mov	r2, r8
 800b836:	19a9      	adds	r1, r5, r6
 800b838:	f00d fe33 	bl	80194a2 <memcpy>
 800b83c:	e7a1      	b.n	800b782 <ucdr_serialize_int32_t+0x72>
 800b83e:	bf00      	nop

0800b840 <ucdr_deserialize_int32_t>:
 800b840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b844:	460d      	mov	r5, r1
 800b846:	2104      	movs	r1, #4
 800b848:	4604      	mov	r4, r0
 800b84a:	f000 fc1f 	bl	800c08c <ucdr_buffer_alignment>
 800b84e:	4601      	mov	r1, r0
 800b850:	4620      	mov	r0, r4
 800b852:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b856:	f000 fc5d 	bl	800c114 <ucdr_advance_buffer>
 800b85a:	2104      	movs	r1, #4
 800b85c:	4620      	mov	r0, r4
 800b85e:	f000 fbb5 	bl	800bfcc <ucdr_check_buffer_available_for>
 800b862:	2800      	cmp	r0, #0
 800b864:	d138      	bne.n	800b8d8 <ucdr_deserialize_int32_t+0x98>
 800b866:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b86a:	42b7      	cmp	r7, r6
 800b86c:	d92f      	bls.n	800b8ce <ucdr_deserialize_int32_t+0x8e>
 800b86e:	6923      	ldr	r3, [r4, #16]
 800b870:	60a7      	str	r7, [r4, #8]
 800b872:	1bbf      	subs	r7, r7, r6
 800b874:	443b      	add	r3, r7
 800b876:	f1c7 0904 	rsb	r9, r7, #4
 800b87a:	6123      	str	r3, [r4, #16]
 800b87c:	4649      	mov	r1, r9
 800b87e:	4620      	mov	r0, r4
 800b880:	f000 fbb0 	bl	800bfe4 <ucdr_check_final_buffer_behavior>
 800b884:	2800      	cmp	r0, #0
 800b886:	d046      	beq.n	800b916 <ucdr_deserialize_int32_t+0xd6>
 800b888:	7d23      	ldrb	r3, [r4, #20]
 800b88a:	2b01      	cmp	r3, #1
 800b88c:	d05c      	beq.n	800b948 <ucdr_deserialize_int32_t+0x108>
 800b88e:	78f3      	ldrb	r3, [r6, #3]
 800b890:	702b      	strb	r3, [r5, #0]
 800b892:	2f00      	cmp	r7, #0
 800b894:	d04c      	beq.n	800b930 <ucdr_deserialize_int32_t+0xf0>
 800b896:	78b3      	ldrb	r3, [r6, #2]
 800b898:	706b      	strb	r3, [r5, #1]
 800b89a:	2f01      	cmp	r7, #1
 800b89c:	f105 0302 	add.w	r3, r5, #2
 800b8a0:	d04a      	beq.n	800b938 <ucdr_deserialize_int32_t+0xf8>
 800b8a2:	7873      	ldrb	r3, [r6, #1]
 800b8a4:	70ab      	strb	r3, [r5, #2]
 800b8a6:	2f02      	cmp	r7, #2
 800b8a8:	f105 0303 	add.w	r3, r5, #3
 800b8ac:	d048      	beq.n	800b940 <ucdr_deserialize_int32_t+0x100>
 800b8ae:	7833      	ldrb	r3, [r6, #0]
 800b8b0:	70eb      	strb	r3, [r5, #3]
 800b8b2:	6923      	ldr	r3, [r4, #16]
 800b8b4:	68a2      	ldr	r2, [r4, #8]
 800b8b6:	7da0      	ldrb	r0, [r4, #22]
 800b8b8:	2104      	movs	r1, #4
 800b8ba:	3304      	adds	r3, #4
 800b8bc:	444a      	add	r2, r9
 800b8be:	1bdb      	subs	r3, r3, r7
 800b8c0:	7561      	strb	r1, [r4, #21]
 800b8c2:	60a2      	str	r2, [r4, #8]
 800b8c4:	6123      	str	r3, [r4, #16]
 800b8c6:	f080 0001 	eor.w	r0, r0, #1
 800b8ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8ce:	2104      	movs	r1, #4
 800b8d0:	4620      	mov	r0, r4
 800b8d2:	f000 fb87 	bl	800bfe4 <ucdr_check_final_buffer_behavior>
 800b8d6:	b1b0      	cbz	r0, 800b906 <ucdr_deserialize_int32_t+0xc6>
 800b8d8:	7d23      	ldrb	r3, [r4, #20]
 800b8da:	2b01      	cmp	r3, #1
 800b8dc:	68a3      	ldr	r3, [r4, #8]
 800b8de:	d017      	beq.n	800b910 <ucdr_deserialize_int32_t+0xd0>
 800b8e0:	78db      	ldrb	r3, [r3, #3]
 800b8e2:	702b      	strb	r3, [r5, #0]
 800b8e4:	68a3      	ldr	r3, [r4, #8]
 800b8e6:	789b      	ldrb	r3, [r3, #2]
 800b8e8:	706b      	strb	r3, [r5, #1]
 800b8ea:	68a3      	ldr	r3, [r4, #8]
 800b8ec:	785b      	ldrb	r3, [r3, #1]
 800b8ee:	70ab      	strb	r3, [r5, #2]
 800b8f0:	68a3      	ldr	r3, [r4, #8]
 800b8f2:	781b      	ldrb	r3, [r3, #0]
 800b8f4:	70eb      	strb	r3, [r5, #3]
 800b8f6:	68a2      	ldr	r2, [r4, #8]
 800b8f8:	6923      	ldr	r3, [r4, #16]
 800b8fa:	3204      	adds	r2, #4
 800b8fc:	3304      	adds	r3, #4
 800b8fe:	2104      	movs	r1, #4
 800b900:	60a2      	str	r2, [r4, #8]
 800b902:	6123      	str	r3, [r4, #16]
 800b904:	7561      	strb	r1, [r4, #21]
 800b906:	7da0      	ldrb	r0, [r4, #22]
 800b908:	f080 0001 	eor.w	r0, r0, #1
 800b90c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	602b      	str	r3, [r5, #0]
 800b914:	e7ef      	b.n	800b8f6 <ucdr_deserialize_int32_t+0xb6>
 800b916:	68a2      	ldr	r2, [r4, #8]
 800b918:	6923      	ldr	r3, [r4, #16]
 800b91a:	7da0      	ldrb	r0, [r4, #22]
 800b91c:	f884 8015 	strb.w	r8, [r4, #21]
 800b920:	1bd2      	subs	r2, r2, r7
 800b922:	1bdb      	subs	r3, r3, r7
 800b924:	60a2      	str	r2, [r4, #8]
 800b926:	6123      	str	r3, [r4, #16]
 800b928:	f080 0001 	eor.w	r0, r0, #1
 800b92c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b930:	68a3      	ldr	r3, [r4, #8]
 800b932:	789b      	ldrb	r3, [r3, #2]
 800b934:	706b      	strb	r3, [r5, #1]
 800b936:	1cab      	adds	r3, r5, #2
 800b938:	68a2      	ldr	r2, [r4, #8]
 800b93a:	7852      	ldrb	r2, [r2, #1]
 800b93c:	f803 2b01 	strb.w	r2, [r3], #1
 800b940:	68a2      	ldr	r2, [r4, #8]
 800b942:	7812      	ldrb	r2, [r2, #0]
 800b944:	701a      	strb	r2, [r3, #0]
 800b946:	e7b4      	b.n	800b8b2 <ucdr_deserialize_int32_t+0x72>
 800b948:	4631      	mov	r1, r6
 800b94a:	463a      	mov	r2, r7
 800b94c:	4628      	mov	r0, r5
 800b94e:	f00d fda8 	bl	80194a2 <memcpy>
 800b952:	68a1      	ldr	r1, [r4, #8]
 800b954:	464a      	mov	r2, r9
 800b956:	19e8      	adds	r0, r5, r7
 800b958:	f00d fda3 	bl	80194a2 <memcpy>
 800b95c:	e7a9      	b.n	800b8b2 <ucdr_deserialize_int32_t+0x72>
 800b95e:	bf00      	nop

0800b960 <ucdr_serialize_double>:
 800b960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b964:	2108      	movs	r1, #8
 800b966:	b082      	sub	sp, #8
 800b968:	4604      	mov	r4, r0
 800b96a:	ed8d 0b00 	vstr	d0, [sp]
 800b96e:	f000 fb8d 	bl	800c08c <ucdr_buffer_alignment>
 800b972:	4601      	mov	r1, r0
 800b974:	4620      	mov	r0, r4
 800b976:	7d67      	ldrb	r7, [r4, #21]
 800b978:	f000 fbcc 	bl	800c114 <ucdr_advance_buffer>
 800b97c:	2108      	movs	r1, #8
 800b97e:	4620      	mov	r0, r4
 800b980:	f000 fb24 	bl	800bfcc <ucdr_check_buffer_available_for>
 800b984:	2800      	cmp	r0, #0
 800b986:	d14e      	bne.n	800ba26 <ucdr_serialize_double+0xc6>
 800b988:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b98c:	42ab      	cmp	r3, r5
 800b98e:	d945      	bls.n	800ba1c <ucdr_serialize_double+0xbc>
 800b990:	1b5e      	subs	r6, r3, r5
 800b992:	60a3      	str	r3, [r4, #8]
 800b994:	6923      	ldr	r3, [r4, #16]
 800b996:	f1c6 0808 	rsb	r8, r6, #8
 800b99a:	4433      	add	r3, r6
 800b99c:	6123      	str	r3, [r4, #16]
 800b99e:	4641      	mov	r1, r8
 800b9a0:	4620      	mov	r0, r4
 800b9a2:	f000 fb1f 	bl	800bfe4 <ucdr_check_final_buffer_behavior>
 800b9a6:	2800      	cmp	r0, #0
 800b9a8:	d074      	beq.n	800ba94 <ucdr_serialize_double+0x134>
 800b9aa:	7d23      	ldrb	r3, [r4, #20]
 800b9ac:	2b01      	cmp	r3, #1
 800b9ae:	f000 809b 	beq.w	800bae8 <ucdr_serialize_double+0x188>
 800b9b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b9b6:	702b      	strb	r3, [r5, #0]
 800b9b8:	2e00      	cmp	r6, #0
 800b9ba:	d078      	beq.n	800baae <ucdr_serialize_double+0x14e>
 800b9bc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b9c0:	706b      	strb	r3, [r5, #1]
 800b9c2:	2e01      	cmp	r6, #1
 800b9c4:	d077      	beq.n	800bab6 <ucdr_serialize_double+0x156>
 800b9c6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b9ca:	70ab      	strb	r3, [r5, #2]
 800b9cc:	2e02      	cmp	r6, #2
 800b9ce:	d076      	beq.n	800babe <ucdr_serialize_double+0x15e>
 800b9d0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b9d4:	70eb      	strb	r3, [r5, #3]
 800b9d6:	2e03      	cmp	r6, #3
 800b9d8:	d075      	beq.n	800bac6 <ucdr_serialize_double+0x166>
 800b9da:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b9de:	712b      	strb	r3, [r5, #4]
 800b9e0:	2e04      	cmp	r6, #4
 800b9e2:	d074      	beq.n	800bace <ucdr_serialize_double+0x16e>
 800b9e4:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800b9e8:	716b      	strb	r3, [r5, #5]
 800b9ea:	2e05      	cmp	r6, #5
 800b9ec:	d073      	beq.n	800bad6 <ucdr_serialize_double+0x176>
 800b9ee:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800b9f2:	71ab      	strb	r3, [r5, #6]
 800b9f4:	2e06      	cmp	r6, #6
 800b9f6:	d072      	beq.n	800bade <ucdr_serialize_double+0x17e>
 800b9f8:	f89d 3000 	ldrb.w	r3, [sp]
 800b9fc:	71eb      	strb	r3, [r5, #7]
 800b9fe:	6923      	ldr	r3, [r4, #16]
 800ba00:	68a2      	ldr	r2, [r4, #8]
 800ba02:	7da0      	ldrb	r0, [r4, #22]
 800ba04:	3308      	adds	r3, #8
 800ba06:	1b9e      	subs	r6, r3, r6
 800ba08:	4442      	add	r2, r8
 800ba0a:	2308      	movs	r3, #8
 800ba0c:	f080 0001 	eor.w	r0, r0, #1
 800ba10:	60a2      	str	r2, [r4, #8]
 800ba12:	6126      	str	r6, [r4, #16]
 800ba14:	7563      	strb	r3, [r4, #21]
 800ba16:	b002      	add	sp, #8
 800ba18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba1c:	2108      	movs	r1, #8
 800ba1e:	4620      	mov	r0, r4
 800ba20:	f000 fae0 	bl	800bfe4 <ucdr_check_final_buffer_behavior>
 800ba24:	b350      	cbz	r0, 800ba7c <ucdr_serialize_double+0x11c>
 800ba26:	7d23      	ldrb	r3, [r4, #20]
 800ba28:	2b01      	cmp	r3, #1
 800ba2a:	d02d      	beq.n	800ba88 <ucdr_serialize_double+0x128>
 800ba2c:	68a3      	ldr	r3, [r4, #8]
 800ba2e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ba32:	701a      	strb	r2, [r3, #0]
 800ba34:	68a3      	ldr	r3, [r4, #8]
 800ba36:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ba3a:	705a      	strb	r2, [r3, #1]
 800ba3c:	68a3      	ldr	r3, [r4, #8]
 800ba3e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ba42:	709a      	strb	r2, [r3, #2]
 800ba44:	68a3      	ldr	r3, [r4, #8]
 800ba46:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ba4a:	70da      	strb	r2, [r3, #3]
 800ba4c:	68a3      	ldr	r3, [r4, #8]
 800ba4e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800ba52:	711a      	strb	r2, [r3, #4]
 800ba54:	68a3      	ldr	r3, [r4, #8]
 800ba56:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800ba5a:	715a      	strb	r2, [r3, #5]
 800ba5c:	68a3      	ldr	r3, [r4, #8]
 800ba5e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800ba62:	719a      	strb	r2, [r3, #6]
 800ba64:	68a3      	ldr	r3, [r4, #8]
 800ba66:	f89d 2000 	ldrb.w	r2, [sp]
 800ba6a:	71da      	strb	r2, [r3, #7]
 800ba6c:	68a2      	ldr	r2, [r4, #8]
 800ba6e:	6923      	ldr	r3, [r4, #16]
 800ba70:	3208      	adds	r2, #8
 800ba72:	3308      	adds	r3, #8
 800ba74:	2108      	movs	r1, #8
 800ba76:	60a2      	str	r2, [r4, #8]
 800ba78:	6123      	str	r3, [r4, #16]
 800ba7a:	7561      	strb	r1, [r4, #21]
 800ba7c:	7da0      	ldrb	r0, [r4, #22]
 800ba7e:	f080 0001 	eor.w	r0, r0, #1
 800ba82:	b002      	add	sp, #8
 800ba84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba88:	466b      	mov	r3, sp
 800ba8a:	cb03      	ldmia	r3!, {r0, r1}
 800ba8c:	68a3      	ldr	r3, [r4, #8]
 800ba8e:	6018      	str	r0, [r3, #0]
 800ba90:	6059      	str	r1, [r3, #4]
 800ba92:	e7eb      	b.n	800ba6c <ucdr_serialize_double+0x10c>
 800ba94:	68a2      	ldr	r2, [r4, #8]
 800ba96:	6923      	ldr	r3, [r4, #16]
 800ba98:	7da0      	ldrb	r0, [r4, #22]
 800ba9a:	7567      	strb	r7, [r4, #21]
 800ba9c:	1b92      	subs	r2, r2, r6
 800ba9e:	1b9b      	subs	r3, r3, r6
 800baa0:	f080 0001 	eor.w	r0, r0, #1
 800baa4:	60a2      	str	r2, [r4, #8]
 800baa6:	6123      	str	r3, [r4, #16]
 800baa8:	b002      	add	sp, #8
 800baaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800baae:	68a3      	ldr	r3, [r4, #8]
 800bab0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bab4:	701a      	strb	r2, [r3, #0]
 800bab6:	68a3      	ldr	r3, [r4, #8]
 800bab8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800babc:	701a      	strb	r2, [r3, #0]
 800babe:	68a3      	ldr	r3, [r4, #8]
 800bac0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bac4:	701a      	strb	r2, [r3, #0]
 800bac6:	68a3      	ldr	r3, [r4, #8]
 800bac8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800bacc:	701a      	strb	r2, [r3, #0]
 800bace:	68a3      	ldr	r3, [r4, #8]
 800bad0:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800bad4:	701a      	strb	r2, [r3, #0]
 800bad6:	68a3      	ldr	r3, [r4, #8]
 800bad8:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800badc:	701a      	strb	r2, [r3, #0]
 800bade:	68a3      	ldr	r3, [r4, #8]
 800bae0:	f89d 2000 	ldrb.w	r2, [sp]
 800bae4:	701a      	strb	r2, [r3, #0]
 800bae6:	e78a      	b.n	800b9fe <ucdr_serialize_double+0x9e>
 800bae8:	4628      	mov	r0, r5
 800baea:	466d      	mov	r5, sp
 800baec:	4629      	mov	r1, r5
 800baee:	4632      	mov	r2, r6
 800baf0:	f00d fcd7 	bl	80194a2 <memcpy>
 800baf4:	68a0      	ldr	r0, [r4, #8]
 800baf6:	4642      	mov	r2, r8
 800baf8:	19a9      	adds	r1, r5, r6
 800bafa:	f00d fcd2 	bl	80194a2 <memcpy>
 800bafe:	e77e      	b.n	800b9fe <ucdr_serialize_double+0x9e>

0800bb00 <ucdr_serialize_endian_double>:
 800bb00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bb04:	460e      	mov	r6, r1
 800bb06:	b083      	sub	sp, #12
 800bb08:	2108      	movs	r1, #8
 800bb0a:	4604      	mov	r4, r0
 800bb0c:	ed8d 0b00 	vstr	d0, [sp]
 800bb10:	f000 fabc 	bl	800c08c <ucdr_buffer_alignment>
 800bb14:	4601      	mov	r1, r0
 800bb16:	4620      	mov	r0, r4
 800bb18:	f894 8015 	ldrb.w	r8, [r4, #21]
 800bb1c:	f000 fafa 	bl	800c114 <ucdr_advance_buffer>
 800bb20:	2108      	movs	r1, #8
 800bb22:	4620      	mov	r0, r4
 800bb24:	f000 fa52 	bl	800bfcc <ucdr_check_buffer_available_for>
 800bb28:	2800      	cmp	r0, #0
 800bb2a:	d14d      	bne.n	800bbc8 <ucdr_serialize_endian_double+0xc8>
 800bb2c:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 800bb30:	42bd      	cmp	r5, r7
 800bb32:	d944      	bls.n	800bbbe <ucdr_serialize_endian_double+0xbe>
 800bb34:	6923      	ldr	r3, [r4, #16]
 800bb36:	60a5      	str	r5, [r4, #8]
 800bb38:	1bed      	subs	r5, r5, r7
 800bb3a:	442b      	add	r3, r5
 800bb3c:	f1c5 0908 	rsb	r9, r5, #8
 800bb40:	6123      	str	r3, [r4, #16]
 800bb42:	4649      	mov	r1, r9
 800bb44:	4620      	mov	r0, r4
 800bb46:	f000 fa4d 	bl	800bfe4 <ucdr_check_final_buffer_behavior>
 800bb4a:	2800      	cmp	r0, #0
 800bb4c:	d072      	beq.n	800bc34 <ucdr_serialize_endian_double+0x134>
 800bb4e:	2e01      	cmp	r6, #1
 800bb50:	f000 809b 	beq.w	800bc8a <ucdr_serialize_endian_double+0x18a>
 800bb54:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bb58:	703b      	strb	r3, [r7, #0]
 800bb5a:	2d00      	cmp	r5, #0
 800bb5c:	d078      	beq.n	800bc50 <ucdr_serialize_endian_double+0x150>
 800bb5e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bb62:	707b      	strb	r3, [r7, #1]
 800bb64:	2d01      	cmp	r5, #1
 800bb66:	d077      	beq.n	800bc58 <ucdr_serialize_endian_double+0x158>
 800bb68:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800bb6c:	70bb      	strb	r3, [r7, #2]
 800bb6e:	2d02      	cmp	r5, #2
 800bb70:	d076      	beq.n	800bc60 <ucdr_serialize_endian_double+0x160>
 800bb72:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800bb76:	70fb      	strb	r3, [r7, #3]
 800bb78:	2d03      	cmp	r5, #3
 800bb7a:	d075      	beq.n	800bc68 <ucdr_serialize_endian_double+0x168>
 800bb7c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800bb80:	713b      	strb	r3, [r7, #4]
 800bb82:	2d04      	cmp	r5, #4
 800bb84:	d074      	beq.n	800bc70 <ucdr_serialize_endian_double+0x170>
 800bb86:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800bb8a:	717b      	strb	r3, [r7, #5]
 800bb8c:	2d05      	cmp	r5, #5
 800bb8e:	d073      	beq.n	800bc78 <ucdr_serialize_endian_double+0x178>
 800bb90:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800bb94:	71bb      	strb	r3, [r7, #6]
 800bb96:	2d06      	cmp	r5, #6
 800bb98:	d072      	beq.n	800bc80 <ucdr_serialize_endian_double+0x180>
 800bb9a:	f89d 3000 	ldrb.w	r3, [sp]
 800bb9e:	71fb      	strb	r3, [r7, #7]
 800bba0:	6923      	ldr	r3, [r4, #16]
 800bba2:	68a2      	ldr	r2, [r4, #8]
 800bba4:	7da0      	ldrb	r0, [r4, #22]
 800bba6:	3308      	adds	r3, #8
 800bba8:	1b5d      	subs	r5, r3, r5
 800bbaa:	444a      	add	r2, r9
 800bbac:	2308      	movs	r3, #8
 800bbae:	f080 0001 	eor.w	r0, r0, #1
 800bbb2:	60a2      	str	r2, [r4, #8]
 800bbb4:	6125      	str	r5, [r4, #16]
 800bbb6:	7563      	strb	r3, [r4, #21]
 800bbb8:	b003      	add	sp, #12
 800bbba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bbbe:	2108      	movs	r1, #8
 800bbc0:	4620      	mov	r0, r4
 800bbc2:	f000 fa0f 	bl	800bfe4 <ucdr_check_final_buffer_behavior>
 800bbc6:	b348      	cbz	r0, 800bc1c <ucdr_serialize_endian_double+0x11c>
 800bbc8:	2e01      	cmp	r6, #1
 800bbca:	d02d      	beq.n	800bc28 <ucdr_serialize_endian_double+0x128>
 800bbcc:	68a3      	ldr	r3, [r4, #8]
 800bbce:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bbd2:	701a      	strb	r2, [r3, #0]
 800bbd4:	68a3      	ldr	r3, [r4, #8]
 800bbd6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bbda:	705a      	strb	r2, [r3, #1]
 800bbdc:	68a3      	ldr	r3, [r4, #8]
 800bbde:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bbe2:	709a      	strb	r2, [r3, #2]
 800bbe4:	68a3      	ldr	r3, [r4, #8]
 800bbe6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bbea:	70da      	strb	r2, [r3, #3]
 800bbec:	68a3      	ldr	r3, [r4, #8]
 800bbee:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800bbf2:	711a      	strb	r2, [r3, #4]
 800bbf4:	68a3      	ldr	r3, [r4, #8]
 800bbf6:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800bbfa:	715a      	strb	r2, [r3, #5]
 800bbfc:	68a3      	ldr	r3, [r4, #8]
 800bbfe:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800bc02:	719a      	strb	r2, [r3, #6]
 800bc04:	68a3      	ldr	r3, [r4, #8]
 800bc06:	f89d 2000 	ldrb.w	r2, [sp]
 800bc0a:	71da      	strb	r2, [r3, #7]
 800bc0c:	68a2      	ldr	r2, [r4, #8]
 800bc0e:	6923      	ldr	r3, [r4, #16]
 800bc10:	3208      	adds	r2, #8
 800bc12:	3308      	adds	r3, #8
 800bc14:	2108      	movs	r1, #8
 800bc16:	60a2      	str	r2, [r4, #8]
 800bc18:	6123      	str	r3, [r4, #16]
 800bc1a:	7561      	strb	r1, [r4, #21]
 800bc1c:	7da0      	ldrb	r0, [r4, #22]
 800bc1e:	f080 0001 	eor.w	r0, r0, #1
 800bc22:	b003      	add	sp, #12
 800bc24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc28:	466b      	mov	r3, sp
 800bc2a:	cb03      	ldmia	r3!, {r0, r1}
 800bc2c:	68a3      	ldr	r3, [r4, #8]
 800bc2e:	6018      	str	r0, [r3, #0]
 800bc30:	6059      	str	r1, [r3, #4]
 800bc32:	e7eb      	b.n	800bc0c <ucdr_serialize_endian_double+0x10c>
 800bc34:	68a2      	ldr	r2, [r4, #8]
 800bc36:	6923      	ldr	r3, [r4, #16]
 800bc38:	7da0      	ldrb	r0, [r4, #22]
 800bc3a:	f884 8015 	strb.w	r8, [r4, #21]
 800bc3e:	1b52      	subs	r2, r2, r5
 800bc40:	1b5b      	subs	r3, r3, r5
 800bc42:	f080 0001 	eor.w	r0, r0, #1
 800bc46:	60a2      	str	r2, [r4, #8]
 800bc48:	6123      	str	r3, [r4, #16]
 800bc4a:	b003      	add	sp, #12
 800bc4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc50:	68a3      	ldr	r3, [r4, #8]
 800bc52:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bc56:	701a      	strb	r2, [r3, #0]
 800bc58:	68a3      	ldr	r3, [r4, #8]
 800bc5a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bc5e:	701a      	strb	r2, [r3, #0]
 800bc60:	68a3      	ldr	r3, [r4, #8]
 800bc62:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bc66:	701a      	strb	r2, [r3, #0]
 800bc68:	68a3      	ldr	r3, [r4, #8]
 800bc6a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800bc6e:	701a      	strb	r2, [r3, #0]
 800bc70:	68a3      	ldr	r3, [r4, #8]
 800bc72:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800bc76:	701a      	strb	r2, [r3, #0]
 800bc78:	68a3      	ldr	r3, [r4, #8]
 800bc7a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800bc7e:	701a      	strb	r2, [r3, #0]
 800bc80:	68a3      	ldr	r3, [r4, #8]
 800bc82:	f89d 2000 	ldrb.w	r2, [sp]
 800bc86:	701a      	strb	r2, [r3, #0]
 800bc88:	e78a      	b.n	800bba0 <ucdr_serialize_endian_double+0xa0>
 800bc8a:	466e      	mov	r6, sp
 800bc8c:	4631      	mov	r1, r6
 800bc8e:	462a      	mov	r2, r5
 800bc90:	4638      	mov	r0, r7
 800bc92:	f00d fc06 	bl	80194a2 <memcpy>
 800bc96:	68a0      	ldr	r0, [r4, #8]
 800bc98:	464a      	mov	r2, r9
 800bc9a:	1971      	adds	r1, r6, r5
 800bc9c:	f00d fc01 	bl	80194a2 <memcpy>
 800bca0:	e77e      	b.n	800bba0 <ucdr_serialize_endian_double+0xa0>
 800bca2:	bf00      	nop

0800bca4 <ucdr_deserialize_double>:
 800bca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bca8:	460d      	mov	r5, r1
 800bcaa:	2108      	movs	r1, #8
 800bcac:	4604      	mov	r4, r0
 800bcae:	f000 f9ed 	bl	800c08c <ucdr_buffer_alignment>
 800bcb2:	4601      	mov	r1, r0
 800bcb4:	4620      	mov	r0, r4
 800bcb6:	f894 9015 	ldrb.w	r9, [r4, #21]
 800bcba:	f000 fa2b 	bl	800c114 <ucdr_advance_buffer>
 800bcbe:	2108      	movs	r1, #8
 800bcc0:	4620      	mov	r0, r4
 800bcc2:	f000 f983 	bl	800bfcc <ucdr_check_buffer_available_for>
 800bcc6:	2800      	cmp	r0, #0
 800bcc8:	d151      	bne.n	800bd6e <ucdr_deserialize_double+0xca>
 800bcca:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800bcce:	42be      	cmp	r6, r7
 800bcd0:	d948      	bls.n	800bd64 <ucdr_deserialize_double+0xc0>
 800bcd2:	6923      	ldr	r3, [r4, #16]
 800bcd4:	60a6      	str	r6, [r4, #8]
 800bcd6:	1bf6      	subs	r6, r6, r7
 800bcd8:	4433      	add	r3, r6
 800bcda:	f1c6 0808 	rsb	r8, r6, #8
 800bcde:	6123      	str	r3, [r4, #16]
 800bce0:	4641      	mov	r1, r8
 800bce2:	4620      	mov	r0, r4
 800bce4:	f000 f97e 	bl	800bfe4 <ucdr_check_final_buffer_behavior>
 800bce8:	2800      	cmp	r0, #0
 800bcea:	d06d      	beq.n	800bdc8 <ucdr_deserialize_double+0x124>
 800bcec:	7d23      	ldrb	r3, [r4, #20]
 800bcee:	2b01      	cmp	r3, #1
 800bcf0:	f000 8093 	beq.w	800be1a <ucdr_deserialize_double+0x176>
 800bcf4:	79fb      	ldrb	r3, [r7, #7]
 800bcf6:	702b      	strb	r3, [r5, #0]
 800bcf8:	2e00      	cmp	r6, #0
 800bcfa:	d072      	beq.n	800bde2 <ucdr_deserialize_double+0x13e>
 800bcfc:	79bb      	ldrb	r3, [r7, #6]
 800bcfe:	706b      	strb	r3, [r5, #1]
 800bd00:	2e01      	cmp	r6, #1
 800bd02:	f105 0302 	add.w	r3, r5, #2
 800bd06:	d070      	beq.n	800bdea <ucdr_deserialize_double+0x146>
 800bd08:	797b      	ldrb	r3, [r7, #5]
 800bd0a:	70ab      	strb	r3, [r5, #2]
 800bd0c:	2e02      	cmp	r6, #2
 800bd0e:	f105 0303 	add.w	r3, r5, #3
 800bd12:	d06e      	beq.n	800bdf2 <ucdr_deserialize_double+0x14e>
 800bd14:	793b      	ldrb	r3, [r7, #4]
 800bd16:	70eb      	strb	r3, [r5, #3]
 800bd18:	2e03      	cmp	r6, #3
 800bd1a:	f105 0304 	add.w	r3, r5, #4
 800bd1e:	d06c      	beq.n	800bdfa <ucdr_deserialize_double+0x156>
 800bd20:	78fb      	ldrb	r3, [r7, #3]
 800bd22:	712b      	strb	r3, [r5, #4]
 800bd24:	2e04      	cmp	r6, #4
 800bd26:	f105 0305 	add.w	r3, r5, #5
 800bd2a:	d06a      	beq.n	800be02 <ucdr_deserialize_double+0x15e>
 800bd2c:	78bb      	ldrb	r3, [r7, #2]
 800bd2e:	716b      	strb	r3, [r5, #5]
 800bd30:	2e05      	cmp	r6, #5
 800bd32:	f105 0306 	add.w	r3, r5, #6
 800bd36:	d068      	beq.n	800be0a <ucdr_deserialize_double+0x166>
 800bd38:	787b      	ldrb	r3, [r7, #1]
 800bd3a:	71ab      	strb	r3, [r5, #6]
 800bd3c:	2e06      	cmp	r6, #6
 800bd3e:	f105 0307 	add.w	r3, r5, #7
 800bd42:	d066      	beq.n	800be12 <ucdr_deserialize_double+0x16e>
 800bd44:	783b      	ldrb	r3, [r7, #0]
 800bd46:	71eb      	strb	r3, [r5, #7]
 800bd48:	6923      	ldr	r3, [r4, #16]
 800bd4a:	68a2      	ldr	r2, [r4, #8]
 800bd4c:	7da0      	ldrb	r0, [r4, #22]
 800bd4e:	3308      	adds	r3, #8
 800bd50:	1b9e      	subs	r6, r3, r6
 800bd52:	2308      	movs	r3, #8
 800bd54:	4442      	add	r2, r8
 800bd56:	7563      	strb	r3, [r4, #21]
 800bd58:	60a2      	str	r2, [r4, #8]
 800bd5a:	6126      	str	r6, [r4, #16]
 800bd5c:	f080 0001 	eor.w	r0, r0, #1
 800bd60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd64:	2108      	movs	r1, #8
 800bd66:	4620      	mov	r0, r4
 800bd68:	f000 f93c 	bl	800bfe4 <ucdr_check_final_buffer_behavior>
 800bd6c:	b310      	cbz	r0, 800bdb4 <ucdr_deserialize_double+0x110>
 800bd6e:	7d23      	ldrb	r3, [r4, #20]
 800bd70:	2b01      	cmp	r3, #1
 800bd72:	68a3      	ldr	r3, [r4, #8]
 800bd74:	d023      	beq.n	800bdbe <ucdr_deserialize_double+0x11a>
 800bd76:	79db      	ldrb	r3, [r3, #7]
 800bd78:	702b      	strb	r3, [r5, #0]
 800bd7a:	68a3      	ldr	r3, [r4, #8]
 800bd7c:	799b      	ldrb	r3, [r3, #6]
 800bd7e:	706b      	strb	r3, [r5, #1]
 800bd80:	68a3      	ldr	r3, [r4, #8]
 800bd82:	795b      	ldrb	r3, [r3, #5]
 800bd84:	70ab      	strb	r3, [r5, #2]
 800bd86:	68a3      	ldr	r3, [r4, #8]
 800bd88:	791b      	ldrb	r3, [r3, #4]
 800bd8a:	70eb      	strb	r3, [r5, #3]
 800bd8c:	68a3      	ldr	r3, [r4, #8]
 800bd8e:	78db      	ldrb	r3, [r3, #3]
 800bd90:	712b      	strb	r3, [r5, #4]
 800bd92:	68a3      	ldr	r3, [r4, #8]
 800bd94:	789b      	ldrb	r3, [r3, #2]
 800bd96:	716b      	strb	r3, [r5, #5]
 800bd98:	68a3      	ldr	r3, [r4, #8]
 800bd9a:	785b      	ldrb	r3, [r3, #1]
 800bd9c:	71ab      	strb	r3, [r5, #6]
 800bd9e:	68a3      	ldr	r3, [r4, #8]
 800bda0:	781b      	ldrb	r3, [r3, #0]
 800bda2:	71eb      	strb	r3, [r5, #7]
 800bda4:	68a2      	ldr	r2, [r4, #8]
 800bda6:	6923      	ldr	r3, [r4, #16]
 800bda8:	3208      	adds	r2, #8
 800bdaa:	3308      	adds	r3, #8
 800bdac:	2108      	movs	r1, #8
 800bdae:	60a2      	str	r2, [r4, #8]
 800bdb0:	6123      	str	r3, [r4, #16]
 800bdb2:	7561      	strb	r1, [r4, #21]
 800bdb4:	7da0      	ldrb	r0, [r4, #22]
 800bdb6:	f080 0001 	eor.w	r0, r0, #1
 800bdba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdbe:	681a      	ldr	r2, [r3, #0]
 800bdc0:	685b      	ldr	r3, [r3, #4]
 800bdc2:	606b      	str	r3, [r5, #4]
 800bdc4:	602a      	str	r2, [r5, #0]
 800bdc6:	e7ed      	b.n	800bda4 <ucdr_deserialize_double+0x100>
 800bdc8:	68a2      	ldr	r2, [r4, #8]
 800bdca:	6923      	ldr	r3, [r4, #16]
 800bdcc:	7da0      	ldrb	r0, [r4, #22]
 800bdce:	f884 9015 	strb.w	r9, [r4, #21]
 800bdd2:	1b92      	subs	r2, r2, r6
 800bdd4:	1b9b      	subs	r3, r3, r6
 800bdd6:	60a2      	str	r2, [r4, #8]
 800bdd8:	6123      	str	r3, [r4, #16]
 800bdda:	f080 0001 	eor.w	r0, r0, #1
 800bdde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bde2:	68a3      	ldr	r3, [r4, #8]
 800bde4:	799b      	ldrb	r3, [r3, #6]
 800bde6:	706b      	strb	r3, [r5, #1]
 800bde8:	1cab      	adds	r3, r5, #2
 800bdea:	68a2      	ldr	r2, [r4, #8]
 800bdec:	7952      	ldrb	r2, [r2, #5]
 800bdee:	f803 2b01 	strb.w	r2, [r3], #1
 800bdf2:	68a2      	ldr	r2, [r4, #8]
 800bdf4:	7912      	ldrb	r2, [r2, #4]
 800bdf6:	f803 2b01 	strb.w	r2, [r3], #1
 800bdfa:	68a2      	ldr	r2, [r4, #8]
 800bdfc:	78d2      	ldrb	r2, [r2, #3]
 800bdfe:	f803 2b01 	strb.w	r2, [r3], #1
 800be02:	68a2      	ldr	r2, [r4, #8]
 800be04:	7892      	ldrb	r2, [r2, #2]
 800be06:	f803 2b01 	strb.w	r2, [r3], #1
 800be0a:	68a2      	ldr	r2, [r4, #8]
 800be0c:	7852      	ldrb	r2, [r2, #1]
 800be0e:	f803 2b01 	strb.w	r2, [r3], #1
 800be12:	68a2      	ldr	r2, [r4, #8]
 800be14:	7812      	ldrb	r2, [r2, #0]
 800be16:	701a      	strb	r2, [r3, #0]
 800be18:	e796      	b.n	800bd48 <ucdr_deserialize_double+0xa4>
 800be1a:	4639      	mov	r1, r7
 800be1c:	4632      	mov	r2, r6
 800be1e:	4628      	mov	r0, r5
 800be20:	f00d fb3f 	bl	80194a2 <memcpy>
 800be24:	68a1      	ldr	r1, [r4, #8]
 800be26:	4642      	mov	r2, r8
 800be28:	19a8      	adds	r0, r5, r6
 800be2a:	f00d fb3a 	bl	80194a2 <memcpy>
 800be2e:	e78b      	b.n	800bd48 <ucdr_deserialize_double+0xa4>

0800be30 <ucdr_deserialize_endian_double>:
 800be30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be34:	460f      	mov	r7, r1
 800be36:	2108      	movs	r1, #8
 800be38:	4604      	mov	r4, r0
 800be3a:	4615      	mov	r5, r2
 800be3c:	f000 f926 	bl	800c08c <ucdr_buffer_alignment>
 800be40:	4601      	mov	r1, r0
 800be42:	4620      	mov	r0, r4
 800be44:	f894 9015 	ldrb.w	r9, [r4, #21]
 800be48:	f000 f964 	bl	800c114 <ucdr_advance_buffer>
 800be4c:	2108      	movs	r1, #8
 800be4e:	4620      	mov	r0, r4
 800be50:	f000 f8bc 	bl	800bfcc <ucdr_check_buffer_available_for>
 800be54:	2800      	cmp	r0, #0
 800be56:	d159      	bne.n	800bf0c <ucdr_deserialize_endian_double+0xdc>
 800be58:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 800be5c:	4546      	cmp	r6, r8
 800be5e:	d950      	bls.n	800bf02 <ucdr_deserialize_endian_double+0xd2>
 800be60:	6923      	ldr	r3, [r4, #16]
 800be62:	60a6      	str	r6, [r4, #8]
 800be64:	eba6 0608 	sub.w	r6, r6, r8
 800be68:	4433      	add	r3, r6
 800be6a:	f1c6 0a08 	rsb	sl, r6, #8
 800be6e:	6123      	str	r3, [r4, #16]
 800be70:	4651      	mov	r1, sl
 800be72:	4620      	mov	r0, r4
 800be74:	f000 f8b6 	bl	800bfe4 <ucdr_check_final_buffer_behavior>
 800be78:	2800      	cmp	r0, #0
 800be7a:	d073      	beq.n	800bf64 <ucdr_deserialize_endian_double+0x134>
 800be7c:	2f01      	cmp	r7, #1
 800be7e:	f000 809a 	beq.w	800bfb6 <ucdr_deserialize_endian_double+0x186>
 800be82:	f898 3007 	ldrb.w	r3, [r8, #7]
 800be86:	702b      	strb	r3, [r5, #0]
 800be88:	2e00      	cmp	r6, #0
 800be8a:	d078      	beq.n	800bf7e <ucdr_deserialize_endian_double+0x14e>
 800be8c:	f898 3006 	ldrb.w	r3, [r8, #6]
 800be90:	706b      	strb	r3, [r5, #1]
 800be92:	2e01      	cmp	r6, #1
 800be94:	f105 0302 	add.w	r3, r5, #2
 800be98:	d075      	beq.n	800bf86 <ucdr_deserialize_endian_double+0x156>
 800be9a:	f898 3005 	ldrb.w	r3, [r8, #5]
 800be9e:	70ab      	strb	r3, [r5, #2]
 800bea0:	2e02      	cmp	r6, #2
 800bea2:	f105 0303 	add.w	r3, r5, #3
 800bea6:	d072      	beq.n	800bf8e <ucdr_deserialize_endian_double+0x15e>
 800bea8:	f898 3004 	ldrb.w	r3, [r8, #4]
 800beac:	70eb      	strb	r3, [r5, #3]
 800beae:	2e03      	cmp	r6, #3
 800beb0:	f105 0304 	add.w	r3, r5, #4
 800beb4:	d06f      	beq.n	800bf96 <ucdr_deserialize_endian_double+0x166>
 800beb6:	f898 3003 	ldrb.w	r3, [r8, #3]
 800beba:	712b      	strb	r3, [r5, #4]
 800bebc:	2e04      	cmp	r6, #4
 800bebe:	f105 0305 	add.w	r3, r5, #5
 800bec2:	d06c      	beq.n	800bf9e <ucdr_deserialize_endian_double+0x16e>
 800bec4:	f898 3002 	ldrb.w	r3, [r8, #2]
 800bec8:	716b      	strb	r3, [r5, #5]
 800beca:	2e05      	cmp	r6, #5
 800becc:	f105 0306 	add.w	r3, r5, #6
 800bed0:	d069      	beq.n	800bfa6 <ucdr_deserialize_endian_double+0x176>
 800bed2:	f898 3001 	ldrb.w	r3, [r8, #1]
 800bed6:	71ab      	strb	r3, [r5, #6]
 800bed8:	2e06      	cmp	r6, #6
 800beda:	f105 0307 	add.w	r3, r5, #7
 800bede:	d066      	beq.n	800bfae <ucdr_deserialize_endian_double+0x17e>
 800bee0:	f898 3000 	ldrb.w	r3, [r8]
 800bee4:	71eb      	strb	r3, [r5, #7]
 800bee6:	6923      	ldr	r3, [r4, #16]
 800bee8:	68a2      	ldr	r2, [r4, #8]
 800beea:	7da0      	ldrb	r0, [r4, #22]
 800beec:	3308      	adds	r3, #8
 800beee:	1b9e      	subs	r6, r3, r6
 800bef0:	2308      	movs	r3, #8
 800bef2:	4452      	add	r2, sl
 800bef4:	7563      	strb	r3, [r4, #21]
 800bef6:	60a2      	str	r2, [r4, #8]
 800bef8:	6126      	str	r6, [r4, #16]
 800befa:	f080 0001 	eor.w	r0, r0, #1
 800befe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf02:	2108      	movs	r1, #8
 800bf04:	4620      	mov	r0, r4
 800bf06:	f000 f86d 	bl	800bfe4 <ucdr_check_final_buffer_behavior>
 800bf0a:	b308      	cbz	r0, 800bf50 <ucdr_deserialize_endian_double+0x120>
 800bf0c:	2f01      	cmp	r7, #1
 800bf0e:	68a3      	ldr	r3, [r4, #8]
 800bf10:	d023      	beq.n	800bf5a <ucdr_deserialize_endian_double+0x12a>
 800bf12:	79db      	ldrb	r3, [r3, #7]
 800bf14:	702b      	strb	r3, [r5, #0]
 800bf16:	68a3      	ldr	r3, [r4, #8]
 800bf18:	799b      	ldrb	r3, [r3, #6]
 800bf1a:	706b      	strb	r3, [r5, #1]
 800bf1c:	68a3      	ldr	r3, [r4, #8]
 800bf1e:	795b      	ldrb	r3, [r3, #5]
 800bf20:	70ab      	strb	r3, [r5, #2]
 800bf22:	68a3      	ldr	r3, [r4, #8]
 800bf24:	791b      	ldrb	r3, [r3, #4]
 800bf26:	70eb      	strb	r3, [r5, #3]
 800bf28:	68a3      	ldr	r3, [r4, #8]
 800bf2a:	78db      	ldrb	r3, [r3, #3]
 800bf2c:	712b      	strb	r3, [r5, #4]
 800bf2e:	68a3      	ldr	r3, [r4, #8]
 800bf30:	789b      	ldrb	r3, [r3, #2]
 800bf32:	716b      	strb	r3, [r5, #5]
 800bf34:	68a3      	ldr	r3, [r4, #8]
 800bf36:	785b      	ldrb	r3, [r3, #1]
 800bf38:	71ab      	strb	r3, [r5, #6]
 800bf3a:	68a3      	ldr	r3, [r4, #8]
 800bf3c:	781b      	ldrb	r3, [r3, #0]
 800bf3e:	71eb      	strb	r3, [r5, #7]
 800bf40:	68a2      	ldr	r2, [r4, #8]
 800bf42:	6923      	ldr	r3, [r4, #16]
 800bf44:	3208      	adds	r2, #8
 800bf46:	3308      	adds	r3, #8
 800bf48:	2108      	movs	r1, #8
 800bf4a:	60a2      	str	r2, [r4, #8]
 800bf4c:	6123      	str	r3, [r4, #16]
 800bf4e:	7561      	strb	r1, [r4, #21]
 800bf50:	7da0      	ldrb	r0, [r4, #22]
 800bf52:	f080 0001 	eor.w	r0, r0, #1
 800bf56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf5a:	681a      	ldr	r2, [r3, #0]
 800bf5c:	685b      	ldr	r3, [r3, #4]
 800bf5e:	606b      	str	r3, [r5, #4]
 800bf60:	602a      	str	r2, [r5, #0]
 800bf62:	e7ed      	b.n	800bf40 <ucdr_deserialize_endian_double+0x110>
 800bf64:	68a2      	ldr	r2, [r4, #8]
 800bf66:	6923      	ldr	r3, [r4, #16]
 800bf68:	7da0      	ldrb	r0, [r4, #22]
 800bf6a:	f884 9015 	strb.w	r9, [r4, #21]
 800bf6e:	1b92      	subs	r2, r2, r6
 800bf70:	1b9b      	subs	r3, r3, r6
 800bf72:	60a2      	str	r2, [r4, #8]
 800bf74:	6123      	str	r3, [r4, #16]
 800bf76:	f080 0001 	eor.w	r0, r0, #1
 800bf7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf7e:	68a3      	ldr	r3, [r4, #8]
 800bf80:	799b      	ldrb	r3, [r3, #6]
 800bf82:	706b      	strb	r3, [r5, #1]
 800bf84:	1cab      	adds	r3, r5, #2
 800bf86:	68a2      	ldr	r2, [r4, #8]
 800bf88:	7952      	ldrb	r2, [r2, #5]
 800bf8a:	f803 2b01 	strb.w	r2, [r3], #1
 800bf8e:	68a2      	ldr	r2, [r4, #8]
 800bf90:	7912      	ldrb	r2, [r2, #4]
 800bf92:	f803 2b01 	strb.w	r2, [r3], #1
 800bf96:	68a2      	ldr	r2, [r4, #8]
 800bf98:	78d2      	ldrb	r2, [r2, #3]
 800bf9a:	f803 2b01 	strb.w	r2, [r3], #1
 800bf9e:	68a2      	ldr	r2, [r4, #8]
 800bfa0:	7892      	ldrb	r2, [r2, #2]
 800bfa2:	f803 2b01 	strb.w	r2, [r3], #1
 800bfa6:	68a2      	ldr	r2, [r4, #8]
 800bfa8:	7852      	ldrb	r2, [r2, #1]
 800bfaa:	f803 2b01 	strb.w	r2, [r3], #1
 800bfae:	68a2      	ldr	r2, [r4, #8]
 800bfb0:	7812      	ldrb	r2, [r2, #0]
 800bfb2:	701a      	strb	r2, [r3, #0]
 800bfb4:	e797      	b.n	800bee6 <ucdr_deserialize_endian_double+0xb6>
 800bfb6:	4641      	mov	r1, r8
 800bfb8:	4632      	mov	r2, r6
 800bfba:	4628      	mov	r0, r5
 800bfbc:	f00d fa71 	bl	80194a2 <memcpy>
 800bfc0:	68a1      	ldr	r1, [r4, #8]
 800bfc2:	4652      	mov	r2, sl
 800bfc4:	19a8      	adds	r0, r5, r6
 800bfc6:	f00d fa6c 	bl	80194a2 <memcpy>
 800bfca:	e78c      	b.n	800bee6 <ucdr_deserialize_endian_double+0xb6>

0800bfcc <ucdr_check_buffer_available_for>:
 800bfcc:	7d83      	ldrb	r3, [r0, #22]
 800bfce:	b93b      	cbnz	r3, 800bfe0 <ucdr_check_buffer_available_for+0x14>
 800bfd0:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800bfd4:	4419      	add	r1, r3
 800bfd6:	4288      	cmp	r0, r1
 800bfd8:	bf34      	ite	cc
 800bfda:	2000      	movcc	r0, #0
 800bfdc:	2001      	movcs	r0, #1
 800bfde:	4770      	bx	lr
 800bfe0:	2000      	movs	r0, #0
 800bfe2:	4770      	bx	lr

0800bfe4 <ucdr_check_final_buffer_behavior>:
 800bfe4:	7d83      	ldrb	r3, [r0, #22]
 800bfe6:	b943      	cbnz	r3, 800bffa <ucdr_check_final_buffer_behavior+0x16>
 800bfe8:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800bfec:	4291      	cmp	r1, r2
 800bfee:	b510      	push	{r4, lr}
 800bff0:	4604      	mov	r4, r0
 800bff2:	d205      	bcs.n	800c000 <ucdr_check_final_buffer_behavior+0x1c>
 800bff4:	2301      	movs	r3, #1
 800bff6:	4618      	mov	r0, r3
 800bff8:	bd10      	pop	{r4, pc}
 800bffa:	2300      	movs	r3, #0
 800bffc:	4618      	mov	r0, r3
 800bffe:	4770      	bx	lr
 800c000:	6982      	ldr	r2, [r0, #24]
 800c002:	b13a      	cbz	r2, 800c014 <ucdr_check_final_buffer_behavior+0x30>
 800c004:	69c1      	ldr	r1, [r0, #28]
 800c006:	4790      	blx	r2
 800c008:	f080 0301 	eor.w	r3, r0, #1
 800c00c:	b2db      	uxtb	r3, r3
 800c00e:	75a0      	strb	r0, [r4, #22]
 800c010:	4618      	mov	r0, r3
 800c012:	bd10      	pop	{r4, pc}
 800c014:	2001      	movs	r0, #1
 800c016:	75a0      	strb	r0, [r4, #22]
 800c018:	e7fa      	b.n	800c010 <ucdr_check_final_buffer_behavior+0x2c>
 800c01a:	bf00      	nop

0800c01c <ucdr_set_on_full_buffer_callback>:
 800c01c:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800c020:	4770      	bx	lr
 800c022:	bf00      	nop

0800c024 <ucdr_init_buffer_origin_offset_endian>:
 800c024:	b410      	push	{r4}
 800c026:	9c01      	ldr	r4, [sp, #4]
 800c028:	6001      	str	r1, [r0, #0]
 800c02a:	440a      	add	r2, r1
 800c02c:	6042      	str	r2, [r0, #4]
 800c02e:	190a      	adds	r2, r1, r4
 800c030:	441c      	add	r4, r3
 800c032:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800c036:	6082      	str	r2, [r0, #8]
 800c038:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800c03c:	7503      	strb	r3, [r0, #20]
 800c03e:	2200      	movs	r2, #0
 800c040:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800c044:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c048:	7542      	strb	r2, [r0, #21]
 800c04a:	7582      	strb	r2, [r0, #22]
 800c04c:	4770      	bx	lr
 800c04e:	bf00      	nop

0800c050 <ucdr_init_buffer_origin_offset>:
 800c050:	b510      	push	{r4, lr}
 800c052:	b082      	sub	sp, #8
 800c054:	9c04      	ldr	r4, [sp, #16]
 800c056:	9400      	str	r4, [sp, #0]
 800c058:	2401      	movs	r4, #1
 800c05a:	9401      	str	r4, [sp, #4]
 800c05c:	f7ff ffe2 	bl	800c024 <ucdr_init_buffer_origin_offset_endian>
 800c060:	b002      	add	sp, #8
 800c062:	bd10      	pop	{r4, pc}

0800c064 <ucdr_init_buffer_origin>:
 800c064:	b510      	push	{r4, lr}
 800c066:	b082      	sub	sp, #8
 800c068:	2400      	movs	r4, #0
 800c06a:	9400      	str	r4, [sp, #0]
 800c06c:	f7ff fff0 	bl	800c050 <ucdr_init_buffer_origin_offset>
 800c070:	b002      	add	sp, #8
 800c072:	bd10      	pop	{r4, pc}

0800c074 <ucdr_init_buffer>:
 800c074:	2300      	movs	r3, #0
 800c076:	f7ff bff5 	b.w	800c064 <ucdr_init_buffer_origin>
 800c07a:	bf00      	nop

0800c07c <ucdr_alignment>:
 800c07c:	fbb0 f3f1 	udiv	r3, r0, r1
 800c080:	fb03 0011 	mls	r0, r3, r1, r0
 800c084:	1a08      	subs	r0, r1, r0
 800c086:	3901      	subs	r1, #1
 800c088:	4008      	ands	r0, r1
 800c08a:	4770      	bx	lr

0800c08c <ucdr_buffer_alignment>:
 800c08c:	7d43      	ldrb	r3, [r0, #21]
 800c08e:	428b      	cmp	r3, r1
 800c090:	d208      	bcs.n	800c0a4 <ucdr_buffer_alignment+0x18>
 800c092:	6900      	ldr	r0, [r0, #16]
 800c094:	fbb0 f3f1 	udiv	r3, r0, r1
 800c098:	fb01 0013 	mls	r0, r1, r3, r0
 800c09c:	1a08      	subs	r0, r1, r0
 800c09e:	3901      	subs	r1, #1
 800c0a0:	4008      	ands	r0, r1
 800c0a2:	4770      	bx	lr
 800c0a4:	2000      	movs	r0, #0
 800c0a6:	4770      	bx	lr

0800c0a8 <ucdr_align_to>:
 800c0a8:	b538      	push	{r3, r4, r5, lr}
 800c0aa:	4604      	mov	r4, r0
 800c0ac:	460d      	mov	r5, r1
 800c0ae:	f7ff ffed 	bl	800c08c <ucdr_buffer_alignment>
 800c0b2:	68a3      	ldr	r3, [r4, #8]
 800c0b4:	6921      	ldr	r1, [r4, #16]
 800c0b6:	7565      	strb	r5, [r4, #21]
 800c0b8:	181a      	adds	r2, r3, r0
 800c0ba:	6863      	ldr	r3, [r4, #4]
 800c0bc:	4293      	cmp	r3, r2
 800c0be:	4408      	add	r0, r1
 800c0c0:	bf28      	it	cs
 800c0c2:	4613      	movcs	r3, r2
 800c0c4:	6120      	str	r0, [r4, #16]
 800c0c6:	60a3      	str	r3, [r4, #8]
 800c0c8:	bd38      	pop	{r3, r4, r5, pc}
 800c0ca:	bf00      	nop

0800c0cc <ucdr_buffer_length>:
 800c0cc:	6882      	ldr	r2, [r0, #8]
 800c0ce:	6800      	ldr	r0, [r0, #0]
 800c0d0:	1a10      	subs	r0, r2, r0
 800c0d2:	4770      	bx	lr

0800c0d4 <ucdr_buffer_remaining>:
 800c0d4:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800c0d8:	1a10      	subs	r0, r2, r0
 800c0da:	4770      	bx	lr

0800c0dc <ucdr_check_final_buffer_behavior_array>:
 800c0dc:	b538      	push	{r3, r4, r5, lr}
 800c0de:	7d83      	ldrb	r3, [r0, #22]
 800c0e0:	b963      	cbnz	r3, 800c0fc <ucdr_check_final_buffer_behavior_array+0x20>
 800c0e2:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	4604      	mov	r4, r0
 800c0ea:	460d      	mov	r5, r1
 800c0ec:	d308      	bcc.n	800c100 <ucdr_check_final_buffer_behavior_array+0x24>
 800c0ee:	b139      	cbz	r1, 800c100 <ucdr_check_final_buffer_behavior_array+0x24>
 800c0f0:	6983      	ldr	r3, [r0, #24]
 800c0f2:	b163      	cbz	r3, 800c10e <ucdr_check_final_buffer_behavior_array+0x32>
 800c0f4:	69c1      	ldr	r1, [r0, #28]
 800c0f6:	4798      	blx	r3
 800c0f8:	75a0      	strb	r0, [r4, #22]
 800c0fa:	b108      	cbz	r0, 800c100 <ucdr_check_final_buffer_behavior_array+0x24>
 800c0fc:	2000      	movs	r0, #0
 800c0fe:	bd38      	pop	{r3, r4, r5, pc}
 800c100:	4620      	mov	r0, r4
 800c102:	f7ff ffe7 	bl	800c0d4 <ucdr_buffer_remaining>
 800c106:	42a8      	cmp	r0, r5
 800c108:	bf28      	it	cs
 800c10a:	4628      	movcs	r0, r5
 800c10c:	bd38      	pop	{r3, r4, r5, pc}
 800c10e:	2301      	movs	r3, #1
 800c110:	7583      	strb	r3, [r0, #22]
 800c112:	e7f3      	b.n	800c0fc <ucdr_check_final_buffer_behavior_array+0x20>

0800c114 <ucdr_advance_buffer>:
 800c114:	b538      	push	{r3, r4, r5, lr}
 800c116:	4604      	mov	r4, r0
 800c118:	460d      	mov	r5, r1
 800c11a:	f7ff ff57 	bl	800bfcc <ucdr_check_buffer_available_for>
 800c11e:	b178      	cbz	r0, 800c140 <ucdr_advance_buffer+0x2c>
 800c120:	6923      	ldr	r3, [r4, #16]
 800c122:	68a2      	ldr	r2, [r4, #8]
 800c124:	442b      	add	r3, r5
 800c126:	6123      	str	r3, [r4, #16]
 800c128:	2301      	movs	r3, #1
 800c12a:	442a      	add	r2, r5
 800c12c:	7563      	strb	r3, [r4, #21]
 800c12e:	60a2      	str	r2, [r4, #8]
 800c130:	bd38      	pop	{r3, r4, r5, pc}
 800c132:	68a2      	ldr	r2, [r4, #8]
 800c134:	6923      	ldr	r3, [r4, #16]
 800c136:	4402      	add	r2, r0
 800c138:	4403      	add	r3, r0
 800c13a:	1a2d      	subs	r5, r5, r0
 800c13c:	60a2      	str	r2, [r4, #8]
 800c13e:	6123      	str	r3, [r4, #16]
 800c140:	4629      	mov	r1, r5
 800c142:	2201      	movs	r2, #1
 800c144:	4620      	mov	r0, r4
 800c146:	f7ff ffc9 	bl	800c0dc <ucdr_check_final_buffer_behavior_array>
 800c14a:	2800      	cmp	r0, #0
 800c14c:	d1f1      	bne.n	800c132 <ucdr_advance_buffer+0x1e>
 800c14e:	2301      	movs	r3, #1
 800c150:	7563      	strb	r3, [r4, #21]
 800c152:	bd38      	pop	{r3, r4, r5, pc}

0800c154 <rcl_get_zero_initialized_init_options>:
 800c154:	2000      	movs	r0, #0
 800c156:	4770      	bx	lr

0800c158 <rcl_init_options_init>:
 800c158:	b084      	sub	sp, #16
 800c15a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c15c:	b097      	sub	sp, #92	@ 0x5c
 800c15e:	ae1d      	add	r6, sp, #116	@ 0x74
 800c160:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800c164:	2800      	cmp	r0, #0
 800c166:	d058      	beq.n	800c21a <rcl_init_options_init+0xc2>
 800c168:	6803      	ldr	r3, [r0, #0]
 800c16a:	4605      	mov	r5, r0
 800c16c:	b133      	cbz	r3, 800c17c <rcl_init_options_init+0x24>
 800c16e:	2464      	movs	r4, #100	@ 0x64
 800c170:	4620      	mov	r0, r4
 800c172:	b017      	add	sp, #92	@ 0x5c
 800c174:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c178:	b004      	add	sp, #16
 800c17a:	4770      	bx	lr
 800c17c:	4630      	mov	r0, r6
 800c17e:	f001 f99d 	bl	800d4bc <rcutils_allocator_is_valid>
 800c182:	2800      	cmp	r0, #0
 800c184:	d049      	beq.n	800c21a <rcl_init_options_init+0xc2>
 800c186:	46b4      	mov	ip, r6
 800c188:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c18c:	ac11      	add	r4, sp, #68	@ 0x44
 800c18e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c190:	f8dc 3000 	ldr.w	r3, [ip]
 800c194:	6023      	str	r3, [r4, #0]
 800c196:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800c198:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c19a:	2050      	movs	r0, #80	@ 0x50
 800c19c:	4798      	blx	r3
 800c19e:	4604      	mov	r4, r0
 800c1a0:	6028      	str	r0, [r5, #0]
 800c1a2:	2800      	cmp	r0, #0
 800c1a4:	d03b      	beq.n	800c21e <rcl_init_options_init+0xc6>
 800c1a6:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800c1aa:	4686      	mov	lr, r0
 800c1ac:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c1b0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c1b4:	f8dc 3000 	ldr.w	r3, [ip]
 800c1b8:	f8ce 3000 	str.w	r3, [lr]
 800c1bc:	a802      	add	r0, sp, #8
 800c1be:	f001 fa0f 	bl	800d5e0 <rmw_get_zero_initialized_init_options>
 800c1c2:	f10d 0e08 	add.w	lr, sp, #8
 800c1c6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c1ca:	f104 0c18 	add.w	ip, r4, #24
 800c1ce:	682f      	ldr	r7, [r5, #0]
 800c1d0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c1d4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c1d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c1dc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c1e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c1e4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800c1e8:	ac20      	add	r4, sp, #128	@ 0x80
 800c1ea:	e88c 0003 	stmia.w	ip, {r0, r1}
 800c1ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c1f2:	e88d 0003 	stmia.w	sp, {r0, r1}
 800c1f6:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800c1fa:	f107 0018 	add.w	r0, r7, #24
 800c1fe:	f001 fa1d 	bl	800d63c <rmw_init_options_init>
 800c202:	4604      	mov	r4, r0
 800c204:	2800      	cmp	r0, #0
 800c206:	d0b3      	beq.n	800c170 <rcl_init_options_init+0x18>
 800c208:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800c20a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800c20c:	6828      	ldr	r0, [r5, #0]
 800c20e:	4798      	blx	r3
 800c210:	4620      	mov	r0, r4
 800c212:	f007 f92f 	bl	8013474 <rcl_convert_rmw_ret_to_rcl_ret>
 800c216:	4604      	mov	r4, r0
 800c218:	e7aa      	b.n	800c170 <rcl_init_options_init+0x18>
 800c21a:	240b      	movs	r4, #11
 800c21c:	e7a8      	b.n	800c170 <rcl_init_options_init+0x18>
 800c21e:	240a      	movs	r4, #10
 800c220:	e7a6      	b.n	800c170 <rcl_init_options_init+0x18>
 800c222:	bf00      	nop

0800c224 <rcl_init_options_fini>:
 800c224:	b530      	push	{r4, r5, lr}
 800c226:	b087      	sub	sp, #28
 800c228:	b1f0      	cbz	r0, 800c268 <rcl_init_options_fini+0x44>
 800c22a:	6803      	ldr	r3, [r0, #0]
 800c22c:	4604      	mov	r4, r0
 800c22e:	b1db      	cbz	r3, 800c268 <rcl_init_options_fini+0x44>
 800c230:	469c      	mov	ip, r3
 800c232:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c236:	f10d 0e04 	add.w	lr, sp, #4
 800c23a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c23e:	f8dc 3000 	ldr.w	r3, [ip]
 800c242:	f8ce 3000 	str.w	r3, [lr]
 800c246:	a801      	add	r0, sp, #4
 800c248:	f001 f938 	bl	800d4bc <rcutils_allocator_is_valid>
 800c24c:	b160      	cbz	r0, 800c268 <rcl_init_options_fini+0x44>
 800c24e:	6820      	ldr	r0, [r4, #0]
 800c250:	3018      	adds	r0, #24
 800c252:	f001 faa3 	bl	800d79c <rmw_init_options_fini>
 800c256:	4605      	mov	r5, r0
 800c258:	b950      	cbnz	r0, 800c270 <rcl_init_options_fini+0x4c>
 800c25a:	6820      	ldr	r0, [r4, #0]
 800c25c:	9b02      	ldr	r3, [sp, #8]
 800c25e:	9905      	ldr	r1, [sp, #20]
 800c260:	4798      	blx	r3
 800c262:	4628      	mov	r0, r5
 800c264:	b007      	add	sp, #28
 800c266:	bd30      	pop	{r4, r5, pc}
 800c268:	250b      	movs	r5, #11
 800c26a:	4628      	mov	r0, r5
 800c26c:	b007      	add	sp, #28
 800c26e:	bd30      	pop	{r4, r5, pc}
 800c270:	f007 f900 	bl	8013474 <rcl_convert_rmw_ret_to_rcl_ret>
 800c274:	4605      	mov	r5, r0
 800c276:	e7f8      	b.n	800c26a <rcl_init_options_fini+0x46>

0800c278 <rcl_init_options_copy>:
 800c278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c27c:	b094      	sub	sp, #80	@ 0x50
 800c27e:	2800      	cmp	r0, #0
 800c280:	d058      	beq.n	800c334 <rcl_init_options_copy+0xbc>
 800c282:	4604      	mov	r4, r0
 800c284:	6800      	ldr	r0, [r0, #0]
 800c286:	2800      	cmp	r0, #0
 800c288:	d054      	beq.n	800c334 <rcl_init_options_copy+0xbc>
 800c28a:	460e      	mov	r6, r1
 800c28c:	f001 f916 	bl	800d4bc <rcutils_allocator_is_valid>
 800c290:	2800      	cmp	r0, #0
 800c292:	d04f      	beq.n	800c334 <rcl_init_options_copy+0xbc>
 800c294:	2e00      	cmp	r6, #0
 800c296:	d04d      	beq.n	800c334 <rcl_init_options_copy+0xbc>
 800c298:	6833      	ldr	r3, [r6, #0]
 800c29a:	b123      	cbz	r3, 800c2a6 <rcl_init_options_copy+0x2e>
 800c29c:	2464      	movs	r4, #100	@ 0x64
 800c29e:	4620      	mov	r0, r4
 800c2a0:	b014      	add	sp, #80	@ 0x50
 800c2a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2a6:	6827      	ldr	r7, [r4, #0]
 800c2a8:	46bc      	mov	ip, r7
 800c2aa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c2ae:	ad0f      	add	r5, sp, #60	@ 0x3c
 800c2b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c2b2:	f8dc 3000 	ldr.w	r3, [ip]
 800c2b6:	f8d7 8000 	ldr.w	r8, [r7]
 800c2ba:	602b      	str	r3, [r5, #0]
 800c2bc:	4619      	mov	r1, r3
 800c2be:	2050      	movs	r0, #80	@ 0x50
 800c2c0:	47c0      	blx	r8
 800c2c2:	4605      	mov	r5, r0
 800c2c4:	6030      	str	r0, [r6, #0]
 800c2c6:	b3d0      	cbz	r0, 800c33e <rcl_init_options_copy+0xc6>
 800c2c8:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800c2cc:	4686      	mov	lr, r0
 800c2ce:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c2d2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c2d6:	f8dc 3000 	ldr.w	r3, [ip]
 800c2da:	f8ce 3000 	str.w	r3, [lr]
 800c2de:	4668      	mov	r0, sp
 800c2e0:	f001 f97e 	bl	800d5e0 <rmw_get_zero_initialized_init_options>
 800c2e4:	46ee      	mov	lr, sp
 800c2e6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c2ea:	f105 0c18 	add.w	ip, r5, #24
 800c2ee:	6824      	ldr	r4, [r4, #0]
 800c2f0:	6835      	ldr	r5, [r6, #0]
 800c2f2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c2f6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c2fa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c2fe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c302:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c306:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800c30a:	e88c 0003 	stmia.w	ip, {r0, r1}
 800c30e:	f104 0018 	add.w	r0, r4, #24
 800c312:	f105 0118 	add.w	r1, r5, #24
 800c316:	f001 f9f9 	bl	800d70c <rmw_init_options_copy>
 800c31a:	4604      	mov	r4, r0
 800c31c:	2800      	cmp	r0, #0
 800c31e:	d0be      	beq.n	800c29e <rcl_init_options_copy+0x26>
 800c320:	f001 f8da 	bl	800d4d8 <rcutils_get_error_string>
 800c324:	f001 f8f0 	bl	800d508 <rcutils_reset_error>
 800c328:	4630      	mov	r0, r6
 800c32a:	f7ff ff7b 	bl	800c224 <rcl_init_options_fini>
 800c32e:	b140      	cbz	r0, 800c342 <rcl_init_options_copy+0xca>
 800c330:	4604      	mov	r4, r0
 800c332:	e7b4      	b.n	800c29e <rcl_init_options_copy+0x26>
 800c334:	240b      	movs	r4, #11
 800c336:	4620      	mov	r0, r4
 800c338:	b014      	add	sp, #80	@ 0x50
 800c33a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c33e:	240a      	movs	r4, #10
 800c340:	e7ad      	b.n	800c29e <rcl_init_options_copy+0x26>
 800c342:	4620      	mov	r0, r4
 800c344:	b014      	add	sp, #80	@ 0x50
 800c346:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c34a:	f007 b893 	b.w	8013474 <rcl_convert_rmw_ret_to_rcl_ret>
 800c34e:	bf00      	nop

0800c350 <rcl_init_options_set_domain_id>:
 800c350:	b120      	cbz	r0, 800c35c <rcl_init_options_set_domain_id+0xc>
 800c352:	6803      	ldr	r3, [r0, #0]
 800c354:	b113      	cbz	r3, 800c35c <rcl_init_options_set_domain_id+0xc>
 800c356:	6259      	str	r1, [r3, #36]	@ 0x24
 800c358:	2000      	movs	r0, #0
 800c35a:	4770      	bx	lr
 800c35c:	200b      	movs	r0, #11
 800c35e:	4770      	bx	lr

0800c360 <rcl_get_zero_initialized_publisher>:
 800c360:	4b01      	ldr	r3, [pc, #4]	@ (800c368 <rcl_get_zero_initialized_publisher+0x8>)
 800c362:	6818      	ldr	r0, [r3, #0]
 800c364:	4770      	bx	lr
 800c366:	bf00      	nop
 800c368:	0801b0d0 	.word	0x0801b0d0

0800c36c <rcl_publisher_init>:
 800c36c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c370:	b088      	sub	sp, #32
 800c372:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800c374:	2d00      	cmp	r5, #0
 800c376:	d069      	beq.n	800c44c <rcl_publisher_init+0xe0>
 800c378:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800c37c:	4604      	mov	r4, r0
 800c37e:	4648      	mov	r0, r9
 800c380:	460e      	mov	r6, r1
 800c382:	4690      	mov	r8, r2
 800c384:	461f      	mov	r7, r3
 800c386:	f001 f899 	bl	800d4bc <rcutils_allocator_is_valid>
 800c38a:	2800      	cmp	r0, #0
 800c38c:	d05e      	beq.n	800c44c <rcl_publisher_init+0xe0>
 800c38e:	2c00      	cmp	r4, #0
 800c390:	d05c      	beq.n	800c44c <rcl_publisher_init+0xe0>
 800c392:	f8d4 a000 	ldr.w	sl, [r4]
 800c396:	f1ba 0f00 	cmp.w	sl, #0
 800c39a:	d004      	beq.n	800c3a6 <rcl_publisher_init+0x3a>
 800c39c:	2764      	movs	r7, #100	@ 0x64
 800c39e:	4638      	mov	r0, r7
 800c3a0:	b008      	add	sp, #32
 800c3a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3a6:	4630      	mov	r0, r6
 800c3a8:	f007 fb5e 	bl	8013a68 <rcl_node_is_valid>
 800c3ac:	2800      	cmp	r0, #0
 800c3ae:	d052      	beq.n	800c456 <rcl_publisher_init+0xea>
 800c3b0:	f1b8 0f00 	cmp.w	r8, #0
 800c3b4:	d04a      	beq.n	800c44c <rcl_publisher_init+0xe0>
 800c3b6:	2f00      	cmp	r7, #0
 800c3b8:	d048      	beq.n	800c44c <rcl_publisher_init+0xe0>
 800c3ba:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800c3be:	aa07      	add	r2, sp, #28
 800c3c0:	9205      	str	r2, [sp, #20]
 800c3c2:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800c3c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c3ca:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800c3ce:	f8cd a01c 	str.w	sl, [sp, #28]
 800c3d2:	4639      	mov	r1, r7
 800c3d4:	e899 000c 	ldmia.w	r9, {r2, r3}
 800c3d8:	4630      	mov	r0, r6
 800c3da:	f007 fb99 	bl	8013b10 <rcl_node_resolve_name>
 800c3de:	4607      	mov	r7, r0
 800c3e0:	2800      	cmp	r0, #0
 800c3e2:	d14f      	bne.n	800c484 <rcl_publisher_init+0x118>
 800c3e4:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800c3e6:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800c3e8:	20c8      	movs	r0, #200	@ 0xc8
 800c3ea:	4798      	blx	r3
 800c3ec:	6020      	str	r0, [r4, #0]
 800c3ee:	2800      	cmp	r0, #0
 800c3f0:	d04e      	beq.n	800c490 <rcl_publisher_init+0x124>
 800c3f2:	4630      	mov	r0, r6
 800c3f4:	f007 fb5a 	bl	8013aac <rcl_node_get_rmw_handle>
 800c3f8:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800c3fc:	9300      	str	r3, [sp, #0]
 800c3fe:	9a07      	ldr	r2, [sp, #28]
 800c400:	6827      	ldr	r7, [r4, #0]
 800c402:	462b      	mov	r3, r5
 800c404:	4641      	mov	r1, r8
 800c406:	f001 fcf1 	bl	800ddec <rmw_create_publisher>
 800c40a:	6823      	ldr	r3, [r4, #0]
 800c40c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800c410:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800c414:	b370      	cbz	r0, 800c474 <rcl_publisher_init+0x108>
 800c416:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800c41a:	f001 fdc5 	bl	800dfa8 <rmw_publisher_get_actual_qos>
 800c41e:	6823      	ldr	r3, [r4, #0]
 800c420:	4607      	mov	r7, r0
 800c422:	b9d0      	cbnz	r0, 800c45a <rcl_publisher_init+0xee>
 800c424:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800c428:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800c42c:	4629      	mov	r1, r5
 800c42e:	2270      	movs	r2, #112	@ 0x70
 800c430:	4618      	mov	r0, r3
 800c432:	f00d f836 	bl	80194a2 <memcpy>
 800c436:	6832      	ldr	r2, [r6, #0]
 800c438:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800c43c:	9807      	ldr	r0, [sp, #28]
 800c43e:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800c440:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800c442:	4798      	blx	r3
 800c444:	4638      	mov	r0, r7
 800c446:	b008      	add	sp, #32
 800c448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c44c:	270b      	movs	r7, #11
 800c44e:	4638      	mov	r0, r7
 800c450:	b008      	add	sp, #32
 800c452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c456:	27c8      	movs	r7, #200	@ 0xc8
 800c458:	e7a1      	b.n	800c39e <rcl_publisher_init+0x32>
 800c45a:	b18b      	cbz	r3, 800c480 <rcl_publisher_init+0x114>
 800c45c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800c460:	b142      	cbz	r2, 800c474 <rcl_publisher_init+0x108>
 800c462:	4630      	mov	r0, r6
 800c464:	f007 fb22 	bl	8013aac <rcl_node_get_rmw_handle>
 800c468:	6823      	ldr	r3, [r4, #0]
 800c46a:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800c46e:	f001 fdab 	bl	800dfc8 <rmw_destroy_publisher>
 800c472:	6823      	ldr	r3, [r4, #0]
 800c474:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800c476:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800c478:	4618      	mov	r0, r3
 800c47a:	4790      	blx	r2
 800c47c:	2300      	movs	r3, #0
 800c47e:	6023      	str	r3, [r4, #0]
 800c480:	2701      	movs	r7, #1
 800c482:	e7db      	b.n	800c43c <rcl_publisher_init+0xd0>
 800c484:	2867      	cmp	r0, #103	@ 0x67
 800c486:	d0d9      	beq.n	800c43c <rcl_publisher_init+0xd0>
 800c488:	2869      	cmp	r0, #105	@ 0x69
 800c48a:	d003      	beq.n	800c494 <rcl_publisher_init+0x128>
 800c48c:	280a      	cmp	r0, #10
 800c48e:	d1f7      	bne.n	800c480 <rcl_publisher_init+0x114>
 800c490:	270a      	movs	r7, #10
 800c492:	e7d3      	b.n	800c43c <rcl_publisher_init+0xd0>
 800c494:	2767      	movs	r7, #103	@ 0x67
 800c496:	e7d1      	b.n	800c43c <rcl_publisher_init+0xd0>

0800c498 <rcl_publisher_get_default_options>:
 800c498:	b570      	push	{r4, r5, r6, lr}
 800c49a:	4d14      	ldr	r5, [pc, #80]	@ (800c4ec <rcl_publisher_get_default_options+0x54>)
 800c49c:	4914      	ldr	r1, [pc, #80]	@ (800c4f0 <rcl_publisher_get_default_options+0x58>)
 800c49e:	b088      	sub	sp, #32
 800c4a0:	4604      	mov	r4, r0
 800c4a2:	2250      	movs	r2, #80	@ 0x50
 800c4a4:	4628      	mov	r0, r5
 800c4a6:	f00c fffc 	bl	80194a2 <memcpy>
 800c4aa:	a802      	add	r0, sp, #8
 800c4ac:	f000 fff8 	bl	800d4a0 <rcutils_get_default_allocator>
 800c4b0:	f10d 0c08 	add.w	ip, sp, #8
 800c4b4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c4b8:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800c4bc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c4c0:	466e      	mov	r6, sp
 800c4c2:	f8dc 3000 	ldr.w	r3, [ip]
 800c4c6:	f8ce 3000 	str.w	r3, [lr]
 800c4ca:	4630      	mov	r0, r6
 800c4cc:	f001 f898 	bl	800d600 <rmw_get_default_publisher_options>
 800c4d0:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c4d4:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800c4d8:	e883 0003 	stmia.w	r3, {r0, r1}
 800c4dc:	2270      	movs	r2, #112	@ 0x70
 800c4de:	4629      	mov	r1, r5
 800c4e0:	4620      	mov	r0, r4
 800c4e2:	f00c ffde 	bl	80194a2 <memcpy>
 800c4e6:	4620      	mov	r0, r4
 800c4e8:	b008      	add	sp, #32
 800c4ea:	bd70      	pop	{r4, r5, r6, pc}
 800c4ec:	20006c88 	.word	0x20006c88
 800c4f0:	0801b0d8 	.word	0x0801b0d8

0800c4f4 <rcl_publish>:
 800c4f4:	b1f8      	cbz	r0, 800c536 <rcl_publish+0x42>
 800c4f6:	6803      	ldr	r3, [r0, #0]
 800c4f8:	b570      	push	{r4, r5, r6, lr}
 800c4fa:	4604      	mov	r4, r0
 800c4fc:	b1b3      	cbz	r3, 800c52c <rcl_publish+0x38>
 800c4fe:	4616      	mov	r6, r2
 800c500:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800c504:	b192      	cbz	r2, 800c52c <rcl_publish+0x38>
 800c506:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800c50a:	460d      	mov	r5, r1
 800c50c:	f006 ffd0 	bl	80134b0 <rcl_context_is_valid>
 800c510:	b160      	cbz	r0, 800c52c <rcl_publish+0x38>
 800c512:	6823      	ldr	r3, [r4, #0]
 800c514:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800c518:	b140      	cbz	r0, 800c52c <rcl_publish+0x38>
 800c51a:	b155      	cbz	r5, 800c532 <rcl_publish+0x3e>
 800c51c:	4632      	mov	r2, r6
 800c51e:	4629      	mov	r1, r5
 800c520:	f001 fc04 	bl	800dd2c <rmw_publish>
 800c524:	3800      	subs	r0, #0
 800c526:	bf18      	it	ne
 800c528:	2001      	movne	r0, #1
 800c52a:	bd70      	pop	{r4, r5, r6, pc}
 800c52c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800c530:	bd70      	pop	{r4, r5, r6, pc}
 800c532:	200b      	movs	r0, #11
 800c534:	bd70      	pop	{r4, r5, r6, pc}
 800c536:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800c53a:	4770      	bx	lr

0800c53c <rcl_publisher_is_valid>:
 800c53c:	b1a0      	cbz	r0, 800c568 <rcl_publisher_is_valid+0x2c>
 800c53e:	6803      	ldr	r3, [r0, #0]
 800c540:	b510      	push	{r4, lr}
 800c542:	4604      	mov	r4, r0
 800c544:	b173      	cbz	r3, 800c564 <rcl_publisher_is_valid+0x28>
 800c546:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800c54a:	b15a      	cbz	r2, 800c564 <rcl_publisher_is_valid+0x28>
 800c54c:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800c550:	f006 ffae 	bl	80134b0 <rcl_context_is_valid>
 800c554:	b130      	cbz	r0, 800c564 <rcl_publisher_is_valid+0x28>
 800c556:	6823      	ldr	r3, [r4, #0]
 800c558:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800c55c:	3800      	subs	r0, #0
 800c55e:	bf18      	it	ne
 800c560:	2001      	movne	r0, #1
 800c562:	bd10      	pop	{r4, pc}
 800c564:	2000      	movs	r0, #0
 800c566:	bd10      	pop	{r4, pc}
 800c568:	2000      	movs	r0, #0
 800c56a:	4770      	bx	lr

0800c56c <rcl_publisher_is_valid_except_context>:
 800c56c:	b130      	cbz	r0, 800c57c <rcl_publisher_is_valid_except_context+0x10>
 800c56e:	6800      	ldr	r0, [r0, #0]
 800c570:	b120      	cbz	r0, 800c57c <rcl_publisher_is_valid_except_context+0x10>
 800c572:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800c576:	3800      	subs	r0, #0
 800c578:	bf18      	it	ne
 800c57a:	2001      	movne	r0, #1
 800c57c:	4770      	bx	lr
 800c57e:	bf00      	nop

0800c580 <_rclc_check_for_new_data>:
 800c580:	2800      	cmp	r0, #0
 800c582:	d046      	beq.n	800c612 <_rclc_check_for_new_data+0x92>
 800c584:	b510      	push	{r4, lr}
 800c586:	7802      	ldrb	r2, [r0, #0]
 800c588:	b084      	sub	sp, #16
 800c58a:	4603      	mov	r3, r0
 800c58c:	2a0a      	cmp	r2, #10
 800c58e:	d842      	bhi.n	800c616 <_rclc_check_for_new_data+0x96>
 800c590:	e8df f002 	tbb	[pc, r2]
 800c594:	14181212 	.word	0x14181212
 800c598:	06060614 	.word	0x06060614
 800c59c:	2e1a      	.short	0x2e1a
 800c59e:	16          	.byte	0x16
 800c59f:	00          	.byte	0x00
 800c5a0:	6a0a      	ldr	r2, [r1, #32]
 800c5a2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800c5a4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800c5a8:	2000      	movs	r0, #0
 800c5aa:	1a12      	subs	r2, r2, r0
 800c5ac:	bf18      	it	ne
 800c5ae:	2201      	movne	r2, #1
 800c5b0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800c5b4:	b004      	add	sp, #16
 800c5b6:	bd10      	pop	{r4, pc}
 800c5b8:	680a      	ldr	r2, [r1, #0]
 800c5ba:	e7f2      	b.n	800c5a2 <_rclc_check_for_new_data+0x22>
 800c5bc:	698a      	ldr	r2, [r1, #24]
 800c5be:	e7f0      	b.n	800c5a2 <_rclc_check_for_new_data+0x22>
 800c5c0:	688a      	ldr	r2, [r1, #8]
 800c5c2:	e7ee      	b.n	800c5a2 <_rclc_check_for_new_data+0x22>
 800c5c4:	690a      	ldr	r2, [r1, #16]
 800c5c6:	e7ec      	b.n	800c5a2 <_rclc_check_for_new_data+0x22>
 800c5c8:	685c      	ldr	r4, [r3, #4]
 800c5ca:	4608      	mov	r0, r1
 800c5cc:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800c5d0:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800c5d4:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800c5d8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800c5dc:	9300      	str	r3, [sp, #0]
 800c5de:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800c5e2:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800c5e6:	f104 0110 	add.w	r1, r4, #16
 800c5ea:	f009 f941 	bl	8015870 <rcl_action_client_wait_set_get_entities_ready>
 800c5ee:	e7e1      	b.n	800c5b4 <_rclc_check_for_new_data+0x34>
 800c5f0:	685c      	ldr	r4, [r3, #4]
 800c5f2:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800c5f6:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800c5fa:	e9cd 3200 	strd	r3, r2, [sp]
 800c5fe:	4608      	mov	r0, r1
 800c600:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800c604:	f104 0220 	add.w	r2, r4, #32
 800c608:	f104 0110 	add.w	r1, r4, #16
 800c60c:	f009 fb48 	bl	8015ca0 <rcl_action_server_wait_set_get_entities_ready>
 800c610:	e7d0      	b.n	800c5b4 <_rclc_check_for_new_data+0x34>
 800c612:	200b      	movs	r0, #11
 800c614:	4770      	bx	lr
 800c616:	2001      	movs	r0, #1
 800c618:	e7cc      	b.n	800c5b4 <_rclc_check_for_new_data+0x34>
 800c61a:	bf00      	nop

0800c61c <_rclc_take_new_data>:
 800c61c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c61e:	b09b      	sub	sp, #108	@ 0x6c
 800c620:	2800      	cmp	r0, #0
 800c622:	f000 8088 	beq.w	800c736 <_rclc_take_new_data+0x11a>
 800c626:	7803      	ldrb	r3, [r0, #0]
 800c628:	4604      	mov	r4, r0
 800c62a:	2b0a      	cmp	r3, #10
 800c62c:	f200 8167 	bhi.w	800c8fe <_rclc_take_new_data+0x2e2>
 800c630:	e8df f003 	tbb	[pc, r3]
 800c634:	44152d2d 	.word	0x44152d2d
 800c638:	19191944 	.word	0x19191944
 800c63c:	065a      	.short	0x065a
 800c63e:	15          	.byte	0x15
 800c63f:	00          	.byte	0x00
 800c640:	6840      	ldr	r0, [r0, #4]
 800c642:	f890 3020 	ldrb.w	r3, [r0, #32]
 800c646:	2b00      	cmp	r3, #0
 800c648:	f040 80b2 	bne.w	800c7b0 <_rclc_take_new_data+0x194>
 800c64c:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800c650:	2b00      	cmp	r3, #0
 800c652:	f040 80e4 	bne.w	800c81e <_rclc_take_new_data+0x202>
 800c656:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d16f      	bne.n	800c73e <_rclc_take_new_data+0x122>
 800c65e:	2500      	movs	r5, #0
 800c660:	4628      	mov	r0, r5
 800c662:	b01b      	add	sp, #108	@ 0x6c
 800c664:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c666:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c668:	6a0b      	ldr	r3, [r1, #32]
 800c66a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d0f5      	beq.n	800c65e <_rclc_take_new_data+0x42>
 800c672:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800c676:	f104 0110 	add.w	r1, r4, #16
 800c67a:	f007 fca5 	bl	8013fc8 <rcl_take_request>
 800c67e:	4605      	mov	r5, r0
 800c680:	2800      	cmp	r0, #0
 800c682:	d0ec      	beq.n	800c65e <_rclc_take_new_data+0x42>
 800c684:	f240 2359 	movw	r3, #601	@ 0x259
 800c688:	4298      	cmp	r0, r3
 800c68a:	d013      	beq.n	800c6b4 <_rclc_take_new_data+0x98>
 800c68c:	e029      	b.n	800c6e2 <_rclc_take_new_data+0xc6>
 800c68e:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c690:	680b      	ldr	r3, [r1, #0]
 800c692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d0e1      	beq.n	800c65e <_rclc_take_new_data+0x42>
 800c69a:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800c69e:	2300      	movs	r3, #0
 800c6a0:	aa0a      	add	r2, sp, #40	@ 0x28
 800c6a2:	f007 fcf3 	bl	801408c <rcl_take>
 800c6a6:	4605      	mov	r5, r0
 800c6a8:	2800      	cmp	r0, #0
 800c6aa:	d0d9      	beq.n	800c660 <_rclc_take_new_data+0x44>
 800c6ac:	f240 1391 	movw	r3, #401	@ 0x191
 800c6b0:	4298      	cmp	r0, r3
 800c6b2:	d116      	bne.n	800c6e2 <_rclc_take_new_data+0xc6>
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800c6ba:	e7d1      	b.n	800c660 <_rclc_take_new_data+0x44>
 800c6bc:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c6be:	698b      	ldr	r3, [r1, #24]
 800c6c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d0ca      	beq.n	800c65e <_rclc_take_new_data+0x42>
 800c6c8:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800c6cc:	f104 0110 	add.w	r1, r4, #16
 800c6d0:	f006 fe7e 	bl	80133d0 <rcl_take_response>
 800c6d4:	4605      	mov	r5, r0
 800c6d6:	2800      	cmp	r0, #0
 800c6d8:	d0c1      	beq.n	800c65e <_rclc_take_new_data+0x42>
 800c6da:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800c6de:	4298      	cmp	r0, r3
 800c6e0:	d0be      	beq.n	800c660 <_rclc_take_new_data+0x44>
 800c6e2:	f000 ff11 	bl	800d508 <rcutils_reset_error>
 800c6e6:	e7bb      	b.n	800c660 <_rclc_take_new_data+0x44>
 800c6e8:	6840      	ldr	r0, [r0, #4]
 800c6ea:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d17d      	bne.n	800c7ee <_rclc_take_new_data+0x1d2>
 800c6f2:	69c3      	ldr	r3, [r0, #28]
 800c6f4:	b11b      	cbz	r3, 800c6fe <_rclc_take_new_data+0xe2>
 800c6f6:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d144      	bne.n	800c788 <_rclc_take_new_data+0x16c>
 800c6fe:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800c702:	2b00      	cmp	r3, #0
 800c704:	f040 80ac 	bne.w	800c860 <_rclc_take_new_data+0x244>
 800c708:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d0a6      	beq.n	800c65e <_rclc_take_new_data+0x42>
 800c710:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800c712:	a90a      	add	r1, sp, #40	@ 0x28
 800c714:	3010      	adds	r0, #16
 800c716:	f008 ff83 	bl	8015620 <rcl_action_take_result_response>
 800c71a:	4605      	mov	r5, r0
 800c71c:	2800      	cmp	r0, #0
 800c71e:	d1e0      	bne.n	800c6e2 <_rclc_take_new_data+0xc6>
 800c720:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c724:	6860      	ldr	r0, [r4, #4]
 800c726:	f009 fbdf 	bl	8015ee8 <rclc_action_find_handle_by_result_request_sequence_number>
 800c72a:	2800      	cmp	r0, #0
 800c72c:	d098      	beq.n	800c660 <_rclc_take_new_data+0x44>
 800c72e:	2301      	movs	r3, #1
 800c730:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800c734:	e794      	b.n	800c660 <_rclc_take_new_data+0x44>
 800c736:	250b      	movs	r5, #11
 800c738:	4628      	mov	r0, r5
 800c73a:	b01b      	add	sp, #108	@ 0x6c
 800c73c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c73e:	ae04      	add	r6, sp, #16
 800c740:	aa0a      	add	r2, sp, #40	@ 0x28
 800c742:	3010      	adds	r0, #16
 800c744:	4631      	mov	r1, r6
 800c746:	f009 f9df 	bl	8015b08 <rcl_action_take_cancel_request>
 800c74a:	4605      	mov	r5, r0
 800c74c:	2800      	cmp	r0, #0
 800c74e:	d1c8      	bne.n	800c6e2 <_rclc_take_new_data+0xc6>
 800c750:	6860      	ldr	r0, [r4, #4]
 800c752:	a90a      	add	r1, sp, #40	@ 0x28
 800c754:	f009 fb86 	bl	8015e64 <rclc_action_find_goal_handle_by_uuid>
 800c758:	4607      	mov	r7, r0
 800c75a:	2800      	cmp	r0, #0
 800c75c:	f000 80bb 	beq.w	800c8d6 <_rclc_take_new_data+0x2ba>
 800c760:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800c764:	2101      	movs	r1, #1
 800c766:	f009 fb07 	bl	8015d78 <rcl_action_transition_goal_state>
 800c76a:	2803      	cmp	r0, #3
 800c76c:	4684      	mov	ip, r0
 800c76e:	f040 80a7 	bne.w	800c8c0 <_rclc_take_new_data+0x2a4>
 800c772:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c774:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800c778:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c77a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c77e:	e884 0003 	stmia.w	r4, {r0, r1}
 800c782:	f887 c008 	strb.w	ip, [r7, #8]
 800c786:	e76b      	b.n	800c660 <_rclc_take_new_data+0x44>
 800c788:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c78a:	3010      	adds	r0, #16
 800c78c:	f008 ffc8 	bl	8015720 <rcl_action_take_feedback>
 800c790:	4605      	mov	r5, r0
 800c792:	2800      	cmp	r0, #0
 800c794:	d1a5      	bne.n	800c6e2 <_rclc_take_new_data+0xc6>
 800c796:	6860      	ldr	r0, [r4, #4]
 800c798:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c79a:	f009 fb63 	bl	8015e64 <rclc_action_find_goal_handle_by_uuid>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	2800      	cmp	r0, #0
 800c7a2:	f000 80a3 	beq.w	800c8ec <_rclc_take_new_data+0x2d0>
 800c7a6:	2201      	movs	r2, #1
 800c7a8:	6860      	ldr	r0, [r4, #4]
 800c7aa:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800c7ae:	e7a6      	b.n	800c6fe <_rclc_take_new_data+0xe2>
 800c7b0:	f009 fb32 	bl	8015e18 <rclc_action_take_goal_handle>
 800c7b4:	4606      	mov	r6, r0
 800c7b6:	6860      	ldr	r0, [r4, #4]
 800c7b8:	2e00      	cmp	r6, #0
 800c7ba:	f43f af47 	beq.w	800c64c <_rclc_take_new_data+0x30>
 800c7be:	6070      	str	r0, [r6, #4]
 800c7c0:	69f2      	ldr	r2, [r6, #28]
 800c7c2:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800c7c6:	3010      	adds	r0, #16
 800c7c8:	f009 f8e6 	bl	8015998 <rcl_action_take_goal_request>
 800c7cc:	4605      	mov	r5, r0
 800c7ce:	2800      	cmp	r0, #0
 800c7d0:	f040 808e 	bne.w	800c8f0 <_rclc_take_new_data+0x2d4>
 800c7d4:	69f7      	ldr	r7, [r6, #28]
 800c7d6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c7d8:	7235      	strb	r5, [r6, #8]
 800c7da:	f8c6 0009 	str.w	r0, [r6, #9]
 800c7de:	f8c6 100d 	str.w	r1, [r6, #13]
 800c7e2:	6860      	ldr	r0, [r4, #4]
 800c7e4:	f8c6 2011 	str.w	r2, [r6, #17]
 800c7e8:	f8c6 3015 	str.w	r3, [r6, #21]
 800c7ec:	e72e      	b.n	800c64c <_rclc_take_new_data+0x30>
 800c7ee:	aa04      	add	r2, sp, #16
 800c7f0:	a90a      	add	r1, sp, #40	@ 0x28
 800c7f2:	3010      	adds	r0, #16
 800c7f4:	f008 fe9c 	bl	8015530 <rcl_action_take_goal_response>
 800c7f8:	4605      	mov	r5, r0
 800c7fa:	2800      	cmp	r0, #0
 800c7fc:	f47f af71 	bne.w	800c6e2 <_rclc_take_new_data+0xc6>
 800c800:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c804:	6860      	ldr	r0, [r4, #4]
 800c806:	f009 fb5d 	bl	8015ec4 <rclc_action_find_handle_by_goal_request_sequence_number>
 800c80a:	b130      	cbz	r0, 800c81a <_rclc_take_new_data+0x1fe>
 800c80c:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800c810:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800c814:	2201      	movs	r2, #1
 800c816:	f880 2020 	strb.w	r2, [r0, #32]
 800c81a:	6860      	ldr	r0, [r4, #4]
 800c81c:	e769      	b.n	800c6f2 <_rclc_take_new_data+0xd6>
 800c81e:	aa04      	add	r2, sp, #16
 800c820:	3010      	adds	r0, #16
 800c822:	a90a      	add	r1, sp, #40	@ 0x28
 800c824:	f009 f930 	bl	8015a88 <rcl_action_take_result_request>
 800c828:	4605      	mov	r5, r0
 800c82a:	2800      	cmp	r0, #0
 800c82c:	f47f af59 	bne.w	800c6e2 <_rclc_take_new_data+0xc6>
 800c830:	6860      	ldr	r0, [r4, #4]
 800c832:	a904      	add	r1, sp, #16
 800c834:	f009 fb16 	bl	8015e64 <rclc_action_find_goal_handle_by_uuid>
 800c838:	4607      	mov	r7, r0
 800c83a:	b160      	cbz	r0, 800c856 <_rclc_take_new_data+0x23a>
 800c83c:	ad0a      	add	r5, sp, #40	@ 0x28
 800c83e:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800c842:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c844:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c846:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c84a:	f04f 0c02 	mov.w	ip, #2
 800c84e:	e886 0003 	stmia.w	r6, {r0, r1}
 800c852:	f887 c008 	strb.w	ip, [r7, #8]
 800c856:	6860      	ldr	r0, [r4, #4]
 800c858:	2300      	movs	r3, #0
 800c85a:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800c85e:	e6fa      	b.n	800c656 <_rclc_take_new_data+0x3a>
 800c860:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800c864:	a90a      	add	r1, sp, #40	@ 0x28
 800c866:	3010      	adds	r0, #16
 800c868:	f008 ff1a 	bl	80156a0 <rcl_action_take_cancel_response>
 800c86c:	4605      	mov	r5, r0
 800c86e:	2800      	cmp	r0, #0
 800c870:	f47f af37 	bne.w	800c6e2 <_rclc_take_new_data+0xc6>
 800c874:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c878:	6860      	ldr	r0, [r4, #4]
 800c87a:	f009 fb47 	bl	8015f0c <rclc_action_find_handle_by_cancel_request_sequence_number>
 800c87e:	4606      	mov	r6, r0
 800c880:	6860      	ldr	r0, [r4, #4]
 800c882:	2e00      	cmp	r6, #0
 800c884:	f43f af40 	beq.w	800c708 <_rclc_take_new_data+0xec>
 800c888:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c88a:	2701      	movs	r7, #1
 800c88c:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800c88e:	2b00      	cmp	r3, #0
 800c890:	f43f af3a 	beq.w	800c708 <_rclc_take_new_data+0xec>
 800c894:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800c896:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800c89a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800c89e:	f009 fae1 	bl	8015e64 <rclc_action_find_goal_handle_by_uuid>
 800c8a2:	b138      	cbz	r0, 800c8b4 <_rclc_take_new_data+0x298>
 800c8a4:	6860      	ldr	r0, [r4, #4]
 800c8a6:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c8a8:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800c8ac:	3501      	adds	r5, #1
 800c8ae:	42ab      	cmp	r3, r5
 800c8b0:	d8f0      	bhi.n	800c894 <_rclc_take_new_data+0x278>
 800c8b2:	e729      	b.n	800c708 <_rclc_take_new_data+0xec>
 800c8b4:	6860      	ldr	r0, [r4, #4]
 800c8b6:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c8b8:	3501      	adds	r5, #1
 800c8ba:	42ab      	cmp	r3, r5
 800c8bc:	d8ea      	bhi.n	800c894 <_rclc_take_new_data+0x278>
 800c8be:	e723      	b.n	800c708 <_rclc_take_new_data+0xec>
 800c8c0:	ab06      	add	r3, sp, #24
 800c8c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c8c4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c8c8:	2103      	movs	r1, #3
 800c8ca:	e896 000c 	ldmia.w	r6, {r2, r3}
 800c8ce:	6860      	ldr	r0, [r4, #4]
 800c8d0:	f009 fb92 	bl	8015ff8 <rclc_action_server_goal_cancel_reject>
 800c8d4:	e6c4      	b.n	800c660 <_rclc_take_new_data+0x44>
 800c8d6:	ab06      	add	r3, sp, #24
 800c8d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c8da:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c8de:	2102      	movs	r1, #2
 800c8e0:	e896 000c 	ldmia.w	r6, {r2, r3}
 800c8e4:	6860      	ldr	r0, [r4, #4]
 800c8e6:	f009 fb87 	bl	8015ff8 <rclc_action_server_goal_cancel_reject>
 800c8ea:	e6b9      	b.n	800c660 <_rclc_take_new_data+0x44>
 800c8ec:	6860      	ldr	r0, [r4, #4]
 800c8ee:	e706      	b.n	800c6fe <_rclc_take_new_data+0xe2>
 800c8f0:	6860      	ldr	r0, [r4, #4]
 800c8f2:	4631      	mov	r1, r6
 800c8f4:	f009 faa0 	bl	8015e38 <rclc_action_remove_used_goal_handle>
 800c8f8:	f000 fe06 	bl	800d508 <rcutils_reset_error>
 800c8fc:	e6b0      	b.n	800c660 <_rclc_take_new_data+0x44>
 800c8fe:	2501      	movs	r5, #1
 800c900:	e6ae      	b.n	800c660 <_rclc_take_new_data+0x44>
 800c902:	bf00      	nop

0800c904 <_rclc_execute.part.0>:
 800c904:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c906:	7803      	ldrb	r3, [r0, #0]
 800c908:	b087      	sub	sp, #28
 800c90a:	4604      	mov	r4, r0
 800c90c:	2b0a      	cmp	r3, #10
 800c90e:	f200 8136 	bhi.w	800cb7e <_rclc_execute.part.0+0x27a>
 800c912:	e8df f003 	tbb	[pc, r3]
 800c916:	435e      	.short	0x435e
 800c918:	06a1664f 	.word	0x06a1664f
 800c91c:	6c1e0606 	.word	0x6c1e0606
 800c920:	59          	.byte	0x59
 800c921:	00          	.byte	0x00
 800c922:	2b06      	cmp	r3, #6
 800c924:	f000 8122 	beq.w	800cb6c <_rclc_execute.part.0+0x268>
 800c928:	2b07      	cmp	r3, #7
 800c92a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c92c:	f040 8118 	bne.w	800cb60 <_rclc_execute.part.0+0x25c>
 800c930:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800c934:	6880      	ldr	r0, [r0, #8]
 800c936:	4798      	blx	r3
 800c938:	f104 0110 	add.w	r1, r4, #16
 800c93c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800c93e:	6860      	ldr	r0, [r4, #4]
 800c940:	f007 fb82 	bl	8014048 <rcl_send_response>
 800c944:	2800      	cmp	r0, #0
 800c946:	d033      	beq.n	800c9b0 <_rclc_execute.part.0+0xac>
 800c948:	9005      	str	r0, [sp, #20]
 800c94a:	f000 fddd 	bl	800d508 <rcutils_reset_error>
 800c94e:	9805      	ldr	r0, [sp, #20]
 800c950:	e02e      	b.n	800c9b0 <_rclc_execute.part.0+0xac>
 800c952:	6840      	ldr	r0, [r0, #4]
 800c954:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800c958:	2b00      	cmp	r3, #0
 800c95a:	f000 8086 	beq.w	800ca6a <_rclc_execute.part.0+0x166>
 800c95e:	2600      	movs	r6, #0
 800c960:	2701      	movs	r7, #1
 800c962:	e004      	b.n	800c96e <_rclc_execute.part.0+0x6a>
 800c964:	f009 fa32 	bl	8015dcc <rclc_action_send_result_request>
 800c968:	b998      	cbnz	r0, 800c992 <_rclc_execute.part.0+0x8e>
 800c96a:	722f      	strb	r7, [r5, #8]
 800c96c:	6860      	ldr	r0, [r4, #4]
 800c96e:	f009 fadf 	bl	8015f30 <rclc_action_find_first_handle_with_goal_response>
 800c972:	4605      	mov	r5, r0
 800c974:	2800      	cmp	r0, #0
 800c976:	d077      	beq.n	800ca68 <_rclc_execute.part.0+0x164>
 800c978:	6863      	ldr	r3, [r4, #4]
 800c97a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c97c:	699b      	ldr	r3, [r3, #24]
 800c97e:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800c982:	f885 6020 	strb.w	r6, [r5, #32]
 800c986:	4798      	blx	r3
 800c988:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800c98c:	4628      	mov	r0, r5
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d1e8      	bne.n	800c964 <_rclc_execute.part.0+0x60>
 800c992:	6860      	ldr	r0, [r4, #4]
 800c994:	4629      	mov	r1, r5
 800c996:	f009 fa4f 	bl	8015e38 <rclc_action_remove_used_goal_handle>
 800c99a:	e7e7      	b.n	800c96c <_rclc_execute.part.0+0x68>
 800c99c:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800c9a0:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800c9a4:	2d00      	cmp	r5, #0
 800c9a6:	f000 80c9 	beq.w	800cb3c <_rclc_execute.part.0+0x238>
 800c9aa:	6880      	ldr	r0, [r0, #8]
 800c9ac:	4798      	blx	r3
 800c9ae:	2000      	movs	r0, #0
 800c9b0:	b007      	add	sp, #28
 800c9b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9b4:	6840      	ldr	r0, [r0, #4]
 800c9b6:	f007 fe79 	bl	80146ac <rcl_timer_call>
 800c9ba:	f240 3321 	movw	r3, #801	@ 0x321
 800c9be:	4298      	cmp	r0, r3
 800c9c0:	d004      	beq.n	800c9cc <_rclc_execute.part.0+0xc8>
 800c9c2:	2800      	cmp	r0, #0
 800c9c4:	d0f4      	beq.n	800c9b0 <_rclc_execute.part.0+0xac>
 800c9c6:	e7bf      	b.n	800c948 <_rclc_execute.part.0+0x44>
 800c9c8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c9ca:	4798      	blx	r3
 800c9cc:	2000      	movs	r0, #0
 800c9ce:	b007      	add	sp, #28
 800c9d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9d2:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800c9d6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c9d8:	b925      	cbnz	r5, 800c9e4 <_rclc_execute.part.0+0xe0>
 800c9da:	4628      	mov	r0, r5
 800c9dc:	4798      	blx	r3
 800c9de:	4628      	mov	r0, r5
 800c9e0:	e7e6      	b.n	800c9b0 <_rclc_execute.part.0+0xac>
 800c9e2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c9e4:	68a0      	ldr	r0, [r4, #8]
 800c9e6:	4798      	blx	r3
 800c9e8:	2000      	movs	r0, #0
 800c9ea:	b007      	add	sp, #28
 800c9ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9ee:	6840      	ldr	r0, [r0, #4]
 800c9f0:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800c9f4:	bb3b      	cbnz	r3, 800ca46 <_rclc_execute.part.0+0x142>
 800c9f6:	f890 3020 	ldrb.w	r3, [r0, #32]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d07b      	beq.n	800caf6 <_rclc_execute.part.0+0x1f2>
 800c9fe:	f640 0634 	movw	r6, #2100	@ 0x834
 800ca02:	2701      	movs	r7, #1
 800ca04:	e007      	b.n	800ca16 <_rclc_execute.part.0+0x112>
 800ca06:	4628      	mov	r0, r5
 800ca08:	f009 faaa 	bl	8015f60 <rclc_action_server_response_goal_request>
 800ca0c:	6860      	ldr	r0, [r4, #4]
 800ca0e:	4629      	mov	r1, r5
 800ca10:	f009 fa12 	bl	8015e38 <rclc_action_remove_used_goal_handle>
 800ca14:	6860      	ldr	r0, [r4, #4]
 800ca16:	2100      	movs	r1, #0
 800ca18:	f009 fa3c 	bl	8015e94 <rclc_action_find_first_handle_by_status>
 800ca1c:	4605      	mov	r5, r0
 800ca1e:	2800      	cmp	r0, #0
 800ca20:	d066      	beq.n	800caf0 <_rclc_execute.part.0+0x1ec>
 800ca22:	6863      	ldr	r3, [r4, #4]
 800ca24:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ca26:	699b      	ldr	r3, [r3, #24]
 800ca28:	4798      	blx	r3
 800ca2a:	42b0      	cmp	r0, r6
 800ca2c:	f04f 0100 	mov.w	r1, #0
 800ca30:	d1e9      	bne.n	800ca06 <_rclc_execute.part.0+0x102>
 800ca32:	2101      	movs	r1, #1
 800ca34:	4628      	mov	r0, r5
 800ca36:	f009 fa93 	bl	8015f60 <rclc_action_server_response_goal_request>
 800ca3a:	722f      	strb	r7, [r5, #8]
 800ca3c:	e7ea      	b.n	800ca14 <_rclc_execute.part.0+0x110>
 800ca3e:	6848      	ldr	r0, [r1, #4]
 800ca40:	f009 f9fa 	bl	8015e38 <rclc_action_remove_used_goal_handle>
 800ca44:	6860      	ldr	r0, [r4, #4]
 800ca46:	f009 fa31 	bl	8015eac <rclc_action_find_first_terminated_handle>
 800ca4a:	4601      	mov	r1, r0
 800ca4c:	2800      	cmp	r0, #0
 800ca4e:	d1f6      	bne.n	800ca3e <_rclc_execute.part.0+0x13a>
 800ca50:	6860      	ldr	r0, [r4, #4]
 800ca52:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800ca56:	e7ce      	b.n	800c9f6 <_rclc_execute.part.0+0xf2>
 800ca58:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ca5a:	6880      	ldr	r0, [r0, #8]
 800ca5c:	f104 0110 	add.w	r1, r4, #16
 800ca60:	4798      	blx	r3
 800ca62:	2000      	movs	r0, #0
 800ca64:	b007      	add	sp, #28
 800ca66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca68:	6860      	ldr	r0, [r4, #4]
 800ca6a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800ca6e:	b18b      	cbz	r3, 800ca94 <_rclc_execute.part.0+0x190>
 800ca70:	68c5      	ldr	r5, [r0, #12]
 800ca72:	b32d      	cbz	r5, 800cac0 <_rclc_execute.part.0+0x1bc>
 800ca74:	2600      	movs	r6, #0
 800ca76:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800ca7a:	b143      	cbz	r3, 800ca8e <_rclc_execute.part.0+0x18a>
 800ca7c:	69c3      	ldr	r3, [r0, #28]
 800ca7e:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800ca82:	b123      	cbz	r3, 800ca8e <_rclc_execute.part.0+0x18a>
 800ca84:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800ca86:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ca88:	4628      	mov	r0, r5
 800ca8a:	4798      	blx	r3
 800ca8c:	6860      	ldr	r0, [r4, #4]
 800ca8e:	682d      	ldr	r5, [r5, #0]
 800ca90:	2d00      	cmp	r5, #0
 800ca92:	d1f0      	bne.n	800ca76 <_rclc_execute.part.0+0x172>
 800ca94:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800ca98:	b193      	cbz	r3, 800cac0 <_rclc_execute.part.0+0x1bc>
 800ca9a:	68c5      	ldr	r5, [r0, #12]
 800ca9c:	b185      	cbz	r5, 800cac0 <_rclc_execute.part.0+0x1bc>
 800ca9e:	2600      	movs	r6, #0
 800caa0:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800caa4:	b14b      	cbz	r3, 800caba <_rclc_execute.part.0+0x1b6>
 800caa6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800caa8:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800caac:	b12b      	cbz	r3, 800caba <_rclc_execute.part.0+0x1b6>
 800caae:	4628      	mov	r0, r5
 800cab0:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800cab4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800cab6:	4798      	blx	r3
 800cab8:	6860      	ldr	r0, [r4, #4]
 800caba:	682d      	ldr	r5, [r5, #0]
 800cabc:	2d00      	cmp	r5, #0
 800cabe:	d1ef      	bne.n	800caa0 <_rclc_execute.part.0+0x19c>
 800cac0:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d081      	beq.n	800c9cc <_rclc_execute.part.0+0xc8>
 800cac8:	2700      	movs	r7, #0
 800caca:	e00b      	b.n	800cae4 <_rclc_execute.part.0+0x1e0>
 800cacc:	6863      	ldr	r3, [r4, #4]
 800cace:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800cad0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800cad2:	6a1e      	ldr	r6, [r3, #32]
 800cad4:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800cad8:	47b0      	blx	r6
 800cada:	6860      	ldr	r0, [r4, #4]
 800cadc:	4629      	mov	r1, r5
 800cade:	f009 f9ab 	bl	8015e38 <rclc_action_remove_used_goal_handle>
 800cae2:	6860      	ldr	r0, [r4, #4]
 800cae4:	f009 fa30 	bl	8015f48 <rclc_action_find_first_handle_with_result_response>
 800cae8:	4605      	mov	r5, r0
 800caea:	2800      	cmp	r0, #0
 800caec:	d1ee      	bne.n	800cacc <_rclc_execute.part.0+0x1c8>
 800caee:	e76d      	b.n	800c9cc <_rclc_execute.part.0+0xc8>
 800caf0:	6860      	ldr	r0, [r4, #4]
 800caf2:	f880 5020 	strb.w	r5, [r0, #32]
 800caf6:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	f43f af66 	beq.w	800c9cc <_rclc_execute.part.0+0xc8>
 800cb00:	68c5      	ldr	r5, [r0, #12]
 800cb02:	b1b5      	cbz	r5, 800cb32 <_rclc_execute.part.0+0x22e>
 800cb04:	2602      	movs	r6, #2
 800cb06:	e001      	b.n	800cb0c <_rclc_execute.part.0+0x208>
 800cb08:	682d      	ldr	r5, [r5, #0]
 800cb0a:	b195      	cbz	r5, 800cb32 <_rclc_execute.part.0+0x22e>
 800cb0c:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800cb10:	2b03      	cmp	r3, #3
 800cb12:	d1f9      	bne.n	800cb08 <_rclc_execute.part.0+0x204>
 800cb14:	69c3      	ldr	r3, [r0, #28]
 800cb16:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800cb18:	4628      	mov	r0, r5
 800cb1a:	4798      	blx	r3
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800cb22:	4628      	mov	r0, r5
 800cb24:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800cb28:	b163      	cbz	r3, 800cb44 <_rclc_execute.part.0+0x240>
 800cb2a:	f009 fa39 	bl	8015fa0 <rclc_action_server_goal_cancel_accept>
 800cb2e:	6860      	ldr	r0, [r4, #4]
 800cb30:	e7ea      	b.n	800cb08 <_rclc_execute.part.0+0x204>
 800cb32:	2300      	movs	r3, #0
 800cb34:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800cb38:	4618      	mov	r0, r3
 800cb3a:	e739      	b.n	800c9b0 <_rclc_execute.part.0+0xac>
 800cb3c:	4628      	mov	r0, r5
 800cb3e:	4798      	blx	r3
 800cb40:	4628      	mov	r0, r5
 800cb42:	e735      	b.n	800c9b0 <_rclc_execute.part.0+0xac>
 800cb44:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800cb46:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800cb4a:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800cb4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb52:	6860      	ldr	r0, [r4, #4]
 800cb54:	2101      	movs	r1, #1
 800cb56:	f009 fa4f 	bl	8015ff8 <rclc_action_server_goal_cancel_reject>
 800cb5a:	722e      	strb	r6, [r5, #8]
 800cb5c:	6860      	ldr	r0, [r4, #4]
 800cb5e:	e7d3      	b.n	800cb08 <_rclc_execute.part.0+0x204>
 800cb60:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800cb62:	6880      	ldr	r0, [r0, #8]
 800cb64:	4798      	blx	r3
 800cb66:	f104 0110 	add.w	r1, r4, #16
 800cb6a:	e6e7      	b.n	800c93c <_rclc_execute.part.0+0x38>
 800cb6c:	f100 0110 	add.w	r1, r0, #16
 800cb70:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800cb72:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800cb74:	6880      	ldr	r0, [r0, #8]
 800cb76:	9105      	str	r1, [sp, #20]
 800cb78:	4798      	blx	r3
 800cb7a:	9905      	ldr	r1, [sp, #20]
 800cb7c:	e6de      	b.n	800c93c <_rclc_execute.part.0+0x38>
 800cb7e:	2001      	movs	r0, #1
 800cb80:	e716      	b.n	800c9b0 <_rclc_execute.part.0+0xac>
 800cb82:	bf00      	nop

0800cb84 <rclc_executor_trigger_any>:
 800cb84:	2800      	cmp	r0, #0
 800cb86:	d03f      	beq.n	800cc08 <rclc_executor_trigger_any+0x84>
 800cb88:	2900      	cmp	r1, #0
 800cb8a:	d03e      	beq.n	800cc0a <rclc_executor_trigger_any+0x86>
 800cb8c:	4603      	mov	r3, r0
 800cb8e:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800cb92:	2200      	movs	r2, #0
 800cb94:	2800      	cmp	r0, #0
 800cb96:	d037      	beq.n	800cc08 <rclc_executor_trigger_any+0x84>
 800cb98:	b430      	push	{r4, r5}
 800cb9a:	f893 c000 	ldrb.w	ip, [r3]
 800cb9e:	f1bc 0f08 	cmp.w	ip, #8
 800cba2:	d11e      	bne.n	800cbe2 <rclc_executor_trigger_any+0x5e>
 800cba4:	685c      	ldr	r4, [r3, #4]
 800cba6:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800cba8:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800cbac:	d105      	bne.n	800cbba <rclc_executor_trigger_any+0x36>
 800cbae:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800cbb2:	b910      	cbnz	r0, 800cbba <rclc_executor_trigger_any+0x36>
 800cbb4:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800cbb8:	b128      	cbz	r0, 800cbc6 <rclc_executor_trigger_any+0x42>
 800cbba:	bc30      	pop	{r4, r5}
 800cbbc:	4770      	bx	lr
 800cbbe:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800cbc2:	2800      	cmp	r0, #0
 800cbc4:	d1f9      	bne.n	800cbba <rclc_executor_trigger_any+0x36>
 800cbc6:	3201      	adds	r2, #1
 800cbc8:	4291      	cmp	r1, r2
 800cbca:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800cbce:	d018      	beq.n	800cc02 <rclc_executor_trigger_any+0x7e>
 800cbd0:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800cbd4:	2800      	cmp	r0, #0
 800cbd6:	d0f0      	beq.n	800cbba <rclc_executor_trigger_any+0x36>
 800cbd8:	f893 c000 	ldrb.w	ip, [r3]
 800cbdc:	f1bc 0f08 	cmp.w	ip, #8
 800cbe0:	d0e0      	beq.n	800cba4 <rclc_executor_trigger_any+0x20>
 800cbe2:	f1bc 0f09 	cmp.w	ip, #9
 800cbe6:	d1ea      	bne.n	800cbbe <rclc_executor_trigger_any+0x3a>
 800cbe8:	685c      	ldr	r4, [r3, #4]
 800cbea:	6a25      	ldr	r5, [r4, #32]
 800cbec:	2d00      	cmp	r5, #0
 800cbee:	d1e4      	bne.n	800cbba <rclc_executor_trigger_any+0x36>
 800cbf0:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800cbf4:	2800      	cmp	r0, #0
 800cbf6:	d1e0      	bne.n	800cbba <rclc_executor_trigger_any+0x36>
 800cbf8:	3201      	adds	r2, #1
 800cbfa:	4291      	cmp	r1, r2
 800cbfc:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800cc00:	d1e6      	bne.n	800cbd0 <rclc_executor_trigger_any+0x4c>
 800cc02:	2000      	movs	r0, #0
 800cc04:	bc30      	pop	{r4, r5}
 800cc06:	4770      	bx	lr
 800cc08:	4770      	bx	lr
 800cc0a:	4608      	mov	r0, r1
 800cc0c:	4770      	bx	lr
 800cc0e:	bf00      	nop

0800cc10 <rclc_executor_get_zero_initialized_executor>:
 800cc10:	b510      	push	{r4, lr}
 800cc12:	4903      	ldr	r1, [pc, #12]	@ (800cc20 <rclc_executor_get_zero_initialized_executor+0x10>)
 800cc14:	4604      	mov	r4, r0
 800cc16:	2288      	movs	r2, #136	@ 0x88
 800cc18:	f00c fc43 	bl	80194a2 <memcpy>
 800cc1c:	4620      	mov	r0, r4
 800cc1e:	bd10      	pop	{r4, pc}
 800cc20:	0801b128 	.word	0x0801b128
 800cc24:	00000000 	.word	0x00000000

0800cc28 <rclc_executor_init>:
 800cc28:	2800      	cmp	r0, #0
 800cc2a:	d05f      	beq.n	800ccec <rclc_executor_init+0xc4>
 800cc2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc30:	460c      	mov	r4, r1
 800cc32:	b0b0      	sub	sp, #192	@ 0xc0
 800cc34:	2900      	cmp	r1, #0
 800cc36:	d051      	beq.n	800ccdc <rclc_executor_init+0xb4>
 800cc38:	4605      	mov	r5, r0
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	4616      	mov	r6, r2
 800cc3e:	461f      	mov	r7, r3
 800cc40:	f000 fc3c 	bl	800d4bc <rcutils_allocator_is_valid>
 800cc44:	2800      	cmp	r0, #0
 800cc46:	d049      	beq.n	800ccdc <rclc_executor_init+0xb4>
 800cc48:	2e00      	cmp	r6, #0
 800cc4a:	d047      	beq.n	800ccdc <rclc_executor_init+0xb4>
 800cc4c:	492c      	ldr	r1, [pc, #176]	@ (800cd00 <rclc_executor_init+0xd8>)
 800cc4e:	2288      	movs	r2, #136	@ 0x88
 800cc50:	a80e      	add	r0, sp, #56	@ 0x38
 800cc52:	f00c fc26 	bl	80194a2 <memcpy>
 800cc56:	a90e      	add	r1, sp, #56	@ 0x38
 800cc58:	2288      	movs	r2, #136	@ 0x88
 800cc5a:	4628      	mov	r0, r5
 800cc5c:	f00c fc21 	bl	80194a2 <memcpy>
 800cc60:	602c      	str	r4, [r5, #0]
 800cc62:	4668      	mov	r0, sp
 800cc64:	60ae      	str	r6, [r5, #8]
 800cc66:	466c      	mov	r4, sp
 800cc68:	f007 fe92 	bl	8014990 <rcl_get_zero_initialized_wait_set>
 800cc6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cc6e:	f105 0c14 	add.w	ip, r5, #20
 800cc72:	f8d7 8000 	ldr.w	r8, [r7]
 800cc76:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cc7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cc7c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cc80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cc82:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cc86:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800ccf8 <rclc_executor_init+0xd0>
 800cc8a:	6823      	ldr	r3, [r4, #0]
 800cc8c:	f8cc 3000 	str.w	r3, [ip]
 800cc90:	6939      	ldr	r1, [r7, #16]
 800cc92:	612f      	str	r7, [r5, #16]
 800cc94:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800cc98:	01b0      	lsls	r0, r6, #6
 800cc9a:	47c0      	blx	r8
 800cc9c:	6068      	str	r0, [r5, #4]
 800cc9e:	b338      	cbz	r0, 800ccf0 <rclc_executor_init+0xc8>
 800cca0:	2400      	movs	r4, #0
 800cca2:	e000      	b.n	800cca6 <rclc_executor_init+0x7e>
 800cca4:	6868      	ldr	r0, [r5, #4]
 800cca6:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800ccaa:	4631      	mov	r1, r6
 800ccac:	3401      	adds	r4, #1
 800ccae:	f000 faa3 	bl	800d1f8 <rclc_executor_handle_init>
 800ccb2:	42a6      	cmp	r6, r4
 800ccb4:	d1f6      	bne.n	800cca4 <rclc_executor_init+0x7c>
 800ccb6:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800ccba:	f000 fa93 	bl	800d1e4 <rclc_executor_handle_counters_zero_init>
 800ccbe:	4a11      	ldr	r2, [pc, #68]	@ (800cd04 <rclc_executor_init+0xdc>)
 800ccc0:	686b      	ldr	r3, [r5, #4]
 800ccc2:	2000      	movs	r0, #0
 800ccc4:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800ccc8:	b163      	cbz	r3, 800cce4 <rclc_executor_init+0xbc>
 800ccca:	692b      	ldr	r3, [r5, #16]
 800cccc:	b153      	cbz	r3, 800cce4 <rclc_executor_init+0xbc>
 800ccce:	68ab      	ldr	r3, [r5, #8]
 800ccd0:	b143      	cbz	r3, 800cce4 <rclc_executor_init+0xbc>
 800ccd2:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800ccd6:	b030      	add	sp, #192	@ 0xc0
 800ccd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccdc:	200b      	movs	r0, #11
 800ccde:	b030      	add	sp, #192	@ 0xc0
 800cce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cce4:	4618      	mov	r0, r3
 800cce6:	b030      	add	sp, #192	@ 0xc0
 800cce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccec:	200b      	movs	r0, #11
 800ccee:	4770      	bx	lr
 800ccf0:	200a      	movs	r0, #10
 800ccf2:	e7f4      	b.n	800ccde <rclc_executor_init+0xb6>
 800ccf4:	f3af 8000 	nop.w
 800ccf8:	3b9aca00 	.word	0x3b9aca00
 800ccfc:	00000000 	.word	0x00000000
 800cd00:	0801b128 	.word	0x0801b128
 800cd04:	0800cb85 	.word	0x0800cb85

0800cd08 <rclc_executor_add_timer>:
 800cd08:	b300      	cbz	r0, 800cd4c <rclc_executor_add_timer+0x44>
 800cd0a:	b1f9      	cbz	r1, 800cd4c <rclc_executor_add_timer+0x44>
 800cd0c:	b538      	push	{r3, r4, r5, lr}
 800cd0e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800cd12:	4293      	cmp	r3, r2
 800cd14:	4604      	mov	r4, r0
 800cd16:	d301      	bcc.n	800cd1c <rclc_executor_add_timer+0x14>
 800cd18:	2001      	movs	r0, #1
 800cd1a:	bd38      	pop	{r3, r4, r5, pc}
 800cd1c:	6840      	ldr	r0, [r0, #4]
 800cd1e:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800cd22:	019d      	lsls	r5, r3, #6
 800cd24:	6051      	str	r1, [r2, #4]
 800cd26:	2102      	movs	r1, #2
 800cd28:	5341      	strh	r1, [r0, r5]
 800cd2a:	3301      	adds	r3, #1
 800cd2c:	2000      	movs	r0, #0
 800cd2e:	2101      	movs	r1, #1
 800cd30:	f104 0514 	add.w	r5, r4, #20
 800cd34:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800cd36:	8711      	strh	r1, [r2, #56]	@ 0x38
 800cd38:	4628      	mov	r0, r5
 800cd3a:	60e3      	str	r3, [r4, #12]
 800cd3c:	f007 fe3c 	bl	80149b8 <rcl_wait_set_is_valid>
 800cd40:	b930      	cbnz	r0, 800cd50 <rclc_executor_add_timer+0x48>
 800cd42:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800cd44:	3301      	adds	r3, #1
 800cd46:	2000      	movs	r0, #0
 800cd48:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800cd4a:	bd38      	pop	{r3, r4, r5, pc}
 800cd4c:	200b      	movs	r0, #11
 800cd4e:	4770      	bx	lr
 800cd50:	4628      	mov	r0, r5
 800cd52:	f007 fe37 	bl	80149c4 <rcl_wait_set_fini>
 800cd56:	2800      	cmp	r0, #0
 800cd58:	d0f3      	beq.n	800cd42 <rclc_executor_add_timer+0x3a>
 800cd5a:	bd38      	pop	{r3, r4, r5, pc}

0800cd5c <rclc_executor_add_service>:
 800cd5c:	b370      	cbz	r0, 800cdbc <rclc_executor_add_service+0x60>
 800cd5e:	b369      	cbz	r1, 800cdbc <rclc_executor_add_service+0x60>
 800cd60:	b362      	cbz	r2, 800cdbc <rclc_executor_add_service+0x60>
 800cd62:	b35b      	cbz	r3, 800cdbc <rclc_executor_add_service+0x60>
 800cd64:	b538      	push	{r3, r4, r5, lr}
 800cd66:	4604      	mov	r4, r0
 800cd68:	9804      	ldr	r0, [sp, #16]
 800cd6a:	b378      	cbz	r0, 800cdcc <rclc_executor_add_service+0x70>
 800cd6c:	e9d4 5002 	ldrd	r5, r0, [r4, #8]
 800cd70:	42a8      	cmp	r0, r5
 800cd72:	d301      	bcc.n	800cd78 <rclc_executor_add_service+0x1c>
 800cd74:	2001      	movs	r0, #1
 800cd76:	bd38      	pop	{r3, r4, r5, pc}
 800cd78:	6865      	ldr	r5, [r4, #4]
 800cd7a:	eb05 1c80 	add.w	ip, r5, r0, lsl #6
 800cd7e:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 800cd82:	f8cc 3028 	str.w	r3, [ip, #40]	@ 0x28
 800cd86:	9b04      	ldr	r3, [sp, #16]
 800cd88:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800cd8c:	2305      	movs	r3, #5
 800cd8e:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800cd92:	3001      	adds	r0, #1
 800cd94:	f825 300e 	strh.w	r3, [r5, lr]
 800cd98:	2201      	movs	r2, #1
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	f104 0514 	add.w	r5, r4, #20
 800cda0:	f88c 2038 	strb.w	r2, [ip, #56]	@ 0x38
 800cda4:	f8cc 302c 	str.w	r3, [ip, #44]	@ 0x2c
 800cda8:	60e0      	str	r0, [r4, #12]
 800cdaa:	4628      	mov	r0, r5
 800cdac:	f007 fe04 	bl	80149b8 <rcl_wait_set_is_valid>
 800cdb0:	b930      	cbnz	r0, 800cdc0 <rclc_executor_add_service+0x64>
 800cdb2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800cdb4:	3301      	adds	r3, #1
 800cdb6:	2000      	movs	r0, #0
 800cdb8:	6563      	str	r3, [r4, #84]	@ 0x54
 800cdba:	bd38      	pop	{r3, r4, r5, pc}
 800cdbc:	200b      	movs	r0, #11
 800cdbe:	4770      	bx	lr
 800cdc0:	4628      	mov	r0, r5
 800cdc2:	f007 fdff 	bl	80149c4 <rcl_wait_set_fini>
 800cdc6:	2800      	cmp	r0, #0
 800cdc8:	d0f3      	beq.n	800cdb2 <rclc_executor_add_service+0x56>
 800cdca:	e7d4      	b.n	800cd76 <rclc_executor_add_service+0x1a>
 800cdcc:	200b      	movs	r0, #11
 800cdce:	bd38      	pop	{r3, r4, r5, pc}

0800cdd0 <rclc_executor_prepare>:
 800cdd0:	2800      	cmp	r0, #0
 800cdd2:	d044      	beq.n	800ce5e <rclc_executor_prepare+0x8e>
 800cdd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdd6:	f100 0514 	add.w	r5, r0, #20
 800cdda:	b09b      	sub	sp, #108	@ 0x6c
 800cddc:	4604      	mov	r4, r0
 800cdde:	4628      	mov	r0, r5
 800cde0:	f007 fdea 	bl	80149b8 <rcl_wait_set_is_valid>
 800cde4:	b110      	cbz	r0, 800cdec <rclc_executor_prepare+0x1c>
 800cde6:	2000      	movs	r0, #0
 800cde8:	b01b      	add	sp, #108	@ 0x6c
 800cdea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cdec:	4628      	mov	r0, r5
 800cdee:	f007 fde9 	bl	80149c4 <rcl_wait_set_fini>
 800cdf2:	2800      	cmp	r0, #0
 800cdf4:	d130      	bne.n	800ce58 <rclc_executor_prepare+0x88>
 800cdf6:	a80c      	add	r0, sp, #48	@ 0x30
 800cdf8:	f007 fdca 	bl	8014990 <rcl_get_zero_initialized_wait_set>
 800cdfc:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800ce00:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ce04:	46ae      	mov	lr, r5
 800ce06:	6927      	ldr	r7, [r4, #16]
 800ce08:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ce0c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ce10:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ce14:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ce18:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ce1c:	f8dc 3000 	ldr.w	r3, [ip]
 800ce20:	f8ce 3000 	str.w	r3, [lr]
 800ce24:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ce26:	ae04      	add	r6, sp, #16
 800ce28:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	6822      	ldr	r2, [r4, #0]
 800ce2e:	6033      	str	r3, [r6, #0]
 800ce30:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ce32:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800ce34:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800ce38:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800ce3c:	e9cd 2100 	strd	r2, r1, [sp]
 800ce40:	4628      	mov	r0, r5
 800ce42:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800ce44:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ce46:	f008 f8bb 	bl	8014fc0 <rcl_wait_set_init>
 800ce4a:	2800      	cmp	r0, #0
 800ce4c:	d0cc      	beq.n	800cde8 <rclc_executor_prepare+0x18>
 800ce4e:	900b      	str	r0, [sp, #44]	@ 0x2c
 800ce50:	f000 fb5a 	bl	800d508 <rcutils_reset_error>
 800ce54:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800ce56:	e7c7      	b.n	800cde8 <rclc_executor_prepare+0x18>
 800ce58:	f000 fb56 	bl	800d508 <rcutils_reset_error>
 800ce5c:	e7cb      	b.n	800cdf6 <rclc_executor_prepare+0x26>
 800ce5e:	200b      	movs	r0, #11
 800ce60:	4770      	bx	lr
 800ce62:	bf00      	nop

0800ce64 <rclc_executor_spin_some.part.0>:
 800ce64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce68:	f100 0614 	add.w	r6, r0, #20
 800ce6c:	b083      	sub	sp, #12
 800ce6e:	4691      	mov	r9, r2
 800ce70:	4698      	mov	r8, r3
 800ce72:	4605      	mov	r5, r0
 800ce74:	f7ff ffac 	bl	800cdd0 <rclc_executor_prepare>
 800ce78:	4630      	mov	r0, r6
 800ce7a:	f007 fe6f 	bl	8014b5c <rcl_wait_set_clear>
 800ce7e:	4607      	mov	r7, r0
 800ce80:	2800      	cmp	r0, #0
 800ce82:	f040 80ed 	bne.w	800d060 <rclc_executor_spin_some.part.0+0x1fc>
 800ce86:	68ab      	ldr	r3, [r5, #8]
 800ce88:	4604      	mov	r4, r0
 800ce8a:	b303      	cbz	r3, 800cece <rclc_executor_spin_some.part.0+0x6a>
 800ce8c:	6869      	ldr	r1, [r5, #4]
 800ce8e:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800ce92:	01a2      	lsls	r2, r4, #6
 800ce94:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800ce98:	b1cb      	cbz	r3, 800cece <rclc_executor_spin_some.part.0+0x6a>
 800ce9a:	5c8b      	ldrb	r3, [r1, r2]
 800ce9c:	2b0a      	cmp	r3, #10
 800ce9e:	f200 80d8 	bhi.w	800d052 <rclc_executor_spin_some.part.0+0x1ee>
 800cea2:	e8df f003 	tbb	[pc, r3]
 800cea6:	9c9c      	.short	0x9c9c
 800cea8:	068c8ca7 	.word	0x068c8ca7
 800ceac:	bdc90606 	.word	0xbdc90606
 800ceb0:	b2          	.byte	0xb2
 800ceb1:	00          	.byte	0x00
 800ceb2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ceb6:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ceba:	4630      	mov	r0, r6
 800cebc:	f008 f996 	bl	80151ec <rcl_wait_set_add_service>
 800cec0:	2800      	cmp	r0, #0
 800cec2:	f040 8086 	bne.w	800cfd2 <rclc_executor_spin_some.part.0+0x16e>
 800cec6:	68ab      	ldr	r3, [r5, #8]
 800cec8:	3401      	adds	r4, #1
 800ceca:	429c      	cmp	r4, r3
 800cecc:	d3de      	bcc.n	800ce8c <rclc_executor_spin_some.part.0+0x28>
 800cece:	4643      	mov	r3, r8
 800ced0:	464a      	mov	r2, r9
 800ced2:	4630      	mov	r0, r6
 800ced4:	f008 f9b8 	bl	8015248 <rcl_wait>
 800ced8:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800cedc:	2b00      	cmp	r3, #0
 800cede:	f000 80c7 	beq.w	800d070 <rclc_executor_spin_some.part.0+0x20c>
 800cee2:	2b01      	cmp	r3, #1
 800cee4:	f040 80b5 	bne.w	800d052 <rclc_executor_spin_some.part.0+0x1ee>
 800cee8:	68ab      	ldr	r3, [r5, #8]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	f000 8159 	beq.w	800d1a2 <rclc_executor_spin_some.part.0+0x33e>
 800cef0:	2400      	movs	r4, #0
 800cef2:	46a0      	mov	r8, r4
 800cef4:	f240 1991 	movw	r9, #401	@ 0x191
 800cef8:	e00a      	b.n	800cf10 <rclc_executor_spin_some.part.0+0xac>
 800cefa:	f7ff fb41 	bl	800c580 <_rclc_check_for_new_data>
 800cefe:	4604      	mov	r4, r0
 800cf00:	b110      	cbz	r0, 800cf08 <rclc_executor_spin_some.part.0+0xa4>
 800cf02:	4548      	cmp	r0, r9
 800cf04:	f040 80b2 	bne.w	800d06c <rclc_executor_spin_some.part.0+0x208>
 800cf08:	68ab      	ldr	r3, [r5, #8]
 800cf0a:	4598      	cmp	r8, r3
 800cf0c:	f080 8126 	bcs.w	800d15c <rclc_executor_spin_some.part.0+0x2f8>
 800cf10:	686a      	ldr	r2, [r5, #4]
 800cf12:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800cf16:	4631      	mov	r1, r6
 800cf18:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800cf1c:	f108 0801 	add.w	r8, r8, #1
 800cf20:	f1bc 0f00 	cmp.w	ip, #0
 800cf24:	d1e9      	bne.n	800cefa <rclc_executor_spin_some.part.0+0x96>
 800cf26:	4619      	mov	r1, r3
 800cf28:	4610      	mov	r0, r2
 800cf2a:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800cf2e:	4798      	blx	r3
 800cf30:	2800      	cmp	r0, #0
 800cf32:	f000 809b 	beq.w	800d06c <rclc_executor_spin_some.part.0+0x208>
 800cf36:	68ab      	ldr	r3, [r5, #8]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	f000 8097 	beq.w	800d06c <rclc_executor_spin_some.part.0+0x208>
 800cf3e:	f04f 0800 	mov.w	r8, #0
 800cf42:	f240 1991 	movw	r9, #401	@ 0x191
 800cf46:	e009      	b.n	800cf5c <rclc_executor_spin_some.part.0+0xf8>
 800cf48:	f7ff fb68 	bl	800c61c <_rclc_take_new_data>
 800cf4c:	4604      	mov	r4, r0
 800cf4e:	b110      	cbz	r0, 800cf56 <rclc_executor_spin_some.part.0+0xf2>
 800cf50:	4548      	cmp	r0, r9
 800cf52:	f040 808b 	bne.w	800d06c <rclc_executor_spin_some.part.0+0x208>
 800cf56:	68ab      	ldr	r3, [r5, #8]
 800cf58:	4598      	cmp	r8, r3
 800cf5a:	d209      	bcs.n	800cf70 <rclc_executor_spin_some.part.0+0x10c>
 800cf5c:	6868      	ldr	r0, [r5, #4]
 800cf5e:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800cf62:	4631      	mov	r1, r6
 800cf64:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800cf68:	f108 0801 	add.w	r8, r8, #1
 800cf6c:	2a00      	cmp	r2, #0
 800cf6e:	d1eb      	bne.n	800cf48 <rclc_executor_spin_some.part.0+0xe4>
 800cf70:	2600      	movs	r6, #0
 800cf72:	b97b      	cbnz	r3, 800cf94 <rclc_executor_spin_some.part.0+0x130>
 800cf74:	e07a      	b.n	800d06c <rclc_executor_spin_some.part.0+0x208>
 800cf76:	f812 200c 	ldrb.w	r2, [r2, ip]
 800cf7a:	2a08      	cmp	r2, #8
 800cf7c:	f000 80fd 	beq.w	800d17a <rclc_executor_spin_some.part.0+0x316>
 800cf80:	2a09      	cmp	r2, #9
 800cf82:	f000 80ef 	beq.w	800d164 <rclc_executor_spin_some.part.0+0x300>
 800cf86:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800cf8a:	b98a      	cbnz	r2, 800cfb0 <rclc_executor_spin_some.part.0+0x14c>
 800cf8c:	3601      	adds	r6, #1
 800cf8e:	429e      	cmp	r6, r3
 800cf90:	d262      	bcs.n	800d058 <rclc_executor_spin_some.part.0+0x1f4>
 800cf92:	2400      	movs	r4, #0
 800cf94:	686a      	ldr	r2, [r5, #4]
 800cf96:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800cf9a:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800cf9e:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800cfa2:	2900      	cmp	r1, #0
 800cfa4:	d062      	beq.n	800d06c <rclc_executor_spin_some.part.0+0x208>
 800cfa6:	7841      	ldrb	r1, [r0, #1]
 800cfa8:	2900      	cmp	r1, #0
 800cfaa:	d0e4      	beq.n	800cf76 <rclc_executor_spin_some.part.0+0x112>
 800cfac:	2901      	cmp	r1, #1
 800cfae:	d1ed      	bne.n	800cf8c <rclc_executor_spin_some.part.0+0x128>
 800cfb0:	f7ff fca8 	bl	800c904 <_rclc_execute.part.0>
 800cfb4:	2800      	cmp	r0, #0
 800cfb6:	f040 80b6 	bne.w	800d126 <rclc_executor_spin_some.part.0+0x2c2>
 800cfba:	68ab      	ldr	r3, [r5, #8]
 800cfbc:	e7e6      	b.n	800cf8c <rclc_executor_spin_some.part.0+0x128>
 800cfbe:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cfc2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cfc6:	4630      	mov	r0, r6
 800cfc8:	f008 f8e4 	bl	8015194 <rcl_wait_set_add_client>
 800cfcc:	2800      	cmp	r0, #0
 800cfce:	f43f af7a 	beq.w	800cec6 <rclc_executor_spin_some.part.0+0x62>
 800cfd2:	9001      	str	r0, [sp, #4]
 800cfd4:	f000 fa98 	bl	800d508 <rcutils_reset_error>
 800cfd8:	9801      	ldr	r0, [sp, #4]
 800cfda:	4607      	mov	r7, r0
 800cfdc:	e03c      	b.n	800d058 <rclc_executor_spin_some.part.0+0x1f4>
 800cfde:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cfe2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cfe6:	4630      	mov	r0, r6
 800cfe8:	f007 fd8c 	bl	8014b04 <rcl_wait_set_add_subscription>
 800cfec:	2800      	cmp	r0, #0
 800cfee:	f43f af6a 	beq.w	800cec6 <rclc_executor_spin_some.part.0+0x62>
 800cff2:	e7ee      	b.n	800cfd2 <rclc_executor_spin_some.part.0+0x16e>
 800cff4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cff8:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cffc:	4630      	mov	r0, r6
 800cffe:	f008 f899 	bl	8015134 <rcl_wait_set_add_timer>
 800d002:	2800      	cmp	r0, #0
 800d004:	f43f af5f 	beq.w	800cec6 <rclc_executor_spin_some.part.0+0x62>
 800d008:	e7e3      	b.n	800cfd2 <rclc_executor_spin_some.part.0+0x16e>
 800d00a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d00e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d012:	4630      	mov	r0, r6
 800d014:	f008 f862 	bl	80150dc <rcl_wait_set_add_guard_condition>
 800d018:	2800      	cmp	r0, #0
 800d01a:	f43f af54 	beq.w	800cec6 <rclc_executor_spin_some.part.0+0x62>
 800d01e:	e7d8      	b.n	800cfd2 <rclc_executor_spin_some.part.0+0x16e>
 800d020:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d024:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d028:	3110      	adds	r1, #16
 800d02a:	4630      	mov	r0, r6
 800d02c:	f008 fde4 	bl	8015bf8 <rcl_action_wait_set_add_action_server>
 800d030:	2800      	cmp	r0, #0
 800d032:	f43f af48 	beq.w	800cec6 <rclc_executor_spin_some.part.0+0x62>
 800d036:	e7cc      	b.n	800cfd2 <rclc_executor_spin_some.part.0+0x16e>
 800d038:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d03c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d040:	3110      	adds	r1, #16
 800d042:	2300      	movs	r3, #0
 800d044:	4630      	mov	r0, r6
 800d046:	f008 fbaf 	bl	80157a8 <rcl_action_wait_set_add_action_client>
 800d04a:	2800      	cmp	r0, #0
 800d04c:	f43f af3b 	beq.w	800cec6 <rclc_executor_spin_some.part.0+0x62>
 800d050:	e7bf      	b.n	800cfd2 <rclc_executor_spin_some.part.0+0x16e>
 800d052:	f000 fa59 	bl	800d508 <rcutils_reset_error>
 800d056:	2701      	movs	r7, #1
 800d058:	4638      	mov	r0, r7
 800d05a:	b003      	add	sp, #12
 800d05c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d060:	f000 fa52 	bl	800d508 <rcutils_reset_error>
 800d064:	4638      	mov	r0, r7
 800d066:	b003      	add	sp, #12
 800d068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d06c:	4627      	mov	r7, r4
 800d06e:	e7f3      	b.n	800d058 <rclc_executor_spin_some.part.0+0x1f4>
 800d070:	68ab      	ldr	r3, [r5, #8]
 800d072:	2b00      	cmp	r3, #0
 800d074:	f000 8092 	beq.w	800d19c <rclc_executor_spin_some.part.0+0x338>
 800d078:	2400      	movs	r4, #0
 800d07a:	46a0      	mov	r8, r4
 800d07c:	f240 1991 	movw	r9, #401	@ 0x191
 800d080:	e008      	b.n	800d094 <rclc_executor_spin_some.part.0+0x230>
 800d082:	f7ff fa7d 	bl	800c580 <_rclc_check_for_new_data>
 800d086:	4604      	mov	r4, r0
 800d088:	b108      	cbz	r0, 800d08e <rclc_executor_spin_some.part.0+0x22a>
 800d08a:	4548      	cmp	r0, r9
 800d08c:	d1ee      	bne.n	800d06c <rclc_executor_spin_some.part.0+0x208>
 800d08e:	68ab      	ldr	r3, [r5, #8]
 800d090:	4598      	cmp	r8, r3
 800d092:	d265      	bcs.n	800d160 <rclc_executor_spin_some.part.0+0x2fc>
 800d094:	686a      	ldr	r2, [r5, #4]
 800d096:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800d09a:	4631      	mov	r1, r6
 800d09c:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800d0a0:	f108 0801 	add.w	r8, r8, #1
 800d0a4:	f1bc 0f00 	cmp.w	ip, #0
 800d0a8:	d1eb      	bne.n	800d082 <rclc_executor_spin_some.part.0+0x21e>
 800d0aa:	4619      	mov	r1, r3
 800d0ac:	4610      	mov	r0, r2
 800d0ae:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800d0b2:	4798      	blx	r3
 800d0b4:	2800      	cmp	r0, #0
 800d0b6:	d0d9      	beq.n	800d06c <rclc_executor_spin_some.part.0+0x208>
 800d0b8:	68ab      	ldr	r3, [r5, #8]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d0d6      	beq.n	800d06c <rclc_executor_spin_some.part.0+0x208>
 800d0be:	f04f 0800 	mov.w	r8, #0
 800d0c2:	f240 1991 	movw	r9, #401	@ 0x191
 800d0c6:	f240 2a59 	movw	sl, #601	@ 0x259
 800d0ca:	e00e      	b.n	800d0ea <rclc_executor_spin_some.part.0+0x286>
 800d0cc:	f813 300b 	ldrb.w	r3, [r3, fp]
 800d0d0:	2b08      	cmp	r3, #8
 800d0d2:	d033      	beq.n	800d13c <rclc_executor_spin_some.part.0+0x2d8>
 800d0d4:	2b09      	cmp	r3, #9
 800d0d6:	d028      	beq.n	800d12a <rclc_executor_spin_some.part.0+0x2c6>
 800d0d8:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800d0dc:	b9fb      	cbnz	r3, 800d11e <rclc_executor_spin_some.part.0+0x2ba>
 800d0de:	68ab      	ldr	r3, [r5, #8]
 800d0e0:	f108 0801 	add.w	r8, r8, #1
 800d0e4:	4598      	cmp	r8, r3
 800d0e6:	d2b7      	bcs.n	800d058 <rclc_executor_spin_some.part.0+0x1f4>
 800d0e8:	2400      	movs	r4, #0
 800d0ea:	6868      	ldr	r0, [r5, #4]
 800d0ec:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800d0f0:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800d0f4:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d0b7      	beq.n	800d06c <rclc_executor_spin_some.part.0+0x208>
 800d0fc:	4631      	mov	r1, r6
 800d0fe:	f7ff fa8d 	bl	800c61c <_rclc_take_new_data>
 800d102:	b118      	cbz	r0, 800d10c <rclc_executor_spin_some.part.0+0x2a8>
 800d104:	4548      	cmp	r0, r9
 800d106:	d001      	beq.n	800d10c <rclc_executor_spin_some.part.0+0x2a8>
 800d108:	4550      	cmp	r0, sl
 800d10a:	d10c      	bne.n	800d126 <rclc_executor_spin_some.part.0+0x2c2>
 800d10c:	686b      	ldr	r3, [r5, #4]
 800d10e:	eb13 000b 	adds.w	r0, r3, fp
 800d112:	d021      	beq.n	800d158 <rclc_executor_spin_some.part.0+0x2f4>
 800d114:	7842      	ldrb	r2, [r0, #1]
 800d116:	2a00      	cmp	r2, #0
 800d118:	d0d8      	beq.n	800d0cc <rclc_executor_spin_some.part.0+0x268>
 800d11a:	2a01      	cmp	r2, #1
 800d11c:	d1df      	bne.n	800d0de <rclc_executor_spin_some.part.0+0x27a>
 800d11e:	f7ff fbf1 	bl	800c904 <_rclc_execute.part.0>
 800d122:	2800      	cmp	r0, #0
 800d124:	d0db      	beq.n	800d0de <rclc_executor_spin_some.part.0+0x27a>
 800d126:	4607      	mov	r7, r0
 800d128:	e796      	b.n	800d058 <rclc_executor_spin_some.part.0+0x1f4>
 800d12a:	6843      	ldr	r3, [r0, #4]
 800d12c:	6a1a      	ldr	r2, [r3, #32]
 800d12e:	2a00      	cmp	r2, #0
 800d130:	d1f5      	bne.n	800d11e <rclc_executor_spin_some.part.0+0x2ba>
 800d132:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d136:	2b00      	cmp	r3, #0
 800d138:	d0d1      	beq.n	800d0de <rclc_executor_spin_some.part.0+0x27a>
 800d13a:	e7f0      	b.n	800d11e <rclc_executor_spin_some.part.0+0x2ba>
 800d13c:	6843      	ldr	r3, [r0, #4]
 800d13e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d140:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800d144:	d1eb      	bne.n	800d11e <rclc_executor_spin_some.part.0+0x2ba>
 800d146:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800d14a:	2a00      	cmp	r2, #0
 800d14c:	d1e7      	bne.n	800d11e <rclc_executor_spin_some.part.0+0x2ba>
 800d14e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d152:	2b00      	cmp	r3, #0
 800d154:	d0c3      	beq.n	800d0de <rclc_executor_spin_some.part.0+0x27a>
 800d156:	e7e2      	b.n	800d11e <rclc_executor_spin_some.part.0+0x2ba>
 800d158:	270b      	movs	r7, #11
 800d15a:	e77d      	b.n	800d058 <rclc_executor_spin_some.part.0+0x1f4>
 800d15c:	686a      	ldr	r2, [r5, #4]
 800d15e:	e6e2      	b.n	800cf26 <rclc_executor_spin_some.part.0+0xc2>
 800d160:	686a      	ldr	r2, [r5, #4]
 800d162:	e7a2      	b.n	800d0aa <rclc_executor_spin_some.part.0+0x246>
 800d164:	6842      	ldr	r2, [r0, #4]
 800d166:	6a11      	ldr	r1, [r2, #32]
 800d168:	2900      	cmp	r1, #0
 800d16a:	f47f af21 	bne.w	800cfb0 <rclc_executor_spin_some.part.0+0x14c>
 800d16e:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800d172:	2a00      	cmp	r2, #0
 800d174:	f43f af0a 	beq.w	800cf8c <rclc_executor_spin_some.part.0+0x128>
 800d178:	e71a      	b.n	800cfb0 <rclc_executor_spin_some.part.0+0x14c>
 800d17a:	6842      	ldr	r2, [r0, #4]
 800d17c:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800d17e:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800d182:	f47f af15 	bne.w	800cfb0 <rclc_executor_spin_some.part.0+0x14c>
 800d186:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800d18a:	2900      	cmp	r1, #0
 800d18c:	f47f af10 	bne.w	800cfb0 <rclc_executor_spin_some.part.0+0x14c>
 800d190:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800d194:	2a00      	cmp	r2, #0
 800d196:	f43f aef9 	beq.w	800cf8c <rclc_executor_spin_some.part.0+0x128>
 800d19a:	e709      	b.n	800cfb0 <rclc_executor_spin_some.part.0+0x14c>
 800d19c:	686a      	ldr	r2, [r5, #4]
 800d19e:	461c      	mov	r4, r3
 800d1a0:	e783      	b.n	800d0aa <rclc_executor_spin_some.part.0+0x246>
 800d1a2:	686a      	ldr	r2, [r5, #4]
 800d1a4:	461c      	mov	r4, r3
 800d1a6:	e6be      	b.n	800cf26 <rclc_executor_spin_some.part.0+0xc2>

0800d1a8 <rclc_executor_spin>:
 800d1a8:	b1d0      	cbz	r0, 800d1e0 <rclc_executor_spin+0x38>
 800d1aa:	b510      	push	{r4, lr}
 800d1ac:	4604      	mov	r4, r0
 800d1ae:	b082      	sub	sp, #8
 800d1b0:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 800d1b4:	6820      	ldr	r0, [r4, #0]
 800d1b6:	e9cd 2300 	strd	r2, r3, [sp]
 800d1ba:	f006 f979 	bl	80134b0 <rcl_context_is_valid>
 800d1be:	4601      	mov	r1, r0
 800d1c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d1c4:	4620      	mov	r0, r4
 800d1c6:	b131      	cbz	r1, 800d1d6 <rclc_executor_spin+0x2e>
 800d1c8:	f7ff fe4c 	bl	800ce64 <rclc_executor_spin_some.part.0>
 800d1cc:	f030 0302 	bics.w	r3, r0, #2
 800d1d0:	d0ee      	beq.n	800d1b0 <rclc_executor_spin+0x8>
 800d1d2:	b002      	add	sp, #8
 800d1d4:	bd10      	pop	{r4, pc}
 800d1d6:	f000 f997 	bl	800d508 <rcutils_reset_error>
 800d1da:	2001      	movs	r0, #1
 800d1dc:	b002      	add	sp, #8
 800d1de:	bd10      	pop	{r4, pc}
 800d1e0:	200b      	movs	r0, #11
 800d1e2:	4770      	bx	lr

0800d1e4 <rclc_executor_handle_counters_zero_init>:
 800d1e4:	b130      	cbz	r0, 800d1f4 <rclc_executor_handle_counters_zero_init+0x10>
 800d1e6:	b508      	push	{r3, lr}
 800d1e8:	2220      	movs	r2, #32
 800d1ea:	2100      	movs	r1, #0
 800d1ec:	f00c f890 	bl	8019310 <memset>
 800d1f0:	2000      	movs	r0, #0
 800d1f2:	bd08      	pop	{r3, pc}
 800d1f4:	200b      	movs	r0, #11
 800d1f6:	4770      	bx	lr

0800d1f8 <rclc_executor_handle_init>:
 800d1f8:	b168      	cbz	r0, 800d216 <rclc_executor_handle_init+0x1e>
 800d1fa:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800d220 <rclc_executor_handle_init+0x28>
 800d1fe:	2300      	movs	r3, #0
 800d200:	220b      	movs	r2, #11
 800d202:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800d206:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800d20a:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800d20e:	8002      	strh	r2, [r0, #0]
 800d210:	8703      	strh	r3, [r0, #56]	@ 0x38
 800d212:	4618      	mov	r0, r3
 800d214:	4770      	bx	lr
 800d216:	200b      	movs	r0, #11
 800d218:	4770      	bx	lr
 800d21a:	bf00      	nop
 800d21c:	f3af 8000 	nop.w
	...

0800d228 <rclc_support_init_with_options>:
 800d228:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d22c:	b083      	sub	sp, #12
 800d22e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800d230:	b340      	cbz	r0, 800d284 <rclc_support_init_with_options+0x5c>
 800d232:	461d      	mov	r5, r3
 800d234:	b333      	cbz	r3, 800d284 <rclc_support_init_with_options+0x5c>
 800d236:	b32e      	cbz	r6, 800d284 <rclc_support_init_with_options+0x5c>
 800d238:	46e9      	mov	r9, sp
 800d23a:	4604      	mov	r4, r0
 800d23c:	4648      	mov	r0, r9
 800d23e:	460f      	mov	r7, r1
 800d240:	4690      	mov	r8, r2
 800d242:	f006 f92b 	bl	801349c <rcl_get_zero_initialized_context>
 800d246:	e899 0003 	ldmia.w	r9, {r0, r1}
 800d24a:	462a      	mov	r2, r5
 800d24c:	e884 0003 	stmia.w	r4, {r0, r1}
 800d250:	4623      	mov	r3, r4
 800d252:	4641      	mov	r1, r8
 800d254:	4638      	mov	r0, r7
 800d256:	f006 f991 	bl	801357c <rcl_init>
 800d25a:	4605      	mov	r5, r0
 800d25c:	b960      	cbnz	r0, 800d278 <rclc_support_init_with_options+0x50>
 800d25e:	60a6      	str	r6, [r4, #8]
 800d260:	4632      	mov	r2, r6
 800d262:	f104 010c 	add.w	r1, r4, #12
 800d266:	2003      	movs	r0, #3
 800d268:	f006 ff90 	bl	801418c <rcl_clock_init>
 800d26c:	4605      	mov	r5, r0
 800d26e:	b918      	cbnz	r0, 800d278 <rclc_support_init_with_options+0x50>
 800d270:	4628      	mov	r0, r5
 800d272:	b003      	add	sp, #12
 800d274:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d278:	f000 f946 	bl	800d508 <rcutils_reset_error>
 800d27c:	4628      	mov	r0, r5
 800d27e:	b003      	add	sp, #12
 800d280:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d284:	250b      	movs	r5, #11
 800d286:	4628      	mov	r0, r5
 800d288:	b003      	add	sp, #12
 800d28a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d28e:	bf00      	nop

0800d290 <rclc_node_init_default>:
 800d290:	b3b8      	cbz	r0, 800d302 <rclc_node_init_default+0x72>
 800d292:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d296:	460d      	mov	r5, r1
 800d298:	b0a1      	sub	sp, #132	@ 0x84
 800d29a:	b329      	cbz	r1, 800d2e8 <rclc_node_init_default+0x58>
 800d29c:	4616      	mov	r6, r2
 800d29e:	b31a      	cbz	r2, 800d2e8 <rclc_node_init_default+0x58>
 800d2a0:	461f      	mov	r7, r3
 800d2a2:	b30b      	cbz	r3, 800d2e8 <rclc_node_init_default+0x58>
 800d2a4:	f10d 0810 	add.w	r8, sp, #16
 800d2a8:	4604      	mov	r4, r0
 800d2aa:	4640      	mov	r0, r8
 800d2ac:	f006 fa8c 	bl	80137c8 <rcl_get_zero_initialized_node>
 800d2b0:	e898 0003 	ldmia.w	r8, {r0, r1}
 800d2b4:	f10d 0918 	add.w	r9, sp, #24
 800d2b8:	e884 0003 	stmia.w	r4, {r0, r1}
 800d2bc:	4648      	mov	r0, r9
 800d2be:	f006 fbfb 	bl	8013ab8 <rcl_node_get_default_options>
 800d2c2:	4640      	mov	r0, r8
 800d2c4:	f006 fa80 	bl	80137c8 <rcl_get_zero_initialized_node>
 800d2c8:	f8cd 9000 	str.w	r9, [sp]
 800d2cc:	e898 0003 	ldmia.w	r8, {r0, r1}
 800d2d0:	463b      	mov	r3, r7
 800d2d2:	e884 0003 	stmia.w	r4, {r0, r1}
 800d2d6:	4632      	mov	r2, r6
 800d2d8:	4629      	mov	r1, r5
 800d2da:	4620      	mov	r0, r4
 800d2dc:	f006 fa7e 	bl	80137dc <rcl_node_init>
 800d2e0:	b930      	cbnz	r0, 800d2f0 <rclc_node_init_default+0x60>
 800d2e2:	b021      	add	sp, #132	@ 0x84
 800d2e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d2e8:	200b      	movs	r0, #11
 800d2ea:	b021      	add	sp, #132	@ 0x84
 800d2ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d2f0:	9003      	str	r0, [sp, #12]
 800d2f2:	f000 f909 	bl	800d508 <rcutils_reset_error>
 800d2f6:	f000 f907 	bl	800d508 <rcutils_reset_error>
 800d2fa:	9803      	ldr	r0, [sp, #12]
 800d2fc:	b021      	add	sp, #132	@ 0x84
 800d2fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d302:	200b      	movs	r0, #11
 800d304:	4770      	bx	lr
 800d306:	bf00      	nop

0800d308 <rclc_publisher_init_best_effort>:
 800d308:	b368      	cbz	r0, 800d366 <rclc_publisher_init_best_effort+0x5e>
 800d30a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d30e:	460d      	mov	r5, r1
 800d310:	b0a0      	sub	sp, #128	@ 0x80
 800d312:	b321      	cbz	r1, 800d35e <rclc_publisher_init_best_effort+0x56>
 800d314:	4616      	mov	r6, r2
 800d316:	b312      	cbz	r2, 800d35e <rclc_publisher_init_best_effort+0x56>
 800d318:	461f      	mov	r7, r3
 800d31a:	b303      	cbz	r3, 800d35e <rclc_publisher_init_best_effort+0x56>
 800d31c:	4604      	mov	r4, r0
 800d31e:	f7ff f81f 	bl	800c360 <rcl_get_zero_initialized_publisher>
 800d322:	f10d 0810 	add.w	r8, sp, #16
 800d326:	6020      	str	r0, [r4, #0]
 800d328:	4640      	mov	r0, r8
 800d32a:	f7ff f8b5 	bl	800c498 <rcl_publisher_get_default_options>
 800d32e:	490f      	ldr	r1, [pc, #60]	@ (800d36c <rclc_publisher_init_best_effort+0x64>)
 800d330:	2250      	movs	r2, #80	@ 0x50
 800d332:	4640      	mov	r0, r8
 800d334:	f00c f8b5 	bl	80194a2 <memcpy>
 800d338:	f8cd 8000 	str.w	r8, [sp]
 800d33c:	463b      	mov	r3, r7
 800d33e:	4632      	mov	r2, r6
 800d340:	4629      	mov	r1, r5
 800d342:	4620      	mov	r0, r4
 800d344:	f7ff f812 	bl	800c36c <rcl_publisher_init>
 800d348:	b910      	cbnz	r0, 800d350 <rclc_publisher_init_best_effort+0x48>
 800d34a:	b020      	add	sp, #128	@ 0x80
 800d34c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d350:	9003      	str	r0, [sp, #12]
 800d352:	f000 f8d9 	bl	800d508 <rcutils_reset_error>
 800d356:	9803      	ldr	r0, [sp, #12]
 800d358:	b020      	add	sp, #128	@ 0x80
 800d35a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d35e:	200b      	movs	r0, #11
 800d360:	b020      	add	sp, #128	@ 0x80
 800d362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d366:	200b      	movs	r0, #11
 800d368:	4770      	bx	lr
 800d36a:	bf00      	nop
 800d36c:	0801b1b0 	.word	0x0801b1b0

0800d370 <rclc_service_init_default>:
 800d370:	b368      	cbz	r0, 800d3ce <rclc_service_init_default+0x5e>
 800d372:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d376:	460d      	mov	r5, r1
 800d378:	b09e      	sub	sp, #120	@ 0x78
 800d37a:	b321      	cbz	r1, 800d3c6 <rclc_service_init_default+0x56>
 800d37c:	4616      	mov	r6, r2
 800d37e:	b312      	cbz	r2, 800d3c6 <rclc_service_init_default+0x56>
 800d380:	461f      	mov	r7, r3
 800d382:	b303      	cbz	r3, 800d3c6 <rclc_service_init_default+0x56>
 800d384:	4604      	mov	r4, r0
 800d386:	f006 fd67 	bl	8013e58 <rcl_get_zero_initialized_service>
 800d38a:	f10d 0810 	add.w	r8, sp, #16
 800d38e:	6020      	str	r0, [r4, #0]
 800d390:	4640      	mov	r0, r8
 800d392:	f006 fdef 	bl	8013f74 <rcl_service_get_default_options>
 800d396:	490f      	ldr	r1, [pc, #60]	@ (800d3d4 <rclc_service_init_default+0x64>)
 800d398:	2250      	movs	r2, #80	@ 0x50
 800d39a:	4640      	mov	r0, r8
 800d39c:	f00c f881 	bl	80194a2 <memcpy>
 800d3a0:	f8cd 8000 	str.w	r8, [sp]
 800d3a4:	463b      	mov	r3, r7
 800d3a6:	4632      	mov	r2, r6
 800d3a8:	4629      	mov	r1, r5
 800d3aa:	4620      	mov	r0, r4
 800d3ac:	f006 fd5a 	bl	8013e64 <rcl_service_init>
 800d3b0:	b910      	cbnz	r0, 800d3b8 <rclc_service_init_default+0x48>
 800d3b2:	b01e      	add	sp, #120	@ 0x78
 800d3b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3b8:	9003      	str	r0, [sp, #12]
 800d3ba:	f000 f8a5 	bl	800d508 <rcutils_reset_error>
 800d3be:	9803      	ldr	r0, [sp, #12]
 800d3c0:	b01e      	add	sp, #120	@ 0x78
 800d3c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3c6:	200b      	movs	r0, #11
 800d3c8:	b01e      	add	sp, #120	@ 0x78
 800d3ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3ce:	200b      	movs	r0, #11
 800d3d0:	4770      	bx	lr
 800d3d2:	bf00      	nop
 800d3d4:	0801b200 	.word	0x0801b200

0800d3d8 <rclc_timer_init_default>:
 800d3d8:	b360      	cbz	r0, 800d434 <rclc_timer_init_default+0x5c>
 800d3da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3de:	460e      	mov	r6, r1
 800d3e0:	b08a      	sub	sp, #40	@ 0x28
 800d3e2:	b319      	cbz	r1, 800d42c <rclc_timer_init_default+0x54>
 800d3e4:	4690      	mov	r8, r2
 800d3e6:	461f      	mov	r7, r3
 800d3e8:	4605      	mov	r5, r0
 800d3ea:	f007 f8ad 	bl	8014548 <rcl_get_zero_initialized_timer>
 800d3ee:	68b4      	ldr	r4, [r6, #8]
 800d3f0:	6028      	str	r0, [r5, #0]
 800d3f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d3f4:	f10d 0c0c 	add.w	ip, sp, #12
 800d3f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d3fc:	6823      	ldr	r3, [r4, #0]
 800d3fe:	f8cc 3000 	str.w	r3, [ip]
 800d402:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d404:	9302      	str	r3, [sp, #8]
 800d406:	e9cd 8700 	strd	r8, r7, [sp]
 800d40a:	4628      	mov	r0, r5
 800d40c:	4632      	mov	r2, r6
 800d40e:	f106 010c 	add.w	r1, r6, #12
 800d412:	f007 f8a1 	bl	8014558 <rcl_timer_init>
 800d416:	b910      	cbnz	r0, 800d41e <rclc_timer_init_default+0x46>
 800d418:	b00a      	add	sp, #40	@ 0x28
 800d41a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d41e:	9009      	str	r0, [sp, #36]	@ 0x24
 800d420:	f000 f872 	bl	800d508 <rcutils_reset_error>
 800d424:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d426:	b00a      	add	sp, #40	@ 0x28
 800d428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d42c:	200b      	movs	r0, #11
 800d42e:	b00a      	add	sp, #40	@ 0x28
 800d430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d434:	200b      	movs	r0, #11
 800d436:	4770      	bx	lr

0800d438 <__default_zero_allocate>:
 800d438:	f00b ba80 	b.w	801893c <calloc>

0800d43c <__default_reallocate>:
 800d43c:	f00b bc1e 	b.w	8018c7c <realloc>

0800d440 <__default_deallocate>:
 800d440:	f00b bafa 	b.w	8018a38 <free>

0800d444 <__default_allocate>:
 800d444:	f00b baf0 	b.w	8018a28 <malloc>

0800d448 <rcutils_get_zero_initialized_allocator>:
 800d448:	b510      	push	{r4, lr}
 800d44a:	4c05      	ldr	r4, [pc, #20]	@ (800d460 <rcutils_get_zero_initialized_allocator+0x18>)
 800d44c:	4686      	mov	lr, r0
 800d44e:	4684      	mov	ip, r0
 800d450:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d452:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d456:	6823      	ldr	r3, [r4, #0]
 800d458:	f8cc 3000 	str.w	r3, [ip]
 800d45c:	4670      	mov	r0, lr
 800d45e:	bd10      	pop	{r4, pc}
 800d460:	0801b250 	.word	0x0801b250

0800d464 <rcutils_set_default_allocator>:
 800d464:	b1a8      	cbz	r0, 800d492 <rcutils_set_default_allocator+0x2e>
 800d466:	6802      	ldr	r2, [r0, #0]
 800d468:	b1a2      	cbz	r2, 800d494 <rcutils_set_default_allocator+0x30>
 800d46a:	6841      	ldr	r1, [r0, #4]
 800d46c:	b1a1      	cbz	r1, 800d498 <rcutils_set_default_allocator+0x34>
 800d46e:	b410      	push	{r4}
 800d470:	68c4      	ldr	r4, [r0, #12]
 800d472:	b164      	cbz	r4, 800d48e <rcutils_set_default_allocator+0x2a>
 800d474:	6880      	ldr	r0, [r0, #8]
 800d476:	b138      	cbz	r0, 800d488 <rcutils_set_default_allocator+0x24>
 800d478:	4b08      	ldr	r3, [pc, #32]	@ (800d49c <rcutils_set_default_allocator+0x38>)
 800d47a:	601a      	str	r2, [r3, #0]
 800d47c:	2200      	movs	r2, #0
 800d47e:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800d482:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800d486:	2001      	movs	r0, #1
 800d488:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d48c:	4770      	bx	lr
 800d48e:	4620      	mov	r0, r4
 800d490:	e7fa      	b.n	800d488 <rcutils_set_default_allocator+0x24>
 800d492:	4770      	bx	lr
 800d494:	4610      	mov	r0, r2
 800d496:	4770      	bx	lr
 800d498:	4608      	mov	r0, r1
 800d49a:	4770      	bx	lr
 800d49c:	20000354 	.word	0x20000354

0800d4a0 <rcutils_get_default_allocator>:
 800d4a0:	b510      	push	{r4, lr}
 800d4a2:	4c05      	ldr	r4, [pc, #20]	@ (800d4b8 <rcutils_get_default_allocator+0x18>)
 800d4a4:	4686      	mov	lr, r0
 800d4a6:	4684      	mov	ip, r0
 800d4a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d4aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d4ae:	6823      	ldr	r3, [r4, #0]
 800d4b0:	f8cc 3000 	str.w	r3, [ip]
 800d4b4:	4670      	mov	r0, lr
 800d4b6:	bd10      	pop	{r4, pc}
 800d4b8:	20000354 	.word	0x20000354

0800d4bc <rcutils_allocator_is_valid>:
 800d4bc:	b158      	cbz	r0, 800d4d6 <rcutils_allocator_is_valid+0x1a>
 800d4be:	6803      	ldr	r3, [r0, #0]
 800d4c0:	b143      	cbz	r3, 800d4d4 <rcutils_allocator_is_valid+0x18>
 800d4c2:	6843      	ldr	r3, [r0, #4]
 800d4c4:	b133      	cbz	r3, 800d4d4 <rcutils_allocator_is_valid+0x18>
 800d4c6:	68c3      	ldr	r3, [r0, #12]
 800d4c8:	b123      	cbz	r3, 800d4d4 <rcutils_allocator_is_valid+0x18>
 800d4ca:	6880      	ldr	r0, [r0, #8]
 800d4cc:	3800      	subs	r0, #0
 800d4ce:	bf18      	it	ne
 800d4d0:	2001      	movne	r0, #1
 800d4d2:	4770      	bx	lr
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	4770      	bx	lr

0800d4d8 <rcutils_get_error_string>:
 800d4d8:	4b06      	ldr	r3, [pc, #24]	@ (800d4f4 <rcutils_get_error_string+0x1c>)
 800d4da:	781b      	ldrb	r3, [r3, #0]
 800d4dc:	b13b      	cbz	r3, 800d4ee <rcutils_get_error_string+0x16>
 800d4de:	4b06      	ldr	r3, [pc, #24]	@ (800d4f8 <rcutils_get_error_string+0x20>)
 800d4e0:	781a      	ldrb	r2, [r3, #0]
 800d4e2:	b90a      	cbnz	r2, 800d4e8 <rcutils_get_error_string+0x10>
 800d4e4:	2201      	movs	r2, #1
 800d4e6:	701a      	strb	r2, [r3, #0]
 800d4e8:	4b04      	ldr	r3, [pc, #16]	@ (800d4fc <rcutils_get_error_string+0x24>)
 800d4ea:	7818      	ldrb	r0, [r3, #0]
 800d4ec:	4770      	bx	lr
 800d4ee:	4b04      	ldr	r3, [pc, #16]	@ (800d500 <rcutils_get_error_string+0x28>)
 800d4f0:	7818      	ldrb	r0, [r3, #0]
 800d4f2:	4770      	bx	lr
 800d4f4:	20006cf8 	.word	0x20006cf8
 800d4f8:	20006d11 	.word	0x20006d11
 800d4fc:	20006d10 	.word	0x20006d10
 800d500:	0801aae0 	.word	0x0801aae0
 800d504:	00000000 	.word	0x00000000

0800d508 <rcutils_reset_error>:
 800d508:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800d528 <rcutils_reset_error+0x20>
 800d50c:	4a08      	ldr	r2, [pc, #32]	@ (800d530 <rcutils_reset_error+0x28>)
 800d50e:	4809      	ldr	r0, [pc, #36]	@ (800d534 <rcutils_reset_error+0x2c>)
 800d510:	4909      	ldr	r1, [pc, #36]	@ (800d538 <rcutils_reset_error+0x30>)
 800d512:	2300      	movs	r3, #0
 800d514:	8013      	strh	r3, [r2, #0]
 800d516:	ed82 7b02 	vstr	d7, [r2, #8]
 800d51a:	4a08      	ldr	r2, [pc, #32]	@ (800d53c <rcutils_reset_error+0x34>)
 800d51c:	7003      	strb	r3, [r0, #0]
 800d51e:	700b      	strb	r3, [r1, #0]
 800d520:	7013      	strb	r3, [r2, #0]
 800d522:	4770      	bx	lr
 800d524:	f3af 8000 	nop.w
	...
 800d530:	20006d00 	.word	0x20006d00
 800d534:	20006d11 	.word	0x20006d11
 800d538:	20006d10 	.word	0x20006d10
 800d53c:	20006cf8 	.word	0x20006cf8

0800d540 <rcutils_system_time_now>:
 800d540:	b308      	cbz	r0, 800d586 <rcutils_system_time_now+0x46>
 800d542:	b570      	push	{r4, r5, r6, lr}
 800d544:	b084      	sub	sp, #16
 800d546:	4604      	mov	r4, r0
 800d548:	4669      	mov	r1, sp
 800d54a:	2001      	movs	r0, #1
 800d54c:	f7f4 fdb0 	bl	80020b0 <clock_gettime>
 800d550:	e9dd 3500 	ldrd	r3, r5, [sp]
 800d554:	2d00      	cmp	r5, #0
 800d556:	db13      	blt.n	800d580 <rcutils_system_time_now+0x40>
 800d558:	9902      	ldr	r1, [sp, #8]
 800d55a:	2900      	cmp	r1, #0
 800d55c:	db0d      	blt.n	800d57a <rcutils_system_time_now+0x3a>
 800d55e:	4e0b      	ldr	r6, [pc, #44]	@ (800d58c <rcutils_system_time_now+0x4c>)
 800d560:	fba3 3206 	umull	r3, r2, r3, r6
 800d564:	185b      	adds	r3, r3, r1
 800d566:	fb06 2205 	mla	r2, r6, r5, r2
 800d56a:	f04f 0000 	mov.w	r0, #0
 800d56e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800d572:	e9c4 3200 	strd	r3, r2, [r4]
 800d576:	b004      	add	sp, #16
 800d578:	bd70      	pop	{r4, r5, r6, pc}
 800d57a:	ea53 0205 	orrs.w	r2, r3, r5
 800d57e:	d1ee      	bne.n	800d55e <rcutils_system_time_now+0x1e>
 800d580:	2002      	movs	r0, #2
 800d582:	b004      	add	sp, #16
 800d584:	bd70      	pop	{r4, r5, r6, pc}
 800d586:	200b      	movs	r0, #11
 800d588:	4770      	bx	lr
 800d58a:	bf00      	nop
 800d58c:	3b9aca00 	.word	0x3b9aca00

0800d590 <rcutils_steady_time_now>:
 800d590:	b308      	cbz	r0, 800d5d6 <rcutils_steady_time_now+0x46>
 800d592:	b570      	push	{r4, r5, r6, lr}
 800d594:	b084      	sub	sp, #16
 800d596:	4604      	mov	r4, r0
 800d598:	4669      	mov	r1, sp
 800d59a:	2000      	movs	r0, #0
 800d59c:	f7f4 fd88 	bl	80020b0 <clock_gettime>
 800d5a0:	e9dd 3500 	ldrd	r3, r5, [sp]
 800d5a4:	2d00      	cmp	r5, #0
 800d5a6:	db13      	blt.n	800d5d0 <rcutils_steady_time_now+0x40>
 800d5a8:	9902      	ldr	r1, [sp, #8]
 800d5aa:	2900      	cmp	r1, #0
 800d5ac:	db0d      	blt.n	800d5ca <rcutils_steady_time_now+0x3a>
 800d5ae:	4e0b      	ldr	r6, [pc, #44]	@ (800d5dc <rcutils_steady_time_now+0x4c>)
 800d5b0:	fba3 3206 	umull	r3, r2, r3, r6
 800d5b4:	185b      	adds	r3, r3, r1
 800d5b6:	fb06 2205 	mla	r2, r6, r5, r2
 800d5ba:	f04f 0000 	mov.w	r0, #0
 800d5be:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800d5c2:	e9c4 3200 	strd	r3, r2, [r4]
 800d5c6:	b004      	add	sp, #16
 800d5c8:	bd70      	pop	{r4, r5, r6, pc}
 800d5ca:	ea53 0205 	orrs.w	r2, r3, r5
 800d5ce:	d1ee      	bne.n	800d5ae <rcutils_steady_time_now+0x1e>
 800d5d0:	2002      	movs	r0, #2
 800d5d2:	b004      	add	sp, #16
 800d5d4:	bd70      	pop	{r4, r5, r6, pc}
 800d5d6:	200b      	movs	r0, #11
 800d5d8:	4770      	bx	lr
 800d5da:	bf00      	nop
 800d5dc:	3b9aca00 	.word	0x3b9aca00

0800d5e0 <rmw_get_zero_initialized_init_options>:
 800d5e0:	b510      	push	{r4, lr}
 800d5e2:	2238      	movs	r2, #56	@ 0x38
 800d5e4:	4604      	mov	r4, r0
 800d5e6:	2100      	movs	r1, #0
 800d5e8:	f00b fe92 	bl	8019310 <memset>
 800d5ec:	f104 0010 	add.w	r0, r4, #16
 800d5f0:	f000 f80a 	bl	800d608 <rmw_get_default_security_options>
 800d5f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d5f8:	60e3      	str	r3, [r4, #12]
 800d5fa:	4620      	mov	r0, r4
 800d5fc:	bd10      	pop	{r4, pc}
 800d5fe:	bf00      	nop

0800d600 <rmw_get_default_publisher_options>:
 800d600:	2200      	movs	r2, #0
 800d602:	6002      	str	r2, [r0, #0]
 800d604:	7102      	strb	r2, [r0, #4]
 800d606:	4770      	bx	lr

0800d608 <rmw_get_default_security_options>:
 800d608:	2200      	movs	r2, #0
 800d60a:	7002      	strb	r2, [r0, #0]
 800d60c:	6042      	str	r2, [r0, #4]
 800d60e:	4770      	bx	lr

0800d610 <rmw_uros_set_custom_transport>:
 800d610:	b470      	push	{r4, r5, r6}
 800d612:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800d616:	b162      	cbz	r2, 800d632 <rmw_uros_set_custom_transport+0x22>
 800d618:	b15b      	cbz	r3, 800d632 <rmw_uros_set_custom_transport+0x22>
 800d61a:	b155      	cbz	r5, 800d632 <rmw_uros_set_custom_transport+0x22>
 800d61c:	b14e      	cbz	r6, 800d632 <rmw_uros_set_custom_transport+0x22>
 800d61e:	4c06      	ldr	r4, [pc, #24]	@ (800d638 <rmw_uros_set_custom_transport+0x28>)
 800d620:	7020      	strb	r0, [r4, #0]
 800d622:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800d626:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800d62a:	6166      	str	r6, [r4, #20]
 800d62c:	2000      	movs	r0, #0
 800d62e:	bc70      	pop	{r4, r5, r6}
 800d630:	4770      	bx	lr
 800d632:	200b      	movs	r0, #11
 800d634:	bc70      	pop	{r4, r5, r6}
 800d636:	4770      	bx	lr
 800d638:	20006d14 	.word	0x20006d14

0800d63c <rmw_init_options_init>:
 800d63c:	b084      	sub	sp, #16
 800d63e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d640:	b083      	sub	sp, #12
 800d642:	ad09      	add	r5, sp, #36	@ 0x24
 800d644:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800d648:	b130      	cbz	r0, 800d658 <rmw_init_options_init+0x1c>
 800d64a:	4604      	mov	r4, r0
 800d64c:	4628      	mov	r0, r5
 800d64e:	f7ff ff35 	bl	800d4bc <rcutils_allocator_is_valid>
 800d652:	b108      	cbz	r0, 800d658 <rmw_init_options_init+0x1c>
 800d654:	68a6      	ldr	r6, [r4, #8]
 800d656:	b12e      	cbz	r6, 800d664 <rmw_init_options_init+0x28>
 800d658:	200b      	movs	r0, #11
 800d65a:	b003      	add	sp, #12
 800d65c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d660:	b004      	add	sp, #16
 800d662:	4770      	bx	lr
 800d664:	2200      	movs	r2, #0
 800d666:	2300      	movs	r3, #0
 800d668:	e9c4 2300 	strd	r2, r3, [r4]
 800d66c:	4b22      	ldr	r3, [pc, #136]	@ (800d6f8 <rmw_init_options_init+0xbc>)
 800d66e:	f8df e098 	ldr.w	lr, [pc, #152]	@ 800d708 <rmw_init_options_init+0xcc>
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	60a3      	str	r3, [r4, #8]
 800d676:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d678:	f104 0c20 	add.w	ip, r4, #32
 800d67c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d680:	466f      	mov	r7, sp
 800d682:	682b      	ldr	r3, [r5, #0]
 800d684:	f8cc 3000 	str.w	r3, [ip]
 800d688:	4638      	mov	r0, r7
 800d68a:	f8c4 e01c 	str.w	lr, [r4, #28]
 800d68e:	60e6      	str	r6, [r4, #12]
 800d690:	f7ff ffba 	bl	800d608 <rmw_get_default_security_options>
 800d694:	e897 0003 	ldmia.w	r7, {r0, r1}
 800d698:	f104 0310 	add.w	r3, r4, #16
 800d69c:	e883 0003 	stmia.w	r3, {r0, r1}
 800d6a0:	2203      	movs	r2, #3
 800d6a2:	4816      	ldr	r0, [pc, #88]	@ (800d6fc <rmw_init_options_init+0xc0>)
 800d6a4:	4916      	ldr	r1, [pc, #88]	@ (800d700 <rmw_init_options_init+0xc4>)
 800d6a6:	7626      	strb	r6, [r4, #24]
 800d6a8:	f000 ffbc 	bl	800e624 <rmw_uxrce_init_init_options_impl_memory>
 800d6ac:	4813      	ldr	r0, [pc, #76]	@ (800d6fc <rmw_init_options_init+0xc0>)
 800d6ae:	f009 fad7 	bl	8016c60 <get_memory>
 800d6b2:	b1f0      	cbz	r0, 800d6f2 <rmw_init_options_init+0xb6>
 800d6b4:	4a13      	ldr	r2, [pc, #76]	@ (800d704 <rmw_init_options_init+0xc8>)
 800d6b6:	6883      	ldr	r3, [r0, #8]
 800d6b8:	6851      	ldr	r1, [r2, #4]
 800d6ba:	7810      	ldrb	r0, [r2, #0]
 800d6bc:	6363      	str	r3, [r4, #52]	@ 0x34
 800d6be:	7418      	strb	r0, [r3, #16]
 800d6c0:	6159      	str	r1, [r3, #20]
 800d6c2:	68d1      	ldr	r1, [r2, #12]
 800d6c4:	61d9      	str	r1, [r3, #28]
 800d6c6:	6911      	ldr	r1, [r2, #16]
 800d6c8:	6219      	str	r1, [r3, #32]
 800d6ca:	6951      	ldr	r1, [r2, #20]
 800d6cc:	6892      	ldr	r2, [r2, #8]
 800d6ce:	619a      	str	r2, [r3, #24]
 800d6d0:	6259      	str	r1, [r3, #36]	@ 0x24
 800d6d2:	f004 fcc3 	bl	801205c <uxr_nanos>
 800d6d6:	f00b fa65 	bl	8018ba4 <srand>
 800d6da:	f00b fa91 	bl	8018c00 <rand>
 800d6de:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d6e0:	6298      	str	r0, [r3, #40]	@ 0x28
 800d6e2:	2800      	cmp	r0, #0
 800d6e4:	d0f9      	beq.n	800d6da <rmw_init_options_init+0x9e>
 800d6e6:	2000      	movs	r0, #0
 800d6e8:	b003      	add	sp, #12
 800d6ea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d6ee:	b004      	add	sp, #16
 800d6f0:	4770      	bx	lr
 800d6f2:	2001      	movs	r0, #1
 800d6f4:	e7b1      	b.n	800d65a <rmw_init_options_init+0x1e>
 800d6f6:	bf00      	nop
 800d6f8:	0801bda0 	.word	0x0801bda0
 800d6fc:	2000b834 	.word	0x2000b834
 800d700:	20007008 	.word	0x20007008
 800d704:	20006d14 	.word	0x20006d14
 800d708:	0801b264 	.word	0x0801b264

0800d70c <rmw_init_options_copy>:
 800d70c:	b570      	push	{r4, r5, r6, lr}
 800d70e:	b158      	cbz	r0, 800d728 <rmw_init_options_copy+0x1c>
 800d710:	460d      	mov	r5, r1
 800d712:	b149      	cbz	r1, 800d728 <rmw_init_options_copy+0x1c>
 800d714:	4604      	mov	r4, r0
 800d716:	6880      	ldr	r0, [r0, #8]
 800d718:	b120      	cbz	r0, 800d724 <rmw_init_options_copy+0x18>
 800d71a:	4b1e      	ldr	r3, [pc, #120]	@ (800d794 <rmw_init_options_copy+0x88>)
 800d71c:	6819      	ldr	r1, [r3, #0]
 800d71e:	f7f2 fd7f 	bl	8000220 <strcmp>
 800d722:	bb90      	cbnz	r0, 800d78a <rmw_init_options_copy+0x7e>
 800d724:	68ab      	ldr	r3, [r5, #8]
 800d726:	b113      	cbz	r3, 800d72e <rmw_init_options_copy+0x22>
 800d728:	250b      	movs	r5, #11
 800d72a:	4628      	mov	r0, r5
 800d72c:	bd70      	pop	{r4, r5, r6, pc}
 800d72e:	4623      	mov	r3, r4
 800d730:	462a      	mov	r2, r5
 800d732:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800d736:	f8d3 c000 	ldr.w	ip, [r3]
 800d73a:	6858      	ldr	r0, [r3, #4]
 800d73c:	6899      	ldr	r1, [r3, #8]
 800d73e:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800d742:	f8c2 e00c 	str.w	lr, [r2, #12]
 800d746:	3310      	adds	r3, #16
 800d748:	42b3      	cmp	r3, r6
 800d74a:	f8c2 c000 	str.w	ip, [r2]
 800d74e:	6050      	str	r0, [r2, #4]
 800d750:	6091      	str	r1, [r2, #8]
 800d752:	f102 0210 	add.w	r2, r2, #16
 800d756:	d1ee      	bne.n	800d736 <rmw_init_options_copy+0x2a>
 800d758:	6819      	ldr	r1, [r3, #0]
 800d75a:	685b      	ldr	r3, [r3, #4]
 800d75c:	480e      	ldr	r0, [pc, #56]	@ (800d798 <rmw_init_options_copy+0x8c>)
 800d75e:	6053      	str	r3, [r2, #4]
 800d760:	6011      	str	r1, [r2, #0]
 800d762:	f009 fa7d 	bl	8016c60 <get_memory>
 800d766:	b198      	cbz	r0, 800d790 <rmw_init_options_copy+0x84>
 800d768:	6883      	ldr	r3, [r0, #8]
 800d76a:	636b      	str	r3, [r5, #52]	@ 0x34
 800d76c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800d76e:	f102 0c10 	add.w	ip, r2, #16
 800d772:	f103 0410 	add.w	r4, r3, #16
 800d776:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d77a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d77c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800d780:	2500      	movs	r5, #0
 800d782:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d786:	4628      	mov	r0, r5
 800d788:	bd70      	pop	{r4, r5, r6, pc}
 800d78a:	250c      	movs	r5, #12
 800d78c:	4628      	mov	r0, r5
 800d78e:	bd70      	pop	{r4, r5, r6, pc}
 800d790:	2501      	movs	r5, #1
 800d792:	e7ca      	b.n	800d72a <rmw_init_options_copy+0x1e>
 800d794:	0801bda0 	.word	0x0801bda0
 800d798:	2000b834 	.word	0x2000b834

0800d79c <rmw_init_options_fini>:
 800d79c:	2800      	cmp	r0, #0
 800d79e:	d03d      	beq.n	800d81c <rmw_init_options_fini+0x80>
 800d7a0:	b510      	push	{r4, lr}
 800d7a2:	4604      	mov	r4, r0
 800d7a4:	b08e      	sub	sp, #56	@ 0x38
 800d7a6:	3020      	adds	r0, #32
 800d7a8:	f7ff fe88 	bl	800d4bc <rcutils_allocator_is_valid>
 800d7ac:	b360      	cbz	r0, 800d808 <rmw_init_options_fini+0x6c>
 800d7ae:	68a0      	ldr	r0, [r4, #8]
 800d7b0:	b120      	cbz	r0, 800d7bc <rmw_init_options_fini+0x20>
 800d7b2:	4b1c      	ldr	r3, [pc, #112]	@ (800d824 <rmw_init_options_fini+0x88>)
 800d7b4:	6819      	ldr	r1, [r3, #0]
 800d7b6:	f7f2 fd33 	bl	8000220 <strcmp>
 800d7ba:	bb68      	cbnz	r0, 800d818 <rmw_init_options_fini+0x7c>
 800d7bc:	4b1a      	ldr	r3, [pc, #104]	@ (800d828 <rmw_init_options_fini+0x8c>)
 800d7be:	6819      	ldr	r1, [r3, #0]
 800d7c0:	b331      	cbz	r1, 800d810 <rmw_init_options_fini+0x74>
 800d7c2:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800d7c4:	e001      	b.n	800d7ca <rmw_init_options_fini+0x2e>
 800d7c6:	6849      	ldr	r1, [r1, #4]
 800d7c8:	b311      	cbz	r1, 800d810 <rmw_init_options_fini+0x74>
 800d7ca:	688b      	ldr	r3, [r1, #8]
 800d7cc:	429a      	cmp	r2, r3
 800d7ce:	d1fa      	bne.n	800d7c6 <rmw_init_options_fini+0x2a>
 800d7d0:	4815      	ldr	r0, [pc, #84]	@ (800d828 <rmw_init_options_fini+0x8c>)
 800d7d2:	f009 fa55 	bl	8016c80 <put_memory>
 800d7d6:	4668      	mov	r0, sp
 800d7d8:	f7ff ff02 	bl	800d5e0 <rmw_get_zero_initialized_init_options>
 800d7dc:	46ee      	mov	lr, sp
 800d7de:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d7e2:	46a4      	mov	ip, r4
 800d7e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d7e8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d7ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d7f0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d7f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d7f8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800d7fc:	e88c 0003 	stmia.w	ip, {r0, r1}
 800d800:	2300      	movs	r3, #0
 800d802:	4618      	mov	r0, r3
 800d804:	b00e      	add	sp, #56	@ 0x38
 800d806:	bd10      	pop	{r4, pc}
 800d808:	230b      	movs	r3, #11
 800d80a:	4618      	mov	r0, r3
 800d80c:	b00e      	add	sp, #56	@ 0x38
 800d80e:	bd10      	pop	{r4, pc}
 800d810:	2301      	movs	r3, #1
 800d812:	4618      	mov	r0, r3
 800d814:	b00e      	add	sp, #56	@ 0x38
 800d816:	bd10      	pop	{r4, pc}
 800d818:	230c      	movs	r3, #12
 800d81a:	e7f2      	b.n	800d802 <rmw_init_options_fini+0x66>
 800d81c:	230b      	movs	r3, #11
 800d81e:	4618      	mov	r0, r3
 800d820:	4770      	bx	lr
 800d822:	bf00      	nop
 800d824:	0801bda0 	.word	0x0801bda0
 800d828:	2000b834 	.word	0x2000b834

0800d82c <rmw_init>:
 800d82c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d830:	b083      	sub	sp, #12
 800d832:	2800      	cmp	r0, #0
 800d834:	f000 80d3 	beq.w	800d9de <rmw_init+0x1b2>
 800d838:	460e      	mov	r6, r1
 800d83a:	2900      	cmp	r1, #0
 800d83c:	f000 80cf 	beq.w	800d9de <rmw_init+0x1b2>
 800d840:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d842:	4605      	mov	r5, r0
 800d844:	2b00      	cmp	r3, #0
 800d846:	f000 80ca 	beq.w	800d9de <rmw_init+0x1b2>
 800d84a:	4b78      	ldr	r3, [pc, #480]	@ (800da2c <rmw_init+0x200>)
 800d84c:	6880      	ldr	r0, [r0, #8]
 800d84e:	681f      	ldr	r7, [r3, #0]
 800d850:	b128      	cbz	r0, 800d85e <rmw_init+0x32>
 800d852:	4639      	mov	r1, r7
 800d854:	f7f2 fce4 	bl	8000220 <strcmp>
 800d858:	2800      	cmp	r0, #0
 800d85a:	f040 80ca 	bne.w	800d9f2 <rmw_init+0x1c6>
 800d85e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d862:	4c73      	ldr	r4, [pc, #460]	@ (800da30 <rmw_init+0x204>)
 800d864:	4973      	ldr	r1, [pc, #460]	@ (800da34 <rmw_init+0x208>)
 800d866:	4874      	ldr	r0, [pc, #464]	@ (800da38 <rmw_init+0x20c>)
 800d868:	60b7      	str	r7, [r6, #8]
 800d86a:	e9c6 2300 	strd	r2, r3, [r6]
 800d86e:	68eb      	ldr	r3, [r5, #12]
 800d870:	64b3      	str	r3, [r6, #72]	@ 0x48
 800d872:	2201      	movs	r2, #1
 800d874:	f000 fe76 	bl	800e564 <rmw_uxrce_init_session_memory>
 800d878:	4620      	mov	r0, r4
 800d87a:	4970      	ldr	r1, [pc, #448]	@ (800da3c <rmw_init+0x210>)
 800d87c:	2204      	movs	r2, #4
 800d87e:	f000 feb1 	bl	800e5e4 <rmw_uxrce_init_static_input_buffer_memory>
 800d882:	f04f 0800 	mov.w	r8, #0
 800d886:	486c      	ldr	r0, [pc, #432]	@ (800da38 <rmw_init+0x20c>)
 800d888:	f884 800d 	strb.w	r8, [r4, #13]
 800d88c:	f009 f9e8 	bl	8016c60 <get_memory>
 800d890:	2800      	cmp	r0, #0
 800d892:	f000 80a9 	beq.w	800d9e8 <rmw_init+0x1bc>
 800d896:	6884      	ldr	r4, [r0, #8]
 800d898:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800d89a:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800d89c:	f890 c010 	ldrb.w	ip, [r0, #16]
 800d8a0:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800d8a4:	9101      	str	r1, [sp, #4]
 800d8a6:	6a00      	ldr	r0, [r0, #32]
 800d8a8:	9000      	str	r0, [sp, #0]
 800d8aa:	f104 0910 	add.w	r9, r4, #16
 800d8ae:	4661      	mov	r1, ip
 800d8b0:	4648      	mov	r0, r9
 800d8b2:	f002 fb07 	bl	800fec4 <uxr_set_custom_transport_callbacks>
 800d8b6:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800d8ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d8be:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800d8c2:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800d8c6:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800d8ca:	495d      	ldr	r1, [pc, #372]	@ (800da40 <rmw_init+0x214>)
 800d8cc:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800d8d0:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800d8d4:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800d8d8:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800d8dc:	4859      	ldr	r0, [pc, #356]	@ (800da44 <rmw_init+0x218>)
 800d8de:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800d8e2:	2201      	movs	r2, #1
 800d8e4:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800d8e6:	f000 fe1d 	bl	800e524 <rmw_uxrce_init_node_memory>
 800d8ea:	4957      	ldr	r1, [pc, #348]	@ (800da48 <rmw_init+0x21c>)
 800d8ec:	4857      	ldr	r0, [pc, #348]	@ (800da4c <rmw_init+0x220>)
 800d8ee:	2205      	movs	r2, #5
 800d8f0:	f000 fdf8 	bl	800e4e4 <rmw_uxrce_init_subscription_memory>
 800d8f4:	4956      	ldr	r1, [pc, #344]	@ (800da50 <rmw_init+0x224>)
 800d8f6:	4857      	ldr	r0, [pc, #348]	@ (800da54 <rmw_init+0x228>)
 800d8f8:	220a      	movs	r2, #10
 800d8fa:	f000 fdd3 	bl	800e4a4 <rmw_uxrce_init_publisher_memory>
 800d8fe:	4956      	ldr	r1, [pc, #344]	@ (800da58 <rmw_init+0x22c>)
 800d900:	4856      	ldr	r0, [pc, #344]	@ (800da5c <rmw_init+0x230>)
 800d902:	2202      	movs	r2, #2
 800d904:	f000 fd8e 	bl	800e424 <rmw_uxrce_init_service_memory>
 800d908:	4955      	ldr	r1, [pc, #340]	@ (800da60 <rmw_init+0x234>)
 800d90a:	4856      	ldr	r0, [pc, #344]	@ (800da64 <rmw_init+0x238>)
 800d90c:	2201      	movs	r2, #1
 800d90e:	f000 fda9 	bl	800e464 <rmw_uxrce_init_client_memory>
 800d912:	4955      	ldr	r1, [pc, #340]	@ (800da68 <rmw_init+0x23c>)
 800d914:	4855      	ldr	r0, [pc, #340]	@ (800da6c <rmw_init+0x240>)
 800d916:	220f      	movs	r2, #15
 800d918:	f000 fe44 	bl	800e5a4 <rmw_uxrce_init_topic_memory>
 800d91c:	4954      	ldr	r1, [pc, #336]	@ (800da70 <rmw_init+0x244>)
 800d91e:	4855      	ldr	r0, [pc, #340]	@ (800da74 <rmw_init+0x248>)
 800d920:	2203      	movs	r2, #3
 800d922:	f000 fe7f 	bl	800e624 <rmw_uxrce_init_init_options_impl_memory>
 800d926:	4954      	ldr	r1, [pc, #336]	@ (800da78 <rmw_init+0x24c>)
 800d928:	4854      	ldr	r0, [pc, #336]	@ (800da7c <rmw_init+0x250>)
 800d92a:	2204      	movs	r2, #4
 800d92c:	f000 fe9a 	bl	800e664 <rmw_uxrce_init_wait_set_memory>
 800d930:	4953      	ldr	r1, [pc, #332]	@ (800da80 <rmw_init+0x254>)
 800d932:	4854      	ldr	r0, [pc, #336]	@ (800da84 <rmw_init+0x258>)
 800d934:	2204      	movs	r2, #4
 800d936:	f000 feb5 	bl	800e6a4 <rmw_uxrce_init_guard_condition_memory>
 800d93a:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800d93c:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800d93e:	4642      	mov	r2, r8
 800d940:	f000 fd2a 	bl	800e398 <rmw_uxrce_transport_init>
 800d944:	4607      	mov	r7, r0
 800d946:	2800      	cmp	r0, #0
 800d948:	d158      	bne.n	800d9fc <rmw_init+0x1d0>
 800d94a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800d94c:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800d950:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d952:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800d956:	4628      	mov	r0, r5
 800d958:	f002 fcea 	bl	8010330 <uxr_init_session>
 800d95c:	494a      	ldr	r1, [pc, #296]	@ (800da88 <rmw_init+0x25c>)
 800d95e:	4622      	mov	r2, r4
 800d960:	4628      	mov	r0, r5
 800d962:	f002 fd09 	bl	8010378 <uxr_set_topic_callback>
 800d966:	4949      	ldr	r1, [pc, #292]	@ (800da8c <rmw_init+0x260>)
 800d968:	463a      	mov	r2, r7
 800d96a:	4628      	mov	r0, r5
 800d96c:	f002 fd00 	bl	8010370 <uxr_set_status_callback>
 800d970:	4947      	ldr	r1, [pc, #284]	@ (800da90 <rmw_init+0x264>)
 800d972:	463a      	mov	r2, r7
 800d974:	4628      	mov	r0, r5
 800d976:	f002 fd03 	bl	8010380 <uxr_set_request_callback>
 800d97a:	4946      	ldr	r1, [pc, #280]	@ (800da94 <rmw_init+0x268>)
 800d97c:	463a      	mov	r2, r7
 800d97e:	4628      	mov	r0, r5
 800d980:	f002 fd02 	bl	8010388 <uxr_set_reply_callback>
 800d984:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800d988:	2304      	movs	r3, #4
 800d98a:	0092      	lsls	r2, r2, #2
 800d98c:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800d990:	4628      	mov	r0, r5
 800d992:	f002 fd37 	bl	8010404 <uxr_create_input_reliable_stream>
 800d996:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800d99a:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800d99e:	0092      	lsls	r2, r2, #2
 800d9a0:	2304      	movs	r3, #4
 800d9a2:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800d9a6:	4628      	mov	r0, r5
 800d9a8:	f002 fd04 	bl	80103b4 <uxr_create_output_reliable_stream>
 800d9ac:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800d9b0:	4628      	mov	r0, r5
 800d9b2:	f002 fd21 	bl	80103f8 <uxr_create_input_best_effort_stream>
 800d9b6:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800d9ba:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800d9be:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800d9c2:	3114      	adds	r1, #20
 800d9c4:	4628      	mov	r0, r5
 800d9c6:	f002 fce3 	bl	8010390 <uxr_create_output_best_effort_stream>
 800d9ca:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800d9ce:	4628      	mov	r0, r5
 800d9d0:	f003 fad6 	bl	8010f80 <uxr_create_session>
 800d9d4:	b1f8      	cbz	r0, 800da16 <rmw_init+0x1ea>
 800d9d6:	4638      	mov	r0, r7
 800d9d8:	b003      	add	sp, #12
 800d9da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d9de:	270b      	movs	r7, #11
 800d9e0:	4638      	mov	r0, r7
 800d9e2:	b003      	add	sp, #12
 800d9e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d9e8:	2701      	movs	r7, #1
 800d9ea:	4638      	mov	r0, r7
 800d9ec:	b003      	add	sp, #12
 800d9ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d9f2:	270c      	movs	r7, #12
 800d9f4:	4638      	mov	r0, r7
 800d9f6:	b003      	add	sp, #12
 800d9f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d9fc:	4648      	mov	r0, r9
 800d9fe:	f002 faa3 	bl	800ff48 <uxr_close_custom_transport>
 800da02:	480d      	ldr	r0, [pc, #52]	@ (800da38 <rmw_init+0x20c>)
 800da04:	4621      	mov	r1, r4
 800da06:	f009 f93b 	bl	8016c80 <put_memory>
 800da0a:	4638      	mov	r0, r7
 800da0c:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 800da10:	b003      	add	sp, #12
 800da12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da16:	4648      	mov	r0, r9
 800da18:	f002 fa96 	bl	800ff48 <uxr_close_custom_transport>
 800da1c:	4806      	ldr	r0, [pc, #24]	@ (800da38 <rmw_init+0x20c>)
 800da1e:	4621      	mov	r1, r4
 800da20:	f009 f92e 	bl	8016c80 <put_memory>
 800da24:	64f7      	str	r7, [r6, #76]	@ 0x4c
 800da26:	2701      	movs	r7, #1
 800da28:	e7d5      	b.n	800d9d6 <rmw_init+0x1aa>
 800da2a:	bf00      	nop
 800da2c:	0801bda0 	.word	0x0801bda0
 800da30:	2000b884 	.word	0x2000b884
 800da34:	20007b30 	.word	0x20007b30
 800da38:	2000b874 	.word	0x2000b874
 800da3c:	200090d8 	.word	0x200090d8
 800da40:	2000708c 	.word	0x2000708c
 800da44:	2000b844 	.word	0x2000b844
 800da48:	2000b1d8 	.word	0x2000b1d8
 800da4c:	2000b894 	.word	0x2000b894
 800da50:	20007130 	.word	0x20007130
 800da54:	2000b854 	.word	0x2000b854
 800da58:	200079a0 	.word	0x200079a0
 800da5c:	2000b864 	.word	0x2000b864
 800da60:	20006ec0 	.word	0x20006ec0
 800da64:	20006eac 	.word	0x20006eac
 800da68:	2000b610 	.word	0x2000b610
 800da6c:	2000b8a4 	.word	0x2000b8a4
 800da70:	20007008 	.word	0x20007008
 800da74:	2000b834 	.word	0x2000b834
 800da78:	2000b7b4 	.word	0x2000b7b4
 800da7c:	2000b8b4 	.word	0x2000b8b4
 800da80:	20006f88 	.word	0x20006f88
 800da84:	2000b824 	.word	0x2000b824
 800da88:	08016a99 	.word	0x08016a99
 800da8c:	08016a91 	.word	0x08016a91
 800da90:	08016b31 	.word	0x08016b31
 800da94:	08016bcd 	.word	0x08016bcd

0800da98 <rmw_context_fini>:
 800da98:	4b17      	ldr	r3, [pc, #92]	@ (800daf8 <rmw_context_fini+0x60>)
 800da9a:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800da9c:	b570      	push	{r4, r5, r6, lr}
 800da9e:	681c      	ldr	r4, [r3, #0]
 800daa0:	4605      	mov	r5, r0
 800daa2:	b334      	cbz	r4, 800daf2 <rmw_context_fini+0x5a>
 800daa4:	2600      	movs	r6, #0
 800daa6:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800daaa:	6902      	ldr	r2, [r0, #16]
 800daac:	428a      	cmp	r2, r1
 800daae:	d018      	beq.n	800dae2 <rmw_context_fini+0x4a>
 800dab0:	2c00      	cmp	r4, #0
 800dab2:	d1f8      	bne.n	800daa6 <rmw_context_fini+0xe>
 800dab4:	b189      	cbz	r1, 800dada <rmw_context_fini+0x42>
 800dab6:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800daba:	789b      	ldrb	r3, [r3, #2]
 800dabc:	2b01      	cmp	r3, #1
 800dabe:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800dac2:	bf14      	ite	ne
 800dac4:	210a      	movne	r1, #10
 800dac6:	2100      	moveq	r1, #0
 800dac8:	f003 fa32 	bl	8010f30 <uxr_delete_session_retries>
 800dacc:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800dace:	f000 fe09 	bl	800e6e4 <rmw_uxrce_fini_session_memory>
 800dad2:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800dad4:	3010      	adds	r0, #16
 800dad6:	f002 fa37 	bl	800ff48 <uxr_close_custom_transport>
 800dada:	2300      	movs	r3, #0
 800dadc:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800dade:	4630      	mov	r0, r6
 800dae0:	bd70      	pop	{r4, r5, r6, pc}
 800dae2:	3018      	adds	r0, #24
 800dae4:	f000 f89c 	bl	800dc20 <rmw_destroy_node>
 800dae8:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800daea:	4606      	mov	r6, r0
 800daec:	2c00      	cmp	r4, #0
 800daee:	d1da      	bne.n	800daa6 <rmw_context_fini+0xe>
 800daf0:	e7e0      	b.n	800dab4 <rmw_context_fini+0x1c>
 800daf2:	4626      	mov	r6, r4
 800daf4:	e7de      	b.n	800dab4 <rmw_context_fini+0x1c>
 800daf6:	bf00      	nop
 800daf8:	2000b844 	.word	0x2000b844

0800dafc <create_node>:
 800dafc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800db00:	b083      	sub	sp, #12
 800db02:	2b00      	cmp	r3, #0
 800db04:	d05f      	beq.n	800dbc6 <create_node+0xca>
 800db06:	4606      	mov	r6, r0
 800db08:	4835      	ldr	r0, [pc, #212]	@ (800dbe0 <create_node+0xe4>)
 800db0a:	460f      	mov	r7, r1
 800db0c:	4690      	mov	r8, r2
 800db0e:	461d      	mov	r5, r3
 800db10:	f009 f8a6 	bl	8016c60 <get_memory>
 800db14:	2800      	cmp	r0, #0
 800db16:	d056      	beq.n	800dbc6 <create_node+0xca>
 800db18:	6884      	ldr	r4, [r0, #8]
 800db1a:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800db1c:	6123      	str	r3, [r4, #16]
 800db1e:	f009 f907 	bl	8016d30 <rmw_get_implementation_identifier>
 800db22:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800db26:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800db2a:	f8c4 9020 	str.w	r9, [r4, #32]
 800db2e:	4630      	mov	r0, r6
 800db30:	f7f2 fb80 	bl	8000234 <strlen>
 800db34:	1c42      	adds	r2, r0, #1
 800db36:	2a3c      	cmp	r2, #60	@ 0x3c
 800db38:	f104 0518 	add.w	r5, r4, #24
 800db3c:	d840      	bhi.n	800dbc0 <create_node+0xc4>
 800db3e:	4648      	mov	r0, r9
 800db40:	4631      	mov	r1, r6
 800db42:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800db46:	f00b fcac 	bl	80194a2 <memcpy>
 800db4a:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800db4e:	4638      	mov	r0, r7
 800db50:	f7f2 fb70 	bl	8000234 <strlen>
 800db54:	1c42      	adds	r2, r0, #1
 800db56:	2a3c      	cmp	r2, #60	@ 0x3c
 800db58:	d832      	bhi.n	800dbc0 <create_node+0xc4>
 800db5a:	4639      	mov	r1, r7
 800db5c:	4648      	mov	r0, r9
 800db5e:	f00b fca0 	bl	80194a2 <memcpy>
 800db62:	6923      	ldr	r3, [r4, #16]
 800db64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800db68:	2101      	movs	r1, #1
 800db6a:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800db6e:	1842      	adds	r2, r0, r1
 800db70:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800db74:	f002 f9ec 	bl	800ff50 <uxr_object_id>
 800db78:	6160      	str	r0, [r4, #20]
 800db7a:	783b      	ldrb	r3, [r7, #0]
 800db7c:	2b2f      	cmp	r3, #47	@ 0x2f
 800db7e:	d127      	bne.n	800dbd0 <create_node+0xd4>
 800db80:	787b      	ldrb	r3, [r7, #1]
 800db82:	bb2b      	cbnz	r3, 800dbd0 <create_node+0xd4>
 800db84:	4a17      	ldr	r2, [pc, #92]	@ (800dbe4 <create_node+0xe8>)
 800db86:	4818      	ldr	r0, [pc, #96]	@ (800dbe8 <create_node+0xec>)
 800db88:	4633      	mov	r3, r6
 800db8a:	213c      	movs	r1, #60	@ 0x3c
 800db8c:	f00b fa52 	bl	8019034 <sniprintf>
 800db90:	6920      	ldr	r0, [r4, #16]
 800db92:	4915      	ldr	r1, [pc, #84]	@ (800dbe8 <create_node+0xec>)
 800db94:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800db98:	9100      	str	r1, [sp, #0]
 800db9a:	2106      	movs	r1, #6
 800db9c:	9101      	str	r1, [sp, #4]
 800db9e:	6811      	ldr	r1, [r2, #0]
 800dba0:	6962      	ldr	r2, [r4, #20]
 800dba2:	fa1f f388 	uxth.w	r3, r8
 800dba6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dbaa:	f001 ffc7 	bl	800fb3c <uxr_buffer_create_participant_bin>
 800dbae:	4602      	mov	r2, r0
 800dbb0:	6920      	ldr	r0, [r4, #16]
 800dbb2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800dbb6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800dbba:	f000 ff0b 	bl	800e9d4 <run_xrce_session>
 800dbbe:	b918      	cbnz	r0, 800dbc8 <create_node+0xcc>
 800dbc0:	4628      	mov	r0, r5
 800dbc2:	f000 fd95 	bl	800e6f0 <rmw_uxrce_fini_node_memory>
 800dbc6:	2500      	movs	r5, #0
 800dbc8:	4628      	mov	r0, r5
 800dbca:	b003      	add	sp, #12
 800dbcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dbd0:	4a06      	ldr	r2, [pc, #24]	@ (800dbec <create_node+0xf0>)
 800dbd2:	9600      	str	r6, [sp, #0]
 800dbd4:	463b      	mov	r3, r7
 800dbd6:	213c      	movs	r1, #60	@ 0x3c
 800dbd8:	4803      	ldr	r0, [pc, #12]	@ (800dbe8 <create_node+0xec>)
 800dbda:	f00b fa2b 	bl	8019034 <sniprintf>
 800dbde:	e7d7      	b.n	800db90 <create_node+0x94>
 800dbe0:	2000b844 	.word	0x2000b844
 800dbe4:	0801b280 	.word	0x0801b280
 800dbe8:	20006d30 	.word	0x20006d30
 800dbec:	0801b268 	.word	0x0801b268

0800dbf0 <rmw_create_node>:
 800dbf0:	b199      	cbz	r1, 800dc1a <rmw_create_node+0x2a>
 800dbf2:	780b      	ldrb	r3, [r1, #0]
 800dbf4:	468c      	mov	ip, r1
 800dbf6:	b183      	cbz	r3, 800dc1a <rmw_create_node+0x2a>
 800dbf8:	b410      	push	{r4}
 800dbfa:	4614      	mov	r4, r2
 800dbfc:	b14a      	cbz	r2, 800dc12 <rmw_create_node+0x22>
 800dbfe:	7813      	ldrb	r3, [r2, #0]
 800dc00:	b13b      	cbz	r3, 800dc12 <rmw_create_node+0x22>
 800dc02:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800dc04:	4603      	mov	r3, r0
 800dc06:	4621      	mov	r1, r4
 800dc08:	4660      	mov	r0, ip
 800dc0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc0e:	f7ff bf75 	b.w	800dafc <create_node>
 800dc12:	2000      	movs	r0, #0
 800dc14:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc18:	4770      	bx	lr
 800dc1a:	2000      	movs	r0, #0
 800dc1c:	4770      	bx	lr
 800dc1e:	bf00      	nop

0800dc20 <rmw_destroy_node>:
 800dc20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc22:	b328      	cbz	r0, 800dc70 <rmw_destroy_node+0x50>
 800dc24:	4607      	mov	r7, r0
 800dc26:	6800      	ldr	r0, [r0, #0]
 800dc28:	b120      	cbz	r0, 800dc34 <rmw_destroy_node+0x14>
 800dc2a:	4b36      	ldr	r3, [pc, #216]	@ (800dd04 <rmw_destroy_node+0xe4>)
 800dc2c:	6819      	ldr	r1, [r3, #0]
 800dc2e:	f7f2 faf7 	bl	8000220 <strcmp>
 800dc32:	b9e8      	cbnz	r0, 800dc70 <rmw_destroy_node+0x50>
 800dc34:	687d      	ldr	r5, [r7, #4]
 800dc36:	b1dd      	cbz	r5, 800dc70 <rmw_destroy_node+0x50>
 800dc38:	4b33      	ldr	r3, [pc, #204]	@ (800dd08 <rmw_destroy_node+0xe8>)
 800dc3a:	681c      	ldr	r4, [r3, #0]
 800dc3c:	2c00      	cmp	r4, #0
 800dc3e:	d05f      	beq.n	800dd00 <rmw_destroy_node+0xe0>
 800dc40:	2600      	movs	r6, #0
 800dc42:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800dc46:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800dc4a:	429d      	cmp	r5, r3
 800dc4c:	d013      	beq.n	800dc76 <rmw_destroy_node+0x56>
 800dc4e:	2c00      	cmp	r4, #0
 800dc50:	d1f7      	bne.n	800dc42 <rmw_destroy_node+0x22>
 800dc52:	4b2e      	ldr	r3, [pc, #184]	@ (800dd0c <rmw_destroy_node+0xec>)
 800dc54:	681c      	ldr	r4, [r3, #0]
 800dc56:	b1c4      	cbz	r4, 800dc8a <rmw_destroy_node+0x6a>
 800dc58:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800dc5c:	6a0b      	ldr	r3, [r1, #32]
 800dc5e:	429d      	cmp	r5, r3
 800dc60:	d1f9      	bne.n	800dc56 <rmw_destroy_node+0x36>
 800dc62:	317c      	adds	r1, #124	@ 0x7c
 800dc64:	4638      	mov	r0, r7
 800dc66:	f000 fb37 	bl	800e2d8 <rmw_destroy_subscription>
 800dc6a:	2801      	cmp	r0, #1
 800dc6c:	4606      	mov	r6, r0
 800dc6e:	d1f2      	bne.n	800dc56 <rmw_destroy_node+0x36>
 800dc70:	2601      	movs	r6, #1
 800dc72:	4630      	mov	r0, r6
 800dc74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc76:	3184      	adds	r1, #132	@ 0x84
 800dc78:	4638      	mov	r0, r7
 800dc7a:	f000 f9a5 	bl	800dfc8 <rmw_destroy_publisher>
 800dc7e:	2801      	cmp	r0, #1
 800dc80:	4606      	mov	r6, r0
 800dc82:	d0f5      	beq.n	800dc70 <rmw_destroy_node+0x50>
 800dc84:	2c00      	cmp	r4, #0
 800dc86:	d1dc      	bne.n	800dc42 <rmw_destroy_node+0x22>
 800dc88:	e7e3      	b.n	800dc52 <rmw_destroy_node+0x32>
 800dc8a:	4b21      	ldr	r3, [pc, #132]	@ (800dd10 <rmw_destroy_node+0xf0>)
 800dc8c:	681c      	ldr	r4, [r3, #0]
 800dc8e:	b16c      	cbz	r4, 800dcac <rmw_destroy_node+0x8c>
 800dc90:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800dc94:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800dc96:	429d      	cmp	r5, r3
 800dc98:	d1f9      	bne.n	800dc8e <rmw_destroy_node+0x6e>
 800dc9a:	317c      	adds	r1, #124	@ 0x7c
 800dc9c:	4638      	mov	r0, r7
 800dc9e:	f000 fab7 	bl	800e210 <rmw_destroy_service>
 800dca2:	2801      	cmp	r0, #1
 800dca4:	4606      	mov	r6, r0
 800dca6:	d0e3      	beq.n	800dc70 <rmw_destroy_node+0x50>
 800dca8:	2c00      	cmp	r4, #0
 800dcaa:	d1f1      	bne.n	800dc90 <rmw_destroy_node+0x70>
 800dcac:	4b19      	ldr	r3, [pc, #100]	@ (800dd14 <rmw_destroy_node+0xf4>)
 800dcae:	681c      	ldr	r4, [r3, #0]
 800dcb0:	b16c      	cbz	r4, 800dcce <rmw_destroy_node+0xae>
 800dcb2:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800dcb6:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800dcb8:	429d      	cmp	r5, r3
 800dcba:	d1f9      	bne.n	800dcb0 <rmw_destroy_node+0x90>
 800dcbc:	317c      	adds	r1, #124	@ 0x7c
 800dcbe:	4638      	mov	r0, r7
 800dcc0:	f008 fff2 	bl	8016ca8 <rmw_destroy_client>
 800dcc4:	2801      	cmp	r0, #1
 800dcc6:	4606      	mov	r6, r0
 800dcc8:	d0d2      	beq.n	800dc70 <rmw_destroy_node+0x50>
 800dcca:	2c00      	cmp	r4, #0
 800dccc:	d1f1      	bne.n	800dcb2 <rmw_destroy_node+0x92>
 800dcce:	6928      	ldr	r0, [r5, #16]
 800dcd0:	696a      	ldr	r2, [r5, #20]
 800dcd2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800dcd6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dcda:	6819      	ldr	r1, [r3, #0]
 800dcdc:	f001 fee2 	bl	800faa4 <uxr_buffer_delete_entity>
 800dce0:	4602      	mov	r2, r0
 800dce2:	6928      	ldr	r0, [r5, #16]
 800dce4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800dce8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800dcec:	f000 fe72 	bl	800e9d4 <run_xrce_session>
 800dcf0:	2800      	cmp	r0, #0
 800dcf2:	bf08      	it	eq
 800dcf4:	2602      	moveq	r6, #2
 800dcf6:	4638      	mov	r0, r7
 800dcf8:	f000 fcfa 	bl	800e6f0 <rmw_uxrce_fini_node_memory>
 800dcfc:	4630      	mov	r0, r6
 800dcfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd00:	4626      	mov	r6, r4
 800dd02:	e7a6      	b.n	800dc52 <rmw_destroy_node+0x32>
 800dd04:	0801bda0 	.word	0x0801bda0
 800dd08:	2000b854 	.word	0x2000b854
 800dd0c:	2000b894 	.word	0x2000b894
 800dd10:	2000b864 	.word	0x2000b864
 800dd14:	20006eac 	.word	0x20006eac

0800dd18 <rmw_node_get_graph_guard_condition>:
 800dd18:	6843      	ldr	r3, [r0, #4]
 800dd1a:	6918      	ldr	r0, [r3, #16]
 800dd1c:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800dd20:	4770      	bx	lr
 800dd22:	bf00      	nop

0800dd24 <flush_session>:
 800dd24:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800dd26:	f002 bf65 	b.w	8010bf4 <uxr_run_session_until_confirm_delivery>
 800dd2a:	bf00      	nop

0800dd2c <rmw_publish>:
 800dd2c:	2800      	cmp	r0, #0
 800dd2e:	d053      	beq.n	800ddd8 <rmw_publish+0xac>
 800dd30:	b570      	push	{r4, r5, r6, lr}
 800dd32:	460d      	mov	r5, r1
 800dd34:	b08e      	sub	sp, #56	@ 0x38
 800dd36:	2900      	cmp	r1, #0
 800dd38:	d04b      	beq.n	800ddd2 <rmw_publish+0xa6>
 800dd3a:	4604      	mov	r4, r0
 800dd3c:	6800      	ldr	r0, [r0, #0]
 800dd3e:	f000 ff63 	bl	800ec08 <is_uxrce_rmw_identifier_valid>
 800dd42:	2800      	cmp	r0, #0
 800dd44:	d045      	beq.n	800ddd2 <rmw_publish+0xa6>
 800dd46:	6866      	ldr	r6, [r4, #4]
 800dd48:	2e00      	cmp	r6, #0
 800dd4a:	d042      	beq.n	800ddd2 <rmw_publish+0xa6>
 800dd4c:	69b4      	ldr	r4, [r6, #24]
 800dd4e:	4628      	mov	r0, r5
 800dd50:	6923      	ldr	r3, [r4, #16]
 800dd52:	4798      	blx	r3
 800dd54:	69f3      	ldr	r3, [r6, #28]
 800dd56:	9005      	str	r0, [sp, #20]
 800dd58:	b113      	cbz	r3, 800dd60 <rmw_publish+0x34>
 800dd5a:	a805      	add	r0, sp, #20
 800dd5c:	4798      	blx	r3
 800dd5e:	9805      	ldr	r0, [sp, #20]
 800dd60:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800dd64:	691b      	ldr	r3, [r3, #16]
 800dd66:	9000      	str	r0, [sp, #0]
 800dd68:	6972      	ldr	r2, [r6, #20]
 800dd6a:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800dd6c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800dd70:	ab06      	add	r3, sp, #24
 800dd72:	f004 fa13 	bl	801219c <uxr_prepare_output_stream>
 800dd76:	b1d8      	cbz	r0, 800ddb0 <rmw_publish+0x84>
 800dd78:	68a3      	ldr	r3, [r4, #8]
 800dd7a:	a906      	add	r1, sp, #24
 800dd7c:	4628      	mov	r0, r5
 800dd7e:	4798      	blx	r3
 800dd80:	6a33      	ldr	r3, [r6, #32]
 800dd82:	4604      	mov	r4, r0
 800dd84:	b10b      	cbz	r3, 800dd8a <rmw_publish+0x5e>
 800dd86:	a806      	add	r0, sp, #24
 800dd88:	4798      	blx	r3
 800dd8a:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800dd8e:	2b01      	cmp	r3, #1
 800dd90:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800dd94:	d022      	beq.n	800dddc <rmw_publish+0xb0>
 800dd96:	6918      	ldr	r0, [r3, #16]
 800dd98:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800dd9a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dd9e:	f002 ff29 	bl	8010bf4 <uxr_run_session_until_confirm_delivery>
 800dda2:	4020      	ands	r0, r4
 800dda4:	b2c4      	uxtb	r4, r0
 800dda6:	f084 0001 	eor.w	r0, r4, #1
 800ddaa:	b2c0      	uxtb	r0, r0
 800ddac:	b00e      	add	sp, #56	@ 0x38
 800ddae:	bd70      	pop	{r4, r5, r6, pc}
 800ddb0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800ddb4:	6918      	ldr	r0, [r3, #16]
 800ddb6:	9b05      	ldr	r3, [sp, #20]
 800ddb8:	9300      	str	r3, [sp, #0]
 800ddba:	4b0b      	ldr	r3, [pc, #44]	@ (800dde8 <rmw_publish+0xbc>)
 800ddbc:	9301      	str	r3, [sp, #4]
 800ddbe:	9602      	str	r6, [sp, #8]
 800ddc0:	6972      	ldr	r2, [r6, #20]
 800ddc2:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800ddc4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ddc8:	ab06      	add	r3, sp, #24
 800ddca:	f004 fa17 	bl	80121fc <uxr_prepare_output_stream_fragmented>
 800ddce:	2800      	cmp	r0, #0
 800ddd0:	d1d2      	bne.n	800dd78 <rmw_publish+0x4c>
 800ddd2:	2001      	movs	r0, #1
 800ddd4:	b00e      	add	sp, #56	@ 0x38
 800ddd6:	bd70      	pop	{r4, r5, r6, pc}
 800ddd8:	2001      	movs	r0, #1
 800ddda:	4770      	bx	lr
 800dddc:	6918      	ldr	r0, [r3, #16]
 800ddde:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dde2:	f002 fb47 	bl	8010474 <uxr_flash_output_streams>
 800dde6:	e7de      	b.n	800dda6 <rmw_publish+0x7a>
 800dde8:	0800dd25 	.word	0x0800dd25

0800ddec <rmw_create_publisher>:
 800ddec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddf0:	b087      	sub	sp, #28
 800ddf2:	2800      	cmp	r0, #0
 800ddf4:	f000 80cc 	beq.w	800df90 <rmw_create_publisher+0x1a4>
 800ddf8:	460e      	mov	r6, r1
 800ddfa:	2900      	cmp	r1, #0
 800ddfc:	f000 80c8 	beq.w	800df90 <rmw_create_publisher+0x1a4>
 800de00:	4604      	mov	r4, r0
 800de02:	6800      	ldr	r0, [r0, #0]
 800de04:	4615      	mov	r5, r2
 800de06:	4698      	mov	r8, r3
 800de08:	f000 fefe 	bl	800ec08 <is_uxrce_rmw_identifier_valid>
 800de0c:	2800      	cmp	r0, #0
 800de0e:	f000 80bf 	beq.w	800df90 <rmw_create_publisher+0x1a4>
 800de12:	2d00      	cmp	r5, #0
 800de14:	f000 80bc 	beq.w	800df90 <rmw_create_publisher+0x1a4>
 800de18:	782b      	ldrb	r3, [r5, #0]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	f000 80b8 	beq.w	800df90 <rmw_create_publisher+0x1a4>
 800de20:	f1b8 0f00 	cmp.w	r8, #0
 800de24:	f000 80b4 	beq.w	800df90 <rmw_create_publisher+0x1a4>
 800de28:	485c      	ldr	r0, [pc, #368]	@ (800df9c <rmw_create_publisher+0x1b0>)
 800de2a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800de2e:	f008 ff17 	bl	8016c60 <get_memory>
 800de32:	2800      	cmp	r0, #0
 800de34:	f000 80ac 	beq.w	800df90 <rmw_create_publisher+0x1a4>
 800de38:	6884      	ldr	r4, [r0, #8]
 800de3a:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800de3e:	f008 ff77 	bl	8016d30 <rmw_get_implementation_identifier>
 800de42:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800de46:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800de4a:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800de4e:	4628      	mov	r0, r5
 800de50:	f7f2 f9f0 	bl	8000234 <strlen>
 800de54:	3001      	adds	r0, #1
 800de56:	283c      	cmp	r0, #60	@ 0x3c
 800de58:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800de5c:	f200 8091 	bhi.w	800df82 <rmw_create_publisher+0x196>
 800de60:	4a4f      	ldr	r2, [pc, #316]	@ (800dfa0 <rmw_create_publisher+0x1b4>)
 800de62:	462b      	mov	r3, r5
 800de64:	213c      	movs	r1, #60	@ 0x3c
 800de66:	4650      	mov	r0, sl
 800de68:	f00b f8e4 	bl	8019034 <sniprintf>
 800de6c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800de70:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800de72:	4641      	mov	r1, r8
 800de74:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800de78:	2250      	movs	r2, #80	@ 0x50
 800de7a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800de7e:	f00b fb10 	bl	80194a2 <memcpy>
 800de82:	f898 3008 	ldrb.w	r3, [r8, #8]
 800de86:	4947      	ldr	r1, [pc, #284]	@ (800dfa4 <rmw_create_publisher+0x1b8>)
 800de88:	2b02      	cmp	r3, #2
 800de8a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800de8e:	bf0c      	ite	eq
 800de90:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800de94:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800de98:	67a3      	str	r3, [r4, #120]	@ 0x78
 800de9a:	2300      	movs	r3, #0
 800de9c:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800dea0:	4630      	mov	r0, r6
 800dea2:	f000 febf 	bl	800ec24 <get_message_typesupport_handle>
 800dea6:	2800      	cmp	r0, #0
 800dea8:	d06b      	beq.n	800df82 <rmw_create_publisher+0x196>
 800deaa:	6842      	ldr	r2, [r0, #4]
 800deac:	61a2      	str	r2, [r4, #24]
 800deae:	2a00      	cmp	r2, #0
 800deb0:	d067      	beq.n	800df82 <rmw_create_publisher+0x196>
 800deb2:	4629      	mov	r1, r5
 800deb4:	4643      	mov	r3, r8
 800deb6:	4648      	mov	r0, r9
 800deb8:	f008 ff40 	bl	8016d3c <create_topic>
 800debc:	6260      	str	r0, [r4, #36]	@ 0x24
 800debe:	2800      	cmp	r0, #0
 800dec0:	d063      	beq.n	800df8a <rmw_create_publisher+0x19e>
 800dec2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dec6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800deca:	2103      	movs	r1, #3
 800decc:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800ded0:	1c42      	adds	r2, r0, #1
 800ded2:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800ded6:	f002 f83b 	bl	800ff50 <uxr_object_id>
 800deda:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800dede:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dee2:	6120      	str	r0, [r4, #16]
 800dee4:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800dee8:	6910      	ldr	r0, [r2, #16]
 800deea:	2506      	movs	r5, #6
 800deec:	9500      	str	r5, [sp, #0]
 800deee:	6819      	ldr	r1, [r3, #0]
 800def0:	6922      	ldr	r2, [r4, #16]
 800def2:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800def6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800defa:	f001 fe87 	bl	800fc0c <uxr_buffer_create_publisher_bin>
 800defe:	4602      	mov	r2, r0
 800df00:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800df04:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800df08:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800df0c:	f000 fd62 	bl	800e9d4 <run_xrce_session>
 800df10:	b3b8      	cbz	r0, 800df82 <rmw_create_publisher+0x196>
 800df12:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800df16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800df1a:	2105      	movs	r1, #5
 800df1c:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800df20:	1c42      	adds	r2, r0, #1
 800df22:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800df26:	f002 f813 	bl	800ff50 <uxr_object_id>
 800df2a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800df2e:	6160      	str	r0, [r4, #20]
 800df30:	691e      	ldr	r6, [r3, #16]
 800df32:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800df36:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800df3a:	f10d 0a10 	add.w	sl, sp, #16
 800df3e:	4641      	mov	r1, r8
 800df40:	4650      	mov	r0, sl
 800df42:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800df46:	f000 fd61 	bl	800ea0c <convert_qos_profile>
 800df4a:	9503      	str	r5, [sp, #12]
 800df4c:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800df50:	9001      	str	r0, [sp, #4]
 800df52:	f8ad 1008 	strh.w	r1, [sp, #8]
 800df56:	f8db 3010 	ldr.w	r3, [fp, #16]
 800df5a:	9300      	str	r3, [sp, #0]
 800df5c:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800df60:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800df64:	f8d8 1000 	ldr.w	r1, [r8]
 800df68:	4630      	mov	r0, r6
 800df6a:	f001 fe7f 	bl	800fc6c <uxr_buffer_create_datawriter_bin>
 800df6e:	4602      	mov	r2, r0
 800df70:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800df74:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800df78:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800df7c:	f000 fd2a 	bl	800e9d4 <run_xrce_session>
 800df80:	b938      	cbnz	r0, 800df92 <rmw_create_publisher+0x1a6>
 800df82:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800df84:	b108      	cbz	r0, 800df8a <rmw_create_publisher+0x19e>
 800df86:	f000 fc23 	bl	800e7d0 <rmw_uxrce_fini_topic_memory>
 800df8a:	4638      	mov	r0, r7
 800df8c:	f000 fbc8 	bl	800e720 <rmw_uxrce_fini_publisher_memory>
 800df90:	2700      	movs	r7, #0
 800df92:	4638      	mov	r0, r7
 800df94:	b007      	add	sp, #28
 800df96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df9a:	bf00      	nop
 800df9c:	2000b854 	.word	0x2000b854
 800dfa0:	0801b280 	.word	0x0801b280
 800dfa4:	0801aa4c 	.word	0x0801aa4c

0800dfa8 <rmw_publisher_get_actual_qos>:
 800dfa8:	b150      	cbz	r0, 800dfc0 <rmw_publisher_get_actual_qos+0x18>
 800dfaa:	b508      	push	{r3, lr}
 800dfac:	460b      	mov	r3, r1
 800dfae:	b149      	cbz	r1, 800dfc4 <rmw_publisher_get_actual_qos+0x1c>
 800dfb0:	6841      	ldr	r1, [r0, #4]
 800dfb2:	2250      	movs	r2, #80	@ 0x50
 800dfb4:	3128      	adds	r1, #40	@ 0x28
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	f00b fa73 	bl	80194a2 <memcpy>
 800dfbc:	2000      	movs	r0, #0
 800dfbe:	bd08      	pop	{r3, pc}
 800dfc0:	200b      	movs	r0, #11
 800dfc2:	4770      	bx	lr
 800dfc4:	200b      	movs	r0, #11
 800dfc6:	bd08      	pop	{r3, pc}

0800dfc8 <rmw_destroy_publisher>:
 800dfc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfca:	b128      	cbz	r0, 800dfd8 <rmw_destroy_publisher+0x10>
 800dfcc:	4604      	mov	r4, r0
 800dfce:	6800      	ldr	r0, [r0, #0]
 800dfd0:	460d      	mov	r5, r1
 800dfd2:	f000 fe19 	bl	800ec08 <is_uxrce_rmw_identifier_valid>
 800dfd6:	b910      	cbnz	r0, 800dfde <rmw_destroy_publisher+0x16>
 800dfd8:	2401      	movs	r4, #1
 800dfda:	4620      	mov	r0, r4
 800dfdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dfde:	6863      	ldr	r3, [r4, #4]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d0f9      	beq.n	800dfd8 <rmw_destroy_publisher+0x10>
 800dfe4:	2d00      	cmp	r5, #0
 800dfe6:	d0f7      	beq.n	800dfd8 <rmw_destroy_publisher+0x10>
 800dfe8:	6828      	ldr	r0, [r5, #0]
 800dfea:	f000 fe0d 	bl	800ec08 <is_uxrce_rmw_identifier_valid>
 800dfee:	2800      	cmp	r0, #0
 800dff0:	d0f2      	beq.n	800dfd8 <rmw_destroy_publisher+0x10>
 800dff2:	686c      	ldr	r4, [r5, #4]
 800dff4:	2c00      	cmp	r4, #0
 800dff6:	d0ef      	beq.n	800dfd8 <rmw_destroy_publisher+0x10>
 800dff8:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800dffa:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800dffe:	f008 feed 	bl	8016ddc <destroy_topic>
 800e002:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800e006:	6962      	ldr	r2, [r4, #20]
 800e008:	6918      	ldr	r0, [r3, #16]
 800e00a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e00e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e012:	6819      	ldr	r1, [r3, #0]
 800e014:	f001 fd46 	bl	800faa4 <uxr_buffer_delete_entity>
 800e018:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800e01c:	6922      	ldr	r2, [r4, #16]
 800e01e:	691b      	ldr	r3, [r3, #16]
 800e020:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800e024:	4604      	mov	r4, r0
 800e026:	6809      	ldr	r1, [r1, #0]
 800e028:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800e02c:	f001 fd3a 	bl	800faa4 <uxr_buffer_delete_entity>
 800e030:	693e      	ldr	r6, [r7, #16]
 800e032:	4622      	mov	r2, r4
 800e034:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800e038:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800e03c:	4604      	mov	r4, r0
 800e03e:	4630      	mov	r0, r6
 800e040:	f000 fcc8 	bl	800e9d4 <run_xrce_session>
 800e044:	693e      	ldr	r6, [r7, #16]
 800e046:	4622      	mov	r2, r4
 800e048:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800e04c:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800e050:	4604      	mov	r4, r0
 800e052:	4630      	mov	r0, r6
 800e054:	f000 fcbe 	bl	800e9d4 <run_xrce_session>
 800e058:	b12c      	cbz	r4, 800e066 <rmw_destroy_publisher+0x9e>
 800e05a:	b120      	cbz	r0, 800e066 <rmw_destroy_publisher+0x9e>
 800e05c:	2400      	movs	r4, #0
 800e05e:	4628      	mov	r0, r5
 800e060:	f000 fb5e 	bl	800e720 <rmw_uxrce_fini_publisher_memory>
 800e064:	e7b9      	b.n	800dfda <rmw_destroy_publisher+0x12>
 800e066:	2402      	movs	r4, #2
 800e068:	e7f9      	b.n	800e05e <rmw_destroy_publisher+0x96>
 800e06a:	bf00      	nop

0800e06c <rmw_create_service>:
 800e06c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e070:	b091      	sub	sp, #68	@ 0x44
 800e072:	2800      	cmp	r0, #0
 800e074:	f000 80ba 	beq.w	800e1ec <rmw_create_service+0x180>
 800e078:	4689      	mov	r9, r1
 800e07a:	2900      	cmp	r1, #0
 800e07c:	f000 80b6 	beq.w	800e1ec <rmw_create_service+0x180>
 800e080:	4606      	mov	r6, r0
 800e082:	6800      	ldr	r0, [r0, #0]
 800e084:	4614      	mov	r4, r2
 800e086:	461d      	mov	r5, r3
 800e088:	f000 fdbe 	bl	800ec08 <is_uxrce_rmw_identifier_valid>
 800e08c:	2800      	cmp	r0, #0
 800e08e:	f000 80ad 	beq.w	800e1ec <rmw_create_service+0x180>
 800e092:	2c00      	cmp	r4, #0
 800e094:	f000 80aa 	beq.w	800e1ec <rmw_create_service+0x180>
 800e098:	7823      	ldrb	r3, [r4, #0]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	f000 80a6 	beq.w	800e1ec <rmw_create_service+0x180>
 800e0a0:	2d00      	cmp	r5, #0
 800e0a2:	f000 80a3 	beq.w	800e1ec <rmw_create_service+0x180>
 800e0a6:	4854      	ldr	r0, [pc, #336]	@ (800e1f8 <rmw_create_service+0x18c>)
 800e0a8:	f8d6 8004 	ldr.w	r8, [r6, #4]
 800e0ac:	f008 fdd8 	bl	8016c60 <get_memory>
 800e0b0:	4606      	mov	r6, r0
 800e0b2:	2800      	cmp	r0, #0
 800e0b4:	f000 809b 	beq.w	800e1ee <rmw_create_service+0x182>
 800e0b8:	6887      	ldr	r7, [r0, #8]
 800e0ba:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 800e0be:	f008 fe37 	bl	8016d30 <rmw_get_implementation_identifier>
 800e0c2:	f107 0a88 	add.w	sl, r7, #136	@ 0x88
 800e0c6:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800e0c8:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 800e0cc:	4620      	mov	r0, r4
 800e0ce:	f7f2 f8b1 	bl	8000234 <strlen>
 800e0d2:	1c42      	adds	r2, r0, #1
 800e0d4:	2a3c      	cmp	r2, #60	@ 0x3c
 800e0d6:	f107 067c 	add.w	r6, r7, #124	@ 0x7c
 800e0da:	f200 8084 	bhi.w	800e1e6 <rmw_create_service+0x17a>
 800e0de:	4621      	mov	r1, r4
 800e0e0:	4650      	mov	r0, sl
 800e0e2:	f00b f9de 	bl	80194a2 <memcpy>
 800e0e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e0ea:	4629      	mov	r1, r5
 800e0ec:	f8c7 8078 	str.w	r8, [r7, #120]	@ 0x78
 800e0f0:	677b      	str	r3, [r7, #116]	@ 0x74
 800e0f2:	2250      	movs	r2, #80	@ 0x50
 800e0f4:	f107 0020 	add.w	r0, r7, #32
 800e0f8:	f00b f9d3 	bl	80194a2 <memcpy>
 800e0fc:	493f      	ldr	r1, [pc, #252]	@ (800e1fc <rmw_create_service+0x190>)
 800e0fe:	4648      	mov	r0, r9
 800e100:	f000 fd9c 	bl	800ec3c <get_service_typesupport_handle>
 800e104:	2800      	cmp	r0, #0
 800e106:	d06e      	beq.n	800e1e6 <rmw_create_service+0x17a>
 800e108:	6843      	ldr	r3, [r0, #4]
 800e10a:	617b      	str	r3, [r7, #20]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d06a      	beq.n	800e1e6 <rmw_create_service+0x17a>
 800e110:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800e114:	f8df a0ec 	ldr.w	sl, [pc, #236]	@ 800e204 <rmw_create_service+0x198>
 800e118:	f8df 90ec 	ldr.w	r9, [pc, #236]	@ 800e208 <rmw_create_service+0x19c>
 800e11c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e120:	2108      	movs	r1, #8
 800e122:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	@ 0x5a2
 800e126:	1c42      	adds	r2, r0, #1
 800e128:	f8a3 25a2 	strh.w	r2, [r3, #1442]	@ 0x5a2
 800e12c:	f001 ff10 	bl	800ff50 <uxr_object_id>
 800e130:	2364      	movs	r3, #100	@ 0x64
 800e132:	6138      	str	r0, [r7, #16]
 800e134:	4652      	mov	r2, sl
 800e136:	6978      	ldr	r0, [r7, #20]
 800e138:	4649      	mov	r1, r9
 800e13a:	f000 fcb3 	bl	800eaa4 <generate_service_types>
 800e13e:	2800      	cmp	r0, #0
 800e140:	d051      	beq.n	800e1e6 <rmw_create_service+0x17a>
 800e142:	f8df b0c8 	ldr.w	fp, [pc, #200]	@ 800e20c <rmw_create_service+0x1a0>
 800e146:	4a2e      	ldr	r2, [pc, #184]	@ (800e200 <rmw_create_service+0x194>)
 800e148:	233c      	movs	r3, #60	@ 0x3c
 800e14a:	4659      	mov	r1, fp
 800e14c:	4620      	mov	r0, r4
 800e14e:	f000 fc77 	bl	800ea40 <generate_service_topics>
 800e152:	2800      	cmp	r0, #0
 800e154:	d047      	beq.n	800e1e6 <rmw_create_service+0x17a>
 800e156:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800e15a:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800e15e:	a80c      	add	r0, sp, #48	@ 0x30
 800e160:	4629      	mov	r1, r5
 800e162:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e166:	f000 fc51 	bl	800ea0c <convert_qos_profile>
 800e16a:	4a25      	ldr	r2, [pc, #148]	@ (800e200 <rmw_create_service+0x194>)
 800e16c:	9400      	str	r4, [sp, #0]
 800e16e:	e9cd b203 	strd	fp, r2, [sp, #12]
 800e172:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 800e176:	a80c      	add	r0, sp, #48	@ 0x30
 800e178:	c803      	ldmia	r0, {r0, r1}
 800e17a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e17c:	9005      	str	r0, [sp, #20]
 800e17e:	9a08      	ldr	r2, [sp, #32]
 800e180:	f8ad 1018 	strh.w	r1, [sp, #24]
 800e184:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800e188:	2306      	movs	r3, #6
 800e18a:	9307      	str	r3, [sp, #28]
 800e18c:	6811      	ldr	r1, [r2, #0]
 800e18e:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800e192:	693a      	ldr	r2, [r7, #16]
 800e194:	f001 fde0 	bl	800fd58 <uxr_buffer_create_replier_bin>
 800e198:	4602      	mov	r2, r0
 800e19a:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800e19e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800e1a2:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e1a6:	f000 fc15 	bl	800e9d4 <run_xrce_session>
 800e1aa:	b1e0      	cbz	r0, 800e1e6 <rmw_create_service+0x17a>
 800e1ac:	7a2b      	ldrb	r3, [r5, #8]
 800e1ae:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	2b02      	cmp	r3, #2
 800e1b6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800e1ba:	e9cd 120e 	strd	r1, r2, [sp, #56]	@ 0x38
 800e1be:	bf0c      	ite	eq
 800e1c0:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	@ 0x37c
 800e1c4:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	@ 0x374
 800e1c8:	673a      	str	r2, [r7, #112]	@ 0x70
 800e1ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e1cc:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800e1d0:	ab0e      	add	r3, sp, #56	@ 0x38
 800e1d2:	9300      	str	r3, [sp, #0]
 800e1d4:	6811      	ldr	r1, [r2, #0]
 800e1d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e1d8:	693a      	ldr	r2, [r7, #16]
 800e1da:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e1de:	f001 fee7 	bl	800ffb0 <uxr_buffer_request_data>
 800e1e2:	8338      	strh	r0, [r7, #24]
 800e1e4:	e003      	b.n	800e1ee <rmw_create_service+0x182>
 800e1e6:	4630      	mov	r0, r6
 800e1e8:	f000 fac6 	bl	800e778 <rmw_uxrce_fini_service_memory>
 800e1ec:	2600      	movs	r6, #0
 800e1ee:	4630      	mov	r0, r6
 800e1f0:	b011      	add	sp, #68	@ 0x44
 800e1f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1f6:	bf00      	nop
 800e1f8:	2000b864 	.word	0x2000b864
 800e1fc:	0801aa4c 	.word	0x0801aa4c
 800e200:	20006e0c 	.word	0x20006e0c
 800e204:	20006e48 	.word	0x20006e48
 800e208:	20006da8 	.word	0x20006da8
 800e20c:	20006d6c 	.word	0x20006d6c

0800e210 <rmw_destroy_service>:
 800e210:	b570      	push	{r4, r5, r6, lr}
 800e212:	b128      	cbz	r0, 800e220 <rmw_destroy_service+0x10>
 800e214:	4604      	mov	r4, r0
 800e216:	6800      	ldr	r0, [r0, #0]
 800e218:	460d      	mov	r5, r1
 800e21a:	f000 fcf5 	bl	800ec08 <is_uxrce_rmw_identifier_valid>
 800e21e:	b910      	cbnz	r0, 800e226 <rmw_destroy_service+0x16>
 800e220:	2401      	movs	r4, #1
 800e222:	4620      	mov	r0, r4
 800e224:	bd70      	pop	{r4, r5, r6, pc}
 800e226:	6863      	ldr	r3, [r4, #4]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d0f9      	beq.n	800e220 <rmw_destroy_service+0x10>
 800e22c:	2d00      	cmp	r5, #0
 800e22e:	d0f7      	beq.n	800e220 <rmw_destroy_service+0x10>
 800e230:	6828      	ldr	r0, [r5, #0]
 800e232:	f000 fce9 	bl	800ec08 <is_uxrce_rmw_identifier_valid>
 800e236:	2800      	cmp	r0, #0
 800e238:	d0f2      	beq.n	800e220 <rmw_destroy_service+0x10>
 800e23a:	686e      	ldr	r6, [r5, #4]
 800e23c:	2e00      	cmp	r6, #0
 800e23e:	d0ef      	beq.n	800e220 <rmw_destroy_service+0x10>
 800e240:	6864      	ldr	r4, [r4, #4]
 800e242:	6932      	ldr	r2, [r6, #16]
 800e244:	6920      	ldr	r0, [r4, #16]
 800e246:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e24a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e24e:	6819      	ldr	r1, [r3, #0]
 800e250:	f001 fee8 	bl	8010024 <uxr_buffer_cancel_data>
 800e254:	4602      	mov	r2, r0
 800e256:	6920      	ldr	r0, [r4, #16]
 800e258:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e25c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e260:	f000 fbb8 	bl	800e9d4 <run_xrce_session>
 800e264:	6920      	ldr	r0, [r4, #16]
 800e266:	6932      	ldr	r2, [r6, #16]
 800e268:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e26c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e270:	6819      	ldr	r1, [r3, #0]
 800e272:	f001 fc17 	bl	800faa4 <uxr_buffer_delete_entity>
 800e276:	4602      	mov	r2, r0
 800e278:	6920      	ldr	r0, [r4, #16]
 800e27a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e27e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e282:	f000 fba7 	bl	800e9d4 <run_xrce_session>
 800e286:	2800      	cmp	r0, #0
 800e288:	4628      	mov	r0, r5
 800e28a:	bf14      	ite	ne
 800e28c:	2400      	movne	r4, #0
 800e28e:	2402      	moveq	r4, #2
 800e290:	f000 fa72 	bl	800e778 <rmw_uxrce_fini_service_memory>
 800e294:	e7c5      	b.n	800e222 <rmw_destroy_service+0x12>
 800e296:	bf00      	nop

0800e298 <rmw_service_response_publisher_get_actual_qos>:
 800e298:	b150      	cbz	r0, 800e2b0 <rmw_service_response_publisher_get_actual_qos+0x18>
 800e29a:	b508      	push	{r3, lr}
 800e29c:	460b      	mov	r3, r1
 800e29e:	b149      	cbz	r1, 800e2b4 <rmw_service_response_publisher_get_actual_qos+0x1c>
 800e2a0:	6841      	ldr	r1, [r0, #4]
 800e2a2:	2250      	movs	r2, #80	@ 0x50
 800e2a4:	3120      	adds	r1, #32
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	f00b f8fb 	bl	80194a2 <memcpy>
 800e2ac:	2000      	movs	r0, #0
 800e2ae:	bd08      	pop	{r3, pc}
 800e2b0:	200b      	movs	r0, #11
 800e2b2:	4770      	bx	lr
 800e2b4:	200b      	movs	r0, #11
 800e2b6:	bd08      	pop	{r3, pc}

0800e2b8 <rmw_service_request_subscription_get_actual_qos>:
 800e2b8:	b150      	cbz	r0, 800e2d0 <rmw_service_request_subscription_get_actual_qos+0x18>
 800e2ba:	b508      	push	{r3, lr}
 800e2bc:	460b      	mov	r3, r1
 800e2be:	b149      	cbz	r1, 800e2d4 <rmw_service_request_subscription_get_actual_qos+0x1c>
 800e2c0:	6841      	ldr	r1, [r0, #4]
 800e2c2:	2250      	movs	r2, #80	@ 0x50
 800e2c4:	3120      	adds	r1, #32
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	f00b f8eb 	bl	80194a2 <memcpy>
 800e2cc:	2000      	movs	r0, #0
 800e2ce:	bd08      	pop	{r3, pc}
 800e2d0:	200b      	movs	r0, #11
 800e2d2:	4770      	bx	lr
 800e2d4:	200b      	movs	r0, #11
 800e2d6:	bd08      	pop	{r3, pc}

0800e2d8 <rmw_destroy_subscription>:
 800e2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2da:	b128      	cbz	r0, 800e2e8 <rmw_destroy_subscription+0x10>
 800e2dc:	4604      	mov	r4, r0
 800e2de:	6800      	ldr	r0, [r0, #0]
 800e2e0:	460d      	mov	r5, r1
 800e2e2:	f000 fc91 	bl	800ec08 <is_uxrce_rmw_identifier_valid>
 800e2e6:	b910      	cbnz	r0, 800e2ee <rmw_destroy_subscription+0x16>
 800e2e8:	2401      	movs	r4, #1
 800e2ea:	4620      	mov	r0, r4
 800e2ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2ee:	6863      	ldr	r3, [r4, #4]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d0f9      	beq.n	800e2e8 <rmw_destroy_subscription+0x10>
 800e2f4:	2d00      	cmp	r5, #0
 800e2f6:	d0f7      	beq.n	800e2e8 <rmw_destroy_subscription+0x10>
 800e2f8:	6828      	ldr	r0, [r5, #0]
 800e2fa:	f000 fc85 	bl	800ec08 <is_uxrce_rmw_identifier_valid>
 800e2fe:	2800      	cmp	r0, #0
 800e300:	d0f2      	beq.n	800e2e8 <rmw_destroy_subscription+0x10>
 800e302:	686c      	ldr	r4, [r5, #4]
 800e304:	2c00      	cmp	r4, #0
 800e306:	d0ef      	beq.n	800e2e8 <rmw_destroy_subscription+0x10>
 800e308:	6a26      	ldr	r6, [r4, #32]
 800e30a:	6962      	ldr	r2, [r4, #20]
 800e30c:	6930      	ldr	r0, [r6, #16]
 800e30e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e312:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e316:	6819      	ldr	r1, [r3, #0]
 800e318:	f001 fe84 	bl	8010024 <uxr_buffer_cancel_data>
 800e31c:	4602      	mov	r2, r0
 800e31e:	6930      	ldr	r0, [r6, #16]
 800e320:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e324:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e328:	f000 fb54 	bl	800e9d4 <run_xrce_session>
 800e32c:	69e0      	ldr	r0, [r4, #28]
 800e32e:	f008 fd55 	bl	8016ddc <destroy_topic>
 800e332:	6a23      	ldr	r3, [r4, #32]
 800e334:	6962      	ldr	r2, [r4, #20]
 800e336:	6918      	ldr	r0, [r3, #16]
 800e338:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e33c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e340:	6819      	ldr	r1, [r3, #0]
 800e342:	f001 fbaf 	bl	800faa4 <uxr_buffer_delete_entity>
 800e346:	6a23      	ldr	r3, [r4, #32]
 800e348:	6922      	ldr	r2, [r4, #16]
 800e34a:	691b      	ldr	r3, [r3, #16]
 800e34c:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800e350:	4604      	mov	r4, r0
 800e352:	6809      	ldr	r1, [r1, #0]
 800e354:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800e358:	f001 fba4 	bl	800faa4 <uxr_buffer_delete_entity>
 800e35c:	6937      	ldr	r7, [r6, #16]
 800e35e:	4622      	mov	r2, r4
 800e360:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800e364:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800e368:	4604      	mov	r4, r0
 800e36a:	4638      	mov	r0, r7
 800e36c:	f000 fb32 	bl	800e9d4 <run_xrce_session>
 800e370:	6936      	ldr	r6, [r6, #16]
 800e372:	4622      	mov	r2, r4
 800e374:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800e378:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800e37c:	4604      	mov	r4, r0
 800e37e:	4630      	mov	r0, r6
 800e380:	f000 fb28 	bl	800e9d4 <run_xrce_session>
 800e384:	b12c      	cbz	r4, 800e392 <rmw_destroy_subscription+0xba>
 800e386:	b120      	cbz	r0, 800e392 <rmw_destroy_subscription+0xba>
 800e388:	2400      	movs	r4, #0
 800e38a:	4628      	mov	r0, r5
 800e38c:	f000 f9de 	bl	800e74c <rmw_uxrce_fini_subscription_memory>
 800e390:	e7ab      	b.n	800e2ea <rmw_destroy_subscription+0x12>
 800e392:	2402      	movs	r4, #2
 800e394:	e7f9      	b.n	800e38a <rmw_destroy_subscription+0xb2>
 800e396:	bf00      	nop

0800e398 <rmw_uxrce_transport_init>:
 800e398:	b508      	push	{r3, lr}
 800e39a:	b108      	cbz	r0, 800e3a0 <rmw_uxrce_transport_init+0x8>
 800e39c:	f100 0210 	add.w	r2, r0, #16
 800e3a0:	b139      	cbz	r1, 800e3b2 <rmw_uxrce_transport_init+0x1a>
 800e3a2:	6949      	ldr	r1, [r1, #20]
 800e3a4:	4610      	mov	r0, r2
 800e3a6:	f001 fd9b 	bl	800fee0 <uxr_init_custom_transport>
 800e3aa:	f080 0001 	eor.w	r0, r0, #1
 800e3ae:	b2c0      	uxtb	r0, r0
 800e3b0:	bd08      	pop	{r3, pc}
 800e3b2:	4b04      	ldr	r3, [pc, #16]	@ (800e3c4 <rmw_uxrce_transport_init+0x2c>)
 800e3b4:	4610      	mov	r0, r2
 800e3b6:	6859      	ldr	r1, [r3, #4]
 800e3b8:	f001 fd92 	bl	800fee0 <uxr_init_custom_transport>
 800e3bc:	f080 0001 	eor.w	r0, r0, #1
 800e3c0:	b2c0      	uxtb	r0, r0
 800e3c2:	bd08      	pop	{r3, pc}
 800e3c4:	20006d14 	.word	0x20006d14

0800e3c8 <rmw_uros_epoch_millis>:
 800e3c8:	4b05      	ldr	r3, [pc, #20]	@ (800e3e0 <rmw_uros_epoch_millis+0x18>)
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	b123      	cbz	r3, 800e3d8 <rmw_uros_epoch_millis+0x10>
 800e3ce:	6898      	ldr	r0, [r3, #8]
 800e3d0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e3d4:	f002 b832 	b.w	801043c <uxr_epoch_millis>
 800e3d8:	2000      	movs	r0, #0
 800e3da:	2100      	movs	r1, #0
 800e3dc:	4770      	bx	lr
 800e3de:	bf00      	nop
 800e3e0:	2000b874 	.word	0x2000b874

0800e3e4 <rmw_uros_epoch_nanos>:
 800e3e4:	4b05      	ldr	r3, [pc, #20]	@ (800e3fc <rmw_uros_epoch_nanos+0x18>)
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	b123      	cbz	r3, 800e3f4 <rmw_uros_epoch_nanos+0x10>
 800e3ea:	6898      	ldr	r0, [r3, #8]
 800e3ec:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e3f0:	f002 b836 	b.w	8010460 <uxr_epoch_nanos>
 800e3f4:	2000      	movs	r0, #0
 800e3f6:	2100      	movs	r1, #0
 800e3f8:	4770      	bx	lr
 800e3fa:	bf00      	nop
 800e3fc:	2000b874 	.word	0x2000b874

0800e400 <rmw_uros_sync_session>:
 800e400:	b508      	push	{r3, lr}
 800e402:	4b07      	ldr	r3, [pc, #28]	@ (800e420 <rmw_uros_sync_session+0x20>)
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	b14b      	cbz	r3, 800e41c <rmw_uros_sync_session+0x1c>
 800e408:	4601      	mov	r1, r0
 800e40a:	6898      	ldr	r0, [r3, #8]
 800e40c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e410:	f002 fc6a 	bl	8010ce8 <uxr_sync_session>
 800e414:	f080 0001 	eor.w	r0, r0, #1
 800e418:	b2c0      	uxtb	r0, r0
 800e41a:	bd08      	pop	{r3, pc}
 800e41c:	2001      	movs	r0, #1
 800e41e:	bd08      	pop	{r3, pc}
 800e420:	2000b874 	.word	0x2000b874

0800e424 <rmw_uxrce_init_service_memory>:
 800e424:	b1e2      	cbz	r2, 800e460 <rmw_uxrce_init_service_memory+0x3c>
 800e426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e42a:	7b05      	ldrb	r5, [r0, #12]
 800e42c:	4606      	mov	r6, r0
 800e42e:	b9ad      	cbnz	r5, 800e45c <rmw_uxrce_init_service_memory+0x38>
 800e430:	23c8      	movs	r3, #200	@ 0xc8
 800e432:	e9c0 5500 	strd	r5, r5, [r0]
 800e436:	6083      	str	r3, [r0, #8]
 800e438:	f240 1301 	movw	r3, #257	@ 0x101
 800e43c:	4617      	mov	r7, r2
 800e43e:	8183      	strh	r3, [r0, #12]
 800e440:	460c      	mov	r4, r1
 800e442:	46a8      	mov	r8, r5
 800e444:	4621      	mov	r1, r4
 800e446:	4630      	mov	r0, r6
 800e448:	3501      	adds	r5, #1
 800e44a:	f008 fc19 	bl	8016c80 <put_memory>
 800e44e:	42af      	cmp	r7, r5
 800e450:	60a4      	str	r4, [r4, #8]
 800e452:	f884 800c 	strb.w	r8, [r4, #12]
 800e456:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800e45a:	d1f3      	bne.n	800e444 <rmw_uxrce_init_service_memory+0x20>
 800e45c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e460:	4770      	bx	lr
 800e462:	bf00      	nop

0800e464 <rmw_uxrce_init_client_memory>:
 800e464:	b1e2      	cbz	r2, 800e4a0 <rmw_uxrce_init_client_memory+0x3c>
 800e466:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e46a:	7b05      	ldrb	r5, [r0, #12]
 800e46c:	4606      	mov	r6, r0
 800e46e:	b9ad      	cbnz	r5, 800e49c <rmw_uxrce_init_client_memory+0x38>
 800e470:	23c8      	movs	r3, #200	@ 0xc8
 800e472:	e9c0 5500 	strd	r5, r5, [r0]
 800e476:	6083      	str	r3, [r0, #8]
 800e478:	f240 1301 	movw	r3, #257	@ 0x101
 800e47c:	4617      	mov	r7, r2
 800e47e:	8183      	strh	r3, [r0, #12]
 800e480:	460c      	mov	r4, r1
 800e482:	46a8      	mov	r8, r5
 800e484:	4621      	mov	r1, r4
 800e486:	4630      	mov	r0, r6
 800e488:	3501      	adds	r5, #1
 800e48a:	f008 fbf9 	bl	8016c80 <put_memory>
 800e48e:	42af      	cmp	r7, r5
 800e490:	60a4      	str	r4, [r4, #8]
 800e492:	f884 800c 	strb.w	r8, [r4, #12]
 800e496:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800e49a:	d1f3      	bne.n	800e484 <rmw_uxrce_init_client_memory+0x20>
 800e49c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4a0:	4770      	bx	lr
 800e4a2:	bf00      	nop

0800e4a4 <rmw_uxrce_init_publisher_memory>:
 800e4a4:	b1e2      	cbz	r2, 800e4e0 <rmw_uxrce_init_publisher_memory+0x3c>
 800e4a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4aa:	7b05      	ldrb	r5, [r0, #12]
 800e4ac:	4606      	mov	r6, r0
 800e4ae:	b9ad      	cbnz	r5, 800e4dc <rmw_uxrce_init_publisher_memory+0x38>
 800e4b0:	23d8      	movs	r3, #216	@ 0xd8
 800e4b2:	e9c0 5500 	strd	r5, r5, [r0]
 800e4b6:	6083      	str	r3, [r0, #8]
 800e4b8:	f240 1301 	movw	r3, #257	@ 0x101
 800e4bc:	4617      	mov	r7, r2
 800e4be:	8183      	strh	r3, [r0, #12]
 800e4c0:	460c      	mov	r4, r1
 800e4c2:	46a8      	mov	r8, r5
 800e4c4:	4621      	mov	r1, r4
 800e4c6:	4630      	mov	r0, r6
 800e4c8:	3501      	adds	r5, #1
 800e4ca:	f008 fbd9 	bl	8016c80 <put_memory>
 800e4ce:	42af      	cmp	r7, r5
 800e4d0:	60a4      	str	r4, [r4, #8]
 800e4d2:	f884 800c 	strb.w	r8, [r4, #12]
 800e4d6:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800e4da:	d1f3      	bne.n	800e4c4 <rmw_uxrce_init_publisher_memory+0x20>
 800e4dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4e0:	4770      	bx	lr
 800e4e2:	bf00      	nop

0800e4e4 <rmw_uxrce_init_subscription_memory>:
 800e4e4:	b1e2      	cbz	r2, 800e520 <rmw_uxrce_init_subscription_memory+0x3c>
 800e4e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4ea:	7b05      	ldrb	r5, [r0, #12]
 800e4ec:	4606      	mov	r6, r0
 800e4ee:	b9ad      	cbnz	r5, 800e51c <rmw_uxrce_init_subscription_memory+0x38>
 800e4f0:	23d8      	movs	r3, #216	@ 0xd8
 800e4f2:	e9c0 5500 	strd	r5, r5, [r0]
 800e4f6:	6083      	str	r3, [r0, #8]
 800e4f8:	f240 1301 	movw	r3, #257	@ 0x101
 800e4fc:	4617      	mov	r7, r2
 800e4fe:	8183      	strh	r3, [r0, #12]
 800e500:	460c      	mov	r4, r1
 800e502:	46a8      	mov	r8, r5
 800e504:	4621      	mov	r1, r4
 800e506:	4630      	mov	r0, r6
 800e508:	3501      	adds	r5, #1
 800e50a:	f008 fbb9 	bl	8016c80 <put_memory>
 800e50e:	42af      	cmp	r7, r5
 800e510:	60a4      	str	r4, [r4, #8]
 800e512:	f884 800c 	strb.w	r8, [r4, #12]
 800e516:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800e51a:	d1f3      	bne.n	800e504 <rmw_uxrce_init_subscription_memory+0x20>
 800e51c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e520:	4770      	bx	lr
 800e522:	bf00      	nop

0800e524 <rmw_uxrce_init_node_memory>:
 800e524:	b1e2      	cbz	r2, 800e560 <rmw_uxrce_init_node_memory+0x3c>
 800e526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e52a:	7b05      	ldrb	r5, [r0, #12]
 800e52c:	4606      	mov	r6, r0
 800e52e:	b9ad      	cbnz	r5, 800e55c <rmw_uxrce_init_node_memory+0x38>
 800e530:	23a4      	movs	r3, #164	@ 0xa4
 800e532:	e9c0 5500 	strd	r5, r5, [r0]
 800e536:	6083      	str	r3, [r0, #8]
 800e538:	f240 1301 	movw	r3, #257	@ 0x101
 800e53c:	4617      	mov	r7, r2
 800e53e:	8183      	strh	r3, [r0, #12]
 800e540:	460c      	mov	r4, r1
 800e542:	46a8      	mov	r8, r5
 800e544:	4621      	mov	r1, r4
 800e546:	4630      	mov	r0, r6
 800e548:	3501      	adds	r5, #1
 800e54a:	f008 fb99 	bl	8016c80 <put_memory>
 800e54e:	42af      	cmp	r7, r5
 800e550:	60a4      	str	r4, [r4, #8]
 800e552:	f884 800c 	strb.w	r8, [r4, #12]
 800e556:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800e55a:	d1f3      	bne.n	800e544 <rmw_uxrce_init_node_memory+0x20>
 800e55c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e560:	4770      	bx	lr
 800e562:	bf00      	nop

0800e564 <rmw_uxrce_init_session_memory>:
 800e564:	b1ea      	cbz	r2, 800e5a2 <rmw_uxrce_init_session_memory+0x3e>
 800e566:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e56a:	7b05      	ldrb	r5, [r0, #12]
 800e56c:	4606      	mov	r6, r0
 800e56e:	b9b5      	cbnz	r5, 800e59e <rmw_uxrce_init_session_memory+0x3a>
 800e570:	e9c0 5500 	strd	r5, r5, [r0]
 800e574:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800e578:	f240 1301 	movw	r3, #257	@ 0x101
 800e57c:	4617      	mov	r7, r2
 800e57e:	f8c0 8008 	str.w	r8, [r0, #8]
 800e582:	460c      	mov	r4, r1
 800e584:	8183      	strh	r3, [r0, #12]
 800e586:	46a9      	mov	r9, r5
 800e588:	4621      	mov	r1, r4
 800e58a:	4630      	mov	r0, r6
 800e58c:	3501      	adds	r5, #1
 800e58e:	f008 fb77 	bl	8016c80 <put_memory>
 800e592:	42af      	cmp	r7, r5
 800e594:	60a4      	str	r4, [r4, #8]
 800e596:	f884 900c 	strb.w	r9, [r4, #12]
 800e59a:	4444      	add	r4, r8
 800e59c:	d1f4      	bne.n	800e588 <rmw_uxrce_init_session_memory+0x24>
 800e59e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e5a2:	4770      	bx	lr

0800e5a4 <rmw_uxrce_init_topic_memory>:
 800e5a4:	b1e2      	cbz	r2, 800e5e0 <rmw_uxrce_init_topic_memory+0x3c>
 800e5a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5aa:	7b05      	ldrb	r5, [r0, #12]
 800e5ac:	4606      	mov	r6, r0
 800e5ae:	b9ad      	cbnz	r5, 800e5dc <rmw_uxrce_init_topic_memory+0x38>
 800e5b0:	231c      	movs	r3, #28
 800e5b2:	e9c0 5500 	strd	r5, r5, [r0]
 800e5b6:	6083      	str	r3, [r0, #8]
 800e5b8:	f240 1301 	movw	r3, #257	@ 0x101
 800e5bc:	4617      	mov	r7, r2
 800e5be:	8183      	strh	r3, [r0, #12]
 800e5c0:	460c      	mov	r4, r1
 800e5c2:	46a8      	mov	r8, r5
 800e5c4:	4621      	mov	r1, r4
 800e5c6:	4630      	mov	r0, r6
 800e5c8:	3501      	adds	r5, #1
 800e5ca:	f008 fb59 	bl	8016c80 <put_memory>
 800e5ce:	42af      	cmp	r7, r5
 800e5d0:	60a4      	str	r4, [r4, #8]
 800e5d2:	f884 800c 	strb.w	r8, [r4, #12]
 800e5d6:	f104 041c 	add.w	r4, r4, #28
 800e5da:	d1f3      	bne.n	800e5c4 <rmw_uxrce_init_topic_memory+0x20>
 800e5dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5e0:	4770      	bx	lr
 800e5e2:	bf00      	nop

0800e5e4 <rmw_uxrce_init_static_input_buffer_memory>:
 800e5e4:	b1ea      	cbz	r2, 800e622 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800e5e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5ea:	7b05      	ldrb	r5, [r0, #12]
 800e5ec:	4606      	mov	r6, r0
 800e5ee:	b9b5      	cbnz	r5, 800e61e <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800e5f0:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800e5f4:	e9c0 5500 	strd	r5, r5, [r0]
 800e5f8:	6083      	str	r3, [r0, #8]
 800e5fa:	f240 1301 	movw	r3, #257	@ 0x101
 800e5fe:	4617      	mov	r7, r2
 800e600:	8183      	strh	r3, [r0, #12]
 800e602:	460c      	mov	r4, r1
 800e604:	46a8      	mov	r8, r5
 800e606:	4621      	mov	r1, r4
 800e608:	4630      	mov	r0, r6
 800e60a:	3501      	adds	r5, #1
 800e60c:	f008 fb38 	bl	8016c80 <put_memory>
 800e610:	42af      	cmp	r7, r5
 800e612:	60a4      	str	r4, [r4, #8]
 800e614:	f884 800c 	strb.w	r8, [r4, #12]
 800e618:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800e61c:	d1f3      	bne.n	800e606 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800e61e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e622:	4770      	bx	lr

0800e624 <rmw_uxrce_init_init_options_impl_memory>:
 800e624:	b1e2      	cbz	r2, 800e660 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800e626:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e62a:	7b05      	ldrb	r5, [r0, #12]
 800e62c:	4606      	mov	r6, r0
 800e62e:	b9ad      	cbnz	r5, 800e65c <rmw_uxrce_init_init_options_impl_memory+0x38>
 800e630:	232c      	movs	r3, #44	@ 0x2c
 800e632:	e9c0 5500 	strd	r5, r5, [r0]
 800e636:	6083      	str	r3, [r0, #8]
 800e638:	f240 1301 	movw	r3, #257	@ 0x101
 800e63c:	4617      	mov	r7, r2
 800e63e:	8183      	strh	r3, [r0, #12]
 800e640:	460c      	mov	r4, r1
 800e642:	46a8      	mov	r8, r5
 800e644:	4621      	mov	r1, r4
 800e646:	4630      	mov	r0, r6
 800e648:	3501      	adds	r5, #1
 800e64a:	f008 fb19 	bl	8016c80 <put_memory>
 800e64e:	42af      	cmp	r7, r5
 800e650:	60a4      	str	r4, [r4, #8]
 800e652:	f884 800c 	strb.w	r8, [r4, #12]
 800e656:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800e65a:	d1f3      	bne.n	800e644 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800e65c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e660:	4770      	bx	lr
 800e662:	bf00      	nop

0800e664 <rmw_uxrce_init_wait_set_memory>:
 800e664:	b1e2      	cbz	r2, 800e6a0 <rmw_uxrce_init_wait_set_memory+0x3c>
 800e666:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e66a:	7b05      	ldrb	r5, [r0, #12]
 800e66c:	4606      	mov	r6, r0
 800e66e:	b9ad      	cbnz	r5, 800e69c <rmw_uxrce_init_wait_set_memory+0x38>
 800e670:	231c      	movs	r3, #28
 800e672:	e9c0 5500 	strd	r5, r5, [r0]
 800e676:	6083      	str	r3, [r0, #8]
 800e678:	f240 1301 	movw	r3, #257	@ 0x101
 800e67c:	4617      	mov	r7, r2
 800e67e:	8183      	strh	r3, [r0, #12]
 800e680:	460c      	mov	r4, r1
 800e682:	46a8      	mov	r8, r5
 800e684:	4621      	mov	r1, r4
 800e686:	4630      	mov	r0, r6
 800e688:	3501      	adds	r5, #1
 800e68a:	f008 faf9 	bl	8016c80 <put_memory>
 800e68e:	42af      	cmp	r7, r5
 800e690:	60a4      	str	r4, [r4, #8]
 800e692:	f884 800c 	strb.w	r8, [r4, #12]
 800e696:	f104 041c 	add.w	r4, r4, #28
 800e69a:	d1f3      	bne.n	800e684 <rmw_uxrce_init_wait_set_memory+0x20>
 800e69c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6a0:	4770      	bx	lr
 800e6a2:	bf00      	nop

0800e6a4 <rmw_uxrce_init_guard_condition_memory>:
 800e6a4:	b1e2      	cbz	r2, 800e6e0 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800e6a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6aa:	7b05      	ldrb	r5, [r0, #12]
 800e6ac:	4606      	mov	r6, r0
 800e6ae:	b9ad      	cbnz	r5, 800e6dc <rmw_uxrce_init_guard_condition_memory+0x38>
 800e6b0:	2320      	movs	r3, #32
 800e6b2:	e9c0 5500 	strd	r5, r5, [r0]
 800e6b6:	6083      	str	r3, [r0, #8]
 800e6b8:	f240 1301 	movw	r3, #257	@ 0x101
 800e6bc:	4617      	mov	r7, r2
 800e6be:	8183      	strh	r3, [r0, #12]
 800e6c0:	460c      	mov	r4, r1
 800e6c2:	46a8      	mov	r8, r5
 800e6c4:	4621      	mov	r1, r4
 800e6c6:	4630      	mov	r0, r6
 800e6c8:	3501      	adds	r5, #1
 800e6ca:	f008 fad9 	bl	8016c80 <put_memory>
 800e6ce:	42af      	cmp	r7, r5
 800e6d0:	60a4      	str	r4, [r4, #8]
 800e6d2:	f884 800c 	strb.w	r8, [r4, #12]
 800e6d6:	f104 0420 	add.w	r4, r4, #32
 800e6da:	d1f3      	bne.n	800e6c4 <rmw_uxrce_init_guard_condition_memory+0x20>
 800e6dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6e0:	4770      	bx	lr
 800e6e2:	bf00      	nop

0800e6e4 <rmw_uxrce_fini_session_memory>:
 800e6e4:	4601      	mov	r1, r0
 800e6e6:	4801      	ldr	r0, [pc, #4]	@ (800e6ec <rmw_uxrce_fini_session_memory+0x8>)
 800e6e8:	f008 baca 	b.w	8016c80 <put_memory>
 800e6ec:	2000b874 	.word	0x2000b874

0800e6f0 <rmw_uxrce_fini_node_memory>:
 800e6f0:	b538      	push	{r3, r4, r5, lr}
 800e6f2:	4604      	mov	r4, r0
 800e6f4:	6800      	ldr	r0, [r0, #0]
 800e6f6:	b128      	cbz	r0, 800e704 <rmw_uxrce_fini_node_memory+0x14>
 800e6f8:	4b07      	ldr	r3, [pc, #28]	@ (800e718 <rmw_uxrce_fini_node_memory+0x28>)
 800e6fa:	6819      	ldr	r1, [r3, #0]
 800e6fc:	f7f1 fd90 	bl	8000220 <strcmp>
 800e700:	b940      	cbnz	r0, 800e714 <rmw_uxrce_fini_node_memory+0x24>
 800e702:	6020      	str	r0, [r4, #0]
 800e704:	6861      	ldr	r1, [r4, #4]
 800e706:	b129      	cbz	r1, 800e714 <rmw_uxrce_fini_node_memory+0x24>
 800e708:	2500      	movs	r5, #0
 800e70a:	4804      	ldr	r0, [pc, #16]	@ (800e71c <rmw_uxrce_fini_node_memory+0x2c>)
 800e70c:	610d      	str	r5, [r1, #16]
 800e70e:	f008 fab7 	bl	8016c80 <put_memory>
 800e712:	6065      	str	r5, [r4, #4]
 800e714:	bd38      	pop	{r3, r4, r5, pc}
 800e716:	bf00      	nop
 800e718:	0801bda0 	.word	0x0801bda0
 800e71c:	2000b844 	.word	0x2000b844

0800e720 <rmw_uxrce_fini_publisher_memory>:
 800e720:	b510      	push	{r4, lr}
 800e722:	4604      	mov	r4, r0
 800e724:	6800      	ldr	r0, [r0, #0]
 800e726:	b128      	cbz	r0, 800e734 <rmw_uxrce_fini_publisher_memory+0x14>
 800e728:	4b06      	ldr	r3, [pc, #24]	@ (800e744 <rmw_uxrce_fini_publisher_memory+0x24>)
 800e72a:	6819      	ldr	r1, [r3, #0]
 800e72c:	f7f1 fd78 	bl	8000220 <strcmp>
 800e730:	b938      	cbnz	r0, 800e742 <rmw_uxrce_fini_publisher_memory+0x22>
 800e732:	6020      	str	r0, [r4, #0]
 800e734:	6861      	ldr	r1, [r4, #4]
 800e736:	b121      	cbz	r1, 800e742 <rmw_uxrce_fini_publisher_memory+0x22>
 800e738:	4803      	ldr	r0, [pc, #12]	@ (800e748 <rmw_uxrce_fini_publisher_memory+0x28>)
 800e73a:	f008 faa1 	bl	8016c80 <put_memory>
 800e73e:	2300      	movs	r3, #0
 800e740:	6063      	str	r3, [r4, #4]
 800e742:	bd10      	pop	{r4, pc}
 800e744:	0801bda0 	.word	0x0801bda0
 800e748:	2000b854 	.word	0x2000b854

0800e74c <rmw_uxrce_fini_subscription_memory>:
 800e74c:	b510      	push	{r4, lr}
 800e74e:	4604      	mov	r4, r0
 800e750:	6800      	ldr	r0, [r0, #0]
 800e752:	b128      	cbz	r0, 800e760 <rmw_uxrce_fini_subscription_memory+0x14>
 800e754:	4b06      	ldr	r3, [pc, #24]	@ (800e770 <rmw_uxrce_fini_subscription_memory+0x24>)
 800e756:	6819      	ldr	r1, [r3, #0]
 800e758:	f7f1 fd62 	bl	8000220 <strcmp>
 800e75c:	b938      	cbnz	r0, 800e76e <rmw_uxrce_fini_subscription_memory+0x22>
 800e75e:	6020      	str	r0, [r4, #0]
 800e760:	6861      	ldr	r1, [r4, #4]
 800e762:	b121      	cbz	r1, 800e76e <rmw_uxrce_fini_subscription_memory+0x22>
 800e764:	4803      	ldr	r0, [pc, #12]	@ (800e774 <rmw_uxrce_fini_subscription_memory+0x28>)
 800e766:	f008 fa8b 	bl	8016c80 <put_memory>
 800e76a:	2300      	movs	r3, #0
 800e76c:	6063      	str	r3, [r4, #4]
 800e76e:	bd10      	pop	{r4, pc}
 800e770:	0801bda0 	.word	0x0801bda0
 800e774:	2000b894 	.word	0x2000b894

0800e778 <rmw_uxrce_fini_service_memory>:
 800e778:	b510      	push	{r4, lr}
 800e77a:	4604      	mov	r4, r0
 800e77c:	6800      	ldr	r0, [r0, #0]
 800e77e:	b128      	cbz	r0, 800e78c <rmw_uxrce_fini_service_memory+0x14>
 800e780:	4b06      	ldr	r3, [pc, #24]	@ (800e79c <rmw_uxrce_fini_service_memory+0x24>)
 800e782:	6819      	ldr	r1, [r3, #0]
 800e784:	f7f1 fd4c 	bl	8000220 <strcmp>
 800e788:	b938      	cbnz	r0, 800e79a <rmw_uxrce_fini_service_memory+0x22>
 800e78a:	6020      	str	r0, [r4, #0]
 800e78c:	6861      	ldr	r1, [r4, #4]
 800e78e:	b121      	cbz	r1, 800e79a <rmw_uxrce_fini_service_memory+0x22>
 800e790:	4803      	ldr	r0, [pc, #12]	@ (800e7a0 <rmw_uxrce_fini_service_memory+0x28>)
 800e792:	f008 fa75 	bl	8016c80 <put_memory>
 800e796:	2300      	movs	r3, #0
 800e798:	6063      	str	r3, [r4, #4]
 800e79a:	bd10      	pop	{r4, pc}
 800e79c:	0801bda0 	.word	0x0801bda0
 800e7a0:	2000b864 	.word	0x2000b864

0800e7a4 <rmw_uxrce_fini_client_memory>:
 800e7a4:	b510      	push	{r4, lr}
 800e7a6:	4604      	mov	r4, r0
 800e7a8:	6800      	ldr	r0, [r0, #0]
 800e7aa:	b128      	cbz	r0, 800e7b8 <rmw_uxrce_fini_client_memory+0x14>
 800e7ac:	4b06      	ldr	r3, [pc, #24]	@ (800e7c8 <rmw_uxrce_fini_client_memory+0x24>)
 800e7ae:	6819      	ldr	r1, [r3, #0]
 800e7b0:	f7f1 fd36 	bl	8000220 <strcmp>
 800e7b4:	b938      	cbnz	r0, 800e7c6 <rmw_uxrce_fini_client_memory+0x22>
 800e7b6:	6020      	str	r0, [r4, #0]
 800e7b8:	6861      	ldr	r1, [r4, #4]
 800e7ba:	b121      	cbz	r1, 800e7c6 <rmw_uxrce_fini_client_memory+0x22>
 800e7bc:	4803      	ldr	r0, [pc, #12]	@ (800e7cc <rmw_uxrce_fini_client_memory+0x28>)
 800e7be:	f008 fa5f 	bl	8016c80 <put_memory>
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	6063      	str	r3, [r4, #4]
 800e7c6:	bd10      	pop	{r4, pc}
 800e7c8:	0801bda0 	.word	0x0801bda0
 800e7cc:	20006eac 	.word	0x20006eac

0800e7d0 <rmw_uxrce_fini_topic_memory>:
 800e7d0:	b510      	push	{r4, lr}
 800e7d2:	4604      	mov	r4, r0
 800e7d4:	4621      	mov	r1, r4
 800e7d6:	4803      	ldr	r0, [pc, #12]	@ (800e7e4 <rmw_uxrce_fini_topic_memory+0x14>)
 800e7d8:	f008 fa52 	bl	8016c80 <put_memory>
 800e7dc:	2300      	movs	r3, #0
 800e7de:	61a3      	str	r3, [r4, #24]
 800e7e0:	bd10      	pop	{r4, pc}
 800e7e2:	bf00      	nop
 800e7e4:	2000b8a4 	.word	0x2000b8a4

0800e7e8 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800e7e8:	b082      	sub	sp, #8
 800e7ea:	b530      	push	{r4, r5, lr}
 800e7ec:	4925      	ldr	r1, [pc, #148]	@ (800e884 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800e7ee:	680d      	ldr	r5, [r1, #0]
 800e7f0:	ac03      	add	r4, sp, #12
 800e7f2:	e884 000c 	stmia.w	r4, {r2, r3}
 800e7f6:	461c      	mov	r4, r3
 800e7f8:	2d00      	cmp	r5, #0
 800e7fa:	d041      	beq.n	800e880 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800e7fc:	462b      	mov	r3, r5
 800e7fe:	2100      	movs	r1, #0
 800e800:	689a      	ldr	r2, [r3, #8]
 800e802:	685b      	ldr	r3, [r3, #4]
 800e804:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800e808:	4290      	cmp	r0, r2
 800e80a:	bf08      	it	eq
 800e80c:	3101      	addeq	r1, #1
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d1f6      	bne.n	800e800 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800e812:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800e816:	2b02      	cmp	r3, #2
 800e818:	d029      	beq.n	800e86e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800e81a:	d907      	bls.n	800e82c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800e81c:	2b03      	cmp	r3, #3
 800e81e:	d005      	beq.n	800e82c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800e820:	2100      	movs	r1, #0
 800e822:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e826:	4608      	mov	r0, r1
 800e828:	b002      	add	sp, #8
 800e82a:	4770      	bx	lr
 800e82c:	b314      	cbz	r4, 800e874 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800e82e:	428c      	cmp	r4, r1
 800e830:	d820      	bhi.n	800e874 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800e832:	2d00      	cmp	r5, #0
 800e834:	d0f4      	beq.n	800e820 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800e836:	2100      	movs	r1, #0
 800e838:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800e83c:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800e840:	e002      	b.n	800e848 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800e842:	686d      	ldr	r5, [r5, #4]
 800e844:	2d00      	cmp	r5, #0
 800e846:	d0ec      	beq.n	800e822 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800e848:	68ab      	ldr	r3, [r5, #8]
 800e84a:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800e84e:	4290      	cmp	r0, r2
 800e850:	d1f7      	bne.n	800e842 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800e852:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800e856:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800e85a:	4562      	cmp	r2, ip
 800e85c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800e860:	eb73 0e04 	sbcs.w	lr, r3, r4
 800e864:	daed      	bge.n	800e842 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800e866:	4694      	mov	ip, r2
 800e868:	461c      	mov	r4, r3
 800e86a:	4629      	mov	r1, r5
 800e86c:	e7e9      	b.n	800e842 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800e86e:	b10c      	cbz	r4, 800e874 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800e870:	428c      	cmp	r4, r1
 800e872:	d9d5      	bls.n	800e820 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800e874:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e878:	4802      	ldr	r0, [pc, #8]	@ (800e884 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800e87a:	b002      	add	sp, #8
 800e87c:	f008 b9f0 	b.w	8016c60 <get_memory>
 800e880:	4629      	mov	r1, r5
 800e882:	e7c6      	b.n	800e812 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800e884:	2000b884 	.word	0x2000b884

0800e888 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800e888:	4b11      	ldr	r3, [pc, #68]	@ (800e8d0 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	b530      	push	{r4, r5, lr}
 800e88e:	b1e3      	cbz	r3, 800e8ca <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800e890:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800e894:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800e898:	2400      	movs	r4, #0
 800e89a:	e001      	b.n	800e8a0 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800e89c:	685b      	ldr	r3, [r3, #4]
 800e89e:	b193      	cbz	r3, 800e8c6 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800e8a0:	689a      	ldr	r2, [r3, #8]
 800e8a2:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800e8a6:	4288      	cmp	r0, r1
 800e8a8:	d1f8      	bne.n	800e89c <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800e8aa:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800e8ae:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800e8b2:	4571      	cmp	r1, lr
 800e8b4:	eb72 050c 	sbcs.w	r5, r2, ip
 800e8b8:	daf0      	bge.n	800e89c <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800e8ba:	461c      	mov	r4, r3
 800e8bc:	685b      	ldr	r3, [r3, #4]
 800e8be:	468e      	mov	lr, r1
 800e8c0:	4694      	mov	ip, r2
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d1ec      	bne.n	800e8a0 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800e8c6:	4620      	mov	r0, r4
 800e8c8:	bd30      	pop	{r4, r5, pc}
 800e8ca:	461c      	mov	r4, r3
 800e8cc:	4620      	mov	r0, r4
 800e8ce:	bd30      	pop	{r4, r5, pc}
 800e8d0:	2000b884 	.word	0x2000b884
 800e8d4:	00000000 	.word	0x00000000

0800e8d8 <rmw_uxrce_clean_expired_static_input_buffer>:
 800e8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8dc:	4b3c      	ldr	r3, [pc, #240]	@ (800e9d0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800e8de:	ed2d 8b06 	vpush	{d8-d10}
 800e8e2:	681f      	ldr	r7, [r3, #0]
 800e8e4:	b08d      	sub	sp, #52	@ 0x34
 800e8e6:	f7ff fd7d 	bl	800e3e4 <rmw_uros_epoch_nanos>
 800e8ea:	2f00      	cmp	r7, #0
 800e8ec:	d05d      	beq.n	800e9aa <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800e8ee:	46b8      	mov	r8, r7
 800e8f0:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800e9b8 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800e8f4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800e8f8:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800e8fc:	2b04      	cmp	r3, #4
 800e8fe:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800e9c0 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800e902:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800e9c8 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800e906:	4681      	mov	r9, r0
 800e908:	468a      	mov	sl, r1
 800e90a:	ac04      	add	r4, sp, #16
 800e90c:	d03f      	beq.n	800e98e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800e90e:	2b05      	cmp	r3, #5
 800e910:	d044      	beq.n	800e99c <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800e912:	2b03      	cmp	r3, #3
 800e914:	d03b      	beq.n	800e98e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800e916:	ed8d 8b04 	vstr	d8, [sp, #16]
 800e91a:	ed8d ab06 	vstr	d10, [sp, #24]
 800e91e:	ed8d 8b08 	vstr	d8, [sp, #32]
 800e922:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800e926:	ab08      	add	r3, sp, #32
 800e928:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e92a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800e92e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800e932:	f007 fee1 	bl	80166f8 <rmw_time_equal>
 800e936:	b118      	cbz	r0, 800e940 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800e938:	ed8d 9b04 	vstr	d9, [sp, #16]
 800e93c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800e940:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800e944:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800e948:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800e94c:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800e950:	f007 ff26 	bl	80167a0 <rmw_time_total_nsec>
 800e954:	1830      	adds	r0, r6, r0
 800e956:	eb47 0101 	adc.w	r1, r7, r1
 800e95a:	4548      	cmp	r0, r9
 800e95c:	eb71 030a 	sbcs.w	r3, r1, sl
 800e960:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800e964:	db05      	blt.n	800e972 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800e966:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800e96a:	4591      	cmp	r9, r2
 800e96c:	eb7a 0303 	sbcs.w	r3, sl, r3
 800e970:	da03      	bge.n	800e97a <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800e972:	4817      	ldr	r0, [pc, #92]	@ (800e9d0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800e974:	4641      	mov	r1, r8
 800e976:	f008 f983 	bl	8016c80 <put_memory>
 800e97a:	f1bb 0f00 	cmp.w	fp, #0
 800e97e:	d014      	beq.n	800e9aa <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800e980:	46d8      	mov	r8, fp
 800e982:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800e986:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800e98a:	2b04      	cmp	r3, #4
 800e98c:	d1bf      	bne.n	800e90e <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800e98e:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800e992:	3340      	adds	r3, #64	@ 0x40
 800e994:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e996:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e99a:	e7c0      	b.n	800e91e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800e99c:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800e9a0:	3348      	adds	r3, #72	@ 0x48
 800e9a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e9a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e9a8:	e7b9      	b.n	800e91e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800e9aa:	b00d      	add	sp, #52	@ 0x34
 800e9ac:	ecbd 8b06 	vpop	{d8-d10}
 800e9b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9b4:	f3af 8000 	nop.w
	...
 800e9c0:	00000001 	.word	0x00000001
 800e9c4:	00000000 	.word	0x00000000
 800e9c8:	0000001e 	.word	0x0000001e
 800e9cc:	00000000 	.word	0x00000000
 800e9d0:	2000b884 	.word	0x2000b884

0800e9d4 <run_xrce_session>:
 800e9d4:	b510      	push	{r4, lr}
 800e9d6:	788c      	ldrb	r4, [r1, #2]
 800e9d8:	b086      	sub	sp, #24
 800e9da:	2c01      	cmp	r4, #1
 800e9dc:	f8ad 200e 	strh.w	r2, [sp, #14]
 800e9e0:	d00c      	beq.n	800e9fc <run_xrce_session+0x28>
 800e9e2:	4619      	mov	r1, r3
 800e9e4:	2301      	movs	r3, #1
 800e9e6:	9300      	str	r3, [sp, #0]
 800e9e8:	f10d 020e 	add.w	r2, sp, #14
 800e9ec:	f10d 0317 	add.w	r3, sp, #23
 800e9f0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e9f4:	f002 f924 	bl	8010c40 <uxr_run_session_until_all_status>
 800e9f8:	b006      	add	sp, #24
 800e9fa:	bd10      	pop	{r4, pc}
 800e9fc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ea00:	f001 fd38 	bl	8010474 <uxr_flash_output_streams>
 800ea04:	4620      	mov	r0, r4
 800ea06:	b006      	add	sp, #24
 800ea08:	bd10      	pop	{r4, pc}
 800ea0a:	bf00      	nop

0800ea0c <convert_qos_profile>:
 800ea0c:	7a4a      	ldrb	r2, [r1, #9]
 800ea0e:	f891 c008 	ldrb.w	ip, [r1, #8]
 800ea12:	2a02      	cmp	r2, #2
 800ea14:	bf18      	it	ne
 800ea16:	2200      	movne	r2, #0
 800ea18:	7002      	strb	r2, [r0, #0]
 800ea1a:	780a      	ldrb	r2, [r1, #0]
 800ea1c:	8889      	ldrh	r1, [r1, #4]
 800ea1e:	8081      	strh	r1, [r0, #4]
 800ea20:	f1ac 0c02 	sub.w	ip, ip, #2
 800ea24:	f1a2 0202 	sub.w	r2, r2, #2
 800ea28:	fabc fc8c 	clz	ip, ip
 800ea2c:	fab2 f282 	clz	r2, r2
 800ea30:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800ea34:	0952      	lsrs	r2, r2, #5
 800ea36:	f880 c001 	strb.w	ip, [r0, #1]
 800ea3a:	7082      	strb	r2, [r0, #2]
 800ea3c:	4770      	bx	lr
 800ea3e:	bf00      	nop

0800ea40 <generate_service_topics>:
 800ea40:	b570      	push	{r4, r5, r6, lr}
 800ea42:	b082      	sub	sp, #8
 800ea44:	461c      	mov	r4, r3
 800ea46:	4b12      	ldr	r3, [pc, #72]	@ (800ea90 <generate_service_topics+0x50>)
 800ea48:	9301      	str	r3, [sp, #4]
 800ea4a:	4605      	mov	r5, r0
 800ea4c:	4b11      	ldr	r3, [pc, #68]	@ (800ea94 <generate_service_topics+0x54>)
 800ea4e:	9000      	str	r0, [sp, #0]
 800ea50:	4616      	mov	r6, r2
 800ea52:	4608      	mov	r0, r1
 800ea54:	4a10      	ldr	r2, [pc, #64]	@ (800ea98 <generate_service_topics+0x58>)
 800ea56:	4621      	mov	r1, r4
 800ea58:	f00a faec 	bl	8019034 <sniprintf>
 800ea5c:	4b0f      	ldr	r3, [pc, #60]	@ (800ea9c <generate_service_topics+0x5c>)
 800ea5e:	9301      	str	r3, [sp, #4]
 800ea60:	4601      	mov	r1, r0
 800ea62:	9500      	str	r5, [sp, #0]
 800ea64:	4b0e      	ldr	r3, [pc, #56]	@ (800eaa0 <generate_service_topics+0x60>)
 800ea66:	4a0c      	ldr	r2, [pc, #48]	@ (800ea98 <generate_service_topics+0x58>)
 800ea68:	460d      	mov	r5, r1
 800ea6a:	4630      	mov	r0, r6
 800ea6c:	4621      	mov	r1, r4
 800ea6e:	f00a fae1 	bl	8019034 <sniprintf>
 800ea72:	2d00      	cmp	r5, #0
 800ea74:	db01      	blt.n	800ea7a <generate_service_topics+0x3a>
 800ea76:	42ac      	cmp	r4, r5
 800ea78:	dc02      	bgt.n	800ea80 <generate_service_topics+0x40>
 800ea7a:	2000      	movs	r0, #0
 800ea7c:	b002      	add	sp, #8
 800ea7e:	bd70      	pop	{r4, r5, r6, pc}
 800ea80:	2800      	cmp	r0, #0
 800ea82:	dbfa      	blt.n	800ea7a <generate_service_topics+0x3a>
 800ea84:	4284      	cmp	r4, r0
 800ea86:	bfd4      	ite	le
 800ea88:	2000      	movle	r0, #0
 800ea8a:	2001      	movgt	r0, #1
 800ea8c:	b002      	add	sp, #8
 800ea8e:	bd70      	pop	{r4, r5, r6, pc}
 800ea90:	0801b2a4 	.word	0x0801b2a4
 800ea94:	0801b2a0 	.word	0x0801b2a0
 800ea98:	0801b27c 	.word	0x0801b27c
 800ea9c:	0801b298 	.word	0x0801b298
 800eaa0:	0801b294 	.word	0x0801b294

0800eaa4 <generate_service_types>:
 800eaa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eaa8:	4605      	mov	r5, r0
 800eaaa:	b086      	sub	sp, #24
 800eaac:	6880      	ldr	r0, [r0, #8]
 800eaae:	460c      	mov	r4, r1
 800eab0:	4617      	mov	r7, r2
 800eab2:	461e      	mov	r6, r3
 800eab4:	4780      	blx	r0
 800eab6:	68eb      	ldr	r3, [r5, #12]
 800eab8:	4680      	mov	r8, r0
 800eaba:	4798      	blx	r3
 800eabc:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800eac0:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800eac4:	2300      	movs	r3, #0
 800eac6:	7023      	strb	r3, [r4, #0]
 800eac8:	6813      	ldr	r3, [r2, #0]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d042      	beq.n	800eb54 <generate_service_types+0xb0>
 800eace:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800eb68 <generate_service_types+0xc4>
 800ead2:	4641      	mov	r1, r8
 800ead4:	4620      	mov	r0, r4
 800ead6:	4c22      	ldr	r4, [pc, #136]	@ (800eb60 <generate_service_types+0xbc>)
 800ead8:	9405      	str	r4, [sp, #20]
 800eada:	6852      	ldr	r2, [r2, #4]
 800eadc:	f8df a090 	ldr.w	sl, [pc, #144]	@ 800eb70 <generate_service_types+0xcc>
 800eae0:	9204      	str	r2, [sp, #16]
 800eae2:	9100      	str	r1, [sp, #0]
 800eae4:	e9cd 4802 	strd	r4, r8, [sp, #8]
 800eae8:	4a1e      	ldr	r2, [pc, #120]	@ (800eb64 <generate_service_types+0xc0>)
 800eaea:	f8cd a004 	str.w	sl, [sp, #4]
 800eaee:	4631      	mov	r1, r6
 800eaf0:	f00a faa0 	bl	8019034 <sniprintf>
 800eaf4:	2800      	cmp	r0, #0
 800eaf6:	db1f      	blt.n	800eb38 <generate_service_types+0x94>
 800eaf8:	2300      	movs	r3, #0
 800eafa:	703b      	strb	r3, [r7, #0]
 800eafc:	f8d9 3000 	ldr.w	r3, [r9]
 800eb00:	42b0      	cmp	r0, r6
 800eb02:	bfac      	ite	ge
 800eb04:	2500      	movge	r5, #0
 800eb06:	2501      	movlt	r5, #1
 800eb08:	b1eb      	cbz	r3, 800eb46 <generate_service_types+0xa2>
 800eb0a:	4a17      	ldr	r2, [pc, #92]	@ (800eb68 <generate_service_types+0xc4>)
 800eb0c:	9405      	str	r4, [sp, #20]
 800eb0e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800eb12:	9200      	str	r2, [sp, #0]
 800eb14:	e9cd 8103 	strd	r8, r1, [sp, #12]
 800eb18:	e9cd a401 	strd	sl, r4, [sp, #4]
 800eb1c:	4a11      	ldr	r2, [pc, #68]	@ (800eb64 <generate_service_types+0xc0>)
 800eb1e:	4638      	mov	r0, r7
 800eb20:	4631      	mov	r1, r6
 800eb22:	f00a fa87 	bl	8019034 <sniprintf>
 800eb26:	2800      	cmp	r0, #0
 800eb28:	db10      	blt.n	800eb4c <generate_service_types+0xa8>
 800eb2a:	42b0      	cmp	r0, r6
 800eb2c:	bfb4      	ite	lt
 800eb2e:	4628      	movlt	r0, r5
 800eb30:	2000      	movge	r0, #0
 800eb32:	b006      	add	sp, #24
 800eb34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb38:	2300      	movs	r3, #0
 800eb3a:	703b      	strb	r3, [r7, #0]
 800eb3c:	f8d9 3000 	ldr.w	r3, [r9]
 800eb40:	2500      	movs	r5, #0
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d1e1      	bne.n	800eb0a <generate_service_types+0x66>
 800eb46:	4b09      	ldr	r3, [pc, #36]	@ (800eb6c <generate_service_types+0xc8>)
 800eb48:	461a      	mov	r2, r3
 800eb4a:	e7df      	b.n	800eb0c <generate_service_types+0x68>
 800eb4c:	2000      	movs	r0, #0
 800eb4e:	b006      	add	sp, #24
 800eb50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb54:	4b05      	ldr	r3, [pc, #20]	@ (800eb6c <generate_service_types+0xc8>)
 800eb56:	f8df 8010 	ldr.w	r8, [pc, #16]	@ 800eb68 <generate_service_types+0xc4>
 800eb5a:	4619      	mov	r1, r3
 800eb5c:	e7ba      	b.n	800ead4 <generate_service_types+0x30>
 800eb5e:	bf00      	nop
 800eb60:	0801b284 	.word	0x0801b284
 800eb64:	0801b274 	.word	0x0801b274
 800eb68:	0801b270 	.word	0x0801b270
 800eb6c:	0801be2c 	.word	0x0801be2c
 800eb70:	0801b288 	.word	0x0801b288

0800eb74 <generate_type_name>:
 800eb74:	b530      	push	{r4, r5, lr}
 800eb76:	2300      	movs	r3, #0
 800eb78:	700b      	strb	r3, [r1, #0]
 800eb7a:	6803      	ldr	r3, [r0, #0]
 800eb7c:	b087      	sub	sp, #28
 800eb7e:	4614      	mov	r4, r2
 800eb80:	b1d3      	cbz	r3, 800ebb8 <generate_type_name+0x44>
 800eb82:	4a0f      	ldr	r2, [pc, #60]	@ (800ebc0 <generate_type_name+0x4c>)
 800eb84:	4615      	mov	r5, r2
 800eb86:	9203      	str	r2, [sp, #12]
 800eb88:	9500      	str	r5, [sp, #0]
 800eb8a:	6842      	ldr	r2, [r0, #4]
 800eb8c:	480d      	ldr	r0, [pc, #52]	@ (800ebc4 <generate_type_name+0x50>)
 800eb8e:	9001      	str	r0, [sp, #4]
 800eb90:	4608      	mov	r0, r1
 800eb92:	490d      	ldr	r1, [pc, #52]	@ (800ebc8 <generate_type_name+0x54>)
 800eb94:	9204      	str	r2, [sp, #16]
 800eb96:	9105      	str	r1, [sp, #20]
 800eb98:	9102      	str	r1, [sp, #8]
 800eb9a:	4a0c      	ldr	r2, [pc, #48]	@ (800ebcc <generate_type_name+0x58>)
 800eb9c:	4621      	mov	r1, r4
 800eb9e:	f00a fa49 	bl	8019034 <sniprintf>
 800eba2:	2800      	cmp	r0, #0
 800eba4:	db05      	blt.n	800ebb2 <generate_type_name+0x3e>
 800eba6:	4284      	cmp	r4, r0
 800eba8:	bfd4      	ite	le
 800ebaa:	2000      	movle	r0, #0
 800ebac:	2001      	movgt	r0, #1
 800ebae:	b007      	add	sp, #28
 800ebb0:	bd30      	pop	{r4, r5, pc}
 800ebb2:	2000      	movs	r0, #0
 800ebb4:	b007      	add	sp, #28
 800ebb6:	bd30      	pop	{r4, r5, pc}
 800ebb8:	4b05      	ldr	r3, [pc, #20]	@ (800ebd0 <generate_type_name+0x5c>)
 800ebba:	4a01      	ldr	r2, [pc, #4]	@ (800ebc0 <generate_type_name+0x4c>)
 800ebbc:	461d      	mov	r5, r3
 800ebbe:	e7e2      	b.n	800eb86 <generate_type_name+0x12>
 800ebc0:	0801b270 	.word	0x0801b270
 800ebc4:	0801b288 	.word	0x0801b288
 800ebc8:	0801b284 	.word	0x0801b284
 800ebcc:	0801b274 	.word	0x0801b274
 800ebd0:	0801be2c 	.word	0x0801be2c

0800ebd4 <generate_topic_name>:
 800ebd4:	b510      	push	{r4, lr}
 800ebd6:	b082      	sub	sp, #8
 800ebd8:	4614      	mov	r4, r2
 800ebda:	9000      	str	r0, [sp, #0]
 800ebdc:	4b08      	ldr	r3, [pc, #32]	@ (800ec00 <generate_topic_name+0x2c>)
 800ebde:	4a09      	ldr	r2, [pc, #36]	@ (800ec04 <generate_topic_name+0x30>)
 800ebe0:	4608      	mov	r0, r1
 800ebe2:	4621      	mov	r1, r4
 800ebe4:	f00a fa26 	bl	8019034 <sniprintf>
 800ebe8:	2800      	cmp	r0, #0
 800ebea:	db05      	blt.n	800ebf8 <generate_topic_name+0x24>
 800ebec:	4284      	cmp	r4, r0
 800ebee:	bfd4      	ite	le
 800ebf0:	2000      	movle	r0, #0
 800ebf2:	2001      	movgt	r0, #1
 800ebf4:	b002      	add	sp, #8
 800ebf6:	bd10      	pop	{r4, pc}
 800ebf8:	2000      	movs	r0, #0
 800ebfa:	b002      	add	sp, #8
 800ebfc:	bd10      	pop	{r4, pc}
 800ebfe:	bf00      	nop
 800ec00:	0801b2ac 	.word	0x0801b2ac
 800ec04:	0801b28c 	.word	0x0801b28c

0800ec08 <is_uxrce_rmw_identifier_valid>:
 800ec08:	b510      	push	{r4, lr}
 800ec0a:	4604      	mov	r4, r0
 800ec0c:	b140      	cbz	r0, 800ec20 <is_uxrce_rmw_identifier_valid+0x18>
 800ec0e:	f008 f88f 	bl	8016d30 <rmw_get_implementation_identifier>
 800ec12:	4601      	mov	r1, r0
 800ec14:	4620      	mov	r0, r4
 800ec16:	f7f1 fb03 	bl	8000220 <strcmp>
 800ec1a:	fab0 f080 	clz	r0, r0
 800ec1e:	0940      	lsrs	r0, r0, #5
 800ec20:	bd10      	pop	{r4, pc}
 800ec22:	bf00      	nop

0800ec24 <get_message_typesupport_handle>:
 800ec24:	6883      	ldr	r3, [r0, #8]
 800ec26:	4718      	bx	r3

0800ec28 <get_message_typesupport_handle_function>:
 800ec28:	b510      	push	{r4, lr}
 800ec2a:	4604      	mov	r4, r0
 800ec2c:	6800      	ldr	r0, [r0, #0]
 800ec2e:	f7f1 faf7 	bl	8000220 <strcmp>
 800ec32:	2800      	cmp	r0, #0
 800ec34:	bf0c      	ite	eq
 800ec36:	4620      	moveq	r0, r4
 800ec38:	2000      	movne	r0, #0
 800ec3a:	bd10      	pop	{r4, pc}

0800ec3c <get_service_typesupport_handle>:
 800ec3c:	6883      	ldr	r3, [r0, #8]
 800ec3e:	4718      	bx	r3

0800ec40 <get_service_typesupport_handle_function>:
 800ec40:	b510      	push	{r4, lr}
 800ec42:	4604      	mov	r4, r0
 800ec44:	6800      	ldr	r0, [r0, #0]
 800ec46:	f7f1 faeb 	bl	8000220 <strcmp>
 800ec4a:	2800      	cmp	r0, #0
 800ec4c:	bf0c      	ite	eq
 800ec4e:	4620      	moveq	r0, r4
 800ec50:	2000      	movne	r0, #0
 800ec52:	bd10      	pop	{r4, pc}

0800ec54 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800ec54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec58:	6805      	ldr	r5, [r0, #0]
 800ec5a:	4604      	mov	r4, r0
 800ec5c:	4628      	mov	r0, r5
 800ec5e:	460e      	mov	r6, r1
 800ec60:	f7f1 fade 	bl	8000220 <strcmp>
 800ec64:	b1c8      	cbz	r0, 800ec9a <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800ec66:	4b11      	ldr	r3, [pc, #68]	@ (800ecac <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	429d      	cmp	r5, r3
 800ec6c:	d112      	bne.n	800ec94 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800ec6e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800ec72:	f8d8 4000 	ldr.w	r4, [r8]
 800ec76:	b16c      	cbz	r4, 800ec94 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800ec78:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800ec7c:	2700      	movs	r7, #0
 800ec7e:	3d04      	subs	r5, #4
 800ec80:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800ec84:	4631      	mov	r1, r6
 800ec86:	f7f1 facb 	bl	8000220 <strcmp>
 800ec8a:	00bb      	lsls	r3, r7, #2
 800ec8c:	b140      	cbz	r0, 800eca0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800ec8e:	3701      	adds	r7, #1
 800ec90:	42bc      	cmp	r4, r7
 800ec92:	d1f5      	bne.n	800ec80 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800ec94:	2000      	movs	r0, #0
 800ec96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec9a:	4620      	mov	r0, r4
 800ec9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eca0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800eca4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eca8:	58d3      	ldr	r3, [r2, r3]
 800ecaa:	4718      	bx	r3
 800ecac:	20000368 	.word	0x20000368

0800ecb0 <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 800ecb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecb4:	6805      	ldr	r5, [r0, #0]
 800ecb6:	4604      	mov	r4, r0
 800ecb8:	4628      	mov	r0, r5
 800ecba:	460e      	mov	r6, r1
 800ecbc:	f7f1 fab0 	bl	8000220 <strcmp>
 800ecc0:	b1c8      	cbz	r0, 800ecf6 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 800ecc2:	4b11      	ldr	r3, [pc, #68]	@ (800ed08 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	429d      	cmp	r5, r3
 800ecc8:	d112      	bne.n	800ecf0 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 800ecca:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800ecce:	f8d8 4000 	ldr.w	r4, [r8]
 800ecd2:	b16c      	cbz	r4, 800ecf0 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 800ecd4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800ecd8:	2700      	movs	r7, #0
 800ecda:	3d04      	subs	r5, #4
 800ecdc:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800ece0:	4631      	mov	r1, r6
 800ece2:	f7f1 fa9d 	bl	8000220 <strcmp>
 800ece6:	00bb      	lsls	r3, r7, #2
 800ece8:	b140      	cbz	r0, 800ecfc <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 800ecea:	3701      	adds	r7, #1
 800ecec:	42bc      	cmp	r4, r7
 800ecee:	d1f5      	bne.n	800ecdc <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 800ecf0:	2000      	movs	r0, #0
 800ecf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecf6:	4620      	mov	r0, r4
 800ecf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecfc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ed00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ed04:	58d3      	ldr	r3, [r2, r3]
 800ed06:	4718      	bx	r3
 800ed08:	20000368 	.word	0x20000368

0800ed0c <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800ed0c:	4b04      	ldr	r3, [pc, #16]	@ (800ed20 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800ed0e:	681a      	ldr	r2, [r3, #0]
 800ed10:	b10a      	cbz	r2, 800ed16 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xa>
 800ed12:	4803      	ldr	r0, [pc, #12]	@ (800ed20 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800ed14:	4770      	bx	lr
 800ed16:	4a03      	ldr	r2, [pc, #12]	@ (800ed24 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x18>)
 800ed18:	4801      	ldr	r0, [pc, #4]	@ (800ed20 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800ed1a:	6812      	ldr	r2, [r2, #0]
 800ed1c:	601a      	str	r2, [r3, #0]
 800ed1e:	4770      	bx	lr
 800ed20:	20000378 	.word	0x20000378
 800ed24:	20000368 	.word	0x20000368

0800ed28 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800ed28:	4a02      	ldr	r2, [pc, #8]	@ (800ed34 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xc>)
 800ed2a:	4b03      	ldr	r3, [pc, #12]	@ (800ed38 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x10>)
 800ed2c:	6812      	ldr	r2, [r2, #0]
 800ed2e:	601a      	str	r2, [r3, #0]
 800ed30:	4770      	bx	lr
 800ed32:	bf00      	nop
 800ed34:	20000368 	.word	0x20000368
 800ed38:	20000378 	.word	0x20000378

0800ed3c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__orientation_covariance>:
 800ed3c:	2009      	movs	r0, #9
 800ed3e:	4770      	bx	lr

0800ed40 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__orientation_covariance>:
 800ed40:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800ed44:	4770      	bx	lr
 800ed46:	bf00      	nop

0800ed48 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__orientation_covariance>:
 800ed48:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800ed4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed50:	e9c2 0100 	strd	r0, r1, [r2]
 800ed54:	4770      	bx	lr
 800ed56:	bf00      	nop

0800ed58 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__orientation_covariance>:
 800ed58:	e9d2 2300 	ldrd	r2, r3, [r2]
 800ed5c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800ed60:	e9c1 2300 	strd	r2, r3, [r1]
 800ed64:	4770      	bx	lr
 800ed66:	bf00      	nop

0800ed68 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_init_function>:
 800ed68:	f008 bb96 	b.w	8017498 <sensor_msgs__msg__Imu__init>

0800ed6c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_fini_function>:
 800ed6c:	f008 bbea 	b.w	8017544 <sensor_msgs__msg__Imu__fini>

0800ed70 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__angular_velocity_covariance>:
 800ed70:	2009      	movs	r0, #9
 800ed72:	4770      	bx	lr

0800ed74 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__linear_acceleration_covariance>:
 800ed74:	2009      	movs	r0, #9
 800ed76:	4770      	bx	lr

0800ed78 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__orientation_covariance>:
 800ed78:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800ed7c:	4770      	bx	lr
 800ed7e:	bf00      	nop

0800ed80 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__linear_acceleration_covariance>:
 800ed80:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800ed84:	4770      	bx	lr
 800ed86:	bf00      	nop

0800ed88 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__linear_acceleration_covariance>:
 800ed88:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800ed8c:	4770      	bx	lr
 800ed8e:	bf00      	nop

0800ed90 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__angular_velocity_covariance>:
 800ed90:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800ed94:	4770      	bx	lr
 800ed96:	bf00      	nop

0800ed98 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__angular_velocity_covariance>:
 800ed98:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800ed9c:	4770      	bx	lr
 800ed9e:	bf00      	nop

0800eda0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__linear_acceleration_covariance>:
 800eda0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800eda4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eda8:	e9c2 0100 	strd	r0, r1, [r2]
 800edac:	4770      	bx	lr
 800edae:	bf00      	nop

0800edb0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__linear_acceleration_covariance>:
 800edb0:	e9d2 2300 	ldrd	r2, r3, [r2]
 800edb4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800edb8:	e9c1 2300 	strd	r2, r3, [r1]
 800edbc:	4770      	bx	lr
 800edbe:	bf00      	nop

0800edc0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__angular_velocity_covariance>:
 800edc0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800edc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800edc8:	e9c2 0100 	strd	r0, r1, [r2]
 800edcc:	4770      	bx	lr
 800edce:	bf00      	nop

0800edd0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__angular_velocity_covariance>:
 800edd0:	e9d2 2300 	ldrd	r2, r3, [r2]
 800edd4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800edd8:	e9c1 2300 	strd	r2, r3, [r1]
 800eddc:	4770      	bx	lr
 800edde:	bf00      	nop

0800ede0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800ede0:	b510      	push	{r4, lr}
 800ede2:	f000 f921 	bl	800f028 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 800ede6:	4c0b      	ldr	r4, [pc, #44]	@ (800ee14 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x34>)
 800ede8:	60e0      	str	r0, [r4, #12]
 800edea:	f000 fa7d 	bl	800f2e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800edee:	64a0      	str	r0, [r4, #72]	@ 0x48
 800edf0:	f000 fa8c 	bl	800f30c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800edf4:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 800edf8:	f000 fa88 	bl	800f30c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800edfc:	4b06      	ldr	r3, [pc, #24]	@ (800ee18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800edfe:	f8c4 0138 	str.w	r0, [r4, #312]	@ 0x138
 800ee02:	681a      	ldr	r2, [r3, #0]
 800ee04:	b10a      	cbz	r2, 800ee0a <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x2a>
 800ee06:	4804      	ldr	r0, [pc, #16]	@ (800ee18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800ee08:	bd10      	pop	{r4, pc}
 800ee0a:	4a04      	ldr	r2, [pc, #16]	@ (800ee1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x3c>)
 800ee0c:	4802      	ldr	r0, [pc, #8]	@ (800ee18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800ee0e:	6812      	ldr	r2, [r2, #0]
 800ee10:	601a      	str	r2, [r3, #0]
 800ee12:	bd10      	pop	{r4, pc}
 800ee14:	20000384 	.word	0x20000384
 800ee18:	20000528 	.word	0x20000528
 800ee1c:	2000036c 	.word	0x2000036c

0800ee20 <get_serialized_size_sensor_msgs__msg__Imu.part.0>:
 800ee20:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 800ee24:	4680      	mov	r8, r0
 800ee26:	460f      	mov	r7, r1
 800ee28:	f000 f95a 	bl	800f0e0 <get_serialized_size_std_msgs__msg__Header>
 800ee2c:	183c      	adds	r4, r7, r0
 800ee2e:	4621      	mov	r1, r4
 800ee30:	f108 0018 	add.w	r0, r8, #24
 800ee34:	f000 fa78 	bl	800f328 <get_serialized_size_geometry_msgs__msg__Quaternion>
 800ee38:	4404      	add	r4, r0
 800ee3a:	2108      	movs	r1, #8
 800ee3c:	4620      	mov	r0, r4
 800ee3e:	f7fd f91d 	bl	800c07c <ucdr_alignment>
 800ee42:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 800ee46:	4425      	add	r5, r4
 800ee48:	4629      	mov	r1, r5
 800ee4a:	f108 0080 	add.w	r0, r8, #128	@ 0x80
 800ee4e:	f000 fb23 	bl	800f498 <get_serialized_size_geometry_msgs__msg__Vector3>
 800ee52:	4405      	add	r5, r0
 800ee54:	2108      	movs	r1, #8
 800ee56:	4628      	mov	r0, r5
 800ee58:	f7fd f910 	bl	800c07c <ucdr_alignment>
 800ee5c:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 800ee60:	4425      	add	r5, r4
 800ee62:	4629      	mov	r1, r5
 800ee64:	f108 00e0 	add.w	r0, r8, #224	@ 0xe0
 800ee68:	f000 fb16 	bl	800f498 <get_serialized_size_geometry_msgs__msg__Vector3>
 800ee6c:	4405      	add	r5, r0
 800ee6e:	2108      	movs	r1, #8
 800ee70:	4628      	mov	r0, r5
 800ee72:	f7fd f903 	bl	800c07c <ucdr_alignment>
 800ee76:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 800ee7a:	4438      	add	r0, r7
 800ee7c:	4428      	add	r0, r5
 800ee7e:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 800ee82:	bf00      	nop

0800ee84 <get_serialized_size_sensor_msgs__msg__Imu>:
 800ee84:	b108      	cbz	r0, 800ee8a <get_serialized_size_sensor_msgs__msg__Imu+0x6>
 800ee86:	f7ff bfcb 	b.w	800ee20 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 800ee8a:	4770      	bx	lr

0800ee8c <_Imu__get_serialized_size>:
 800ee8c:	b110      	cbz	r0, 800ee94 <_Imu__get_serialized_size+0x8>
 800ee8e:	2100      	movs	r1, #0
 800ee90:	f7ff bfc6 	b.w	800ee20 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 800ee94:	4770      	bx	lr
 800ee96:	bf00      	nop

0800ee98 <_Imu__cdr_deserialize>:
 800ee98:	b538      	push	{r3, r4, r5, lr}
 800ee9a:	460c      	mov	r4, r1
 800ee9c:	b399      	cbz	r1, 800ef06 <_Imu__cdr_deserialize+0x6e>
 800ee9e:	4605      	mov	r5, r0
 800eea0:	f000 f9a0 	bl	800f1e4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800eea4:	6843      	ldr	r3, [r0, #4]
 800eea6:	4621      	mov	r1, r4
 800eea8:	68db      	ldr	r3, [r3, #12]
 800eeaa:	4628      	mov	r0, r5
 800eeac:	4798      	blx	r3
 800eeae:	f000 faef 	bl	800f490 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800eeb2:	6843      	ldr	r3, [r0, #4]
 800eeb4:	f104 0118 	add.w	r1, r4, #24
 800eeb8:	68db      	ldr	r3, [r3, #12]
 800eeba:	4628      	mov	r0, r5
 800eebc:	4798      	blx	r3
 800eebe:	2209      	movs	r2, #9
 800eec0:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 800eec4:	4628      	mov	r0, r5
 800eec6:	f000 fd3f 	bl	800f948 <ucdr_deserialize_array_double>
 800eeca:	f000 fb71 	bl	800f5b0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800eece:	6843      	ldr	r3, [r0, #4]
 800eed0:	f104 0180 	add.w	r1, r4, #128	@ 0x80
 800eed4:	68db      	ldr	r3, [r3, #12]
 800eed6:	4628      	mov	r0, r5
 800eed8:	4798      	blx	r3
 800eeda:	2209      	movs	r2, #9
 800eedc:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 800eee0:	4628      	mov	r0, r5
 800eee2:	f000 fd31 	bl	800f948 <ucdr_deserialize_array_double>
 800eee6:	f000 fb63 	bl	800f5b0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800eeea:	6843      	ldr	r3, [r0, #4]
 800eeec:	f104 01e0 	add.w	r1, r4, #224	@ 0xe0
 800eef0:	68db      	ldr	r3, [r3, #12]
 800eef2:	4628      	mov	r0, r5
 800eef4:	4798      	blx	r3
 800eef6:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 800eefa:	4628      	mov	r0, r5
 800eefc:	2209      	movs	r2, #9
 800eefe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ef02:	f000 bd21 	b.w	800f948 <ucdr_deserialize_array_double>
 800ef06:	4608      	mov	r0, r1
 800ef08:	bd38      	pop	{r3, r4, r5, pc}
 800ef0a:	bf00      	nop

0800ef0c <_Imu__cdr_serialize>:
 800ef0c:	2800      	cmp	r0, #0
 800ef0e:	d035      	beq.n	800ef7c <_Imu__cdr_serialize+0x70>
 800ef10:	b538      	push	{r3, r4, r5, lr}
 800ef12:	460d      	mov	r5, r1
 800ef14:	4604      	mov	r4, r0
 800ef16:	f000 f965 	bl	800f1e4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800ef1a:	6843      	ldr	r3, [r0, #4]
 800ef1c:	4629      	mov	r1, r5
 800ef1e:	689b      	ldr	r3, [r3, #8]
 800ef20:	4620      	mov	r0, r4
 800ef22:	4798      	blx	r3
 800ef24:	f000 fab4 	bl	800f490 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800ef28:	6843      	ldr	r3, [r0, #4]
 800ef2a:	4629      	mov	r1, r5
 800ef2c:	689b      	ldr	r3, [r3, #8]
 800ef2e:	f104 0018 	add.w	r0, r4, #24
 800ef32:	4798      	blx	r3
 800ef34:	2209      	movs	r2, #9
 800ef36:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 800ef3a:	4628      	mov	r0, r5
 800ef3c:	f000 fcb0 	bl	800f8a0 <ucdr_serialize_array_double>
 800ef40:	f000 fb36 	bl	800f5b0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ef44:	6843      	ldr	r3, [r0, #4]
 800ef46:	4629      	mov	r1, r5
 800ef48:	689b      	ldr	r3, [r3, #8]
 800ef4a:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 800ef4e:	4798      	blx	r3
 800ef50:	2209      	movs	r2, #9
 800ef52:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 800ef56:	4628      	mov	r0, r5
 800ef58:	f000 fca2 	bl	800f8a0 <ucdr_serialize_array_double>
 800ef5c:	f000 fb28 	bl	800f5b0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ef60:	6843      	ldr	r3, [r0, #4]
 800ef62:	4629      	mov	r1, r5
 800ef64:	689b      	ldr	r3, [r3, #8]
 800ef66:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 800ef6a:	4798      	blx	r3
 800ef6c:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 800ef70:	4628      	mov	r0, r5
 800ef72:	2209      	movs	r2, #9
 800ef74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ef78:	f000 bc92 	b.w	800f8a0 <ucdr_serialize_array_double>
 800ef7c:	4770      	bx	lr
 800ef7e:	bf00      	nop

0800ef80 <max_serialized_size_sensor_msgs__msg__Imu>:
 800ef80:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 800ef84:	2301      	movs	r3, #1
 800ef86:	7003      	strb	r3, [r0, #0]
 800ef88:	4680      	mov	r8, r0
 800ef8a:	460f      	mov	r7, r1
 800ef8c:	f000 f920 	bl	800f1d0 <max_serialized_size_std_msgs__msg__Header>
 800ef90:	183c      	adds	r4, r7, r0
 800ef92:	4621      	mov	r1, r4
 800ef94:	4640      	mov	r0, r8
 800ef96:	f000 fa59 	bl	800f44c <max_serialized_size_geometry_msgs__msg__Quaternion>
 800ef9a:	4404      	add	r4, r0
 800ef9c:	2108      	movs	r1, #8
 800ef9e:	4620      	mov	r0, r4
 800efa0:	f7fd f86c 	bl	800c07c <ucdr_alignment>
 800efa4:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 800efa8:	4425      	add	r5, r4
 800efaa:	4629      	mov	r1, r5
 800efac:	4640      	mov	r0, r8
 800efae:	f000 fae3 	bl	800f578 <max_serialized_size_geometry_msgs__msg__Vector3>
 800efb2:	4405      	add	r5, r0
 800efb4:	2108      	movs	r1, #8
 800efb6:	4628      	mov	r0, r5
 800efb8:	f7fd f860 	bl	800c07c <ucdr_alignment>
 800efbc:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 800efc0:	4425      	add	r5, r4
 800efc2:	4629      	mov	r1, r5
 800efc4:	4640      	mov	r0, r8
 800efc6:	f000 fad7 	bl	800f578 <max_serialized_size_geometry_msgs__msg__Vector3>
 800efca:	4405      	add	r5, r0
 800efcc:	2108      	movs	r1, #8
 800efce:	4628      	mov	r0, r5
 800efd0:	f7fd f854 	bl	800c07c <ucdr_alignment>
 800efd4:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 800efd8:	4438      	add	r0, r7
 800efda:	4428      	add	r0, r5
 800efdc:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}

0800efe0 <_Imu__max_serialized_size>:
 800efe0:	b500      	push	{lr}
 800efe2:	b083      	sub	sp, #12
 800efe4:	2100      	movs	r1, #0
 800efe6:	f10d 0007 	add.w	r0, sp, #7
 800efea:	f7ff ffc9 	bl	800ef80 <max_serialized_size_sensor_msgs__msg__Imu>
 800efee:	b003      	add	sp, #12
 800eff0:	f85d fb04 	ldr.w	pc, [sp], #4

0800eff4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800eff4:	4800      	ldr	r0, [pc, #0]	@ (800eff8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x4>)
 800eff6:	4770      	bx	lr
 800eff8:	20000534 	.word	0x20000534

0800effc <std_msgs__msg__Bool__rosidl_typesupport_introspection_c__Bool_init_function>:
 800effc:	f008 bab6 	b.w	801756c <std_msgs__msg__Bool__init>

0800f000 <std_msgs__msg__Bool__rosidl_typesupport_introspection_c__Bool_fini_function>:
 800f000:	f008 bab8 	b.w	8017574 <std_msgs__msg__Bool__fini>

0800f004 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool>:
 800f004:	4b04      	ldr	r3, [pc, #16]	@ (800f018 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool+0x14>)
 800f006:	681a      	ldr	r2, [r3, #0]
 800f008:	b10a      	cbz	r2, 800f00e <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool+0xa>
 800f00a:	4803      	ldr	r0, [pc, #12]	@ (800f018 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool+0x14>)
 800f00c:	4770      	bx	lr
 800f00e:	4a03      	ldr	r2, [pc, #12]	@ (800f01c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool+0x18>)
 800f010:	4801      	ldr	r0, [pc, #4]	@ (800f018 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool+0x14>)
 800f012:	6812      	ldr	r2, [r2, #0]
 800f014:	601a      	str	r2, [r3, #0]
 800f016:	4770      	bx	lr
 800f018:	20000598 	.word	0x20000598
 800f01c:	2000036c 	.word	0x2000036c

0800f020 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 800f020:	f008 baaa 	b.w	8017578 <std_msgs__msg__Header__init>

0800f024 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 800f024:	f008 bacc 	b.w	80175c0 <std_msgs__msg__Header__fini>

0800f028 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800f028:	b508      	push	{r3, lr}
 800f02a:	f000 f8e3 	bl	800f1f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f02e:	4b06      	ldr	r3, [pc, #24]	@ (800f048 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800f030:	4906      	ldr	r1, [pc, #24]	@ (800f04c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 800f032:	681a      	ldr	r2, [r3, #0]
 800f034:	60c8      	str	r0, [r1, #12]
 800f036:	b10a      	cbz	r2, 800f03c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 800f038:	4803      	ldr	r0, [pc, #12]	@ (800f048 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800f03a:	bd08      	pop	{r3, pc}
 800f03c:	4a04      	ldr	r2, [pc, #16]	@ (800f050 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 800f03e:	4802      	ldr	r0, [pc, #8]	@ (800f048 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800f040:	6812      	ldr	r2, [r2, #0]
 800f042:	601a      	str	r2, [r3, #0]
 800f044:	bd08      	pop	{r3, pc}
 800f046:	bf00      	nop
 800f048:	2000061c 	.word	0x2000061c
 800f04c:	200005a4 	.word	0x200005a4
 800f050:	2000036c 	.word	0x2000036c

0800f054 <_Bool__max_serialized_size>:
 800f054:	b508      	push	{r3, lr}
 800f056:	2101      	movs	r1, #1
 800f058:	2000      	movs	r0, #0
 800f05a:	f7fd f80f 	bl	800c07c <ucdr_alignment>
 800f05e:	3001      	adds	r0, #1
 800f060:	bd08      	pop	{r3, pc}
 800f062:	bf00      	nop

0800f064 <_Bool__cdr_deserialize>:
 800f064:	b109      	cbz	r1, 800f06a <_Bool__cdr_deserialize+0x6>
 800f066:	f7fb bd0b 	b.w	800aa80 <ucdr_deserialize_bool>
 800f06a:	4608      	mov	r0, r1
 800f06c:	4770      	bx	lr
 800f06e:	bf00      	nop

0800f070 <get_serialized_size_std_msgs__msg__Bool>:
 800f070:	b138      	cbz	r0, 800f082 <get_serialized_size_std_msgs__msg__Bool+0x12>
 800f072:	b508      	push	{r3, lr}
 800f074:	460b      	mov	r3, r1
 800f076:	4618      	mov	r0, r3
 800f078:	2101      	movs	r1, #1
 800f07a:	f7fc ffff 	bl	800c07c <ucdr_alignment>
 800f07e:	3001      	adds	r0, #1
 800f080:	bd08      	pop	{r3, pc}
 800f082:	4770      	bx	lr

0800f084 <_Bool__cdr_serialize>:
 800f084:	460a      	mov	r2, r1
 800f086:	b118      	cbz	r0, 800f090 <_Bool__cdr_serialize+0xc>
 800f088:	7801      	ldrb	r1, [r0, #0]
 800f08a:	4610      	mov	r0, r2
 800f08c:	f7fb bce2 	b.w	800aa54 <ucdr_serialize_bool>
 800f090:	4770      	bx	lr
 800f092:	bf00      	nop

0800f094 <_Bool__get_serialized_size>:
 800f094:	b130      	cbz	r0, 800f0a4 <_Bool__get_serialized_size+0x10>
 800f096:	b508      	push	{r3, lr}
 800f098:	2101      	movs	r1, #1
 800f09a:	2000      	movs	r0, #0
 800f09c:	f7fc ffee 	bl	800c07c <ucdr_alignment>
 800f0a0:	3001      	adds	r0, #1
 800f0a2:	bd08      	pop	{r3, pc}
 800f0a4:	4770      	bx	lr
 800f0a6:	bf00      	nop

0800f0a8 <max_serialized_size_std_msgs__msg__Bool>:
 800f0a8:	b508      	push	{r3, lr}
 800f0aa:	460b      	mov	r3, r1
 800f0ac:	2101      	movs	r1, #1
 800f0ae:	7001      	strb	r1, [r0, #0]
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	f7fc ffe3 	bl	800c07c <ucdr_alignment>
 800f0b6:	3001      	adds	r0, #1
 800f0b8:	bd08      	pop	{r3, pc}
 800f0ba:	bf00      	nop

0800f0bc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Bool>:
 800f0bc:	4800      	ldr	r0, [pc, #0]	@ (800f0c0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Bool+0x4>)
 800f0be:	4770      	bx	lr
 800f0c0:	20000628 	.word	0x20000628

0800f0c4 <_Header__max_serialized_size>:
 800f0c4:	b500      	push	{lr}
 800f0c6:	b083      	sub	sp, #12
 800f0c8:	2301      	movs	r3, #1
 800f0ca:	2100      	movs	r1, #0
 800f0cc:	f10d 0007 	add.w	r0, sp, #7
 800f0d0:	f88d 3007 	strb.w	r3, [sp, #7]
 800f0d4:	f000 f8ec 	bl	800f2b0 <max_serialized_size_builtin_interfaces__msg__Time>
 800f0d8:	b003      	add	sp, #12
 800f0da:	f85d fb04 	ldr.w	pc, [sp], #4
 800f0de:	bf00      	nop

0800f0e0 <get_serialized_size_std_msgs__msg__Header>:
 800f0e0:	b570      	push	{r4, r5, r6, lr}
 800f0e2:	4605      	mov	r5, r0
 800f0e4:	b168      	cbz	r0, 800f102 <get_serialized_size_std_msgs__msg__Header+0x22>
 800f0e6:	460c      	mov	r4, r1
 800f0e8:	f000 f892 	bl	800f210 <get_serialized_size_builtin_interfaces__msg__Time>
 800f0ec:	1826      	adds	r6, r4, r0
 800f0ee:	2104      	movs	r1, #4
 800f0f0:	4630      	mov	r0, r6
 800f0f2:	f7fc ffc3 	bl	800c07c <ucdr_alignment>
 800f0f6:	68e9      	ldr	r1, [r5, #12]
 800f0f8:	f1c4 0405 	rsb	r4, r4, #5
 800f0fc:	440c      	add	r4, r1
 800f0fe:	4404      	add	r4, r0
 800f100:	19a0      	adds	r0, r4, r6
 800f102:	bd70      	pop	{r4, r5, r6, pc}

0800f104 <_Header__cdr_deserialize>:
 800f104:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f106:	460c      	mov	r4, r1
 800f108:	b083      	sub	sp, #12
 800f10a:	b1e1      	cbz	r1, 800f146 <_Header__cdr_deserialize+0x42>
 800f10c:	4606      	mov	r6, r0
 800f10e:	f000 f8e3 	bl	800f2d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f112:	6843      	ldr	r3, [r0, #4]
 800f114:	4621      	mov	r1, r4
 800f116:	68db      	ldr	r3, [r3, #12]
 800f118:	4630      	mov	r0, r6
 800f11a:	4798      	blx	r3
 800f11c:	6927      	ldr	r7, [r4, #16]
 800f11e:	68a1      	ldr	r1, [r4, #8]
 800f120:	ab01      	add	r3, sp, #4
 800f122:	463a      	mov	r2, r7
 800f124:	4630      	mov	r0, r6
 800f126:	f000 fc77 	bl	800fa18 <ucdr_deserialize_sequence_char>
 800f12a:	9b01      	ldr	r3, [sp, #4]
 800f12c:	4605      	mov	r5, r0
 800f12e:	b920      	cbnz	r0, 800f13a <_Header__cdr_deserialize+0x36>
 800f130:	429f      	cmp	r7, r3
 800f132:	d30c      	bcc.n	800f14e <_Header__cdr_deserialize+0x4a>
 800f134:	4628      	mov	r0, r5
 800f136:	b003      	add	sp, #12
 800f138:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f13a:	b103      	cbz	r3, 800f13e <_Header__cdr_deserialize+0x3a>
 800f13c:	3b01      	subs	r3, #1
 800f13e:	4628      	mov	r0, r5
 800f140:	60e3      	str	r3, [r4, #12]
 800f142:	b003      	add	sp, #12
 800f144:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f146:	460d      	mov	r5, r1
 800f148:	4628      	mov	r0, r5
 800f14a:	b003      	add	sp, #12
 800f14c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f14e:	2101      	movs	r1, #1
 800f150:	75b0      	strb	r0, [r6, #22]
 800f152:	7571      	strb	r1, [r6, #21]
 800f154:	4630      	mov	r0, r6
 800f156:	60e5      	str	r5, [r4, #12]
 800f158:	f7fc ffa6 	bl	800c0a8 <ucdr_align_to>
 800f15c:	4630      	mov	r0, r6
 800f15e:	9901      	ldr	r1, [sp, #4]
 800f160:	f7fc ffd8 	bl	800c114 <ucdr_advance_buffer>
 800f164:	4628      	mov	r0, r5
 800f166:	b003      	add	sp, #12
 800f168:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f16a:	bf00      	nop

0800f16c <_Header__cdr_serialize>:
 800f16c:	b1f8      	cbz	r0, 800f1ae <_Header__cdr_serialize+0x42>
 800f16e:	b570      	push	{r4, r5, r6, lr}
 800f170:	4604      	mov	r4, r0
 800f172:	460d      	mov	r5, r1
 800f174:	f000 f8b0 	bl	800f2d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f178:	6843      	ldr	r3, [r0, #4]
 800f17a:	4629      	mov	r1, r5
 800f17c:	689b      	ldr	r3, [r3, #8]
 800f17e:	4620      	mov	r0, r4
 800f180:	4798      	blx	r3
 800f182:	68a6      	ldr	r6, [r4, #8]
 800f184:	b156      	cbz	r6, 800f19c <_Header__cdr_serialize+0x30>
 800f186:	4630      	mov	r0, r6
 800f188:	f7f1 f854 	bl	8000234 <strlen>
 800f18c:	4631      	mov	r1, r6
 800f18e:	60e0      	str	r0, [r4, #12]
 800f190:	1c42      	adds	r2, r0, #1
 800f192:	4628      	mov	r0, r5
 800f194:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f198:	f000 bc2c 	b.w	800f9f4 <ucdr_serialize_sequence_char>
 800f19c:	4630      	mov	r0, r6
 800f19e:	60e0      	str	r0, [r4, #12]
 800f1a0:	4632      	mov	r2, r6
 800f1a2:	4631      	mov	r1, r6
 800f1a4:	4628      	mov	r0, r5
 800f1a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f1aa:	f000 bc23 	b.w	800f9f4 <ucdr_serialize_sequence_char>
 800f1ae:	4770      	bx	lr

0800f1b0 <_Header__get_serialized_size>:
 800f1b0:	b538      	push	{r3, r4, r5, lr}
 800f1b2:	4604      	mov	r4, r0
 800f1b4:	b150      	cbz	r0, 800f1cc <_Header__get_serialized_size+0x1c>
 800f1b6:	2100      	movs	r1, #0
 800f1b8:	f000 f82a 	bl	800f210 <get_serialized_size_builtin_interfaces__msg__Time>
 800f1bc:	2104      	movs	r1, #4
 800f1be:	4605      	mov	r5, r0
 800f1c0:	f7fc ff5c 	bl	800c07c <ucdr_alignment>
 800f1c4:	68e2      	ldr	r2, [r4, #12]
 800f1c6:	3205      	adds	r2, #5
 800f1c8:	1953      	adds	r3, r2, r5
 800f1ca:	4418      	add	r0, r3
 800f1cc:	bd38      	pop	{r3, r4, r5, pc}
 800f1ce:	bf00      	nop

0800f1d0 <max_serialized_size_std_msgs__msg__Header>:
 800f1d0:	b510      	push	{r4, lr}
 800f1d2:	2301      	movs	r3, #1
 800f1d4:	4604      	mov	r4, r0
 800f1d6:	7003      	strb	r3, [r0, #0]
 800f1d8:	f000 f86a 	bl	800f2b0 <max_serialized_size_builtin_interfaces__msg__Time>
 800f1dc:	2300      	movs	r3, #0
 800f1de:	7023      	strb	r3, [r4, #0]
 800f1e0:	bd10      	pop	{r4, pc}
 800f1e2:	bf00      	nop

0800f1e4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800f1e4:	4800      	ldr	r0, [pc, #0]	@ (800f1e8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 800f1e6:	4770      	bx	lr
 800f1e8:	20000650 	.word	0x20000650

0800f1ec <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 800f1ec:	f008 b9f4 	b.w	80175d8 <builtin_interfaces__msg__Time__init>

0800f1f0 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 800f1f0:	f008 b9f6 	b.w	80175e0 <builtin_interfaces__msg__Time__fini>

0800f1f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800f1f4:	4b04      	ldr	r3, [pc, #16]	@ (800f208 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800f1f6:	681a      	ldr	r2, [r3, #0]
 800f1f8:	b10a      	cbz	r2, 800f1fe <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 800f1fa:	4803      	ldr	r0, [pc, #12]	@ (800f208 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800f1fc:	4770      	bx	lr
 800f1fe:	4a03      	ldr	r2, [pc, #12]	@ (800f20c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 800f200:	4801      	ldr	r0, [pc, #4]	@ (800f208 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800f202:	6812      	ldr	r2, [r2, #0]
 800f204:	601a      	str	r2, [r3, #0]
 800f206:	4770      	bx	lr
 800f208:	200006f0 	.word	0x200006f0
 800f20c:	2000036c 	.word	0x2000036c

0800f210 <get_serialized_size_builtin_interfaces__msg__Time>:
 800f210:	b180      	cbz	r0, 800f234 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 800f212:	b538      	push	{r3, r4, r5, lr}
 800f214:	460d      	mov	r5, r1
 800f216:	4628      	mov	r0, r5
 800f218:	2104      	movs	r1, #4
 800f21a:	f7fc ff2f 	bl	800c07c <ucdr_alignment>
 800f21e:	1d2b      	adds	r3, r5, #4
 800f220:	181c      	adds	r4, r3, r0
 800f222:	2104      	movs	r1, #4
 800f224:	4620      	mov	r0, r4
 800f226:	f7fc ff29 	bl	800c07c <ucdr_alignment>
 800f22a:	f1c5 0504 	rsb	r5, r5, #4
 800f22e:	4428      	add	r0, r5
 800f230:	4420      	add	r0, r4
 800f232:	bd38      	pop	{r3, r4, r5, pc}
 800f234:	4770      	bx	lr
 800f236:	bf00      	nop

0800f238 <_Time__cdr_deserialize>:
 800f238:	b538      	push	{r3, r4, r5, lr}
 800f23a:	460c      	mov	r4, r1
 800f23c:	b141      	cbz	r1, 800f250 <_Time__cdr_deserialize+0x18>
 800f23e:	4605      	mov	r5, r0
 800f240:	f7fc fafe 	bl	800b840 <ucdr_deserialize_int32_t>
 800f244:	1d21      	adds	r1, r4, #4
 800f246:	4628      	mov	r0, r5
 800f248:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f24c:	f7fb bf76 	b.w	800b13c <ucdr_deserialize_uint32_t>
 800f250:	4608      	mov	r0, r1
 800f252:	bd38      	pop	{r3, r4, r5, pc}

0800f254 <_Time__cdr_serialize>:
 800f254:	b160      	cbz	r0, 800f270 <_Time__cdr_serialize+0x1c>
 800f256:	b538      	push	{r3, r4, r5, lr}
 800f258:	460d      	mov	r5, r1
 800f25a:	4604      	mov	r4, r0
 800f25c:	6801      	ldr	r1, [r0, #0]
 800f25e:	4628      	mov	r0, r5
 800f260:	f7fc fa56 	bl	800b710 <ucdr_serialize_int32_t>
 800f264:	6861      	ldr	r1, [r4, #4]
 800f266:	4628      	mov	r0, r5
 800f268:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f26c:	f7fb be36 	b.w	800aedc <ucdr_serialize_uint32_t>
 800f270:	4770      	bx	lr
 800f272:	bf00      	nop

0800f274 <_Time__get_serialized_size>:
 800f274:	b160      	cbz	r0, 800f290 <_Time__get_serialized_size+0x1c>
 800f276:	b510      	push	{r4, lr}
 800f278:	2104      	movs	r1, #4
 800f27a:	2000      	movs	r0, #0
 800f27c:	f7fc fefe 	bl	800c07c <ucdr_alignment>
 800f280:	1d04      	adds	r4, r0, #4
 800f282:	2104      	movs	r1, #4
 800f284:	4620      	mov	r0, r4
 800f286:	f7fc fef9 	bl	800c07c <ucdr_alignment>
 800f28a:	3004      	adds	r0, #4
 800f28c:	4420      	add	r0, r4
 800f28e:	bd10      	pop	{r4, pc}
 800f290:	4770      	bx	lr
 800f292:	bf00      	nop

0800f294 <_Time__max_serialized_size>:
 800f294:	b510      	push	{r4, lr}
 800f296:	2104      	movs	r1, #4
 800f298:	2000      	movs	r0, #0
 800f29a:	f7fc feef 	bl	800c07c <ucdr_alignment>
 800f29e:	1d04      	adds	r4, r0, #4
 800f2a0:	2104      	movs	r1, #4
 800f2a2:	4620      	mov	r0, r4
 800f2a4:	f7fc feea 	bl	800c07c <ucdr_alignment>
 800f2a8:	3004      	adds	r0, #4
 800f2aa:	4420      	add	r0, r4
 800f2ac:	bd10      	pop	{r4, pc}
 800f2ae:	bf00      	nop

0800f2b0 <max_serialized_size_builtin_interfaces__msg__Time>:
 800f2b0:	b538      	push	{r3, r4, r5, lr}
 800f2b2:	460c      	mov	r4, r1
 800f2b4:	2301      	movs	r3, #1
 800f2b6:	7003      	strb	r3, [r0, #0]
 800f2b8:	2104      	movs	r1, #4
 800f2ba:	4620      	mov	r0, r4
 800f2bc:	f7fc fede 	bl	800c07c <ucdr_alignment>
 800f2c0:	1d25      	adds	r5, r4, #4
 800f2c2:	4405      	add	r5, r0
 800f2c4:	2104      	movs	r1, #4
 800f2c6:	4628      	mov	r0, r5
 800f2c8:	f7fc fed8 	bl	800c07c <ucdr_alignment>
 800f2cc:	f1c4 0404 	rsb	r4, r4, #4
 800f2d0:	4420      	add	r0, r4
 800f2d2:	4428      	add	r0, r5
 800f2d4:	bd38      	pop	{r3, r4, r5, pc}
 800f2d6:	bf00      	nop

0800f2d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800f2d8:	4800      	ldr	r0, [pc, #0]	@ (800f2dc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 800f2da:	4770      	bx	lr
 800f2dc:	200006fc 	.word	0x200006fc

0800f2e0 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_init_function>:
 800f2e0:	f008 b982 	b.w	80175e8 <geometry_msgs__msg__Quaternion__init>

0800f2e4 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_fini_function>:
 800f2e4:	f008 b994 	b.w	8017610 <geometry_msgs__msg__Quaternion__fini>

0800f2e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 800f2e8:	4b04      	ldr	r3, [pc, #16]	@ (800f2fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800f2ea:	681a      	ldr	r2, [r3, #0]
 800f2ec:	b10a      	cbz	r2, 800f2f2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0xa>
 800f2ee:	4803      	ldr	r0, [pc, #12]	@ (800f2fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800f2f0:	4770      	bx	lr
 800f2f2:	4a03      	ldr	r2, [pc, #12]	@ (800f300 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x18>)
 800f2f4:	4801      	ldr	r0, [pc, #4]	@ (800f2fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800f2f6:	6812      	ldr	r2, [r2, #0]
 800f2f8:	601a      	str	r2, [r3, #0]
 800f2fa:	4770      	bx	lr
 800f2fc:	20000814 	.word	0x20000814
 800f300:	2000036c 	.word	0x2000036c

0800f304 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800f304:	f008 b986 	b.w	8017614 <geometry_msgs__msg__Vector3__init>

0800f308 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800f308:	f008 b988 	b.w	801761c <geometry_msgs__msg__Vector3__fini>

0800f30c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800f30c:	4b04      	ldr	r3, [pc, #16]	@ (800f320 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800f30e:	681a      	ldr	r2, [r3, #0]
 800f310:	b10a      	cbz	r2, 800f316 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800f312:	4803      	ldr	r0, [pc, #12]	@ (800f320 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800f314:	4770      	bx	lr
 800f316:	4a03      	ldr	r2, [pc, #12]	@ (800f324 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800f318:	4801      	ldr	r0, [pc, #4]	@ (800f320 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800f31a:	6812      	ldr	r2, [r2, #0]
 800f31c:	601a      	str	r2, [r3, #0]
 800f31e:	4770      	bx	lr
 800f320:	200008d4 	.word	0x200008d4
 800f324:	2000036c 	.word	0x2000036c

0800f328 <get_serialized_size_geometry_msgs__msg__Quaternion>:
 800f328:	b1f0      	cbz	r0, 800f368 <get_serialized_size_geometry_msgs__msg__Quaternion+0x40>
 800f32a:	b570      	push	{r4, r5, r6, lr}
 800f32c:	460d      	mov	r5, r1
 800f32e:	4628      	mov	r0, r5
 800f330:	2108      	movs	r1, #8
 800f332:	f7fc fea3 	bl	800c07c <ucdr_alignment>
 800f336:	f105 0308 	add.w	r3, r5, #8
 800f33a:	181e      	adds	r6, r3, r0
 800f33c:	2108      	movs	r1, #8
 800f33e:	4630      	mov	r0, r6
 800f340:	f7fc fe9c 	bl	800c07c <ucdr_alignment>
 800f344:	f100 0408 	add.w	r4, r0, #8
 800f348:	4434      	add	r4, r6
 800f34a:	2108      	movs	r1, #8
 800f34c:	4620      	mov	r0, r4
 800f34e:	f7fc fe95 	bl	800c07c <ucdr_alignment>
 800f352:	3008      	adds	r0, #8
 800f354:	4404      	add	r4, r0
 800f356:	2108      	movs	r1, #8
 800f358:	4620      	mov	r0, r4
 800f35a:	f7fc fe8f 	bl	800c07c <ucdr_alignment>
 800f35e:	f1c5 0508 	rsb	r5, r5, #8
 800f362:	4428      	add	r0, r5
 800f364:	4420      	add	r0, r4
 800f366:	bd70      	pop	{r4, r5, r6, pc}
 800f368:	4770      	bx	lr
 800f36a:	bf00      	nop

0800f36c <_Quaternion__cdr_deserialize>:
 800f36c:	b538      	push	{r3, r4, r5, lr}
 800f36e:	460c      	mov	r4, r1
 800f370:	b199      	cbz	r1, 800f39a <_Quaternion__cdr_deserialize+0x2e>
 800f372:	4605      	mov	r5, r0
 800f374:	f7fc fc96 	bl	800bca4 <ucdr_deserialize_double>
 800f378:	f104 0108 	add.w	r1, r4, #8
 800f37c:	4628      	mov	r0, r5
 800f37e:	f7fc fc91 	bl	800bca4 <ucdr_deserialize_double>
 800f382:	f104 0110 	add.w	r1, r4, #16
 800f386:	4628      	mov	r0, r5
 800f388:	f7fc fc8c 	bl	800bca4 <ucdr_deserialize_double>
 800f38c:	f104 0118 	add.w	r1, r4, #24
 800f390:	4628      	mov	r0, r5
 800f392:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f396:	f7fc bc85 	b.w	800bca4 <ucdr_deserialize_double>
 800f39a:	4608      	mov	r0, r1
 800f39c:	bd38      	pop	{r3, r4, r5, pc}
 800f39e:	bf00      	nop

0800f3a0 <_Quaternion__cdr_serialize>:
 800f3a0:	b1c0      	cbz	r0, 800f3d4 <_Quaternion__cdr_serialize+0x34>
 800f3a2:	b538      	push	{r3, r4, r5, lr}
 800f3a4:	ed90 0b00 	vldr	d0, [r0]
 800f3a8:	460d      	mov	r5, r1
 800f3aa:	4604      	mov	r4, r0
 800f3ac:	4608      	mov	r0, r1
 800f3ae:	f7fc fad7 	bl	800b960 <ucdr_serialize_double>
 800f3b2:	ed94 0b02 	vldr	d0, [r4, #8]
 800f3b6:	4628      	mov	r0, r5
 800f3b8:	f7fc fad2 	bl	800b960 <ucdr_serialize_double>
 800f3bc:	ed94 0b04 	vldr	d0, [r4, #16]
 800f3c0:	4628      	mov	r0, r5
 800f3c2:	f7fc facd 	bl	800b960 <ucdr_serialize_double>
 800f3c6:	ed94 0b06 	vldr	d0, [r4, #24]
 800f3ca:	4628      	mov	r0, r5
 800f3cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f3d0:	f7fc bac6 	b.w	800b960 <ucdr_serialize_double>
 800f3d4:	4770      	bx	lr
 800f3d6:	bf00      	nop

0800f3d8 <_Quaternion__get_serialized_size>:
 800f3d8:	b1d0      	cbz	r0, 800f410 <_Quaternion__get_serialized_size+0x38>
 800f3da:	b538      	push	{r3, r4, r5, lr}
 800f3dc:	2108      	movs	r1, #8
 800f3de:	2000      	movs	r0, #0
 800f3e0:	f7fc fe4c 	bl	800c07c <ucdr_alignment>
 800f3e4:	f100 0508 	add.w	r5, r0, #8
 800f3e8:	2108      	movs	r1, #8
 800f3ea:	4628      	mov	r0, r5
 800f3ec:	f7fc fe46 	bl	800c07c <ucdr_alignment>
 800f3f0:	f100 0408 	add.w	r4, r0, #8
 800f3f4:	442c      	add	r4, r5
 800f3f6:	2108      	movs	r1, #8
 800f3f8:	4620      	mov	r0, r4
 800f3fa:	f7fc fe3f 	bl	800c07c <ucdr_alignment>
 800f3fe:	3008      	adds	r0, #8
 800f400:	4404      	add	r4, r0
 800f402:	2108      	movs	r1, #8
 800f404:	4620      	mov	r0, r4
 800f406:	f7fc fe39 	bl	800c07c <ucdr_alignment>
 800f40a:	3008      	adds	r0, #8
 800f40c:	4420      	add	r0, r4
 800f40e:	bd38      	pop	{r3, r4, r5, pc}
 800f410:	4770      	bx	lr
 800f412:	bf00      	nop

0800f414 <_Quaternion__max_serialized_size>:
 800f414:	b538      	push	{r3, r4, r5, lr}
 800f416:	2108      	movs	r1, #8
 800f418:	2000      	movs	r0, #0
 800f41a:	f7fc fe2f 	bl	800c07c <ucdr_alignment>
 800f41e:	f100 0508 	add.w	r5, r0, #8
 800f422:	2108      	movs	r1, #8
 800f424:	4628      	mov	r0, r5
 800f426:	f7fc fe29 	bl	800c07c <ucdr_alignment>
 800f42a:	f100 0408 	add.w	r4, r0, #8
 800f42e:	442c      	add	r4, r5
 800f430:	2108      	movs	r1, #8
 800f432:	4620      	mov	r0, r4
 800f434:	f7fc fe22 	bl	800c07c <ucdr_alignment>
 800f438:	3008      	adds	r0, #8
 800f43a:	4404      	add	r4, r0
 800f43c:	2108      	movs	r1, #8
 800f43e:	4620      	mov	r0, r4
 800f440:	f7fc fe1c 	bl	800c07c <ucdr_alignment>
 800f444:	3008      	adds	r0, #8
 800f446:	4420      	add	r0, r4
 800f448:	bd38      	pop	{r3, r4, r5, pc}
 800f44a:	bf00      	nop

0800f44c <max_serialized_size_geometry_msgs__msg__Quaternion>:
 800f44c:	b570      	push	{r4, r5, r6, lr}
 800f44e:	2301      	movs	r3, #1
 800f450:	460c      	mov	r4, r1
 800f452:	7003      	strb	r3, [r0, #0]
 800f454:	2108      	movs	r1, #8
 800f456:	4620      	mov	r0, r4
 800f458:	f7fc fe10 	bl	800c07c <ucdr_alignment>
 800f45c:	f104 0508 	add.w	r5, r4, #8
 800f460:	1946      	adds	r6, r0, r5
 800f462:	2108      	movs	r1, #8
 800f464:	4630      	mov	r0, r6
 800f466:	f7fc fe09 	bl	800c07c <ucdr_alignment>
 800f46a:	f100 0508 	add.w	r5, r0, #8
 800f46e:	4435      	add	r5, r6
 800f470:	2108      	movs	r1, #8
 800f472:	4628      	mov	r0, r5
 800f474:	f7fc fe02 	bl	800c07c <ucdr_alignment>
 800f478:	3008      	adds	r0, #8
 800f47a:	4405      	add	r5, r0
 800f47c:	2108      	movs	r1, #8
 800f47e:	4628      	mov	r0, r5
 800f480:	f7fc fdfc 	bl	800c07c <ucdr_alignment>
 800f484:	f1c4 0408 	rsb	r4, r4, #8
 800f488:	4420      	add	r0, r4
 800f48a:	4428      	add	r0, r5
 800f48c:	bd70      	pop	{r4, r5, r6, pc}
 800f48e:	bf00      	nop

0800f490 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 800f490:	4800      	ldr	r0, [pc, #0]	@ (800f494 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x4>)
 800f492:	4770      	bx	lr
 800f494:	200008e0 	.word	0x200008e0

0800f498 <get_serialized_size_geometry_msgs__msg__Vector3>:
 800f498:	b1b8      	cbz	r0, 800f4ca <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800f49a:	b538      	push	{r3, r4, r5, lr}
 800f49c:	460d      	mov	r5, r1
 800f49e:	4628      	mov	r0, r5
 800f4a0:	2108      	movs	r1, #8
 800f4a2:	f7fc fdeb 	bl	800c07c <ucdr_alignment>
 800f4a6:	f105 0308 	add.w	r3, r5, #8
 800f4aa:	181c      	adds	r4, r3, r0
 800f4ac:	2108      	movs	r1, #8
 800f4ae:	4620      	mov	r0, r4
 800f4b0:	f7fc fde4 	bl	800c07c <ucdr_alignment>
 800f4b4:	3008      	adds	r0, #8
 800f4b6:	4404      	add	r4, r0
 800f4b8:	2108      	movs	r1, #8
 800f4ba:	4620      	mov	r0, r4
 800f4bc:	f7fc fdde 	bl	800c07c <ucdr_alignment>
 800f4c0:	f1c5 0508 	rsb	r5, r5, #8
 800f4c4:	4428      	add	r0, r5
 800f4c6:	4420      	add	r0, r4
 800f4c8:	bd38      	pop	{r3, r4, r5, pc}
 800f4ca:	4770      	bx	lr

0800f4cc <_Vector3__cdr_deserialize>:
 800f4cc:	b538      	push	{r3, r4, r5, lr}
 800f4ce:	460c      	mov	r4, r1
 800f4d0:	b171      	cbz	r1, 800f4f0 <_Vector3__cdr_deserialize+0x24>
 800f4d2:	4605      	mov	r5, r0
 800f4d4:	f7fc fbe6 	bl	800bca4 <ucdr_deserialize_double>
 800f4d8:	f104 0108 	add.w	r1, r4, #8
 800f4dc:	4628      	mov	r0, r5
 800f4de:	f7fc fbe1 	bl	800bca4 <ucdr_deserialize_double>
 800f4e2:	f104 0110 	add.w	r1, r4, #16
 800f4e6:	4628      	mov	r0, r5
 800f4e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f4ec:	f7fc bbda 	b.w	800bca4 <ucdr_deserialize_double>
 800f4f0:	4608      	mov	r0, r1
 800f4f2:	bd38      	pop	{r3, r4, r5, pc}

0800f4f4 <_Vector3__cdr_serialize>:
 800f4f4:	b198      	cbz	r0, 800f51e <_Vector3__cdr_serialize+0x2a>
 800f4f6:	b538      	push	{r3, r4, r5, lr}
 800f4f8:	ed90 0b00 	vldr	d0, [r0]
 800f4fc:	460d      	mov	r5, r1
 800f4fe:	4604      	mov	r4, r0
 800f500:	4608      	mov	r0, r1
 800f502:	f7fc fa2d 	bl	800b960 <ucdr_serialize_double>
 800f506:	ed94 0b02 	vldr	d0, [r4, #8]
 800f50a:	4628      	mov	r0, r5
 800f50c:	f7fc fa28 	bl	800b960 <ucdr_serialize_double>
 800f510:	ed94 0b04 	vldr	d0, [r4, #16]
 800f514:	4628      	mov	r0, r5
 800f516:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f51a:	f7fc ba21 	b.w	800b960 <ucdr_serialize_double>
 800f51e:	4770      	bx	lr

0800f520 <_Vector3__get_serialized_size>:
 800f520:	b198      	cbz	r0, 800f54a <_Vector3__get_serialized_size+0x2a>
 800f522:	b510      	push	{r4, lr}
 800f524:	2108      	movs	r1, #8
 800f526:	2000      	movs	r0, #0
 800f528:	f7fc fda8 	bl	800c07c <ucdr_alignment>
 800f52c:	f100 0408 	add.w	r4, r0, #8
 800f530:	2108      	movs	r1, #8
 800f532:	4620      	mov	r0, r4
 800f534:	f7fc fda2 	bl	800c07c <ucdr_alignment>
 800f538:	3008      	adds	r0, #8
 800f53a:	4404      	add	r4, r0
 800f53c:	2108      	movs	r1, #8
 800f53e:	4620      	mov	r0, r4
 800f540:	f7fc fd9c 	bl	800c07c <ucdr_alignment>
 800f544:	3008      	adds	r0, #8
 800f546:	4420      	add	r0, r4
 800f548:	bd10      	pop	{r4, pc}
 800f54a:	4770      	bx	lr

0800f54c <_Vector3__max_serialized_size>:
 800f54c:	b538      	push	{r3, r4, r5, lr}
 800f54e:	2108      	movs	r1, #8
 800f550:	2000      	movs	r0, #0
 800f552:	f7fc fd93 	bl	800c07c <ucdr_alignment>
 800f556:	f100 0508 	add.w	r5, r0, #8
 800f55a:	2108      	movs	r1, #8
 800f55c:	4628      	mov	r0, r5
 800f55e:	f7fc fd8d 	bl	800c07c <ucdr_alignment>
 800f562:	f100 0408 	add.w	r4, r0, #8
 800f566:	442c      	add	r4, r5
 800f568:	2108      	movs	r1, #8
 800f56a:	4620      	mov	r0, r4
 800f56c:	f7fc fd86 	bl	800c07c <ucdr_alignment>
 800f570:	3008      	adds	r0, #8
 800f572:	4420      	add	r0, r4
 800f574:	bd38      	pop	{r3, r4, r5, pc}
 800f576:	bf00      	nop

0800f578 <max_serialized_size_geometry_msgs__msg__Vector3>:
 800f578:	b570      	push	{r4, r5, r6, lr}
 800f57a:	2301      	movs	r3, #1
 800f57c:	460c      	mov	r4, r1
 800f57e:	7003      	strb	r3, [r0, #0]
 800f580:	2108      	movs	r1, #8
 800f582:	4620      	mov	r0, r4
 800f584:	f7fc fd7a 	bl	800c07c <ucdr_alignment>
 800f588:	f104 0508 	add.w	r5, r4, #8
 800f58c:	1946      	adds	r6, r0, r5
 800f58e:	2108      	movs	r1, #8
 800f590:	4630      	mov	r0, r6
 800f592:	f7fc fd73 	bl	800c07c <ucdr_alignment>
 800f596:	f100 0508 	add.w	r5, r0, #8
 800f59a:	4435      	add	r5, r6
 800f59c:	2108      	movs	r1, #8
 800f59e:	4628      	mov	r0, r5
 800f5a0:	f7fc fd6c 	bl	800c07c <ucdr_alignment>
 800f5a4:	f1c4 0408 	rsb	r4, r4, #8
 800f5a8:	4420      	add	r0, r4
 800f5aa:	4428      	add	r0, r5
 800f5ac:	bd70      	pop	{r4, r5, r6, pc}
 800f5ae:	bf00      	nop

0800f5b0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800f5b0:	4800      	ldr	r0, [pc, #0]	@ (800f5b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800f5b2:	4770      	bx	lr
 800f5b4:	20000908 	.word	0x20000908

0800f5b8 <imu_interfaces__srv__ImuCalibration_Request__init>:
 800f5b8:	b538      	push	{r3, r4, r5, lr}
 800f5ba:	4604      	mov	r4, r0
 800f5bc:	b128      	cbz	r0, 800f5ca <imu_interfaces__srv__ImuCalibration_Request__init+0x12>
 800f5be:	f007 ff6b 	bl	8017498 <sensor_msgs__msg__Imu__init>
 800f5c2:	4605      	mov	r5, r0
 800f5c4:	b120      	cbz	r0, 800f5d0 <imu_interfaces__srv__ImuCalibration_Request__init+0x18>
 800f5c6:	4628      	mov	r0, r5
 800f5c8:	bd38      	pop	{r3, r4, r5, pc}
 800f5ca:	4605      	mov	r5, r0
 800f5cc:	4628      	mov	r0, r5
 800f5ce:	bd38      	pop	{r3, r4, r5, pc}
 800f5d0:	4620      	mov	r0, r4
 800f5d2:	f007 ffb7 	bl	8017544 <sensor_msgs__msg__Imu__fini>
 800f5d6:	4628      	mov	r0, r5
 800f5d8:	bd38      	pop	{r3, r4, r5, pc}
 800f5da:	bf00      	nop

0800f5dc <imu_interfaces__srv__ImuCalibration_Request__fini>:
 800f5dc:	b108      	cbz	r0, 800f5e2 <imu_interfaces__srv__ImuCalibration_Request__fini+0x6>
 800f5de:	f007 bfb1 	b.w	8017544 <sensor_msgs__msg__Imu__fini>
 800f5e2:	4770      	bx	lr

0800f5e4 <imu_interfaces__srv__ImuCalibration_Response__init>:
 800f5e4:	3800      	subs	r0, #0
 800f5e6:	bf18      	it	ne
 800f5e8:	2001      	movne	r0, #1
 800f5ea:	4770      	bx	lr

0800f5ec <imu_interfaces__srv__ImuCalibration_Response__fini>:
 800f5ec:	4770      	bx	lr
 800f5ee:	bf00      	nop

0800f5f0 <imu_interfaces__srv__ImuStatus_Request__init>:
 800f5f0:	b538      	push	{r3, r4, r5, lr}
 800f5f2:	4604      	mov	r4, r0
 800f5f4:	b128      	cbz	r0, 800f602 <imu_interfaces__srv__ImuStatus_Request__init+0x12>
 800f5f6:	f007 ffb9 	bl	801756c <std_msgs__msg__Bool__init>
 800f5fa:	4605      	mov	r5, r0
 800f5fc:	b120      	cbz	r0, 800f608 <imu_interfaces__srv__ImuStatus_Request__init+0x18>
 800f5fe:	4628      	mov	r0, r5
 800f600:	bd38      	pop	{r3, r4, r5, pc}
 800f602:	4605      	mov	r5, r0
 800f604:	4628      	mov	r0, r5
 800f606:	bd38      	pop	{r3, r4, r5, pc}
 800f608:	4620      	mov	r0, r4
 800f60a:	f007 ffb3 	bl	8017574 <std_msgs__msg__Bool__fini>
 800f60e:	4628      	mov	r0, r5
 800f610:	bd38      	pop	{r3, r4, r5, pc}
 800f612:	bf00      	nop

0800f614 <imu_interfaces__srv__ImuStatus_Request__fini>:
 800f614:	b108      	cbz	r0, 800f61a <imu_interfaces__srv__ImuStatus_Request__fini+0x6>
 800f616:	f007 bfad 	b.w	8017574 <std_msgs__msg__Bool__fini>
 800f61a:	4770      	bx	lr

0800f61c <imu_interfaces__srv__ImuStatus_Response__init>:
 800f61c:	b538      	push	{r3, r4, r5, lr}
 800f61e:	4604      	mov	r4, r0
 800f620:	b128      	cbz	r0, 800f62e <imu_interfaces__srv__ImuStatus_Response__init+0x12>
 800f622:	f007 ffa3 	bl	801756c <std_msgs__msg__Bool__init>
 800f626:	4605      	mov	r5, r0
 800f628:	b120      	cbz	r0, 800f634 <imu_interfaces__srv__ImuStatus_Response__init+0x18>
 800f62a:	4628      	mov	r0, r5
 800f62c:	bd38      	pop	{r3, r4, r5, pc}
 800f62e:	4605      	mov	r5, r0
 800f630:	4628      	mov	r0, r5
 800f632:	bd38      	pop	{r3, r4, r5, pc}
 800f634:	4620      	mov	r0, r4
 800f636:	f007 ff9d 	bl	8017574 <std_msgs__msg__Bool__fini>
 800f63a:	4628      	mov	r0, r5
 800f63c:	bd38      	pop	{r3, r4, r5, pc}
 800f63e:	bf00      	nop

0800f640 <imu_interfaces__srv__ImuStatus_Response__fini>:
 800f640:	b108      	cbz	r0, 800f646 <imu_interfaces__srv__ImuStatus_Response__fini+0x6>
 800f642:	f007 bf97 	b.w	8017574 <std_msgs__msg__Bool__fini>
 800f646:	4770      	bx	lr

0800f648 <ucdr_serialize_endian_array_char>:
 800f648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f64c:	4619      	mov	r1, r3
 800f64e:	461f      	mov	r7, r3
 800f650:	4605      	mov	r5, r0
 800f652:	4690      	mov	r8, r2
 800f654:	f7fc fcba 	bl	800bfcc <ucdr_check_buffer_available_for>
 800f658:	b9e0      	cbnz	r0, 800f694 <ucdr_serialize_endian_array_char+0x4c>
 800f65a:	463e      	mov	r6, r7
 800f65c:	e009      	b.n	800f672 <ucdr_serialize_endian_array_char+0x2a>
 800f65e:	68a8      	ldr	r0, [r5, #8]
 800f660:	f009 ff1f 	bl	80194a2 <memcpy>
 800f664:	68ab      	ldr	r3, [r5, #8]
 800f666:	6928      	ldr	r0, [r5, #16]
 800f668:	4423      	add	r3, r4
 800f66a:	4420      	add	r0, r4
 800f66c:	1b36      	subs	r6, r6, r4
 800f66e:	60ab      	str	r3, [r5, #8]
 800f670:	6128      	str	r0, [r5, #16]
 800f672:	4631      	mov	r1, r6
 800f674:	2201      	movs	r2, #1
 800f676:	4628      	mov	r0, r5
 800f678:	f7fc fd30 	bl	800c0dc <ucdr_check_final_buffer_behavior_array>
 800f67c:	1bb9      	subs	r1, r7, r6
 800f67e:	4441      	add	r1, r8
 800f680:	4604      	mov	r4, r0
 800f682:	4602      	mov	r2, r0
 800f684:	2800      	cmp	r0, #0
 800f686:	d1ea      	bne.n	800f65e <ucdr_serialize_endian_array_char+0x16>
 800f688:	2301      	movs	r3, #1
 800f68a:	7da8      	ldrb	r0, [r5, #22]
 800f68c:	756b      	strb	r3, [r5, #21]
 800f68e:	4058      	eors	r0, r3
 800f690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f694:	463a      	mov	r2, r7
 800f696:	68a8      	ldr	r0, [r5, #8]
 800f698:	4641      	mov	r1, r8
 800f69a:	f009 ff02 	bl	80194a2 <memcpy>
 800f69e:	68aa      	ldr	r2, [r5, #8]
 800f6a0:	692b      	ldr	r3, [r5, #16]
 800f6a2:	443a      	add	r2, r7
 800f6a4:	443b      	add	r3, r7
 800f6a6:	60aa      	str	r2, [r5, #8]
 800f6a8:	612b      	str	r3, [r5, #16]
 800f6aa:	e7ed      	b.n	800f688 <ucdr_serialize_endian_array_char+0x40>

0800f6ac <ucdr_deserialize_endian_array_char>:
 800f6ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6b0:	4619      	mov	r1, r3
 800f6b2:	461f      	mov	r7, r3
 800f6b4:	4605      	mov	r5, r0
 800f6b6:	4690      	mov	r8, r2
 800f6b8:	f7fc fc88 	bl	800bfcc <ucdr_check_buffer_available_for>
 800f6bc:	b9e0      	cbnz	r0, 800f6f8 <ucdr_deserialize_endian_array_char+0x4c>
 800f6be:	463e      	mov	r6, r7
 800f6c0:	e009      	b.n	800f6d6 <ucdr_deserialize_endian_array_char+0x2a>
 800f6c2:	68a9      	ldr	r1, [r5, #8]
 800f6c4:	f009 feed 	bl	80194a2 <memcpy>
 800f6c8:	68ab      	ldr	r3, [r5, #8]
 800f6ca:	6928      	ldr	r0, [r5, #16]
 800f6cc:	4423      	add	r3, r4
 800f6ce:	4420      	add	r0, r4
 800f6d0:	1b36      	subs	r6, r6, r4
 800f6d2:	60ab      	str	r3, [r5, #8]
 800f6d4:	6128      	str	r0, [r5, #16]
 800f6d6:	2201      	movs	r2, #1
 800f6d8:	4631      	mov	r1, r6
 800f6da:	4628      	mov	r0, r5
 800f6dc:	f7fc fcfe 	bl	800c0dc <ucdr_check_final_buffer_behavior_array>
 800f6e0:	4604      	mov	r4, r0
 800f6e2:	1bb8      	subs	r0, r7, r6
 800f6e4:	4440      	add	r0, r8
 800f6e6:	4622      	mov	r2, r4
 800f6e8:	2c00      	cmp	r4, #0
 800f6ea:	d1ea      	bne.n	800f6c2 <ucdr_deserialize_endian_array_char+0x16>
 800f6ec:	2301      	movs	r3, #1
 800f6ee:	7da8      	ldrb	r0, [r5, #22]
 800f6f0:	756b      	strb	r3, [r5, #21]
 800f6f2:	4058      	eors	r0, r3
 800f6f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6f8:	463a      	mov	r2, r7
 800f6fa:	68a9      	ldr	r1, [r5, #8]
 800f6fc:	4640      	mov	r0, r8
 800f6fe:	f009 fed0 	bl	80194a2 <memcpy>
 800f702:	68aa      	ldr	r2, [r5, #8]
 800f704:	692b      	ldr	r3, [r5, #16]
 800f706:	443a      	add	r2, r7
 800f708:	443b      	add	r3, r7
 800f70a:	60aa      	str	r2, [r5, #8]
 800f70c:	612b      	str	r3, [r5, #16]
 800f70e:	e7ed      	b.n	800f6ec <ucdr_deserialize_endian_array_char+0x40>

0800f710 <ucdr_serialize_array_uint8_t>:
 800f710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f714:	4688      	mov	r8, r1
 800f716:	4611      	mov	r1, r2
 800f718:	4617      	mov	r7, r2
 800f71a:	4605      	mov	r5, r0
 800f71c:	f7fc fc56 	bl	800bfcc <ucdr_check_buffer_available_for>
 800f720:	b9e0      	cbnz	r0, 800f75c <ucdr_serialize_array_uint8_t+0x4c>
 800f722:	463e      	mov	r6, r7
 800f724:	e009      	b.n	800f73a <ucdr_serialize_array_uint8_t+0x2a>
 800f726:	68a8      	ldr	r0, [r5, #8]
 800f728:	f009 febb 	bl	80194a2 <memcpy>
 800f72c:	68aa      	ldr	r2, [r5, #8]
 800f72e:	692b      	ldr	r3, [r5, #16]
 800f730:	4422      	add	r2, r4
 800f732:	4423      	add	r3, r4
 800f734:	1b36      	subs	r6, r6, r4
 800f736:	60aa      	str	r2, [r5, #8]
 800f738:	612b      	str	r3, [r5, #16]
 800f73a:	4631      	mov	r1, r6
 800f73c:	2201      	movs	r2, #1
 800f73e:	4628      	mov	r0, r5
 800f740:	f7fc fccc 	bl	800c0dc <ucdr_check_final_buffer_behavior_array>
 800f744:	1bb9      	subs	r1, r7, r6
 800f746:	4441      	add	r1, r8
 800f748:	4604      	mov	r4, r0
 800f74a:	4602      	mov	r2, r0
 800f74c:	2800      	cmp	r0, #0
 800f74e:	d1ea      	bne.n	800f726 <ucdr_serialize_array_uint8_t+0x16>
 800f750:	2301      	movs	r3, #1
 800f752:	7da8      	ldrb	r0, [r5, #22]
 800f754:	756b      	strb	r3, [r5, #21]
 800f756:	4058      	eors	r0, r3
 800f758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f75c:	463a      	mov	r2, r7
 800f75e:	68a8      	ldr	r0, [r5, #8]
 800f760:	4641      	mov	r1, r8
 800f762:	f009 fe9e 	bl	80194a2 <memcpy>
 800f766:	68aa      	ldr	r2, [r5, #8]
 800f768:	692b      	ldr	r3, [r5, #16]
 800f76a:	443a      	add	r2, r7
 800f76c:	443b      	add	r3, r7
 800f76e:	60aa      	str	r2, [r5, #8]
 800f770:	612b      	str	r3, [r5, #16]
 800f772:	e7ed      	b.n	800f750 <ucdr_serialize_array_uint8_t+0x40>

0800f774 <ucdr_serialize_endian_array_uint8_t>:
 800f774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f778:	4619      	mov	r1, r3
 800f77a:	461f      	mov	r7, r3
 800f77c:	4605      	mov	r5, r0
 800f77e:	4690      	mov	r8, r2
 800f780:	f7fc fc24 	bl	800bfcc <ucdr_check_buffer_available_for>
 800f784:	b9e0      	cbnz	r0, 800f7c0 <ucdr_serialize_endian_array_uint8_t+0x4c>
 800f786:	463e      	mov	r6, r7
 800f788:	e009      	b.n	800f79e <ucdr_serialize_endian_array_uint8_t+0x2a>
 800f78a:	68a8      	ldr	r0, [r5, #8]
 800f78c:	f009 fe89 	bl	80194a2 <memcpy>
 800f790:	68ab      	ldr	r3, [r5, #8]
 800f792:	6928      	ldr	r0, [r5, #16]
 800f794:	4423      	add	r3, r4
 800f796:	4420      	add	r0, r4
 800f798:	1b36      	subs	r6, r6, r4
 800f79a:	60ab      	str	r3, [r5, #8]
 800f79c:	6128      	str	r0, [r5, #16]
 800f79e:	4631      	mov	r1, r6
 800f7a0:	2201      	movs	r2, #1
 800f7a2:	4628      	mov	r0, r5
 800f7a4:	f7fc fc9a 	bl	800c0dc <ucdr_check_final_buffer_behavior_array>
 800f7a8:	1bb9      	subs	r1, r7, r6
 800f7aa:	4441      	add	r1, r8
 800f7ac:	4604      	mov	r4, r0
 800f7ae:	4602      	mov	r2, r0
 800f7b0:	2800      	cmp	r0, #0
 800f7b2:	d1ea      	bne.n	800f78a <ucdr_serialize_endian_array_uint8_t+0x16>
 800f7b4:	2301      	movs	r3, #1
 800f7b6:	7da8      	ldrb	r0, [r5, #22]
 800f7b8:	756b      	strb	r3, [r5, #21]
 800f7ba:	4058      	eors	r0, r3
 800f7bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7c0:	463a      	mov	r2, r7
 800f7c2:	68a8      	ldr	r0, [r5, #8]
 800f7c4:	4641      	mov	r1, r8
 800f7c6:	f009 fe6c 	bl	80194a2 <memcpy>
 800f7ca:	68aa      	ldr	r2, [r5, #8]
 800f7cc:	692b      	ldr	r3, [r5, #16]
 800f7ce:	443a      	add	r2, r7
 800f7d0:	443b      	add	r3, r7
 800f7d2:	60aa      	str	r2, [r5, #8]
 800f7d4:	612b      	str	r3, [r5, #16]
 800f7d6:	e7ed      	b.n	800f7b4 <ucdr_serialize_endian_array_uint8_t+0x40>

0800f7d8 <ucdr_deserialize_array_uint8_t>:
 800f7d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7dc:	4688      	mov	r8, r1
 800f7de:	4611      	mov	r1, r2
 800f7e0:	4617      	mov	r7, r2
 800f7e2:	4605      	mov	r5, r0
 800f7e4:	f7fc fbf2 	bl	800bfcc <ucdr_check_buffer_available_for>
 800f7e8:	b9e0      	cbnz	r0, 800f824 <ucdr_deserialize_array_uint8_t+0x4c>
 800f7ea:	463e      	mov	r6, r7
 800f7ec:	e009      	b.n	800f802 <ucdr_deserialize_array_uint8_t+0x2a>
 800f7ee:	68a9      	ldr	r1, [r5, #8]
 800f7f0:	f009 fe57 	bl	80194a2 <memcpy>
 800f7f4:	68aa      	ldr	r2, [r5, #8]
 800f7f6:	692b      	ldr	r3, [r5, #16]
 800f7f8:	4422      	add	r2, r4
 800f7fa:	4423      	add	r3, r4
 800f7fc:	1b36      	subs	r6, r6, r4
 800f7fe:	60aa      	str	r2, [r5, #8]
 800f800:	612b      	str	r3, [r5, #16]
 800f802:	2201      	movs	r2, #1
 800f804:	4631      	mov	r1, r6
 800f806:	4628      	mov	r0, r5
 800f808:	f7fc fc68 	bl	800c0dc <ucdr_check_final_buffer_behavior_array>
 800f80c:	4604      	mov	r4, r0
 800f80e:	1bb8      	subs	r0, r7, r6
 800f810:	4440      	add	r0, r8
 800f812:	4622      	mov	r2, r4
 800f814:	2c00      	cmp	r4, #0
 800f816:	d1ea      	bne.n	800f7ee <ucdr_deserialize_array_uint8_t+0x16>
 800f818:	2301      	movs	r3, #1
 800f81a:	7da8      	ldrb	r0, [r5, #22]
 800f81c:	756b      	strb	r3, [r5, #21]
 800f81e:	4058      	eors	r0, r3
 800f820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f824:	463a      	mov	r2, r7
 800f826:	68a9      	ldr	r1, [r5, #8]
 800f828:	4640      	mov	r0, r8
 800f82a:	f009 fe3a 	bl	80194a2 <memcpy>
 800f82e:	68aa      	ldr	r2, [r5, #8]
 800f830:	692b      	ldr	r3, [r5, #16]
 800f832:	443a      	add	r2, r7
 800f834:	443b      	add	r3, r7
 800f836:	60aa      	str	r2, [r5, #8]
 800f838:	612b      	str	r3, [r5, #16]
 800f83a:	e7ed      	b.n	800f818 <ucdr_deserialize_array_uint8_t+0x40>

0800f83c <ucdr_deserialize_endian_array_uint8_t>:
 800f83c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f840:	4619      	mov	r1, r3
 800f842:	461f      	mov	r7, r3
 800f844:	4605      	mov	r5, r0
 800f846:	4690      	mov	r8, r2
 800f848:	f7fc fbc0 	bl	800bfcc <ucdr_check_buffer_available_for>
 800f84c:	b9e0      	cbnz	r0, 800f888 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 800f84e:	463e      	mov	r6, r7
 800f850:	e009      	b.n	800f866 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 800f852:	68a9      	ldr	r1, [r5, #8]
 800f854:	f009 fe25 	bl	80194a2 <memcpy>
 800f858:	68ab      	ldr	r3, [r5, #8]
 800f85a:	6928      	ldr	r0, [r5, #16]
 800f85c:	4423      	add	r3, r4
 800f85e:	4420      	add	r0, r4
 800f860:	1b36      	subs	r6, r6, r4
 800f862:	60ab      	str	r3, [r5, #8]
 800f864:	6128      	str	r0, [r5, #16]
 800f866:	2201      	movs	r2, #1
 800f868:	4631      	mov	r1, r6
 800f86a:	4628      	mov	r0, r5
 800f86c:	f7fc fc36 	bl	800c0dc <ucdr_check_final_buffer_behavior_array>
 800f870:	4604      	mov	r4, r0
 800f872:	1bb8      	subs	r0, r7, r6
 800f874:	4440      	add	r0, r8
 800f876:	4622      	mov	r2, r4
 800f878:	2c00      	cmp	r4, #0
 800f87a:	d1ea      	bne.n	800f852 <ucdr_deserialize_endian_array_uint8_t+0x16>
 800f87c:	2301      	movs	r3, #1
 800f87e:	7da8      	ldrb	r0, [r5, #22]
 800f880:	756b      	strb	r3, [r5, #21]
 800f882:	4058      	eors	r0, r3
 800f884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f888:	463a      	mov	r2, r7
 800f88a:	68a9      	ldr	r1, [r5, #8]
 800f88c:	4640      	mov	r0, r8
 800f88e:	f009 fe08 	bl	80194a2 <memcpy>
 800f892:	68aa      	ldr	r2, [r5, #8]
 800f894:	692b      	ldr	r3, [r5, #16]
 800f896:	443a      	add	r2, r7
 800f898:	443b      	add	r3, r7
 800f89a:	60aa      	str	r2, [r5, #8]
 800f89c:	612b      	str	r3, [r5, #16]
 800f89e:	e7ed      	b.n	800f87c <ucdr_deserialize_endian_array_uint8_t+0x40>

0800f8a0 <ucdr_serialize_array_double>:
 800f8a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8a4:	460e      	mov	r6, r1
 800f8a6:	2108      	movs	r1, #8
 800f8a8:	4604      	mov	r4, r0
 800f8aa:	4617      	mov	r7, r2
 800f8ac:	f7fc fbee 	bl	800c08c <ucdr_buffer_alignment>
 800f8b0:	4601      	mov	r1, r0
 800f8b2:	4620      	mov	r0, r4
 800f8b4:	7d65      	ldrb	r5, [r4, #21]
 800f8b6:	f7fc fc2d 	bl	800c114 <ucdr_advance_buffer>
 800f8ba:	7d21      	ldrb	r1, [r4, #20]
 800f8bc:	7565      	strb	r5, [r4, #21]
 800f8be:	2901      	cmp	r1, #1
 800f8c0:	d010      	beq.n	800f8e4 <ucdr_serialize_array_double+0x44>
 800f8c2:	b157      	cbz	r7, 800f8da <ucdr_serialize_array_double+0x3a>
 800f8c4:	2500      	movs	r5, #0
 800f8c6:	e000      	b.n	800f8ca <ucdr_serialize_array_double+0x2a>
 800f8c8:	7d21      	ldrb	r1, [r4, #20]
 800f8ca:	ecb6 0b02 	vldmia	r6!, {d0}
 800f8ce:	4620      	mov	r0, r4
 800f8d0:	3501      	adds	r5, #1
 800f8d2:	f7fc f915 	bl	800bb00 <ucdr_serialize_endian_double>
 800f8d6:	42af      	cmp	r7, r5
 800f8d8:	d1f6      	bne.n	800f8c8 <ucdr_serialize_array_double+0x28>
 800f8da:	7da0      	ldrb	r0, [r4, #22]
 800f8dc:	f080 0001 	eor.w	r0, r0, #1
 800f8e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8e4:	00ff      	lsls	r7, r7, #3
 800f8e6:	4639      	mov	r1, r7
 800f8e8:	4620      	mov	r0, r4
 800f8ea:	f7fc fb6f 	bl	800bfcc <ucdr_check_buffer_available_for>
 800f8ee:	b9f8      	cbnz	r0, 800f930 <ucdr_serialize_array_double+0x90>
 800f8f0:	46b8      	mov	r8, r7
 800f8f2:	e00a      	b.n	800f90a <ucdr_serialize_array_double+0x6a>
 800f8f4:	68a0      	ldr	r0, [r4, #8]
 800f8f6:	f009 fdd4 	bl	80194a2 <memcpy>
 800f8fa:	68a2      	ldr	r2, [r4, #8]
 800f8fc:	6923      	ldr	r3, [r4, #16]
 800f8fe:	442a      	add	r2, r5
 800f900:	442b      	add	r3, r5
 800f902:	eba8 0805 	sub.w	r8, r8, r5
 800f906:	60a2      	str	r2, [r4, #8]
 800f908:	6123      	str	r3, [r4, #16]
 800f90a:	4641      	mov	r1, r8
 800f90c:	2208      	movs	r2, #8
 800f90e:	4620      	mov	r0, r4
 800f910:	f7fc fbe4 	bl	800c0dc <ucdr_check_final_buffer_behavior_array>
 800f914:	eba7 0108 	sub.w	r1, r7, r8
 800f918:	4431      	add	r1, r6
 800f91a:	4605      	mov	r5, r0
 800f91c:	4602      	mov	r2, r0
 800f91e:	2800      	cmp	r0, #0
 800f920:	d1e8      	bne.n	800f8f4 <ucdr_serialize_array_double+0x54>
 800f922:	7da0      	ldrb	r0, [r4, #22]
 800f924:	2308      	movs	r3, #8
 800f926:	7563      	strb	r3, [r4, #21]
 800f928:	f080 0001 	eor.w	r0, r0, #1
 800f92c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f930:	463a      	mov	r2, r7
 800f932:	68a0      	ldr	r0, [r4, #8]
 800f934:	4631      	mov	r1, r6
 800f936:	f009 fdb4 	bl	80194a2 <memcpy>
 800f93a:	68a2      	ldr	r2, [r4, #8]
 800f93c:	6923      	ldr	r3, [r4, #16]
 800f93e:	443a      	add	r2, r7
 800f940:	441f      	add	r7, r3
 800f942:	60a2      	str	r2, [r4, #8]
 800f944:	6127      	str	r7, [r4, #16]
 800f946:	e7ec      	b.n	800f922 <ucdr_serialize_array_double+0x82>

0800f948 <ucdr_deserialize_array_double>:
 800f948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f94c:	460e      	mov	r6, r1
 800f94e:	2108      	movs	r1, #8
 800f950:	4604      	mov	r4, r0
 800f952:	4617      	mov	r7, r2
 800f954:	f7fc fb9a 	bl	800c08c <ucdr_buffer_alignment>
 800f958:	4601      	mov	r1, r0
 800f95a:	4620      	mov	r0, r4
 800f95c:	7d65      	ldrb	r5, [r4, #21]
 800f95e:	f7fc fbd9 	bl	800c114 <ucdr_advance_buffer>
 800f962:	7d21      	ldrb	r1, [r4, #20]
 800f964:	7565      	strb	r5, [r4, #21]
 800f966:	2901      	cmp	r1, #1
 800f968:	d011      	beq.n	800f98e <ucdr_deserialize_array_double+0x46>
 800f96a:	b15f      	cbz	r7, 800f984 <ucdr_deserialize_array_double+0x3c>
 800f96c:	2500      	movs	r5, #0
 800f96e:	e000      	b.n	800f972 <ucdr_deserialize_array_double+0x2a>
 800f970:	7d21      	ldrb	r1, [r4, #20]
 800f972:	4632      	mov	r2, r6
 800f974:	4620      	mov	r0, r4
 800f976:	3501      	adds	r5, #1
 800f978:	f7fc fa5a 	bl	800be30 <ucdr_deserialize_endian_double>
 800f97c:	42af      	cmp	r7, r5
 800f97e:	f106 0608 	add.w	r6, r6, #8
 800f982:	d1f5      	bne.n	800f970 <ucdr_deserialize_array_double+0x28>
 800f984:	7da0      	ldrb	r0, [r4, #22]
 800f986:	f080 0001 	eor.w	r0, r0, #1
 800f98a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f98e:	00ff      	lsls	r7, r7, #3
 800f990:	4639      	mov	r1, r7
 800f992:	4620      	mov	r0, r4
 800f994:	f7fc fb1a 	bl	800bfcc <ucdr_check_buffer_available_for>
 800f998:	b9f8      	cbnz	r0, 800f9da <ucdr_deserialize_array_double+0x92>
 800f99a:	46b8      	mov	r8, r7
 800f99c:	e00a      	b.n	800f9b4 <ucdr_deserialize_array_double+0x6c>
 800f99e:	68a1      	ldr	r1, [r4, #8]
 800f9a0:	f009 fd7f 	bl	80194a2 <memcpy>
 800f9a4:	68a2      	ldr	r2, [r4, #8]
 800f9a6:	6923      	ldr	r3, [r4, #16]
 800f9a8:	442a      	add	r2, r5
 800f9aa:	442b      	add	r3, r5
 800f9ac:	eba8 0805 	sub.w	r8, r8, r5
 800f9b0:	60a2      	str	r2, [r4, #8]
 800f9b2:	6123      	str	r3, [r4, #16]
 800f9b4:	2208      	movs	r2, #8
 800f9b6:	4641      	mov	r1, r8
 800f9b8:	4620      	mov	r0, r4
 800f9ba:	f7fc fb8f 	bl	800c0dc <ucdr_check_final_buffer_behavior_array>
 800f9be:	4605      	mov	r5, r0
 800f9c0:	eba7 0008 	sub.w	r0, r7, r8
 800f9c4:	4430      	add	r0, r6
 800f9c6:	462a      	mov	r2, r5
 800f9c8:	2d00      	cmp	r5, #0
 800f9ca:	d1e8      	bne.n	800f99e <ucdr_deserialize_array_double+0x56>
 800f9cc:	7da0      	ldrb	r0, [r4, #22]
 800f9ce:	2308      	movs	r3, #8
 800f9d0:	7563      	strb	r3, [r4, #21]
 800f9d2:	f080 0001 	eor.w	r0, r0, #1
 800f9d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9da:	463a      	mov	r2, r7
 800f9dc:	68a1      	ldr	r1, [r4, #8]
 800f9de:	4630      	mov	r0, r6
 800f9e0:	f009 fd5f 	bl	80194a2 <memcpy>
 800f9e4:	68a2      	ldr	r2, [r4, #8]
 800f9e6:	6923      	ldr	r3, [r4, #16]
 800f9e8:	443a      	add	r2, r7
 800f9ea:	441f      	add	r7, r3
 800f9ec:	60a2      	str	r2, [r4, #8]
 800f9ee:	6127      	str	r7, [r4, #16]
 800f9f0:	e7ec      	b.n	800f9cc <ucdr_deserialize_array_double+0x84>
 800f9f2:	bf00      	nop

0800f9f4 <ucdr_serialize_sequence_char>:
 800f9f4:	b570      	push	{r4, r5, r6, lr}
 800f9f6:	4615      	mov	r5, r2
 800f9f8:	460e      	mov	r6, r1
 800f9fa:	7d01      	ldrb	r1, [r0, #20]
 800f9fc:	4604      	mov	r4, r0
 800f9fe:	f7fb fb05 	bl	800b00c <ucdr_serialize_endian_uint32_t>
 800fa02:	b90d      	cbnz	r5, 800fa08 <ucdr_serialize_sequence_char+0x14>
 800fa04:	2001      	movs	r0, #1
 800fa06:	bd70      	pop	{r4, r5, r6, pc}
 800fa08:	7d21      	ldrb	r1, [r4, #20]
 800fa0a:	462b      	mov	r3, r5
 800fa0c:	4632      	mov	r2, r6
 800fa0e:	4620      	mov	r0, r4
 800fa10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fa14:	f7ff be18 	b.w	800f648 <ucdr_serialize_endian_array_char>

0800fa18 <ucdr_deserialize_sequence_char>:
 800fa18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa1c:	461d      	mov	r5, r3
 800fa1e:	4616      	mov	r6, r2
 800fa20:	460f      	mov	r7, r1
 800fa22:	461a      	mov	r2, r3
 800fa24:	7d01      	ldrb	r1, [r0, #20]
 800fa26:	4604      	mov	r4, r0
 800fa28:	f7fb fc18 	bl	800b25c <ucdr_deserialize_endian_uint32_t>
 800fa2c:	682b      	ldr	r3, [r5, #0]
 800fa2e:	429e      	cmp	r6, r3
 800fa30:	bf3c      	itt	cc
 800fa32:	2201      	movcc	r2, #1
 800fa34:	75a2      	strbcc	r2, [r4, #22]
 800fa36:	b913      	cbnz	r3, 800fa3e <ucdr_deserialize_sequence_char+0x26>
 800fa38:	2001      	movs	r0, #1
 800fa3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa3e:	7d21      	ldrb	r1, [r4, #20]
 800fa40:	463a      	mov	r2, r7
 800fa42:	4620      	mov	r0, r4
 800fa44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa48:	f7ff be30 	b.w	800f6ac <ucdr_deserialize_endian_array_char>

0800fa4c <ucdr_serialize_sequence_uint8_t>:
 800fa4c:	b570      	push	{r4, r5, r6, lr}
 800fa4e:	4615      	mov	r5, r2
 800fa50:	460e      	mov	r6, r1
 800fa52:	7d01      	ldrb	r1, [r0, #20]
 800fa54:	4604      	mov	r4, r0
 800fa56:	f7fb fad9 	bl	800b00c <ucdr_serialize_endian_uint32_t>
 800fa5a:	b90d      	cbnz	r5, 800fa60 <ucdr_serialize_sequence_uint8_t+0x14>
 800fa5c:	2001      	movs	r0, #1
 800fa5e:	bd70      	pop	{r4, r5, r6, pc}
 800fa60:	7d21      	ldrb	r1, [r4, #20]
 800fa62:	462b      	mov	r3, r5
 800fa64:	4632      	mov	r2, r6
 800fa66:	4620      	mov	r0, r4
 800fa68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fa6c:	f7ff be82 	b.w	800f774 <ucdr_serialize_endian_array_uint8_t>

0800fa70 <ucdr_deserialize_sequence_uint8_t>:
 800fa70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa74:	461d      	mov	r5, r3
 800fa76:	4616      	mov	r6, r2
 800fa78:	460f      	mov	r7, r1
 800fa7a:	461a      	mov	r2, r3
 800fa7c:	7d01      	ldrb	r1, [r0, #20]
 800fa7e:	4604      	mov	r4, r0
 800fa80:	f7fb fbec 	bl	800b25c <ucdr_deserialize_endian_uint32_t>
 800fa84:	682b      	ldr	r3, [r5, #0]
 800fa86:	429e      	cmp	r6, r3
 800fa88:	bf3c      	itt	cc
 800fa8a:	2201      	movcc	r2, #1
 800fa8c:	75a2      	strbcc	r2, [r4, #22]
 800fa8e:	b913      	cbnz	r3, 800fa96 <ucdr_deserialize_sequence_uint8_t+0x26>
 800fa90:	2001      	movs	r0, #1
 800fa92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa96:	7d21      	ldrb	r1, [r4, #20]
 800fa98:	463a      	mov	r2, r7
 800fa9a:	4620      	mov	r0, r4
 800fa9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800faa0:	f7ff becc 	b.w	800f83c <ucdr_deserialize_endian_array_uint8_t>

0800faa4 <uxr_buffer_delete_entity>:
 800faa4:	b510      	push	{r4, lr}
 800faa6:	2300      	movs	r3, #0
 800faa8:	b08e      	sub	sp, #56	@ 0x38
 800faaa:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800faae:	2303      	movs	r3, #3
 800fab0:	9300      	str	r3, [sp, #0]
 800fab2:	2204      	movs	r2, #4
 800fab4:	ab06      	add	r3, sp, #24
 800fab6:	4604      	mov	r4, r0
 800fab8:	9103      	str	r1, [sp, #12]
 800faba:	f001 fb3f 	bl	801113c <uxr_prepare_stream_to_write_submessage>
 800fabe:	b918      	cbnz	r0, 800fac8 <uxr_buffer_delete_entity+0x24>
 800fac0:	4604      	mov	r4, r0
 800fac2:	4620      	mov	r0, r4
 800fac4:	b00e      	add	sp, #56	@ 0x38
 800fac6:	bd10      	pop	{r4, pc}
 800fac8:	9902      	ldr	r1, [sp, #8]
 800faca:	aa05      	add	r2, sp, #20
 800facc:	4620      	mov	r0, r4
 800face:	f001 fc6b 	bl	80113a8 <uxr_init_base_object_request>
 800fad2:	a905      	add	r1, sp, #20
 800fad4:	4604      	mov	r4, r0
 800fad6:	a806      	add	r0, sp, #24
 800fad8:	f003 fa96 	bl	8013008 <uxr_serialize_DELETE_Payload>
 800fadc:	4620      	mov	r0, r4
 800fade:	b00e      	add	sp, #56	@ 0x38
 800fae0:	bd10      	pop	{r4, pc}
 800fae2:	bf00      	nop

0800fae4 <uxr_common_create_entity>:
 800fae4:	b510      	push	{r4, lr}
 800fae6:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800faea:	b08c      	sub	sp, #48	@ 0x30
 800faec:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800faf0:	f1bc 0f01 	cmp.w	ip, #1
 800faf4:	bf0c      	ite	eq
 800faf6:	f003 0201 	andeq.w	r2, r3, #1
 800fafa:	2200      	movne	r2, #0
 800fafc:	330e      	adds	r3, #14
 800fafe:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800fb02:	9101      	str	r1, [sp, #4]
 800fb04:	441a      	add	r2, r3
 800fb06:	2301      	movs	r3, #1
 800fb08:	9300      	str	r3, [sp, #0]
 800fb0a:	9903      	ldr	r1, [sp, #12]
 800fb0c:	ab04      	add	r3, sp, #16
 800fb0e:	b292      	uxth	r2, r2
 800fb10:	4604      	mov	r4, r0
 800fb12:	f001 fb13 	bl	801113c <uxr_prepare_stream_to_write_submessage>
 800fb16:	b918      	cbnz	r0, 800fb20 <uxr_common_create_entity+0x3c>
 800fb18:	4604      	mov	r4, r0
 800fb1a:	4620      	mov	r0, r4
 800fb1c:	b00c      	add	sp, #48	@ 0x30
 800fb1e:	bd10      	pop	{r4, pc}
 800fb20:	9902      	ldr	r1, [sp, #8]
 800fb22:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800fb24:	4620      	mov	r0, r4
 800fb26:	f001 fc3f 	bl	80113a8 <uxr_init_base_object_request>
 800fb2a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800fb2c:	4604      	mov	r4, r0
 800fb2e:	a804      	add	r0, sp, #16
 800fb30:	f003 f9c6 	bl	8012ec0 <uxr_serialize_CREATE_Payload>
 800fb34:	4620      	mov	r0, r4
 800fb36:	b00c      	add	sp, #48	@ 0x30
 800fb38:	bd10      	pop	{r4, pc}
 800fb3a:	bf00      	nop

0800fb3c <uxr_buffer_create_participant_bin>:
 800fb3c:	b570      	push	{r4, r5, r6, lr}
 800fb3e:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800fb42:	ac11      	add	r4, sp, #68	@ 0x44
 800fb44:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800fb48:	2303      	movs	r3, #3
 800fb4a:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800fb4e:	7223      	strb	r3, [r4, #8]
 800fb50:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800fb52:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800fb56:	2201      	movs	r2, #1
 800fb58:	2100      	movs	r1, #0
 800fb5a:	4605      	mov	r5, r0
 800fb5c:	7122      	strb	r2, [r4, #4]
 800fb5e:	f88d 1014 	strb.w	r1, [sp, #20]
 800fb62:	b1cb      	cbz	r3, 800fb98 <uxr_buffer_create_participant_bin+0x5c>
 800fb64:	f88d 201c 	strb.w	r2, [sp, #28]
 800fb68:	9308      	str	r3, [sp, #32]
 800fb6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fb6e:	a915      	add	r1, sp, #84	@ 0x54
 800fb70:	a809      	add	r0, sp, #36	@ 0x24
 800fb72:	f7fc fa7f 	bl	800c074 <ucdr_init_buffer>
 800fb76:	a905      	add	r1, sp, #20
 800fb78:	a809      	add	r0, sp, #36	@ 0x24
 800fb7a:	f002 fe3b 	bl	80127f4 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800fb7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fb80:	9600      	str	r6, [sp, #0]
 800fb82:	9401      	str	r4, [sp, #4]
 800fb84:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800fb88:	60e3      	str	r3, [r4, #12]
 800fb8a:	4628      	mov	r0, r5
 800fb8c:	b29b      	uxth	r3, r3
 800fb8e:	f7ff ffa9 	bl	800fae4 <uxr_common_create_entity>
 800fb92:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800fb96:	bd70      	pop	{r4, r5, r6, pc}
 800fb98:	f88d 301c 	strb.w	r3, [sp, #28]
 800fb9c:	e7e5      	b.n	800fb6a <uxr_buffer_create_participant_bin+0x2e>
 800fb9e:	bf00      	nop

0800fba0 <uxr_buffer_create_topic_bin>:
 800fba0:	b570      	push	{r4, r5, r6, lr}
 800fba2:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800fba6:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fbaa:	9105      	str	r1, [sp, #20]
 800fbac:	4605      	mov	r5, r0
 800fbae:	a997      	add	r1, sp, #604	@ 0x25c
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	2302      	movs	r3, #2
 800fbb4:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800fbb8:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800fbbc:	f000 f9ea 	bl	800ff94 <uxr_object_id_to_raw>
 800fbc0:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800fbc2:	9306      	str	r3, [sp, #24]
 800fbc4:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800fbc6:	930a      	str	r3, [sp, #40]	@ 0x28
 800fbc8:	2303      	movs	r3, #3
 800fbca:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800fbce:	2301      	movs	r3, #1
 800fbd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fbd4:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800fbd8:	a917      	add	r1, sp, #92	@ 0x5c
 800fbda:	2300      	movs	r3, #0
 800fbdc:	a80b      	add	r0, sp, #44	@ 0x2c
 800fbde:	f88d 301c 	strb.w	r3, [sp, #28]
 800fbe2:	f7fc fa47 	bl	800c074 <ucdr_init_buffer>
 800fbe6:	a906      	add	r1, sp, #24
 800fbe8:	a80b      	add	r0, sp, #44	@ 0x2c
 800fbea:	f002 fe25 	bl	8012838 <uxr_serialize_OBJK_Topic_Binary>
 800fbee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fbf0:	9316      	str	r3, [sp, #88]	@ 0x58
 800fbf2:	ac13      	add	r4, sp, #76	@ 0x4c
 800fbf4:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fbf8:	9600      	str	r6, [sp, #0]
 800fbfa:	9401      	str	r4, [sp, #4]
 800fbfc:	b29b      	uxth	r3, r3
 800fbfe:	4628      	mov	r0, r5
 800fc00:	f7ff ff70 	bl	800fae4 <uxr_common_create_entity>
 800fc04:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800fc08:	bd70      	pop	{r4, r5, r6, pc}
 800fc0a:	bf00      	nop

0800fc0c <uxr_buffer_create_publisher_bin>:
 800fc0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc0e:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800fc12:	4605      	mov	r5, r0
 800fc14:	9105      	str	r1, [sp, #20]
 800fc16:	4618      	mov	r0, r3
 800fc18:	2603      	movs	r6, #3
 800fc1a:	a992      	add	r1, sp, #584	@ 0x248
 800fc1c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fc20:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800fc24:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800fc28:	f000 f9b4 	bl	800ff94 <uxr_object_id_to_raw>
 800fc2c:	2300      	movs	r3, #0
 800fc2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fc32:	a912      	add	r1, sp, #72	@ 0x48
 800fc34:	a806      	add	r0, sp, #24
 800fc36:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800fc3a:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800fc3e:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800fc42:	f7fc fa17 	bl	800c074 <ucdr_init_buffer>
 800fc46:	a993      	add	r1, sp, #588	@ 0x24c
 800fc48:	a806      	add	r0, sp, #24
 800fc4a:	f002 fea9 	bl	80129a0 <uxr_serialize_OBJK_Publisher_Binary>
 800fc4e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fc50:	9311      	str	r3, [sp, #68]	@ 0x44
 800fc52:	ac0e      	add	r4, sp, #56	@ 0x38
 800fc54:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fc58:	9700      	str	r7, [sp, #0]
 800fc5a:	9401      	str	r4, [sp, #4]
 800fc5c:	b29b      	uxth	r3, r3
 800fc5e:	4628      	mov	r0, r5
 800fc60:	f7ff ff40 	bl	800fae4 <uxr_common_create_entity>
 800fc64:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800fc68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc6a:	bf00      	nop

0800fc6c <uxr_buffer_create_datawriter_bin>:
 800fc6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc70:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800fc74:	ac1d      	add	r4, sp, #116	@ 0x74
 800fc76:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fc7a:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800fc7e:	9105      	str	r1, [sp, #20]
 800fc80:	4606      	mov	r6, r0
 800fc82:	a9a1      	add	r1, sp, #644	@ 0x284
 800fc84:	4618      	mov	r0, r3
 800fc86:	2305      	movs	r3, #5
 800fc88:	7123      	strb	r3, [r4, #4]
 800fc8a:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800fc8e:	2703      	movs	r7, #3
 800fc90:	f000 f980 	bl	800ff94 <uxr_object_id_to_raw>
 800fc94:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800fc96:	7227      	strb	r7, [r4, #8]
 800fc98:	a90e      	add	r1, sp, #56	@ 0x38
 800fc9a:	f000 f97b 	bl	800ff94 <uxr_object_id_to_raw>
 800fc9e:	2300      	movs	r3, #0
 800fca0:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800fca4:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 800fca8:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800fcac:	3d00      	subs	r5, #0
 800fcae:	bf18      	it	ne
 800fcb0:	2501      	movne	r5, #1
 800fcb2:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800fcb6:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800fcba:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800fcbe:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800fcc2:	2301      	movs	r3, #1
 800fcc4:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800fcc8:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800fccc:	bb8a      	cbnz	r2, 800fd32 <uxr_buffer_create_datawriter_bin+0xc6>
 800fcce:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800fcd2:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800fcd6:	f04f 0c13 	mov.w	ip, #19
 800fcda:	250b      	movs	r5, #11
 800fcdc:	2221      	movs	r2, #33	@ 0x21
 800fcde:	2111      	movs	r1, #17
 800fce0:	2009      	movs	r0, #9
 800fce2:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800fce6:	b923      	cbnz	r3, 800fcf2 <uxr_buffer_create_datawriter_bin+0x86>
 800fce8:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800fcec:	4672      	mov	r2, lr
 800fcee:	4661      	mov	r1, ip
 800fcf0:	4628      	mov	r0, r5
 800fcf2:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800fcf6:	2b01      	cmp	r3, #1
 800fcf8:	d025      	beq.n	800fd46 <uxr_buffer_create_datawriter_bin+0xda>
 800fcfa:	2b03      	cmp	r3, #3
 800fcfc:	d029      	beq.n	800fd52 <uxr_buffer_create_datawriter_bin+0xe6>
 800fcfe:	b32b      	cbz	r3, 800fd4c <uxr_buffer_create_datawriter_bin+0xe0>
 800fd00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fd04:	a921      	add	r1, sp, #132	@ 0x84
 800fd06:	a806      	add	r0, sp, #24
 800fd08:	f7fc f9b4 	bl	800c074 <ucdr_init_buffer>
 800fd0c:	a90e      	add	r1, sp, #56	@ 0x38
 800fd0e:	a806      	add	r0, sp, #24
 800fd10:	f002 febc 	bl	8012a8c <uxr_serialize_OBJK_DataWriter_Binary>
 800fd14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fd16:	f8cd 8000 	str.w	r8, [sp]
 800fd1a:	9401      	str	r4, [sp, #4]
 800fd1c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fd20:	60e3      	str	r3, [r4, #12]
 800fd22:	4630      	mov	r0, r6
 800fd24:	b29b      	uxth	r3, r3
 800fd26:	f7ff fedd 	bl	800fae4 <uxr_common_create_entity>
 800fd2a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800fd2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd32:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800fd36:	f04f 0c12 	mov.w	ip, #18
 800fd3a:	250a      	movs	r5, #10
 800fd3c:	2220      	movs	r2, #32
 800fd3e:	2110      	movs	r1, #16
 800fd40:	2008      	movs	r0, #8
 800fd42:	2702      	movs	r7, #2
 800fd44:	e7cd      	b.n	800fce2 <uxr_buffer_create_datawriter_bin+0x76>
 800fd46:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800fd4a:	e7d9      	b.n	800fd00 <uxr_buffer_create_datawriter_bin+0x94>
 800fd4c:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800fd50:	e7d6      	b.n	800fd00 <uxr_buffer_create_datawriter_bin+0x94>
 800fd52:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800fd56:	e7d3      	b.n	800fd00 <uxr_buffer_create_datawriter_bin+0x94>

0800fd58 <uxr_buffer_create_replier_bin>:
 800fd58:	b570      	push	{r4, r5, r6, lr}
 800fd5a:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 800fd5e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fd62:	9105      	str	r1, [sp, #20]
 800fd64:	4605      	mov	r5, r0
 800fd66:	a999      	add	r1, sp, #612	@ 0x264
 800fd68:	4618      	mov	r0, r3
 800fd6a:	2308      	movs	r3, #8
 800fd6c:	f89d 6294 	ldrb.w	r6, [sp, #660]	@ 0x294
 800fd70:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
 800fd74:	f000 f90e 	bl	800ff94 <uxr_object_id_to_raw>
 800fd78:	9b9e      	ldr	r3, [sp, #632]	@ 0x278
 800fd7a:	9306      	str	r3, [sp, #24]
 800fd7c:	9b9f      	ldr	r3, [sp, #636]	@ 0x27c
 800fd7e:	9307      	str	r3, [sp, #28]
 800fd80:	9ba0      	ldr	r3, [sp, #640]	@ 0x280
 800fd82:	9308      	str	r3, [sp, #32]
 800fd84:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 800fd86:	930c      	str	r3, [sp, #48]	@ 0x30
 800fd88:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800fd8a:	930a      	str	r3, [sp, #40]	@ 0x28
 800fd8c:	2301      	movs	r3, #1
 800fd8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fd92:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800fd96:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800fd9a:	a919      	add	r1, sp, #100	@ 0x64
 800fd9c:	2303      	movs	r3, #3
 800fd9e:	a80d      	add	r0, sp, #52	@ 0x34
 800fda0:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
 800fda4:	f7fc f966 	bl	800c074 <ucdr_init_buffer>
 800fda8:	a906      	add	r1, sp, #24
 800fdaa:	a80d      	add	r0, sp, #52	@ 0x34
 800fdac:	f002 fe9a 	bl	8012ae4 <uxr_serialize_OBJK_Replier_Binary>
 800fdb0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800fdb2:	9318      	str	r3, [sp, #96]	@ 0x60
 800fdb4:	ac15      	add	r4, sp, #84	@ 0x54
 800fdb6:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fdba:	9600      	str	r6, [sp, #0]
 800fdbc:	9401      	str	r4, [sp, #4]
 800fdbe:	b29b      	uxth	r3, r3
 800fdc0:	4628      	mov	r0, r5
 800fdc2:	f7ff fe8f 	bl	800fae4 <uxr_common_create_entity>
 800fdc6:	f50d 7d1a 	add.w	sp, sp, #616	@ 0x268
 800fdca:	bd70      	pop	{r4, r5, r6, pc}

0800fdcc <get_custom_error>:
 800fdcc:	4b01      	ldr	r3, [pc, #4]	@ (800fdd4 <get_custom_error+0x8>)
 800fdce:	7818      	ldrb	r0, [r3, #0]
 800fdd0:	4770      	bx	lr
 800fdd2:	bf00      	nop
 800fdd4:	2000b8c4 	.word	0x2000b8c4

0800fdd8 <recv_custom_msg>:
 800fdd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fddc:	4693      	mov	fp, r2
 800fdde:	b089      	sub	sp, #36	@ 0x24
 800fde0:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 800fde4:	9305      	str	r3, [sp, #20]
 800fde6:	468a      	mov	sl, r1
 800fde8:	2100      	movs	r1, #0
 800fdea:	4604      	mov	r4, r0
 800fdec:	f88d 101e 	strb.w	r1, [sp, #30]
 800fdf0:	b322      	cbz	r2, 800fe3c <recv_custom_msg+0x64>
 800fdf2:	f200 2902 	addw	r9, r0, #514	@ 0x202
 800fdf6:	f10d 081f 	add.w	r8, sp, #31
 800fdfa:	af05      	add	r7, sp, #20
 800fdfc:	f10d 061e 	add.w	r6, sp, #30
 800fe00:	f44f 7500 	mov.w	r5, #512	@ 0x200
 800fe04:	e002      	b.n	800fe0c <recv_custom_msg+0x34>
 800fe06:	9b05      	ldr	r3, [sp, #20]
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	dd0f      	ble.n	800fe2c <recv_custom_msg+0x54>
 800fe0c:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 800fe10:	4623      	mov	r3, r4
 800fe12:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800fe16:	e9cd 5600 	strd	r5, r6, [sp]
 800fe1a:	4622      	mov	r2, r4
 800fe1c:	4648      	mov	r0, r9
 800fe1e:	f001 fcf1 	bl	8011804 <uxr_read_framed_msg>
 800fe22:	2800      	cmp	r0, #0
 800fe24:	d0ef      	beq.n	800fe06 <recv_custom_msg+0x2e>
 800fe26:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800fe2a:	b1b3      	cbz	r3, 800fe5a <recv_custom_msg+0x82>
 800fe2c:	4b0f      	ldr	r3, [pc, #60]	@ (800fe6c <recv_custom_msg+0x94>)
 800fe2e:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800fe32:	701a      	strb	r2, [r3, #0]
 800fe34:	2000      	movs	r0, #0
 800fe36:	b009      	add	sp, #36	@ 0x24
 800fe38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe3c:	f10d 021f 	add.w	r2, sp, #31
 800fe40:	9200      	str	r2, [sp, #0]
 800fe42:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 800fe46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fe4a:	4601      	mov	r1, r0
 800fe4c:	47a8      	blx	r5
 800fe4e:	2800      	cmp	r0, #0
 800fe50:	d0ec      	beq.n	800fe2c <recv_custom_msg+0x54>
 800fe52:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d1e8      	bne.n	800fe2c <recv_custom_msg+0x54>
 800fe5a:	f8cb 0000 	str.w	r0, [fp]
 800fe5e:	2001      	movs	r0, #1
 800fe60:	f8ca 4000 	str.w	r4, [sl]
 800fe64:	b009      	add	sp, #36	@ 0x24
 800fe66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe6a:	bf00      	nop
 800fe6c:	2000b8c4 	.word	0x2000b8c4

0800fe70 <send_custom_msg>:
 800fe70:	b530      	push	{r4, r5, lr}
 800fe72:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 800fe76:	b087      	sub	sp, #28
 800fe78:	4615      	mov	r5, r2
 800fe7a:	b974      	cbnz	r4, 800fe9a <send_custom_msg+0x2a>
 800fe7c:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 800fe80:	f10d 0317 	add.w	r3, sp, #23
 800fe84:	47a0      	blx	r4
 800fe86:	b108      	cbz	r0, 800fe8c <send_custom_msg+0x1c>
 800fe88:	42a8      	cmp	r0, r5
 800fe8a:	d015      	beq.n	800feb8 <send_custom_msg+0x48>
 800fe8c:	4b0c      	ldr	r3, [pc, #48]	@ (800fec0 <send_custom_msg+0x50>)
 800fe8e:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800fe92:	701a      	strb	r2, [r3, #0]
 800fe94:	2000      	movs	r0, #0
 800fe96:	b007      	add	sp, #28
 800fe98:	bd30      	pop	{r4, r5, pc}
 800fe9a:	460b      	mov	r3, r1
 800fe9c:	2200      	movs	r2, #0
 800fe9e:	f10d 0117 	add.w	r1, sp, #23
 800fea2:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800fea6:	4602      	mov	r2, r0
 800fea8:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 800feac:	9500      	str	r5, [sp, #0]
 800feae:	f200 2002 	addw	r0, r0, #514	@ 0x202
 800feb2:	f001 faaf 	bl	8011414 <uxr_write_framed_msg>
 800feb6:	e7e6      	b.n	800fe86 <send_custom_msg+0x16>
 800feb8:	2001      	movs	r0, #1
 800feba:	b007      	add	sp, #28
 800febc:	bd30      	pop	{r4, r5, pc}
 800febe:	bf00      	nop
 800fec0:	2000b8c4 	.word	0x2000b8c4

0800fec4 <uxr_set_custom_transport_callbacks>:
 800fec4:	b410      	push	{r4}
 800fec6:	9c01      	ldr	r4, [sp, #4]
 800fec8:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 800fecc:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 800fed0:	9b02      	ldr	r3, [sp, #8]
 800fed2:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 800fed6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800feda:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 800fede:	4770      	bx	lr

0800fee0 <uxr_init_custom_transport>:
 800fee0:	b538      	push	{r3, r4, r5, lr}
 800fee2:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 800fee6:	b303      	cbz	r3, 800ff2a <uxr_init_custom_transport+0x4a>
 800fee8:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 800feec:	4604      	mov	r4, r0
 800feee:	b1e2      	cbz	r2, 800ff2a <uxr_init_custom_transport+0x4a>
 800fef0:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 800fef4:	b1ca      	cbz	r2, 800ff2a <uxr_init_custom_transport+0x4a>
 800fef6:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 800fefa:	b1b2      	cbz	r2, 800ff2a <uxr_init_custom_transport+0x4a>
 800fefc:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 800ff00:	4798      	blx	r3
 800ff02:	4605      	mov	r5, r0
 800ff04:	b188      	cbz	r0, 800ff2a <uxr_init_custom_transport+0x4a>
 800ff06:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 800ff0a:	b98b      	cbnz	r3, 800ff30 <uxr_init_custom_transport+0x50>
 800ff0c:	490b      	ldr	r1, [pc, #44]	@ (800ff3c <uxr_init_custom_transport+0x5c>)
 800ff0e:	4b0c      	ldr	r3, [pc, #48]	@ (800ff40 <uxr_init_custom_transport+0x60>)
 800ff10:	4a0c      	ldr	r2, [pc, #48]	@ (800ff44 <uxr_init_custom_transport+0x64>)
 800ff12:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 800ff16:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ff1a:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 800ff1e:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 800ff22:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 800ff26:	4628      	mov	r0, r5
 800ff28:	bd38      	pop	{r3, r4, r5, pc}
 800ff2a:	2500      	movs	r5, #0
 800ff2c:	4628      	mov	r0, r5
 800ff2e:	bd38      	pop	{r3, r4, r5, pc}
 800ff30:	2100      	movs	r1, #0
 800ff32:	f204 2002 	addw	r0, r4, #514	@ 0x202
 800ff36:	f001 fa67 	bl	8011408 <uxr_init_framing_io>
 800ff3a:	e7e7      	b.n	800ff0c <uxr_init_custom_transport+0x2c>
 800ff3c:	0800fe71 	.word	0x0800fe71
 800ff40:	0800fdd9 	.word	0x0800fdd9
 800ff44:	0800fdcd 	.word	0x0800fdcd

0800ff48 <uxr_close_custom_transport>:
 800ff48:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 800ff4c:	4718      	bx	r3
 800ff4e:	bf00      	nop

0800ff50 <uxr_object_id>:
 800ff50:	b082      	sub	sp, #8
 800ff52:	2300      	movs	r3, #0
 800ff54:	f88d 1006 	strb.w	r1, [sp, #6]
 800ff58:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ff5c:	f360 030f 	bfi	r3, r0, #0, #16
 800ff60:	f362 431f 	bfi	r3, r2, #16, #16
 800ff64:	4618      	mov	r0, r3
 800ff66:	b002      	add	sp, #8
 800ff68:	4770      	bx	lr
 800ff6a:	bf00      	nop

0800ff6c <uxr_object_id_from_raw>:
 800ff6c:	7843      	ldrb	r3, [r0, #1]
 800ff6e:	7801      	ldrb	r1, [r0, #0]
 800ff70:	b082      	sub	sp, #8
 800ff72:	f003 020f 	and.w	r2, r3, #15
 800ff76:	f88d 2006 	strb.w	r2, [sp, #6]
 800ff7a:	091b      	lsrs	r3, r3, #4
 800ff7c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ff80:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800ff84:	2000      	movs	r0, #0
 800ff86:	f363 000f 	bfi	r0, r3, #0, #16
 800ff8a:	f362 401f 	bfi	r0, r2, #16, #16
 800ff8e:	b002      	add	sp, #8
 800ff90:	4770      	bx	lr
 800ff92:	bf00      	nop

0800ff94 <uxr_object_id_to_raw>:
 800ff94:	4602      	mov	r2, r0
 800ff96:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800ff9a:	b082      	sub	sp, #8
 800ff9c:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800ffa0:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800ffa4:	f881 c000 	strb.w	ip, [r1]
 800ffa8:	7048      	strb	r0, [r1, #1]
 800ffaa:	b002      	add	sp, #8
 800ffac:	4770      	bx	lr
 800ffae:	bf00      	nop

0800ffb0 <uxr_buffer_request_data>:
 800ffb0:	b530      	push	{r4, r5, lr}
 800ffb2:	b095      	sub	sp, #84	@ 0x54
 800ffb4:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800ffb8:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 800ffba:	9303      	str	r3, [sp, #12]
 800ffbc:	2200      	movs	r2, #0
 800ffbe:	2d00      	cmp	r5, #0
 800ffc0:	bf14      	ite	ne
 800ffc2:	2101      	movne	r1, #1
 800ffc4:	4611      	moveq	r1, r2
 800ffc6:	4604      	mov	r4, r0
 800ffc8:	f88d 301c 	strb.w	r3, [sp, #28]
 800ffcc:	f88d 201d 	strb.w	r2, [sp, #29]
 800ffd0:	f88d 201e 	strb.w	r2, [sp, #30]
 800ffd4:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 800ffd8:	d021      	beq.n	801001e <uxr_buffer_request_data+0x6e>
 800ffda:	682a      	ldr	r2, [r5, #0]
 800ffdc:	686b      	ldr	r3, [r5, #4]
 800ffde:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 800ffe2:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800ffe6:	2210      	movs	r2, #16
 800ffe8:	2308      	movs	r3, #8
 800ffea:	2100      	movs	r1, #0
 800ffec:	e9cd 3100 	strd	r3, r1, [sp]
 800fff0:	4620      	mov	r0, r4
 800fff2:	9905      	ldr	r1, [sp, #20]
 800fff4:	ab0c      	add	r3, sp, #48	@ 0x30
 800fff6:	f001 f8a1 	bl	801113c <uxr_prepare_stream_to_write_submessage>
 800fffa:	b918      	cbnz	r0, 8010004 <uxr_buffer_request_data+0x54>
 800fffc:	4604      	mov	r4, r0
 800fffe:	4620      	mov	r0, r4
 8010000:	b015      	add	sp, #84	@ 0x54
 8010002:	bd30      	pop	{r4, r5, pc}
 8010004:	9904      	ldr	r1, [sp, #16]
 8010006:	aa06      	add	r2, sp, #24
 8010008:	4620      	mov	r0, r4
 801000a:	f001 f9cd 	bl	80113a8 <uxr_init_base_object_request>
 801000e:	a906      	add	r1, sp, #24
 8010010:	4604      	mov	r4, r0
 8010012:	a80c      	add	r0, sp, #48	@ 0x30
 8010014:	f003 f8a2 	bl	801315c <uxr_serialize_READ_DATA_Payload>
 8010018:	4620      	mov	r0, r4
 801001a:	b015      	add	sp, #84	@ 0x54
 801001c:	bd30      	pop	{r4, r5, pc}
 801001e:	2208      	movs	r2, #8
 8010020:	e7e2      	b.n	800ffe8 <uxr_buffer_request_data+0x38>
 8010022:	bf00      	nop

08010024 <uxr_buffer_cancel_data>:
 8010024:	b510      	push	{r4, lr}
 8010026:	b094      	sub	sp, #80	@ 0x50
 8010028:	2300      	movs	r3, #0
 801002a:	9202      	str	r2, [sp, #8]
 801002c:	9205      	str	r2, [sp, #20]
 801002e:	9301      	str	r3, [sp, #4]
 8010030:	2201      	movs	r2, #1
 8010032:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010036:	f88d 301e 	strb.w	r3, [sp, #30]
 801003a:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 801003e:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8010042:	2308      	movs	r3, #8
 8010044:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8010048:	9300      	str	r3, [sp, #0]
 801004a:	2210      	movs	r2, #16
 801004c:	ab0c      	add	r3, sp, #48	@ 0x30
 801004e:	4604      	mov	r4, r0
 8010050:	9103      	str	r1, [sp, #12]
 8010052:	f001 f873 	bl	801113c <uxr_prepare_stream_to_write_submessage>
 8010056:	b918      	cbnz	r0, 8010060 <uxr_buffer_cancel_data+0x3c>
 8010058:	4604      	mov	r4, r0
 801005a:	4620      	mov	r0, r4
 801005c:	b014      	add	sp, #80	@ 0x50
 801005e:	bd10      	pop	{r4, pc}
 8010060:	9905      	ldr	r1, [sp, #20]
 8010062:	aa06      	add	r2, sp, #24
 8010064:	4620      	mov	r0, r4
 8010066:	f001 f99f 	bl	80113a8 <uxr_init_base_object_request>
 801006a:	a906      	add	r1, sp, #24
 801006c:	4604      	mov	r4, r0
 801006e:	a80c      	add	r0, sp, #48	@ 0x30
 8010070:	f003 f874 	bl	801315c <uxr_serialize_READ_DATA_Payload>
 8010074:	4620      	mov	r0, r4
 8010076:	b014      	add	sp, #80	@ 0x50
 8010078:	bd10      	pop	{r4, pc}
 801007a:	bf00      	nop

0801007c <read_submessage_format>:
 801007c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010080:	b095      	sub	sp, #84	@ 0x54
 8010082:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 8010086:	b113      	cbz	r3, 801008e <read_submessage_format+0x12>
 8010088:	b015      	add	sp, #84	@ 0x54
 801008a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801008e:	460c      	mov	r4, r1
 8010090:	4615      	mov	r5, r2
 8010092:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8010096:	4607      	mov	r7, r0
 8010098:	981c      	ldr	r0, [sp, #112]	@ 0x70
 801009a:	9004      	str	r0, [sp, #16]
 801009c:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801009e:	9005      	str	r0, [sp, #20]
 80100a0:	1a52      	subs	r2, r2, r1
 80100a2:	a80c      	add	r0, sp, #48	@ 0x30
 80100a4:	4699      	mov	r9, r3
 80100a6:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 80100aa:	f7fb ffe3 	bl	800c074 <ucdr_init_buffer>
 80100ae:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80100b2:	a80c      	add	r0, sp, #48	@ 0x30
 80100b4:	f7fb ffb2 	bl	800c01c <ucdr_set_on_full_buffer_callback>
 80100b8:	69e2      	ldr	r2, [r4, #28]
 80100ba:	b19a      	cbz	r2, 80100e4 <read_submessage_format+0x68>
 80100bc:	f1b8 0f07 	cmp.w	r8, #7
 80100c0:	f882 9014 	strb.w	r9, [r2, #20]
 80100c4:	d040      	beq.n	8010148 <read_submessage_format+0xcc>
 80100c6:	f1b8 0f08 	cmp.w	r8, #8
 80100ca:	d02e      	beq.n	801012a <read_submessage_format+0xae>
 80100cc:	f1b8 0f06 	cmp.w	r8, #6
 80100d0:	d011      	beq.n	80100f6 <read_submessage_format+0x7a>
 80100d2:	2301      	movs	r3, #1
 80100d4:	7513      	strb	r3, [r2, #20]
 80100d6:	4629      	mov	r1, r5
 80100d8:	4620      	mov	r0, r4
 80100da:	f7fc f81b 	bl	800c114 <ucdr_advance_buffer>
 80100de:	b015      	add	sp, #84	@ 0x54
 80100e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80100e4:	f1b8 0f07 	cmp.w	r8, #7
 80100e8:	d02e      	beq.n	8010148 <read_submessage_format+0xcc>
 80100ea:	f1b8 0f08 	cmp.w	r8, #8
 80100ee:	d01c      	beq.n	801012a <read_submessage_format+0xae>
 80100f0:	f1b8 0f06 	cmp.w	r8, #6
 80100f4:	d1ef      	bne.n	80100d6 <read_submessage_format+0x5a>
 80100f6:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 80100fa:	f1b8 0f00 	cmp.w	r8, #0
 80100fe:	d011      	beq.n	8010124 <read_submessage_format+0xa8>
 8010100:	ab0c      	add	r3, sp, #48	@ 0x30
 8010102:	e9cd 3500 	strd	r3, r5, [sp]
 8010106:	2306      	movs	r3, #6
 8010108:	f88d 3016 	strb.w	r3, [sp, #22]
 801010c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010110:	9302      	str	r3, [sp, #8]
 8010112:	4632      	mov	r2, r6
 8010114:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8010118:	4638      	mov	r0, r7
 801011a:	47c0      	blx	r8
 801011c:	2301      	movs	r3, #1
 801011e:	69e2      	ldr	r2, [r4, #28]
 8010120:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8010124:	2a00      	cmp	r2, #0
 8010126:	d1d4      	bne.n	80100d2 <read_submessage_format+0x56>
 8010128:	e7d5      	b.n	80100d6 <read_submessage_format+0x5a>
 801012a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801012e:	2b00      	cmp	r3, #0
 8010130:	d0f8      	beq.n	8010124 <read_submessage_format+0xa8>
 8010132:	a906      	add	r1, sp, #24
 8010134:	a80c      	add	r0, sp, #48	@ 0x30
 8010136:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 801013a:	f003 f8e3 	bl	8013304 <uxr_deserialize_SampleIdentity>
 801013e:	b9a0      	cbnz	r0, 801016a <read_submessage_format+0xee>
 8010140:	69e2      	ldr	r2, [r4, #28]
 8010142:	2a00      	cmp	r2, #0
 8010144:	d1c5      	bne.n	80100d2 <read_submessage_format+0x56>
 8010146:	e7c6      	b.n	80100d6 <read_submessage_format+0x5a>
 8010148:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801014c:	b13b      	cbz	r3, 801015e <read_submessage_format+0xe2>
 801014e:	a906      	add	r1, sp, #24
 8010150:	a80c      	add	r0, sp, #48	@ 0x30
 8010152:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8010156:	f002 fd9b 	bl	8012c90 <uxr_deserialize_BaseObjectRequest>
 801015a:	bb60      	cbnz	r0, 80101b6 <read_submessage_format+0x13a>
 801015c:	69e2      	ldr	r2, [r4, #28]
 801015e:	68a3      	ldr	r3, [r4, #8]
 8010160:	442b      	add	r3, r5
 8010162:	60a3      	str	r3, [r4, #8]
 8010164:	2a00      	cmp	r2, #0
 8010166:	d1b4      	bne.n	80100d2 <read_submessage_format+0x56>
 8010168:	e7b5      	b.n	80100d6 <read_submessage_format+0x5a>
 801016a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801016e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010170:	1a52      	subs	r2, r2, r1
 8010172:	eba8 0803 	sub.w	r8, r8, r3
 8010176:	a80c      	add	r0, sp, #48	@ 0x30
 8010178:	f7fb ff7c 	bl	800c074 <ucdr_init_buffer>
 801017c:	44a8      	add	r8, r5
 801017e:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8010182:	a80c      	add	r0, sp, #48	@ 0x30
 8010184:	f7fb ff4a 	bl	800c01c <ucdr_set_on_full_buffer_callback>
 8010188:	fa1f f888 	uxth.w	r8, r8
 801018c:	ab0c      	add	r3, sp, #48	@ 0x30
 801018e:	9300      	str	r3, [sp, #0]
 8010190:	f8cd 8004 	str.w	r8, [sp, #4]
 8010194:	2108      	movs	r1, #8
 8010196:	f88d 1016 	strb.w	r1, [sp, #22]
 801019a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 801019e:	9102      	str	r1, [sp, #8]
 80101a0:	ab06      	add	r3, sp, #24
 80101a2:	4632      	mov	r2, r6
 80101a4:	9905      	ldr	r1, [sp, #20]
 80101a6:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 80101aa:	4638      	mov	r0, r7
 80101ac:	47b0      	blx	r6
 80101ae:	2301      	movs	r3, #1
 80101b0:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 80101b4:	e7c4      	b.n	8010140 <read_submessage_format+0xc4>
 80101b6:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 80101ba:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80101bc:	1a52      	subs	r2, r2, r1
 80101be:	a80c      	add	r0, sp, #48	@ 0x30
 80101c0:	eba8 0803 	sub.w	r8, r8, r3
 80101c4:	f7fb ff56 	bl	800c074 <ucdr_init_buffer>
 80101c8:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80101cc:	a80c      	add	r0, sp, #48	@ 0x30
 80101ce:	f7fb ff25 	bl	800c01c <ucdr_set_on_full_buffer_callback>
 80101d2:	ab0c      	add	r3, sp, #48	@ 0x30
 80101d4:	9300      	str	r3, [sp, #0]
 80101d6:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80101da:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80101de:	44a8      	add	r8, r5
 80101e0:	fa1f f888 	uxth.w	r8, r8
 80101e4:	f8cd 8004 	str.w	r8, [sp, #4]
 80101e8:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80101ec:	2107      	movs	r1, #7
 80101ee:	f88d 1016 	strb.w	r1, [sp, #22]
 80101f2:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 80101f6:	9102      	str	r1, [sp, #8]
 80101f8:	4632      	mov	r2, r6
 80101fa:	b29b      	uxth	r3, r3
 80101fc:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 8010200:	9905      	ldr	r1, [sp, #20]
 8010202:	4638      	mov	r0, r7
 8010204:	47b0      	blx	r6
 8010206:	2301      	movs	r3, #1
 8010208:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 801020c:	e7a6      	b.n	801015c <read_submessage_format+0xe0>
 801020e:	bf00      	nop

08010210 <on_get_fragmentation_info>:
 8010210:	b500      	push	{lr}
 8010212:	b08b      	sub	sp, #44	@ 0x2c
 8010214:	4601      	mov	r1, r0
 8010216:	2204      	movs	r2, #4
 8010218:	a802      	add	r0, sp, #8
 801021a:	f7fb ff2b 	bl	800c074 <ucdr_init_buffer>
 801021e:	f10d 0305 	add.w	r3, sp, #5
 8010222:	f10d 0206 	add.w	r2, sp, #6
 8010226:	a901      	add	r1, sp, #4
 8010228:	a802      	add	r0, sp, #8
 801022a:	f001 fed1 	bl	8011fd0 <uxr_read_submessage_header>
 801022e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010232:	2b0d      	cmp	r3, #13
 8010234:	d003      	beq.n	801023e <on_get_fragmentation_info+0x2e>
 8010236:	2000      	movs	r0, #0
 8010238:	b00b      	add	sp, #44	@ 0x2c
 801023a:	f85d fb04 	ldr.w	pc, [sp], #4
 801023e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010242:	f013 0f02 	tst.w	r3, #2
 8010246:	bf14      	ite	ne
 8010248:	2002      	movne	r0, #2
 801024a:	2001      	moveq	r0, #1
 801024c:	b00b      	add	sp, #44	@ 0x2c
 801024e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010252:	bf00      	nop

08010254 <read_submessage_get_info>:
 8010254:	b570      	push	{r4, r5, r6, lr}
 8010256:	2500      	movs	r5, #0
 8010258:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 801025c:	4604      	mov	r4, r0
 801025e:	f44f 7224 	mov.w	r2, #656	@ 0x290
 8010262:	460e      	mov	r6, r1
 8010264:	a810      	add	r0, sp, #64	@ 0x40
 8010266:	4629      	mov	r1, r5
 8010268:	e9cd 5503 	strd	r5, r5, [sp, #12]
 801026c:	f009 f850 	bl	8019310 <memset>
 8010270:	a903      	add	r1, sp, #12
 8010272:	4630      	mov	r0, r6
 8010274:	f002 feb4 	bl	8012fe0 <uxr_deserialize_GET_INFO_Payload>
 8010278:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801027c:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010280:	4620      	mov	r0, r4
 8010282:	f001 f889 	bl	8011398 <uxr_session_header_offset>
 8010286:	462b      	mov	r3, r5
 8010288:	9000      	str	r0, [sp, #0]
 801028a:	220c      	movs	r2, #12
 801028c:	a905      	add	r1, sp, #20
 801028e:	a808      	add	r0, sp, #32
 8010290:	f7fb fede 	bl	800c050 <ucdr_init_buffer_origin_offset>
 8010294:	a910      	add	r1, sp, #64	@ 0x40
 8010296:	a808      	add	r0, sp, #32
 8010298:	f002 ff14 	bl	80130c4 <uxr_serialize_INFO_Payload>
 801029c:	9b08      	ldr	r3, [sp, #32]
 801029e:	462a      	mov	r2, r5
 80102a0:	4629      	mov	r1, r5
 80102a2:	4620      	mov	r0, r4
 80102a4:	f001 f822 	bl	80112ec <uxr_stamp_session_header>
 80102a8:	a808      	add	r0, sp, #32
 80102aa:	f7fb ff0f 	bl	800c0cc <ucdr_buffer_length>
 80102ae:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80102b0:	4602      	mov	r2, r0
 80102b2:	a905      	add	r1, sp, #20
 80102b4:	e9d3 0400 	ldrd	r0, r4, [r3]
 80102b8:	47a0      	blx	r4
 80102ba:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 80102be:	bd70      	pop	{r4, r5, r6, pc}

080102c0 <write_submessage_acknack.isra.0>:
 80102c0:	b570      	push	{r4, r5, r6, lr}
 80102c2:	b092      	sub	sp, #72	@ 0x48
 80102c4:	4605      	mov	r5, r0
 80102c6:	460e      	mov	r6, r1
 80102c8:	4614      	mov	r4, r2
 80102ca:	f001 f865 	bl	8011398 <uxr_session_header_offset>
 80102ce:	a905      	add	r1, sp, #20
 80102d0:	9000      	str	r0, [sp, #0]
 80102d2:	2300      	movs	r3, #0
 80102d4:	a80a      	add	r0, sp, #40	@ 0x28
 80102d6:	2211      	movs	r2, #17
 80102d8:	f7fb feba 	bl	800c050 <ucdr_init_buffer_origin_offset>
 80102dc:	2218      	movs	r2, #24
 80102de:	fb02 5404 	mla	r4, r2, r4, r5
 80102e2:	2300      	movs	r3, #0
 80102e4:	2205      	movs	r2, #5
 80102e6:	3450      	adds	r4, #80	@ 0x50
 80102e8:	210a      	movs	r1, #10
 80102ea:	a80a      	add	r0, sp, #40	@ 0x28
 80102ec:	f001 fe56 	bl	8011f9c <uxr_buffer_submessage_header>
 80102f0:	a903      	add	r1, sp, #12
 80102f2:	4620      	mov	r0, r4
 80102f4:	f007 fb4e 	bl	8017994 <uxr_compute_acknack>
 80102f8:	ba40      	rev16	r0, r0
 80102fa:	f8ad 000e 	strh.w	r0, [sp, #14]
 80102fe:	a903      	add	r1, sp, #12
 8010300:	a80a      	add	r0, sp, #40	@ 0x28
 8010302:	f88d 6010 	strb.w	r6, [sp, #16]
 8010306:	f002 ff4d 	bl	80131a4 <uxr_serialize_ACKNACK_Payload>
 801030a:	2200      	movs	r2, #0
 801030c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801030e:	4611      	mov	r1, r2
 8010310:	4628      	mov	r0, r5
 8010312:	f000 ffeb 	bl	80112ec <uxr_stamp_session_header>
 8010316:	a80a      	add	r0, sp, #40	@ 0x28
 8010318:	f7fb fed8 	bl	800c0cc <ucdr_buffer_length>
 801031c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 801031e:	4602      	mov	r2, r0
 8010320:	a905      	add	r1, sp, #20
 8010322:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010326:	47a0      	blx	r4
 8010328:	b012      	add	sp, #72	@ 0x48
 801032a:	bd70      	pop	{r4, r5, r6, pc}
 801032c:	0000      	movs	r0, r0
	...

08010330 <uxr_init_session>:
 8010330:	b510      	push	{r4, lr}
 8010332:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8010368 <uxr_init_session+0x38>
 8010336:	2300      	movs	r3, #0
 8010338:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 801033c:	4604      	mov	r4, r0
 801033e:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 8010342:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 8010346:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 801034a:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 801034e:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 8010352:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 8010356:	2181      	movs	r1, #129	@ 0x81
 8010358:	f000 ff34 	bl	80111c4 <uxr_init_session_info>
 801035c:	f104 0008 	add.w	r0, r4, #8
 8010360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010364:	f001 bd36 	b.w	8011dd4 <uxr_init_stream_storage>
	...

08010370 <uxr_set_status_callback>:
 8010370:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 8010374:	4770      	bx	lr
 8010376:	bf00      	nop

08010378 <uxr_set_topic_callback>:
 8010378:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 801037c:	4770      	bx	lr
 801037e:	bf00      	nop

08010380 <uxr_set_request_callback>:
 8010380:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 8010384:	4770      	bx	lr
 8010386:	bf00      	nop

08010388 <uxr_set_reply_callback>:
 8010388:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 801038c:	4770      	bx	lr
 801038e:	bf00      	nop

08010390 <uxr_create_output_best_effort_stream>:
 8010390:	b510      	push	{r4, lr}
 8010392:	b084      	sub	sp, #16
 8010394:	e9cd 2100 	strd	r2, r1, [sp]
 8010398:	4604      	mov	r4, r0
 801039a:	f000 fffd 	bl	8011398 <uxr_session_header_offset>
 801039e:	e9dd 2100 	ldrd	r2, r1, [sp]
 80103a2:	4603      	mov	r3, r0
 80103a4:	f104 0008 	add.w	r0, r4, #8
 80103a8:	b004      	add	sp, #16
 80103aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80103ae:	f001 bd5b 	b.w	8011e68 <uxr_add_output_best_effort_buffer>
 80103b2:	bf00      	nop

080103b4 <uxr_create_output_reliable_stream>:
 80103b4:	b510      	push	{r4, lr}
 80103b6:	b088      	sub	sp, #32
 80103b8:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80103bc:	4604      	mov	r4, r0
 80103be:	9303      	str	r3, [sp, #12]
 80103c0:	f000 ffea 	bl	8011398 <uxr_session_header_offset>
 80103c4:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80103c8:	9000      	str	r0, [sp, #0]
 80103ca:	9905      	ldr	r1, [sp, #20]
 80103cc:	f104 0008 	add.w	r0, r4, #8
 80103d0:	f001 fd5e 	bl	8011e90 <uxr_add_output_reliable_buffer>
 80103d4:	2200      	movs	r2, #0
 80103d6:	b2c3      	uxtb	r3, r0
 80103d8:	f363 0207 	bfi	r2, r3, #0, #8
 80103dc:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80103e0:	f363 220f 	bfi	r2, r3, #8, #8
 80103e4:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80103e8:	f363 4217 	bfi	r2, r3, #16, #8
 80103ec:	0e03      	lsrs	r3, r0, #24
 80103ee:	f363 621f 	bfi	r2, r3, #24, #8
 80103f2:	4610      	mov	r0, r2
 80103f4:	b008      	add	sp, #32
 80103f6:	bd10      	pop	{r4, pc}

080103f8 <uxr_create_input_best_effort_stream>:
 80103f8:	b082      	sub	sp, #8
 80103fa:	3008      	adds	r0, #8
 80103fc:	b002      	add	sp, #8
 80103fe:	f001 bd61 	b.w	8011ec4 <uxr_add_input_best_effort_buffer>
 8010402:	bf00      	nop

08010404 <uxr_create_input_reliable_stream>:
 8010404:	b510      	push	{r4, lr}
 8010406:	b084      	sub	sp, #16
 8010408:	4c0b      	ldr	r4, [pc, #44]	@ (8010438 <uxr_create_input_reliable_stream+0x34>)
 801040a:	9400      	str	r4, [sp, #0]
 801040c:	3008      	adds	r0, #8
 801040e:	f001 fd6f 	bl	8011ef0 <uxr_add_input_reliable_buffer>
 8010412:	2200      	movs	r2, #0
 8010414:	b2c3      	uxtb	r3, r0
 8010416:	f363 0207 	bfi	r2, r3, #0, #8
 801041a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801041e:	f363 220f 	bfi	r2, r3, #8, #8
 8010422:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010426:	f363 4217 	bfi	r2, r3, #16, #8
 801042a:	0e03      	lsrs	r3, r0, #24
 801042c:	f363 621f 	bfi	r2, r3, #24, #8
 8010430:	4610      	mov	r0, r2
 8010432:	b004      	add	sp, #16
 8010434:	bd10      	pop	{r4, pc}
 8010436:	bf00      	nop
 8010438:	08010211 	.word	0x08010211

0801043c <uxr_epoch_millis>:
 801043c:	b510      	push	{r4, lr}
 801043e:	4604      	mov	r4, r0
 8010440:	f001 fe0c 	bl	801205c <uxr_nanos>
 8010444:	e9d4 3426 	ldrd	r3, r4, [r4, #152]	@ 0x98
 8010448:	1ac0      	subs	r0, r0, r3
 801044a:	4a04      	ldr	r2, [pc, #16]	@ (801045c <uxr_epoch_millis+0x20>)
 801044c:	f04f 0300 	mov.w	r3, #0
 8010450:	eb61 0104 	sbc.w	r1, r1, r4
 8010454:	f7f0 fbb8 	bl	8000bc8 <__aeabi_ldivmod>
 8010458:	bd10      	pop	{r4, pc}
 801045a:	bf00      	nop
 801045c:	000f4240 	.word	0x000f4240

08010460 <uxr_epoch_nanos>:
 8010460:	b510      	push	{r4, lr}
 8010462:	4604      	mov	r4, r0
 8010464:	f001 fdfa 	bl	801205c <uxr_nanos>
 8010468:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 801046c:	1ac0      	subs	r0, r0, r3
 801046e:	eb61 0102 	sbc.w	r1, r1, r2
 8010472:	bd10      	pop	{r4, pc}

08010474 <uxr_flash_output_streams>:
 8010474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010478:	7e03      	ldrb	r3, [r0, #24]
 801047a:	b084      	sub	sp, #16
 801047c:	4604      	mov	r4, r0
 801047e:	2b00      	cmp	r3, #0
 8010480:	d035      	beq.n	80104ee <uxr_flash_output_streams+0x7a>
 8010482:	f04f 0900 	mov.w	r9, #0
 8010486:	4648      	mov	r0, r9
 8010488:	f10d 0802 	add.w	r8, sp, #2
 801048c:	af03      	add	r7, sp, #12
 801048e:	ae02      	add	r6, sp, #8
 8010490:	e006      	b.n	80104a0 <uxr_flash_output_streams+0x2c>
 8010492:	7e23      	ldrb	r3, [r4, #24]
 8010494:	f109 0901 	add.w	r9, r9, #1
 8010498:	fa5f f089 	uxtb.w	r0, r9
 801049c:	4283      	cmp	r3, r0
 801049e:	d926      	bls.n	80104ee <uxr_flash_output_streams+0x7a>
 80104a0:	2201      	movs	r2, #1
 80104a2:	4611      	mov	r1, r2
 80104a4:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 80104a8:	f001 fc40 	bl	8011d2c <uxr_stream_id>
 80104ac:	3508      	adds	r5, #8
 80104ae:	4684      	mov	ip, r0
 80104b0:	4643      	mov	r3, r8
 80104b2:	463a      	mov	r2, r7
 80104b4:	4631      	mov	r1, r6
 80104b6:	4628      	mov	r0, r5
 80104b8:	f8cd c004 	str.w	ip, [sp, #4]
 80104bc:	f007 faf0 	bl	8017aa0 <uxr_prepare_best_effort_buffer_to_send>
 80104c0:	2800      	cmp	r0, #0
 80104c2:	d0e6      	beq.n	8010492 <uxr_flash_output_streams+0x1e>
 80104c4:	9b02      	ldr	r3, [sp, #8]
 80104c6:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80104ca:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80104ce:	4620      	mov	r0, r4
 80104d0:	f000 ff0c 	bl	80112ec <uxr_stamp_session_header>
 80104d4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80104d6:	9a03      	ldr	r2, [sp, #12]
 80104d8:	685d      	ldr	r5, [r3, #4]
 80104da:	6818      	ldr	r0, [r3, #0]
 80104dc:	9902      	ldr	r1, [sp, #8]
 80104de:	47a8      	blx	r5
 80104e0:	f109 0901 	add.w	r9, r9, #1
 80104e4:	7e23      	ldrb	r3, [r4, #24]
 80104e6:	fa5f f089 	uxtb.w	r0, r9
 80104ea:	4283      	cmp	r3, r0
 80104ec:	d8d8      	bhi.n	80104a0 <uxr_flash_output_streams+0x2c>
 80104ee:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80104f2:	b38b      	cbz	r3, 8010558 <uxr_flash_output_streams+0xe4>
 80104f4:	f04f 0900 	mov.w	r9, #0
 80104f8:	f10d 0802 	add.w	r8, sp, #2
 80104fc:	af03      	add	r7, sp, #12
 80104fe:	ae02      	add	r6, sp, #8
 8010500:	4648      	mov	r0, r9
 8010502:	2201      	movs	r2, #1
 8010504:	2102      	movs	r1, #2
 8010506:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 801050a:	f001 fc0f 	bl	8011d2c <uxr_stream_id>
 801050e:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8010512:	3520      	adds	r5, #32
 8010514:	9001      	str	r0, [sp, #4]
 8010516:	e00d      	b.n	8010534 <uxr_flash_output_streams+0xc0>
 8010518:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801051c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010520:	9b02      	ldr	r3, [sp, #8]
 8010522:	f000 fee3 	bl	80112ec <uxr_stamp_session_header>
 8010526:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010528:	9a03      	ldr	r2, [sp, #12]
 801052a:	f8d3 a004 	ldr.w	sl, [r3, #4]
 801052e:	9902      	ldr	r1, [sp, #8]
 8010530:	6818      	ldr	r0, [r3, #0]
 8010532:	47d0      	blx	sl
 8010534:	4643      	mov	r3, r8
 8010536:	463a      	mov	r2, r7
 8010538:	4631      	mov	r1, r6
 801053a:	4628      	mov	r0, r5
 801053c:	f007 fcce 	bl	8017edc <uxr_prepare_next_reliable_buffer_to_send>
 8010540:	4603      	mov	r3, r0
 8010542:	4620      	mov	r0, r4
 8010544:	2b00      	cmp	r3, #0
 8010546:	d1e7      	bne.n	8010518 <uxr_flash_output_streams+0xa4>
 8010548:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 801054c:	f109 0901 	add.w	r9, r9, #1
 8010550:	fa5f f089 	uxtb.w	r0, r9
 8010554:	4283      	cmp	r3, r0
 8010556:	d8d4      	bhi.n	8010502 <uxr_flash_output_streams+0x8e>
 8010558:	b004      	add	sp, #16
 801055a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801055e:	bf00      	nop

08010560 <read_submessage_info>:
 8010560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010564:	460d      	mov	r5, r1
 8010566:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 801056a:	4669      	mov	r1, sp
 801056c:	4607      	mov	r7, r0
 801056e:	4628      	mov	r0, r5
 8010570:	f002 fc44 	bl	8012dfc <uxr_deserialize_BaseObjectReply>
 8010574:	a902      	add	r1, sp, #8
 8010576:	4604      	mov	r4, r0
 8010578:	4628      	mov	r0, r5
 801057a:	f89d 8005 	ldrb.w	r8, [sp, #5]
 801057e:	f7fa fa7f 	bl	800aa80 <ucdr_deserialize_bool>
 8010582:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8010586:	4004      	ands	r4, r0
 8010588:	b2e4      	uxtb	r4, r4
 801058a:	b95b      	cbnz	r3, 80105a4 <read_submessage_info+0x44>
 801058c:	a987      	add	r1, sp, #540	@ 0x21c
 801058e:	4628      	mov	r0, r5
 8010590:	f7fa fa76 	bl	800aa80 <ucdr_deserialize_bool>
 8010594:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8010598:	4606      	mov	r6, r0
 801059a:	b94b      	cbnz	r3, 80105b0 <read_submessage_info+0x50>
 801059c:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 80105a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105a4:	a903      	add	r1, sp, #12
 80105a6:	4628      	mov	r0, r5
 80105a8:	f002 fad0 	bl	8012b4c <uxr_deserialize_ObjectVariant>
 80105ac:	4004      	ands	r4, r0
 80105ae:	e7ed      	b.n	801058c <read_submessage_info+0x2c>
 80105b0:	a988      	add	r1, sp, #544	@ 0x220
 80105b2:	4628      	mov	r0, r5
 80105b4:	f7fa fa92 	bl	800aadc <ucdr_deserialize_uint8_t>
 80105b8:	4234      	tst	r4, r6
 80105ba:	d0ef      	beq.n	801059c <read_submessage_info+0x3c>
 80105bc:	2800      	cmp	r0, #0
 80105be:	d0ed      	beq.n	801059c <read_submessage_info+0x3c>
 80105c0:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 80105c4:	2b0d      	cmp	r3, #13
 80105c6:	d1e9      	bne.n	801059c <read_submessage_info+0x3c>
 80105c8:	a98a      	add	r1, sp, #552	@ 0x228
 80105ca:	4628      	mov	r0, r5
 80105cc:	f7fb f82c 	bl	800b628 <ucdr_deserialize_int16_t>
 80105d0:	b140      	cbz	r0, 80105e4 <read_submessage_info+0x84>
 80105d2:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	dd07      	ble.n	80105ea <read_submessage_info+0x8a>
 80105da:	f1b8 0f00 	cmp.w	r8, #0
 80105de:	bf14      	ite	ne
 80105e0:	2001      	movne	r0, #1
 80105e2:	2002      	moveq	r0, #2
 80105e4:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 80105e8:	e7d8      	b.n	801059c <read_submessage_info+0x3c>
 80105ea:	2000      	movs	r0, #0
 80105ec:	e7fa      	b.n	80105e4 <read_submessage_info+0x84>
 80105ee:	bf00      	nop

080105f0 <read_submessage_list>:
 80105f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105f4:	b097      	sub	sp, #92	@ 0x5c
 80105f6:	4ec1      	ldr	r6, [pc, #772]	@ (80108fc <read_submessage_list+0x30c>)
 80105f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80105fa:	4604      	mov	r4, r0
 80105fc:	460d      	mov	r5, r1
 80105fe:	f04f 0801 	mov.w	r8, #1
 8010602:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8010606:	aa0c      	add	r2, sp, #48	@ 0x30
 8010608:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 801060c:	4628      	mov	r0, r5
 801060e:	f001 fcdf 	bl	8011fd0 <uxr_read_submessage_header>
 8010612:	2800      	cmp	r0, #0
 8010614:	f000 813e 	beq.w	8010894 <read_submessage_list+0x2a4>
 8010618:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 801061c:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8010620:	3b02      	subs	r3, #2
 8010622:	2b0d      	cmp	r3, #13
 8010624:	d8ed      	bhi.n	8010602 <read_submessage_list+0x12>
 8010626:	a101      	add	r1, pc, #4	@ (adr r1, 801062c <read_submessage_list+0x3c>)
 8010628:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801062c:	0801088b 	.word	0x0801088b
 8010630:	08010603 	.word	0x08010603
 8010634:	0801087b 	.word	0x0801087b
 8010638:	08010819 	.word	0x08010819
 801063c:	0801080f 	.word	0x0801080f
 8010640:	08010603 	.word	0x08010603
 8010644:	08010603 	.word	0x08010603
 8010648:	0801076f 	.word	0x0801076f
 801064c:	080106ff 	.word	0x080106ff
 8010650:	080106bf 	.word	0x080106bf
 8010654:	08010603 	.word	0x08010603
 8010658:	08010603 	.word	0x08010603
 801065c:	08010603 	.word	0x08010603
 8010660:	08010665 	.word	0x08010665
 8010664:	a910      	add	r1, sp, #64	@ 0x40
 8010666:	4628      	mov	r0, r5
 8010668:	f002 fdfa 	bl	8013260 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 801066c:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 8010670:	f1b9 0f00 	cmp.w	r9, #0
 8010674:	f000 8116 	beq.w	80108a4 <read_submessage_list+0x2b4>
 8010678:	f001 fcf0 	bl	801205c <uxr_nanos>
 801067c:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801067e:	4602      	mov	r2, r0
 8010680:	460b      	mov	r3, r1
 8010682:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8010684:	2100      	movs	r1, #0
 8010686:	468c      	mov	ip, r1
 8010688:	fbc0 7c06 	smlal	r7, ip, r0, r6
 801068c:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 8010690:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8010692:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8010694:	468c      	mov	ip, r1
 8010696:	fbc0 7c06 	smlal	r7, ip, r0, r6
 801069a:	46e2      	mov	sl, ip
 801069c:	46bc      	mov	ip, r7
 801069e:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 80106a2:	fbc0 7106 	smlal	r7, r1, r0, r6
 80106a6:	e9cd ca02 	strd	ip, sl, [sp, #8]
 80106aa:	e9cd 7100 	strd	r7, r1, [sp]
 80106ae:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 80106b2:	9106      	str	r1, [sp, #24]
 80106b4:	4620      	mov	r0, r4
 80106b6:	47c8      	blx	r9
 80106b8:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 80106bc:	e7a1      	b.n	8010602 <read_submessage_list+0x12>
 80106be:	a910      	add	r1, sp, #64	@ 0x40
 80106c0:	4628      	mov	r0, r5
 80106c2:	f002 fdad 	bl	8013220 <uxr_deserialize_HEARTBEAT_Payload>
 80106c6:	2100      	movs	r1, #0
 80106c8:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 80106cc:	f001 fb58 	bl	8011d80 <uxr_stream_id_from_raw>
 80106d0:	f3c0 2707 	ubfx	r7, r0, #8, #8
 80106d4:	900f      	str	r0, [sp, #60]	@ 0x3c
 80106d6:	4639      	mov	r1, r7
 80106d8:	f104 0008 	add.w	r0, r4, #8
 80106dc:	f001 fc3e 	bl	8011f5c <uxr_get_input_reliable_stream>
 80106e0:	2800      	cmp	r0, #0
 80106e2:	d08e      	beq.n	8010602 <read_submessage_list+0x12>
 80106e4:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 80106e8:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 80106ec:	f007 f946 	bl	801797c <uxr_process_heartbeat>
 80106f0:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 80106f4:	463a      	mov	r2, r7
 80106f6:	4620      	mov	r0, r4
 80106f8:	f7ff fde2 	bl	80102c0 <write_submessage_acknack.isra.0>
 80106fc:	e781      	b.n	8010602 <read_submessage_list+0x12>
 80106fe:	a910      	add	r1, sp, #64	@ 0x40
 8010700:	4628      	mov	r0, r5
 8010702:	f002 fd65 	bl	80131d0 <uxr_deserialize_ACKNACK_Payload>
 8010706:	2100      	movs	r1, #0
 8010708:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 801070c:	f001 fb38 	bl	8011d80 <uxr_stream_id_from_raw>
 8010710:	900d      	str	r0, [sp, #52]	@ 0x34
 8010712:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8010716:	f104 0008 	add.w	r0, r4, #8
 801071a:	f001 fc0b 	bl	8011f34 <uxr_get_output_reliable_stream>
 801071e:	4607      	mov	r7, r0
 8010720:	2800      	cmp	r0, #0
 8010722:	f43f af6e 	beq.w	8010602 <read_submessage_list+0x12>
 8010726:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 801072a:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 801072e:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8010732:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8010736:	b289      	uxth	r1, r1
 8010738:	f007 fc7a 	bl	8018030 <uxr_process_acknack>
 801073c:	4638      	mov	r0, r7
 801073e:	f007 fc37 	bl	8017fb0 <uxr_begin_output_nack_buffer_it>
 8010742:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8010746:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 801074a:	e006      	b.n	801075a <read_submessage_list+0x16a>
 801074c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801074e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010750:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8010754:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010756:	6818      	ldr	r0, [r3, #0]
 8010758:	47c8      	blx	r9
 801075a:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 801075e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8010760:	4651      	mov	r1, sl
 8010762:	4638      	mov	r0, r7
 8010764:	f007 fc26 	bl	8017fb4 <uxr_next_reliable_nack_buffer_to_send>
 8010768:	2800      	cmp	r0, #0
 801076a:	d1ef      	bne.n	801074c <read_submessage_list+0x15c>
 801076c:	e749      	b.n	8010602 <read_submessage_list+0x12>
 801076e:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8010772:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 8010776:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 801077a:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 801077e:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 8010782:	4651      	mov	r1, sl
 8010784:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8010788:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 801078c:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 8010790:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 8010794:	4628      	mov	r0, r5
 8010796:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 801079a:	f002 fa79 	bl	8012c90 <uxr_deserialize_BaseObjectRequest>
 801079e:	4650      	mov	r0, sl
 80107a0:	a90f      	add	r1, sp, #60	@ 0x3c
 80107a2:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 80107a6:	f000 fe1d 	bl	80113e4 <uxr_parse_base_object_request>
 80107aa:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 80107ae:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80107b0:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 80107b4:	9110      	str	r1, [sp, #64]	@ 0x40
 80107b6:	3f04      	subs	r7, #4
 80107b8:	f009 090e 	and.w	r9, r9, #14
 80107bc:	b2bf      	uxth	r7, r7
 80107be:	f1bb 0f00 	cmp.w	fp, #0
 80107c2:	d006      	beq.n	80107d2 <read_submessage_list+0x1e2>
 80107c4:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 80107c8:	9300      	str	r3, [sp, #0]
 80107ca:	4652      	mov	r2, sl
 80107cc:	2300      	movs	r3, #0
 80107ce:	4620      	mov	r0, r4
 80107d0:	47d8      	blx	fp
 80107d2:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 80107d4:	b16a      	cbz	r2, 80107f2 <read_submessage_list+0x202>
 80107d6:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80107d8:	2100      	movs	r1, #0
 80107da:	3802      	subs	r0, #2
 80107dc:	e002      	b.n	80107e4 <read_submessage_list+0x1f4>
 80107de:	3101      	adds	r1, #1
 80107e0:	4291      	cmp	r1, r2
 80107e2:	d006      	beq.n	80107f2 <read_submessage_list+0x202>
 80107e4:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 80107e8:	4553      	cmp	r3, sl
 80107ea:	d1f8      	bne.n	80107de <read_submessage_list+0x1ee>
 80107ec:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80107ee:	2200      	movs	r2, #0
 80107f0:	545a      	strb	r2, [r3, r1]
 80107f2:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 80107f6:	9102      	str	r1, [sp, #8]
 80107f8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80107fa:	9101      	str	r1, [sp, #4]
 80107fc:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80107fe:	9100      	str	r1, [sp, #0]
 8010800:	464b      	mov	r3, r9
 8010802:	463a      	mov	r2, r7
 8010804:	4629      	mov	r1, r5
 8010806:	4620      	mov	r0, r4
 8010808:	f7ff fc38 	bl	801007c <read_submessage_format>
 801080c:	e6f9      	b.n	8010602 <read_submessage_list+0x12>
 801080e:	4629      	mov	r1, r5
 8010810:	4620      	mov	r0, r4
 8010812:	f7ff fea5 	bl	8010560 <read_submessage_info>
 8010816:	e6f4      	b.n	8010602 <read_submessage_list+0x12>
 8010818:	2a00      	cmp	r2, #0
 801081a:	d03e      	beq.n	801089a <read_submessage_list+0x2aa>
 801081c:	a910      	add	r1, sp, #64	@ 0x40
 801081e:	4628      	mov	r0, r5
 8010820:	f002 fc32 	bl	8013088 <uxr_deserialize_STATUS_Payload>
 8010824:	a90e      	add	r1, sp, #56	@ 0x38
 8010826:	aa0d      	add	r2, sp, #52	@ 0x34
 8010828:	a810      	add	r0, sp, #64	@ 0x40
 801082a:	f000 fddb 	bl	80113e4 <uxr_parse_base_object_request>
 801082e:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 8010832:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010834:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 8010838:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 801083c:	910f      	str	r1, [sp, #60]	@ 0x3c
 801083e:	f1ba 0f00 	cmp.w	sl, #0
 8010842:	d006      	beq.n	8010852 <read_submessage_list+0x262>
 8010844:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8010848:	9300      	str	r3, [sp, #0]
 801084a:	463a      	mov	r2, r7
 801084c:	464b      	mov	r3, r9
 801084e:	4620      	mov	r0, r4
 8010850:	47d0      	blx	sl
 8010852:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8010854:	2a00      	cmp	r2, #0
 8010856:	f43f aed4 	beq.w	8010602 <read_submessage_list+0x12>
 801085a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 801085c:	2100      	movs	r1, #0
 801085e:	3802      	subs	r0, #2
 8010860:	e003      	b.n	801086a <read_submessage_list+0x27a>
 8010862:	3101      	adds	r1, #1
 8010864:	4291      	cmp	r1, r2
 8010866:	f43f aecc 	beq.w	8010602 <read_submessage_list+0x12>
 801086a:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 801086e:	42bb      	cmp	r3, r7
 8010870:	d1f7      	bne.n	8010862 <read_submessage_list+0x272>
 8010872:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8010874:	f803 9001 	strb.w	r9, [r3, r1]
 8010878:	e6c3      	b.n	8010602 <read_submessage_list+0x12>
 801087a:	2a00      	cmp	r2, #0
 801087c:	f47f aec1 	bne.w	8010602 <read_submessage_list+0x12>
 8010880:	4629      	mov	r1, r5
 8010882:	4620      	mov	r0, r4
 8010884:	f000 fcf4 	bl	8011270 <uxr_read_create_session_status>
 8010888:	e6bb      	b.n	8010602 <read_submessage_list+0x12>
 801088a:	4629      	mov	r1, r5
 801088c:	4620      	mov	r0, r4
 801088e:	f7ff fce1 	bl	8010254 <read_submessage_get_info>
 8010892:	e6b6      	b.n	8010602 <read_submessage_list+0x12>
 8010894:	b017      	add	sp, #92	@ 0x5c
 8010896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801089a:	4629      	mov	r1, r5
 801089c:	4620      	mov	r0, r4
 801089e:	f000 fcf3 	bl	8011288 <uxr_read_delete_session_status>
 80108a2:	e6ae      	b.n	8010602 <read_submessage_list+0x12>
 80108a4:	f001 fbda 	bl	801205c <uxr_nanos>
 80108a8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80108aa:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80108ac:	464f      	mov	r7, r9
 80108ae:	fbc3 2706 	smlal	r2, r7, r3, r6
 80108b2:	1812      	adds	r2, r2, r0
 80108b4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80108b6:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80108b8:	eb47 0101 	adc.w	r1, r7, r1
 80108bc:	464f      	mov	r7, r9
 80108be:	fbc3 0706 	smlal	r0, r7, r3, r6
 80108c2:	463b      	mov	r3, r7
 80108c4:	4684      	mov	ip, r0
 80108c6:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 80108ca:	fbc7 0906 	smlal	r0, r9, r7, r6
 80108ce:	eb1c 0c00 	adds.w	ip, ip, r0
 80108d2:	464f      	mov	r7, r9
 80108d4:	eb43 0307 	adc.w	r3, r3, r7
 80108d8:	ebb2 0c0c 	subs.w	ip, r2, ip
 80108dc:	eb61 0303 	sbc.w	r3, r1, r3
 80108e0:	0fda      	lsrs	r2, r3, #31
 80108e2:	eb12 020c 	adds.w	r2, r2, ip
 80108e6:	f143 0300 	adc.w	r3, r3, #0
 80108ea:	0852      	lsrs	r2, r2, #1
 80108ec:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 80108f0:	105b      	asrs	r3, r3, #1
 80108f2:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 80108f6:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 80108fa:	e6dd      	b.n	80106b8 <read_submessage_list+0xc8>
 80108fc:	3b9aca00 	.word	0x3b9aca00

08010900 <listen_message_reliably>:
 8010900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010904:	1e0b      	subs	r3, r1, #0
 8010906:	b09d      	sub	sp, #116	@ 0x74
 8010908:	bfb8      	it	lt
 801090a:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 801090e:	4680      	mov	r8, r0
 8010910:	9305      	str	r3, [sp, #20]
 8010912:	f001 fb89 	bl	8012028 <uxr_millis>
 8010916:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 801091a:	4681      	mov	r9, r0
 801091c:	2a00      	cmp	r2, #0
 801091e:	f000 80a1 	beq.w	8010a64 <listen_message_reliably+0x164>
 8010922:	2600      	movs	r6, #0
 8010924:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010928:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 801092c:	9303      	str	r3, [sp, #12]
 801092e:	4630      	mov	r0, r6
 8010930:	460f      	mov	r7, r1
 8010932:	e00f      	b.n	8010954 <listen_message_reliably+0x54>
 8010934:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8010938:	9903      	ldr	r1, [sp, #12]
 801093a:	455a      	cmp	r2, fp
 801093c:	f106 0601 	add.w	r6, r6, #1
 8010940:	eb73 0101 	sbcs.w	r1, r3, r1
 8010944:	b2f0      	uxtb	r0, r6
 8010946:	da01      	bge.n	801094c <listen_message_reliably+0x4c>
 8010948:	4693      	mov	fp, r2
 801094a:	9303      	str	r3, [sp, #12]
 801094c:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8010950:	4283      	cmp	r3, r0
 8010952:	d960      	bls.n	8010a16 <listen_message_reliably+0x116>
 8010954:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8010958:	2102      	movs	r1, #2
 801095a:	2201      	movs	r2, #1
 801095c:	f001 f9e6 	bl	8011d2c <uxr_stream_id>
 8010960:	00e4      	lsls	r4, r4, #3
 8010962:	f104 0520 	add.w	r5, r4, #32
 8010966:	4445      	add	r5, r8
 8010968:	4601      	mov	r1, r0
 801096a:	463b      	mov	r3, r7
 801096c:	464a      	mov	r2, r9
 801096e:	4628      	mov	r0, r5
 8010970:	9109      	str	r1, [sp, #36]	@ 0x24
 8010972:	f007 faf3 	bl	8017f5c <uxr_update_output_stream_heartbeat_timestamp>
 8010976:	eb08 0304 	add.w	r3, r8, r4
 801097a:	2800      	cmp	r0, #0
 801097c:	d0da      	beq.n	8010934 <listen_message_reliably+0x34>
 801097e:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8010982:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 8010986:	9304      	str	r3, [sp, #16]
 8010988:	4640      	mov	r0, r8
 801098a:	f000 fd05 	bl	8011398 <uxr_session_header_offset>
 801098e:	3501      	adds	r5, #1
 8010990:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 8010994:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8010998:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 801099c:	2300      	movs	r3, #0
 801099e:	2211      	movs	r2, #17
 80109a0:	9000      	str	r0, [sp, #0]
 80109a2:	a90c      	add	r1, sp, #48	@ 0x30
 80109a4:	4650      	mov	r0, sl
 80109a6:	f7fb fb53 	bl	800c050 <ucdr_init_buffer_origin_offset>
 80109aa:	2300      	movs	r3, #0
 80109ac:	2205      	movs	r2, #5
 80109ae:	210b      	movs	r1, #11
 80109b0:	4650      	mov	r0, sl
 80109b2:	f001 faf3 	bl	8011f9c <uxr_buffer_submessage_header>
 80109b6:	8968      	ldrh	r0, [r5, #10]
 80109b8:	2101      	movs	r1, #1
 80109ba:	f007 fb91 	bl	80180e0 <uxr_seq_num_add>
 80109be:	892b      	ldrh	r3, [r5, #8]
 80109c0:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 80109c4:	4602      	mov	r2, r0
 80109c6:	9b04      	ldr	r3, [sp, #16]
 80109c8:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 80109cc:	a90a      	add	r1, sp, #40	@ 0x28
 80109ce:	4650      	mov	r0, sl
 80109d0:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 80109d4:	f002 fc10 	bl	80131f8 <uxr_serialize_HEARTBEAT_Payload>
 80109d8:	2200      	movs	r2, #0
 80109da:	4611      	mov	r1, r2
 80109dc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80109de:	4640      	mov	r0, r8
 80109e0:	f000 fc84 	bl	80112ec <uxr_stamp_session_header>
 80109e4:	4650      	mov	r0, sl
 80109e6:	f7fb fb71 	bl	800c0cc <ucdr_buffer_length>
 80109ea:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 80109ee:	4602      	mov	r2, r0
 80109f0:	a90c      	add	r1, sp, #48	@ 0x30
 80109f2:	e9d3 0500 	ldrd	r0, r5, [r3]
 80109f6:	4444      	add	r4, r8
 80109f8:	47a8      	blx	r5
 80109fa:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 80109fe:	9903      	ldr	r1, [sp, #12]
 8010a00:	455a      	cmp	r2, fp
 8010a02:	f106 0601 	add.w	r6, r6, #1
 8010a06:	eb73 0101 	sbcs.w	r1, r3, r1
 8010a0a:	b2f0      	uxtb	r0, r6
 8010a0c:	db9c      	blt.n	8010948 <listen_message_reliably+0x48>
 8010a0e:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8010a12:	4283      	cmp	r3, r0
 8010a14:	d89e      	bhi.n	8010954 <listen_message_reliably+0x54>
 8010a16:	9a03      	ldr	r2, [sp, #12]
 8010a18:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010a1c:	429a      	cmp	r2, r3
 8010a1e:	bf08      	it	eq
 8010a20:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 8010a24:	d01e      	beq.n	8010a64 <listen_message_reliably+0x164>
 8010a26:	ebab 0309 	sub.w	r3, fp, r9
 8010a2a:	9905      	ldr	r1, [sp, #20]
 8010a2c:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	bf08      	it	eq
 8010a34:	2301      	moveq	r3, #1
 8010a36:	4299      	cmp	r1, r3
 8010a38:	bfa8      	it	ge
 8010a3a:	4619      	movge	r1, r3
 8010a3c:	6894      	ldr	r4, [r2, #8]
 8010a3e:	6810      	ldr	r0, [r2, #0]
 8010a40:	4689      	mov	r9, r1
 8010a42:	460b      	mov	r3, r1
 8010a44:	aa08      	add	r2, sp, #32
 8010a46:	a907      	add	r1, sp, #28
 8010a48:	47a0      	blx	r4
 8010a4a:	b968      	cbnz	r0, 8010a68 <listen_message_reliably+0x168>
 8010a4c:	9b05      	ldr	r3, [sp, #20]
 8010a4e:	eba3 0309 	sub.w	r3, r3, r9
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	9305      	str	r3, [sp, #20]
 8010a56:	f73f af5c 	bgt.w	8010912 <listen_message_reliably+0x12>
 8010a5a:	4604      	mov	r4, r0
 8010a5c:	4620      	mov	r0, r4
 8010a5e:	b01d      	add	sp, #116	@ 0x74
 8010a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a64:	9b05      	ldr	r3, [sp, #20]
 8010a66:	e7e0      	b.n	8010a2a <listen_message_reliably+0x12a>
 8010a68:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8010a6c:	4604      	mov	r4, r0
 8010a6e:	a80c      	add	r0, sp, #48	@ 0x30
 8010a70:	f7fb fb00 	bl	800c074 <ucdr_init_buffer>
 8010a74:	2500      	movs	r5, #0
 8010a76:	f10d 031a 	add.w	r3, sp, #26
 8010a7a:	aa06      	add	r2, sp, #24
 8010a7c:	a90c      	add	r1, sp, #48	@ 0x30
 8010a7e:	4640      	mov	r0, r8
 8010a80:	f88d 5018 	strb.w	r5, [sp, #24]
 8010a84:	f000 fc46 	bl	8011314 <uxr_read_session_header>
 8010a88:	b918      	cbnz	r0, 8010a92 <listen_message_reliably+0x192>
 8010a8a:	4620      	mov	r0, r4
 8010a8c:	b01d      	add	sp, #116	@ 0x74
 8010a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a92:	4629      	mov	r1, r5
 8010a94:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8010a98:	f001 f972 	bl	8011d80 <uxr_stream_id_from_raw>
 8010a9c:	f3c0 4507 	ubfx	r5, r0, #16, #8
 8010aa0:	2d01      	cmp	r5, #1
 8010aa2:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8010aa6:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8010aaa:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8010aae:	d04b      	beq.n	8010b48 <listen_message_reliably+0x248>
 8010ab0:	2d02      	cmp	r5, #2
 8010ab2:	d00f      	beq.n	8010ad4 <listen_message_reliably+0x1d4>
 8010ab4:	2d00      	cmp	r5, #0
 8010ab6:	d1e8      	bne.n	8010a8a <listen_message_reliably+0x18a>
 8010ab8:	4629      	mov	r1, r5
 8010aba:	4628      	mov	r0, r5
 8010abc:	f001 f960 	bl	8011d80 <uxr_stream_id_from_raw>
 8010ac0:	a90c      	add	r1, sp, #48	@ 0x30
 8010ac2:	4602      	mov	r2, r0
 8010ac4:	4640      	mov	r0, r8
 8010ac6:	920a      	str	r2, [sp, #40]	@ 0x28
 8010ac8:	f7ff fd92 	bl	80105f0 <read_submessage_list>
 8010acc:	4620      	mov	r0, r4
 8010ace:	b01d      	add	sp, #116	@ 0x74
 8010ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ad4:	4631      	mov	r1, r6
 8010ad6:	f108 0008 	add.w	r0, r8, #8
 8010ada:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8010ade:	f001 fa3d 	bl	8011f5c <uxr_get_input_reliable_stream>
 8010ae2:	4607      	mov	r7, r0
 8010ae4:	b338      	cbz	r0, 8010b36 <listen_message_reliably+0x236>
 8010ae6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010ae8:	9203      	str	r2, [sp, #12]
 8010aea:	a80c      	add	r0, sp, #48	@ 0x30
 8010aec:	f7fb faf2 	bl	800c0d4 <ucdr_buffer_remaining>
 8010af0:	4603      	mov	r3, r0
 8010af2:	f10d 0019 	add.w	r0, sp, #25
 8010af6:	9000      	str	r0, [sp, #0]
 8010af8:	9a03      	ldr	r2, [sp, #12]
 8010afa:	4651      	mov	r1, sl
 8010afc:	4638      	mov	r0, r7
 8010afe:	f006 fe43 	bl	8017788 <uxr_receive_reliable_message>
 8010b02:	b1c0      	cbz	r0, 8010b36 <listen_message_reliably+0x236>
 8010b04:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8010b08:	b393      	cbz	r3, 8010b70 <listen_message_reliably+0x270>
 8010b0a:	ad14      	add	r5, sp, #80	@ 0x50
 8010b0c:	f04f 0a02 	mov.w	sl, #2
 8010b10:	e00a      	b.n	8010b28 <listen_message_reliably+0x228>
 8010b12:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 8010b16:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 8010b1a:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 8010b1e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010b20:	4629      	mov	r1, r5
 8010b22:	4640      	mov	r0, r8
 8010b24:	f7ff fd64 	bl	80105f0 <read_submessage_list>
 8010b28:	2204      	movs	r2, #4
 8010b2a:	4629      	mov	r1, r5
 8010b2c:	4638      	mov	r0, r7
 8010b2e:	f006 feab 	bl	8017888 <uxr_next_input_reliable_buffer_available>
 8010b32:	2800      	cmp	r0, #0
 8010b34:	d1ed      	bne.n	8010b12 <listen_message_reliably+0x212>
 8010b36:	4640      	mov	r0, r8
 8010b38:	4632      	mov	r2, r6
 8010b3a:	4649      	mov	r1, r9
 8010b3c:	f7ff fbc0 	bl	80102c0 <write_submessage_acknack.isra.0>
 8010b40:	4620      	mov	r0, r4
 8010b42:	b01d      	add	sp, #116	@ 0x74
 8010b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b48:	4631      	mov	r1, r6
 8010b4a:	f108 0008 	add.w	r0, r8, #8
 8010b4e:	f001 f9fb 	bl	8011f48 <uxr_get_input_best_effort_stream>
 8010b52:	2800      	cmp	r0, #0
 8010b54:	d099      	beq.n	8010a8a <listen_message_reliably+0x18a>
 8010b56:	4651      	mov	r1, sl
 8010b58:	f006 fd82 	bl	8017660 <uxr_receive_best_effort_message>
 8010b5c:	2800      	cmp	r0, #0
 8010b5e:	d094      	beq.n	8010a8a <listen_message_reliably+0x18a>
 8010b60:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8010b64:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010b66:	a90c      	add	r1, sp, #48	@ 0x30
 8010b68:	4640      	mov	r0, r8
 8010b6a:	f7ff fd41 	bl	80105f0 <read_submessage_list>
 8010b6e:	e78c      	b.n	8010a8a <listen_message_reliably+0x18a>
 8010b70:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8010b74:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010b76:	a90c      	add	r1, sp, #48	@ 0x30
 8010b78:	4640      	mov	r0, r8
 8010b7a:	f7ff fd39 	bl	80105f0 <read_submessage_list>
 8010b7e:	e7c4      	b.n	8010b0a <listen_message_reliably+0x20a>

08010b80 <uxr_run_session_timeout>:
 8010b80:	b570      	push	{r4, r5, r6, lr}
 8010b82:	4604      	mov	r4, r0
 8010b84:	460d      	mov	r5, r1
 8010b86:	f001 fa4f 	bl	8012028 <uxr_millis>
 8010b8a:	4606      	mov	r6, r0
 8010b8c:	4620      	mov	r0, r4
 8010b8e:	f7ff fc71 	bl	8010474 <uxr_flash_output_streams>
 8010b92:	4629      	mov	r1, r5
 8010b94:	4620      	mov	r0, r4
 8010b96:	f7ff feb3 	bl	8010900 <listen_message_reliably>
 8010b9a:	f001 fa45 	bl	8012028 <uxr_millis>
 8010b9e:	1b83      	subs	r3, r0, r6
 8010ba0:	1ae9      	subs	r1, r5, r3
 8010ba2:	2900      	cmp	r1, #0
 8010ba4:	dcf6      	bgt.n	8010b94 <uxr_run_session_timeout+0x14>
 8010ba6:	f104 0008 	add.w	r0, r4, #8
 8010baa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010bae:	f001 b9df 	b.w	8011f70 <uxr_output_streams_confirmed>
 8010bb2:	bf00      	nop

08010bb4 <uxr_run_session_until_data>:
 8010bb4:	b570      	push	{r4, r5, r6, lr}
 8010bb6:	4604      	mov	r4, r0
 8010bb8:	460d      	mov	r5, r1
 8010bba:	f001 fa35 	bl	8012028 <uxr_millis>
 8010bbe:	4606      	mov	r6, r0
 8010bc0:	4620      	mov	r0, r4
 8010bc2:	f7ff fc57 	bl	8010474 <uxr_flash_output_streams>
 8010bc6:	2300      	movs	r3, #0
 8010bc8:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8010bcc:	4629      	mov	r1, r5
 8010bce:	e005      	b.n	8010bdc <uxr_run_session_until_data+0x28>
 8010bd0:	f001 fa2a 	bl	8012028 <uxr_millis>
 8010bd4:	1b83      	subs	r3, r0, r6
 8010bd6:	1ae9      	subs	r1, r5, r3
 8010bd8:	2900      	cmp	r1, #0
 8010bda:	dd07      	ble.n	8010bec <uxr_run_session_until_data+0x38>
 8010bdc:	4620      	mov	r0, r4
 8010bde:	f7ff fe8f 	bl	8010900 <listen_message_reliably>
 8010be2:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8010be6:	2800      	cmp	r0, #0
 8010be8:	d0f2      	beq.n	8010bd0 <uxr_run_session_until_data+0x1c>
 8010bea:	bd70      	pop	{r4, r5, r6, pc}
 8010bec:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8010bf0:	bd70      	pop	{r4, r5, r6, pc}
 8010bf2:	bf00      	nop

08010bf4 <uxr_run_session_until_confirm_delivery>:
 8010bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bf8:	4606      	mov	r6, r0
 8010bfa:	460d      	mov	r5, r1
 8010bfc:	f001 fa14 	bl	8012028 <uxr_millis>
 8010c00:	4607      	mov	r7, r0
 8010c02:	4630      	mov	r0, r6
 8010c04:	f7ff fc36 	bl	8010474 <uxr_flash_output_streams>
 8010c08:	2d00      	cmp	r5, #0
 8010c0a:	f106 0808 	add.w	r8, r6, #8
 8010c0e:	bfa8      	it	ge
 8010c10:	462c      	movge	r4, r5
 8010c12:	da07      	bge.n	8010c24 <uxr_run_session_until_confirm_delivery+0x30>
 8010c14:	e00e      	b.n	8010c34 <uxr_run_session_until_confirm_delivery+0x40>
 8010c16:	f7ff fe73 	bl	8010900 <listen_message_reliably>
 8010c1a:	f001 fa05 	bl	8012028 <uxr_millis>
 8010c1e:	1bc3      	subs	r3, r0, r7
 8010c20:	1aec      	subs	r4, r5, r3
 8010c22:	d407      	bmi.n	8010c34 <uxr_run_session_until_confirm_delivery+0x40>
 8010c24:	4640      	mov	r0, r8
 8010c26:	f001 f9a3 	bl	8011f70 <uxr_output_streams_confirmed>
 8010c2a:	4603      	mov	r3, r0
 8010c2c:	4621      	mov	r1, r4
 8010c2e:	4630      	mov	r0, r6
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d0f0      	beq.n	8010c16 <uxr_run_session_until_confirm_delivery+0x22>
 8010c34:	4640      	mov	r0, r8
 8010c36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010c3a:	f001 b999 	b.w	8011f70 <uxr_output_streams_confirmed>
 8010c3e:	bf00      	nop

08010c40 <uxr_run_session_until_all_status>:
 8010c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c44:	9c08      	ldr	r4, [sp, #32]
 8010c46:	4606      	mov	r6, r0
 8010c48:	460f      	mov	r7, r1
 8010c4a:	4691      	mov	r9, r2
 8010c4c:	461d      	mov	r5, r3
 8010c4e:	f7ff fc11 	bl	8010474 <uxr_flash_output_streams>
 8010c52:	b124      	cbz	r4, 8010c5e <uxr_run_session_until_all_status+0x1e>
 8010c54:	4622      	mov	r2, r4
 8010c56:	21ff      	movs	r1, #255	@ 0xff
 8010c58:	4628      	mov	r0, r5
 8010c5a:	f008 fb59 	bl	8019310 <memset>
 8010c5e:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 8010c62:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8010c64:	f001 f9e0 	bl	8012028 <uxr_millis>
 8010c68:	3d01      	subs	r5, #1
 8010c6a:	f1a9 0902 	sub.w	r9, r9, #2
 8010c6e:	4680      	mov	r8, r0
 8010c70:	4639      	mov	r1, r7
 8010c72:	4630      	mov	r0, r6
 8010c74:	f7ff fe44 	bl	8010900 <listen_message_reliably>
 8010c78:	f001 f9d6 	bl	8012028 <uxr_millis>
 8010c7c:	eba0 0008 	sub.w	r0, r0, r8
 8010c80:	1a39      	subs	r1, r7, r0
 8010c82:	b344      	cbz	r4, 8010cd6 <uxr_run_session_until_all_status+0x96>
 8010c84:	4628      	mov	r0, r5
 8010c86:	46ac      	mov	ip, r5
 8010c88:	2301      	movs	r3, #1
 8010c8a:	e002      	b.n	8010c92 <uxr_run_session_until_all_status+0x52>
 8010c8c:	42a3      	cmp	r3, r4
 8010c8e:	d20d      	bcs.n	8010cac <uxr_run_session_until_all_status+0x6c>
 8010c90:	3301      	adds	r3, #1
 8010c92:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 8010c96:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8010c9a:	d1f7      	bne.n	8010c8c <uxr_run_session_until_all_status+0x4c>
 8010c9c:	42a3      	cmp	r3, r4
 8010c9e:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 8010ca2:	d213      	bcs.n	8010ccc <uxr_run_session_until_all_status+0x8c>
 8010ca4:	2a00      	cmp	r2, #0
 8010ca6:	d0f3      	beq.n	8010c90 <uxr_run_session_until_all_status+0x50>
 8010ca8:	2900      	cmp	r1, #0
 8010caa:	dce2      	bgt.n	8010c72 <uxr_run_session_until_all_status+0x32>
 8010cac:	2300      	movs	r3, #0
 8010cae:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8010cb0:	442c      	add	r4, r5
 8010cb2:	e001      	b.n	8010cb8 <uxr_run_session_until_all_status+0x78>
 8010cb4:	2b01      	cmp	r3, #1
 8010cb6:	d812      	bhi.n	8010cde <uxr_run_session_until_all_status+0x9e>
 8010cb8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8010cbc:	4284      	cmp	r4, r0
 8010cbe:	d1f9      	bne.n	8010cb4 <uxr_run_session_until_all_status+0x74>
 8010cc0:	2b01      	cmp	r3, #1
 8010cc2:	bf8c      	ite	hi
 8010cc4:	2000      	movhi	r0, #0
 8010cc6:	2001      	movls	r0, #1
 8010cc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ccc:	2900      	cmp	r1, #0
 8010cce:	dded      	ble.n	8010cac <uxr_run_session_until_all_status+0x6c>
 8010cd0:	2a00      	cmp	r2, #0
 8010cd2:	d1ce      	bne.n	8010c72 <uxr_run_session_until_all_status+0x32>
 8010cd4:	e7ea      	b.n	8010cac <uxr_run_session_until_all_status+0x6c>
 8010cd6:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8010cd8:	2001      	movs	r0, #1
 8010cda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010cde:	2000      	movs	r0, #0
 8010ce0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ce4:	0000      	movs	r0, r0
	...

08010ce8 <uxr_sync_session>:
 8010ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010cea:	b093      	sub	sp, #76	@ 0x4c
 8010cec:	4604      	mov	r4, r0
 8010cee:	460d      	mov	r5, r1
 8010cf0:	f000 fb52 	bl	8011398 <uxr_session_header_offset>
 8010cf4:	2214      	movs	r2, #20
 8010cf6:	eb0d 0102 	add.w	r1, sp, r2
 8010cfa:	9000      	str	r0, [sp, #0]
 8010cfc:	2300      	movs	r3, #0
 8010cfe:	a80a      	add	r0, sp, #40	@ 0x28
 8010d00:	f7fb f9a6 	bl	800c050 <ucdr_init_buffer_origin_offset>
 8010d04:	2300      	movs	r3, #0
 8010d06:	2208      	movs	r2, #8
 8010d08:	210e      	movs	r1, #14
 8010d0a:	a80a      	add	r0, sp, #40	@ 0x28
 8010d0c:	f001 f946 	bl	8011f9c <uxr_buffer_submessage_header>
 8010d10:	f001 f9a4 	bl	801205c <uxr_nanos>
 8010d14:	a31c      	add	r3, pc, #112	@ (adr r3, 8010d88 <uxr_sync_session+0xa0>)
 8010d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d1a:	460e      	mov	r6, r1
 8010d1c:	4607      	mov	r7, r0
 8010d1e:	f7ef ff53 	bl	8000bc8 <__aeabi_ldivmod>
 8010d22:	4631      	mov	r1, r6
 8010d24:	9003      	str	r0, [sp, #12]
 8010d26:	a318      	add	r3, pc, #96	@ (adr r3, 8010d88 <uxr_sync_session+0xa0>)
 8010d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d2c:	4638      	mov	r0, r7
 8010d2e:	f7ef ff4b 	bl	8000bc8 <__aeabi_ldivmod>
 8010d32:	a903      	add	r1, sp, #12
 8010d34:	a80a      	add	r0, sp, #40	@ 0x28
 8010d36:	9204      	str	r2, [sp, #16]
 8010d38:	f002 fa84 	bl	8013244 <uxr_serialize_TIMESTAMP_Payload>
 8010d3c:	2200      	movs	r2, #0
 8010d3e:	4611      	mov	r1, r2
 8010d40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010d42:	4620      	mov	r0, r4
 8010d44:	f000 fad2 	bl	80112ec <uxr_stamp_session_header>
 8010d48:	a80a      	add	r0, sp, #40	@ 0x28
 8010d4a:	f7fb f9bf 	bl	800c0cc <ucdr_buffer_length>
 8010d4e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010d50:	4602      	mov	r2, r0
 8010d52:	a905      	add	r1, sp, #20
 8010d54:	e9d3 0600 	ldrd	r0, r6, [r3]
 8010d58:	47b0      	blx	r6
 8010d5a:	f001 f965 	bl	8012028 <uxr_millis>
 8010d5e:	2300      	movs	r3, #0
 8010d60:	4606      	mov	r6, r0
 8010d62:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 8010d66:	4629      	mov	r1, r5
 8010d68:	e000      	b.n	8010d6c <uxr_sync_session+0x84>
 8010d6a:	b950      	cbnz	r0, 8010d82 <uxr_sync_session+0x9a>
 8010d6c:	4620      	mov	r0, r4
 8010d6e:	f7ff fdc7 	bl	8010900 <listen_message_reliably>
 8010d72:	f001 f959 	bl	8012028 <uxr_millis>
 8010d76:	1b83      	subs	r3, r0, r6
 8010d78:	1ae9      	subs	r1, r5, r3
 8010d7a:	2900      	cmp	r1, #0
 8010d7c:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 8010d80:	dcf3      	bgt.n	8010d6a <uxr_sync_session+0x82>
 8010d82:	b013      	add	sp, #76	@ 0x4c
 8010d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d86:	bf00      	nop
 8010d88:	3b9aca00 	.word	0x3b9aca00
 8010d8c:	00000000 	.word	0x00000000

08010d90 <wait_session_status>:
 8010d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d94:	4604      	mov	r4, r0
 8010d96:	b09d      	sub	sp, #116	@ 0x74
 8010d98:	20ff      	movs	r0, #255	@ 0xff
 8010d9a:	7160      	strb	r0, [r4, #5]
 8010d9c:	9303      	str	r3, [sp, #12]
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	f000 80b6 	beq.w	8010f10 <wait_session_status+0x180>
 8010da4:	468a      	mov	sl, r1
 8010da6:	4691      	mov	r9, r2
 8010da8:	f04f 0b00 	mov.w	fp, #0
 8010dac:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010dae:	464a      	mov	r2, r9
 8010db0:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010db4:	4651      	mov	r1, sl
 8010db6:	47a8      	blx	r5
 8010db8:	f001 f936 	bl	8012028 <uxr_millis>
 8010dbc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010dc0:	4605      	mov	r5, r0
 8010dc2:	e009      	b.n	8010dd8 <wait_session_status+0x48>
 8010dc4:	f001 f930 	bl	8012028 <uxr_millis>
 8010dc8:	1b40      	subs	r0, r0, r5
 8010dca:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	dd40      	ble.n	8010e54 <wait_session_status+0xc4>
 8010dd2:	7960      	ldrb	r0, [r4, #5]
 8010dd4:	28ff      	cmp	r0, #255	@ 0xff
 8010dd6:	d145      	bne.n	8010e64 <wait_session_status+0xd4>
 8010dd8:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8010dda:	a908      	add	r1, sp, #32
 8010ddc:	6896      	ldr	r6, [r2, #8]
 8010dde:	6810      	ldr	r0, [r2, #0]
 8010de0:	aa09      	add	r2, sp, #36	@ 0x24
 8010de2:	47b0      	blx	r6
 8010de4:	2800      	cmp	r0, #0
 8010de6:	d0ed      	beq.n	8010dc4 <wait_session_status+0x34>
 8010de8:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8010dec:	a80c      	add	r0, sp, #48	@ 0x30
 8010dee:	f7fb f941 	bl	800c074 <ucdr_init_buffer>
 8010df2:	2600      	movs	r6, #0
 8010df4:	f10d 031e 	add.w	r3, sp, #30
 8010df8:	aa07      	add	r2, sp, #28
 8010dfa:	a90c      	add	r1, sp, #48	@ 0x30
 8010dfc:	4620      	mov	r0, r4
 8010dfe:	f88d 601c 	strb.w	r6, [sp, #28]
 8010e02:	f000 fa87 	bl	8011314 <uxr_read_session_header>
 8010e06:	2800      	cmp	r0, #0
 8010e08:	d0dc      	beq.n	8010dc4 <wait_session_status+0x34>
 8010e0a:	4631      	mov	r1, r6
 8010e0c:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8010e10:	f000 ffb6 	bl	8011d80 <uxr_stream_id_from_raw>
 8010e14:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8010e18:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8010e1c:	9302      	str	r3, [sp, #8]
 8010e1e:	2f01      	cmp	r7, #1
 8010e20:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 8010e24:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8010e28:	d05c      	beq.n	8010ee4 <wait_session_status+0x154>
 8010e2a:	2f02      	cmp	r7, #2
 8010e2c:	d020      	beq.n	8010e70 <wait_session_status+0xe0>
 8010e2e:	2f00      	cmp	r7, #0
 8010e30:	d1c8      	bne.n	8010dc4 <wait_session_status+0x34>
 8010e32:	4639      	mov	r1, r7
 8010e34:	4638      	mov	r0, r7
 8010e36:	f000 ffa3 	bl	8011d80 <uxr_stream_id_from_raw>
 8010e3a:	a90c      	add	r1, sp, #48	@ 0x30
 8010e3c:	4602      	mov	r2, r0
 8010e3e:	900b      	str	r0, [sp, #44]	@ 0x2c
 8010e40:	4620      	mov	r0, r4
 8010e42:	f7ff fbd5 	bl	80105f0 <read_submessage_list>
 8010e46:	f001 f8ef 	bl	8012028 <uxr_millis>
 8010e4a:	1b40      	subs	r0, r0, r5
 8010e4c:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	dcbe      	bgt.n	8010dd2 <wait_session_status+0x42>
 8010e54:	9b03      	ldr	r3, [sp, #12]
 8010e56:	7960      	ldrb	r0, [r4, #5]
 8010e58:	f10b 0b01 	add.w	fp, fp, #1
 8010e5c:	455b      	cmp	r3, fp
 8010e5e:	d001      	beq.n	8010e64 <wait_session_status+0xd4>
 8010e60:	28ff      	cmp	r0, #255	@ 0xff
 8010e62:	d0a3      	beq.n	8010dac <wait_session_status+0x1c>
 8010e64:	38ff      	subs	r0, #255	@ 0xff
 8010e66:	bf18      	it	ne
 8010e68:	2001      	movne	r0, #1
 8010e6a:	b01d      	add	sp, #116	@ 0x74
 8010e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e70:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8010e74:	9304      	str	r3, [sp, #16]
 8010e76:	4631      	mov	r1, r6
 8010e78:	f104 0008 	add.w	r0, r4, #8
 8010e7c:	f001 f86e 	bl	8011f5c <uxr_get_input_reliable_stream>
 8010e80:	4680      	mov	r8, r0
 8010e82:	b348      	cbz	r0, 8010ed8 <wait_session_status+0x148>
 8010e84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010e86:	9205      	str	r2, [sp, #20]
 8010e88:	a80c      	add	r0, sp, #48	@ 0x30
 8010e8a:	f7fb f923 	bl	800c0d4 <ucdr_buffer_remaining>
 8010e8e:	4603      	mov	r3, r0
 8010e90:	f10d 001d 	add.w	r0, sp, #29
 8010e94:	9000      	str	r0, [sp, #0]
 8010e96:	9a05      	ldr	r2, [sp, #20]
 8010e98:	9902      	ldr	r1, [sp, #8]
 8010e9a:	4640      	mov	r0, r8
 8010e9c:	f006 fc74 	bl	8017788 <uxr_receive_reliable_message>
 8010ea0:	b1d0      	cbz	r0, 8010ed8 <wait_session_status+0x148>
 8010ea2:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d03a      	beq.n	8010f20 <wait_session_status+0x190>
 8010eaa:	9f04      	ldr	r7, [sp, #16]
 8010eac:	e00a      	b.n	8010ec4 <wait_session_status+0x134>
 8010eae:	f04f 0302 	mov.w	r3, #2
 8010eb2:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 8010eb6:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8010eba:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 8010ebe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010ec0:	f7ff fb96 	bl	80105f0 <read_submessage_list>
 8010ec4:	a914      	add	r1, sp, #80	@ 0x50
 8010ec6:	2204      	movs	r2, #4
 8010ec8:	4640      	mov	r0, r8
 8010eca:	f006 fcdd 	bl	8017888 <uxr_next_input_reliable_buffer_available>
 8010ece:	4603      	mov	r3, r0
 8010ed0:	a914      	add	r1, sp, #80	@ 0x50
 8010ed2:	4620      	mov	r0, r4
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d1ea      	bne.n	8010eae <wait_session_status+0x11e>
 8010ed8:	9904      	ldr	r1, [sp, #16]
 8010eda:	4632      	mov	r2, r6
 8010edc:	4620      	mov	r0, r4
 8010ede:	f7ff f9ef 	bl	80102c0 <write_submessage_acknack.isra.0>
 8010ee2:	e76f      	b.n	8010dc4 <wait_session_status+0x34>
 8010ee4:	4631      	mov	r1, r6
 8010ee6:	f104 0008 	add.w	r0, r4, #8
 8010eea:	f001 f82d 	bl	8011f48 <uxr_get_input_best_effort_stream>
 8010eee:	2800      	cmp	r0, #0
 8010ef0:	f43f af68 	beq.w	8010dc4 <wait_session_status+0x34>
 8010ef4:	9902      	ldr	r1, [sp, #8]
 8010ef6:	f006 fbb3 	bl	8017660 <uxr_receive_best_effort_message>
 8010efa:	2800      	cmp	r0, #0
 8010efc:	f43f af62 	beq.w	8010dc4 <wait_session_status+0x34>
 8010f00:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8010f04:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010f06:	a90c      	add	r1, sp, #48	@ 0x30
 8010f08:	4620      	mov	r0, r4
 8010f0a:	f7ff fb71 	bl	80105f0 <read_submessage_list>
 8010f0e:	e759      	b.n	8010dc4 <wait_session_status+0x34>
 8010f10:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010f12:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010f16:	47a0      	blx	r4
 8010f18:	2001      	movs	r0, #1
 8010f1a:	b01d      	add	sp, #116	@ 0x74
 8010f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f20:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8010f24:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010f26:	a90c      	add	r1, sp, #48	@ 0x30
 8010f28:	4620      	mov	r0, r4
 8010f2a:	f7ff fb61 	bl	80105f0 <read_submessage_list>
 8010f2e:	e7bc      	b.n	8010eaa <wait_session_status+0x11a>

08010f30 <uxr_delete_session_retries>:
 8010f30:	b530      	push	{r4, r5, lr}
 8010f32:	b08f      	sub	sp, #60	@ 0x3c
 8010f34:	4604      	mov	r4, r0
 8010f36:	460d      	mov	r5, r1
 8010f38:	f000 fa2e 	bl	8011398 <uxr_session_header_offset>
 8010f3c:	2300      	movs	r3, #0
 8010f3e:	2210      	movs	r2, #16
 8010f40:	9000      	str	r0, [sp, #0]
 8010f42:	a902      	add	r1, sp, #8
 8010f44:	a806      	add	r0, sp, #24
 8010f46:	f7fb f883 	bl	800c050 <ucdr_init_buffer_origin_offset>
 8010f4a:	a906      	add	r1, sp, #24
 8010f4c:	4620      	mov	r0, r4
 8010f4e:	f000 f973 	bl	8011238 <uxr_buffer_delete_session>
 8010f52:	2200      	movs	r2, #0
 8010f54:	4611      	mov	r1, r2
 8010f56:	9b06      	ldr	r3, [sp, #24]
 8010f58:	4620      	mov	r0, r4
 8010f5a:	f000 f9c7 	bl	80112ec <uxr_stamp_session_header>
 8010f5e:	a806      	add	r0, sp, #24
 8010f60:	f7fb f8b4 	bl	800c0cc <ucdr_buffer_length>
 8010f64:	462b      	mov	r3, r5
 8010f66:	4602      	mov	r2, r0
 8010f68:	a902      	add	r1, sp, #8
 8010f6a:	4620      	mov	r0, r4
 8010f6c:	f7ff ff10 	bl	8010d90 <wait_session_status>
 8010f70:	b118      	cbz	r0, 8010f7a <uxr_delete_session_retries+0x4a>
 8010f72:	7960      	ldrb	r0, [r4, #5]
 8010f74:	fab0 f080 	clz	r0, r0
 8010f78:	0940      	lsrs	r0, r0, #5
 8010f7a:	b00f      	add	sp, #60	@ 0x3c
 8010f7c:	bd30      	pop	{r4, r5, pc}
 8010f7e:	bf00      	nop

08010f80 <uxr_create_session>:
 8010f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f84:	f100 0b08 	add.w	fp, r0, #8
 8010f88:	b0ab      	sub	sp, #172	@ 0xac
 8010f8a:	4604      	mov	r4, r0
 8010f8c:	4658      	mov	r0, fp
 8010f8e:	f000 ff2b 	bl	8011de8 <uxr_reset_stream_storage>
 8010f92:	4620      	mov	r0, r4
 8010f94:	f000 fa00 	bl	8011398 <uxr_session_header_offset>
 8010f98:	2300      	movs	r3, #0
 8010f9a:	9000      	str	r0, [sp, #0]
 8010f9c:	221c      	movs	r2, #28
 8010f9e:	a90b      	add	r1, sp, #44	@ 0x2c
 8010fa0:	a812      	add	r0, sp, #72	@ 0x48
 8010fa2:	f7fb f855 	bl	800c050 <ucdr_init_buffer_origin_offset>
 8010fa6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010fa8:	8a1a      	ldrh	r2, [r3, #16]
 8010faa:	3a04      	subs	r2, #4
 8010fac:	b292      	uxth	r2, r2
 8010fae:	a912      	add	r1, sp, #72	@ 0x48
 8010fb0:	4620      	mov	r0, r4
 8010fb2:	f000 f917 	bl	80111e4 <uxr_buffer_create_session>
 8010fb6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8010fb8:	4620      	mov	r0, r4
 8010fba:	f000 f983 	bl	80112c4 <uxr_stamp_create_session_header>
 8010fbe:	a812      	add	r0, sp, #72	@ 0x48
 8010fc0:	f7fb f884 	bl	800c0cc <ucdr_buffer_length>
 8010fc4:	23ff      	movs	r3, #255	@ 0xff
 8010fc6:	7163      	strb	r3, [r4, #5]
 8010fc8:	230a      	movs	r3, #10
 8010fca:	46da      	mov	sl, fp
 8010fcc:	9303      	str	r3, [sp, #12]
 8010fce:	4683      	mov	fp, r0
 8010fd0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010fd2:	465a      	mov	r2, fp
 8010fd4:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010fd8:	a90b      	add	r1, sp, #44	@ 0x2c
 8010fda:	47a8      	blx	r5
 8010fdc:	f001 f824 	bl	8012028 <uxr_millis>
 8010fe0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010fe4:	4605      	mov	r5, r0
 8010fe6:	e009      	b.n	8010ffc <uxr_create_session+0x7c>
 8010fe8:	f001 f81e 	bl	8012028 <uxr_millis>
 8010fec:	1b40      	subs	r0, r0, r5
 8010fee:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	7962      	ldrb	r2, [r4, #5]
 8010ff6:	dd38      	ble.n	801106a <uxr_create_session+0xea>
 8010ff8:	2aff      	cmp	r2, #255	@ 0xff
 8010ffa:	d13c      	bne.n	8011076 <uxr_create_session+0xf6>
 8010ffc:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8010ffe:	a907      	add	r1, sp, #28
 8011000:	6896      	ldr	r6, [r2, #8]
 8011002:	6810      	ldr	r0, [r2, #0]
 8011004:	aa08      	add	r2, sp, #32
 8011006:	47b0      	blx	r6
 8011008:	2800      	cmp	r0, #0
 801100a:	d0ed      	beq.n	8010fe8 <uxr_create_session+0x68>
 801100c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8011010:	a81a      	add	r0, sp, #104	@ 0x68
 8011012:	f7fb f82f 	bl	800c074 <ucdr_init_buffer>
 8011016:	2600      	movs	r6, #0
 8011018:	f10d 031a 	add.w	r3, sp, #26
 801101c:	aa06      	add	r2, sp, #24
 801101e:	a91a      	add	r1, sp, #104	@ 0x68
 8011020:	4620      	mov	r0, r4
 8011022:	f88d 6018 	strb.w	r6, [sp, #24]
 8011026:	f000 f975 	bl	8011314 <uxr_read_session_header>
 801102a:	2800      	cmp	r0, #0
 801102c:	d0dc      	beq.n	8010fe8 <uxr_create_session+0x68>
 801102e:	4631      	mov	r1, r6
 8011030:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8011034:	f000 fea4 	bl	8011d80 <uxr_stream_id_from_raw>
 8011038:	f3c0 4607 	ubfx	r6, r0, #16, #8
 801103c:	2e01      	cmp	r6, #1
 801103e:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8011042:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 8011046:	f3c0 2707 	ubfx	r7, r0, #8, #8
 801104a:	d053      	beq.n	80110f4 <uxr_create_session+0x174>
 801104c:	2e02      	cmp	r6, #2
 801104e:	d018      	beq.n	8011082 <uxr_create_session+0x102>
 8011050:	2e00      	cmp	r6, #0
 8011052:	d1c9      	bne.n	8010fe8 <uxr_create_session+0x68>
 8011054:	4631      	mov	r1, r6
 8011056:	4630      	mov	r0, r6
 8011058:	f000 fe92 	bl	8011d80 <uxr_stream_id_from_raw>
 801105c:	a91a      	add	r1, sp, #104	@ 0x68
 801105e:	4602      	mov	r2, r0
 8011060:	900a      	str	r0, [sp, #40]	@ 0x28
 8011062:	4620      	mov	r0, r4
 8011064:	f7ff fac4 	bl	80105f0 <read_submessage_list>
 8011068:	e7be      	b.n	8010fe8 <uxr_create_session+0x68>
 801106a:	9b03      	ldr	r3, [sp, #12]
 801106c:	3b01      	subs	r3, #1
 801106e:	9303      	str	r3, [sp, #12]
 8011070:	d001      	beq.n	8011076 <uxr_create_session+0xf6>
 8011072:	2aff      	cmp	r2, #255	@ 0xff
 8011074:	d0ac      	beq.n	8010fd0 <uxr_create_session+0x50>
 8011076:	2a00      	cmp	r2, #0
 8011078:	d051      	beq.n	801111e <uxr_create_session+0x19e>
 801107a:	2000      	movs	r0, #0
 801107c:	b02b      	add	sp, #172	@ 0xac
 801107e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011082:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8011086:	9304      	str	r3, [sp, #16]
 8011088:	4639      	mov	r1, r7
 801108a:	4650      	mov	r0, sl
 801108c:	f000 ff66 	bl	8011f5c <uxr_get_input_reliable_stream>
 8011090:	4680      	mov	r8, r0
 8011092:	b348      	cbz	r0, 80110e8 <uxr_create_session+0x168>
 8011094:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8011096:	9205      	str	r2, [sp, #20]
 8011098:	a81a      	add	r0, sp, #104	@ 0x68
 801109a:	f7fb f81b 	bl	800c0d4 <ucdr_buffer_remaining>
 801109e:	4603      	mov	r3, r0
 80110a0:	f10d 0019 	add.w	r0, sp, #25
 80110a4:	9000      	str	r0, [sp, #0]
 80110a6:	9a05      	ldr	r2, [sp, #20]
 80110a8:	4649      	mov	r1, r9
 80110aa:	4640      	mov	r0, r8
 80110ac:	f006 fb6c 	bl	8017788 <uxr_receive_reliable_message>
 80110b0:	b1d0      	cbz	r0, 80110e8 <uxr_create_session+0x168>
 80110b2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d038      	beq.n	801112c <uxr_create_session+0x1ac>
 80110ba:	9e04      	ldr	r6, [sp, #16]
 80110bc:	e00a      	b.n	80110d4 <uxr_create_session+0x154>
 80110be:	f04f 0302 	mov.w	r3, #2
 80110c2:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 80110c6:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 80110ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80110ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80110d0:	f7ff fa8e 	bl	80105f0 <read_submessage_list>
 80110d4:	a922      	add	r1, sp, #136	@ 0x88
 80110d6:	2204      	movs	r2, #4
 80110d8:	4640      	mov	r0, r8
 80110da:	f006 fbd5 	bl	8017888 <uxr_next_input_reliable_buffer_available>
 80110de:	4603      	mov	r3, r0
 80110e0:	a922      	add	r1, sp, #136	@ 0x88
 80110e2:	4620      	mov	r0, r4
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d1ea      	bne.n	80110be <uxr_create_session+0x13e>
 80110e8:	9904      	ldr	r1, [sp, #16]
 80110ea:	463a      	mov	r2, r7
 80110ec:	4620      	mov	r0, r4
 80110ee:	f7ff f8e7 	bl	80102c0 <write_submessage_acknack.isra.0>
 80110f2:	e779      	b.n	8010fe8 <uxr_create_session+0x68>
 80110f4:	4639      	mov	r1, r7
 80110f6:	4650      	mov	r0, sl
 80110f8:	f000 ff26 	bl	8011f48 <uxr_get_input_best_effort_stream>
 80110fc:	2800      	cmp	r0, #0
 80110fe:	f43f af73 	beq.w	8010fe8 <uxr_create_session+0x68>
 8011102:	4649      	mov	r1, r9
 8011104:	f006 faac 	bl	8017660 <uxr_receive_best_effort_message>
 8011108:	2800      	cmp	r0, #0
 801110a:	f43f af6d 	beq.w	8010fe8 <uxr_create_session+0x68>
 801110e:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8011112:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011114:	a91a      	add	r1, sp, #104	@ 0x68
 8011116:	4620      	mov	r0, r4
 8011118:	f7ff fa6a 	bl	80105f0 <read_submessage_list>
 801111c:	e764      	b.n	8010fe8 <uxr_create_session+0x68>
 801111e:	4650      	mov	r0, sl
 8011120:	f000 fe62 	bl	8011de8 <uxr_reset_stream_storage>
 8011124:	2001      	movs	r0, #1
 8011126:	b02b      	add	sp, #172	@ 0xac
 8011128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801112c:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8011130:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011132:	a91a      	add	r1, sp, #104	@ 0x68
 8011134:	4620      	mov	r0, r4
 8011136:	f7ff fa5b 	bl	80105f0 <read_submessage_list>
 801113a:	e7be      	b.n	80110ba <uxr_create_session+0x13a>

0801113c <uxr_prepare_stream_to_write_submessage>:
 801113c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011140:	b082      	sub	sp, #8
 8011142:	4682      	mov	sl, r0
 8011144:	4610      	mov	r0, r2
 8011146:	4615      	mov	r5, r2
 8011148:	461e      	mov	r6, r3
 801114a:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 801114e:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 8011152:	9101      	str	r1, [sp, #4]
 8011154:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8011158:	f000 ff60 	bl	801201c <uxr_submessage_padding>
 801115c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011160:	f105 0904 	add.w	r9, r5, #4
 8011164:	2b01      	cmp	r3, #1
 8011166:	4481      	add	r9, r0
 8011168:	d01d      	beq.n	80111a6 <uxr_prepare_stream_to_write_submessage+0x6a>
 801116a:	2b02      	cmp	r3, #2
 801116c:	d116      	bne.n	801119c <uxr_prepare_stream_to_write_submessage+0x60>
 801116e:	4621      	mov	r1, r4
 8011170:	f10a 0008 	add.w	r0, sl, #8
 8011174:	f000 fede 	bl	8011f34 <uxr_get_output_reliable_stream>
 8011178:	4604      	mov	r4, r0
 801117a:	b158      	cbz	r0, 8011194 <uxr_prepare_stream_to_write_submessage+0x58>
 801117c:	4649      	mov	r1, r9
 801117e:	4632      	mov	r2, r6
 8011180:	f006 fd3e 	bl	8017c00 <uxr_prepare_reliable_buffer_to_write>
 8011184:	4604      	mov	r4, r0
 8011186:	b12c      	cbz	r4, 8011194 <uxr_prepare_stream_to_write_submessage+0x58>
 8011188:	4643      	mov	r3, r8
 801118a:	b2aa      	uxth	r2, r5
 801118c:	4639      	mov	r1, r7
 801118e:	4630      	mov	r0, r6
 8011190:	f000 ff04 	bl	8011f9c <uxr_buffer_submessage_header>
 8011194:	4620      	mov	r0, r4
 8011196:	b002      	add	sp, #8
 8011198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801119c:	2400      	movs	r4, #0
 801119e:	4620      	mov	r0, r4
 80111a0:	b002      	add	sp, #8
 80111a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111a6:	4621      	mov	r1, r4
 80111a8:	f10a 0008 	add.w	r0, sl, #8
 80111ac:	f000 feba 	bl	8011f24 <uxr_get_output_best_effort_stream>
 80111b0:	4604      	mov	r4, r0
 80111b2:	2800      	cmp	r0, #0
 80111b4:	d0ee      	beq.n	8011194 <uxr_prepare_stream_to_write_submessage+0x58>
 80111b6:	4649      	mov	r1, r9
 80111b8:	4632      	mov	r2, r6
 80111ba:	f006 fc51 	bl	8017a60 <uxr_prepare_best_effort_buffer_to_write>
 80111be:	4604      	mov	r4, r0
 80111c0:	e7e1      	b.n	8011186 <uxr_prepare_stream_to_write_submessage+0x4a>
 80111c2:	bf00      	nop

080111c4 <uxr_init_session_info>:
 80111c4:	0e13      	lsrs	r3, r2, #24
 80111c6:	7043      	strb	r3, [r0, #1]
 80111c8:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80111cc:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80111d0:	7001      	strb	r1, [r0, #0]
 80111d2:	70c3      	strb	r3, [r0, #3]
 80111d4:	2109      	movs	r1, #9
 80111d6:	23ff      	movs	r3, #255	@ 0xff
 80111d8:	f880 c002 	strb.w	ip, [r0, #2]
 80111dc:	7102      	strb	r2, [r0, #4]
 80111de:	80c1      	strh	r1, [r0, #6]
 80111e0:	7143      	strb	r3, [r0, #5]
 80111e2:	4770      	bx	lr

080111e4 <uxr_buffer_create_session>:
 80111e4:	b530      	push	{r4, r5, lr}
 80111e6:	b089      	sub	sp, #36	@ 0x24
 80111e8:	2300      	movs	r3, #0
 80111ea:	4d12      	ldr	r5, [pc, #72]	@ (8011234 <uxr_buffer_create_session+0x50>)
 80111ec:	9307      	str	r3, [sp, #28]
 80111ee:	f8ad 201c 	strh.w	r2, [sp, #28]
 80111f2:	2201      	movs	r2, #1
 80111f4:	9301      	str	r3, [sp, #4]
 80111f6:	80c2      	strh	r2, [r0, #6]
 80111f8:	f88d 2004 	strb.w	r2, [sp, #4]
 80111fc:	682a      	ldr	r2, [r5, #0]
 80111fe:	9200      	str	r2, [sp, #0]
 8011200:	88aa      	ldrh	r2, [r5, #4]
 8011202:	f8ad 2006 	strh.w	r2, [sp, #6]
 8011206:	f8d0 2001 	ldr.w	r2, [r0, #1]
 801120a:	9202      	str	r2, [sp, #8]
 801120c:	460c      	mov	r4, r1
 801120e:	7802      	ldrb	r2, [r0, #0]
 8011210:	9303      	str	r3, [sp, #12]
 8011212:	4619      	mov	r1, r3
 8011214:	f88d 200c 	strb.w	r2, [sp, #12]
 8011218:	4620      	mov	r0, r4
 801121a:	2210      	movs	r2, #16
 801121c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8011220:	9306      	str	r3, [sp, #24]
 8011222:	f000 febb 	bl	8011f9c <uxr_buffer_submessage_header>
 8011226:	4669      	mov	r1, sp
 8011228:	4620      	mov	r0, r4
 801122a:	f001 fe47 	bl	8012ebc <uxr_serialize_CREATE_CLIENT_Payload>
 801122e:	b009      	add	sp, #36	@ 0x24
 8011230:	bd30      	pop	{r4, r5, pc}
 8011232:	bf00      	nop
 8011234:	0801a8c0 	.word	0x0801a8c0

08011238 <uxr_buffer_delete_session>:
 8011238:	b510      	push	{r4, lr}
 801123a:	4b0c      	ldr	r3, [pc, #48]	@ (801126c <uxr_buffer_delete_session+0x34>)
 801123c:	b082      	sub	sp, #8
 801123e:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 8011242:	f8ad c006 	strh.w	ip, [sp, #6]
 8011246:	460c      	mov	r4, r1
 8011248:	2202      	movs	r2, #2
 801124a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801124e:	80c2      	strh	r2, [r0, #6]
 8011250:	f8ad 3004 	strh.w	r3, [sp, #4]
 8011254:	2204      	movs	r2, #4
 8011256:	2300      	movs	r3, #0
 8011258:	2103      	movs	r1, #3
 801125a:	4620      	mov	r0, r4
 801125c:	f000 fe9e 	bl	8011f9c <uxr_buffer_submessage_header>
 8011260:	a901      	add	r1, sp, #4
 8011262:	4620      	mov	r0, r4
 8011264:	f001 fed0 	bl	8013008 <uxr_serialize_DELETE_Payload>
 8011268:	b002      	add	sp, #8
 801126a:	bd10      	pop	{r4, pc}
 801126c:	0801a8c0 	.word	0x0801a8c0

08011270 <uxr_read_create_session_status>:
 8011270:	b510      	push	{r4, lr}
 8011272:	b088      	sub	sp, #32
 8011274:	4604      	mov	r4, r0
 8011276:	4608      	mov	r0, r1
 8011278:	a901      	add	r1, sp, #4
 801127a:	f001 fed5 	bl	8013028 <uxr_deserialize_STATUS_AGENT_Payload>
 801127e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011282:	7163      	strb	r3, [r4, #5]
 8011284:	b008      	add	sp, #32
 8011286:	bd10      	pop	{r4, pc}

08011288 <uxr_read_delete_session_status>:
 8011288:	b510      	push	{r4, lr}
 801128a:	4604      	mov	r4, r0
 801128c:	b084      	sub	sp, #16
 801128e:	4608      	mov	r0, r1
 8011290:	a902      	add	r1, sp, #8
 8011292:	f001 fef9 	bl	8013088 <uxr_deserialize_STATUS_Payload>
 8011296:	88e3      	ldrh	r3, [r4, #6]
 8011298:	2b02      	cmp	r3, #2
 801129a:	d001      	beq.n	80112a0 <uxr_read_delete_session_status+0x18>
 801129c:	b004      	add	sp, #16
 801129e:	bd10      	pop	{r4, pc}
 80112a0:	f10d 000a 	add.w	r0, sp, #10
 80112a4:	f7fe fe62 	bl	800ff6c <uxr_object_id_from_raw>
 80112a8:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80112ac:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80112b0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80112b4:	b29b      	uxth	r3, r3
 80112b6:	2b02      	cmp	r3, #2
 80112b8:	bf04      	itt	eq
 80112ba:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 80112be:	7163      	strbeq	r3, [r4, #5]
 80112c0:	b004      	add	sp, #16
 80112c2:	bd10      	pop	{r4, pc}

080112c4 <uxr_stamp_create_session_header>:
 80112c4:	b510      	push	{r4, lr}
 80112c6:	2208      	movs	r2, #8
 80112c8:	b08a      	sub	sp, #40	@ 0x28
 80112ca:	4604      	mov	r4, r0
 80112cc:	eb0d 0002 	add.w	r0, sp, r2
 80112d0:	f7fa fed0 	bl	800c074 <ucdr_init_buffer>
 80112d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112d8:	9400      	str	r4, [sp, #0]
 80112da:	2300      	movs	r3, #0
 80112dc:	461a      	mov	r2, r3
 80112de:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 80112e2:	a802      	add	r0, sp, #8
 80112e4:	f001 f854 	bl	8012390 <uxr_serialize_message_header>
 80112e8:	b00a      	add	sp, #40	@ 0x28
 80112ea:	bd10      	pop	{r4, pc}

080112ec <uxr_stamp_session_header>:
 80112ec:	b530      	push	{r4, r5, lr}
 80112ee:	b08d      	sub	sp, #52	@ 0x34
 80112f0:	4604      	mov	r4, r0
 80112f2:	460d      	mov	r5, r1
 80112f4:	9203      	str	r2, [sp, #12]
 80112f6:	4619      	mov	r1, r3
 80112f8:	a804      	add	r0, sp, #16
 80112fa:	2208      	movs	r2, #8
 80112fc:	f7fa feba 	bl	800c074 <ucdr_init_buffer>
 8011300:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011304:	9b03      	ldr	r3, [sp, #12]
 8011306:	9400      	str	r4, [sp, #0]
 8011308:	462a      	mov	r2, r5
 801130a:	a804      	add	r0, sp, #16
 801130c:	f001 f840 	bl	8012390 <uxr_serialize_message_header>
 8011310:	b00d      	add	sp, #52	@ 0x34
 8011312:	bd30      	pop	{r4, r5, pc}

08011314 <uxr_read_session_header>:
 8011314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011318:	4607      	mov	r7, r0
 801131a:	b084      	sub	sp, #16
 801131c:	4608      	mov	r0, r1
 801131e:	460c      	mov	r4, r1
 8011320:	4615      	mov	r5, r2
 8011322:	461e      	mov	r6, r3
 8011324:	f7fa fed6 	bl	800c0d4 <ucdr_buffer_remaining>
 8011328:	2808      	cmp	r0, #8
 801132a:	d803      	bhi.n	8011334 <uxr_read_session_header+0x20>
 801132c:	2000      	movs	r0, #0
 801132e:	b004      	add	sp, #16
 8011330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011334:	f10d 080c 	add.w	r8, sp, #12
 8011338:	4633      	mov	r3, r6
 801133a:	462a      	mov	r2, r5
 801133c:	f8cd 8000 	str.w	r8, [sp]
 8011340:	4620      	mov	r0, r4
 8011342:	f10d 010b 	add.w	r1, sp, #11
 8011346:	f001 f841 	bl	80123cc <uxr_deserialize_message_header>
 801134a:	783a      	ldrb	r2, [r7, #0]
 801134c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8011350:	4293      	cmp	r3, r2
 8011352:	d1eb      	bne.n	801132c <uxr_read_session_header+0x18>
 8011354:	061b      	lsls	r3, r3, #24
 8011356:	d41c      	bmi.n	8011392 <uxr_read_session_header+0x7e>
 8011358:	f89d 200c 	ldrb.w	r2, [sp, #12]
 801135c:	787b      	ldrb	r3, [r7, #1]
 801135e:	429a      	cmp	r2, r3
 8011360:	d003      	beq.n	801136a <uxr_read_session_header+0x56>
 8011362:	2001      	movs	r0, #1
 8011364:	f080 0001 	eor.w	r0, r0, #1
 8011368:	e7e1      	b.n	801132e <uxr_read_session_header+0x1a>
 801136a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 801136e:	78bb      	ldrb	r3, [r7, #2]
 8011370:	429a      	cmp	r2, r3
 8011372:	f107 0102 	add.w	r1, r7, #2
 8011376:	d1f4      	bne.n	8011362 <uxr_read_session_header+0x4e>
 8011378:	f89d 200e 	ldrb.w	r2, [sp, #14]
 801137c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011380:	429a      	cmp	r2, r3
 8011382:	d1ee      	bne.n	8011362 <uxr_read_session_header+0x4e>
 8011384:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8011388:	784b      	ldrb	r3, [r1, #1]
 801138a:	429a      	cmp	r2, r3
 801138c:	d1e9      	bne.n	8011362 <uxr_read_session_header+0x4e>
 801138e:	2000      	movs	r0, #0
 8011390:	e7e8      	b.n	8011364 <uxr_read_session_header+0x50>
 8011392:	2001      	movs	r0, #1
 8011394:	e7cb      	b.n	801132e <uxr_read_session_header+0x1a>
 8011396:	bf00      	nop

08011398 <uxr_session_header_offset>:
 8011398:	f990 3000 	ldrsb.w	r3, [r0]
 801139c:	2b00      	cmp	r3, #0
 801139e:	bfac      	ite	ge
 80113a0:	2008      	movge	r0, #8
 80113a2:	2004      	movlt	r0, #4
 80113a4:	4770      	bx	lr
 80113a6:	bf00      	nop

080113a8 <uxr_init_base_object_request>:
 80113a8:	b510      	push	{r4, lr}
 80113aa:	88c3      	ldrh	r3, [r0, #6]
 80113ac:	b082      	sub	sp, #8
 80113ae:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 80113b2:	9101      	str	r1, [sp, #4]
 80113b4:	f1a3 010a 	sub.w	r1, r3, #10
 80113b8:	b289      	uxth	r1, r1
 80113ba:	42a1      	cmp	r1, r4
 80113bc:	d80e      	bhi.n	80113dc <uxr_init_base_object_request+0x34>
 80113be:	3301      	adds	r3, #1
 80113c0:	b29c      	uxth	r4, r3
 80113c2:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80113c6:	b2db      	uxtb	r3, r3
 80113c8:	80c4      	strh	r4, [r0, #6]
 80113ca:	9801      	ldr	r0, [sp, #4]
 80113cc:	7011      	strb	r1, [r2, #0]
 80113ce:	7053      	strb	r3, [r2, #1]
 80113d0:	1c91      	adds	r1, r2, #2
 80113d2:	f7fe fddf 	bl	800ff94 <uxr_object_id_to_raw>
 80113d6:	4620      	mov	r0, r4
 80113d8:	b002      	add	sp, #8
 80113da:	bd10      	pop	{r4, pc}
 80113dc:	230a      	movs	r3, #10
 80113de:	2100      	movs	r1, #0
 80113e0:	461c      	mov	r4, r3
 80113e2:	e7f1      	b.n	80113c8 <uxr_init_base_object_request+0x20>

080113e4 <uxr_parse_base_object_request>:
 80113e4:	b570      	push	{r4, r5, r6, lr}
 80113e6:	4604      	mov	r4, r0
 80113e8:	3002      	adds	r0, #2
 80113ea:	460d      	mov	r5, r1
 80113ec:	4616      	mov	r6, r2
 80113ee:	f7fe fdbd 	bl	800ff6c <uxr_object_id_from_raw>
 80113f2:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80113f6:	8028      	strh	r0, [r5, #0]
 80113f8:	806b      	strh	r3, [r5, #2]
 80113fa:	7822      	ldrb	r2, [r4, #0]
 80113fc:	7863      	ldrb	r3, [r4, #1]
 80113fe:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011402:	8033      	strh	r3, [r6, #0]
 8011404:	bd70      	pop	{r4, r5, r6, pc}
 8011406:	bf00      	nop

08011408 <uxr_init_framing_io>:
 8011408:	2300      	movs	r3, #0
 801140a:	7041      	strb	r1, [r0, #1]
 801140c:	7003      	strb	r3, [r0, #0]
 801140e:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8011410:	4770      	bx	lr
 8011412:	bf00      	nop

08011414 <uxr_write_framed_msg>:
 8011414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011418:	4617      	mov	r7, r2
 801141a:	7842      	ldrb	r2, [r0, #1]
 801141c:	b083      	sub	sp, #12
 801141e:	460e      	mov	r6, r1
 8011420:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8011424:	469a      	mov	sl, r3
 8011426:	2901      	cmp	r1, #1
 8011428:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 801142c:	4604      	mov	r4, r0
 801142e:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8011432:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8011436:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 801143a:	f240 8137 	bls.w	80116ac <uxr_write_framed_msg+0x298>
 801143e:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8011442:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8011446:	2901      	cmp	r1, #1
 8011448:	f04f 0202 	mov.w	r2, #2
 801144c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011450:	f240 808f 	bls.w	8011572 <uxr_write_framed_msg+0x15e>
 8011454:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011456:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 801145a:	b2dd      	uxtb	r5, r3
 801145c:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8011460:	2203      	movs	r2, #3
 8011462:	2901      	cmp	r1, #1
 8011464:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011468:	f240 809a 	bls.w	80115a0 <uxr_write_framed_msg+0x18c>
 801146c:	18a1      	adds	r1, r4, r2
 801146e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011470:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 8011474:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8011478:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 801147c:	3201      	adds	r2, #1
 801147e:	2801      	cmp	r0, #1
 8011480:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011484:	f240 80a0 	bls.w	80115c8 <uxr_write_framed_msg+0x1b4>
 8011488:	18a0      	adds	r0, r4, r2
 801148a:	3201      	adds	r2, #1
 801148c:	b2d2      	uxtb	r2, r2
 801148e:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8011492:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011496:	2b00      	cmp	r3, #0
 8011498:	f000 80a9 	beq.w	80115ee <uxr_write_framed_msg+0x1da>
 801149c:	f04f 0900 	mov.w	r9, #0
 80114a0:	46c8      	mov	r8, r9
 80114a2:	f81a 3008 	ldrb.w	r3, [sl, r8]
 80114a6:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 80114aa:	2901      	cmp	r1, #1
 80114ac:	f240 80c3 	bls.w	8011636 <uxr_write_framed_msg+0x222>
 80114b0:	2a29      	cmp	r2, #41	@ 0x29
 80114b2:	f200 809f 	bhi.w	80115f4 <uxr_write_framed_msg+0x1e0>
 80114b6:	18a1      	adds	r1, r4, r2
 80114b8:	3201      	adds	r2, #1
 80114ba:	b2d2      	uxtb	r2, r2
 80114bc:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 80114c0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80114c4:	ea89 0303 	eor.w	r3, r9, r3
 80114c8:	498c      	ldr	r1, [pc, #560]	@ (80116fc <uxr_write_framed_msg+0x2e8>)
 80114ca:	b2db      	uxtb	r3, r3
 80114cc:	f108 0801 	add.w	r8, r8, #1
 80114d0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80114d4:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 80114d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80114da:	4543      	cmp	r3, r8
 80114dc:	d8e1      	bhi.n	80114a2 <uxr_write_framed_msg+0x8e>
 80114de:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80114e2:	fa5f f889 	uxtb.w	r8, r9
 80114e6:	9301      	str	r3, [sp, #4]
 80114e8:	f04f 0900 	mov.w	r9, #0
 80114ec:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 80114f0:	fa5f f18a 	uxtb.w	r1, sl
 80114f4:	2901      	cmp	r1, #1
 80114f6:	d921      	bls.n	801153c <uxr_write_framed_msg+0x128>
 80114f8:	2a29      	cmp	r2, #41	@ 0x29
 80114fa:	f240 80af 	bls.w	801165c <uxr_write_framed_msg+0x248>
 80114fe:	2500      	movs	r5, #0
 8011500:	e000      	b.n	8011504 <uxr_write_framed_msg+0xf0>
 8011502:	b160      	cbz	r0, 801151e <uxr_write_framed_msg+0x10a>
 8011504:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8011508:	1b52      	subs	r2, r2, r5
 801150a:	465b      	mov	r3, fp
 801150c:	4421      	add	r1, r4
 801150e:	4638      	mov	r0, r7
 8011510:	47b0      	blx	r6
 8011512:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8011516:	4405      	add	r5, r0
 8011518:	4295      	cmp	r5, r2
 801151a:	d3f2      	bcc.n	8011502 <uxr_write_framed_msg+0xee>
 801151c:	d003      	beq.n	8011526 <uxr_write_framed_msg+0x112>
 801151e:	2000      	movs	r0, #0
 8011520:	b003      	add	sp, #12
 8011522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011526:	fa5f f18a 	uxtb.w	r1, sl
 801152a:	f04f 0300 	mov.w	r3, #0
 801152e:	2901      	cmp	r1, #1
 8011530:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8011534:	f04f 0200 	mov.w	r2, #0
 8011538:	f200 8090 	bhi.w	801165c <uxr_write_framed_msg+0x248>
 801153c:	1c51      	adds	r1, r2, #1
 801153e:	b2c9      	uxtb	r1, r1
 8011540:	2929      	cmp	r1, #41	@ 0x29
 8011542:	d8dc      	bhi.n	80114fe <uxr_write_framed_msg+0xea>
 8011544:	18a5      	adds	r5, r4, r2
 8011546:	4421      	add	r1, r4
 8011548:	3202      	adds	r2, #2
 801154a:	f088 0820 	eor.w	r8, r8, #32
 801154e:	4648      	mov	r0, r9
 8011550:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8011554:	b2d2      	uxtb	r2, r2
 8011556:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 801155a:	f04f 0901 	mov.w	r9, #1
 801155e:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8011562:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011566:	2800      	cmp	r0, #0
 8011568:	f040 8085 	bne.w	8011676 <uxr_write_framed_msg+0x262>
 801156c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011570:	e7bc      	b.n	80114ec <uxr_write_framed_msg+0xd8>
 8011572:	4611      	mov	r1, r2
 8011574:	f04f 0c03 	mov.w	ip, #3
 8011578:	2204      	movs	r2, #4
 801157a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801157c:	4421      	add	r1, r4
 801157e:	b2dd      	uxtb	r5, r3
 8011580:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8011584:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 8011588:	44a4      	add	ip, r4
 801158a:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 801158e:	f080 0020 	eor.w	r0, r0, #32
 8011592:	2901      	cmp	r1, #1
 8011594:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8011598:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801159c:	f63f af66 	bhi.w	801146c <uxr_write_framed_msg+0x58>
 80115a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80115a2:	18a0      	adds	r0, r4, r2
 80115a4:	f085 0520 	eor.w	r5, r5, #32
 80115a8:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 80115ac:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80115b0:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 80115b4:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 80115b8:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 80115bc:	3202      	adds	r2, #2
 80115be:	2801      	cmp	r0, #1
 80115c0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80115c4:	f63f af60 	bhi.w	8011488 <uxr_write_framed_msg+0x74>
 80115c8:	1c50      	adds	r0, r2, #1
 80115ca:	18a5      	adds	r5, r4, r2
 80115cc:	fa54 f080 	uxtab	r0, r4, r0
 80115d0:	3202      	adds	r2, #2
 80115d2:	f081 0120 	eor.w	r1, r1, #32
 80115d6:	b2d2      	uxtb	r2, r2
 80115d8:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 80115dc:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 80115e0:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 80115e4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	f47f af57 	bne.w	801149c <uxr_write_framed_msg+0x88>
 80115ee:	9301      	str	r3, [sp, #4]
 80115f0:	4698      	mov	r8, r3
 80115f2:	e779      	b.n	80114e8 <uxr_write_framed_msg+0xd4>
 80115f4:	2500      	movs	r5, #0
 80115f6:	e001      	b.n	80115fc <uxr_write_framed_msg+0x1e8>
 80115f8:	2800      	cmp	r0, #0
 80115fa:	d090      	beq.n	801151e <uxr_write_framed_msg+0x10a>
 80115fc:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8011600:	1b52      	subs	r2, r2, r5
 8011602:	465b      	mov	r3, fp
 8011604:	4421      	add	r1, r4
 8011606:	4638      	mov	r0, r7
 8011608:	47b0      	blx	r6
 801160a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801160e:	4405      	add	r5, r0
 8011610:	4295      	cmp	r5, r2
 8011612:	d3f1      	bcc.n	80115f8 <uxr_write_framed_msg+0x1e4>
 8011614:	d183      	bne.n	801151e <uxr_write_framed_msg+0x10a>
 8011616:	f04f 0300 	mov.w	r3, #0
 801161a:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801161e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011620:	4543      	cmp	r3, r8
 8011622:	d964      	bls.n	80116ee <uxr_write_framed_msg+0x2da>
 8011624:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8011628:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 801162c:	2901      	cmp	r1, #1
 801162e:	f04f 0200 	mov.w	r2, #0
 8011632:	f63f af3d 	bhi.w	80114b0 <uxr_write_framed_msg+0x9c>
 8011636:	1c51      	adds	r1, r2, #1
 8011638:	b2c9      	uxtb	r1, r1
 801163a:	2929      	cmp	r1, #41	@ 0x29
 801163c:	d8da      	bhi.n	80115f4 <uxr_write_framed_msg+0x1e0>
 801163e:	18a0      	adds	r0, r4, r2
 8011640:	4421      	add	r1, r4
 8011642:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 8011646:	3202      	adds	r2, #2
 8011648:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 801164c:	b2d2      	uxtb	r2, r2
 801164e:	f083 0020 	eor.w	r0, r3, #32
 8011652:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8011656:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801165a:	e733      	b.n	80114c4 <uxr_write_framed_msg+0xb0>
 801165c:	18a1      	adds	r1, r4, r2
 801165e:	3201      	adds	r2, #1
 8011660:	4648      	mov	r0, r9
 8011662:	b2d2      	uxtb	r2, r2
 8011664:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8011668:	f04f 0901 	mov.w	r9, #1
 801166c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011670:	2800      	cmp	r0, #0
 8011672:	f43f af7b 	beq.w	801156c <uxr_write_framed_msg+0x158>
 8011676:	2500      	movs	r5, #0
 8011678:	e002      	b.n	8011680 <uxr_write_framed_msg+0x26c>
 801167a:	2800      	cmp	r0, #0
 801167c:	f43f af4f 	beq.w	801151e <uxr_write_framed_msg+0x10a>
 8011680:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8011684:	1b52      	subs	r2, r2, r5
 8011686:	465b      	mov	r3, fp
 8011688:	4421      	add	r1, r4
 801168a:	4638      	mov	r0, r7
 801168c:	47b0      	blx	r6
 801168e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8011692:	4405      	add	r5, r0
 8011694:	4295      	cmp	r5, r2
 8011696:	d3f0      	bcc.n	801167a <uxr_write_framed_msg+0x266>
 8011698:	f47f af41 	bne.w	801151e <uxr_write_framed_msg+0x10a>
 801169c:	2300      	movs	r3, #0
 801169e:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80116a2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80116a4:	b298      	uxth	r0, r3
 80116a6:	b003      	add	sp, #12
 80116a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116ac:	217d      	movs	r1, #125	@ 0x7d
 80116ae:	f082 0220 	eor.w	r2, r2, #32
 80116b2:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 80116b6:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 80116ba:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 80116be:	2901      	cmp	r1, #1
 80116c0:	f04f 0203 	mov.w	r2, #3
 80116c4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80116c8:	d804      	bhi.n	80116d4 <uxr_write_framed_msg+0x2c0>
 80116ca:	4611      	mov	r1, r2
 80116cc:	f04f 0c04 	mov.w	ip, #4
 80116d0:	2205      	movs	r2, #5
 80116d2:	e752      	b.n	801157a <uxr_write_framed_msg+0x166>
 80116d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80116d6:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 80116da:	b2dd      	uxtb	r5, r3
 80116dc:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 80116e0:	2204      	movs	r2, #4
 80116e2:	2901      	cmp	r1, #1
 80116e4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80116e8:	f63f aec0 	bhi.w	801146c <uxr_write_framed_msg+0x58>
 80116ec:	e758      	b.n	80115a0 <uxr_write_framed_msg+0x18c>
 80116ee:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80116f2:	fa5f f889 	uxtb.w	r8, r9
 80116f6:	9301      	str	r3, [sp, #4]
 80116f8:	2200      	movs	r2, #0
 80116fa:	e6f5      	b.n	80114e8 <uxr_write_framed_msg+0xd4>
 80116fc:	0801b5ec 	.word	0x0801b5ec

08011700 <uxr_framing_read_transport>:
 8011700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011704:	4604      	mov	r4, r0
 8011706:	b083      	sub	sp, #12
 8011708:	461f      	mov	r7, r3
 801170a:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 801170e:	4689      	mov	r9, r1
 8011710:	4692      	mov	sl, r2
 8011712:	f000 fc89 	bl	8012028 <uxr_millis>
 8011716:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801171a:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 801171e:	42b3      	cmp	r3, r6
 8011720:	4680      	mov	r8, r0
 8011722:	d061      	beq.n	80117e8 <uxr_framing_read_transport+0xe8>
 8011724:	d81c      	bhi.n	8011760 <uxr_framing_read_transport+0x60>
 8011726:	1e75      	subs	r5, r6, #1
 8011728:	1aed      	subs	r5, r5, r3
 801172a:	b2ed      	uxtb	r5, r5
 801172c:	2600      	movs	r6, #0
 801172e:	455d      	cmp	r5, fp
 8011730:	d81f      	bhi.n	8011772 <uxr_framing_read_transport+0x72>
 8011732:	19ab      	adds	r3, r5, r6
 8011734:	455b      	cmp	r3, fp
 8011736:	bf84      	itt	hi
 8011738:	ebab 0605 	subhi.w	r6, fp, r5
 801173c:	b2f6      	uxtbhi	r6, r6
 801173e:	b9ed      	cbnz	r5, 801177c <uxr_framing_read_transport+0x7c>
 8011740:	f04f 0b00 	mov.w	fp, #0
 8011744:	f000 fc70 	bl	8012028 <uxr_millis>
 8011748:	683b      	ldr	r3, [r7, #0]
 801174a:	eba0 0808 	sub.w	r8, r0, r8
 801174e:	eba3 0308 	sub.w	r3, r3, r8
 8011752:	4658      	mov	r0, fp
 8011754:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011758:	603b      	str	r3, [r7, #0]
 801175a:	b003      	add	sp, #12
 801175c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011760:	2e00      	cmp	r6, #0
 8011762:	d049      	beq.n	80117f8 <uxr_framing_read_transport+0xf8>
 8011764:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 8011768:	b2ed      	uxtb	r5, r5
 801176a:	3e01      	subs	r6, #1
 801176c:	455d      	cmp	r5, fp
 801176e:	b2f6      	uxtb	r6, r6
 8011770:	d9df      	bls.n	8011732 <uxr_framing_read_transport+0x32>
 8011772:	fa5f f58b 	uxtb.w	r5, fp
 8011776:	2600      	movs	r6, #0
 8011778:	2d00      	cmp	r5, #0
 801177a:	d0e1      	beq.n	8011740 <uxr_framing_read_transport+0x40>
 801177c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8011780:	3102      	adds	r1, #2
 8011782:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011784:	9300      	str	r3, [sp, #0]
 8011786:	683b      	ldr	r3, [r7, #0]
 8011788:	4421      	add	r1, r4
 801178a:	462a      	mov	r2, r5
 801178c:	4650      	mov	r0, sl
 801178e:	47c8      	blx	r9
 8011790:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8011794:	4a1a      	ldr	r2, [pc, #104]	@ (8011800 <uxr_framing_read_transport+0x100>)
 8011796:	4403      	add	r3, r0
 8011798:	0859      	lsrs	r1, r3, #1
 801179a:	fba2 2101 	umull	r2, r1, r2, r1
 801179e:	0889      	lsrs	r1, r1, #2
 80117a0:	222a      	movs	r2, #42	@ 0x2a
 80117a2:	fb02 3111 	mls	r1, r2, r1, r3
 80117a6:	4683      	mov	fp, r0
 80117a8:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 80117ac:	2800      	cmp	r0, #0
 80117ae:	d0c7      	beq.n	8011740 <uxr_framing_read_transport+0x40>
 80117b0:	42a8      	cmp	r0, r5
 80117b2:	d1c7      	bne.n	8011744 <uxr_framing_read_transport+0x44>
 80117b4:	2e00      	cmp	r6, #0
 80117b6:	d0c5      	beq.n	8011744 <uxr_framing_read_transport+0x44>
 80117b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80117ba:	9300      	str	r3, [sp, #0]
 80117bc:	3102      	adds	r1, #2
 80117be:	4632      	mov	r2, r6
 80117c0:	4421      	add	r1, r4
 80117c2:	2300      	movs	r3, #0
 80117c4:	4650      	mov	r0, sl
 80117c6:	47c8      	blx	r9
 80117c8:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80117cc:	4a0c      	ldr	r2, [pc, #48]	@ (8011800 <uxr_framing_read_transport+0x100>)
 80117ce:	180b      	adds	r3, r1, r0
 80117d0:	0859      	lsrs	r1, r3, #1
 80117d2:	fba2 1201 	umull	r1, r2, r2, r1
 80117d6:	0892      	lsrs	r2, r2, #2
 80117d8:	212a      	movs	r1, #42	@ 0x2a
 80117da:	fb01 3312 	mls	r3, r1, r2, r3
 80117de:	eb00 0b05 	add.w	fp, r0, r5
 80117e2:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 80117e6:	e7ad      	b.n	8011744 <uxr_framing_read_transport+0x44>
 80117e8:	2600      	movs	r6, #0
 80117ea:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 80117ee:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 80117f0:	d9bf      	bls.n	8011772 <uxr_framing_read_transport+0x72>
 80117f2:	2102      	movs	r1, #2
 80117f4:	2529      	movs	r5, #41	@ 0x29
 80117f6:	e7c4      	b.n	8011782 <uxr_framing_read_transport+0x82>
 80117f8:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 80117fc:	b2ed      	uxtb	r5, r5
 80117fe:	e796      	b.n	801172e <uxr_framing_read_transport+0x2e>
 8011800:	30c30c31 	.word	0x30c30c31

08011804 <uxr_read_framed_msg>:
 8011804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011808:	461e      	mov	r6, r3
 801180a:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 801180e:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8011812:	429d      	cmp	r5, r3
 8011814:	b083      	sub	sp, #12
 8011816:	4604      	mov	r4, r0
 8011818:	4688      	mov	r8, r1
 801181a:	4691      	mov	r9, r2
 801181c:	f000 8188 	beq.w	8011b30 <uxr_read_framed_msg+0x32c>
 8011820:	7823      	ldrb	r3, [r4, #0]
 8011822:	4dc1      	ldr	r5, [pc, #772]	@ (8011b28 <uxr_read_framed_msg+0x324>)
 8011824:	4fc1      	ldr	r7, [pc, #772]	@ (8011b2c <uxr_read_framed_msg+0x328>)
 8011826:	2b07      	cmp	r3, #7
 8011828:	d8fd      	bhi.n	8011826 <uxr_read_framed_msg+0x22>
 801182a:	e8df f013 	tbh	[pc, r3, lsl #1]
 801182e:	0115      	.short	0x0115
 8011830:	00d600f6 	.word	0x00d600f6
 8011834:	009000b9 	.word	0x009000b9
 8011838:	0030004d 	.word	0x0030004d
 801183c:	0008      	.short	0x0008
 801183e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8011842:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8011846:	4299      	cmp	r1, r3
 8011848:	f000 814a 	beq.w	8011ae0 <uxr_read_framed_msg+0x2dc>
 801184c:	18e2      	adds	r2, r4, r3
 801184e:	7892      	ldrb	r2, [r2, #2]
 8011850:	2a7d      	cmp	r2, #125	@ 0x7d
 8011852:	f000 8199 	beq.w	8011b88 <uxr_read_framed_msg+0x384>
 8011856:	3301      	adds	r3, #1
 8011858:	0858      	lsrs	r0, r3, #1
 801185a:	fba5 1000 	umull	r1, r0, r5, r0
 801185e:	0880      	lsrs	r0, r0, #2
 8011860:	212a      	movs	r1, #42	@ 0x2a
 8011862:	fb01 3310 	mls	r3, r1, r0, r3
 8011866:	2a7e      	cmp	r2, #126	@ 0x7e
 8011868:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801186c:	f000 8252 	beq.w	8011d14 <uxr_read_framed_msg+0x510>
 8011870:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8011872:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8011874:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011878:	b29b      	uxth	r3, r3
 801187a:	2200      	movs	r2, #0
 801187c:	4299      	cmp	r1, r3
 801187e:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8011880:	7022      	strb	r2, [r4, #0]
 8011882:	f000 8179 	beq.w	8011b78 <uxr_read_framed_msg+0x374>
 8011886:	2000      	movs	r0, #0
 8011888:	b003      	add	sp, #12
 801188a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801188e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8011892:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8011896:	4299      	cmp	r1, r3
 8011898:	f000 8131 	beq.w	8011afe <uxr_read_framed_msg+0x2fa>
 801189c:	18e2      	adds	r2, r4, r3
 801189e:	7890      	ldrb	r0, [r2, #2]
 80118a0:	287d      	cmp	r0, #125	@ 0x7d
 80118a2:	f000 8190 	beq.w	8011bc6 <uxr_read_framed_msg+0x3c2>
 80118a6:	3301      	adds	r3, #1
 80118a8:	085a      	lsrs	r2, r3, #1
 80118aa:	fba5 1202 	umull	r1, r2, r5, r2
 80118ae:	0892      	lsrs	r2, r2, #2
 80118b0:	212a      	movs	r1, #42	@ 0x2a
 80118b2:	fb01 3312 	mls	r3, r1, r2, r3
 80118b6:	287e      	cmp	r0, #126	@ 0x7e
 80118b8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80118bc:	f000 821a 	beq.w	8011cf4 <uxr_read_framed_msg+0x4f0>
 80118c0:	2307      	movs	r3, #7
 80118c2:	86a0      	strh	r0, [r4, #52]	@ 0x34
 80118c4:	7023      	strb	r3, [r4, #0]
 80118c6:	e7ae      	b.n	8011826 <uxr_read_framed_msg+0x22>
 80118c8:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80118ca:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 80118ce:	459e      	cmp	lr, r3
 80118d0:	d938      	bls.n	8011944 <uxr_read_framed_msg+0x140>
 80118d2:	ee07 8a90 	vmov	s15, r8
 80118d6:	212a      	movs	r1, #42	@ 0x2a
 80118d8:	e020      	b.n	801191c <uxr_read_framed_msg+0x118>
 80118da:	f89b c002 	ldrb.w	ip, [fp, #2]
 80118de:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 80118e2:	f000 80d4 	beq.w	8011a8e <uxr_read_framed_msg+0x28a>
 80118e6:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 80118ea:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80118ee:	f000 8219 	beq.w	8011d24 <uxr_read_framed_msg+0x520>
 80118f2:	f806 c003 	strb.w	ip, [r6, r3]
 80118f6:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 80118fa:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80118fc:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8011900:	ea8a 000c 	eor.w	r0, sl, ip
 8011904:	b2c0      	uxtb	r0, r0
 8011906:	3301      	adds	r3, #1
 8011908:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 801190c:	b29b      	uxth	r3, r3
 801190e:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 8011912:	4573      	cmp	r3, lr
 8011914:	8663      	strh	r3, [r4, #50]	@ 0x32
 8011916:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8011918:	f080 8120 	bcs.w	8011b5c <uxr_read_framed_msg+0x358>
 801191c:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 8011920:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8011924:	f100 0c01 	add.w	ip, r0, #1
 8011928:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801192c:	fba5 8202 	umull	r8, r2, r5, r2
 8011930:	0892      	lsrs	r2, r2, #2
 8011932:	4582      	cmp	sl, r0
 8011934:	eb04 0b00 	add.w	fp, r4, r0
 8011938:	fb01 c212 	mls	r2, r1, r2, ip
 801193c:	d1cd      	bne.n	80118da <uxr_read_framed_msg+0xd6>
 801193e:	ee17 8a90 	vmov	r8, s15
 8011942:	459e      	cmp	lr, r3
 8011944:	f040 8111 	bne.w	8011b6a <uxr_read_framed_msg+0x366>
 8011948:	2306      	movs	r3, #6
 801194a:	7023      	strb	r3, [r4, #0]
 801194c:	e76b      	b.n	8011826 <uxr_read_framed_msg+0x22>
 801194e:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8011952:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8011956:	4298      	cmp	r0, r3
 8011958:	f000 80c2 	beq.w	8011ae0 <uxr_read_framed_msg+0x2dc>
 801195c:	18e2      	adds	r2, r4, r3
 801195e:	7891      	ldrb	r1, [r2, #2]
 8011960:	297d      	cmp	r1, #125	@ 0x7d
 8011962:	f000 814c 	beq.w	8011bfe <uxr_read_framed_msg+0x3fa>
 8011966:	3301      	adds	r3, #1
 8011968:	085a      	lsrs	r2, r3, #1
 801196a:	fba5 0202 	umull	r0, r2, r5, r2
 801196e:	0892      	lsrs	r2, r2, #2
 8011970:	202a      	movs	r0, #42	@ 0x2a
 8011972:	fb00 3312 	mls	r3, r0, r2, r3
 8011976:	297e      	cmp	r1, #126	@ 0x7e
 8011978:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801197c:	f000 81ca 	beq.w	8011d14 <uxr_read_framed_msg+0x510>
 8011980:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8011982:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8011986:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011988:	b29b      	uxth	r3, r3
 801198a:	2000      	movs	r0, #0
 801198c:	428b      	cmp	r3, r1
 801198e:	8623      	strh	r3, [r4, #48]	@ 0x30
 8011990:	8660      	strh	r0, [r4, #50]	@ 0x32
 8011992:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8011994:	f240 80df 	bls.w	8011b56 <uxr_read_framed_msg+0x352>
 8011998:	7020      	strb	r0, [r4, #0]
 801199a:	b003      	add	sp, #12
 801199c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119a0:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80119a4:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80119a8:	4299      	cmp	r1, r3
 80119aa:	f000 80a8 	beq.w	8011afe <uxr_read_framed_msg+0x2fa>
 80119ae:	18e2      	adds	r2, r4, r3
 80119b0:	7890      	ldrb	r0, [r2, #2]
 80119b2:	287d      	cmp	r0, #125	@ 0x7d
 80119b4:	f000 8164 	beq.w	8011c80 <uxr_read_framed_msg+0x47c>
 80119b8:	3301      	adds	r3, #1
 80119ba:	085a      	lsrs	r2, r3, #1
 80119bc:	fba5 1202 	umull	r1, r2, r5, r2
 80119c0:	0892      	lsrs	r2, r2, #2
 80119c2:	212a      	movs	r1, #42	@ 0x2a
 80119c4:	fb01 3312 	mls	r3, r1, r2, r3
 80119c8:	287e      	cmp	r0, #126	@ 0x7e
 80119ca:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80119ce:	f000 8191 	beq.w	8011cf4 <uxr_read_framed_msg+0x4f0>
 80119d2:	2304      	movs	r3, #4
 80119d4:	8620      	strh	r0, [r4, #48]	@ 0x30
 80119d6:	7023      	strb	r3, [r4, #0]
 80119d8:	e725      	b.n	8011826 <uxr_read_framed_msg+0x22>
 80119da:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80119de:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80119e2:	4290      	cmp	r0, r2
 80119e4:	f000 80b3 	beq.w	8011b4e <uxr_read_framed_msg+0x34a>
 80119e8:	18a3      	adds	r3, r4, r2
 80119ea:	7899      	ldrb	r1, [r3, #2]
 80119ec:	297d      	cmp	r1, #125	@ 0x7d
 80119ee:	f000 8164 	beq.w	8011cba <uxr_read_framed_msg+0x4b6>
 80119f2:	3201      	adds	r2, #1
 80119f4:	0850      	lsrs	r0, r2, #1
 80119f6:	fba5 3000 	umull	r3, r0, r5, r0
 80119fa:	0880      	lsrs	r0, r0, #2
 80119fc:	232a      	movs	r3, #42	@ 0x2a
 80119fe:	fb03 2210 	mls	r2, r3, r0, r2
 8011a02:	297e      	cmp	r1, #126	@ 0x7e
 8011a04:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8011a08:	f000 8188 	beq.w	8011d1c <uxr_read_framed_msg+0x518>
 8011a0c:	7863      	ldrb	r3, [r4, #1]
 8011a0e:	428b      	cmp	r3, r1
 8011a10:	bf0c      	ite	eq
 8011a12:	2303      	moveq	r3, #3
 8011a14:	2300      	movne	r3, #0
 8011a16:	7023      	strb	r3, [r4, #0]
 8011a18:	e705      	b.n	8011826 <uxr_read_framed_msg+0x22>
 8011a1a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8011a1e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8011a22:	2200      	movs	r2, #0
 8011a24:	4299      	cmp	r1, r3
 8011a26:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 8011a2a:	d06c      	beq.n	8011b06 <uxr_read_framed_msg+0x302>
 8011a2c:	18e2      	adds	r2, r4, r3
 8011a2e:	7890      	ldrb	r0, [r2, #2]
 8011a30:	287d      	cmp	r0, #125	@ 0x7d
 8011a32:	f000 8101 	beq.w	8011c38 <uxr_read_framed_msg+0x434>
 8011a36:	3301      	adds	r3, #1
 8011a38:	085a      	lsrs	r2, r3, #1
 8011a3a:	fba5 1202 	umull	r1, r2, r5, r2
 8011a3e:	0892      	lsrs	r2, r2, #2
 8011a40:	212a      	movs	r1, #42	@ 0x2a
 8011a42:	fb01 3312 	mls	r3, r1, r2, r3
 8011a46:	287e      	cmp	r0, #126	@ 0x7e
 8011a48:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8011a4c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011a50:	d059      	beq.n	8011b06 <uxr_read_framed_msg+0x302>
 8011a52:	2302      	movs	r3, #2
 8011a54:	7023      	strb	r3, [r4, #0]
 8011a56:	e6e6      	b.n	8011826 <uxr_read_framed_msg+0x22>
 8011a58:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8011a5c:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8011a60:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8011a64:	1c51      	adds	r1, r2, #1
 8011a66:	084b      	lsrs	r3, r1, #1
 8011a68:	fba5 c303 	umull	ip, r3, r5, r3
 8011a6c:	089b      	lsrs	r3, r3, #2
 8011a6e:	fb0e 1313 	mls	r3, lr, r3, r1
 8011a72:	4592      	cmp	sl, r2
 8011a74:	eb04 0002 	add.w	r0, r4, r2
 8011a78:	b2da      	uxtb	r2, r3
 8011a7a:	f43f af04 	beq.w	8011886 <uxr_read_framed_msg+0x82>
 8011a7e:	7883      	ldrb	r3, [r0, #2]
 8011a80:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8011a84:	2b7e      	cmp	r3, #126	@ 0x7e
 8011a86:	d1ed      	bne.n	8011a64 <uxr_read_framed_msg+0x260>
 8011a88:	2301      	movs	r3, #1
 8011a8a:	7023      	strb	r3, [r4, #0]
 8011a8c:	e6cb      	b.n	8011826 <uxr_read_framed_msg+0x22>
 8011a8e:	f100 0c01 	add.w	ip, r0, #1
 8011a92:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8011a96:	fba5 8202 	umull	r8, r2, r5, r2
 8011a9a:	0892      	lsrs	r2, r2, #2
 8011a9c:	fb01 c212 	mls	r2, r1, r2, ip
 8011aa0:	eb04 0c02 	add.w	ip, r4, r2
 8011aa4:	b2d2      	uxtb	r2, r2
 8011aa6:	4592      	cmp	sl, r2
 8011aa8:	f100 0002 	add.w	r0, r0, #2
 8011aac:	f43f af47 	beq.w	801193e <uxr_read_framed_msg+0x13a>
 8011ab0:	0842      	lsrs	r2, r0, #1
 8011ab2:	f89c a002 	ldrb.w	sl, [ip, #2]
 8011ab6:	fba5 8202 	umull	r8, r2, r5, r2
 8011aba:	0892      	lsrs	r2, r2, #2
 8011abc:	fb01 0012 	mls	r0, r1, r2, r0
 8011ac0:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 8011ac4:	f08a 0c20 	eor.w	ip, sl, #32
 8011ac8:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8011acc:	f47f af11 	bne.w	80118f2 <uxr_read_framed_msg+0xee>
 8011ad0:	459e      	cmp	lr, r3
 8011ad2:	ee17 8a90 	vmov	r8, s15
 8011ad6:	f43f af37 	beq.w	8011948 <uxr_read_framed_msg+0x144>
 8011ada:	2301      	movs	r3, #1
 8011adc:	7023      	strb	r3, [r4, #0]
 8011ade:	e6a2      	b.n	8011826 <uxr_read_framed_msg+0x22>
 8011ae0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011ae2:	9300      	str	r3, [sp, #0]
 8011ae4:	2301      	movs	r3, #1
 8011ae6:	9301      	str	r3, [sp, #4]
 8011ae8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011aea:	464a      	mov	r2, r9
 8011aec:	4641      	mov	r1, r8
 8011aee:	4620      	mov	r0, r4
 8011af0:	f7ff fe06 	bl	8011700 <uxr_framing_read_transport>
 8011af4:	2800      	cmp	r0, #0
 8011af6:	f43f aec6 	beq.w	8011886 <uxr_read_framed_msg+0x82>
 8011afa:	7823      	ldrb	r3, [r4, #0]
 8011afc:	e693      	b.n	8011826 <uxr_read_framed_msg+0x22>
 8011afe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011b00:	9300      	str	r3, [sp, #0]
 8011b02:	2302      	movs	r3, #2
 8011b04:	e7ef      	b.n	8011ae6 <uxr_read_framed_msg+0x2e2>
 8011b06:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011b08:	9300      	str	r3, [sp, #0]
 8011b0a:	2304      	movs	r3, #4
 8011b0c:	9301      	str	r3, [sp, #4]
 8011b0e:	464a      	mov	r2, r9
 8011b10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011b12:	4641      	mov	r1, r8
 8011b14:	4620      	mov	r0, r4
 8011b16:	f7ff fdf3 	bl	8011700 <uxr_framing_read_transport>
 8011b1a:	2800      	cmp	r0, #0
 8011b1c:	d1ed      	bne.n	8011afa <uxr_read_framed_msg+0x2f6>
 8011b1e:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8011b22:	2b7e      	cmp	r3, #126	@ 0x7e
 8011b24:	d0e9      	beq.n	8011afa <uxr_read_framed_msg+0x2f6>
 8011b26:	e6ae      	b.n	8011886 <uxr_read_framed_msg+0x82>
 8011b28:	30c30c31 	.word	0x30c30c31
 8011b2c:	0801b5ec 	.word	0x0801b5ec
 8011b30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011b32:	9300      	str	r3, [sp, #0]
 8011b34:	2305      	movs	r3, #5
 8011b36:	9301      	str	r3, [sp, #4]
 8011b38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011b3a:	f7ff fde1 	bl	8011700 <uxr_framing_read_transport>
 8011b3e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8011b42:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8011b46:	429a      	cmp	r2, r3
 8011b48:	f43f ae9d 	beq.w	8011886 <uxr_read_framed_msg+0x82>
 8011b4c:	e668      	b.n	8011820 <uxr_read_framed_msg+0x1c>
 8011b4e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011b50:	9300      	str	r3, [sp, #0]
 8011b52:	2303      	movs	r3, #3
 8011b54:	e7c7      	b.n	8011ae6 <uxr_read_framed_msg+0x2e2>
 8011b56:	2305      	movs	r3, #5
 8011b58:	7023      	strb	r3, [r4, #0]
 8011b5a:	e664      	b.n	8011826 <uxr_read_framed_msg+0x22>
 8011b5c:	ee17 8a90 	vmov	r8, s15
 8011b60:	f43f aef2 	beq.w	8011948 <uxr_read_framed_msg+0x144>
 8011b64:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8011b68:	d08e      	beq.n	8011a88 <uxr_read_framed_msg+0x284>
 8011b6a:	ebae 0303 	sub.w	r3, lr, r3
 8011b6e:	3302      	adds	r3, #2
 8011b70:	9301      	str	r3, [sp, #4]
 8011b72:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011b74:	9300      	str	r3, [sp, #0]
 8011b76:	e7b7      	b.n	8011ae8 <uxr_read_framed_msg+0x2e4>
 8011b78:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011b7a:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8011b7e:	7013      	strb	r3, [r2, #0]
 8011b80:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8011b82:	b003      	add	sp, #12
 8011b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b88:	f103 0c01 	add.w	ip, r3, #1
 8011b8c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8011b90:	fba5 0202 	umull	r0, r2, r5, r2
 8011b94:	0892      	lsrs	r2, r2, #2
 8011b96:	202a      	movs	r0, #42	@ 0x2a
 8011b98:	fb00 c212 	mls	r2, r0, r2, ip
 8011b9c:	fa5f fc82 	uxtb.w	ip, r2
 8011ba0:	4561      	cmp	r1, ip
 8011ba2:	d09d      	beq.n	8011ae0 <uxr_read_framed_msg+0x2dc>
 8011ba4:	3302      	adds	r3, #2
 8011ba6:	4422      	add	r2, r4
 8011ba8:	0859      	lsrs	r1, r3, #1
 8011baa:	7892      	ldrb	r2, [r2, #2]
 8011bac:	fba5 c101 	umull	ip, r1, r5, r1
 8011bb0:	0889      	lsrs	r1, r1, #2
 8011bb2:	fb00 3311 	mls	r3, r0, r1, r3
 8011bb6:	2a7e      	cmp	r2, #126	@ 0x7e
 8011bb8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011bbc:	f000 80aa 	beq.w	8011d14 <uxr_read_framed_msg+0x510>
 8011bc0:	f082 0220 	eor.w	r2, r2, #32
 8011bc4:	e654      	b.n	8011870 <uxr_read_framed_msg+0x6c>
 8011bc6:	1c58      	adds	r0, r3, #1
 8011bc8:	0842      	lsrs	r2, r0, #1
 8011bca:	fba5 c202 	umull	ip, r2, r5, r2
 8011bce:	0892      	lsrs	r2, r2, #2
 8011bd0:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8011bd4:	fb0c 0212 	mls	r2, ip, r2, r0
 8011bd8:	b2d0      	uxtb	r0, r2
 8011bda:	4281      	cmp	r1, r0
 8011bdc:	d08f      	beq.n	8011afe <uxr_read_framed_msg+0x2fa>
 8011bde:	4422      	add	r2, r4
 8011be0:	3302      	adds	r3, #2
 8011be2:	7890      	ldrb	r0, [r2, #2]
 8011be4:	085a      	lsrs	r2, r3, #1
 8011be6:	fba5 1202 	umull	r1, r2, r5, r2
 8011bea:	0892      	lsrs	r2, r2, #2
 8011bec:	fb0c 3312 	mls	r3, ip, r2, r3
 8011bf0:	287e      	cmp	r0, #126	@ 0x7e
 8011bf2:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011bf6:	d07d      	beq.n	8011cf4 <uxr_read_framed_msg+0x4f0>
 8011bf8:	f080 0020 	eor.w	r0, r0, #32
 8011bfc:	e660      	b.n	80118c0 <uxr_read_framed_msg+0xbc>
 8011bfe:	1c59      	adds	r1, r3, #1
 8011c00:	084a      	lsrs	r2, r1, #1
 8011c02:	fba5 c202 	umull	ip, r2, r5, r2
 8011c06:	0892      	lsrs	r2, r2, #2
 8011c08:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8011c0c:	fb0c 1212 	mls	r2, ip, r2, r1
 8011c10:	b2d1      	uxtb	r1, r2
 8011c12:	4288      	cmp	r0, r1
 8011c14:	f43f af64 	beq.w	8011ae0 <uxr_read_framed_msg+0x2dc>
 8011c18:	4422      	add	r2, r4
 8011c1a:	3302      	adds	r3, #2
 8011c1c:	7891      	ldrb	r1, [r2, #2]
 8011c1e:	085a      	lsrs	r2, r3, #1
 8011c20:	fba5 0202 	umull	r0, r2, r5, r2
 8011c24:	0892      	lsrs	r2, r2, #2
 8011c26:	fb0c 3312 	mls	r3, ip, r2, r3
 8011c2a:	297e      	cmp	r1, #126	@ 0x7e
 8011c2c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011c30:	d070      	beq.n	8011d14 <uxr_read_framed_msg+0x510>
 8011c32:	f081 0120 	eor.w	r1, r1, #32
 8011c36:	e6a3      	b.n	8011980 <uxr_read_framed_msg+0x17c>
 8011c38:	f103 0c01 	add.w	ip, r3, #1
 8011c3c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8011c40:	fba5 0202 	umull	r0, r2, r5, r2
 8011c44:	0892      	lsrs	r2, r2, #2
 8011c46:	202a      	movs	r0, #42	@ 0x2a
 8011c48:	fb00 c212 	mls	r2, r0, r2, ip
 8011c4c:	fa5f fc82 	uxtb.w	ip, r2
 8011c50:	4561      	cmp	r1, ip
 8011c52:	f43f af58 	beq.w	8011b06 <uxr_read_framed_msg+0x302>
 8011c56:	4422      	add	r2, r4
 8011c58:	3302      	adds	r3, #2
 8011c5a:	7891      	ldrb	r1, [r2, #2]
 8011c5c:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8011c60:	085a      	lsrs	r2, r3, #1
 8011c62:	fba5 c202 	umull	ip, r2, r5, r2
 8011c66:	0892      	lsrs	r2, r2, #2
 8011c68:	fb00 3312 	mls	r3, r0, r2, r3
 8011c6c:	297e      	cmp	r1, #126	@ 0x7e
 8011c6e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011c72:	f43f af48 	beq.w	8011b06 <uxr_read_framed_msg+0x302>
 8011c76:	f081 0120 	eor.w	r1, r1, #32
 8011c7a:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8011c7e:	e6e8      	b.n	8011a52 <uxr_read_framed_msg+0x24e>
 8011c80:	1c58      	adds	r0, r3, #1
 8011c82:	0842      	lsrs	r2, r0, #1
 8011c84:	fba5 c202 	umull	ip, r2, r5, r2
 8011c88:	0892      	lsrs	r2, r2, #2
 8011c8a:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8011c8e:	fb0c 0212 	mls	r2, ip, r2, r0
 8011c92:	b2d0      	uxtb	r0, r2
 8011c94:	4281      	cmp	r1, r0
 8011c96:	f43f af32 	beq.w	8011afe <uxr_read_framed_msg+0x2fa>
 8011c9a:	4422      	add	r2, r4
 8011c9c:	3302      	adds	r3, #2
 8011c9e:	7890      	ldrb	r0, [r2, #2]
 8011ca0:	085a      	lsrs	r2, r3, #1
 8011ca2:	fba5 1202 	umull	r1, r2, r5, r2
 8011ca6:	0892      	lsrs	r2, r2, #2
 8011ca8:	fb0c 3312 	mls	r3, ip, r2, r3
 8011cac:	287e      	cmp	r0, #126	@ 0x7e
 8011cae:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011cb2:	d01f      	beq.n	8011cf4 <uxr_read_framed_msg+0x4f0>
 8011cb4:	f080 0020 	eor.w	r0, r0, #32
 8011cb8:	e68b      	b.n	80119d2 <uxr_read_framed_msg+0x1ce>
 8011cba:	1c51      	adds	r1, r2, #1
 8011cbc:	084b      	lsrs	r3, r1, #1
 8011cbe:	fba5 c303 	umull	ip, r3, r5, r3
 8011cc2:	089b      	lsrs	r3, r3, #2
 8011cc4:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8011cc8:	fb0c 1313 	mls	r3, ip, r3, r1
 8011ccc:	b2d9      	uxtb	r1, r3
 8011cce:	4288      	cmp	r0, r1
 8011cd0:	f43f af3d 	beq.w	8011b4e <uxr_read_framed_msg+0x34a>
 8011cd4:	3202      	adds	r2, #2
 8011cd6:	4423      	add	r3, r4
 8011cd8:	0850      	lsrs	r0, r2, #1
 8011cda:	789b      	ldrb	r3, [r3, #2]
 8011cdc:	fba5 1000 	umull	r1, r0, r5, r0
 8011ce0:	0880      	lsrs	r0, r0, #2
 8011ce2:	fb0c 2210 	mls	r2, ip, r0, r2
 8011ce6:	2b7e      	cmp	r3, #126	@ 0x7e
 8011ce8:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8011cec:	d016      	beq.n	8011d1c <uxr_read_framed_msg+0x518>
 8011cee:	f083 0120 	eor.w	r1, r3, #32
 8011cf2:	e68b      	b.n	8011a0c <uxr_read_framed_msg+0x208>
 8011cf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011cf6:	9300      	str	r3, [sp, #0]
 8011cf8:	2302      	movs	r3, #2
 8011cfa:	9301      	str	r3, [sp, #4]
 8011cfc:	464a      	mov	r2, r9
 8011cfe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011d00:	4641      	mov	r1, r8
 8011d02:	4620      	mov	r0, r4
 8011d04:	f7ff fcfc 	bl	8011700 <uxr_framing_read_transport>
 8011d08:	2800      	cmp	r0, #0
 8011d0a:	f47f aef6 	bne.w	8011afa <uxr_read_framed_msg+0x2f6>
 8011d0e:	2301      	movs	r3, #1
 8011d10:	7023      	strb	r3, [r4, #0]
 8011d12:	e588      	b.n	8011826 <uxr_read_framed_msg+0x22>
 8011d14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011d16:	9300      	str	r3, [sp, #0]
 8011d18:	2301      	movs	r3, #1
 8011d1a:	e7ee      	b.n	8011cfa <uxr_read_framed_msg+0x4f6>
 8011d1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011d1e:	9300      	str	r3, [sp, #0]
 8011d20:	2303      	movs	r3, #3
 8011d22:	e7ea      	b.n	8011cfa <uxr_read_framed_msg+0x4f6>
 8011d24:	ee17 8a90 	vmov	r8, s15
 8011d28:	e6ae      	b.n	8011a88 <uxr_read_framed_msg+0x284>
 8011d2a:	bf00      	nop

08011d2c <uxr_stream_id>:
 8011d2c:	2901      	cmp	r1, #1
 8011d2e:	b082      	sub	sp, #8
 8011d30:	d01d      	beq.n	8011d6e <uxr_stream_id+0x42>
 8011d32:	2902      	cmp	r1, #2
 8011d34:	f04f 0c00 	mov.w	ip, #0
 8011d38:	d01e      	beq.n	8011d78 <uxr_stream_id+0x4c>
 8011d3a:	2300      	movs	r3, #0
 8011d3c:	f36c 0307 	bfi	r3, ip, #0, #8
 8011d40:	f360 230f 	bfi	r3, r0, #8, #8
 8011d44:	f361 4317 	bfi	r3, r1, #16, #8
 8011d48:	f362 631f 	bfi	r3, r2, #24, #8
 8011d4c:	b2da      	uxtb	r2, r3
 8011d4e:	2000      	movs	r0, #0
 8011d50:	f362 0007 	bfi	r0, r2, #0, #8
 8011d54:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8011d58:	f362 200f 	bfi	r0, r2, #8, #8
 8011d5c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011d60:	f362 4017 	bfi	r0, r2, #16, #8
 8011d64:	0e1b      	lsrs	r3, r3, #24
 8011d66:	f363 601f 	bfi	r0, r3, #24, #8
 8011d6a:	b002      	add	sp, #8
 8011d6c:	4770      	bx	lr
 8011d6e:	f100 0c01 	add.w	ip, r0, #1
 8011d72:	fa5f fc8c 	uxtb.w	ip, ip
 8011d76:	e7e0      	b.n	8011d3a <uxr_stream_id+0xe>
 8011d78:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 8011d7c:	e7dd      	b.n	8011d3a <uxr_stream_id+0xe>
 8011d7e:	bf00      	nop

08011d80 <uxr_stream_id_from_raw>:
 8011d80:	b082      	sub	sp, #8
 8011d82:	b130      	cbz	r0, 8011d92 <uxr_stream_id_from_raw+0x12>
 8011d84:	0603      	lsls	r3, r0, #24
 8011d86:	d420      	bmi.n	8011dca <uxr_stream_id_from_raw+0x4a>
 8011d88:	1e42      	subs	r2, r0, #1
 8011d8a:	b2d2      	uxtb	r2, r2
 8011d8c:	f04f 0c01 	mov.w	ip, #1
 8011d90:	e001      	b.n	8011d96 <uxr_stream_id_from_raw+0x16>
 8011d92:	4684      	mov	ip, r0
 8011d94:	4602      	mov	r2, r0
 8011d96:	2300      	movs	r3, #0
 8011d98:	f360 0307 	bfi	r3, r0, #0, #8
 8011d9c:	f362 230f 	bfi	r3, r2, #8, #8
 8011da0:	f36c 4317 	bfi	r3, ip, #16, #8
 8011da4:	f361 631f 	bfi	r3, r1, #24, #8
 8011da8:	b2da      	uxtb	r2, r3
 8011daa:	2000      	movs	r0, #0
 8011dac:	f362 0007 	bfi	r0, r2, #0, #8
 8011db0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8011db4:	f362 200f 	bfi	r0, r2, #8, #8
 8011db8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011dbc:	f362 4017 	bfi	r0, r2, #16, #8
 8011dc0:	0e1b      	lsrs	r3, r3, #24
 8011dc2:	f363 601f 	bfi	r0, r3, #24, #8
 8011dc6:	b002      	add	sp, #8
 8011dc8:	4770      	bx	lr
 8011dca:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8011dce:	f04f 0c02 	mov.w	ip, #2
 8011dd2:	e7e0      	b.n	8011d96 <uxr_stream_id_from_raw+0x16>

08011dd4 <uxr_init_stream_storage>:
 8011dd4:	2300      	movs	r3, #0
 8011dd6:	7403      	strb	r3, [r0, #16]
 8011dd8:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8011ddc:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8011de0:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8011de4:	4770      	bx	lr
 8011de6:	bf00      	nop

08011de8 <uxr_reset_stream_storage>:
 8011de8:	b570      	push	{r4, r5, r6, lr}
 8011dea:	7c03      	ldrb	r3, [r0, #16]
 8011dec:	4604      	mov	r4, r0
 8011dee:	b153      	cbz	r3, 8011e06 <uxr_reset_stream_storage+0x1e>
 8011df0:	4606      	mov	r6, r0
 8011df2:	2500      	movs	r5, #0
 8011df4:	4630      	mov	r0, r6
 8011df6:	f005 fe2d 	bl	8017a54 <uxr_reset_output_best_effort_stream>
 8011dfa:	7c23      	ldrb	r3, [r4, #16]
 8011dfc:	3501      	adds	r5, #1
 8011dfe:	42ab      	cmp	r3, r5
 8011e00:	f106 0610 	add.w	r6, r6, #16
 8011e04:	d8f6      	bhi.n	8011df4 <uxr_reset_stream_storage+0xc>
 8011e06:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8011e0a:	b163      	cbz	r3, 8011e26 <uxr_reset_stream_storage+0x3e>
 8011e0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011e10:	2500      	movs	r5, #0
 8011e12:	4630      	mov	r0, r6
 8011e14:	f005 fc20 	bl	8017658 <uxr_reset_input_best_effort_stream>
 8011e18:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8011e1c:	3501      	adds	r5, #1
 8011e1e:	42ab      	cmp	r3, r5
 8011e20:	f106 0602 	add.w	r6, r6, #2
 8011e24:	d8f5      	bhi.n	8011e12 <uxr_reset_stream_storage+0x2a>
 8011e26:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8011e2a:	b163      	cbz	r3, 8011e46 <uxr_reset_stream_storage+0x5e>
 8011e2c:	f104 0618 	add.w	r6, r4, #24
 8011e30:	2500      	movs	r5, #0
 8011e32:	4630      	mov	r0, r6
 8011e34:	f005 feba 	bl	8017bac <uxr_reset_output_reliable_stream>
 8011e38:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8011e3c:	3501      	adds	r5, #1
 8011e3e:	42ab      	cmp	r3, r5
 8011e40:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 8011e44:	d8f5      	bhi.n	8011e32 <uxr_reset_stream_storage+0x4a>
 8011e46:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8011e4a:	b163      	cbz	r3, 8011e66 <uxr_reset_stream_storage+0x7e>
 8011e4c:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8011e50:	2500      	movs	r5, #0
 8011e52:	4630      	mov	r0, r6
 8011e54:	f005 fc74 	bl	8017740 <uxr_reset_input_reliable_stream>
 8011e58:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8011e5c:	3501      	adds	r5, #1
 8011e5e:	42ab      	cmp	r3, r5
 8011e60:	f106 0618 	add.w	r6, r6, #24
 8011e64:	d8f5      	bhi.n	8011e52 <uxr_reset_stream_storage+0x6a>
 8011e66:	bd70      	pop	{r4, r5, r6, pc}

08011e68 <uxr_add_output_best_effort_buffer>:
 8011e68:	b510      	push	{r4, lr}
 8011e6a:	7c04      	ldrb	r4, [r0, #16]
 8011e6c:	f104 0c01 	add.w	ip, r4, #1
 8011e70:	b082      	sub	sp, #8
 8011e72:	f880 c010 	strb.w	ip, [r0, #16]
 8011e76:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8011e7a:	f005 fde1 	bl	8017a40 <uxr_init_output_best_effort_stream>
 8011e7e:	2201      	movs	r2, #1
 8011e80:	4611      	mov	r1, r2
 8011e82:	4620      	mov	r0, r4
 8011e84:	b002      	add	sp, #8
 8011e86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011e8a:	f7ff bf4f 	b.w	8011d2c <uxr_stream_id>
 8011e8e:	bf00      	nop

08011e90 <uxr_add_output_reliable_buffer>:
 8011e90:	b510      	push	{r4, lr}
 8011e92:	b084      	sub	sp, #16
 8011e94:	4684      	mov	ip, r0
 8011e96:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8011e9a:	9000      	str	r0, [sp, #0]
 8011e9c:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8011ea0:	2028      	movs	r0, #40	@ 0x28
 8011ea2:	fb00 c004 	mla	r0, r0, r4, ip
 8011ea6:	f104 0e01 	add.w	lr, r4, #1
 8011eaa:	3018      	adds	r0, #24
 8011eac:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8011eb0:	f005 fe44 	bl	8017b3c <uxr_init_output_reliable_stream>
 8011eb4:	2201      	movs	r2, #1
 8011eb6:	2102      	movs	r1, #2
 8011eb8:	4620      	mov	r0, r4
 8011eba:	b004      	add	sp, #16
 8011ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ec0:	f7ff bf34 	b.w	8011d2c <uxr_stream_id>

08011ec4 <uxr_add_input_best_effort_buffer>:
 8011ec4:	b510      	push	{r4, lr}
 8011ec6:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8011eca:	4603      	mov	r3, r0
 8011ecc:	1c62      	adds	r2, r4, #1
 8011ece:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 8011ed2:	b082      	sub	sp, #8
 8011ed4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8011ed8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011edc:	f005 fbb8 	bl	8017650 <uxr_init_input_best_effort_stream>
 8011ee0:	2200      	movs	r2, #0
 8011ee2:	2101      	movs	r1, #1
 8011ee4:	4620      	mov	r0, r4
 8011ee6:	b002      	add	sp, #8
 8011ee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011eec:	f7ff bf1e 	b.w	8011d2c <uxr_stream_id>

08011ef0 <uxr_add_input_reliable_buffer>:
 8011ef0:	b510      	push	{r4, lr}
 8011ef2:	b084      	sub	sp, #16
 8011ef4:	4684      	mov	ip, r0
 8011ef6:	9806      	ldr	r0, [sp, #24]
 8011ef8:	9000      	str	r0, [sp, #0]
 8011efa:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8011efe:	2018      	movs	r0, #24
 8011f00:	fb00 c004 	mla	r0, r0, r4, ip
 8011f04:	f104 0e01 	add.w	lr, r4, #1
 8011f08:	3048      	adds	r0, #72	@ 0x48
 8011f0a:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8011f0e:	f005 fbeb 	bl	80176e8 <uxr_init_input_reliable_stream>
 8011f12:	2200      	movs	r2, #0
 8011f14:	2102      	movs	r1, #2
 8011f16:	4620      	mov	r0, r4
 8011f18:	b004      	add	sp, #16
 8011f1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f1e:	f7ff bf05 	b.w	8011d2c <uxr_stream_id>
 8011f22:	bf00      	nop

08011f24 <uxr_get_output_best_effort_stream>:
 8011f24:	7c03      	ldrb	r3, [r0, #16]
 8011f26:	428b      	cmp	r3, r1
 8011f28:	bf8c      	ite	hi
 8011f2a:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8011f2e:	2000      	movls	r0, #0
 8011f30:	4770      	bx	lr
 8011f32:	bf00      	nop

08011f34 <uxr_get_output_reliable_stream>:
 8011f34:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8011f38:	428b      	cmp	r3, r1
 8011f3a:	bf83      	ittte	hi
 8011f3c:	2328      	movhi	r3, #40	@ 0x28
 8011f3e:	fb03 0001 	mlahi	r0, r3, r1, r0
 8011f42:	3018      	addhi	r0, #24
 8011f44:	2000      	movls	r0, #0
 8011f46:	4770      	bx	lr

08011f48 <uxr_get_input_best_effort_stream>:
 8011f48:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8011f4c:	428b      	cmp	r3, r1
 8011f4e:	bf86      	itte	hi
 8011f50:	3121      	addhi	r1, #33	@ 0x21
 8011f52:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 8011f56:	2000      	movls	r0, #0
 8011f58:	4770      	bx	lr
 8011f5a:	bf00      	nop

08011f5c <uxr_get_input_reliable_stream>:
 8011f5c:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8011f60:	428b      	cmp	r3, r1
 8011f62:	bf83      	ittte	hi
 8011f64:	2318      	movhi	r3, #24
 8011f66:	fb03 0001 	mlahi	r0, r3, r1, r0
 8011f6a:	3048      	addhi	r0, #72	@ 0x48
 8011f6c:	2000      	movls	r0, #0
 8011f6e:	4770      	bx	lr

08011f70 <uxr_output_streams_confirmed>:
 8011f70:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8011f74:	b183      	cbz	r3, 8011f98 <uxr_output_streams_confirmed+0x28>
 8011f76:	b570      	push	{r4, r5, r6, lr}
 8011f78:	4606      	mov	r6, r0
 8011f7a:	f100 0518 	add.w	r5, r0, #24
 8011f7e:	2400      	movs	r4, #0
 8011f80:	e001      	b.n	8011f86 <uxr_output_streams_confirmed+0x16>
 8011f82:	3528      	adds	r5, #40	@ 0x28
 8011f84:	b138      	cbz	r0, 8011f96 <uxr_output_streams_confirmed+0x26>
 8011f86:	4628      	mov	r0, r5
 8011f88:	f006 f880 	bl	801808c <uxr_is_output_up_to_date>
 8011f8c:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8011f90:	3401      	adds	r4, #1
 8011f92:	42a3      	cmp	r3, r4
 8011f94:	d8f5      	bhi.n	8011f82 <uxr_output_streams_confirmed+0x12>
 8011f96:	bd70      	pop	{r4, r5, r6, pc}
 8011f98:	2001      	movs	r0, #1
 8011f9a:	4770      	bx	lr

08011f9c <uxr_buffer_submessage_header>:
 8011f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f9e:	4604      	mov	r4, r0
 8011fa0:	460e      	mov	r6, r1
 8011fa2:	2104      	movs	r1, #4
 8011fa4:	4615      	mov	r5, r2
 8011fa6:	461f      	mov	r7, r3
 8011fa8:	f7fa f87e 	bl	800c0a8 <ucdr_align_to>
 8011fac:	2301      	movs	r3, #1
 8011fae:	ea47 0203 	orr.w	r2, r7, r3
 8011fb2:	4631      	mov	r1, r6
 8011fb4:	7523      	strb	r3, [r4, #20]
 8011fb6:	4620      	mov	r0, r4
 8011fb8:	462b      	mov	r3, r5
 8011fba:	f000 fa27 	bl	801240c <uxr_serialize_submessage_header>
 8011fbe:	4620      	mov	r0, r4
 8011fc0:	f7fa f888 	bl	800c0d4 <ucdr_buffer_remaining>
 8011fc4:	42a8      	cmp	r0, r5
 8011fc6:	bf34      	ite	cc
 8011fc8:	2000      	movcc	r0, #0
 8011fca:	2001      	movcs	r0, #1
 8011fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011fce:	bf00      	nop

08011fd0 <uxr_read_submessage_header>:
 8011fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fd4:	4604      	mov	r4, r0
 8011fd6:	460d      	mov	r5, r1
 8011fd8:	2104      	movs	r1, #4
 8011fda:	4616      	mov	r6, r2
 8011fdc:	4698      	mov	r8, r3
 8011fde:	f7fa f863 	bl	800c0a8 <ucdr_align_to>
 8011fe2:	4620      	mov	r0, r4
 8011fe4:	f7fa f876 	bl	800c0d4 <ucdr_buffer_remaining>
 8011fe8:	2803      	cmp	r0, #3
 8011fea:	bf8c      	ite	hi
 8011fec:	2701      	movhi	r7, #1
 8011fee:	2700      	movls	r7, #0
 8011ff0:	d802      	bhi.n	8011ff8 <uxr_read_submessage_header+0x28>
 8011ff2:	4638      	mov	r0, r7
 8011ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ff8:	4633      	mov	r3, r6
 8011ffa:	4642      	mov	r2, r8
 8011ffc:	4620      	mov	r0, r4
 8011ffe:	4629      	mov	r1, r5
 8012000:	f000 fa18 	bl	8012434 <uxr_deserialize_submessage_header>
 8012004:	f898 3000 	ldrb.w	r3, [r8]
 8012008:	f003 0201 	and.w	r2, r3, #1
 801200c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8012010:	f888 3000 	strb.w	r3, [r8]
 8012014:	7522      	strb	r2, [r4, #20]
 8012016:	4638      	mov	r0, r7
 8012018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801201c <uxr_submessage_padding>:
 801201c:	f010 0003 	ands.w	r0, r0, #3
 8012020:	bf18      	it	ne
 8012022:	f1c0 0004 	rsbne	r0, r0, #4
 8012026:	4770      	bx	lr

08012028 <uxr_millis>:
 8012028:	b510      	push	{r4, lr}
 801202a:	b084      	sub	sp, #16
 801202c:	4669      	mov	r1, sp
 801202e:	2001      	movs	r0, #1
 8012030:	f7f0 f83e 	bl	80020b0 <clock_gettime>
 8012034:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8012038:	4906      	ldr	r1, [pc, #24]	@ (8012054 <uxr_millis+0x2c>)
 801203a:	fba0 0301 	umull	r0, r3, r0, r1
 801203e:	1900      	adds	r0, r0, r4
 8012040:	fb01 3102 	mla	r1, r1, r2, r3
 8012044:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8012048:	4a03      	ldr	r2, [pc, #12]	@ (8012058 <uxr_millis+0x30>)
 801204a:	2300      	movs	r3, #0
 801204c:	f7ee fdbc 	bl	8000bc8 <__aeabi_ldivmod>
 8012050:	b004      	add	sp, #16
 8012052:	bd10      	pop	{r4, pc}
 8012054:	3b9aca00 	.word	0x3b9aca00
 8012058:	000f4240 	.word	0x000f4240

0801205c <uxr_nanos>:
 801205c:	b510      	push	{r4, lr}
 801205e:	b084      	sub	sp, #16
 8012060:	4669      	mov	r1, sp
 8012062:	2001      	movs	r0, #1
 8012064:	f7f0 f824 	bl	80020b0 <clock_gettime>
 8012068:	4a06      	ldr	r2, [pc, #24]	@ (8012084 <uxr_nanos+0x28>)
 801206a:	9800      	ldr	r0, [sp, #0]
 801206c:	9902      	ldr	r1, [sp, #8]
 801206e:	9c01      	ldr	r4, [sp, #4]
 8012070:	fba0 0302 	umull	r0, r3, r0, r2
 8012074:	1840      	adds	r0, r0, r1
 8012076:	fb02 3304 	mla	r3, r2, r4, r3
 801207a:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 801207e:	b004      	add	sp, #16
 8012080:	bd10      	pop	{r4, pc}
 8012082:	bf00      	nop
 8012084:	3b9aca00 	.word	0x3b9aca00

08012088 <on_full_output_buffer_fragmented>:
 8012088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801208c:	460c      	mov	r4, r1
 801208e:	b08a      	sub	sp, #40	@ 0x28
 8012090:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8012094:	4606      	mov	r6, r0
 8012096:	f104 0008 	add.w	r0, r4, #8
 801209a:	f7ff ff4b 	bl	8011f34 <uxr_get_output_reliable_stream>
 801209e:	4605      	mov	r5, r0
 80120a0:	f005 fffe 	bl	80180a0 <get_available_free_slots>
 80120a4:	b968      	cbnz	r0, 80120c2 <on_full_output_buffer_fragmented+0x3a>
 80120a6:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 80120aa:	4620      	mov	r0, r4
 80120ac:	4798      	blx	r3
 80120ae:	b918      	cbnz	r0, 80120b8 <on_full_output_buffer_fragmented+0x30>
 80120b0:	2001      	movs	r0, #1
 80120b2:	b00a      	add	sp, #40	@ 0x28
 80120b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120b8:	4628      	mov	r0, r5
 80120ba:	f005 fff1 	bl	80180a0 <get_available_free_slots>
 80120be:	2800      	cmp	r0, #0
 80120c0:	d0f6      	beq.n	80120b0 <on_full_output_buffer_fragmented+0x28>
 80120c2:	8929      	ldrh	r1, [r5, #8]
 80120c4:	89eb      	ldrh	r3, [r5, #14]
 80120c6:	7b28      	ldrb	r0, [r5, #12]
 80120c8:	686a      	ldr	r2, [r5, #4]
 80120ca:	fbb2 f8f1 	udiv	r8, r2, r1
 80120ce:	fbb3 f2f1 	udiv	r2, r3, r1
 80120d2:	fb01 3112 	mls	r1, r1, r2, r3
 80120d6:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 80120da:	b289      	uxth	r1, r1
 80120dc:	fb08 f101 	mul.w	r1, r8, r1
 80120e0:	30fc      	adds	r0, #252	@ 0xfc
 80120e2:	f1a8 0804 	sub.w	r8, r8, #4
 80120e6:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 80120ea:	4440      	add	r0, r8
 80120ec:	b287      	uxth	r7, r0
 80120ee:	1bdb      	subs	r3, r3, r7
 80120f0:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 80120f4:	682b      	ldr	r3, [r5, #0]
 80120f6:	3104      	adds	r1, #4
 80120f8:	4419      	add	r1, r3
 80120fa:	4642      	mov	r2, r8
 80120fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012100:	9300      	str	r3, [sp, #0]
 8012102:	a802      	add	r0, sp, #8
 8012104:	2300      	movs	r3, #0
 8012106:	f7f9 ffa3 	bl	800c050 <ucdr_init_buffer_origin_offset>
 801210a:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 801210e:	f102 0308 	add.w	r3, r2, #8
 8012112:	4543      	cmp	r3, r8
 8012114:	d928      	bls.n	8012168 <on_full_output_buffer_fragmented+0xe0>
 8012116:	463a      	mov	r2, r7
 8012118:	2300      	movs	r3, #0
 801211a:	210d      	movs	r1, #13
 801211c:	a802      	add	r0, sp, #8
 801211e:	f7ff ff3d 	bl	8011f9c <uxr_buffer_submessage_header>
 8012122:	8929      	ldrh	r1, [r5, #8]
 8012124:	89eb      	ldrh	r3, [r5, #14]
 8012126:	fbb3 f2f1 	udiv	r2, r3, r1
 801212a:	fb01 3312 	mls	r3, r1, r2, r3
 801212e:	b29b      	uxth	r3, r3
 8012130:	686a      	ldr	r2, [r5, #4]
 8012132:	fbb2 f2f1 	udiv	r2, r2, r1
 8012136:	fb02 f303 	mul.w	r3, r2, r3
 801213a:	682a      	ldr	r2, [r5, #0]
 801213c:	f842 8003 	str.w	r8, [r2, r3]
 8012140:	89e8      	ldrh	r0, [r5, #14]
 8012142:	2101      	movs	r1, #1
 8012144:	f005 ffcc 	bl	80180e0 <uxr_seq_num_add>
 8012148:	9904      	ldr	r1, [sp, #16]
 801214a:	9a03      	ldr	r2, [sp, #12]
 801214c:	81e8      	strh	r0, [r5, #14]
 801214e:	1a52      	subs	r2, r2, r1
 8012150:	4630      	mov	r0, r6
 8012152:	f7f9 ff8f 	bl	800c074 <ucdr_init_buffer>
 8012156:	4630      	mov	r0, r6
 8012158:	490f      	ldr	r1, [pc, #60]	@ (8012198 <on_full_output_buffer_fragmented+0x110>)
 801215a:	4622      	mov	r2, r4
 801215c:	f7f9 ff5e 	bl	800c01c <ucdr_set_on_full_buffer_callback>
 8012160:	2000      	movs	r0, #0
 8012162:	b00a      	add	sp, #40	@ 0x28
 8012164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012168:	b292      	uxth	r2, r2
 801216a:	2302      	movs	r3, #2
 801216c:	210d      	movs	r1, #13
 801216e:	a802      	add	r0, sp, #8
 8012170:	f7ff ff14 	bl	8011f9c <uxr_buffer_submessage_header>
 8012174:	8928      	ldrh	r0, [r5, #8]
 8012176:	89eb      	ldrh	r3, [r5, #14]
 8012178:	fbb3 f1f0 	udiv	r1, r3, r0
 801217c:	fb00 3311 	mls	r3, r0, r1, r3
 8012180:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8012184:	6869      	ldr	r1, [r5, #4]
 8012186:	fbb1 f1f0 	udiv	r1, r1, r0
 801218a:	b29b      	uxth	r3, r3
 801218c:	fb01 f303 	mul.w	r3, r1, r3
 8012190:	6829      	ldr	r1, [r5, #0]
 8012192:	3208      	adds	r2, #8
 8012194:	50ca      	str	r2, [r1, r3]
 8012196:	e7d3      	b.n	8012140 <on_full_output_buffer_fragmented+0xb8>
 8012198:	08012089 	.word	0x08012089

0801219c <uxr_prepare_output_stream>:
 801219c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801219e:	b087      	sub	sp, #28
 80121a0:	2707      	movs	r7, #7
 80121a2:	9202      	str	r2, [sp, #8]
 80121a4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80121a6:	9103      	str	r1, [sp, #12]
 80121a8:	2500      	movs	r5, #0
 80121aa:	3204      	adds	r2, #4
 80121ac:	e9cd 7500 	strd	r7, r5, [sp]
 80121b0:	461c      	mov	r4, r3
 80121b2:	4606      	mov	r6, r0
 80121b4:	f7fe ffc2 	bl	801113c <uxr_prepare_stream_to_write_submessage>
 80121b8:	f080 0201 	eor.w	r2, r0, #1
 80121bc:	b2d2      	uxtb	r2, r2
 80121be:	75a2      	strb	r2, [r4, #22]
 80121c0:	b112      	cbz	r2, 80121c8 <uxr_prepare_output_stream+0x2c>
 80121c2:	4628      	mov	r0, r5
 80121c4:	b007      	add	sp, #28
 80121c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80121c8:	aa05      	add	r2, sp, #20
 80121ca:	9902      	ldr	r1, [sp, #8]
 80121cc:	4630      	mov	r0, r6
 80121ce:	f7ff f8eb 	bl	80113a8 <uxr_init_base_object_request>
 80121d2:	a905      	add	r1, sp, #20
 80121d4:	4605      	mov	r5, r0
 80121d6:	4620      	mov	r0, r4
 80121d8:	f000 ffd4 	bl	8013184 <uxr_serialize_WRITE_DATA_Payload_Data>
 80121dc:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 80121e0:	69a6      	ldr	r6, [r4, #24]
 80121e2:	69e7      	ldr	r7, [r4, #28]
 80121e4:	1a52      	subs	r2, r2, r1
 80121e6:	4620      	mov	r0, r4
 80121e8:	f7f9 ff44 	bl	800c074 <ucdr_init_buffer>
 80121ec:	4620      	mov	r0, r4
 80121ee:	463a      	mov	r2, r7
 80121f0:	4631      	mov	r1, r6
 80121f2:	f7f9 ff13 	bl	800c01c <ucdr_set_on_full_buffer_callback>
 80121f6:	4628      	mov	r0, r5
 80121f8:	b007      	add	sp, #28
 80121fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080121fc <uxr_prepare_output_stream_fragmented>:
 80121fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012200:	b091      	sub	sp, #68	@ 0x44
 8012202:	4605      	mov	r5, r0
 8012204:	9105      	str	r1, [sp, #20]
 8012206:	3008      	adds	r0, #8
 8012208:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801220c:	461e      	mov	r6, r3
 801220e:	9204      	str	r2, [sp, #16]
 8012210:	f7ff fe90 	bl	8011f34 <uxr_get_output_reliable_stream>
 8012214:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8012218:	2b01      	cmp	r3, #1
 801221a:	f000 8091 	beq.w	8012340 <uxr_prepare_output_stream_fragmented+0x144>
 801221e:	4604      	mov	r4, r0
 8012220:	2800      	cmp	r0, #0
 8012222:	f000 808d 	beq.w	8012340 <uxr_prepare_output_stream_fragmented+0x144>
 8012226:	f005 ff3b 	bl	80180a0 <get_available_free_slots>
 801222a:	2800      	cmp	r0, #0
 801222c:	f000 8083 	beq.w	8012336 <uxr_prepare_output_stream_fragmented+0x13a>
 8012230:	8922      	ldrh	r2, [r4, #8]
 8012232:	89e7      	ldrh	r7, [r4, #14]
 8012234:	fbb7 f9f2 	udiv	r9, r7, r2
 8012238:	fb02 7919 	mls	r9, r2, r9, r7
 801223c:	fa1f f989 	uxth.w	r9, r9
 8012240:	6863      	ldr	r3, [r4, #4]
 8012242:	fbb3 f2f2 	udiv	r2, r3, r2
 8012246:	6823      	ldr	r3, [r4, #0]
 8012248:	9203      	str	r2, [sp, #12]
 801224a:	fb02 f909 	mul.w	r9, r2, r9
 801224e:	f109 0904 	add.w	r9, r9, #4
 8012252:	4499      	add	r9, r3
 8012254:	7b23      	ldrb	r3, [r4, #12]
 8012256:	f859 8c04 	ldr.w	r8, [r9, #-4]
 801225a:	4543      	cmp	r3, r8
 801225c:	f1a2 0b04 	sub.w	fp, r2, #4
 8012260:	d37a      	bcc.n	8012358 <uxr_prepare_output_stream_fragmented+0x15c>
 8012262:	f1ab 0a04 	sub.w	sl, fp, #4
 8012266:	ebaa 0a03 	sub.w	sl, sl, r3
 801226a:	465a      	mov	r2, fp
 801226c:	2300      	movs	r3, #0
 801226e:	4649      	mov	r1, r9
 8012270:	a808      	add	r0, sp, #32
 8012272:	f8cd 8000 	str.w	r8, [sp]
 8012276:	f7f9 feeb 	bl	800c050 <ucdr_init_buffer_origin_offset>
 801227a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801227c:	fa1f fa8a 	uxth.w	sl, sl
 8012280:	4652      	mov	r2, sl
 8012282:	f103 0a08 	add.w	sl, r3, #8
 8012286:	45da      	cmp	sl, fp
 8012288:	bf34      	ite	cc
 801228a:	2302      	movcc	r3, #2
 801228c:	2300      	movcs	r3, #0
 801228e:	210d      	movs	r1, #13
 8012290:	a808      	add	r0, sp, #32
 8012292:	f7ff fe83 	bl	8011f9c <uxr_buffer_submessage_header>
 8012296:	8921      	ldrh	r1, [r4, #8]
 8012298:	fbb7 f2f1 	udiv	r2, r7, r1
 801229c:	fb01 7212 	mls	r2, r1, r2, r7
 80122a0:	b292      	uxth	r2, r2
 80122a2:	6863      	ldr	r3, [r4, #4]
 80122a4:	fbb3 f3f1 	udiv	r3, r3, r1
 80122a8:	fb02 f303 	mul.w	r3, r2, r3
 80122ac:	6822      	ldr	r2, [r4, #0]
 80122ae:	4638      	mov	r0, r7
 80122b0:	f842 b003 	str.w	fp, [r2, r3]
 80122b4:	2101      	movs	r1, #1
 80122b6:	f005 ff13 	bl	80180e0 <uxr_seq_num_add>
 80122ba:	9b03      	ldr	r3, [sp, #12]
 80122bc:	f108 0104 	add.w	r1, r8, #4
 80122c0:	f1a3 0208 	sub.w	r2, r3, #8
 80122c4:	eba2 0208 	sub.w	r2, r2, r8
 80122c8:	4449      	add	r1, r9
 80122ca:	4607      	mov	r7, r0
 80122cc:	4630      	mov	r0, r6
 80122ce:	f7f9 fed1 	bl	800c074 <ucdr_init_buffer>
 80122d2:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80122d4:	81e7      	strh	r7, [r4, #14]
 80122d6:	1d1a      	adds	r2, r3, #4
 80122d8:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 80122dc:	bf28      	it	cs
 80122de:	2200      	movcs	r2, #0
 80122e0:	2300      	movs	r3, #0
 80122e2:	b292      	uxth	r2, r2
 80122e4:	2107      	movs	r1, #7
 80122e6:	4630      	mov	r0, r6
 80122e8:	f7ff fe58 	bl	8011f9c <uxr_buffer_submessage_header>
 80122ec:	9904      	ldr	r1, [sp, #16]
 80122ee:	aa07      	add	r2, sp, #28
 80122f0:	4628      	mov	r0, r5
 80122f2:	f7ff f859 	bl	80113a8 <uxr_init_base_object_request>
 80122f6:	4604      	mov	r4, r0
 80122f8:	b318      	cbz	r0, 8012342 <uxr_prepare_output_stream_fragmented+0x146>
 80122fa:	a907      	add	r1, sp, #28
 80122fc:	4630      	mov	r0, r6
 80122fe:	f000 ff41 	bl	8013184 <uxr_serialize_WRITE_DATA_Payload_Data>
 8012302:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8012306:	4630      	mov	r0, r6
 8012308:	1a52      	subs	r2, r2, r1
 801230a:	f7f9 feb3 	bl	800c074 <ucdr_init_buffer>
 801230e:	9b05      	ldr	r3, [sp, #20]
 8012310:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8012314:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8012316:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 801231a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801231c:	491b      	ldr	r1, [pc, #108]	@ (801238c <uxr_prepare_output_stream_fragmented+0x190>)
 801231e:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 8012322:	4630      	mov	r0, r6
 8012324:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8012328:	462a      	mov	r2, r5
 801232a:	f7f9 fe77 	bl	800c01c <ucdr_set_on_full_buffer_callback>
 801232e:	4620      	mov	r0, r4
 8012330:	b011      	add	sp, #68	@ 0x44
 8012332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012336:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8012338:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801233a:	4628      	mov	r0, r5
 801233c:	4798      	blx	r3
 801233e:	b920      	cbnz	r0, 801234a <uxr_prepare_output_stream_fragmented+0x14e>
 8012340:	2400      	movs	r4, #0
 8012342:	4620      	mov	r0, r4
 8012344:	b011      	add	sp, #68	@ 0x44
 8012346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801234a:	4620      	mov	r0, r4
 801234c:	f005 fea8 	bl	80180a0 <get_available_free_slots>
 8012350:	2800      	cmp	r0, #0
 8012352:	f47f af6d 	bne.w	8012230 <uxr_prepare_output_stream_fragmented+0x34>
 8012356:	e7f3      	b.n	8012340 <uxr_prepare_output_stream_fragmented+0x144>
 8012358:	4638      	mov	r0, r7
 801235a:	2101      	movs	r1, #1
 801235c:	f005 fec0 	bl	80180e0 <uxr_seq_num_add>
 8012360:	8921      	ldrh	r1, [r4, #8]
 8012362:	fbb0 f2f1 	udiv	r2, r0, r1
 8012366:	fb01 0912 	mls	r9, r1, r2, r0
 801236a:	fa1f f289 	uxth.w	r2, r9
 801236e:	6863      	ldr	r3, [r4, #4]
 8012370:	fbb3 f9f1 	udiv	r9, r3, r1
 8012374:	6823      	ldr	r3, [r4, #0]
 8012376:	fb02 f909 	mul.w	r9, r2, r9
 801237a:	f109 0904 	add.w	r9, r9, #4
 801237e:	4499      	add	r9, r3
 8012380:	4607      	mov	r7, r0
 8012382:	7b23      	ldrb	r3, [r4, #12]
 8012384:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8012388:	e76b      	b.n	8012262 <uxr_prepare_output_stream_fragmented+0x66>
 801238a:	bf00      	nop
 801238c:	08012089 	.word	0x08012089

08012390 <uxr_serialize_message_header>:
 8012390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012392:	b083      	sub	sp, #12
 8012394:	4616      	mov	r6, r2
 8012396:	4604      	mov	r4, r0
 8012398:	9301      	str	r3, [sp, #4]
 801239a:	460d      	mov	r5, r1
 801239c:	9f08      	ldr	r7, [sp, #32]
 801239e:	f7f8 fb87 	bl	800aab0 <ucdr_serialize_uint8_t>
 80123a2:	4631      	mov	r1, r6
 80123a4:	4620      	mov	r0, r4
 80123a6:	f7f8 fb83 	bl	800aab0 <ucdr_serialize_uint8_t>
 80123aa:	9a01      	ldr	r2, [sp, #4]
 80123ac:	2101      	movs	r1, #1
 80123ae:	4620      	mov	r0, r4
 80123b0:	f7f8 fc2a 	bl	800ac08 <ucdr_serialize_endian_uint16_t>
 80123b4:	062b      	lsls	r3, r5, #24
 80123b6:	d501      	bpl.n	80123bc <uxr_serialize_message_header+0x2c>
 80123b8:	b003      	add	sp, #12
 80123ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80123bc:	2204      	movs	r2, #4
 80123be:	4639      	mov	r1, r7
 80123c0:	4620      	mov	r0, r4
 80123c2:	b003      	add	sp, #12
 80123c4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80123c8:	f7fd b9a2 	b.w	800f710 <ucdr_serialize_array_uint8_t>

080123cc <uxr_deserialize_message_header>:
 80123cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80123ce:	b083      	sub	sp, #12
 80123d0:	4616      	mov	r6, r2
 80123d2:	4604      	mov	r4, r0
 80123d4:	9301      	str	r3, [sp, #4]
 80123d6:	460d      	mov	r5, r1
 80123d8:	9f08      	ldr	r7, [sp, #32]
 80123da:	f7f8 fb7f 	bl	800aadc <ucdr_deserialize_uint8_t>
 80123de:	4631      	mov	r1, r6
 80123e0:	4620      	mov	r0, r4
 80123e2:	f7f8 fb7b 	bl	800aadc <ucdr_deserialize_uint8_t>
 80123e6:	9a01      	ldr	r2, [sp, #4]
 80123e8:	2101      	movs	r1, #1
 80123ea:	4620      	mov	r0, r4
 80123ec:	f7f8 fd00 	bl	800adf0 <ucdr_deserialize_endian_uint16_t>
 80123f0:	f995 3000 	ldrsb.w	r3, [r5]
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	da01      	bge.n	80123fc <uxr_deserialize_message_header+0x30>
 80123f8:	b003      	add	sp, #12
 80123fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80123fc:	2204      	movs	r2, #4
 80123fe:	4639      	mov	r1, r7
 8012400:	4620      	mov	r0, r4
 8012402:	b003      	add	sp, #12
 8012404:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012408:	f7fd b9e6 	b.w	800f7d8 <ucdr_deserialize_array_uint8_t>

0801240c <uxr_serialize_submessage_header>:
 801240c:	b530      	push	{r4, r5, lr}
 801240e:	b083      	sub	sp, #12
 8012410:	4615      	mov	r5, r2
 8012412:	4604      	mov	r4, r0
 8012414:	9301      	str	r3, [sp, #4]
 8012416:	f7f8 fb4b 	bl	800aab0 <ucdr_serialize_uint8_t>
 801241a:	4629      	mov	r1, r5
 801241c:	4620      	mov	r0, r4
 801241e:	f7f8 fb47 	bl	800aab0 <ucdr_serialize_uint8_t>
 8012422:	9a01      	ldr	r2, [sp, #4]
 8012424:	2101      	movs	r1, #1
 8012426:	4620      	mov	r0, r4
 8012428:	b003      	add	sp, #12
 801242a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801242e:	f7f8 bbeb 	b.w	800ac08 <ucdr_serialize_endian_uint16_t>
 8012432:	bf00      	nop

08012434 <uxr_deserialize_submessage_header>:
 8012434:	b530      	push	{r4, r5, lr}
 8012436:	b083      	sub	sp, #12
 8012438:	4615      	mov	r5, r2
 801243a:	4604      	mov	r4, r0
 801243c:	9301      	str	r3, [sp, #4]
 801243e:	f7f8 fb4d 	bl	800aadc <ucdr_deserialize_uint8_t>
 8012442:	4629      	mov	r1, r5
 8012444:	4620      	mov	r0, r4
 8012446:	f7f8 fb49 	bl	800aadc <ucdr_deserialize_uint8_t>
 801244a:	9a01      	ldr	r2, [sp, #4]
 801244c:	2101      	movs	r1, #1
 801244e:	4620      	mov	r0, r4
 8012450:	b003      	add	sp, #12
 8012452:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012456:	f7f8 bccb 	b.w	800adf0 <ucdr_deserialize_endian_uint16_t>
 801245a:	bf00      	nop

0801245c <uxr_serialize_CLIENT_Representation>:
 801245c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012460:	2204      	movs	r2, #4
 8012462:	460e      	mov	r6, r1
 8012464:	4605      	mov	r5, r0
 8012466:	f7fd f953 	bl	800f710 <ucdr_serialize_array_uint8_t>
 801246a:	2202      	movs	r2, #2
 801246c:	4607      	mov	r7, r0
 801246e:	1d31      	adds	r1, r6, #4
 8012470:	4628      	mov	r0, r5
 8012472:	f7fd f94d 	bl	800f710 <ucdr_serialize_array_uint8_t>
 8012476:	4038      	ands	r0, r7
 8012478:	2202      	movs	r2, #2
 801247a:	1db1      	adds	r1, r6, #6
 801247c:	b2c7      	uxtb	r7, r0
 801247e:	4628      	mov	r0, r5
 8012480:	f7fd f946 	bl	800f710 <ucdr_serialize_array_uint8_t>
 8012484:	2204      	movs	r2, #4
 8012486:	4007      	ands	r7, r0
 8012488:	f106 0108 	add.w	r1, r6, #8
 801248c:	4628      	mov	r0, r5
 801248e:	f7fd f93f 	bl	800f710 <ucdr_serialize_array_uint8_t>
 8012492:	7b31      	ldrb	r1, [r6, #12]
 8012494:	4007      	ands	r7, r0
 8012496:	4628      	mov	r0, r5
 8012498:	f7f8 fb0a 	bl	800aab0 <ucdr_serialize_uint8_t>
 801249c:	7b71      	ldrb	r1, [r6, #13]
 801249e:	4007      	ands	r7, r0
 80124a0:	4628      	mov	r0, r5
 80124a2:	f7f8 fad7 	bl	800aa54 <ucdr_serialize_bool>
 80124a6:	7b73      	ldrb	r3, [r6, #13]
 80124a8:	ea07 0800 	and.w	r8, r7, r0
 80124ac:	b93b      	cbnz	r3, 80124be <uxr_serialize_CLIENT_Representation+0x62>
 80124ae:	8bb1      	ldrh	r1, [r6, #28]
 80124b0:	4628      	mov	r0, r5
 80124b2:	f7f8 fb29 	bl	800ab08 <ucdr_serialize_uint16_t>
 80124b6:	ea08 0000 	and.w	r0, r8, r0
 80124ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80124be:	6931      	ldr	r1, [r6, #16]
 80124c0:	4628      	mov	r0, r5
 80124c2:	f7f8 fd0b 	bl	800aedc <ucdr_serialize_uint32_t>
 80124c6:	6933      	ldr	r3, [r6, #16]
 80124c8:	b1e3      	cbz	r3, 8012504 <uxr_serialize_CLIENT_Representation+0xa8>
 80124ca:	b1c0      	cbz	r0, 80124fe <uxr_serialize_CLIENT_Representation+0xa2>
 80124cc:	4637      	mov	r7, r6
 80124ce:	f04f 0900 	mov.w	r9, #0
 80124d2:	e001      	b.n	80124d8 <uxr_serialize_CLIENT_Representation+0x7c>
 80124d4:	3708      	adds	r7, #8
 80124d6:	b194      	cbz	r4, 80124fe <uxr_serialize_CLIENT_Representation+0xa2>
 80124d8:	6979      	ldr	r1, [r7, #20]
 80124da:	4628      	mov	r0, r5
 80124dc:	f005 f8a0 	bl	8017620 <ucdr_serialize_string>
 80124e0:	69b9      	ldr	r1, [r7, #24]
 80124e2:	4604      	mov	r4, r0
 80124e4:	4628      	mov	r0, r5
 80124e6:	f005 f89b 	bl	8017620 <ucdr_serialize_string>
 80124ea:	6933      	ldr	r3, [r6, #16]
 80124ec:	f109 0901 	add.w	r9, r9, #1
 80124f0:	4004      	ands	r4, r0
 80124f2:	4599      	cmp	r9, r3
 80124f4:	b2e4      	uxtb	r4, r4
 80124f6:	d3ed      	bcc.n	80124d4 <uxr_serialize_CLIENT_Representation+0x78>
 80124f8:	ea08 0804 	and.w	r8, r8, r4
 80124fc:	e7d7      	b.n	80124ae <uxr_serialize_CLIENT_Representation+0x52>
 80124fe:	f04f 0800 	mov.w	r8, #0
 8012502:	e7d4      	b.n	80124ae <uxr_serialize_CLIENT_Representation+0x52>
 8012504:	ea08 0800 	and.w	r8, r8, r0
 8012508:	e7d1      	b.n	80124ae <uxr_serialize_CLIENT_Representation+0x52>
 801250a:	bf00      	nop

0801250c <uxr_deserialize_CLIENT_Representation>:
 801250c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012510:	2204      	movs	r2, #4
 8012512:	460c      	mov	r4, r1
 8012514:	4605      	mov	r5, r0
 8012516:	f7fd f95f 	bl	800f7d8 <ucdr_deserialize_array_uint8_t>
 801251a:	2202      	movs	r2, #2
 801251c:	4607      	mov	r7, r0
 801251e:	1d21      	adds	r1, r4, #4
 8012520:	4628      	mov	r0, r5
 8012522:	f7fd f959 	bl	800f7d8 <ucdr_deserialize_array_uint8_t>
 8012526:	4038      	ands	r0, r7
 8012528:	2202      	movs	r2, #2
 801252a:	1da1      	adds	r1, r4, #6
 801252c:	b2c6      	uxtb	r6, r0
 801252e:	4628      	mov	r0, r5
 8012530:	f7fd f952 	bl	800f7d8 <ucdr_deserialize_array_uint8_t>
 8012534:	2204      	movs	r2, #4
 8012536:	4006      	ands	r6, r0
 8012538:	f104 0108 	add.w	r1, r4, #8
 801253c:	4628      	mov	r0, r5
 801253e:	f7fd f94b 	bl	800f7d8 <ucdr_deserialize_array_uint8_t>
 8012542:	f104 010c 	add.w	r1, r4, #12
 8012546:	4006      	ands	r6, r0
 8012548:	4628      	mov	r0, r5
 801254a:	f7f8 fac7 	bl	800aadc <ucdr_deserialize_uint8_t>
 801254e:	f104 010d 	add.w	r1, r4, #13
 8012552:	ea06 0700 	and.w	r7, r6, r0
 8012556:	4628      	mov	r0, r5
 8012558:	f7f8 fa92 	bl	800aa80 <ucdr_deserialize_bool>
 801255c:	7b63      	ldrb	r3, [r4, #13]
 801255e:	4007      	ands	r7, r0
 8012560:	b93b      	cbnz	r3, 8012572 <uxr_deserialize_CLIENT_Representation+0x66>
 8012562:	f104 011c 	add.w	r1, r4, #28
 8012566:	4628      	mov	r0, r5
 8012568:	f7f8 fbce 	bl	800ad08 <ucdr_deserialize_uint16_t>
 801256c:	4038      	ands	r0, r7
 801256e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012572:	f104 0110 	add.w	r1, r4, #16
 8012576:	4628      	mov	r0, r5
 8012578:	f7f8 fde0 	bl	800b13c <ucdr_deserialize_uint32_t>
 801257c:	6923      	ldr	r3, [r4, #16]
 801257e:	2b01      	cmp	r3, #1
 8012580:	d903      	bls.n	801258a <uxr_deserialize_CLIENT_Representation+0x7e>
 8012582:	2301      	movs	r3, #1
 8012584:	75ab      	strb	r3, [r5, #22]
 8012586:	2700      	movs	r7, #0
 8012588:	e7eb      	b.n	8012562 <uxr_deserialize_CLIENT_Representation+0x56>
 801258a:	b30b      	cbz	r3, 80125d0 <uxr_deserialize_CLIENT_Representation+0xc4>
 801258c:	2800      	cmp	r0, #0
 801258e:	d0fa      	beq.n	8012586 <uxr_deserialize_CLIENT_Representation+0x7a>
 8012590:	46a0      	mov	r8, r4
 8012592:	f04f 0900 	mov.w	r9, #0
 8012596:	e001      	b.n	801259c <uxr_deserialize_CLIENT_Representation+0x90>
 8012598:	2e00      	cmp	r6, #0
 801259a:	d0f4      	beq.n	8012586 <uxr_deserialize_CLIENT_Representation+0x7a>
 801259c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80125a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80125a4:	4628      	mov	r0, r5
 80125a6:	f005 f84b 	bl	8017640 <ucdr_deserialize_string>
 80125aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80125ae:	4606      	mov	r6, r0
 80125b0:	f8d8 1018 	ldr.w	r1, [r8, #24]
 80125b4:	4628      	mov	r0, r5
 80125b6:	f005 f843 	bl	8017640 <ucdr_deserialize_string>
 80125ba:	6923      	ldr	r3, [r4, #16]
 80125bc:	f109 0901 	add.w	r9, r9, #1
 80125c0:	4006      	ands	r6, r0
 80125c2:	4599      	cmp	r9, r3
 80125c4:	f108 0808 	add.w	r8, r8, #8
 80125c8:	b2f6      	uxtb	r6, r6
 80125ca:	d3e5      	bcc.n	8012598 <uxr_deserialize_CLIENT_Representation+0x8c>
 80125cc:	4037      	ands	r7, r6
 80125ce:	e7c8      	b.n	8012562 <uxr_deserialize_CLIENT_Representation+0x56>
 80125d0:	4007      	ands	r7, r0
 80125d2:	e7c6      	b.n	8012562 <uxr_deserialize_CLIENT_Representation+0x56>

080125d4 <uxr_serialize_AGENT_Representation>:
 80125d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80125d8:	2204      	movs	r2, #4
 80125da:	460f      	mov	r7, r1
 80125dc:	4605      	mov	r5, r0
 80125de:	f7fd f897 	bl	800f710 <ucdr_serialize_array_uint8_t>
 80125e2:	2202      	movs	r2, #2
 80125e4:	4604      	mov	r4, r0
 80125e6:	1d39      	adds	r1, r7, #4
 80125e8:	4628      	mov	r0, r5
 80125ea:	f7fd f891 	bl	800f710 <ucdr_serialize_array_uint8_t>
 80125ee:	4020      	ands	r0, r4
 80125f0:	2202      	movs	r2, #2
 80125f2:	1db9      	adds	r1, r7, #6
 80125f4:	b2c4      	uxtb	r4, r0
 80125f6:	4628      	mov	r0, r5
 80125f8:	f7fd f88a 	bl	800f710 <ucdr_serialize_array_uint8_t>
 80125fc:	7a39      	ldrb	r1, [r7, #8]
 80125fe:	4004      	ands	r4, r0
 8012600:	4628      	mov	r0, r5
 8012602:	f7f8 fa27 	bl	800aa54 <ucdr_serialize_bool>
 8012606:	7a3b      	ldrb	r3, [r7, #8]
 8012608:	ea00 0804 	and.w	r8, r0, r4
 801260c:	b913      	cbnz	r3, 8012614 <uxr_serialize_AGENT_Representation+0x40>
 801260e:	4640      	mov	r0, r8
 8012610:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012614:	68f9      	ldr	r1, [r7, #12]
 8012616:	4628      	mov	r0, r5
 8012618:	f7f8 fc60 	bl	800aedc <ucdr_serialize_uint32_t>
 801261c:	68fb      	ldr	r3, [r7, #12]
 801261e:	b303      	cbz	r3, 8012662 <uxr_serialize_AGENT_Representation+0x8e>
 8012620:	b1d0      	cbz	r0, 8012658 <uxr_serialize_AGENT_Representation+0x84>
 8012622:	463e      	mov	r6, r7
 8012624:	f04f 0900 	mov.w	r9, #0
 8012628:	e001      	b.n	801262e <uxr_serialize_AGENT_Representation+0x5a>
 801262a:	3608      	adds	r6, #8
 801262c:	b1a4      	cbz	r4, 8012658 <uxr_serialize_AGENT_Representation+0x84>
 801262e:	6931      	ldr	r1, [r6, #16]
 8012630:	4628      	mov	r0, r5
 8012632:	f004 fff5 	bl	8017620 <ucdr_serialize_string>
 8012636:	6971      	ldr	r1, [r6, #20]
 8012638:	4604      	mov	r4, r0
 801263a:	4628      	mov	r0, r5
 801263c:	f004 fff0 	bl	8017620 <ucdr_serialize_string>
 8012640:	68fb      	ldr	r3, [r7, #12]
 8012642:	f109 0901 	add.w	r9, r9, #1
 8012646:	4004      	ands	r4, r0
 8012648:	4599      	cmp	r9, r3
 801264a:	b2e4      	uxtb	r4, r4
 801264c:	d3ed      	bcc.n	801262a <uxr_serialize_AGENT_Representation+0x56>
 801264e:	ea08 0804 	and.w	r8, r8, r4
 8012652:	4640      	mov	r0, r8
 8012654:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012658:	f04f 0800 	mov.w	r8, #0
 801265c:	4640      	mov	r0, r8
 801265e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012662:	ea08 0800 	and.w	r8, r8, r0
 8012666:	e7d2      	b.n	801260e <uxr_serialize_AGENT_Representation+0x3a>

08012668 <uxr_serialize_DATAWRITER_Representation>:
 8012668:	b570      	push	{r4, r5, r6, lr}
 801266a:	460d      	mov	r5, r1
 801266c:	7809      	ldrb	r1, [r1, #0]
 801266e:	4606      	mov	r6, r0
 8012670:	f7f8 fa1e 	bl	800aab0 <ucdr_serialize_uint8_t>
 8012674:	4604      	mov	r4, r0
 8012676:	b130      	cbz	r0, 8012686 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8012678:	782b      	ldrb	r3, [r5, #0]
 801267a:	2b02      	cmp	r3, #2
 801267c:	d00c      	beq.n	8012698 <uxr_serialize_DATAWRITER_Representation+0x30>
 801267e:	2b03      	cmp	r3, #3
 8012680:	d010      	beq.n	80126a4 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8012682:	2b01      	cmp	r3, #1
 8012684:	d008      	beq.n	8012698 <uxr_serialize_DATAWRITER_Representation+0x30>
 8012686:	2202      	movs	r2, #2
 8012688:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 801268c:	4630      	mov	r0, r6
 801268e:	f7fd f83f 	bl	800f710 <ucdr_serialize_array_uint8_t>
 8012692:	4020      	ands	r0, r4
 8012694:	b2c0      	uxtb	r0, r0
 8012696:	bd70      	pop	{r4, r5, r6, pc}
 8012698:	6869      	ldr	r1, [r5, #4]
 801269a:	4630      	mov	r0, r6
 801269c:	f004 ffc0 	bl	8017620 <ucdr_serialize_string>
 80126a0:	4604      	mov	r4, r0
 80126a2:	e7f0      	b.n	8012686 <uxr_serialize_DATAWRITER_Representation+0x1e>
 80126a4:	4629      	mov	r1, r5
 80126a6:	4630      	mov	r0, r6
 80126a8:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80126ac:	3104      	adds	r1, #4
 80126ae:	f7fd f9cd 	bl	800fa4c <ucdr_serialize_sequence_uint8_t>
 80126b2:	4604      	mov	r4, r0
 80126b4:	e7e7      	b.n	8012686 <uxr_serialize_DATAWRITER_Representation+0x1e>
 80126b6:	bf00      	nop

080126b8 <uxr_serialize_ObjectVariant.part.0>:
 80126b8:	b570      	push	{r4, r5, r6, lr}
 80126ba:	780b      	ldrb	r3, [r1, #0]
 80126bc:	3b01      	subs	r3, #1
 80126be:	460c      	mov	r4, r1
 80126c0:	4605      	mov	r5, r0
 80126c2:	2b0d      	cmp	r3, #13
 80126c4:	d854      	bhi.n	8012770 <uxr_serialize_ObjectVariant.part.0+0xb8>
 80126c6:	e8df f003 	tbb	[pc, r3]
 80126ca:	0730      	.short	0x0730
 80126cc:	07071b1b 	.word	0x07071b1b
 80126d0:	0c530707 	.word	0x0c530707
 80126d4:	494e0c0c 	.word	0x494e0c0c
 80126d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80126dc:	3104      	adds	r1, #4
 80126de:	f7ff bfc3 	b.w	8012668 <uxr_serialize_DATAWRITER_Representation>
 80126e2:	7909      	ldrb	r1, [r1, #4]
 80126e4:	f7f8 f9e4 	bl	800aab0 <ucdr_serialize_uint8_t>
 80126e8:	b1e8      	cbz	r0, 8012726 <uxr_serialize_ObjectVariant.part.0+0x6e>
 80126ea:	7923      	ldrb	r3, [r4, #4]
 80126ec:	2b01      	cmp	r3, #1
 80126ee:	d001      	beq.n	80126f4 <uxr_serialize_ObjectVariant.part.0+0x3c>
 80126f0:	2b02      	cmp	r3, #2
 80126f2:	d13d      	bne.n	8012770 <uxr_serialize_ObjectVariant.part.0+0xb8>
 80126f4:	68a1      	ldr	r1, [r4, #8]
 80126f6:	4628      	mov	r0, r5
 80126f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80126fc:	f004 bf90 	b.w	8017620 <ucdr_serialize_string>
 8012700:	7909      	ldrb	r1, [r1, #4]
 8012702:	f7f8 f9d5 	bl	800aab0 <ucdr_serialize_uint8_t>
 8012706:	4606      	mov	r6, r0
 8012708:	b120      	cbz	r0, 8012714 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801270a:	7923      	ldrb	r3, [r4, #4]
 801270c:	2b02      	cmp	r3, #2
 801270e:	d039      	beq.n	8012784 <uxr_serialize_ObjectVariant.part.0+0xcc>
 8012710:	2b03      	cmp	r3, #3
 8012712:	d02f      	beq.n	8012774 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8012714:	2202      	movs	r2, #2
 8012716:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 801271a:	4628      	mov	r0, r5
 801271c:	f7fc fff8 	bl	800f710 <ucdr_serialize_array_uint8_t>
 8012720:	4030      	ands	r0, r6
 8012722:	b2c0      	uxtb	r0, r0
 8012724:	bd70      	pop	{r4, r5, r6, pc}
 8012726:	2000      	movs	r0, #0
 8012728:	bd70      	pop	{r4, r5, r6, pc}
 801272a:	7909      	ldrb	r1, [r1, #4]
 801272c:	f7f8 f9c0 	bl	800aab0 <ucdr_serialize_uint8_t>
 8012730:	4606      	mov	r6, r0
 8012732:	b158      	cbz	r0, 801274c <uxr_serialize_ObjectVariant.part.0+0x94>
 8012734:	7923      	ldrb	r3, [r4, #4]
 8012736:	2b02      	cmp	r3, #2
 8012738:	d003      	beq.n	8012742 <uxr_serialize_ObjectVariant.part.0+0x8a>
 801273a:	2b03      	cmp	r3, #3
 801273c:	d028      	beq.n	8012790 <uxr_serialize_ObjectVariant.part.0+0xd8>
 801273e:	2b01      	cmp	r3, #1
 8012740:	d104      	bne.n	801274c <uxr_serialize_ObjectVariant.part.0+0x94>
 8012742:	68a1      	ldr	r1, [r4, #8]
 8012744:	4628      	mov	r0, r5
 8012746:	f004 ff6b 	bl	8017620 <ucdr_serialize_string>
 801274a:	4606      	mov	r6, r0
 801274c:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8012750:	4628      	mov	r0, r5
 8012752:	f7f8 fee9 	bl	800b528 <ucdr_serialize_int16_t>
 8012756:	4030      	ands	r0, r6
 8012758:	b2c0      	uxtb	r0, r0
 801275a:	bd70      	pop	{r4, r5, r6, pc}
 801275c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012760:	3104      	adds	r1, #4
 8012762:	f7ff be7b 	b.w	801245c <uxr_serialize_CLIENT_Representation>
 8012766:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801276a:	3104      	adds	r1, #4
 801276c:	f7ff bf32 	b.w	80125d4 <uxr_serialize_AGENT_Representation>
 8012770:	2001      	movs	r0, #1
 8012772:	bd70      	pop	{r4, r5, r6, pc}
 8012774:	68a2      	ldr	r2, [r4, #8]
 8012776:	f104 010c 	add.w	r1, r4, #12
 801277a:	4628      	mov	r0, r5
 801277c:	f7fd f966 	bl	800fa4c <ucdr_serialize_sequence_uint8_t>
 8012780:	4606      	mov	r6, r0
 8012782:	e7c7      	b.n	8012714 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8012784:	68a1      	ldr	r1, [r4, #8]
 8012786:	4628      	mov	r0, r5
 8012788:	f004 ff4a 	bl	8017620 <ucdr_serialize_string>
 801278c:	4606      	mov	r6, r0
 801278e:	e7c1      	b.n	8012714 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8012790:	68a2      	ldr	r2, [r4, #8]
 8012792:	f104 010c 	add.w	r1, r4, #12
 8012796:	4628      	mov	r0, r5
 8012798:	f7fd f958 	bl	800fa4c <ucdr_serialize_sequence_uint8_t>
 801279c:	4606      	mov	r6, r0
 801279e:	e7d5      	b.n	801274c <uxr_serialize_ObjectVariant.part.0+0x94>

080127a0 <uxr_deserialize_DATAWRITER_Representation>:
 80127a0:	b570      	push	{r4, r5, r6, lr}
 80127a2:	4606      	mov	r6, r0
 80127a4:	460d      	mov	r5, r1
 80127a6:	f7f8 f999 	bl	800aadc <ucdr_deserialize_uint8_t>
 80127aa:	4604      	mov	r4, r0
 80127ac:	b130      	cbz	r0, 80127bc <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80127ae:	782b      	ldrb	r3, [r5, #0]
 80127b0:	2b02      	cmp	r3, #2
 80127b2:	d00c      	beq.n	80127ce <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80127b4:	2b03      	cmp	r3, #3
 80127b6:	d012      	beq.n	80127de <uxr_deserialize_DATAWRITER_Representation+0x3e>
 80127b8:	2b01      	cmp	r3, #1
 80127ba:	d008      	beq.n	80127ce <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80127bc:	2202      	movs	r2, #2
 80127be:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 80127c2:	4630      	mov	r0, r6
 80127c4:	f7fd f808 	bl	800f7d8 <ucdr_deserialize_array_uint8_t>
 80127c8:	4020      	ands	r0, r4
 80127ca:	b2c0      	uxtb	r0, r0
 80127cc:	bd70      	pop	{r4, r5, r6, pc}
 80127ce:	6869      	ldr	r1, [r5, #4]
 80127d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80127d4:	4630      	mov	r0, r6
 80127d6:	f004 ff33 	bl	8017640 <ucdr_deserialize_string>
 80127da:	4604      	mov	r4, r0
 80127dc:	e7ee      	b.n	80127bc <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80127de:	1d2b      	adds	r3, r5, #4
 80127e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80127e4:	f105 0108 	add.w	r1, r5, #8
 80127e8:	4630      	mov	r0, r6
 80127ea:	f7fd f941 	bl	800fa70 <ucdr_deserialize_sequence_uint8_t>
 80127ee:	4604      	mov	r4, r0
 80127f0:	e7e4      	b.n	80127bc <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80127f2:	bf00      	nop

080127f4 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 80127f4:	b570      	push	{r4, r5, r6, lr}
 80127f6:	460d      	mov	r5, r1
 80127f8:	7809      	ldrb	r1, [r1, #0]
 80127fa:	4606      	mov	r6, r0
 80127fc:	f7f8 f92a 	bl	800aa54 <ucdr_serialize_bool>
 8012800:	782b      	ldrb	r3, [r5, #0]
 8012802:	4604      	mov	r4, r0
 8012804:	b94b      	cbnz	r3, 801281a <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8012806:	7a29      	ldrb	r1, [r5, #8]
 8012808:	4630      	mov	r0, r6
 801280a:	f7f8 f923 	bl	800aa54 <ucdr_serialize_bool>
 801280e:	7a2b      	ldrb	r3, [r5, #8]
 8012810:	4004      	ands	r4, r0
 8012812:	b2e4      	uxtb	r4, r4
 8012814:	b943      	cbnz	r3, 8012828 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8012816:	4620      	mov	r0, r4
 8012818:	bd70      	pop	{r4, r5, r6, pc}
 801281a:	6869      	ldr	r1, [r5, #4]
 801281c:	4630      	mov	r0, r6
 801281e:	f004 feff 	bl	8017620 <ucdr_serialize_string>
 8012822:	4004      	ands	r4, r0
 8012824:	b2e4      	uxtb	r4, r4
 8012826:	e7ee      	b.n	8012806 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8012828:	68e9      	ldr	r1, [r5, #12]
 801282a:	4630      	mov	r0, r6
 801282c:	f004 fef8 	bl	8017620 <ucdr_serialize_string>
 8012830:	4004      	ands	r4, r0
 8012832:	4620      	mov	r0, r4
 8012834:	bd70      	pop	{r4, r5, r6, pc}
 8012836:	bf00      	nop

08012838 <uxr_serialize_OBJK_Topic_Binary>:
 8012838:	b570      	push	{r4, r5, r6, lr}
 801283a:	460d      	mov	r5, r1
 801283c:	6809      	ldr	r1, [r1, #0]
 801283e:	4606      	mov	r6, r0
 8012840:	f004 feee 	bl	8017620 <ucdr_serialize_string>
 8012844:	7929      	ldrb	r1, [r5, #4]
 8012846:	4604      	mov	r4, r0
 8012848:	4630      	mov	r0, r6
 801284a:	f7f8 f903 	bl	800aa54 <ucdr_serialize_bool>
 801284e:	792b      	ldrb	r3, [r5, #4]
 8012850:	4004      	ands	r4, r0
 8012852:	b2e4      	uxtb	r4, r4
 8012854:	b943      	cbnz	r3, 8012868 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8012856:	7b29      	ldrb	r1, [r5, #12]
 8012858:	4630      	mov	r0, r6
 801285a:	f7f8 f8fb 	bl	800aa54 <ucdr_serialize_bool>
 801285e:	7b2b      	ldrb	r3, [r5, #12]
 8012860:	4004      	ands	r4, r0
 8012862:	b93b      	cbnz	r3, 8012874 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8012864:	4620      	mov	r0, r4
 8012866:	bd70      	pop	{r4, r5, r6, pc}
 8012868:	68a9      	ldr	r1, [r5, #8]
 801286a:	4630      	mov	r0, r6
 801286c:	f004 fed8 	bl	8017620 <ucdr_serialize_string>
 8012870:	4004      	ands	r4, r0
 8012872:	e7f0      	b.n	8012856 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8012874:	6929      	ldr	r1, [r5, #16]
 8012876:	4630      	mov	r0, r6
 8012878:	f004 fed2 	bl	8017620 <ucdr_serialize_string>
 801287c:	4004      	ands	r4, r0
 801287e:	b2e4      	uxtb	r4, r4
 8012880:	4620      	mov	r0, r4
 8012882:	bd70      	pop	{r4, r5, r6, pc}

08012884 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8012884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012888:	460c      	mov	r4, r1
 801288a:	7809      	ldrb	r1, [r1, #0]
 801288c:	4606      	mov	r6, r0
 801288e:	f7f8 f8e1 	bl	800aa54 <ucdr_serialize_bool>
 8012892:	7823      	ldrb	r3, [r4, #0]
 8012894:	4605      	mov	r5, r0
 8012896:	b96b      	cbnz	r3, 80128b4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8012898:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 801289c:	4630      	mov	r0, r6
 801289e:	f7f8 f8d9 	bl	800aa54 <ucdr_serialize_bool>
 80128a2:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80128a6:	4005      	ands	r5, r0
 80128a8:	b2ed      	uxtb	r5, r5
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d169      	bne.n	8012982 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 80128ae:	4628      	mov	r0, r5
 80128b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128b4:	6861      	ldr	r1, [r4, #4]
 80128b6:	4630      	mov	r0, r6
 80128b8:	f7f8 fb10 	bl	800aedc <ucdr_serialize_uint32_t>
 80128bc:	6863      	ldr	r3, [r4, #4]
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d06b      	beq.n	801299a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 80128c2:	2800      	cmp	r0, #0
 80128c4:	d067      	beq.n	8012996 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80128c6:	68a1      	ldr	r1, [r4, #8]
 80128c8:	4630      	mov	r0, r6
 80128ca:	f004 fea9 	bl	8017620 <ucdr_serialize_string>
 80128ce:	6863      	ldr	r3, [r4, #4]
 80128d0:	2b01      	cmp	r3, #1
 80128d2:	d953      	bls.n	801297c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80128d4:	2800      	cmp	r0, #0
 80128d6:	d05e      	beq.n	8012996 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80128d8:	68e1      	ldr	r1, [r4, #12]
 80128da:	4630      	mov	r0, r6
 80128dc:	f004 fea0 	bl	8017620 <ucdr_serialize_string>
 80128e0:	6863      	ldr	r3, [r4, #4]
 80128e2:	2b02      	cmp	r3, #2
 80128e4:	d94a      	bls.n	801297c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80128e6:	2800      	cmp	r0, #0
 80128e8:	d055      	beq.n	8012996 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80128ea:	6921      	ldr	r1, [r4, #16]
 80128ec:	4630      	mov	r0, r6
 80128ee:	f004 fe97 	bl	8017620 <ucdr_serialize_string>
 80128f2:	6863      	ldr	r3, [r4, #4]
 80128f4:	2b03      	cmp	r3, #3
 80128f6:	d941      	bls.n	801297c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80128f8:	2800      	cmp	r0, #0
 80128fa:	d04c      	beq.n	8012996 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80128fc:	6961      	ldr	r1, [r4, #20]
 80128fe:	4630      	mov	r0, r6
 8012900:	f004 fe8e 	bl	8017620 <ucdr_serialize_string>
 8012904:	6863      	ldr	r3, [r4, #4]
 8012906:	2b04      	cmp	r3, #4
 8012908:	d938      	bls.n	801297c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801290a:	2800      	cmp	r0, #0
 801290c:	d043      	beq.n	8012996 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801290e:	69a1      	ldr	r1, [r4, #24]
 8012910:	4630      	mov	r0, r6
 8012912:	f004 fe85 	bl	8017620 <ucdr_serialize_string>
 8012916:	6863      	ldr	r3, [r4, #4]
 8012918:	2b05      	cmp	r3, #5
 801291a:	d92f      	bls.n	801297c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801291c:	2800      	cmp	r0, #0
 801291e:	d03a      	beq.n	8012996 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012920:	69e1      	ldr	r1, [r4, #28]
 8012922:	4630      	mov	r0, r6
 8012924:	f004 fe7c 	bl	8017620 <ucdr_serialize_string>
 8012928:	6863      	ldr	r3, [r4, #4]
 801292a:	2b06      	cmp	r3, #6
 801292c:	d926      	bls.n	801297c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801292e:	b390      	cbz	r0, 8012996 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012930:	6a21      	ldr	r1, [r4, #32]
 8012932:	4630      	mov	r0, r6
 8012934:	f004 fe74 	bl	8017620 <ucdr_serialize_string>
 8012938:	6863      	ldr	r3, [r4, #4]
 801293a:	2b07      	cmp	r3, #7
 801293c:	d91e      	bls.n	801297c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801293e:	b350      	cbz	r0, 8012996 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012940:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8012942:	4630      	mov	r0, r6
 8012944:	f004 fe6c 	bl	8017620 <ucdr_serialize_string>
 8012948:	6863      	ldr	r3, [r4, #4]
 801294a:	2b08      	cmp	r3, #8
 801294c:	d916      	bls.n	801297c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801294e:	b310      	cbz	r0, 8012996 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012950:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8012952:	4630      	mov	r0, r6
 8012954:	f004 fe64 	bl	8017620 <ucdr_serialize_string>
 8012958:	6863      	ldr	r3, [r4, #4]
 801295a:	2b09      	cmp	r3, #9
 801295c:	d90e      	bls.n	801297c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801295e:	b1d0      	cbz	r0, 8012996 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012960:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8012964:	2709      	movs	r7, #9
 8012966:	e000      	b.n	801296a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8012968:	b1a8      	cbz	r0, 8012996 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801296a:	f858 1b04 	ldr.w	r1, [r8], #4
 801296e:	4630      	mov	r0, r6
 8012970:	f004 fe56 	bl	8017620 <ucdr_serialize_string>
 8012974:	6862      	ldr	r2, [r4, #4]
 8012976:	3701      	adds	r7, #1
 8012978:	4297      	cmp	r7, r2
 801297a:	d3f5      	bcc.n	8012968 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 801297c:	4005      	ands	r5, r0
 801297e:	b2ed      	uxtb	r5, r5
 8012980:	e78a      	b.n	8012898 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8012982:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8012984:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8012988:	4630      	mov	r0, r6
 801298a:	f7fd f85f 	bl	800fa4c <ucdr_serialize_sequence_uint8_t>
 801298e:	4005      	ands	r5, r0
 8012990:	4628      	mov	r0, r5
 8012992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012996:	2500      	movs	r5, #0
 8012998:	e77e      	b.n	8012898 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801299a:	4028      	ands	r0, r5
 801299c:	b2c5      	uxtb	r5, r0
 801299e:	e77b      	b.n	8012898 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

080129a0 <uxr_serialize_OBJK_Publisher_Binary>:
 80129a0:	b570      	push	{r4, r5, r6, lr}
 80129a2:	460d      	mov	r5, r1
 80129a4:	7809      	ldrb	r1, [r1, #0]
 80129a6:	4606      	mov	r6, r0
 80129a8:	f7f8 f854 	bl	800aa54 <ucdr_serialize_bool>
 80129ac:	782b      	ldrb	r3, [r5, #0]
 80129ae:	4604      	mov	r4, r0
 80129b0:	b94b      	cbnz	r3, 80129c6 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 80129b2:	7a29      	ldrb	r1, [r5, #8]
 80129b4:	4630      	mov	r0, r6
 80129b6:	f7f8 f84d 	bl	800aa54 <ucdr_serialize_bool>
 80129ba:	7a2b      	ldrb	r3, [r5, #8]
 80129bc:	4004      	ands	r4, r0
 80129be:	b2e4      	uxtb	r4, r4
 80129c0:	b943      	cbnz	r3, 80129d4 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 80129c2:	4620      	mov	r0, r4
 80129c4:	bd70      	pop	{r4, r5, r6, pc}
 80129c6:	6869      	ldr	r1, [r5, #4]
 80129c8:	4630      	mov	r0, r6
 80129ca:	f004 fe29 	bl	8017620 <ucdr_serialize_string>
 80129ce:	4004      	ands	r4, r0
 80129d0:	b2e4      	uxtb	r4, r4
 80129d2:	e7ee      	b.n	80129b2 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 80129d4:	f105 010c 	add.w	r1, r5, #12
 80129d8:	4630      	mov	r0, r6
 80129da:	f7ff ff53 	bl	8012884 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 80129de:	4004      	ands	r4, r0
 80129e0:	4620      	mov	r0, r4
 80129e2:	bd70      	pop	{r4, r5, r6, pc}

080129e4 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 80129e4:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 80129e8:	4688      	mov	r8, r1
 80129ea:	8809      	ldrh	r1, [r1, #0]
 80129ec:	4681      	mov	r9, r0
 80129ee:	f7f8 f88b 	bl	800ab08 <ucdr_serialize_uint16_t>
 80129f2:	f898 1002 	ldrb.w	r1, [r8, #2]
 80129f6:	4606      	mov	r6, r0
 80129f8:	4648      	mov	r0, r9
 80129fa:	f7f8 f82b 	bl	800aa54 <ucdr_serialize_bool>
 80129fe:	f898 3002 	ldrb.w	r3, [r8, #2]
 8012a02:	4006      	ands	r6, r0
 8012a04:	b2f5      	uxtb	r5, r6
 8012a06:	b9eb      	cbnz	r3, 8012a44 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8012a08:	f898 1006 	ldrb.w	r1, [r8, #6]
 8012a0c:	4648      	mov	r0, r9
 8012a0e:	f7f8 f821 	bl	800aa54 <ucdr_serialize_bool>
 8012a12:	f898 3006 	ldrb.w	r3, [r8, #6]
 8012a16:	4005      	ands	r5, r0
 8012a18:	bb7b      	cbnz	r3, 8012a7a <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8012a1a:	f898 100c 	ldrb.w	r1, [r8, #12]
 8012a1e:	4648      	mov	r0, r9
 8012a20:	f7f8 f818 	bl	800aa54 <ucdr_serialize_bool>
 8012a24:	f898 300c 	ldrb.w	r3, [r8, #12]
 8012a28:	4005      	ands	r5, r0
 8012a2a:	b9f3      	cbnz	r3, 8012a6a <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8012a2c:	f898 1014 	ldrb.w	r1, [r8, #20]
 8012a30:	4648      	mov	r0, r9
 8012a32:	f7f8 f80f 	bl	800aa54 <ucdr_serialize_bool>
 8012a36:	f898 3014 	ldrb.w	r3, [r8, #20]
 8012a3a:	4005      	ands	r5, r0
 8012a3c:	b94b      	cbnz	r3, 8012a52 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8012a3e:	4628      	mov	r0, r5
 8012a40:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8012a44:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8012a48:	4648      	mov	r0, r9
 8012a4a:	f7f8 f85d 	bl	800ab08 <ucdr_serialize_uint16_t>
 8012a4e:	4005      	ands	r5, r0
 8012a50:	e7da      	b.n	8012a08 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8012a52:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8012a56:	f108 011c 	add.w	r1, r8, #28
 8012a5a:	4648      	mov	r0, r9
 8012a5c:	f7fc fff6 	bl	800fa4c <ucdr_serialize_sequence_uint8_t>
 8012a60:	4028      	ands	r0, r5
 8012a62:	b2c5      	uxtb	r5, r0
 8012a64:	4628      	mov	r0, r5
 8012a66:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8012a6a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012a6e:	4648      	mov	r0, r9
 8012a70:	f7f8 fa34 	bl	800aedc <ucdr_serialize_uint32_t>
 8012a74:	4028      	ands	r0, r5
 8012a76:	b2c5      	uxtb	r5, r0
 8012a78:	e7d8      	b.n	8012a2c <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8012a7a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8012a7e:	4648      	mov	r0, r9
 8012a80:	f7f8 fa2c 	bl	800aedc <ucdr_serialize_uint32_t>
 8012a84:	4028      	ands	r0, r5
 8012a86:	b2c5      	uxtb	r5, r0
 8012a88:	e7c7      	b.n	8012a1a <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8012a8a:	bf00      	nop

08012a8c <uxr_serialize_OBJK_DataWriter_Binary>:
 8012a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a8e:	2202      	movs	r2, #2
 8012a90:	460d      	mov	r5, r1
 8012a92:	4606      	mov	r6, r0
 8012a94:	f7fc fe3c 	bl	800f710 <ucdr_serialize_array_uint8_t>
 8012a98:	78a9      	ldrb	r1, [r5, #2]
 8012a9a:	4604      	mov	r4, r0
 8012a9c:	4630      	mov	r0, r6
 8012a9e:	f7f7 ffd9 	bl	800aa54 <ucdr_serialize_bool>
 8012aa2:	78ab      	ldrb	r3, [r5, #2]
 8012aa4:	4004      	ands	r4, r0
 8012aa6:	b2e4      	uxtb	r4, r4
 8012aa8:	b90b      	cbnz	r3, 8012aae <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8012aaa:	4620      	mov	r0, r4
 8012aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012aae:	f105 0108 	add.w	r1, r5, #8
 8012ab2:	4630      	mov	r0, r6
 8012ab4:	f7ff ff96 	bl	80129e4 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8012ab8:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8012abc:	4607      	mov	r7, r0
 8012abe:	4630      	mov	r0, r6
 8012ac0:	f7f7 ffc8 	bl	800aa54 <ucdr_serialize_bool>
 8012ac4:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8012ac8:	4038      	ands	r0, r7
 8012aca:	b2c7      	uxtb	r7, r0
 8012acc:	b913      	cbnz	r3, 8012ad4 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8012ace:	403c      	ands	r4, r7
 8012ad0:	4620      	mov	r0, r4
 8012ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ad4:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8012ad8:	4630      	mov	r0, r6
 8012ada:	f7f8 fc55 	bl	800b388 <ucdr_serialize_uint64_t>
 8012ade:	4007      	ands	r7, r0
 8012ae0:	e7f5      	b.n	8012ace <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8012ae2:	bf00      	nop

08012ae4 <uxr_serialize_OBJK_Replier_Binary>:
 8012ae4:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 8012ae8:	460f      	mov	r7, r1
 8012aea:	6809      	ldr	r1, [r1, #0]
 8012aec:	4680      	mov	r8, r0
 8012aee:	f004 fd97 	bl	8017620 <ucdr_serialize_string>
 8012af2:	6879      	ldr	r1, [r7, #4]
 8012af4:	4605      	mov	r5, r0
 8012af6:	4640      	mov	r0, r8
 8012af8:	f004 fd92 	bl	8017620 <ucdr_serialize_string>
 8012afc:	68b9      	ldr	r1, [r7, #8]
 8012afe:	4005      	ands	r5, r0
 8012b00:	4640      	mov	r0, r8
 8012b02:	f004 fd8d 	bl	8017620 <ucdr_serialize_string>
 8012b06:	b2ec      	uxtb	r4, r5
 8012b08:	4004      	ands	r4, r0
 8012b0a:	7b39      	ldrb	r1, [r7, #12]
 8012b0c:	4640      	mov	r0, r8
 8012b0e:	f7f7 ffa1 	bl	800aa54 <ucdr_serialize_bool>
 8012b12:	7b3b      	ldrb	r3, [r7, #12]
 8012b14:	4004      	ands	r4, r0
 8012b16:	b94b      	cbnz	r3, 8012b2c <uxr_serialize_OBJK_Replier_Binary+0x48>
 8012b18:	7d39      	ldrb	r1, [r7, #20]
 8012b1a:	4640      	mov	r0, r8
 8012b1c:	f7f7 ff9a 	bl	800aa54 <ucdr_serialize_bool>
 8012b20:	7d3b      	ldrb	r3, [r7, #20]
 8012b22:	4004      	ands	r4, r0
 8012b24:	b943      	cbnz	r3, 8012b38 <uxr_serialize_OBJK_Replier_Binary+0x54>
 8012b26:	4620      	mov	r0, r4
 8012b28:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 8012b2c:	6939      	ldr	r1, [r7, #16]
 8012b2e:	4640      	mov	r0, r8
 8012b30:	f004 fd76 	bl	8017620 <ucdr_serialize_string>
 8012b34:	4004      	ands	r4, r0
 8012b36:	e7ef      	b.n	8012b18 <uxr_serialize_OBJK_Replier_Binary+0x34>
 8012b38:	69b9      	ldr	r1, [r7, #24]
 8012b3a:	4640      	mov	r0, r8
 8012b3c:	f004 fd70 	bl	8017620 <ucdr_serialize_string>
 8012b40:	4004      	ands	r4, r0
 8012b42:	b2e4      	uxtb	r4, r4
 8012b44:	4620      	mov	r0, r4
 8012b46:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 8012b4a:	bf00      	nop

08012b4c <uxr_deserialize_ObjectVariant>:
 8012b4c:	b570      	push	{r4, r5, r6, lr}
 8012b4e:	4605      	mov	r5, r0
 8012b50:	460e      	mov	r6, r1
 8012b52:	f7f7 ffc3 	bl	800aadc <ucdr_deserialize_uint8_t>
 8012b56:	b168      	cbz	r0, 8012b74 <uxr_deserialize_ObjectVariant+0x28>
 8012b58:	7833      	ldrb	r3, [r6, #0]
 8012b5a:	3b01      	subs	r3, #1
 8012b5c:	4604      	mov	r4, r0
 8012b5e:	2b0d      	cmp	r3, #13
 8012b60:	d809      	bhi.n	8012b76 <uxr_deserialize_ObjectVariant+0x2a>
 8012b62:	e8df f003 	tbb	[pc, r3]
 8012b66:	0a41      	.short	0x0a41
 8012b68:	0a0a2323 	.word	0x0a0a2323
 8012b6c:	10080a0a 	.word	0x10080a0a
 8012b70:	565c1010 	.word	0x565c1010
 8012b74:	2400      	movs	r4, #0
 8012b76:	4620      	mov	r0, r4
 8012b78:	bd70      	pop	{r4, r5, r6, pc}
 8012b7a:	1d31      	adds	r1, r6, #4
 8012b7c:	4628      	mov	r0, r5
 8012b7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012b82:	f7ff be0d 	b.w	80127a0 <uxr_deserialize_DATAWRITER_Representation>
 8012b86:	1d31      	adds	r1, r6, #4
 8012b88:	4628      	mov	r0, r5
 8012b8a:	f7f7 ffa7 	bl	800aadc <ucdr_deserialize_uint8_t>
 8012b8e:	2800      	cmp	r0, #0
 8012b90:	d0f0      	beq.n	8012b74 <uxr_deserialize_ObjectVariant+0x28>
 8012b92:	7933      	ldrb	r3, [r6, #4]
 8012b94:	2b01      	cmp	r3, #1
 8012b96:	d001      	beq.n	8012b9c <uxr_deserialize_ObjectVariant+0x50>
 8012b98:	2b02      	cmp	r3, #2
 8012b9a:	d1ec      	bne.n	8012b76 <uxr_deserialize_ObjectVariant+0x2a>
 8012b9c:	68b1      	ldr	r1, [r6, #8]
 8012b9e:	4628      	mov	r0, r5
 8012ba0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012ba4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012ba8:	f004 bd4a 	b.w	8017640 <ucdr_deserialize_string>
 8012bac:	1d31      	adds	r1, r6, #4
 8012bae:	4628      	mov	r0, r5
 8012bb0:	f7f7 ff94 	bl	800aadc <ucdr_deserialize_uint8_t>
 8012bb4:	4604      	mov	r4, r0
 8012bb6:	b170      	cbz	r0, 8012bd6 <uxr_deserialize_ObjectVariant+0x8a>
 8012bb8:	7933      	ldrb	r3, [r6, #4]
 8012bba:	2b02      	cmp	r3, #2
 8012bbc:	d04c      	beq.n	8012c58 <uxr_deserialize_ObjectVariant+0x10c>
 8012bbe:	2b03      	cmp	r3, #3
 8012bc0:	d109      	bne.n	8012bd6 <uxr_deserialize_ObjectVariant+0x8a>
 8012bc2:	f106 0308 	add.w	r3, r6, #8
 8012bc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012bca:	f106 010c 	add.w	r1, r6, #12
 8012bce:	4628      	mov	r0, r5
 8012bd0:	f7fc ff4e 	bl	800fa70 <ucdr_deserialize_sequence_uint8_t>
 8012bd4:	4604      	mov	r4, r0
 8012bd6:	2202      	movs	r2, #2
 8012bd8:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8012bdc:	4628      	mov	r0, r5
 8012bde:	f7fc fdfb 	bl	800f7d8 <ucdr_deserialize_array_uint8_t>
 8012be2:	4020      	ands	r0, r4
 8012be4:	b2c4      	uxtb	r4, r0
 8012be6:	e7c6      	b.n	8012b76 <uxr_deserialize_ObjectVariant+0x2a>
 8012be8:	1d31      	adds	r1, r6, #4
 8012bea:	4628      	mov	r0, r5
 8012bec:	f7f7 ff76 	bl	800aadc <ucdr_deserialize_uint8_t>
 8012bf0:	4604      	mov	r4, r0
 8012bf2:	b130      	cbz	r0, 8012c02 <uxr_deserialize_ObjectVariant+0xb6>
 8012bf4:	7933      	ldrb	r3, [r6, #4]
 8012bf6:	2b02      	cmp	r3, #2
 8012bf8:	d036      	beq.n	8012c68 <uxr_deserialize_ObjectVariant+0x11c>
 8012bfa:	2b03      	cmp	r3, #3
 8012bfc:	d03c      	beq.n	8012c78 <uxr_deserialize_ObjectVariant+0x12c>
 8012bfe:	2b01      	cmp	r3, #1
 8012c00:	d032      	beq.n	8012c68 <uxr_deserialize_ObjectVariant+0x11c>
 8012c02:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8012c06:	4628      	mov	r0, r5
 8012c08:	f7f8 fd0e 	bl	800b628 <ucdr_deserialize_int16_t>
 8012c0c:	4020      	ands	r0, r4
 8012c0e:	b2c4      	uxtb	r4, r0
 8012c10:	e7b1      	b.n	8012b76 <uxr_deserialize_ObjectVariant+0x2a>
 8012c12:	1d31      	adds	r1, r6, #4
 8012c14:	4628      	mov	r0, r5
 8012c16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012c1a:	f7ff bc77 	b.w	801250c <uxr_deserialize_CLIENT_Representation>
 8012c1e:	2204      	movs	r2, #4
 8012c20:	18b1      	adds	r1, r6, r2
 8012c22:	4628      	mov	r0, r5
 8012c24:	f7fc fdd8 	bl	800f7d8 <ucdr_deserialize_array_uint8_t>
 8012c28:	2202      	movs	r2, #2
 8012c2a:	f106 0108 	add.w	r1, r6, #8
 8012c2e:	4604      	mov	r4, r0
 8012c30:	4628      	mov	r0, r5
 8012c32:	f7fc fdd1 	bl	800f7d8 <ucdr_deserialize_array_uint8_t>
 8012c36:	2202      	movs	r2, #2
 8012c38:	4004      	ands	r4, r0
 8012c3a:	f106 010a 	add.w	r1, r6, #10
 8012c3e:	4628      	mov	r0, r5
 8012c40:	f7fc fdca 	bl	800f7d8 <ucdr_deserialize_array_uint8_t>
 8012c44:	b2e4      	uxtb	r4, r4
 8012c46:	4603      	mov	r3, r0
 8012c48:	f106 010c 	add.w	r1, r6, #12
 8012c4c:	4628      	mov	r0, r5
 8012c4e:	401c      	ands	r4, r3
 8012c50:	f7f7 ff16 	bl	800aa80 <ucdr_deserialize_bool>
 8012c54:	4004      	ands	r4, r0
 8012c56:	e78e      	b.n	8012b76 <uxr_deserialize_ObjectVariant+0x2a>
 8012c58:	68b1      	ldr	r1, [r6, #8]
 8012c5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012c5e:	4628      	mov	r0, r5
 8012c60:	f004 fcee 	bl	8017640 <ucdr_deserialize_string>
 8012c64:	4604      	mov	r4, r0
 8012c66:	e7b6      	b.n	8012bd6 <uxr_deserialize_ObjectVariant+0x8a>
 8012c68:	68b1      	ldr	r1, [r6, #8]
 8012c6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012c6e:	4628      	mov	r0, r5
 8012c70:	f004 fce6 	bl	8017640 <ucdr_deserialize_string>
 8012c74:	4604      	mov	r4, r0
 8012c76:	e7c4      	b.n	8012c02 <uxr_deserialize_ObjectVariant+0xb6>
 8012c78:	f106 0308 	add.w	r3, r6, #8
 8012c7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012c80:	f106 010c 	add.w	r1, r6, #12
 8012c84:	4628      	mov	r0, r5
 8012c86:	f7fc fef3 	bl	800fa70 <ucdr_deserialize_sequence_uint8_t>
 8012c8a:	4604      	mov	r4, r0
 8012c8c:	e7b9      	b.n	8012c02 <uxr_deserialize_ObjectVariant+0xb6>
 8012c8e:	bf00      	nop

08012c90 <uxr_deserialize_BaseObjectRequest>:
 8012c90:	b570      	push	{r4, r5, r6, lr}
 8012c92:	2202      	movs	r2, #2
 8012c94:	4605      	mov	r5, r0
 8012c96:	460e      	mov	r6, r1
 8012c98:	f7fc fd9e 	bl	800f7d8 <ucdr_deserialize_array_uint8_t>
 8012c9c:	2202      	movs	r2, #2
 8012c9e:	4604      	mov	r4, r0
 8012ca0:	18b1      	adds	r1, r6, r2
 8012ca2:	4628      	mov	r0, r5
 8012ca4:	f7fc fd98 	bl	800f7d8 <ucdr_deserialize_array_uint8_t>
 8012ca8:	4020      	ands	r0, r4
 8012caa:	b2c0      	uxtb	r0, r0
 8012cac:	bd70      	pop	{r4, r5, r6, pc}
 8012cae:	bf00      	nop

08012cb0 <uxr_serialize_ActivityInfoVariant>:
 8012cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012cb4:	460d      	mov	r5, r1
 8012cb6:	7809      	ldrb	r1, [r1, #0]
 8012cb8:	4607      	mov	r7, r0
 8012cba:	f7f7 fef9 	bl	800aab0 <ucdr_serialize_uint8_t>
 8012cbe:	4681      	mov	r9, r0
 8012cc0:	b138      	cbz	r0, 8012cd2 <uxr_serialize_ActivityInfoVariant+0x22>
 8012cc2:	782b      	ldrb	r3, [r5, #0]
 8012cc4:	2b06      	cmp	r3, #6
 8012cc6:	f000 8082 	beq.w	8012dce <uxr_serialize_ActivityInfoVariant+0x11e>
 8012cca:	2b0d      	cmp	r3, #13
 8012ccc:	d016      	beq.n	8012cfc <uxr_serialize_ActivityInfoVariant+0x4c>
 8012cce:	2b05      	cmp	r3, #5
 8012cd0:	d002      	beq.n	8012cd8 <uxr_serialize_ActivityInfoVariant+0x28>
 8012cd2:	4648      	mov	r0, r9
 8012cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012cd8:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8012cdc:	4638      	mov	r0, r7
 8012cde:	f7f8 fc23 	bl	800b528 <ucdr_serialize_int16_t>
 8012ce2:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8012ce6:	4681      	mov	r9, r0
 8012ce8:	4638      	mov	r0, r7
 8012cea:	f7f8 fb4d 	bl	800b388 <ucdr_serialize_uint64_t>
 8012cee:	ea09 0000 	and.w	r0, r9, r0
 8012cf2:	fa5f f980 	uxtb.w	r9, r0
 8012cf6:	4648      	mov	r0, r9
 8012cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012cfc:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8012d00:	4638      	mov	r0, r7
 8012d02:	f7f8 fc11 	bl	800b528 <ucdr_serialize_int16_t>
 8012d06:	68e9      	ldr	r1, [r5, #12]
 8012d08:	4681      	mov	r9, r0
 8012d0a:	4638      	mov	r0, r7
 8012d0c:	f7f8 f8e6 	bl	800aedc <ucdr_serialize_uint32_t>
 8012d10:	68eb      	ldr	r3, [r5, #12]
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d0eb      	beq.n	8012cee <uxr_serialize_ActivityInfoVariant+0x3e>
 8012d16:	b320      	cbz	r0, 8012d62 <uxr_serialize_ActivityInfoVariant+0xb2>
 8012d18:	f105 080c 	add.w	r8, r5, #12
 8012d1c:	2600      	movs	r6, #0
 8012d1e:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 8012d22:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8012d26:	f89a 1010 	ldrb.w	r1, [sl, #16]
 8012d2a:	4638      	mov	r0, r7
 8012d2c:	f7f7 fec0 	bl	800aab0 <ucdr_serialize_uint8_t>
 8012d30:	2800      	cmp	r0, #0
 8012d32:	d053      	beq.n	8012ddc <uxr_serialize_ActivityInfoVariant+0x12c>
 8012d34:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8012d38:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8012d3c:	0074      	lsls	r4, r6, #1
 8012d3e:	00c9      	lsls	r1, r1, #3
 8012d40:	2b03      	cmp	r3, #3
 8012d42:	d854      	bhi.n	8012dee <uxr_serialize_ActivityInfoVariant+0x13e>
 8012d44:	e8df f003 	tbb	[pc, r3]
 8012d48:	02102132 	.word	0x02102132
 8012d4c:	4441      	add	r1, r8
 8012d4e:	4638      	mov	r0, r7
 8012d50:	6889      	ldr	r1, [r1, #8]
 8012d52:	f004 fc65 	bl	8017620 <ucdr_serialize_string>
 8012d56:	68ea      	ldr	r2, [r5, #12]
 8012d58:	3601      	adds	r6, #1
 8012d5a:	4296      	cmp	r6, r2
 8012d5c:	d242      	bcs.n	8012de4 <uxr_serialize_ActivityInfoVariant+0x134>
 8012d5e:	2800      	cmp	r0, #0
 8012d60:	d1dd      	bne.n	8012d1e <uxr_serialize_ActivityInfoVariant+0x6e>
 8012d62:	f04f 0900 	mov.w	r9, #0
 8012d66:	e7b4      	b.n	8012cd2 <uxr_serialize_ActivityInfoVariant+0x22>
 8012d68:	3108      	adds	r1, #8
 8012d6a:	4441      	add	r1, r8
 8012d6c:	2210      	movs	r2, #16
 8012d6e:	4638      	mov	r0, r7
 8012d70:	f7fc fcce 	bl	800f710 <ucdr_serialize_array_uint8_t>
 8012d74:	4434      	add	r4, r6
 8012d76:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8012d7a:	4604      	mov	r4, r0
 8012d7c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012d7e:	4638      	mov	r0, r7
 8012d80:	f7f8 f8ac 	bl	800aedc <ucdr_serialize_uint32_t>
 8012d84:	4020      	ands	r0, r4
 8012d86:	b2c0      	uxtb	r0, r0
 8012d88:	e7e5      	b.n	8012d56 <uxr_serialize_ActivityInfoVariant+0xa6>
 8012d8a:	3108      	adds	r1, #8
 8012d8c:	4441      	add	r1, r8
 8012d8e:	2204      	movs	r2, #4
 8012d90:	4638      	mov	r0, r7
 8012d92:	f7fc fcbd 	bl	800f710 <ucdr_serialize_array_uint8_t>
 8012d96:	4434      	add	r4, r6
 8012d98:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8012d9c:	4604      	mov	r4, r0
 8012d9e:	8b19      	ldrh	r1, [r3, #24]
 8012da0:	4638      	mov	r0, r7
 8012da2:	f7f7 feb1 	bl	800ab08 <ucdr_serialize_uint16_t>
 8012da6:	4020      	ands	r0, r4
 8012da8:	b2c0      	uxtb	r0, r0
 8012daa:	e7d4      	b.n	8012d56 <uxr_serialize_ActivityInfoVariant+0xa6>
 8012dac:	3108      	adds	r1, #8
 8012dae:	4441      	add	r1, r8
 8012db0:	2202      	movs	r2, #2
 8012db2:	4638      	mov	r0, r7
 8012db4:	f7fc fcac 	bl	800f710 <ucdr_serialize_array_uint8_t>
 8012db8:	4434      	add	r4, r6
 8012dba:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8012dbe:	4604      	mov	r4, r0
 8012dc0:	7d99      	ldrb	r1, [r3, #22]
 8012dc2:	4638      	mov	r0, r7
 8012dc4:	f7f7 fe74 	bl	800aab0 <ucdr_serialize_uint8_t>
 8012dc8:	4020      	ands	r0, r4
 8012dca:	b2c0      	uxtb	r0, r0
 8012dcc:	e7c3      	b.n	8012d56 <uxr_serialize_ActivityInfoVariant+0xa6>
 8012dce:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8012dd2:	4638      	mov	r0, r7
 8012dd4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012dd8:	f7f8 bba6 	b.w	800b528 <ucdr_serialize_int16_t>
 8012ddc:	68ea      	ldr	r2, [r5, #12]
 8012dde:	3601      	adds	r6, #1
 8012de0:	42b2      	cmp	r2, r6
 8012de2:	d8be      	bhi.n	8012d62 <uxr_serialize_ActivityInfoVariant+0xb2>
 8012de4:	ea09 0900 	and.w	r9, r9, r0
 8012de8:	fa5f f989 	uxtb.w	r9, r9
 8012dec:	e771      	b.n	8012cd2 <uxr_serialize_ActivityInfoVariant+0x22>
 8012dee:	68eb      	ldr	r3, [r5, #12]
 8012df0:	3601      	adds	r6, #1
 8012df2:	429e      	cmp	r6, r3
 8012df4:	f10a 0a18 	add.w	sl, sl, #24
 8012df8:	d395      	bcc.n	8012d26 <uxr_serialize_ActivityInfoVariant+0x76>
 8012dfa:	e76a      	b.n	8012cd2 <uxr_serialize_ActivityInfoVariant+0x22>

08012dfc <uxr_deserialize_BaseObjectReply>:
 8012dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e00:	2202      	movs	r2, #2
 8012e02:	4606      	mov	r6, r0
 8012e04:	460f      	mov	r7, r1
 8012e06:	f7fc fce7 	bl	800f7d8 <ucdr_deserialize_array_uint8_t>
 8012e0a:	2202      	movs	r2, #2
 8012e0c:	18b9      	adds	r1, r7, r2
 8012e0e:	4605      	mov	r5, r0
 8012e10:	4630      	mov	r0, r6
 8012e12:	f7fc fce1 	bl	800f7d8 <ucdr_deserialize_array_uint8_t>
 8012e16:	1d39      	adds	r1, r7, #4
 8012e18:	4680      	mov	r8, r0
 8012e1a:	4630      	mov	r0, r6
 8012e1c:	f7f7 fe5e 	bl	800aadc <ucdr_deserialize_uint8_t>
 8012e20:	1d79      	adds	r1, r7, #5
 8012e22:	4604      	mov	r4, r0
 8012e24:	4630      	mov	r0, r6
 8012e26:	f7f7 fe59 	bl	800aadc <ucdr_deserialize_uint8_t>
 8012e2a:	ea05 0508 	and.w	r5, r5, r8
 8012e2e:	402c      	ands	r4, r5
 8012e30:	4020      	ands	r0, r4
 8012e32:	b2c0      	uxtb	r0, r0
 8012e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012e38 <uxr_serialize_ReadSpecification>:
 8012e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e3c:	460e      	mov	r6, r1
 8012e3e:	7809      	ldrb	r1, [r1, #0]
 8012e40:	4607      	mov	r7, r0
 8012e42:	f7f7 fe35 	bl	800aab0 <ucdr_serialize_uint8_t>
 8012e46:	7871      	ldrb	r1, [r6, #1]
 8012e48:	4604      	mov	r4, r0
 8012e4a:	4638      	mov	r0, r7
 8012e4c:	f7f7 fe30 	bl	800aab0 <ucdr_serialize_uint8_t>
 8012e50:	78b1      	ldrb	r1, [r6, #2]
 8012e52:	4004      	ands	r4, r0
 8012e54:	4638      	mov	r0, r7
 8012e56:	f7f7 fdfd 	bl	800aa54 <ucdr_serialize_bool>
 8012e5a:	78b3      	ldrb	r3, [r6, #2]
 8012e5c:	b2e4      	uxtb	r4, r4
 8012e5e:	4004      	ands	r4, r0
 8012e60:	b94b      	cbnz	r3, 8012e76 <uxr_serialize_ReadSpecification+0x3e>
 8012e62:	7a31      	ldrb	r1, [r6, #8]
 8012e64:	4638      	mov	r0, r7
 8012e66:	f7f7 fdf5 	bl	800aa54 <ucdr_serialize_bool>
 8012e6a:	7a33      	ldrb	r3, [r6, #8]
 8012e6c:	4004      	ands	r4, r0
 8012e6e:	b943      	cbnz	r3, 8012e82 <uxr_serialize_ReadSpecification+0x4a>
 8012e70:	4620      	mov	r0, r4
 8012e72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e76:	6871      	ldr	r1, [r6, #4]
 8012e78:	4638      	mov	r0, r7
 8012e7a:	f004 fbd1 	bl	8017620 <ucdr_serialize_string>
 8012e7e:	4004      	ands	r4, r0
 8012e80:	e7ef      	b.n	8012e62 <uxr_serialize_ReadSpecification+0x2a>
 8012e82:	8971      	ldrh	r1, [r6, #10]
 8012e84:	4638      	mov	r0, r7
 8012e86:	f7f7 fe3f 	bl	800ab08 <ucdr_serialize_uint16_t>
 8012e8a:	89b1      	ldrh	r1, [r6, #12]
 8012e8c:	4605      	mov	r5, r0
 8012e8e:	4638      	mov	r0, r7
 8012e90:	f7f7 fe3a 	bl	800ab08 <ucdr_serialize_uint16_t>
 8012e94:	89f1      	ldrh	r1, [r6, #14]
 8012e96:	4005      	ands	r5, r0
 8012e98:	4638      	mov	r0, r7
 8012e9a:	f7f7 fe35 	bl	800ab08 <ucdr_serialize_uint16_t>
 8012e9e:	8a31      	ldrh	r1, [r6, #16]
 8012ea0:	4680      	mov	r8, r0
 8012ea2:	4638      	mov	r0, r7
 8012ea4:	f7f7 fe30 	bl	800ab08 <ucdr_serialize_uint16_t>
 8012ea8:	b2ed      	uxtb	r5, r5
 8012eaa:	4025      	ands	r5, r4
 8012eac:	ea08 0505 	and.w	r5, r8, r5
 8012eb0:	ea00 0405 	and.w	r4, r0, r5
 8012eb4:	4620      	mov	r0, r4
 8012eb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012eba:	bf00      	nop

08012ebc <uxr_serialize_CREATE_CLIENT_Payload>:
 8012ebc:	f7ff bace 	b.w	801245c <uxr_serialize_CLIENT_Representation>

08012ec0 <uxr_serialize_CREATE_Payload>:
 8012ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ec2:	2202      	movs	r2, #2
 8012ec4:	4607      	mov	r7, r0
 8012ec6:	460e      	mov	r6, r1
 8012ec8:	f7fc fc22 	bl	800f710 <ucdr_serialize_array_uint8_t>
 8012ecc:	2202      	movs	r2, #2
 8012ece:	18b1      	adds	r1, r6, r2
 8012ed0:	4605      	mov	r5, r0
 8012ed2:	4638      	mov	r0, r7
 8012ed4:	f7fc fc1c 	bl	800f710 <ucdr_serialize_array_uint8_t>
 8012ed8:	7931      	ldrb	r1, [r6, #4]
 8012eda:	4604      	mov	r4, r0
 8012edc:	4638      	mov	r0, r7
 8012ede:	f7f7 fde7 	bl	800aab0 <ucdr_serialize_uint8_t>
 8012ee2:	b170      	cbz	r0, 8012f02 <uxr_serialize_CREATE_Payload+0x42>
 8012ee4:	7933      	ldrb	r3, [r6, #4]
 8012ee6:	402c      	ands	r4, r5
 8012ee8:	3b01      	subs	r3, #1
 8012eea:	b2e4      	uxtb	r4, r4
 8012eec:	2b0d      	cmp	r3, #13
 8012eee:	d809      	bhi.n	8012f04 <uxr_serialize_CREATE_Payload+0x44>
 8012ef0:	e8df f003 	tbb	[pc, r3]
 8012ef4:	23230a4c 	.word	0x23230a4c
 8012ef8:	0a0a0a0a 	.word	0x0a0a0a0a
 8012efc:	12121208 	.word	0x12121208
 8012f00:	3e45      	.short	0x3e45
 8012f02:	2400      	movs	r4, #0
 8012f04:	4620      	mov	r0, r4
 8012f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f08:	f106 0108 	add.w	r1, r6, #8
 8012f0c:	4638      	mov	r0, r7
 8012f0e:	f7ff fbab 	bl	8012668 <uxr_serialize_DATAWRITER_Representation>
 8012f12:	4004      	ands	r4, r0
 8012f14:	4620      	mov	r0, r4
 8012f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f18:	7a31      	ldrb	r1, [r6, #8]
 8012f1a:	4638      	mov	r0, r7
 8012f1c:	f7f7 fdc8 	bl	800aab0 <ucdr_serialize_uint8_t>
 8012f20:	2800      	cmp	r0, #0
 8012f22:	d0ee      	beq.n	8012f02 <uxr_serialize_CREATE_Payload+0x42>
 8012f24:	7a33      	ldrb	r3, [r6, #8]
 8012f26:	2b01      	cmp	r3, #1
 8012f28:	d001      	beq.n	8012f2e <uxr_serialize_CREATE_Payload+0x6e>
 8012f2a:	2b02      	cmp	r3, #2
 8012f2c:	d1ea      	bne.n	8012f04 <uxr_serialize_CREATE_Payload+0x44>
 8012f2e:	68f1      	ldr	r1, [r6, #12]
 8012f30:	4638      	mov	r0, r7
 8012f32:	f004 fb75 	bl	8017620 <ucdr_serialize_string>
 8012f36:	4004      	ands	r4, r0
 8012f38:	e7e4      	b.n	8012f04 <uxr_serialize_CREATE_Payload+0x44>
 8012f3a:	7a31      	ldrb	r1, [r6, #8]
 8012f3c:	4638      	mov	r0, r7
 8012f3e:	f7f7 fdb7 	bl	800aab0 <ucdr_serialize_uint8_t>
 8012f42:	4605      	mov	r5, r0
 8012f44:	b158      	cbz	r0, 8012f5e <uxr_serialize_CREATE_Payload+0x9e>
 8012f46:	7a33      	ldrb	r3, [r6, #8]
 8012f48:	2b02      	cmp	r3, #2
 8012f4a:	d034      	beq.n	8012fb6 <uxr_serialize_CREATE_Payload+0xf6>
 8012f4c:	2b03      	cmp	r3, #3
 8012f4e:	d106      	bne.n	8012f5e <uxr_serialize_CREATE_Payload+0x9e>
 8012f50:	68f2      	ldr	r2, [r6, #12]
 8012f52:	f106 0110 	add.w	r1, r6, #16
 8012f56:	4638      	mov	r0, r7
 8012f58:	f7fc fd78 	bl	800fa4c <ucdr_serialize_sequence_uint8_t>
 8012f5c:	4605      	mov	r5, r0
 8012f5e:	2202      	movs	r2, #2
 8012f60:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8012f64:	4638      	mov	r0, r7
 8012f66:	f7fc fbd3 	bl	800f710 <ucdr_serialize_array_uint8_t>
 8012f6a:	4028      	ands	r0, r5
 8012f6c:	4004      	ands	r4, r0
 8012f6e:	e7c9      	b.n	8012f04 <uxr_serialize_CREATE_Payload+0x44>
 8012f70:	f106 0108 	add.w	r1, r6, #8
 8012f74:	4638      	mov	r0, r7
 8012f76:	f7ff fa71 	bl	801245c <uxr_serialize_CLIENT_Representation>
 8012f7a:	4004      	ands	r4, r0
 8012f7c:	e7c2      	b.n	8012f04 <uxr_serialize_CREATE_Payload+0x44>
 8012f7e:	f106 0108 	add.w	r1, r6, #8
 8012f82:	4638      	mov	r0, r7
 8012f84:	f7ff fb26 	bl	80125d4 <uxr_serialize_AGENT_Representation>
 8012f88:	4004      	ands	r4, r0
 8012f8a:	e7bb      	b.n	8012f04 <uxr_serialize_CREATE_Payload+0x44>
 8012f8c:	7a31      	ldrb	r1, [r6, #8]
 8012f8e:	4638      	mov	r0, r7
 8012f90:	f7f7 fd8e 	bl	800aab0 <ucdr_serialize_uint8_t>
 8012f94:	4605      	mov	r5, r0
 8012f96:	b130      	cbz	r0, 8012fa6 <uxr_serialize_CREATE_Payload+0xe6>
 8012f98:	7a33      	ldrb	r3, [r6, #8]
 8012f9a:	2b02      	cmp	r3, #2
 8012f9c:	d011      	beq.n	8012fc2 <uxr_serialize_CREATE_Payload+0x102>
 8012f9e:	2b03      	cmp	r3, #3
 8012fa0:	d015      	beq.n	8012fce <uxr_serialize_CREATE_Payload+0x10e>
 8012fa2:	2b01      	cmp	r3, #1
 8012fa4:	d00d      	beq.n	8012fc2 <uxr_serialize_CREATE_Payload+0x102>
 8012fa6:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 8012faa:	4638      	mov	r0, r7
 8012fac:	f7f8 fabc 	bl	800b528 <ucdr_serialize_int16_t>
 8012fb0:	4028      	ands	r0, r5
 8012fb2:	4004      	ands	r4, r0
 8012fb4:	e7a6      	b.n	8012f04 <uxr_serialize_CREATE_Payload+0x44>
 8012fb6:	68f1      	ldr	r1, [r6, #12]
 8012fb8:	4638      	mov	r0, r7
 8012fba:	f004 fb31 	bl	8017620 <ucdr_serialize_string>
 8012fbe:	4605      	mov	r5, r0
 8012fc0:	e7cd      	b.n	8012f5e <uxr_serialize_CREATE_Payload+0x9e>
 8012fc2:	68f1      	ldr	r1, [r6, #12]
 8012fc4:	4638      	mov	r0, r7
 8012fc6:	f004 fb2b 	bl	8017620 <ucdr_serialize_string>
 8012fca:	4605      	mov	r5, r0
 8012fcc:	e7eb      	b.n	8012fa6 <uxr_serialize_CREATE_Payload+0xe6>
 8012fce:	68f2      	ldr	r2, [r6, #12]
 8012fd0:	f106 0110 	add.w	r1, r6, #16
 8012fd4:	4638      	mov	r0, r7
 8012fd6:	f7fc fd39 	bl	800fa4c <ucdr_serialize_sequence_uint8_t>
 8012fda:	4605      	mov	r5, r0
 8012fdc:	e7e3      	b.n	8012fa6 <uxr_serialize_CREATE_Payload+0xe6>
 8012fde:	bf00      	nop

08012fe0 <uxr_deserialize_GET_INFO_Payload>:
 8012fe0:	b570      	push	{r4, r5, r6, lr}
 8012fe2:	2202      	movs	r2, #2
 8012fe4:	4605      	mov	r5, r0
 8012fe6:	460e      	mov	r6, r1
 8012fe8:	f7fc fbf6 	bl	800f7d8 <ucdr_deserialize_array_uint8_t>
 8012fec:	2202      	movs	r2, #2
 8012fee:	18b1      	adds	r1, r6, r2
 8012ff0:	4604      	mov	r4, r0
 8012ff2:	4628      	mov	r0, r5
 8012ff4:	f7fc fbf0 	bl	800f7d8 <ucdr_deserialize_array_uint8_t>
 8012ff8:	1d31      	adds	r1, r6, #4
 8012ffa:	4004      	ands	r4, r0
 8012ffc:	4628      	mov	r0, r5
 8012ffe:	f7f8 f89d 	bl	800b13c <ucdr_deserialize_uint32_t>
 8013002:	b2e4      	uxtb	r4, r4
 8013004:	4020      	ands	r0, r4
 8013006:	bd70      	pop	{r4, r5, r6, pc}

08013008 <uxr_serialize_DELETE_Payload>:
 8013008:	b570      	push	{r4, r5, r6, lr}
 801300a:	2202      	movs	r2, #2
 801300c:	4605      	mov	r5, r0
 801300e:	460e      	mov	r6, r1
 8013010:	f7fc fb7e 	bl	800f710 <ucdr_serialize_array_uint8_t>
 8013014:	2202      	movs	r2, #2
 8013016:	4604      	mov	r4, r0
 8013018:	18b1      	adds	r1, r6, r2
 801301a:	4628      	mov	r0, r5
 801301c:	f7fc fb78 	bl	800f710 <ucdr_serialize_array_uint8_t>
 8013020:	4020      	ands	r0, r4
 8013022:	b2c0      	uxtb	r0, r0
 8013024:	bd70      	pop	{r4, r5, r6, pc}
 8013026:	bf00      	nop

08013028 <uxr_deserialize_STATUS_AGENT_Payload>:
 8013028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801302c:	4605      	mov	r5, r0
 801302e:	460e      	mov	r6, r1
 8013030:	f7f7 fd54 	bl	800aadc <ucdr_deserialize_uint8_t>
 8013034:	1c71      	adds	r1, r6, #1
 8013036:	4604      	mov	r4, r0
 8013038:	4628      	mov	r0, r5
 801303a:	f7f7 fd4f 	bl	800aadc <ucdr_deserialize_uint8_t>
 801303e:	2204      	movs	r2, #4
 8013040:	18b1      	adds	r1, r6, r2
 8013042:	4680      	mov	r8, r0
 8013044:	4628      	mov	r0, r5
 8013046:	f7fc fbc7 	bl	800f7d8 <ucdr_deserialize_array_uint8_t>
 801304a:	f106 0108 	add.w	r1, r6, #8
 801304e:	4607      	mov	r7, r0
 8013050:	2202      	movs	r2, #2
 8013052:	4628      	mov	r0, r5
 8013054:	f7fc fbc0 	bl	800f7d8 <ucdr_deserialize_array_uint8_t>
 8013058:	ea04 0308 	and.w	r3, r4, r8
 801305c:	b2db      	uxtb	r3, r3
 801305e:	ea03 0407 	and.w	r4, r3, r7
 8013062:	2202      	movs	r2, #2
 8013064:	4607      	mov	r7, r0
 8013066:	f106 010a 	add.w	r1, r6, #10
 801306a:	4628      	mov	r0, r5
 801306c:	f7fc fbb4 	bl	800f7d8 <ucdr_deserialize_array_uint8_t>
 8013070:	f106 010c 	add.w	r1, r6, #12
 8013074:	4603      	mov	r3, r0
 8013076:	4628      	mov	r0, r5
 8013078:	461d      	mov	r5, r3
 801307a:	f7f7 fd01 	bl	800aa80 <ucdr_deserialize_bool>
 801307e:	403c      	ands	r4, r7
 8013080:	4025      	ands	r5, r4
 8013082:	4028      	ands	r0, r5
 8013084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013088 <uxr_deserialize_STATUS_Payload>:
 8013088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801308c:	2202      	movs	r2, #2
 801308e:	4606      	mov	r6, r0
 8013090:	460f      	mov	r7, r1
 8013092:	f7fc fba1 	bl	800f7d8 <ucdr_deserialize_array_uint8_t>
 8013096:	2202      	movs	r2, #2
 8013098:	18b9      	adds	r1, r7, r2
 801309a:	4605      	mov	r5, r0
 801309c:	4630      	mov	r0, r6
 801309e:	f7fc fb9b 	bl	800f7d8 <ucdr_deserialize_array_uint8_t>
 80130a2:	1d39      	adds	r1, r7, #4
 80130a4:	4680      	mov	r8, r0
 80130a6:	4630      	mov	r0, r6
 80130a8:	f7f7 fd18 	bl	800aadc <ucdr_deserialize_uint8_t>
 80130ac:	1d79      	adds	r1, r7, #5
 80130ae:	4604      	mov	r4, r0
 80130b0:	4630      	mov	r0, r6
 80130b2:	f7f7 fd13 	bl	800aadc <ucdr_deserialize_uint8_t>
 80130b6:	ea05 0508 	and.w	r5, r5, r8
 80130ba:	402c      	ands	r4, r5
 80130bc:	4020      	ands	r0, r4
 80130be:	b2c0      	uxtb	r0, r0
 80130c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080130c4 <uxr_serialize_INFO_Payload>:
 80130c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130c8:	2202      	movs	r2, #2
 80130ca:	460c      	mov	r4, r1
 80130cc:	4605      	mov	r5, r0
 80130ce:	f7fc fb1f 	bl	800f710 <ucdr_serialize_array_uint8_t>
 80130d2:	2202      	movs	r2, #2
 80130d4:	18a1      	adds	r1, r4, r2
 80130d6:	4680      	mov	r8, r0
 80130d8:	4628      	mov	r0, r5
 80130da:	f7fc fb19 	bl	800f710 <ucdr_serialize_array_uint8_t>
 80130de:	7921      	ldrb	r1, [r4, #4]
 80130e0:	4607      	mov	r7, r0
 80130e2:	4628      	mov	r0, r5
 80130e4:	f7f7 fce4 	bl	800aab0 <ucdr_serialize_uint8_t>
 80130e8:	7961      	ldrb	r1, [r4, #5]
 80130ea:	4606      	mov	r6, r0
 80130ec:	4628      	mov	r0, r5
 80130ee:	f7f7 fcdf 	bl	800aab0 <ucdr_serialize_uint8_t>
 80130f2:	ea08 0807 	and.w	r8, r8, r7
 80130f6:	ea06 0608 	and.w	r6, r6, r8
 80130fa:	4006      	ands	r6, r0
 80130fc:	7a21      	ldrb	r1, [r4, #8]
 80130fe:	4628      	mov	r0, r5
 8013100:	f7f7 fca8 	bl	800aa54 <ucdr_serialize_bool>
 8013104:	7a23      	ldrb	r3, [r4, #8]
 8013106:	b2f7      	uxtb	r7, r6
 8013108:	4606      	mov	r6, r0
 801310a:	b96b      	cbnz	r3, 8013128 <uxr_serialize_INFO_Payload+0x64>
 801310c:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8013110:	4628      	mov	r0, r5
 8013112:	f7f7 fc9f 	bl	800aa54 <ucdr_serialize_bool>
 8013116:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 801311a:	4030      	ands	r0, r6
 801311c:	b2c6      	uxtb	r6, r0
 801311e:	b983      	cbnz	r3, 8013142 <uxr_serialize_INFO_Payload+0x7e>
 8013120:	ea06 0007 	and.w	r0, r6, r7
 8013124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013128:	7b21      	ldrb	r1, [r4, #12]
 801312a:	4628      	mov	r0, r5
 801312c:	f7f7 fcc0 	bl	800aab0 <ucdr_serialize_uint8_t>
 8013130:	b188      	cbz	r0, 8013156 <uxr_serialize_INFO_Payload+0x92>
 8013132:	f104 010c 	add.w	r1, r4, #12
 8013136:	4628      	mov	r0, r5
 8013138:	f7ff fabe 	bl	80126b8 <uxr_serialize_ObjectVariant.part.0>
 801313c:	4030      	ands	r0, r6
 801313e:	b2c6      	uxtb	r6, r0
 8013140:	e7e4      	b.n	801310c <uxr_serialize_INFO_Payload+0x48>
 8013142:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8013146:	4628      	mov	r0, r5
 8013148:	f7ff fdb2 	bl	8012cb0 <uxr_serialize_ActivityInfoVariant>
 801314c:	4006      	ands	r6, r0
 801314e:	ea06 0007 	and.w	r0, r6, r7
 8013152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013156:	4606      	mov	r6, r0
 8013158:	e7d8      	b.n	801310c <uxr_serialize_INFO_Payload+0x48>
 801315a:	bf00      	nop

0801315c <uxr_serialize_READ_DATA_Payload>:
 801315c:	b570      	push	{r4, r5, r6, lr}
 801315e:	2202      	movs	r2, #2
 8013160:	4605      	mov	r5, r0
 8013162:	460e      	mov	r6, r1
 8013164:	f7fc fad4 	bl	800f710 <ucdr_serialize_array_uint8_t>
 8013168:	2202      	movs	r2, #2
 801316a:	18b1      	adds	r1, r6, r2
 801316c:	4604      	mov	r4, r0
 801316e:	4628      	mov	r0, r5
 8013170:	f7fc face 	bl	800f710 <ucdr_serialize_array_uint8_t>
 8013174:	1d31      	adds	r1, r6, #4
 8013176:	4004      	ands	r4, r0
 8013178:	4628      	mov	r0, r5
 801317a:	f7ff fe5d 	bl	8012e38 <uxr_serialize_ReadSpecification>
 801317e:	b2e4      	uxtb	r4, r4
 8013180:	4020      	ands	r0, r4
 8013182:	bd70      	pop	{r4, r5, r6, pc}

08013184 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8013184:	b570      	push	{r4, r5, r6, lr}
 8013186:	2202      	movs	r2, #2
 8013188:	4605      	mov	r5, r0
 801318a:	460e      	mov	r6, r1
 801318c:	f7fc fac0 	bl	800f710 <ucdr_serialize_array_uint8_t>
 8013190:	2202      	movs	r2, #2
 8013192:	4604      	mov	r4, r0
 8013194:	18b1      	adds	r1, r6, r2
 8013196:	4628      	mov	r0, r5
 8013198:	f7fc faba 	bl	800f710 <ucdr_serialize_array_uint8_t>
 801319c:	4020      	ands	r0, r4
 801319e:	b2c0      	uxtb	r0, r0
 80131a0:	bd70      	pop	{r4, r5, r6, pc}
 80131a2:	bf00      	nop

080131a4 <uxr_serialize_ACKNACK_Payload>:
 80131a4:	b570      	push	{r4, r5, r6, lr}
 80131a6:	460c      	mov	r4, r1
 80131a8:	460e      	mov	r6, r1
 80131aa:	f834 1b02 	ldrh.w	r1, [r4], #2
 80131ae:	4605      	mov	r5, r0
 80131b0:	f7f7 fcaa 	bl	800ab08 <ucdr_serialize_uint16_t>
 80131b4:	2202      	movs	r2, #2
 80131b6:	4621      	mov	r1, r4
 80131b8:	4604      	mov	r4, r0
 80131ba:	4628      	mov	r0, r5
 80131bc:	f7fc faa8 	bl	800f710 <ucdr_serialize_array_uint8_t>
 80131c0:	7931      	ldrb	r1, [r6, #4]
 80131c2:	4004      	ands	r4, r0
 80131c4:	4628      	mov	r0, r5
 80131c6:	f7f7 fc73 	bl	800aab0 <ucdr_serialize_uint8_t>
 80131ca:	b2e4      	uxtb	r4, r4
 80131cc:	4020      	ands	r0, r4
 80131ce:	bd70      	pop	{r4, r5, r6, pc}

080131d0 <uxr_deserialize_ACKNACK_Payload>:
 80131d0:	b570      	push	{r4, r5, r6, lr}
 80131d2:	4605      	mov	r5, r0
 80131d4:	460e      	mov	r6, r1
 80131d6:	f7f7 fd97 	bl	800ad08 <ucdr_deserialize_uint16_t>
 80131da:	2202      	movs	r2, #2
 80131dc:	18b1      	adds	r1, r6, r2
 80131de:	4604      	mov	r4, r0
 80131e0:	4628      	mov	r0, r5
 80131e2:	f7fc faf9 	bl	800f7d8 <ucdr_deserialize_array_uint8_t>
 80131e6:	1d31      	adds	r1, r6, #4
 80131e8:	4004      	ands	r4, r0
 80131ea:	4628      	mov	r0, r5
 80131ec:	f7f7 fc76 	bl	800aadc <ucdr_deserialize_uint8_t>
 80131f0:	b2e4      	uxtb	r4, r4
 80131f2:	4020      	ands	r0, r4
 80131f4:	bd70      	pop	{r4, r5, r6, pc}
 80131f6:	bf00      	nop

080131f8 <uxr_serialize_HEARTBEAT_Payload>:
 80131f8:	b570      	push	{r4, r5, r6, lr}
 80131fa:	460d      	mov	r5, r1
 80131fc:	8809      	ldrh	r1, [r1, #0]
 80131fe:	4606      	mov	r6, r0
 8013200:	f7f7 fc82 	bl	800ab08 <ucdr_serialize_uint16_t>
 8013204:	8869      	ldrh	r1, [r5, #2]
 8013206:	4604      	mov	r4, r0
 8013208:	4630      	mov	r0, r6
 801320a:	f7f7 fc7d 	bl	800ab08 <ucdr_serialize_uint16_t>
 801320e:	7929      	ldrb	r1, [r5, #4]
 8013210:	4004      	ands	r4, r0
 8013212:	4630      	mov	r0, r6
 8013214:	f7f7 fc4c 	bl	800aab0 <ucdr_serialize_uint8_t>
 8013218:	b2e4      	uxtb	r4, r4
 801321a:	4020      	ands	r0, r4
 801321c:	bd70      	pop	{r4, r5, r6, pc}
 801321e:	bf00      	nop

08013220 <uxr_deserialize_HEARTBEAT_Payload>:
 8013220:	b570      	push	{r4, r5, r6, lr}
 8013222:	4605      	mov	r5, r0
 8013224:	460e      	mov	r6, r1
 8013226:	f7f7 fd6f 	bl	800ad08 <ucdr_deserialize_uint16_t>
 801322a:	1cb1      	adds	r1, r6, #2
 801322c:	4604      	mov	r4, r0
 801322e:	4628      	mov	r0, r5
 8013230:	f7f7 fd6a 	bl	800ad08 <ucdr_deserialize_uint16_t>
 8013234:	1d31      	adds	r1, r6, #4
 8013236:	4004      	ands	r4, r0
 8013238:	4628      	mov	r0, r5
 801323a:	f7f7 fc4f 	bl	800aadc <ucdr_deserialize_uint8_t>
 801323e:	b2e4      	uxtb	r4, r4
 8013240:	4020      	ands	r0, r4
 8013242:	bd70      	pop	{r4, r5, r6, pc}

08013244 <uxr_serialize_TIMESTAMP_Payload>:
 8013244:	b570      	push	{r4, r5, r6, lr}
 8013246:	460d      	mov	r5, r1
 8013248:	6809      	ldr	r1, [r1, #0]
 801324a:	4606      	mov	r6, r0
 801324c:	f7f8 fa60 	bl	800b710 <ucdr_serialize_int32_t>
 8013250:	6869      	ldr	r1, [r5, #4]
 8013252:	4604      	mov	r4, r0
 8013254:	4630      	mov	r0, r6
 8013256:	f7f7 fe41 	bl	800aedc <ucdr_serialize_uint32_t>
 801325a:	4020      	ands	r0, r4
 801325c:	b2c0      	uxtb	r0, r0
 801325e:	bd70      	pop	{r4, r5, r6, pc}

08013260 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8013260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013264:	4605      	mov	r5, r0
 8013266:	460e      	mov	r6, r1
 8013268:	f7f8 faea 	bl	800b840 <ucdr_deserialize_int32_t>
 801326c:	1d31      	adds	r1, r6, #4
 801326e:	4607      	mov	r7, r0
 8013270:	4628      	mov	r0, r5
 8013272:	f7f7 ff63 	bl	800b13c <ucdr_deserialize_uint32_t>
 8013276:	f106 0108 	add.w	r1, r6, #8
 801327a:	4680      	mov	r8, r0
 801327c:	4628      	mov	r0, r5
 801327e:	f7f8 fadf 	bl	800b840 <ucdr_deserialize_int32_t>
 8013282:	f106 010c 	add.w	r1, r6, #12
 8013286:	4604      	mov	r4, r0
 8013288:	4628      	mov	r0, r5
 801328a:	f7f7 ff57 	bl	800b13c <ucdr_deserialize_uint32_t>
 801328e:	ea07 0708 	and.w	r7, r7, r8
 8013292:	403c      	ands	r4, r7
 8013294:	f106 0110 	add.w	r1, r6, #16
 8013298:	4004      	ands	r4, r0
 801329a:	4628      	mov	r0, r5
 801329c:	f7f8 fad0 	bl	800b840 <ucdr_deserialize_int32_t>
 80132a0:	f106 0114 	add.w	r1, r6, #20
 80132a4:	4607      	mov	r7, r0
 80132a6:	4628      	mov	r0, r5
 80132a8:	f7f7 ff48 	bl	800b13c <ucdr_deserialize_uint32_t>
 80132ac:	b2e4      	uxtb	r4, r4
 80132ae:	403c      	ands	r4, r7
 80132b0:	4020      	ands	r0, r4
 80132b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132b6:	bf00      	nop

080132b8 <uxr_serialize_SampleIdentity>:
 80132b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132bc:	220c      	movs	r2, #12
 80132be:	4604      	mov	r4, r0
 80132c0:	460d      	mov	r5, r1
 80132c2:	f7fc fa25 	bl	800f710 <ucdr_serialize_array_uint8_t>
 80132c6:	2203      	movs	r2, #3
 80132c8:	f105 010c 	add.w	r1, r5, #12
 80132cc:	4607      	mov	r7, r0
 80132ce:	4620      	mov	r0, r4
 80132d0:	f7fc fa1e 	bl	800f710 <ucdr_serialize_array_uint8_t>
 80132d4:	7be9      	ldrb	r1, [r5, #15]
 80132d6:	4680      	mov	r8, r0
 80132d8:	4620      	mov	r0, r4
 80132da:	f7f7 fbe9 	bl	800aab0 <ucdr_serialize_uint8_t>
 80132de:	6929      	ldr	r1, [r5, #16]
 80132e0:	4606      	mov	r6, r0
 80132e2:	4620      	mov	r0, r4
 80132e4:	f7f8 fa14 	bl	800b710 <ucdr_serialize_int32_t>
 80132e8:	6969      	ldr	r1, [r5, #20]
 80132ea:	4603      	mov	r3, r0
 80132ec:	4620      	mov	r0, r4
 80132ee:	ea07 0708 	and.w	r7, r7, r8
 80132f2:	461c      	mov	r4, r3
 80132f4:	f7f7 fdf2 	bl	800aedc <ucdr_serialize_uint32_t>
 80132f8:	403e      	ands	r6, r7
 80132fa:	4034      	ands	r4, r6
 80132fc:	4020      	ands	r0, r4
 80132fe:	b2c0      	uxtb	r0, r0
 8013300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013304 <uxr_deserialize_SampleIdentity>:
 8013304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013308:	220c      	movs	r2, #12
 801330a:	4604      	mov	r4, r0
 801330c:	460d      	mov	r5, r1
 801330e:	f7fc fa63 	bl	800f7d8 <ucdr_deserialize_array_uint8_t>
 8013312:	2203      	movs	r2, #3
 8013314:	f105 010c 	add.w	r1, r5, #12
 8013318:	4607      	mov	r7, r0
 801331a:	4620      	mov	r0, r4
 801331c:	f7fc fa5c 	bl	800f7d8 <ucdr_deserialize_array_uint8_t>
 8013320:	f105 010f 	add.w	r1, r5, #15
 8013324:	4680      	mov	r8, r0
 8013326:	4620      	mov	r0, r4
 8013328:	f7f7 fbd8 	bl	800aadc <ucdr_deserialize_uint8_t>
 801332c:	f105 0110 	add.w	r1, r5, #16
 8013330:	4606      	mov	r6, r0
 8013332:	4620      	mov	r0, r4
 8013334:	f7f8 fa84 	bl	800b840 <ucdr_deserialize_int32_t>
 8013338:	f105 0114 	add.w	r1, r5, #20
 801333c:	4603      	mov	r3, r0
 801333e:	4620      	mov	r0, r4
 8013340:	ea07 0708 	and.w	r7, r7, r8
 8013344:	461c      	mov	r4, r3
 8013346:	f7f7 fef9 	bl	800b13c <ucdr_deserialize_uint32_t>
 801334a:	403e      	ands	r6, r7
 801334c:	4034      	ands	r4, r6
 801334e:	4020      	ands	r0, r4
 8013350:	b2c0      	uxtb	r0, r0
 8013352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013356:	bf00      	nop

08013358 <rcl_client_get_rmw_handle>:
 8013358:	b118      	cbz	r0, 8013362 <rcl_client_get_rmw_handle+0xa>
 801335a:	6800      	ldr	r0, [r0, #0]
 801335c:	b108      	cbz	r0, 8013362 <rcl_client_get_rmw_handle+0xa>
 801335e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8013362:	4770      	bx	lr

08013364 <rcl_send_request>:
 8013364:	b570      	push	{r4, r5, r6, lr}
 8013366:	b082      	sub	sp, #8
 8013368:	b1e8      	cbz	r0, 80133a6 <rcl_send_request+0x42>
 801336a:	4604      	mov	r4, r0
 801336c:	6800      	ldr	r0, [r0, #0]
 801336e:	b1d0      	cbz	r0, 80133a6 <rcl_send_request+0x42>
 8013370:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8013374:	b1bb      	cbz	r3, 80133a6 <rcl_send_request+0x42>
 8013376:	460e      	mov	r6, r1
 8013378:	b1d1      	cbz	r1, 80133b0 <rcl_send_request+0x4c>
 801337a:	4615      	mov	r5, r2
 801337c:	b1c2      	cbz	r2, 80133b0 <rcl_send_request+0x4c>
 801337e:	2105      	movs	r1, #5
 8013380:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8013384:	f002 fe58 	bl	8016038 <__atomic_load_8>
 8013388:	6823      	ldr	r3, [r4, #0]
 801338a:	e9c5 0100 	strd	r0, r1, [r5]
 801338e:	462a      	mov	r2, r5
 8013390:	4631      	mov	r1, r6
 8013392:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8013396:	f003 fd43 	bl	8016e20 <rmw_send_request>
 801339a:	4606      	mov	r6, r0
 801339c:	b160      	cbz	r0, 80133b8 <rcl_send_request+0x54>
 801339e:	2601      	movs	r6, #1
 80133a0:	4630      	mov	r0, r6
 80133a2:	b002      	add	sp, #8
 80133a4:	bd70      	pop	{r4, r5, r6, pc}
 80133a6:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 80133aa:	4630      	mov	r0, r6
 80133ac:	b002      	add	sp, #8
 80133ae:	bd70      	pop	{r4, r5, r6, pc}
 80133b0:	260b      	movs	r6, #11
 80133b2:	4630      	mov	r0, r6
 80133b4:	b002      	add	sp, #8
 80133b6:	bd70      	pop	{r4, r5, r6, pc}
 80133b8:	6820      	ldr	r0, [r4, #0]
 80133ba:	2105      	movs	r1, #5
 80133bc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80133c0:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 80133c4:	9100      	str	r1, [sp, #0]
 80133c6:	f002 fea3 	bl	8016110 <__atomic_exchange_8>
 80133ca:	4630      	mov	r0, r6
 80133cc:	b002      	add	sp, #8
 80133ce:	bd70      	pop	{r4, r5, r6, pc}

080133d0 <rcl_take_response>:
 80133d0:	b570      	push	{r4, r5, r6, lr}
 80133d2:	468e      	mov	lr, r1
 80133d4:	460c      	mov	r4, r1
 80133d6:	4616      	mov	r6, r2
 80133d8:	4605      	mov	r5, r0
 80133da:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80133de:	b08c      	sub	sp, #48	@ 0x30
 80133e0:	f10d 0c18 	add.w	ip, sp, #24
 80133e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80133e8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80133ec:	e88c 0003 	stmia.w	ip, {r0, r1}
 80133f0:	b35d      	cbz	r5, 801344a <rcl_take_response+0x7a>
 80133f2:	682b      	ldr	r3, [r5, #0]
 80133f4:	b34b      	cbz	r3, 801344a <rcl_take_response+0x7a>
 80133f6:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80133fa:	b330      	cbz	r0, 801344a <rcl_take_response+0x7a>
 80133fc:	b346      	cbz	r6, 8013450 <rcl_take_response+0x80>
 80133fe:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8013458 <rcl_take_response+0x88>
 8013402:	2300      	movs	r3, #0
 8013404:	f88d 3007 	strb.w	r3, [sp, #7]
 8013408:	4632      	mov	r2, r6
 801340a:	f10d 0307 	add.w	r3, sp, #7
 801340e:	a902      	add	r1, sp, #8
 8013410:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013414:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013418:	f003 fe0a 	bl	8017030 <rmw_take_response>
 801341c:	4605      	mov	r5, r0
 801341e:	b9c8      	cbnz	r0, 8013454 <rcl_take_response+0x84>
 8013420:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8013424:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8013428:	2a00      	cmp	r2, #0
 801342a:	bf08      	it	eq
 801342c:	461d      	moveq	r5, r3
 801342e:	f10d 0e18 	add.w	lr, sp, #24
 8013432:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013436:	46a4      	mov	ip, r4
 8013438:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801343c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013440:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013444:	4628      	mov	r0, r5
 8013446:	b00c      	add	sp, #48	@ 0x30
 8013448:	bd70      	pop	{r4, r5, r6, pc}
 801344a:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 801344e:	e7ee      	b.n	801342e <rcl_take_response+0x5e>
 8013450:	250b      	movs	r5, #11
 8013452:	e7ec      	b.n	801342e <rcl_take_response+0x5e>
 8013454:	2501      	movs	r5, #1
 8013456:	e7ea      	b.n	801342e <rcl_take_response+0x5e>
	...

08013460 <rcl_client_is_valid>:
 8013460:	b130      	cbz	r0, 8013470 <rcl_client_is_valid+0x10>
 8013462:	6800      	ldr	r0, [r0, #0]
 8013464:	b120      	cbz	r0, 8013470 <rcl_client_is_valid+0x10>
 8013466:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801346a:	3800      	subs	r0, #0
 801346c:	bf18      	it	ne
 801346e:	2001      	movne	r0, #1
 8013470:	4770      	bx	lr
 8013472:	bf00      	nop

08013474 <rcl_convert_rmw_ret_to_rcl_ret>:
 8013474:	280b      	cmp	r0, #11
 8013476:	dc0d      	bgt.n	8013494 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8013478:	2800      	cmp	r0, #0
 801347a:	db09      	blt.n	8013490 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801347c:	280b      	cmp	r0, #11
 801347e:	d807      	bhi.n	8013490 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8013480:	e8df f000 	tbb	[pc, r0]
 8013484:	07060607 	.word	0x07060607
 8013488:	06060606 	.word	0x06060606
 801348c:	07070606 	.word	0x07070606
 8013490:	2001      	movs	r0, #1
 8013492:	4770      	bx	lr
 8013494:	28cb      	cmp	r0, #203	@ 0xcb
 8013496:	bf18      	it	ne
 8013498:	2001      	movne	r0, #1
 801349a:	4770      	bx	lr

0801349c <rcl_get_zero_initialized_context>:
 801349c:	4a03      	ldr	r2, [pc, #12]	@ (80134ac <rcl_get_zero_initialized_context+0x10>)
 801349e:	4603      	mov	r3, r0
 80134a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80134a4:	e883 0003 	stmia.w	r3, {r0, r1}
 80134a8:	4618      	mov	r0, r3
 80134aa:	4770      	bx	lr
 80134ac:	0801b7ec 	.word	0x0801b7ec

080134b0 <rcl_context_is_valid>:
 80134b0:	b118      	cbz	r0, 80134ba <rcl_context_is_valid+0xa>
 80134b2:	6840      	ldr	r0, [r0, #4]
 80134b4:	3800      	subs	r0, #0
 80134b6:	bf18      	it	ne
 80134b8:	2001      	movne	r0, #1
 80134ba:	4770      	bx	lr

080134bc <__cleanup_context>:
 80134bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80134c0:	4606      	mov	r6, r0
 80134c2:	6800      	ldr	r0, [r0, #0]
 80134c4:	2300      	movs	r3, #0
 80134c6:	6073      	str	r3, [r6, #4]
 80134c8:	2800      	cmp	r0, #0
 80134ca:	d049      	beq.n	8013560 <__cleanup_context+0xa4>
 80134cc:	6947      	ldr	r7, [r0, #20]
 80134ce:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80134d2:	f8d0 9010 	ldr.w	r9, [r0, #16]
 80134d6:	b137      	cbz	r7, 80134e6 <__cleanup_context+0x2a>
 80134d8:	3014      	adds	r0, #20
 80134da:	f7f8 fea3 	bl	800c224 <rcl_init_options_fini>
 80134de:	4607      	mov	r7, r0
 80134e0:	2800      	cmp	r0, #0
 80134e2:	d144      	bne.n	801356e <__cleanup_context+0xb2>
 80134e4:	6830      	ldr	r0, [r6, #0]
 80134e6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80134e8:	b143      	cbz	r3, 80134fc <__cleanup_context+0x40>
 80134ea:	3028      	adds	r0, #40	@ 0x28
 80134ec:	f7fa fad4 	bl	800da98 <rmw_context_fini>
 80134f0:	b118      	cbz	r0, 80134fa <__cleanup_context+0x3e>
 80134f2:	2f00      	cmp	r7, #0
 80134f4:	d03e      	beq.n	8013574 <__cleanup_context+0xb8>
 80134f6:	f7fa f807 	bl	800d508 <rcutils_reset_error>
 80134fa:	6830      	ldr	r0, [r6, #0]
 80134fc:	6a03      	ldr	r3, [r0, #32]
 80134fe:	b1db      	cbz	r3, 8013538 <__cleanup_context+0x7c>
 8013500:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8013504:	2a01      	cmp	r2, #1
 8013506:	f17c 0100 	sbcs.w	r1, ip, #0
 801350a:	db11      	blt.n	8013530 <__cleanup_context+0x74>
 801350c:	2400      	movs	r4, #0
 801350e:	4625      	mov	r5, r4
 8013510:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013514:	4649      	mov	r1, r9
 8013516:	b1b8      	cbz	r0, 8013548 <__cleanup_context+0x8c>
 8013518:	47c0      	blx	r8
 801351a:	6833      	ldr	r3, [r6, #0]
 801351c:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8013520:	3401      	adds	r4, #1
 8013522:	f145 0500 	adc.w	r5, r5, #0
 8013526:	4294      	cmp	r4, r2
 8013528:	eb75 010c 	sbcs.w	r1, r5, ip
 801352c:	6a1b      	ldr	r3, [r3, #32]
 801352e:	dbef      	blt.n	8013510 <__cleanup_context+0x54>
 8013530:	4618      	mov	r0, r3
 8013532:	4649      	mov	r1, r9
 8013534:	47c0      	blx	r8
 8013536:	6830      	ldr	r0, [r6, #0]
 8013538:	4649      	mov	r1, r9
 801353a:	47c0      	blx	r8
 801353c:	2300      	movs	r3, #0
 801353e:	e9c6 3300 	strd	r3, r3, [r6]
 8013542:	4638      	mov	r0, r7
 8013544:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013548:	3401      	adds	r4, #1
 801354a:	f145 0500 	adc.w	r5, r5, #0
 801354e:	4294      	cmp	r4, r2
 8013550:	eb75 010c 	sbcs.w	r1, r5, ip
 8013554:	dbdc      	blt.n	8013510 <__cleanup_context+0x54>
 8013556:	4618      	mov	r0, r3
 8013558:	4649      	mov	r1, r9
 801355a:	47c0      	blx	r8
 801355c:	6830      	ldr	r0, [r6, #0]
 801355e:	e7eb      	b.n	8013538 <__cleanup_context+0x7c>
 8013560:	4607      	mov	r7, r0
 8013562:	2300      	movs	r3, #0
 8013564:	e9c6 3300 	strd	r3, r3, [r6]
 8013568:	4638      	mov	r0, r7
 801356a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801356e:	f7f9 ffcb 	bl	800d508 <rcutils_reset_error>
 8013572:	e7b7      	b.n	80134e4 <__cleanup_context+0x28>
 8013574:	f7ff ff7e 	bl	8013474 <rcl_convert_rmw_ret_to_rcl_ret>
 8013578:	4607      	mov	r7, r0
 801357a:	e7bc      	b.n	80134f6 <__cleanup_context+0x3a>

0801357c <rcl_init>:
 801357c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013580:	1e05      	subs	r5, r0, #0
 8013582:	b09e      	sub	sp, #120	@ 0x78
 8013584:	460e      	mov	r6, r1
 8013586:	4690      	mov	r8, r2
 8013588:	461f      	mov	r7, r3
 801358a:	f340 809c 	ble.w	80136c6 <rcl_init+0x14a>
 801358e:	2900      	cmp	r1, #0
 8013590:	f000 809c 	beq.w	80136cc <rcl_init+0x150>
 8013594:	f1a1 0e04 	sub.w	lr, r1, #4
 8013598:	f04f 0c00 	mov.w	ip, #0
 801359c:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 80135a0:	f10c 0c01 	add.w	ip, ip, #1
 80135a4:	2c00      	cmp	r4, #0
 80135a6:	f000 8091 	beq.w	80136cc <rcl_init+0x150>
 80135aa:	4565      	cmp	r5, ip
 80135ac:	d1f6      	bne.n	801359c <rcl_init+0x20>
 80135ae:	f1b8 0f00 	cmp.w	r8, #0
 80135b2:	f000 808b 	beq.w	80136cc <rcl_init+0x150>
 80135b6:	f8d8 4000 	ldr.w	r4, [r8]
 80135ba:	2c00      	cmp	r4, #0
 80135bc:	f000 8086 	beq.w	80136cc <rcl_init+0x150>
 80135c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80135c2:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 80135c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80135ca:	6823      	ldr	r3, [r4, #0]
 80135cc:	f8cc 3000 	str.w	r3, [ip]
 80135d0:	a819      	add	r0, sp, #100	@ 0x64
 80135d2:	f7f9 ff73 	bl	800d4bc <rcutils_allocator_is_valid>
 80135d6:	2800      	cmp	r0, #0
 80135d8:	d078      	beq.n	80136cc <rcl_init+0x150>
 80135da:	2f00      	cmp	r7, #0
 80135dc:	d076      	beq.n	80136cc <rcl_init+0x150>
 80135de:	683b      	ldr	r3, [r7, #0]
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d178      	bne.n	80136d6 <rcl_init+0x15a>
 80135e4:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 80135e8:	2178      	movs	r1, #120	@ 0x78
 80135ea:	2001      	movs	r0, #1
 80135ec:	4798      	blx	r3
 80135ee:	4604      	mov	r4, r0
 80135f0:	6038      	str	r0, [r7, #0]
 80135f2:	2800      	cmp	r0, #0
 80135f4:	f000 80b6 	beq.w	8013764 <rcl_init+0x1e8>
 80135f8:	a802      	add	r0, sp, #8
 80135fa:	f003 f86d 	bl	80166d8 <rmw_get_zero_initialized_context>
 80135fe:	a902      	add	r1, sp, #8
 8013600:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8013604:	2250      	movs	r2, #80	@ 0x50
 8013606:	ac19      	add	r4, sp, #100	@ 0x64
 8013608:	f005 ff4b 	bl	80194a2 <memcpy>
 801360c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801360e:	f8d7 e000 	ldr.w	lr, [r7]
 8013612:	46f4      	mov	ip, lr
 8013614:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013618:	6823      	ldr	r3, [r4, #0]
 801361a:	f8cc 3000 	str.w	r3, [ip]
 801361e:	f10e 0114 	add.w	r1, lr, #20
 8013622:	4640      	mov	r0, r8
 8013624:	f7f8 fe28 	bl	800c278 <rcl_init_options_copy>
 8013628:	4604      	mov	r4, r0
 801362a:	2800      	cmp	r0, #0
 801362c:	d144      	bne.n	80136b8 <rcl_init+0x13c>
 801362e:	f8d7 9000 	ldr.w	r9, [r7]
 8013632:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8013636:	f8c9 0020 	str.w	r0, [r9, #32]
 801363a:	f8c9 5018 	str.w	r5, [r9, #24]
 801363e:	f8c9 801c 	str.w	r8, [r9, #28]
 8013642:	2d00      	cmp	r5, #0
 8013644:	d04e      	beq.n	80136e4 <rcl_init+0x168>
 8013646:	2e00      	cmp	r6, #0
 8013648:	d04c      	beq.n	80136e4 <rcl_init+0x168>
 801364a:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 801364e:	2104      	movs	r1, #4
 8013650:	4628      	mov	r0, r5
 8013652:	4798      	blx	r3
 8013654:	f8c9 0020 	str.w	r0, [r9, #32]
 8013658:	f8d7 9000 	ldr.w	r9, [r7]
 801365c:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8013660:	46ca      	mov	sl, r9
 8013662:	b343      	cbz	r3, 80136b6 <rcl_init+0x13a>
 8013664:	2d01      	cmp	r5, #1
 8013666:	f178 0300 	sbcs.w	r3, r8, #0
 801366a:	db3b      	blt.n	80136e4 <rcl_init+0x168>
 801366c:	2400      	movs	r4, #0
 801366e:	3e04      	subs	r6, #4
 8013670:	46a1      	mov	r9, r4
 8013672:	e00b      	b.n	801368c <rcl_init+0x110>
 8013674:	6831      	ldr	r1, [r6, #0]
 8013676:	f005 ff14 	bl	80194a2 <memcpy>
 801367a:	3401      	adds	r4, #1
 801367c:	f149 0900 	adc.w	r9, r9, #0
 8013680:	45c8      	cmp	r8, r9
 8013682:	bf08      	it	eq
 8013684:	42a5      	cmpeq	r5, r4
 8013686:	d02b      	beq.n	80136e0 <rcl_init+0x164>
 8013688:	f8d7 a000 	ldr.w	sl, [r7]
 801368c:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8013690:	f7ec fdd0 	bl	8000234 <strlen>
 8013694:	1c42      	adds	r2, r0, #1
 8013696:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013698:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801369a:	f8da a020 	ldr.w	sl, [sl, #32]
 801369e:	9201      	str	r2, [sp, #4]
 80136a0:	4610      	mov	r0, r2
 80136a2:	4798      	blx	r3
 80136a4:	683b      	ldr	r3, [r7, #0]
 80136a6:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 80136aa:	6a1b      	ldr	r3, [r3, #32]
 80136ac:	9a01      	ldr	r2, [sp, #4]
 80136ae:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80136b2:	2800      	cmp	r0, #0
 80136b4:	d1de      	bne.n	8013674 <rcl_init+0xf8>
 80136b6:	240a      	movs	r4, #10
 80136b8:	4638      	mov	r0, r7
 80136ba:	f7ff feff 	bl	80134bc <__cleanup_context>
 80136be:	4620      	mov	r0, r4
 80136c0:	b01e      	add	sp, #120	@ 0x78
 80136c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80136c6:	2900      	cmp	r1, #0
 80136c8:	f43f af71 	beq.w	80135ae <rcl_init+0x32>
 80136cc:	240b      	movs	r4, #11
 80136ce:	4620      	mov	r0, r4
 80136d0:	b01e      	add	sp, #120	@ 0x78
 80136d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80136d6:	2464      	movs	r4, #100	@ 0x64
 80136d8:	4620      	mov	r0, r4
 80136da:	b01e      	add	sp, #120	@ 0x78
 80136dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80136e0:	f8d7 9000 	ldr.w	r9, [r7]
 80136e4:	4926      	ldr	r1, [pc, #152]	@ (8013780 <rcl_init+0x204>)
 80136e6:	680b      	ldr	r3, [r1, #0]
 80136e8:	3301      	adds	r3, #1
 80136ea:	d036      	beq.n	801375a <rcl_init+0x1de>
 80136ec:	600b      	str	r3, [r1, #0]
 80136ee:	461a      	mov	r2, r3
 80136f0:	2400      	movs	r4, #0
 80136f2:	f8d9 0014 	ldr.w	r0, [r9, #20]
 80136f6:	607b      	str	r3, [r7, #4]
 80136f8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80136fa:	3301      	adds	r3, #1
 80136fc:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8013700:	d034      	beq.n	801376c <rcl_init+0x1f0>
 8013702:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8013706:	b93b      	cbnz	r3, 8013718 <rcl_init+0x19c>
 8013708:	3030      	adds	r0, #48	@ 0x30
 801370a:	f000 f83b 	bl	8013784 <rcl_get_localhost_only>
 801370e:	4604      	mov	r4, r0
 8013710:	2800      	cmp	r0, #0
 8013712:	d1d1      	bne.n	80136b8 <rcl_init+0x13c>
 8013714:	683b      	ldr	r3, [r7, #0]
 8013716:	6958      	ldr	r0, [r3, #20]
 8013718:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 801371a:	aa18      	add	r2, sp, #96	@ 0x60
 801371c:	a917      	add	r1, sp, #92	@ 0x5c
 801371e:	f001 f925 	bl	801496c <rcl_validate_enclave_name>
 8013722:	4604      	mov	r4, r0
 8013724:	2800      	cmp	r0, #0
 8013726:	d1c7      	bne.n	80136b8 <rcl_init+0x13c>
 8013728:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801372a:	b9eb      	cbnz	r3, 8013768 <rcl_init+0x1ec>
 801372c:	6839      	ldr	r1, [r7, #0]
 801372e:	694b      	ldr	r3, [r1, #20]
 8013730:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8013732:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8013736:	f000 fb3f 	bl	8013db8 <rcl_get_security_options_from_environment>
 801373a:	4604      	mov	r4, r0
 801373c:	2800      	cmp	r0, #0
 801373e:	d1bb      	bne.n	80136b8 <rcl_init+0x13c>
 8013740:	6839      	ldr	r1, [r7, #0]
 8013742:	6948      	ldr	r0, [r1, #20]
 8013744:	3128      	adds	r1, #40	@ 0x28
 8013746:	3018      	adds	r0, #24
 8013748:	f7fa f870 	bl	800d82c <rmw_init>
 801374c:	4604      	mov	r4, r0
 801374e:	2800      	cmp	r0, #0
 8013750:	d0bd      	beq.n	80136ce <rcl_init+0x152>
 8013752:	f7ff fe8f 	bl	8013474 <rcl_convert_rmw_ret_to_rcl_ret>
 8013756:	4604      	mov	r4, r0
 8013758:	e7ae      	b.n	80136b8 <rcl_init+0x13c>
 801375a:	2201      	movs	r2, #1
 801375c:	461c      	mov	r4, r3
 801375e:	600a      	str	r2, [r1, #0]
 8013760:	4613      	mov	r3, r2
 8013762:	e7c6      	b.n	80136f2 <rcl_init+0x176>
 8013764:	240a      	movs	r4, #10
 8013766:	e7b2      	b.n	80136ce <rcl_init+0x152>
 8013768:	2401      	movs	r4, #1
 801376a:	e7a5      	b.n	80136b8 <rcl_init+0x13c>
 801376c:	3024      	adds	r0, #36	@ 0x24
 801376e:	f004 fcd7 	bl	8018120 <rcl_get_default_domain_id>
 8013772:	4604      	mov	r4, r0
 8013774:	2800      	cmp	r0, #0
 8013776:	d19f      	bne.n	80136b8 <rcl_init+0x13c>
 8013778:	683b      	ldr	r3, [r7, #0]
 801377a:	6958      	ldr	r0, [r3, #20]
 801377c:	e7c1      	b.n	8013702 <rcl_init+0x186>
 801377e:	bf00      	nop
 8013780:	2000b8c8 	.word	0x2000b8c8

08013784 <rcl_get_localhost_only>:
 8013784:	b510      	push	{r4, lr}
 8013786:	b082      	sub	sp, #8
 8013788:	2300      	movs	r3, #0
 801378a:	9301      	str	r3, [sp, #4]
 801378c:	b1b8      	cbz	r0, 80137be <rcl_get_localhost_only+0x3a>
 801378e:	4604      	mov	r4, r0
 8013790:	a901      	add	r1, sp, #4
 8013792:	480c      	ldr	r0, [pc, #48]	@ (80137c4 <rcl_get_localhost_only+0x40>)
 8013794:	f002 fcf4 	bl	8016180 <rcutils_get_env>
 8013798:	b110      	cbz	r0, 80137a0 <rcl_get_localhost_only+0x1c>
 801379a:	2001      	movs	r0, #1
 801379c:	b002      	add	sp, #8
 801379e:	bd10      	pop	{r4, pc}
 80137a0:	9b01      	ldr	r3, [sp, #4]
 80137a2:	b113      	cbz	r3, 80137aa <rcl_get_localhost_only+0x26>
 80137a4:	781a      	ldrb	r2, [r3, #0]
 80137a6:	2a31      	cmp	r2, #49	@ 0x31
 80137a8:	d004      	beq.n	80137b4 <rcl_get_localhost_only+0x30>
 80137aa:	2302      	movs	r3, #2
 80137ac:	2000      	movs	r0, #0
 80137ae:	7023      	strb	r3, [r4, #0]
 80137b0:	b002      	add	sp, #8
 80137b2:	bd10      	pop	{r4, pc}
 80137b4:	785b      	ldrb	r3, [r3, #1]
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d1f7      	bne.n	80137aa <rcl_get_localhost_only+0x26>
 80137ba:	2301      	movs	r3, #1
 80137bc:	e7f6      	b.n	80137ac <rcl_get_localhost_only+0x28>
 80137be:	200b      	movs	r0, #11
 80137c0:	b002      	add	sp, #8
 80137c2:	bd10      	pop	{r4, pc}
 80137c4:	0801b7f4 	.word	0x0801b7f4

080137c8 <rcl_get_zero_initialized_node>:
 80137c8:	4a03      	ldr	r2, [pc, #12]	@ (80137d8 <rcl_get_zero_initialized_node+0x10>)
 80137ca:	4603      	mov	r3, r0
 80137cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80137d0:	e883 0003 	stmia.w	r3, {r0, r1}
 80137d4:	4618      	mov	r0, r3
 80137d6:	4770      	bx	lr
 80137d8:	0801b810 	.word	0x0801b810

080137dc <rcl_node_init>:
 80137dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137e0:	b0a9      	sub	sp, #164	@ 0xa4
 80137e2:	4604      	mov	r4, r0
 80137e4:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 80137e8:	a823      	add	r0, sp, #140	@ 0x8c
 80137ea:	460e      	mov	r6, r1
 80137ec:	4615      	mov	r5, r2
 80137ee:	461f      	mov	r7, r3
 80137f0:	f004 ff0a 	bl	8018608 <rcl_guard_condition_get_default_options>
 80137f4:	f1b8 0f00 	cmp.w	r8, #0
 80137f8:	f000 80e6 	beq.w	80139c8 <rcl_node_init+0x1ec>
 80137fc:	4640      	mov	r0, r8
 80137fe:	f7f9 fe5d 	bl	800d4bc <rcutils_allocator_is_valid>
 8013802:	2800      	cmp	r0, #0
 8013804:	f000 80e0 	beq.w	80139c8 <rcl_node_init+0x1ec>
 8013808:	2e00      	cmp	r6, #0
 801380a:	f000 80dd 	beq.w	80139c8 <rcl_node_init+0x1ec>
 801380e:	2d00      	cmp	r5, #0
 8013810:	f000 80da 	beq.w	80139c8 <rcl_node_init+0x1ec>
 8013814:	2c00      	cmp	r4, #0
 8013816:	f000 80d7 	beq.w	80139c8 <rcl_node_init+0x1ec>
 801381a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801381e:	f1b9 0f00 	cmp.w	r9, #0
 8013822:	f040 80fd 	bne.w	8013a20 <rcl_node_init+0x244>
 8013826:	2f00      	cmp	r7, #0
 8013828:	f000 80ce 	beq.w	80139c8 <rcl_node_init+0x1ec>
 801382c:	4638      	mov	r0, r7
 801382e:	f7ff fe3f 	bl	80134b0 <rcl_context_is_valid>
 8013832:	4682      	mov	sl, r0
 8013834:	2800      	cmp	r0, #0
 8013836:	f000 80cd 	beq.w	80139d4 <rcl_node_init+0x1f8>
 801383a:	464a      	mov	r2, r9
 801383c:	a922      	add	r1, sp, #136	@ 0x88
 801383e:	4630      	mov	r0, r6
 8013840:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 8013844:	f003 f8c6 	bl	80169d4 <rmw_validate_node_name>
 8013848:	4681      	mov	r9, r0
 801384a:	2800      	cmp	r0, #0
 801384c:	f040 80be 	bne.w	80139cc <rcl_node_init+0x1f0>
 8013850:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8013852:	2800      	cmp	r0, #0
 8013854:	f040 80f0 	bne.w	8013a38 <rcl_node_init+0x25c>
 8013858:	4628      	mov	r0, r5
 801385a:	f7ec fceb 	bl	8000234 <strlen>
 801385e:	2800      	cmp	r0, #0
 8013860:	f040 80bb 	bne.w	80139da <rcl_node_init+0x1fe>
 8013864:	4d7c      	ldr	r5, [pc, #496]	@ (8013a58 <rcl_node_init+0x27c>)
 8013866:	a922      	add	r1, sp, #136	@ 0x88
 8013868:	2200      	movs	r2, #0
 801386a:	4628      	mov	r0, r5
 801386c:	f003 f894 	bl	8016998 <rmw_validate_namespace>
 8013870:	4681      	mov	r9, r0
 8013872:	2800      	cmp	r0, #0
 8013874:	f040 80aa 	bne.w	80139cc <rcl_node_init+0x1f0>
 8013878:	4682      	mov	sl, r0
 801387a:	9822      	ldr	r0, [sp, #136]	@ 0x88
 801387c:	2800      	cmp	r0, #0
 801387e:	f040 80e0 	bne.w	8013a42 <rcl_node_init+0x266>
 8013882:	f8d8 3000 	ldr.w	r3, [r8]
 8013886:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801388a:	2078      	movs	r0, #120	@ 0x78
 801388c:	4798      	blx	r3
 801388e:	4681      	mov	r9, r0
 8013890:	6060      	str	r0, [r4, #4]
 8013892:	2800      	cmp	r0, #0
 8013894:	f000 80ca 	beq.w	8013a2c <rcl_node_init+0x250>
 8013898:	2200      	movs	r2, #0
 801389a:	2300      	movs	r3, #0
 801389c:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 80138a0:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 80138a4:	a808      	add	r0, sp, #32
 80138a6:	f000 f907 	bl	8013ab8 <rcl_node_get_default_options>
 80138aa:	a908      	add	r1, sp, #32
 80138ac:	4648      	mov	r0, r9
 80138ae:	2268      	movs	r2, #104	@ 0x68
 80138b0:	f005 fdf7 	bl	80194a2 <memcpy>
 80138b4:	6861      	ldr	r1, [r4, #4]
 80138b6:	6027      	str	r7, [r4, #0]
 80138b8:	4640      	mov	r0, r8
 80138ba:	f000 f90b 	bl	8013ad4 <rcl_node_options_copy>
 80138be:	2800      	cmp	r0, #0
 80138c0:	d158      	bne.n	8013974 <rcl_node_init+0x198>
 80138c2:	4628      	mov	r0, r5
 80138c4:	f7ec fcb6 	bl	8000234 <strlen>
 80138c8:	4428      	add	r0, r5
 80138ca:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 80138ce:	e9cd 5603 	strd	r5, r6, [sp, #12]
 80138d2:	2b2f      	cmp	r3, #47	@ 0x2f
 80138d4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80138d8:	9300      	str	r3, [sp, #0]
 80138da:	bf0c      	ite	eq
 80138dc:	4b5f      	ldreq	r3, [pc, #380]	@ (8013a5c <rcl_node_init+0x280>)
 80138de:	4b60      	ldrne	r3, [pc, #384]	@ (8013a60 <rcl_node_init+0x284>)
 80138e0:	9302      	str	r3, [sp, #8]
 80138e2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80138e6:	9301      	str	r3, [sp, #4]
 80138e8:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80138ec:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80138f0:	f002 fc6e 	bl	80161d0 <rcutils_format_string_limit>
 80138f4:	6823      	ldr	r3, [r4, #0]
 80138f6:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 80138fa:	6818      	ldr	r0, [r3, #0]
 80138fc:	4631      	mov	r1, r6
 80138fe:	3028      	adds	r0, #40	@ 0x28
 8013900:	462a      	mov	r2, r5
 8013902:	6866      	ldr	r6, [r4, #4]
 8013904:	f7fa f974 	bl	800dbf0 <rmw_create_node>
 8013908:	6863      	ldr	r3, [r4, #4]
 801390a:	66b0      	str	r0, [r6, #104]	@ 0x68
 801390c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801390e:	2800      	cmp	r0, #0
 8013910:	d032      	beq.n	8013978 <rcl_node_init+0x19c>
 8013912:	f7fa fa01 	bl	800dd18 <rmw_node_get_graph_guard_condition>
 8013916:	4681      	mov	r9, r0
 8013918:	b360      	cbz	r0, 8013974 <rcl_node_init+0x198>
 801391a:	f8d8 3000 	ldr.w	r3, [r8]
 801391e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013922:	6866      	ldr	r6, [r4, #4]
 8013924:	2008      	movs	r0, #8
 8013926:	4798      	blx	r3
 8013928:	6863      	ldr	r3, [r4, #4]
 801392a:	66f0      	str	r0, [r6, #108]	@ 0x6c
 801392c:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 8013930:	f1bb 0f00 	cmp.w	fp, #0
 8013934:	d020      	beq.n	8013978 <rcl_node_init+0x19c>
 8013936:	a806      	add	r0, sp, #24
 8013938:	f004 fd8a 	bl	8018450 <rcl_get_zero_initialized_guard_condition>
 801393c:	a806      	add	r0, sp, #24
 801393e:	c803      	ldmia	r0, {r0, r1}
 8013940:	6863      	ldr	r3, [r4, #4]
 8013942:	46c4      	mov	ip, r8
 8013944:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8013948:	e88b 0003 	stmia.w	fp, {r0, r1}
 801394c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013950:	ae23      	add	r6, sp, #140	@ 0x8c
 8013952:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013954:	f8dc 3000 	ldr.w	r3, [ip]
 8013958:	6033      	str	r3, [r6, #0]
 801395a:	ab28      	add	r3, sp, #160	@ 0xa0
 801395c:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8013960:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8013964:	4649      	mov	r1, r9
 8013966:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013968:	463a      	mov	r2, r7
 801396a:	4670      	mov	r0, lr
 801396c:	f004 fdc6 	bl	80184fc <rcl_guard_condition_init_from_rmw>
 8013970:	4681      	mov	r9, r0
 8013972:	b328      	cbz	r0, 80139c0 <rcl_node_init+0x1e4>
 8013974:	6863      	ldr	r3, [r4, #4]
 8013976:	b1f3      	cbz	r3, 80139b6 <rcl_node_init+0x1da>
 8013978:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801397a:	b128      	cbz	r0, 8013988 <rcl_node_init+0x1ac>
 801397c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013980:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013984:	4798      	blx	r3
 8013986:	6863      	ldr	r3, [r4, #4]
 8013988:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801398a:	b110      	cbz	r0, 8013992 <rcl_node_init+0x1b6>
 801398c:	f7fa f948 	bl	800dc20 <rmw_destroy_node>
 8013990:	6863      	ldr	r3, [r4, #4]
 8013992:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8013994:	b148      	cbz	r0, 80139aa <rcl_node_init+0x1ce>
 8013996:	f004 fe11 	bl	80185bc <rcl_guard_condition_fini>
 801399a:	6863      	ldr	r3, [r4, #4]
 801399c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80139a0:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80139a2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80139a6:	4798      	blx	r3
 80139a8:	6863      	ldr	r3, [r4, #4]
 80139aa:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80139ae:	4618      	mov	r0, r3
 80139b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80139b4:	4798      	blx	r3
 80139b6:	2300      	movs	r3, #0
 80139b8:	e9c4 3300 	strd	r3, r3, [r4]
 80139bc:	f04f 0901 	mov.w	r9, #1
 80139c0:	f1ba 0f00 	cmp.w	sl, #0
 80139c4:	d125      	bne.n	8013a12 <rcl_node_init+0x236>
 80139c6:	e001      	b.n	80139cc <rcl_node_init+0x1f0>
 80139c8:	f04f 090b 	mov.w	r9, #11
 80139cc:	4648      	mov	r0, r9
 80139ce:	b029      	add	sp, #164	@ 0xa4
 80139d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139d4:	f04f 0965 	mov.w	r9, #101	@ 0x65
 80139d8:	e7f8      	b.n	80139cc <rcl_node_init+0x1f0>
 80139da:	782b      	ldrb	r3, [r5, #0]
 80139dc:	2b2f      	cmp	r3, #47	@ 0x2f
 80139de:	f43f af42 	beq.w	8013866 <rcl_node_init+0x8a>
 80139e2:	9503      	str	r5, [sp, #12]
 80139e4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80139e8:	9300      	str	r3, [sp, #0]
 80139ea:	4b1e      	ldr	r3, [pc, #120]	@ (8013a64 <rcl_node_init+0x288>)
 80139ec:	9302      	str	r3, [sp, #8]
 80139ee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80139f2:	9301      	str	r3, [sp, #4]
 80139f4:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80139f8:	f002 fbea 	bl	80161d0 <rcutils_format_string_limit>
 80139fc:	4605      	mov	r5, r0
 80139fe:	b340      	cbz	r0, 8013a52 <rcl_node_init+0x276>
 8013a00:	2200      	movs	r2, #0
 8013a02:	a922      	add	r1, sp, #136	@ 0x88
 8013a04:	9222      	str	r2, [sp, #136]	@ 0x88
 8013a06:	f002 ffc7 	bl	8016998 <rmw_validate_namespace>
 8013a0a:	4681      	mov	r9, r0
 8013a0c:	2800      	cmp	r0, #0
 8013a0e:	f43f af34 	beq.w	801387a <rcl_node_init+0x9e>
 8013a12:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013a16:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013a1a:	4628      	mov	r0, r5
 8013a1c:	4798      	blx	r3
 8013a1e:	e7d5      	b.n	80139cc <rcl_node_init+0x1f0>
 8013a20:	f04f 0964 	mov.w	r9, #100	@ 0x64
 8013a24:	4648      	mov	r0, r9
 8013a26:	b029      	add	sp, #164	@ 0xa4
 8013a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a2c:	f04f 090a 	mov.w	r9, #10
 8013a30:	f1ba 0f00 	cmp.w	sl, #0
 8013a34:	d1ed      	bne.n	8013a12 <rcl_node_init+0x236>
 8013a36:	e7c9      	b.n	80139cc <rcl_node_init+0x1f0>
 8013a38:	f003 f81e 	bl	8016a78 <rmw_node_name_validation_result_string>
 8013a3c:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 8013a40:	e7c4      	b.n	80139cc <rcl_node_init+0x1f0>
 8013a42:	f002 ffbb 	bl	80169bc <rmw_namespace_validation_result_string>
 8013a46:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 8013a4a:	f1ba 0f00 	cmp.w	sl, #0
 8013a4e:	d1e0      	bne.n	8013a12 <rcl_node_init+0x236>
 8013a50:	e7bc      	b.n	80139cc <rcl_node_init+0x1f0>
 8013a52:	f04f 090a 	mov.w	r9, #10
 8013a56:	e7b9      	b.n	80139cc <rcl_node_init+0x1f0>
 8013a58:	0801b264 	.word	0x0801b264
 8013a5c:	0801b28c 	.word	0x0801b28c
 8013a60:	0801b268 	.word	0x0801b268
 8013a64:	0801b80c 	.word	0x0801b80c

08013a68 <rcl_node_is_valid>:
 8013a68:	b130      	cbz	r0, 8013a78 <rcl_node_is_valid+0x10>
 8013a6a:	6843      	ldr	r3, [r0, #4]
 8013a6c:	b123      	cbz	r3, 8013a78 <rcl_node_is_valid+0x10>
 8013a6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013a70:	b113      	cbz	r3, 8013a78 <rcl_node_is_valid+0x10>
 8013a72:	6800      	ldr	r0, [r0, #0]
 8013a74:	f7ff bd1c 	b.w	80134b0 <rcl_context_is_valid>
 8013a78:	2000      	movs	r0, #0
 8013a7a:	4770      	bx	lr

08013a7c <rcl_node_get_name>:
 8013a7c:	b120      	cbz	r0, 8013a88 <rcl_node_get_name+0xc>
 8013a7e:	6840      	ldr	r0, [r0, #4]
 8013a80:	b110      	cbz	r0, 8013a88 <rcl_node_get_name+0xc>
 8013a82:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8013a84:	b100      	cbz	r0, 8013a88 <rcl_node_get_name+0xc>
 8013a86:	6880      	ldr	r0, [r0, #8]
 8013a88:	4770      	bx	lr
 8013a8a:	bf00      	nop

08013a8c <rcl_node_get_namespace>:
 8013a8c:	b120      	cbz	r0, 8013a98 <rcl_node_get_namespace+0xc>
 8013a8e:	6840      	ldr	r0, [r0, #4]
 8013a90:	b110      	cbz	r0, 8013a98 <rcl_node_get_namespace+0xc>
 8013a92:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8013a94:	b100      	cbz	r0, 8013a98 <rcl_node_get_namespace+0xc>
 8013a96:	68c0      	ldr	r0, [r0, #12]
 8013a98:	4770      	bx	lr
 8013a9a:	bf00      	nop

08013a9c <rcl_node_get_options>:
 8013a9c:	b128      	cbz	r0, 8013aaa <rcl_node_get_options+0xe>
 8013a9e:	6840      	ldr	r0, [r0, #4]
 8013aa0:	b118      	cbz	r0, 8013aaa <rcl_node_get_options+0xe>
 8013aa2:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	bf08      	it	eq
 8013aa8:	2000      	moveq	r0, #0
 8013aaa:	4770      	bx	lr

08013aac <rcl_node_get_rmw_handle>:
 8013aac:	b110      	cbz	r0, 8013ab4 <rcl_node_get_rmw_handle+0x8>
 8013aae:	6840      	ldr	r0, [r0, #4]
 8013ab0:	b100      	cbz	r0, 8013ab4 <rcl_node_get_rmw_handle+0x8>
 8013ab2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8013ab4:	4770      	bx	lr
 8013ab6:	bf00      	nop

08013ab8 <rcl_node_get_default_options>:
 8013ab8:	b510      	push	{r4, lr}
 8013aba:	2268      	movs	r2, #104	@ 0x68
 8013abc:	4604      	mov	r4, r0
 8013abe:	2100      	movs	r1, #0
 8013ac0:	f005 fc26 	bl	8019310 <memset>
 8013ac4:	4620      	mov	r0, r4
 8013ac6:	f7f9 fceb 	bl	800d4a0 <rcutils_get_default_allocator>
 8013aca:	2301      	movs	r3, #1
 8013acc:	7523      	strb	r3, [r4, #20]
 8013ace:	4620      	mov	r0, r4
 8013ad0:	bd10      	pop	{r4, pc}
 8013ad2:	bf00      	nop

08013ad4 <rcl_node_options_copy>:
 8013ad4:	b1d0      	cbz	r0, 8013b0c <rcl_node_options_copy+0x38>
 8013ad6:	b570      	push	{r4, r5, r6, lr}
 8013ad8:	460c      	mov	r4, r1
 8013ada:	b1a9      	cbz	r1, 8013b08 <rcl_node_options_copy+0x34>
 8013adc:	4288      	cmp	r0, r1
 8013ade:	4684      	mov	ip, r0
 8013ae0:	d012      	beq.n	8013b08 <rcl_node_options_copy+0x34>
 8013ae2:	4605      	mov	r5, r0
 8013ae4:	8a86      	ldrh	r6, [r0, #20]
 8013ae6:	468e      	mov	lr, r1
 8013ae8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013aea:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013aee:	682b      	ldr	r3, [r5, #0]
 8013af0:	f8ce 3000 	str.w	r3, [lr]
 8013af4:	f10c 0118 	add.w	r1, ip, #24
 8013af8:	2250      	movs	r2, #80	@ 0x50
 8013afa:	82a6      	strh	r6, [r4, #20]
 8013afc:	f104 0018 	add.w	r0, r4, #24
 8013b00:	f005 fccf 	bl	80194a2 <memcpy>
 8013b04:	2000      	movs	r0, #0
 8013b06:	bd70      	pop	{r4, r5, r6, pc}
 8013b08:	200b      	movs	r0, #11
 8013b0a:	bd70      	pop	{r4, r5, r6, pc}
 8013b0c:	200b      	movs	r0, #11
 8013b0e:	4770      	bx	lr

08013b10 <rcl_node_resolve_name>:
 8013b10:	b082      	sub	sp, #8
 8013b12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b16:	b091      	sub	sp, #68	@ 0x44
 8013b18:	ac1a      	add	r4, sp, #104	@ 0x68
 8013b1a:	e884 000c 	stmia.w	r4, {r2, r3}
 8013b1e:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8013b22:	2800      	cmp	r0, #0
 8013b24:	d03b      	beq.n	8013b9e <rcl_node_resolve_name+0x8e>
 8013b26:	460c      	mov	r4, r1
 8013b28:	4605      	mov	r5, r0
 8013b2a:	f7ff ffb7 	bl	8013a9c <rcl_node_get_options>
 8013b2e:	2800      	cmp	r0, #0
 8013b30:	d037      	beq.n	8013ba2 <rcl_node_resolve_name+0x92>
 8013b32:	4628      	mov	r0, r5
 8013b34:	f7ff ffa2 	bl	8013a7c <rcl_node_get_name>
 8013b38:	4606      	mov	r6, r0
 8013b3a:	4628      	mov	r0, r5
 8013b3c:	f7ff ffa6 	bl	8013a8c <rcl_node_get_namespace>
 8013b40:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8013b44:	4681      	mov	r9, r0
 8013b46:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013b4a:	ad0b      	add	r5, sp, #44	@ 0x2c
 8013b4c:	46ac      	mov	ip, r5
 8013b4e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013b52:	f8de 3000 	ldr.w	r3, [lr]
 8013b56:	f8cc 3000 	str.w	r3, [ip]
 8013b5a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013b5c:	b1fb      	cbz	r3, 8013b9e <rcl_node_resolve_name+0x8e>
 8013b5e:	468a      	mov	sl, r1
 8013b60:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8013b64:	f002 fc8c 	bl	8016480 <rcutils_get_zero_initialized_string_map>
 8013b68:	ab10      	add	r3, sp, #64	@ 0x40
 8013b6a:	9008      	str	r0, [sp, #32]
 8013b6c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8013b70:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013b74:	2100      	movs	r1, #0
 8013b76:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013b7a:	a808      	add	r0, sp, #32
 8013b7c:	f002 fcf8 	bl	8016570 <rcutils_string_map_init>
 8013b80:	4607      	mov	r7, r0
 8013b82:	b180      	cbz	r0, 8013ba6 <rcl_node_resolve_name+0x96>
 8013b84:	f7f9 fca8 	bl	800d4d8 <rcutils_get_error_string>
 8013b88:	f7f9 fcbe 	bl	800d508 <rcutils_reset_error>
 8013b8c:	2f0a      	cmp	r7, #10
 8013b8e:	bf18      	it	ne
 8013b90:	2701      	movne	r7, #1
 8013b92:	4638      	mov	r0, r7
 8013b94:	b011      	add	sp, #68	@ 0x44
 8013b96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b9a:	b002      	add	sp, #8
 8013b9c:	4770      	bx	lr
 8013b9e:	270b      	movs	r7, #11
 8013ba0:	e7f7      	b.n	8013b92 <rcl_node_resolve_name+0x82>
 8013ba2:	2701      	movs	r7, #1
 8013ba4:	e7f5      	b.n	8013b92 <rcl_node_resolve_name+0x82>
 8013ba6:	9009      	str	r0, [sp, #36]	@ 0x24
 8013ba8:	9007      	str	r0, [sp, #28]
 8013baa:	a808      	add	r0, sp, #32
 8013bac:	f004 fc4a 	bl	8018444 <rcl_get_default_topic_name_substitutions>
 8013bb0:	4607      	mov	r7, r0
 8013bb2:	b1a8      	cbz	r0, 8013be0 <rcl_node_resolve_name+0xd0>
 8013bb4:	280a      	cmp	r0, #10
 8013bb6:	9c07      	ldr	r4, [sp, #28]
 8013bb8:	d000      	beq.n	8013bbc <rcl_node_resolve_name+0xac>
 8013bba:	2701      	movs	r7, #1
 8013bbc:	a808      	add	r0, sp, #32
 8013bbe:	f002 fd17 	bl	80165f0 <rcutils_string_map_fini>
 8013bc2:	2800      	cmp	r0, #0
 8013bc4:	d13d      	bne.n	8013c42 <rcl_node_resolve_name+0x132>
 8013bc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013bc8:	4659      	mov	r1, fp
 8013bca:	47d0      	blx	sl
 8013bcc:	4659      	mov	r1, fp
 8013bce:	4620      	mov	r0, r4
 8013bd0:	47d0      	blx	sl
 8013bd2:	f1b8 0f00 	cmp.w	r8, #0
 8013bd6:	d0dc      	beq.n	8013b92 <rcl_node_resolve_name+0x82>
 8013bd8:	2f67      	cmp	r7, #103	@ 0x67
 8013bda:	bf08      	it	eq
 8013bdc:	2768      	moveq	r7, #104	@ 0x68
 8013bde:	e7d8      	b.n	8013b92 <rcl_node_resolve_name+0x82>
 8013be0:	ab09      	add	r3, sp, #36	@ 0x24
 8013be2:	9305      	str	r3, [sp, #20]
 8013be4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013be6:	46ec      	mov	ip, sp
 8013be8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013bec:	682b      	ldr	r3, [r5, #0]
 8013bee:	f8cc 3000 	str.w	r3, [ip]
 8013bf2:	464a      	mov	r2, r9
 8013bf4:	4631      	mov	r1, r6
 8013bf6:	4620      	mov	r0, r4
 8013bf8:	ab08      	add	r3, sp, #32
 8013bfa:	f004 fac5 	bl	8018188 <rcl_expand_topic_name>
 8013bfe:	4607      	mov	r7, r0
 8013c00:	b9b8      	cbnz	r0, 8013c32 <rcl_node_resolve_name+0x122>
 8013c02:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8013c04:	9009      	str	r0, [sp, #36]	@ 0x24
 8013c06:	4602      	mov	r2, r0
 8013c08:	a90a      	add	r1, sp, #40	@ 0x28
 8013c0a:	4620      	mov	r0, r4
 8013c0c:	f002 fe00 	bl	8016810 <rmw_validate_full_topic_name>
 8013c10:	b988      	cbnz	r0, 8013c36 <rcl_node_resolve_name+0x126>
 8013c12:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8013c14:	b9d5      	cbnz	r5, 8013c4c <rcl_node_resolve_name+0x13c>
 8013c16:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013c18:	a808      	add	r0, sp, #32
 8013c1a:	601c      	str	r4, [r3, #0]
 8013c1c:	f002 fce8 	bl	80165f0 <rcutils_string_map_fini>
 8013c20:	4607      	mov	r7, r0
 8013c22:	b1a8      	cbz	r0, 8013c50 <rcl_node_resolve_name+0x140>
 8013c24:	f7f9 fc58 	bl	800d4d8 <rcutils_get_error_string>
 8013c28:	462c      	mov	r4, r5
 8013c2a:	f7f9 fc6d 	bl	800d508 <rcutils_reset_error>
 8013c2e:	2701      	movs	r7, #1
 8013c30:	e7c9      	b.n	8013bc6 <rcl_node_resolve_name+0xb6>
 8013c32:	9c07      	ldr	r4, [sp, #28]
 8013c34:	e7c2      	b.n	8013bbc <rcl_node_resolve_name+0xac>
 8013c36:	f7f9 fc4f 	bl	800d4d8 <rcutils_get_error_string>
 8013c3a:	2701      	movs	r7, #1
 8013c3c:	f7f9 fc64 	bl	800d508 <rcutils_reset_error>
 8013c40:	e7bc      	b.n	8013bbc <rcl_node_resolve_name+0xac>
 8013c42:	f7f9 fc49 	bl	800d4d8 <rcutils_get_error_string>
 8013c46:	f7f9 fc5f 	bl	800d508 <rcutils_reset_error>
 8013c4a:	e7bc      	b.n	8013bc6 <rcl_node_resolve_name+0xb6>
 8013c4c:	2767      	movs	r7, #103	@ 0x67
 8013c4e:	e7b5      	b.n	8013bbc <rcl_node_resolve_name+0xac>
 8013c50:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013c52:	4659      	mov	r1, fp
 8013c54:	47d0      	blx	sl
 8013c56:	4659      	mov	r1, fp
 8013c58:	4638      	mov	r0, r7
 8013c5a:	47d0      	blx	sl
 8013c5c:	e799      	b.n	8013b92 <rcl_node_resolve_name+0x82>
 8013c5e:	bf00      	nop

08013c60 <exact_match_lookup>:
 8013c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013c62:	f102 0708 	add.w	r7, r2, #8
 8013c66:	460b      	mov	r3, r1
 8013c68:	4614      	mov	r4, r2
 8013c6a:	4606      	mov	r6, r0
 8013c6c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8013c70:	b085      	sub	sp, #20
 8013c72:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013c76:	4618      	mov	r0, r3
 8013c78:	4919      	ldr	r1, [pc, #100]	@ (8013ce0 <exact_match_lookup+0x80>)
 8013c7a:	e894 000c 	ldmia.w	r4, {r2, r3}
 8013c7e:	f002 fa99 	bl	80161b4 <rcutils_join_path>
 8013c82:	7833      	ldrb	r3, [r6, #0]
 8013c84:	2b2f      	cmp	r3, #47	@ 0x2f
 8013c86:	4605      	mov	r5, r0
 8013c88:	d023      	beq.n	8013cd2 <exact_match_lookup+0x72>
 8013c8a:	f104 030c 	add.w	r3, r4, #12
 8013c8e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013c92:	e88d 0003 	stmia.w	sp, {r0, r1}
 8013c96:	1c70      	adds	r0, r6, #1
 8013c98:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8013c9c:	f002 fa90 	bl	80161c0 <rcutils_to_native_path>
 8013ca0:	4606      	mov	r6, r0
 8013ca2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8013ca6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013caa:	4631      	mov	r1, r6
 8013cac:	e894 000c 	ldmia.w	r4, {r2, r3}
 8013cb0:	4628      	mov	r0, r5
 8013cb2:	f002 fa7f 	bl	80161b4 <rcutils_join_path>
 8013cb6:	6862      	ldr	r2, [r4, #4]
 8013cb8:	6921      	ldr	r1, [r4, #16]
 8013cba:	4603      	mov	r3, r0
 8013cbc:	4630      	mov	r0, r6
 8013cbe:	461e      	mov	r6, r3
 8013cc0:	4790      	blx	r2
 8013cc2:	4628      	mov	r0, r5
 8013cc4:	6863      	ldr	r3, [r4, #4]
 8013cc6:	6921      	ldr	r1, [r4, #16]
 8013cc8:	4798      	blx	r3
 8013cca:	4635      	mov	r5, r6
 8013ccc:	4628      	mov	r0, r5
 8013cce:	b005      	add	sp, #20
 8013cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013cd2:	7873      	ldrb	r3, [r6, #1]
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	d1d8      	bne.n	8013c8a <exact_match_lookup+0x2a>
 8013cd8:	4628      	mov	r0, r5
 8013cda:	b005      	add	sp, #20
 8013cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013cde:	bf00      	nop
 8013ce0:	0801b854 	.word	0x0801b854

08013ce4 <rcl_get_secure_root>:
 8013ce4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013ce8:	b085      	sub	sp, #20
 8013cea:	b168      	cbz	r0, 8013d08 <rcl_get_secure_root+0x24>
 8013cec:	4607      	mov	r7, r0
 8013cee:	4608      	mov	r0, r1
 8013cf0:	460c      	mov	r4, r1
 8013cf2:	f7f9 fbe3 	bl	800d4bc <rcutils_allocator_is_valid>
 8013cf6:	b138      	cbz	r0, 8013d08 <rcl_get_secure_root+0x24>
 8013cf8:	2300      	movs	r3, #0
 8013cfa:	482d      	ldr	r0, [pc, #180]	@ (8013db0 <rcl_get_secure_root+0xcc>)
 8013cfc:	9303      	str	r3, [sp, #12]
 8013cfe:	a903      	add	r1, sp, #12
 8013d00:	f002 fa3e 	bl	8016180 <rcutils_get_env>
 8013d04:	4605      	mov	r5, r0
 8013d06:	b120      	cbz	r0, 8013d12 <rcl_get_secure_root+0x2e>
 8013d08:	2500      	movs	r5, #0
 8013d0a:	4628      	mov	r0, r5
 8013d0c:	b005      	add	sp, #20
 8013d0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013d12:	9b03      	ldr	r3, [sp, #12]
 8013d14:	781a      	ldrb	r2, [r3, #0]
 8013d16:	2a00      	cmp	r2, #0
 8013d18:	d0f6      	beq.n	8013d08 <rcl_get_secure_root+0x24>
 8013d1a:	f104 090c 	add.w	r9, r4, #12
 8013d1e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8013d22:	e88d 0003 	stmia.w	sp, {r0, r1}
 8013d26:	4618      	mov	r0, r3
 8013d28:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8013d2c:	f002 fb6a 	bl	8016404 <rcutils_strdup>
 8013d30:	4680      	mov	r8, r0
 8013d32:	2800      	cmp	r0, #0
 8013d34:	d0e8      	beq.n	8013d08 <rcl_get_secure_root+0x24>
 8013d36:	481f      	ldr	r0, [pc, #124]	@ (8013db4 <rcl_get_secure_root+0xd0>)
 8013d38:	9503      	str	r5, [sp, #12]
 8013d3a:	a903      	add	r1, sp, #12
 8013d3c:	f002 fa20 	bl	8016180 <rcutils_get_env>
 8013d40:	b160      	cbz	r0, 8013d5c <rcl_get_secure_root+0x78>
 8013d42:	2600      	movs	r6, #0
 8013d44:	6863      	ldr	r3, [r4, #4]
 8013d46:	6921      	ldr	r1, [r4, #16]
 8013d48:	4630      	mov	r0, r6
 8013d4a:	4798      	blx	r3
 8013d4c:	4640      	mov	r0, r8
 8013d4e:	6863      	ldr	r3, [r4, #4]
 8013d50:	6921      	ldr	r1, [r4, #16]
 8013d52:	4798      	blx	r3
 8013d54:	4628      	mov	r0, r5
 8013d56:	b005      	add	sp, #20
 8013d58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013d5c:	9b03      	ldr	r3, [sp, #12]
 8013d5e:	781e      	ldrb	r6, [r3, #0]
 8013d60:	b1f6      	cbz	r6, 8013da0 <rcl_get_secure_root+0xbc>
 8013d62:	e899 0003 	ldmia.w	r9, {r0, r1}
 8013d66:	e88d 0003 	stmia.w	sp, {r0, r1}
 8013d6a:	4618      	mov	r0, r3
 8013d6c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8013d70:	f002 fb48 	bl	8016404 <rcutils_strdup>
 8013d74:	4606      	mov	r6, r0
 8013d76:	2800      	cmp	r0, #0
 8013d78:	d0e3      	beq.n	8013d42 <rcl_get_secure_root+0x5e>
 8013d7a:	4622      	mov	r2, r4
 8013d7c:	4641      	mov	r1, r8
 8013d7e:	f7ff ff6f 	bl	8013c60 <exact_match_lookup>
 8013d82:	4605      	mov	r5, r0
 8013d84:	2d00      	cmp	r5, #0
 8013d86:	d0dd      	beq.n	8013d44 <rcl_get_secure_root+0x60>
 8013d88:	4628      	mov	r0, r5
 8013d8a:	f002 fa11 	bl	80161b0 <rcutils_is_directory>
 8013d8e:	4603      	mov	r3, r0
 8013d90:	2800      	cmp	r0, #0
 8013d92:	d1d7      	bne.n	8013d44 <rcl_get_secure_root+0x60>
 8013d94:	4628      	mov	r0, r5
 8013d96:	6921      	ldr	r1, [r4, #16]
 8013d98:	461d      	mov	r5, r3
 8013d9a:	6863      	ldr	r3, [r4, #4]
 8013d9c:	4798      	blx	r3
 8013d9e:	e7d1      	b.n	8013d44 <rcl_get_secure_root+0x60>
 8013da0:	4622      	mov	r2, r4
 8013da2:	4638      	mov	r0, r7
 8013da4:	4641      	mov	r1, r8
 8013da6:	f7ff ff5b 	bl	8013c60 <exact_match_lookup>
 8013daa:	4605      	mov	r5, r0
 8013dac:	e7ea      	b.n	8013d84 <rcl_get_secure_root+0xa0>
 8013dae:	bf00      	nop
 8013db0:	0801b860 	.word	0x0801b860
 8013db4:	0801b878 	.word	0x0801b878

08013db8 <rcl_get_security_options_from_environment>:
 8013db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013dbc:	b082      	sub	sp, #8
 8013dbe:	2300      	movs	r3, #0
 8013dc0:	4606      	mov	r6, r0
 8013dc2:	460f      	mov	r7, r1
 8013dc4:	4820      	ldr	r0, [pc, #128]	@ (8013e48 <rcl_get_security_options_from_environment+0x90>)
 8013dc6:	9301      	str	r3, [sp, #4]
 8013dc8:	a901      	add	r1, sp, #4
 8013dca:	4690      	mov	r8, r2
 8013dcc:	f002 f9d8 	bl	8016180 <rcutils_get_env>
 8013dd0:	b120      	cbz	r0, 8013ddc <rcl_get_security_options_from_environment+0x24>
 8013dd2:	2501      	movs	r5, #1
 8013dd4:	4628      	mov	r0, r5
 8013dd6:	b002      	add	sp, #8
 8013dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ddc:	491b      	ldr	r1, [pc, #108]	@ (8013e4c <rcl_get_security_options_from_environment+0x94>)
 8013dde:	4604      	mov	r4, r0
 8013de0:	9801      	ldr	r0, [sp, #4]
 8013de2:	f7ec fa1d 	bl	8000220 <strcmp>
 8013de6:	4605      	mov	r5, r0
 8013de8:	b9e8      	cbnz	r0, 8013e26 <rcl_get_security_options_from_environment+0x6e>
 8013dea:	9001      	str	r0, [sp, #4]
 8013dec:	f1b8 0f00 	cmp.w	r8, #0
 8013df0:	d020      	beq.n	8013e34 <rcl_get_security_options_from_environment+0x7c>
 8013df2:	4817      	ldr	r0, [pc, #92]	@ (8013e50 <rcl_get_security_options_from_environment+0x98>)
 8013df4:	a901      	add	r1, sp, #4
 8013df6:	f002 f9c3 	bl	8016180 <rcutils_get_env>
 8013dfa:	2800      	cmp	r0, #0
 8013dfc:	d1e9      	bne.n	8013dd2 <rcl_get_security_options_from_environment+0x1a>
 8013dfe:	4915      	ldr	r1, [pc, #84]	@ (8013e54 <rcl_get_security_options_from_environment+0x9c>)
 8013e00:	9801      	ldr	r0, [sp, #4]
 8013e02:	f7ec fa0d 	bl	8000220 <strcmp>
 8013e06:	fab0 f080 	clz	r0, r0
 8013e0a:	0940      	lsrs	r0, r0, #5
 8013e0c:	f888 0000 	strb.w	r0, [r8]
 8013e10:	4639      	mov	r1, r7
 8013e12:	4630      	mov	r0, r6
 8013e14:	f7ff ff66 	bl	8013ce4 <rcl_get_secure_root>
 8013e18:	b170      	cbz	r0, 8013e38 <rcl_get_security_options_from_environment+0x80>
 8013e1a:	f8c8 0004 	str.w	r0, [r8, #4]
 8013e1e:	4628      	mov	r0, r5
 8013e20:	b002      	add	sp, #8
 8013e22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e26:	4625      	mov	r5, r4
 8013e28:	4628      	mov	r0, r5
 8013e2a:	f888 4000 	strb.w	r4, [r8]
 8013e2e:	b002      	add	sp, #8
 8013e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e34:	250b      	movs	r5, #11
 8013e36:	e7cd      	b.n	8013dd4 <rcl_get_security_options_from_environment+0x1c>
 8013e38:	f898 5000 	ldrb.w	r5, [r8]
 8013e3c:	f1a5 0501 	sub.w	r5, r5, #1
 8013e40:	fab5 f585 	clz	r5, r5
 8013e44:	096d      	lsrs	r5, r5, #5
 8013e46:	e7c5      	b.n	8013dd4 <rcl_get_security_options_from_environment+0x1c>
 8013e48:	0801b818 	.word	0x0801b818
 8013e4c:	0801b82c 	.word	0x0801b82c
 8013e50:	0801b834 	.word	0x0801b834
 8013e54:	0801b84c 	.word	0x0801b84c

08013e58 <rcl_get_zero_initialized_service>:
 8013e58:	4b01      	ldr	r3, [pc, #4]	@ (8013e60 <rcl_get_zero_initialized_service+0x8>)
 8013e5a:	6818      	ldr	r0, [r3, #0]
 8013e5c:	4770      	bx	lr
 8013e5e:	bf00      	nop
 8013e60:	0801b898 	.word	0x0801b898

08013e64 <rcl_service_init>:
 8013e64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013e68:	b089      	sub	sp, #36	@ 0x24
 8013e6a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8013e6c:	b1c5      	cbz	r5, 8013ea0 <rcl_service_init+0x3c>
 8013e6e:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 8013e72:	4604      	mov	r4, r0
 8013e74:	4648      	mov	r0, r9
 8013e76:	4688      	mov	r8, r1
 8013e78:	4617      	mov	r7, r2
 8013e7a:	461e      	mov	r6, r3
 8013e7c:	f7f9 fb1e 	bl	800d4bc <rcutils_allocator_is_valid>
 8013e80:	b170      	cbz	r0, 8013ea0 <rcl_service_init+0x3c>
 8013e82:	b16c      	cbz	r4, 8013ea0 <rcl_service_init+0x3c>
 8013e84:	4640      	mov	r0, r8
 8013e86:	f7ff fdef 	bl	8013a68 <rcl_node_is_valid>
 8013e8a:	2800      	cmp	r0, #0
 8013e8c:	d058      	beq.n	8013f40 <rcl_service_init+0xdc>
 8013e8e:	b13f      	cbz	r7, 8013ea0 <rcl_service_init+0x3c>
 8013e90:	b136      	cbz	r6, 8013ea0 <rcl_service_init+0x3c>
 8013e92:	6823      	ldr	r3, [r4, #0]
 8013e94:	b14b      	cbz	r3, 8013eaa <rcl_service_init+0x46>
 8013e96:	2664      	movs	r6, #100	@ 0x64
 8013e98:	4630      	mov	r0, r6
 8013e9a:	b009      	add	sp, #36	@ 0x24
 8013e9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013ea0:	260b      	movs	r6, #11
 8013ea2:	4630      	mov	r0, r6
 8013ea4:	b009      	add	sp, #36	@ 0x24
 8013ea6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013eaa:	aa07      	add	r2, sp, #28
 8013eac:	9205      	str	r2, [sp, #20]
 8013eae:	2201      	movs	r2, #1
 8013eb0:	9304      	str	r3, [sp, #16]
 8013eb2:	9203      	str	r2, [sp, #12]
 8013eb4:	9307      	str	r3, [sp, #28]
 8013eb6:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 8013eba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013ebe:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013ec2:	4631      	mov	r1, r6
 8013ec4:	e899 000c 	ldmia.w	r9, {r2, r3}
 8013ec8:	4640      	mov	r0, r8
 8013eca:	f7ff fe21 	bl	8013b10 <rcl_node_resolve_name>
 8013ece:	2800      	cmp	r0, #0
 8013ed0:	d145      	bne.n	8013f5e <rcl_service_init+0xfa>
 8013ed2:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8013ed4:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8013ed6:	f44f 7088 	mov.w	r0, #272	@ 0x110
 8013eda:	4798      	blx	r3
 8013edc:	6020      	str	r0, [r4, #0]
 8013ede:	2800      	cmp	r0, #0
 8013ee0:	d043      	beq.n	8013f6a <rcl_service_init+0x106>
 8013ee2:	4640      	mov	r0, r8
 8013ee4:	f7ff fde2 	bl	8013aac <rcl_node_get_rmw_handle>
 8013ee8:	462b      	mov	r3, r5
 8013eea:	9a07      	ldr	r2, [sp, #28]
 8013eec:	6826      	ldr	r6, [r4, #0]
 8013eee:	4639      	mov	r1, r7
 8013ef0:	f7fa f8bc 	bl	800e06c <rmw_create_service>
 8013ef4:	6823      	ldr	r3, [r4, #0]
 8013ef6:	f8c6 0108 	str.w	r0, [r6, #264]	@ 0x108
 8013efa:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8013efe:	b330      	cbz	r0, 8013f4e <rcl_service_init+0xea>
 8013f00:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8013f04:	f7fa f9d8 	bl	800e2b8 <rmw_service_request_subscription_get_actual_qos>
 8013f08:	b9f8      	cbnz	r0, 8013f4a <rcl_service_init+0xe6>
 8013f0a:	6821      	ldr	r1, [r4, #0]
 8013f0c:	f8d1 0108 	ldr.w	r0, [r1, #264]	@ 0x108
 8013f10:	31b8      	adds	r1, #184	@ 0xb8
 8013f12:	f7fa f9c1 	bl	800e298 <rmw_service_response_publisher_get_actual_qos>
 8013f16:	4606      	mov	r6, r0
 8013f18:	b9b8      	cbnz	r0, 8013f4a <rcl_service_init+0xe6>
 8013f1a:	6820      	ldr	r0, [r4, #0]
 8013f1c:	f895 3048 	ldrb.w	r3, [r5, #72]	@ 0x48
 8013f20:	f880 30b0 	strb.w	r3, [r0, #176]	@ 0xb0
 8013f24:	f880 3100 	strb.w	r3, [r0, #256]	@ 0x100
 8013f28:	2268      	movs	r2, #104	@ 0x68
 8013f2a:	4629      	mov	r1, r5
 8013f2c:	f005 fab9 	bl	80194a2 <memcpy>
 8013f30:	9807      	ldr	r0, [sp, #28]
 8013f32:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8013f34:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8013f36:	4798      	blx	r3
 8013f38:	4630      	mov	r0, r6
 8013f3a:	b009      	add	sp, #36	@ 0x24
 8013f3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013f40:	26c8      	movs	r6, #200	@ 0xc8
 8013f42:	4630      	mov	r0, r6
 8013f44:	b009      	add	sp, #36	@ 0x24
 8013f46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013f4a:	6823      	ldr	r3, [r4, #0]
 8013f4c:	b12b      	cbz	r3, 8013f5a <rcl_service_init+0xf6>
 8013f4e:	4618      	mov	r0, r3
 8013f50:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 8013f52:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8013f54:	4790      	blx	r2
 8013f56:	2300      	movs	r3, #0
 8013f58:	6023      	str	r3, [r4, #0]
 8013f5a:	2601      	movs	r6, #1
 8013f5c:	e7e8      	b.n	8013f30 <rcl_service_init+0xcc>
 8013f5e:	f1a0 0368 	sub.w	r3, r0, #104	@ 0x68
 8013f62:	2b01      	cmp	r3, #1
 8013f64:	d903      	bls.n	8013f6e <rcl_service_init+0x10a>
 8013f66:	280a      	cmp	r0, #10
 8013f68:	d1f7      	bne.n	8013f5a <rcl_service_init+0xf6>
 8013f6a:	260a      	movs	r6, #10
 8013f6c:	e7e0      	b.n	8013f30 <rcl_service_init+0xcc>
 8013f6e:	2668      	movs	r6, #104	@ 0x68
 8013f70:	e7de      	b.n	8013f30 <rcl_service_init+0xcc>
 8013f72:	bf00      	nop

08013f74 <rcl_service_get_default_options>:
 8013f74:	b530      	push	{r4, r5, lr}
 8013f76:	4d0f      	ldr	r5, [pc, #60]	@ (8013fb4 <rcl_service_get_default_options+0x40>)
 8013f78:	490f      	ldr	r1, [pc, #60]	@ (8013fb8 <rcl_service_get_default_options+0x44>)
 8013f7a:	b087      	sub	sp, #28
 8013f7c:	4604      	mov	r4, r0
 8013f7e:	2250      	movs	r2, #80	@ 0x50
 8013f80:	4628      	mov	r0, r5
 8013f82:	f005 fa8e 	bl	80194a2 <memcpy>
 8013f86:	4668      	mov	r0, sp
 8013f88:	f7f9 fa8a 	bl	800d4a0 <rcutils_get_default_allocator>
 8013f8c:	46ec      	mov	ip, sp
 8013f8e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013f92:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8013f96:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013f9a:	2268      	movs	r2, #104	@ 0x68
 8013f9c:	f8dc 3000 	ldr.w	r3, [ip]
 8013fa0:	f8ce 3000 	str.w	r3, [lr]
 8013fa4:	4629      	mov	r1, r5
 8013fa6:	4620      	mov	r0, r4
 8013fa8:	f005 fa7b 	bl	80194a2 <memcpy>
 8013fac:	4620      	mov	r0, r4
 8013fae:	b007      	add	sp, #28
 8013fb0:	bd30      	pop	{r4, r5, pc}
 8013fb2:	bf00      	nop
 8013fb4:	2000b8d0 	.word	0x2000b8d0
 8013fb8:	0801b8a0 	.word	0x0801b8a0

08013fbc <rcl_service_get_rmw_handle>:
 8013fbc:	b118      	cbz	r0, 8013fc6 <rcl_service_get_rmw_handle+0xa>
 8013fbe:	6800      	ldr	r0, [r0, #0]
 8013fc0:	b108      	cbz	r0, 8013fc6 <rcl_service_get_rmw_handle+0xa>
 8013fc2:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8013fc6:	4770      	bx	lr

08013fc8 <rcl_take_request>:
 8013fc8:	b570      	push	{r4, r5, r6, lr}
 8013fca:	468e      	mov	lr, r1
 8013fcc:	460c      	mov	r4, r1
 8013fce:	4616      	mov	r6, r2
 8013fd0:	4605      	mov	r5, r0
 8013fd2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013fd6:	b08c      	sub	sp, #48	@ 0x30
 8013fd8:	f10d 0c18 	add.w	ip, sp, #24
 8013fdc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013fe0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013fe4:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013fe8:	b30d      	cbz	r5, 801402e <rcl_take_request+0x66>
 8013fea:	682b      	ldr	r3, [r5, #0]
 8013fec:	b1fb      	cbz	r3, 801402e <rcl_take_request+0x66>
 8013fee:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8013ff2:	b1e0      	cbz	r0, 801402e <rcl_take_request+0x66>
 8013ff4:	b336      	cbz	r6, 8014044 <rcl_take_request+0x7c>
 8013ff6:	2300      	movs	r3, #0
 8013ff8:	f88d 3007 	strb.w	r3, [sp, #7]
 8013ffc:	4632      	mov	r2, r6
 8013ffe:	f10d 0307 	add.w	r3, sp, #7
 8014002:	a902      	add	r1, sp, #8
 8014004:	f002 ff5a 	bl	8016ebc <rmw_take_request>
 8014008:	4605      	mov	r5, r0
 801400a:	b198      	cbz	r0, 8014034 <rcl_take_request+0x6c>
 801400c:	280a      	cmp	r0, #10
 801400e:	bf18      	it	ne
 8014010:	2501      	movne	r5, #1
 8014012:	f10d 0e18 	add.w	lr, sp, #24
 8014016:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801401a:	46a4      	mov	ip, r4
 801401c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014020:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014024:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014028:	4628      	mov	r0, r5
 801402a:	b00c      	add	sp, #48	@ 0x30
 801402c:	bd70      	pop	{r4, r5, r6, pc}
 801402e:	f44f 7516 	mov.w	r5, #600	@ 0x258
 8014032:	e7ee      	b.n	8014012 <rcl_take_request+0x4a>
 8014034:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8014038:	f240 2359 	movw	r3, #601	@ 0x259
 801403c:	2a00      	cmp	r2, #0
 801403e:	bf08      	it	eq
 8014040:	461d      	moveq	r5, r3
 8014042:	e7e6      	b.n	8014012 <rcl_take_request+0x4a>
 8014044:	250b      	movs	r5, #11
 8014046:	e7e4      	b.n	8014012 <rcl_take_request+0x4a>

08014048 <rcl_send_response>:
 8014048:	b170      	cbz	r0, 8014068 <rcl_send_response+0x20>
 801404a:	6800      	ldr	r0, [r0, #0]
 801404c:	b160      	cbz	r0, 8014068 <rcl_send_response+0x20>
 801404e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8014052:	b148      	cbz	r0, 8014068 <rcl_send_response+0x20>
 8014054:	b159      	cbz	r1, 801406e <rcl_send_response+0x26>
 8014056:	b510      	push	{r4, lr}
 8014058:	b15a      	cbz	r2, 8014072 <rcl_send_response+0x2a>
 801405a:	f002 ff8d 	bl	8016f78 <rmw_send_response>
 801405e:	b110      	cbz	r0, 8014066 <rcl_send_response+0x1e>
 8014060:	2802      	cmp	r0, #2
 8014062:	bf18      	it	ne
 8014064:	2001      	movne	r0, #1
 8014066:	bd10      	pop	{r4, pc}
 8014068:	f44f 7016 	mov.w	r0, #600	@ 0x258
 801406c:	4770      	bx	lr
 801406e:	200b      	movs	r0, #11
 8014070:	4770      	bx	lr
 8014072:	200b      	movs	r0, #11
 8014074:	bd10      	pop	{r4, pc}
 8014076:	bf00      	nop

08014078 <rcl_service_is_valid>:
 8014078:	b130      	cbz	r0, 8014088 <rcl_service_is_valid+0x10>
 801407a:	6800      	ldr	r0, [r0, #0]
 801407c:	b120      	cbz	r0, 8014088 <rcl_service_is_valid+0x10>
 801407e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8014082:	3800      	subs	r0, #0
 8014084:	bf18      	it	ne
 8014086:	2001      	movne	r0, #1
 8014088:	4770      	bx	lr
 801408a:	bf00      	nop

0801408c <rcl_take>:
 801408c:	2800      	cmp	r0, #0
 801408e:	d04a      	beq.n	8014126 <rcl_take+0x9a>
 8014090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014094:	4604      	mov	r4, r0
 8014096:	6800      	ldr	r0, [r0, #0]
 8014098:	b0a4      	sub	sp, #144	@ 0x90
 801409a:	2800      	cmp	r0, #0
 801409c:	d03b      	beq.n	8014116 <rcl_take+0x8a>
 801409e:	461f      	mov	r7, r3
 80140a0:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d036      	beq.n	8014116 <rcl_take+0x8a>
 80140a8:	460e      	mov	r6, r1
 80140aa:	2900      	cmp	r1, #0
 80140ac:	d039      	beq.n	8014122 <rcl_take+0x96>
 80140ae:	4615      	mov	r5, r2
 80140b0:	2a00      	cmp	r2, #0
 80140b2:	d03c      	beq.n	801412e <rcl_take+0xa2>
 80140b4:	a802      	add	r0, sp, #8
 80140b6:	f002 fba3 	bl	8016800 <rmw_get_zero_initialized_message_info>
 80140ba:	f10d 0c08 	add.w	ip, sp, #8
 80140be:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80140c2:	46ae      	mov	lr, r5
 80140c4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80140c8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80140cc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80140d0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80140d4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80140d8:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80140dc:	f04f 0800 	mov.w	r8, #0
 80140e0:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80140e4:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 80140e8:	6822      	ldr	r2, [r4, #0]
 80140ea:	462b      	mov	r3, r5
 80140ec:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 80140f0:	9700      	str	r7, [sp, #0]
 80140f2:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 80140f6:	4631      	mov	r1, r6
 80140f8:	f002 ffe4 	bl	80170c4 <rmw_take_with_info>
 80140fc:	4603      	mov	r3, r0
 80140fe:	b9c0      	cbnz	r0, 8014132 <rcl_take+0xa6>
 8014100:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8014104:	f240 1291 	movw	r2, #401	@ 0x191
 8014108:	2900      	cmp	r1, #0
 801410a:	bf08      	it	eq
 801410c:	4613      	moveq	r3, r2
 801410e:	4618      	mov	r0, r3
 8014110:	b024      	add	sp, #144	@ 0x90
 8014112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014116:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801411a:	4618      	mov	r0, r3
 801411c:	b024      	add	sp, #144	@ 0x90
 801411e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014122:	230b      	movs	r3, #11
 8014124:	e7f3      	b.n	801410e <rcl_take+0x82>
 8014126:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801412a:	4618      	mov	r0, r3
 801412c:	4770      	bx	lr
 801412e:	ad14      	add	r5, sp, #80	@ 0x50
 8014130:	e7c0      	b.n	80140b4 <rcl_take+0x28>
 8014132:	f7ff f99f 	bl	8013474 <rcl_convert_rmw_ret_to_rcl_ret>
 8014136:	4603      	mov	r3, r0
 8014138:	e7e9      	b.n	801410e <rcl_take+0x82>
 801413a:	bf00      	nop

0801413c <rcl_subscription_get_rmw_handle>:
 801413c:	b118      	cbz	r0, 8014146 <rcl_subscription_get_rmw_handle+0xa>
 801413e:	6800      	ldr	r0, [r0, #0]
 8014140:	b108      	cbz	r0, 8014146 <rcl_subscription_get_rmw_handle+0xa>
 8014142:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8014146:	4770      	bx	lr

08014148 <rcl_subscription_is_valid>:
 8014148:	b130      	cbz	r0, 8014158 <rcl_subscription_is_valid+0x10>
 801414a:	6800      	ldr	r0, [r0, #0]
 801414c:	b120      	cbz	r0, 8014158 <rcl_subscription_is_valid+0x10>
 801414e:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8014152:	3800      	subs	r0, #0
 8014154:	bf18      	it	ne
 8014156:	2001      	movne	r0, #1
 8014158:	4770      	bx	lr
 801415a:	bf00      	nop

0801415c <rcl_get_system_time>:
 801415c:	4608      	mov	r0, r1
 801415e:	f7f9 b9ef 	b.w	800d540 <rcutils_system_time_now>
 8014162:	bf00      	nop

08014164 <rcl_get_steady_time>:
 8014164:	4608      	mov	r0, r1
 8014166:	f7f9 ba13 	b.w	800d590 <rcutils_steady_time_now>
 801416a:	bf00      	nop

0801416c <rcl_get_ros_time>:
 801416c:	7a03      	ldrb	r3, [r0, #8]
 801416e:	b510      	push	{r4, lr}
 8014170:	460c      	mov	r4, r1
 8014172:	b133      	cbz	r3, 8014182 <rcl_get_ros_time+0x16>
 8014174:	2105      	movs	r1, #5
 8014176:	f001 ff5f 	bl	8016038 <__atomic_load_8>
 801417a:	e9c4 0100 	strd	r0, r1, [r4]
 801417e:	2000      	movs	r0, #0
 8014180:	bd10      	pop	{r4, pc}
 8014182:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014186:	4608      	mov	r0, r1
 8014188:	f7f9 b9da 	b.w	800d540 <rcutils_system_time_now>

0801418c <rcl_clock_init>:
 801418c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801418e:	4605      	mov	r5, r0
 8014190:	4610      	mov	r0, r2
 8014192:	4614      	mov	r4, r2
 8014194:	460e      	mov	r6, r1
 8014196:	f7f9 f991 	bl	800d4bc <rcutils_allocator_is_valid>
 801419a:	b128      	cbz	r0, 80141a8 <rcl_clock_init+0x1c>
 801419c:	2d03      	cmp	r5, #3
 801419e:	d803      	bhi.n	80141a8 <rcl_clock_init+0x1c>
 80141a0:	e8df f005 	tbb	[pc, r5]
 80141a4:	06532e1d 	.word	0x06532e1d
 80141a8:	f04f 0c0b 	mov.w	ip, #11
 80141ac:	4660      	mov	r0, ip
 80141ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80141b0:	2e00      	cmp	r6, #0
 80141b2:	d0f9      	beq.n	80141a8 <rcl_clock_init+0x1c>
 80141b4:	2c00      	cmp	r4, #0
 80141b6:	d0f7      	beq.n	80141a8 <rcl_clock_init+0x1c>
 80141b8:	2300      	movs	r3, #0
 80141ba:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80141be:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 8014274 <rcl_clock_init+0xe8>
 80141c2:	6133      	str	r3, [r6, #16]
 80141c4:	f106 0514 	add.w	r5, r6, #20
 80141c8:	469c      	mov	ip, r3
 80141ca:	2703      	movs	r7, #3
 80141cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80141ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80141d0:	6823      	ldr	r3, [r4, #0]
 80141d2:	602b      	str	r3, [r5, #0]
 80141d4:	7037      	strb	r7, [r6, #0]
 80141d6:	f8c6 e00c 	str.w	lr, [r6, #12]
 80141da:	4660      	mov	r0, ip
 80141dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80141de:	2e00      	cmp	r6, #0
 80141e0:	d0e2      	beq.n	80141a8 <rcl_clock_init+0x1c>
 80141e2:	2300      	movs	r3, #0
 80141e4:	7033      	strb	r3, [r6, #0]
 80141e6:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80141ea:	e9c6 3303 	strd	r3, r3, [r6, #12]
 80141ee:	469c      	mov	ip, r3
 80141f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80141f2:	f106 0514 	add.w	r5, r6, #20
 80141f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80141f8:	6823      	ldr	r3, [r4, #0]
 80141fa:	602b      	str	r3, [r5, #0]
 80141fc:	4660      	mov	r0, ip
 80141fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014200:	2e00      	cmp	r6, #0
 8014202:	d0d1      	beq.n	80141a8 <rcl_clock_init+0x1c>
 8014204:	2c00      	cmp	r4, #0
 8014206:	d0cf      	beq.n	80141a8 <rcl_clock_init+0x1c>
 8014208:	2700      	movs	r7, #0
 801420a:	7037      	strb	r7, [r6, #0]
 801420c:	46a4      	mov	ip, r4
 801420e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014212:	f106 0514 	add.w	r5, r6, #20
 8014216:	e9c6 7701 	strd	r7, r7, [r6, #4]
 801421a:	e9c6 7703 	strd	r7, r7, [r6, #12]
 801421e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014220:	f8dc 3000 	ldr.w	r3, [ip]
 8014224:	602b      	str	r3, [r5, #0]
 8014226:	6921      	ldr	r1, [r4, #16]
 8014228:	6823      	ldr	r3, [r4, #0]
 801422a:	2010      	movs	r0, #16
 801422c:	4798      	blx	r3
 801422e:	6130      	str	r0, [r6, #16]
 8014230:	b1d0      	cbz	r0, 8014268 <rcl_clock_init+0xdc>
 8014232:	2200      	movs	r2, #0
 8014234:	2300      	movs	r3, #0
 8014236:	e9c0 2300 	strd	r2, r3, [r0]
 801423a:	2301      	movs	r3, #1
 801423c:	7207      	strb	r7, [r0, #8]
 801423e:	4a0c      	ldr	r2, [pc, #48]	@ (8014270 <rcl_clock_init+0xe4>)
 8014240:	7033      	strb	r3, [r6, #0]
 8014242:	46bc      	mov	ip, r7
 8014244:	60f2      	str	r2, [r6, #12]
 8014246:	4660      	mov	r0, ip
 8014248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801424a:	2e00      	cmp	r6, #0
 801424c:	d0ac      	beq.n	80141a8 <rcl_clock_init+0x1c>
 801424e:	2c00      	cmp	r4, #0
 8014250:	d0aa      	beq.n	80141a8 <rcl_clock_init+0x1c>
 8014252:	2300      	movs	r3, #0
 8014254:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8014258:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 8014278 <rcl_clock_init+0xec>
 801425c:	6133      	str	r3, [r6, #16]
 801425e:	f106 0514 	add.w	r5, r6, #20
 8014262:	469c      	mov	ip, r3
 8014264:	2702      	movs	r7, #2
 8014266:	e7b1      	b.n	80141cc <rcl_clock_init+0x40>
 8014268:	f04f 0c0a 	mov.w	ip, #10
 801426c:	e79e      	b.n	80141ac <rcl_clock_init+0x20>
 801426e:	bf00      	nop
 8014270:	0801416d 	.word	0x0801416d
 8014274:	08014165 	.word	0x08014165
 8014278:	0801415d 	.word	0x0801415d

0801427c <rcl_clock_get_now>:
 801427c:	b140      	cbz	r0, 8014290 <rcl_clock_get_now+0x14>
 801427e:	b139      	cbz	r1, 8014290 <rcl_clock_get_now+0x14>
 8014280:	7803      	ldrb	r3, [r0, #0]
 8014282:	b11b      	cbz	r3, 801428c <rcl_clock_get_now+0x10>
 8014284:	68c3      	ldr	r3, [r0, #12]
 8014286:	b10b      	cbz	r3, 801428c <rcl_clock_get_now+0x10>
 8014288:	6900      	ldr	r0, [r0, #16]
 801428a:	4718      	bx	r3
 801428c:	2001      	movs	r0, #1
 801428e:	4770      	bx	lr
 8014290:	200b      	movs	r0, #11
 8014292:	4770      	bx	lr

08014294 <rcl_clock_add_jump_callback>:
 8014294:	b082      	sub	sp, #8
 8014296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801429a:	a906      	add	r1, sp, #24
 801429c:	e881 000c 	stmia.w	r1, {r2, r3}
 80142a0:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	@ 0x30
 80142a4:	b320      	cbz	r0, 80142f0 <rcl_clock_add_jump_callback+0x5c>
 80142a6:	4604      	mov	r4, r0
 80142a8:	3014      	adds	r0, #20
 80142aa:	f7f9 f907 	bl	800d4bc <rcutils_allocator_is_valid>
 80142ae:	b1f8      	cbz	r0, 80142f0 <rcl_clock_add_jump_callback+0x5c>
 80142b0:	b1f6      	cbz	r6, 80142f0 <rcl_clock_add_jump_callback+0x5c>
 80142b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	db1b      	blt.n	80142f0 <rcl_clock_add_jump_callback+0x5c>
 80142b8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80142bc:	2a01      	cmp	r2, #1
 80142be:	f173 0300 	sbcs.w	r3, r3, #0
 80142c2:	da15      	bge.n	80142f0 <rcl_clock_add_jump_callback+0x5c>
 80142c4:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 80142c8:	2f00      	cmp	r7, #0
 80142ca:	d042      	beq.n	8014352 <rcl_clock_add_jump_callback+0xbe>
 80142cc:	2300      	movs	r3, #0
 80142ce:	4602      	mov	r2, r0
 80142d0:	e003      	b.n	80142da <rcl_clock_add_jump_callback+0x46>
 80142d2:	42bb      	cmp	r3, r7
 80142d4:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80142d8:	d011      	beq.n	80142fe <rcl_clock_add_jump_callback+0x6a>
 80142da:	6811      	ldr	r1, [r2, #0]
 80142dc:	42b1      	cmp	r1, r6
 80142de:	f103 0301 	add.w	r3, r3, #1
 80142e2:	d1f6      	bne.n	80142d2 <rcl_clock_add_jump_callback+0x3e>
 80142e4:	6a11      	ldr	r1, [r2, #32]
 80142e6:	42a9      	cmp	r1, r5
 80142e8:	d1f3      	bne.n	80142d2 <rcl_clock_add_jump_callback+0x3e>
 80142ea:	f04f 0e01 	mov.w	lr, #1
 80142ee:	e001      	b.n	80142f4 <rcl_clock_add_jump_callback+0x60>
 80142f0:	f04f 0e0b 	mov.w	lr, #11
 80142f4:	4670      	mov	r0, lr
 80142f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80142fa:	b002      	add	sp, #8
 80142fc:	4770      	bx	lr
 80142fe:	3301      	adds	r3, #1
 8014300:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014304:	00d9      	lsls	r1, r3, #3
 8014306:	69e3      	ldr	r3, [r4, #28]
 8014308:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 801430a:	4798      	blx	r3
 801430c:	b1f0      	cbz	r0, 801434c <rcl_clock_add_jump_callback+0xb8>
 801430e:	68a3      	ldr	r3, [r4, #8]
 8014310:	6060      	str	r0, [r4, #4]
 8014312:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8014316:	f10d 0c18 	add.w	ip, sp, #24
 801431a:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 801431e:	f103 0801 	add.w	r8, r3, #1
 8014322:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8014326:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801432a:	f106 0708 	add.w	r7, r6, #8
 801432e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8014330:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8014334:	f04f 0e00 	mov.w	lr, #0
 8014338:	e887 0003 	stmia.w	r7, {r0, r1}
 801433c:	6235      	str	r5, [r6, #32]
 801433e:	4670      	mov	r0, lr
 8014340:	f8c4 8008 	str.w	r8, [r4, #8]
 8014344:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014348:	b002      	add	sp, #8
 801434a:	4770      	bx	lr
 801434c:	f04f 0e0a 	mov.w	lr, #10
 8014350:	e7d0      	b.n	80142f4 <rcl_clock_add_jump_callback+0x60>
 8014352:	2128      	movs	r1, #40	@ 0x28
 8014354:	e7d7      	b.n	8014306 <rcl_clock_add_jump_callback+0x72>
 8014356:	bf00      	nop

08014358 <rcl_clock_remove_jump_callback>:
 8014358:	2800      	cmp	r0, #0
 801435a:	d057      	beq.n	801440c <rcl_clock_remove_jump_callback+0xb4>
 801435c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014360:	4605      	mov	r5, r0
 8014362:	3014      	adds	r0, #20
 8014364:	4688      	mov	r8, r1
 8014366:	4692      	mov	sl, r2
 8014368:	f7f9 f8a8 	bl	800d4bc <rcutils_allocator_is_valid>
 801436c:	2800      	cmp	r0, #0
 801436e:	d03b      	beq.n	80143e8 <rcl_clock_remove_jump_callback+0x90>
 8014370:	f1b8 0f00 	cmp.w	r8, #0
 8014374:	d038      	beq.n	80143e8 <rcl_clock_remove_jump_callback+0x90>
 8014376:	68ae      	ldr	r6, [r5, #8]
 8014378:	b166      	cbz	r6, 8014394 <rcl_clock_remove_jump_callback+0x3c>
 801437a:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801437e:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 8014382:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 8014386:	464c      	mov	r4, r9
 8014388:	6823      	ldr	r3, [r4, #0]
 801438a:	4543      	cmp	r3, r8
 801438c:	d005      	beq.n	801439a <rcl_clock_remove_jump_callback+0x42>
 801438e:	3428      	adds	r4, #40	@ 0x28
 8014390:	42a7      	cmp	r7, r4
 8014392:	d1f9      	bne.n	8014388 <rcl_clock_remove_jump_callback+0x30>
 8014394:	2001      	movs	r0, #1
 8014396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801439a:	6a23      	ldr	r3, [r4, #32]
 801439c:	3428      	adds	r4, #40	@ 0x28
 801439e:	42bc      	cmp	r4, r7
 80143a0:	d02d      	beq.n	80143fe <rcl_clock_remove_jump_callback+0xa6>
 80143a2:	4553      	cmp	r3, sl
 80143a4:	d1f0      	bne.n	8014388 <rcl_clock_remove_jump_callback+0x30>
 80143a6:	46a6      	mov	lr, r4
 80143a8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80143ac:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 80143b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80143b4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80143b8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80143bc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80143c0:	3428      	adds	r4, #40	@ 0x28
 80143c2:	42a7      	cmp	r7, r4
 80143c4:	e88c 0003 	stmia.w	ip, {r0, r1}
 80143c8:	d1ed      	bne.n	80143a6 <rcl_clock_remove_jump_callback+0x4e>
 80143ca:	3e01      	subs	r6, #1
 80143cc:	60ae      	str	r6, [r5, #8]
 80143ce:	b176      	cbz	r6, 80143ee <rcl_clock_remove_jump_callback+0x96>
 80143d0:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80143d4:	69eb      	ldr	r3, [r5, #28]
 80143d6:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 80143d8:	00f1      	lsls	r1, r6, #3
 80143da:	4648      	mov	r0, r9
 80143dc:	4798      	blx	r3
 80143de:	b1b8      	cbz	r0, 8014410 <rcl_clock_remove_jump_callback+0xb8>
 80143e0:	6068      	str	r0, [r5, #4]
 80143e2:	2000      	movs	r0, #0
 80143e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80143e8:	200b      	movs	r0, #11
 80143ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80143ee:	4648      	mov	r0, r9
 80143f0:	69ab      	ldr	r3, [r5, #24]
 80143f2:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 80143f4:	4798      	blx	r3
 80143f6:	606e      	str	r6, [r5, #4]
 80143f8:	4630      	mov	r0, r6
 80143fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80143fe:	4553      	cmp	r3, sl
 8014400:	d1c8      	bne.n	8014394 <rcl_clock_remove_jump_callback+0x3c>
 8014402:	3e01      	subs	r6, #1
 8014404:	60ae      	str	r6, [r5, #8]
 8014406:	2e00      	cmp	r6, #0
 8014408:	d1e2      	bne.n	80143d0 <rcl_clock_remove_jump_callback+0x78>
 801440a:	e7f0      	b.n	80143ee <rcl_clock_remove_jump_callback+0x96>
 801440c:	200b      	movs	r0, #11
 801440e:	4770      	bx	lr
 8014410:	200a      	movs	r0, #10
 8014412:	e7ea      	b.n	80143ea <rcl_clock_remove_jump_callback+0x92>

08014414 <_rcl_timer_time_jump>:
 8014414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014418:	4605      	mov	r5, r0
 801441a:	b084      	sub	sp, #16
 801441c:	4614      	mov	r4, r2
 801441e:	b131      	cbz	r1, 801442e <_rcl_timer_time_jump+0x1a>
 8014420:	7803      	ldrb	r3, [r0, #0]
 8014422:	3b02      	subs	r3, #2
 8014424:	2b01      	cmp	r3, #1
 8014426:	d93f      	bls.n	80144a8 <_rcl_timer_time_jump+0x94>
 8014428:	b004      	add	sp, #16
 801442a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801442e:	6813      	ldr	r3, [r2, #0]
 8014430:	a902      	add	r1, sp, #8
 8014432:	6818      	ldr	r0, [r3, #0]
 8014434:	f7ff ff22 	bl	801427c <rcl_clock_get_now>
 8014438:	2800      	cmp	r0, #0
 801443a:	d1f5      	bne.n	8014428 <_rcl_timer_time_jump+0x14>
 801443c:	6820      	ldr	r0, [r4, #0]
 801443e:	2105      	movs	r1, #5
 8014440:	3020      	adds	r0, #32
 8014442:	f001 fdf9 	bl	8016038 <__atomic_load_8>
 8014446:	6823      	ldr	r3, [r4, #0]
 8014448:	4681      	mov	r9, r0
 801444a:	4688      	mov	r8, r1
 801444c:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8014450:	2105      	movs	r1, #5
 8014452:	f001 fdf1 	bl	8016038 <__atomic_load_8>
 8014456:	4607      	mov	r7, r0
 8014458:	6820      	ldr	r0, [r4, #0]
 801445a:	460e      	mov	r6, r1
 801445c:	3018      	adds	r0, #24
 801445e:	2105      	movs	r1, #5
 8014460:	f001 fdea 	bl	8016038 <__atomic_load_8>
 8014464:	782b      	ldrb	r3, [r5, #0]
 8014466:	9a02      	ldr	r2, [sp, #8]
 8014468:	3b02      	subs	r3, #2
 801446a:	2b01      	cmp	r3, #1
 801446c:	460d      	mov	r5, r1
 801446e:	9b03      	ldr	r3, [sp, #12]
 8014470:	4682      	mov	sl, r0
 8014472:	d937      	bls.n	80144e4 <_rcl_timer_time_jump+0xd0>
 8014474:	42ba      	cmp	r2, r7
 8014476:	eb73 0106 	sbcs.w	r1, r3, r6
 801447a:	da5f      	bge.n	801453c <_rcl_timer_time_jump+0x128>
 801447c:	454a      	cmp	r2, r9
 801447e:	eb73 0108 	sbcs.w	r1, r3, r8
 8014482:	dad1      	bge.n	8014428 <_rcl_timer_time_jump+0x14>
 8014484:	6820      	ldr	r0, [r4, #0]
 8014486:	eb1a 0202 	adds.w	r2, sl, r2
 801448a:	eb43 0305 	adc.w	r3, r3, r5
 801448e:	2505      	movs	r5, #5
 8014490:	3028      	adds	r0, #40	@ 0x28
 8014492:	9500      	str	r5, [sp, #0]
 8014494:	f001 fe06 	bl	80160a4 <__atomic_store_8>
 8014498:	6820      	ldr	r0, [r4, #0]
 801449a:	9500      	str	r5, [sp, #0]
 801449c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80144a0:	3020      	adds	r0, #32
 80144a2:	f001 fdff 	bl	80160a4 <__atomic_store_8>
 80144a6:	e7bf      	b.n	8014428 <_rcl_timer_time_jump+0x14>
 80144a8:	6813      	ldr	r3, [r2, #0]
 80144aa:	a902      	add	r1, sp, #8
 80144ac:	6818      	ldr	r0, [r3, #0]
 80144ae:	f7ff fee5 	bl	801427c <rcl_clock_get_now>
 80144b2:	2800      	cmp	r0, #0
 80144b4:	d1b8      	bne.n	8014428 <_rcl_timer_time_jump+0x14>
 80144b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80144ba:	4313      	orrs	r3, r2
 80144bc:	d0b4      	beq.n	8014428 <_rcl_timer_time_jump+0x14>
 80144be:	6820      	ldr	r0, [r4, #0]
 80144c0:	2105      	movs	r1, #5
 80144c2:	3028      	adds	r0, #40	@ 0x28
 80144c4:	f001 fdb8 	bl	8016038 <__atomic_load_8>
 80144c8:	9d02      	ldr	r5, [sp, #8]
 80144ca:	9b03      	ldr	r3, [sp, #12]
 80144cc:	4602      	mov	r2, r0
 80144ce:	6820      	ldr	r0, [r4, #0]
 80144d0:	1b52      	subs	r2, r2, r5
 80144d2:	f04f 0405 	mov.w	r4, #5
 80144d6:	9400      	str	r4, [sp, #0]
 80144d8:	eb61 0303 	sbc.w	r3, r1, r3
 80144dc:	3030      	adds	r0, #48	@ 0x30
 80144de:	f001 fde1 	bl	80160a4 <__atomic_store_8>
 80144e2:	e7a1      	b.n	8014428 <_rcl_timer_time_jump+0x14>
 80144e4:	4313      	orrs	r3, r2
 80144e6:	d09f      	beq.n	8014428 <_rcl_timer_time_jump+0x14>
 80144e8:	6820      	ldr	r0, [r4, #0]
 80144ea:	f04f 0805 	mov.w	r8, #5
 80144ee:	2300      	movs	r3, #0
 80144f0:	f8cd 8000 	str.w	r8, [sp]
 80144f4:	3030      	adds	r0, #48	@ 0x30
 80144f6:	2200      	movs	r2, #0
 80144f8:	f001 fe0a 	bl	8016110 <__atomic_exchange_8>
 80144fc:	ea51 0300 	orrs.w	r3, r1, r0
 8014500:	4606      	mov	r6, r0
 8014502:	460f      	mov	r7, r1
 8014504:	d090      	beq.n	8014428 <_rcl_timer_time_jump+0x14>
 8014506:	9a02      	ldr	r2, [sp, #8]
 8014508:	9b03      	ldr	r3, [sp, #12]
 801450a:	f8cd 8000 	str.w	r8, [sp]
 801450e:	1a12      	subs	r2, r2, r0
 8014510:	6820      	ldr	r0, [r4, #0]
 8014512:	eb63 0301 	sbc.w	r3, r3, r1
 8014516:	eb12 020a 	adds.w	r2, r2, sl
 801451a:	eb43 0305 	adc.w	r3, r3, r5
 801451e:	3028      	adds	r0, #40	@ 0x28
 8014520:	f001 fdc0 	bl	80160a4 <__atomic_store_8>
 8014524:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014528:	f8cd 8000 	str.w	r8, [sp]
 801452c:	6820      	ldr	r0, [r4, #0]
 801452e:	1b92      	subs	r2, r2, r6
 8014530:	eb63 0307 	sbc.w	r3, r3, r7
 8014534:	3020      	adds	r0, #32
 8014536:	f001 fdb5 	bl	80160a4 <__atomic_store_8>
 801453a:	e775      	b.n	8014428 <_rcl_timer_time_jump+0x14>
 801453c:	6820      	ldr	r0, [r4, #0]
 801453e:	3008      	adds	r0, #8
 8014540:	f004 f87e 	bl	8018640 <rcl_trigger_guard_condition>
 8014544:	e770      	b.n	8014428 <_rcl_timer_time_jump+0x14>
 8014546:	bf00      	nop

08014548 <rcl_get_zero_initialized_timer>:
 8014548:	4b01      	ldr	r3, [pc, #4]	@ (8014550 <rcl_get_zero_initialized_timer+0x8>)
 801454a:	6818      	ldr	r0, [r3, #0]
 801454c:	4770      	bx	lr
 801454e:	bf00      	nop
 8014550:	0801b8f0 	.word	0x0801b8f0
 8014554:	00000000 	.word	0x00000000

08014558 <rcl_timer_init>:
 8014558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801455c:	b0aa      	sub	sp, #168	@ 0xa8
 801455e:	4604      	mov	r4, r0
 8014560:	a835      	add	r0, sp, #212	@ 0xd4
 8014562:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	@ 0xc8
 8014566:	460d      	mov	r5, r1
 8014568:	4692      	mov	sl, r2
 801456a:	f7f8 ffa7 	bl	800d4bc <rcutils_allocator_is_valid>
 801456e:	2800      	cmp	r0, #0
 8014570:	d064      	beq.n	801463c <rcl_timer_init+0xe4>
 8014572:	2c00      	cmp	r4, #0
 8014574:	d062      	beq.n	801463c <rcl_timer_init+0xe4>
 8014576:	2d00      	cmp	r5, #0
 8014578:	d060      	beq.n	801463c <rcl_timer_init+0xe4>
 801457a:	2f00      	cmp	r7, #0
 801457c:	db5e      	blt.n	801463c <rcl_timer_init+0xe4>
 801457e:	6823      	ldr	r3, [r4, #0]
 8014580:	b123      	cbz	r3, 801458c <rcl_timer_init+0x34>
 8014582:	2664      	movs	r6, #100	@ 0x64
 8014584:	4630      	mov	r0, r6
 8014586:	b02a      	add	sp, #168	@ 0xa8
 8014588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801458c:	a908      	add	r1, sp, #32
 801458e:	4628      	mov	r0, r5
 8014590:	f7ff fe74 	bl	801427c <rcl_clock_get_now>
 8014594:	4606      	mov	r6, r0
 8014596:	2800      	cmp	r0, #0
 8014598:	d1f4      	bne.n	8014584 <rcl_timer_init+0x2c>
 801459a:	ae06      	add	r6, sp, #24
 801459c:	4630      	mov	r0, r6
 801459e:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 80145a2:	f003 ff55 	bl	8018450 <rcl_get_zero_initialized_guard_condition>
 80145a6:	e896 0003 	ldmia.w	r6, {r0, r1}
 80145aa:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 80145ae:	ae0b      	add	r6, sp, #44	@ 0x2c
 80145b0:	e889 0003 	stmia.w	r9, {r0, r1}
 80145b4:	4630      	mov	r0, r6
 80145b6:	f004 f827 	bl	8018608 <rcl_guard_condition_get_default_options>
 80145ba:	ab0d      	add	r3, sp, #52	@ 0x34
 80145bc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80145c0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80145c4:	4651      	mov	r1, sl
 80145c6:	e896 000c 	ldmia.w	r6, {r2, r3}
 80145ca:	4648      	mov	r0, r9
 80145cc:	f003 ff4a 	bl	8018464 <rcl_guard_condition_init>
 80145d0:	4606      	mov	r6, r0
 80145d2:	2800      	cmp	r0, #0
 80145d4:	d1d6      	bne.n	8014584 <rcl_timer_init+0x2c>
 80145d6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80145d8:	781b      	ldrb	r3, [r3, #0]
 80145da:	2b01      	cmp	r3, #1
 80145dc:	d033      	beq.n	8014646 <rcl_timer_init+0xee>
 80145de:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 80145e0:	911a      	str	r1, [sp, #104]	@ 0x68
 80145e2:	4642      	mov	r2, r8
 80145e4:	463b      	mov	r3, r7
 80145e6:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 80145ea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80145ee:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 80146a0 <rcl_timer_init+0x148>
 80145f2:	eb12 0008 	adds.w	r0, r2, r8
 80145f6:	eb47 0103 	adc.w	r1, r7, r3
 80145fa:	f10d 0ed4 	add.w	lr, sp, #212	@ 0xd4
 80145fe:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 8014602:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 8014606:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 801460a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801460e:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 8014612:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014616:	f8de 3000 	ldr.w	r3, [lr]
 801461a:	f8cc 3000 	str.w	r3, [ip]
 801461e:	f04f 0a00 	mov.w	sl, #0
 8014622:	4619      	mov	r1, r3
 8014624:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 8014628:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 801462a:	2050      	movs	r0, #80	@ 0x50
 801462c:	4798      	blx	r3
 801462e:	6020      	str	r0, [r4, #0]
 8014630:	b358      	cbz	r0, 801468a <rcl_timer_init+0x132>
 8014632:	2250      	movs	r2, #80	@ 0x50
 8014634:	a916      	add	r1, sp, #88	@ 0x58
 8014636:	f004 ff34 	bl	80194a2 <memcpy>
 801463a:	e7a3      	b.n	8014584 <rcl_timer_init+0x2c>
 801463c:	260b      	movs	r6, #11
 801463e:	4630      	mov	r0, r6
 8014640:	b02a      	add	sp, #168	@ 0xa8
 8014642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014646:	2001      	movs	r0, #1
 8014648:	2100      	movs	r1, #0
 801464a:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 801464e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014652:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8014656:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 801465a:	4a13      	ldr	r2, [pc, #76]	@ (80146a8 <rcl_timer_init+0x150>)
 801465c:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8014660:	9405      	str	r4, [sp, #20]
 8014662:	9204      	str	r2, [sp, #16]
 8014664:	ab12      	add	r3, sp, #72	@ 0x48
 8014666:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014668:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801466c:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8014670:	e89c 000c 	ldmia.w	ip, {r2, r3}
 8014674:	4628      	mov	r0, r5
 8014676:	f7ff fe0d 	bl	8014294 <rcl_clock_add_jump_callback>
 801467a:	4682      	mov	sl, r0
 801467c:	2800      	cmp	r0, #0
 801467e:	d0ae      	beq.n	80145de <rcl_timer_init+0x86>
 8014680:	4648      	mov	r0, r9
 8014682:	f003 ff9b 	bl	80185bc <rcl_guard_condition_fini>
 8014686:	4656      	mov	r6, sl
 8014688:	e77c      	b.n	8014584 <rcl_timer_init+0x2c>
 801468a:	4648      	mov	r0, r9
 801468c:	f003 ff96 	bl	80185bc <rcl_guard_condition_fini>
 8014690:	4905      	ldr	r1, [pc, #20]	@ (80146a8 <rcl_timer_init+0x150>)
 8014692:	4622      	mov	r2, r4
 8014694:	4628      	mov	r0, r5
 8014696:	f7ff fe5f 	bl	8014358 <rcl_clock_remove_jump_callback>
 801469a:	260a      	movs	r6, #10
 801469c:	e772      	b.n	8014584 <rcl_timer_init+0x2c>
 801469e:	bf00      	nop
	...
 80146a8:	08014415 	.word	0x08014415

080146ac <rcl_timer_call>:
 80146ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146b0:	b087      	sub	sp, #28
 80146b2:	2800      	cmp	r0, #0
 80146b4:	d06d      	beq.n	8014792 <rcl_timer_call+0xe6>
 80146b6:	6803      	ldr	r3, [r0, #0]
 80146b8:	4604      	mov	r4, r0
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d063      	beq.n	8014786 <rcl_timer_call+0xda>
 80146be:	f3bf 8f5b 	dmb	ish
 80146c2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80146c6:	f3bf 8f5b 	dmb	ish
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d150      	bne.n	8014770 <rcl_timer_call+0xc4>
 80146ce:	6803      	ldr	r3, [r0, #0]
 80146d0:	a904      	add	r1, sp, #16
 80146d2:	6818      	ldr	r0, [r3, #0]
 80146d4:	f7ff fdd2 	bl	801427c <rcl_clock_get_now>
 80146d8:	4605      	mov	r5, r0
 80146da:	2800      	cmp	r0, #0
 80146dc:	d14a      	bne.n	8014774 <rcl_timer_call+0xc8>
 80146de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	db4a      	blt.n	801477c <rcl_timer_call+0xd0>
 80146e6:	6820      	ldr	r0, [r4, #0]
 80146e8:	f04f 0a05 	mov.w	sl, #5
 80146ec:	f8cd a000 	str.w	sl, [sp]
 80146f0:	3020      	adds	r0, #32
 80146f2:	f001 fd0d 	bl	8016110 <__atomic_exchange_8>
 80146f6:	6823      	ldr	r3, [r4, #0]
 80146f8:	f3bf 8f5b 	dmb	ish
 80146fc:	4680      	mov	r8, r0
 80146fe:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8014702:	f3bf 8f5b 	dmb	ish
 8014706:	6820      	ldr	r0, [r4, #0]
 8014708:	4689      	mov	r9, r1
 801470a:	3028      	adds	r0, #40	@ 0x28
 801470c:	4651      	mov	r1, sl
 801470e:	f001 fc93 	bl	8016038 <__atomic_load_8>
 8014712:	4606      	mov	r6, r0
 8014714:	6820      	ldr	r0, [r4, #0]
 8014716:	460f      	mov	r7, r1
 8014718:	3018      	adds	r0, #24
 801471a:	4651      	mov	r1, sl
 801471c:	f001 fc8c 	bl	8016038 <__atomic_load_8>
 8014720:	1836      	adds	r6, r6, r0
 8014722:	4602      	mov	r2, r0
 8014724:	4682      	mov	sl, r0
 8014726:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 801472a:	eb47 0701 	adc.w	r7, r7, r1
 801472e:	4286      	cmp	r6, r0
 8014730:	460b      	mov	r3, r1
 8014732:	eb77 010c 	sbcs.w	r1, r7, ip
 8014736:	da04      	bge.n	8014742 <rcl_timer_call+0x96>
 8014738:	ea53 0102 	orrs.w	r1, r3, r2
 801473c:	d12e      	bne.n	801479c <rcl_timer_call+0xf0>
 801473e:	4606      	mov	r6, r0
 8014740:	4667      	mov	r7, ip
 8014742:	6820      	ldr	r0, [r4, #0]
 8014744:	2105      	movs	r1, #5
 8014746:	4632      	mov	r2, r6
 8014748:	463b      	mov	r3, r7
 801474a:	3028      	adds	r0, #40	@ 0x28
 801474c:	9100      	str	r1, [sp, #0]
 801474e:	f001 fca9 	bl	80160a4 <__atomic_store_8>
 8014752:	f1bb 0f00 	cmp.w	fp, #0
 8014756:	d00d      	beq.n	8014774 <rcl_timer_call+0xc8>
 8014758:	9a04      	ldr	r2, [sp, #16]
 801475a:	9b05      	ldr	r3, [sp, #20]
 801475c:	ebb2 0208 	subs.w	r2, r2, r8
 8014760:	4620      	mov	r0, r4
 8014762:	eb63 0309 	sbc.w	r3, r3, r9
 8014766:	47d8      	blx	fp
 8014768:	4628      	mov	r0, r5
 801476a:	b007      	add	sp, #28
 801476c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014770:	f240 3521 	movw	r5, #801	@ 0x321
 8014774:	4628      	mov	r0, r5
 8014776:	b007      	add	sp, #28
 8014778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801477c:	2501      	movs	r5, #1
 801477e:	4628      	mov	r0, r5
 8014780:	b007      	add	sp, #28
 8014782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014786:	f44f 7548 	mov.w	r5, #800	@ 0x320
 801478a:	4628      	mov	r0, r5
 801478c:	b007      	add	sp, #28
 801478e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014792:	250b      	movs	r5, #11
 8014794:	4628      	mov	r0, r5
 8014796:	b007      	add	sp, #28
 8014798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801479c:	1b80      	subs	r0, r0, r6
 801479e:	eb6c 0107 	sbc.w	r1, ip, r7
 80147a2:	3801      	subs	r0, #1
 80147a4:	f161 0100 	sbc.w	r1, r1, #0
 80147a8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80147ac:	f7ec fa0c 	bl	8000bc8 <__aeabi_ldivmod>
 80147b0:	9b02      	ldr	r3, [sp, #8]
 80147b2:	3001      	adds	r0, #1
 80147b4:	f141 0100 	adc.w	r1, r1, #0
 80147b8:	fb00 f303 	mul.w	r3, r0, r3
 80147bc:	fb01 330a 	mla	r3, r1, sl, r3
 80147c0:	fba0 0a0a 	umull	r0, sl, r0, sl
 80147c4:	1986      	adds	r6, r0, r6
 80147c6:	4453      	add	r3, sl
 80147c8:	eb43 0707 	adc.w	r7, r3, r7
 80147cc:	e7b9      	b.n	8014742 <rcl_timer_call+0x96>
 80147ce:	bf00      	nop

080147d0 <rcl_timer_is_ready>:
 80147d0:	b570      	push	{r4, r5, r6, lr}
 80147d2:	b082      	sub	sp, #8
 80147d4:	b378      	cbz	r0, 8014836 <rcl_timer_is_ready+0x66>
 80147d6:	6803      	ldr	r3, [r0, #0]
 80147d8:	4604      	mov	r4, r0
 80147da:	b383      	cbz	r3, 801483e <rcl_timer_is_ready+0x6e>
 80147dc:	460d      	mov	r5, r1
 80147de:	b351      	cbz	r1, 8014836 <rcl_timer_is_ready+0x66>
 80147e0:	f3bf 8f5b 	dmb	ish
 80147e4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80147e8:	f3bf 8f5b 	dmb	ish
 80147ec:	b953      	cbnz	r3, 8014804 <rcl_timer_is_ready+0x34>
 80147ee:	6803      	ldr	r3, [r0, #0]
 80147f0:	4669      	mov	r1, sp
 80147f2:	6818      	ldr	r0, [r3, #0]
 80147f4:	f7ff fd42 	bl	801427c <rcl_clock_get_now>
 80147f8:	4606      	mov	r6, r0
 80147fa:	b140      	cbz	r0, 801480e <rcl_timer_is_ready+0x3e>
 80147fc:	f240 3321 	movw	r3, #801	@ 0x321
 8014800:	4298      	cmp	r0, r3
 8014802:	d101      	bne.n	8014808 <rcl_timer_is_ready+0x38>
 8014804:	2600      	movs	r6, #0
 8014806:	702e      	strb	r6, [r5, #0]
 8014808:	4630      	mov	r0, r6
 801480a:	b002      	add	sp, #8
 801480c:	bd70      	pop	{r4, r5, r6, pc}
 801480e:	6820      	ldr	r0, [r4, #0]
 8014810:	2105      	movs	r1, #5
 8014812:	3028      	adds	r0, #40	@ 0x28
 8014814:	f001 fc10 	bl	8016038 <__atomic_load_8>
 8014818:	9b00      	ldr	r3, [sp, #0]
 801481a:	1ac0      	subs	r0, r0, r3
 801481c:	9b01      	ldr	r3, [sp, #4]
 801481e:	eb61 0103 	sbc.w	r1, r1, r3
 8014822:	2801      	cmp	r0, #1
 8014824:	f171 0300 	sbcs.w	r3, r1, #0
 8014828:	bfb4      	ite	lt
 801482a:	2301      	movlt	r3, #1
 801482c:	2300      	movge	r3, #0
 801482e:	4630      	mov	r0, r6
 8014830:	702b      	strb	r3, [r5, #0]
 8014832:	b002      	add	sp, #8
 8014834:	bd70      	pop	{r4, r5, r6, pc}
 8014836:	260b      	movs	r6, #11
 8014838:	4630      	mov	r0, r6
 801483a:	b002      	add	sp, #8
 801483c:	bd70      	pop	{r4, r5, r6, pc}
 801483e:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8014842:	e7e1      	b.n	8014808 <rcl_timer_is_ready+0x38>

08014844 <rcl_timer_get_time_until_next_call>:
 8014844:	b570      	push	{r4, r5, r6, lr}
 8014846:	b082      	sub	sp, #8
 8014848:	b330      	cbz	r0, 8014898 <rcl_timer_get_time_until_next_call+0x54>
 801484a:	6803      	ldr	r3, [r0, #0]
 801484c:	4604      	mov	r4, r0
 801484e:	b33b      	cbz	r3, 80148a0 <rcl_timer_get_time_until_next_call+0x5c>
 8014850:	460d      	mov	r5, r1
 8014852:	b309      	cbz	r1, 8014898 <rcl_timer_get_time_until_next_call+0x54>
 8014854:	f3bf 8f5b 	dmb	ish
 8014858:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801485c:	f3bf 8f5b 	dmb	ish
 8014860:	b9ab      	cbnz	r3, 801488e <rcl_timer_get_time_until_next_call+0x4a>
 8014862:	6803      	ldr	r3, [r0, #0]
 8014864:	4669      	mov	r1, sp
 8014866:	6818      	ldr	r0, [r3, #0]
 8014868:	f7ff fd08 	bl	801427c <rcl_clock_get_now>
 801486c:	4606      	mov	r6, r0
 801486e:	b958      	cbnz	r0, 8014888 <rcl_timer_get_time_until_next_call+0x44>
 8014870:	6820      	ldr	r0, [r4, #0]
 8014872:	2105      	movs	r1, #5
 8014874:	3028      	adds	r0, #40	@ 0x28
 8014876:	f001 fbdf 	bl	8016038 <__atomic_load_8>
 801487a:	9b00      	ldr	r3, [sp, #0]
 801487c:	1ac0      	subs	r0, r0, r3
 801487e:	9b01      	ldr	r3, [sp, #4]
 8014880:	6028      	str	r0, [r5, #0]
 8014882:	eb61 0103 	sbc.w	r1, r1, r3
 8014886:	6069      	str	r1, [r5, #4]
 8014888:	4630      	mov	r0, r6
 801488a:	b002      	add	sp, #8
 801488c:	bd70      	pop	{r4, r5, r6, pc}
 801488e:	f240 3621 	movw	r6, #801	@ 0x321
 8014892:	4630      	mov	r0, r6
 8014894:	b002      	add	sp, #8
 8014896:	bd70      	pop	{r4, r5, r6, pc}
 8014898:	260b      	movs	r6, #11
 801489a:	4630      	mov	r0, r6
 801489c:	b002      	add	sp, #8
 801489e:	bd70      	pop	{r4, r5, r6, pc}
 80148a0:	f44f 7648 	mov.w	r6, #800	@ 0x320
 80148a4:	e7f0      	b.n	8014888 <rcl_timer_get_time_until_next_call+0x44>
 80148a6:	bf00      	nop

080148a8 <rcl_timer_get_guard_condition>:
 80148a8:	b130      	cbz	r0, 80148b8 <rcl_timer_get_guard_condition+0x10>
 80148aa:	6800      	ldr	r0, [r0, #0]
 80148ac:	b120      	cbz	r0, 80148b8 <rcl_timer_get_guard_condition+0x10>
 80148ae:	68c3      	ldr	r3, [r0, #12]
 80148b0:	b10b      	cbz	r3, 80148b6 <rcl_timer_get_guard_condition+0xe>
 80148b2:	3008      	adds	r0, #8
 80148b4:	4770      	bx	lr
 80148b6:	4618      	mov	r0, r3
 80148b8:	4770      	bx	lr
 80148ba:	bf00      	nop

080148bc <rcl_validate_enclave_name_with_size>:
 80148bc:	b378      	cbz	r0, 801491e <rcl_validate_enclave_name_with_size+0x62>
 80148be:	b570      	push	{r4, r5, r6, lr}
 80148c0:	4615      	mov	r5, r2
 80148c2:	b0c2      	sub	sp, #264	@ 0x108
 80148c4:	b302      	cbz	r2, 8014908 <rcl_validate_enclave_name_with_size+0x4c>
 80148c6:	461e      	mov	r6, r3
 80148c8:	466a      	mov	r2, sp
 80148ca:	ab01      	add	r3, sp, #4
 80148cc:	460c      	mov	r4, r1
 80148ce:	f002 f815 	bl	80168fc <rmw_validate_namespace_with_size>
 80148d2:	4684      	mov	ip, r0
 80148d4:	b9e8      	cbnz	r0, 8014912 <rcl_validate_enclave_name_with_size+0x56>
 80148d6:	9b00      	ldr	r3, [sp, #0]
 80148d8:	b923      	cbnz	r3, 80148e4 <rcl_validate_enclave_name_with_size+0x28>
 80148da:	2300      	movs	r3, #0
 80148dc:	602b      	str	r3, [r5, #0]
 80148de:	4660      	mov	r0, ip
 80148e0:	b042      	add	sp, #264	@ 0x108
 80148e2:	bd70      	pop	{r4, r5, r6, pc}
 80148e4:	2b07      	cmp	r3, #7
 80148e6:	d007      	beq.n	80148f8 <rcl_validate_enclave_name_with_size+0x3c>
 80148e8:	1e5a      	subs	r2, r3, #1
 80148ea:	2a05      	cmp	r2, #5
 80148ec:	d833      	bhi.n	8014956 <rcl_validate_enclave_name_with_size+0x9a>
 80148ee:	e8df f002 	tbb	[pc, r2]
 80148f2:	2c2f      	.short	0x2c2f
 80148f4:	1a232629 	.word	0x1a232629
 80148f8:	2cff      	cmp	r4, #255	@ 0xff
 80148fa:	d9ee      	bls.n	80148da <rcl_validate_enclave_name_with_size+0x1e>
 80148fc:	602b      	str	r3, [r5, #0]
 80148fe:	2e00      	cmp	r6, #0
 8014900:	d0ed      	beq.n	80148de <rcl_validate_enclave_name_with_size+0x22>
 8014902:	23fe      	movs	r3, #254	@ 0xfe
 8014904:	6033      	str	r3, [r6, #0]
 8014906:	e7ea      	b.n	80148de <rcl_validate_enclave_name_with_size+0x22>
 8014908:	f04f 0c0b 	mov.w	ip, #11
 801490c:	4660      	mov	r0, ip
 801490e:	b042      	add	sp, #264	@ 0x108
 8014910:	bd70      	pop	{r4, r5, r6, pc}
 8014912:	f7fe fdaf 	bl	8013474 <rcl_convert_rmw_ret_to_rcl_ret>
 8014916:	4684      	mov	ip, r0
 8014918:	4660      	mov	r0, ip
 801491a:	b042      	add	sp, #264	@ 0x108
 801491c:	bd70      	pop	{r4, r5, r6, pc}
 801491e:	f04f 0c0b 	mov.w	ip, #11
 8014922:	4660      	mov	r0, ip
 8014924:	4770      	bx	lr
 8014926:	2306      	movs	r3, #6
 8014928:	602b      	str	r3, [r5, #0]
 801492a:	2e00      	cmp	r6, #0
 801492c:	d0d7      	beq.n	80148de <rcl_validate_enclave_name_with_size+0x22>
 801492e:	9b01      	ldr	r3, [sp, #4]
 8014930:	6033      	str	r3, [r6, #0]
 8014932:	4660      	mov	r0, ip
 8014934:	b042      	add	sp, #264	@ 0x108
 8014936:	bd70      	pop	{r4, r5, r6, pc}
 8014938:	2305      	movs	r3, #5
 801493a:	602b      	str	r3, [r5, #0]
 801493c:	e7f5      	b.n	801492a <rcl_validate_enclave_name_with_size+0x6e>
 801493e:	2304      	movs	r3, #4
 8014940:	602b      	str	r3, [r5, #0]
 8014942:	e7f2      	b.n	801492a <rcl_validate_enclave_name_with_size+0x6e>
 8014944:	2303      	movs	r3, #3
 8014946:	602b      	str	r3, [r5, #0]
 8014948:	e7ef      	b.n	801492a <rcl_validate_enclave_name_with_size+0x6e>
 801494a:	2302      	movs	r3, #2
 801494c:	602b      	str	r3, [r5, #0]
 801494e:	e7ec      	b.n	801492a <rcl_validate_enclave_name_with_size+0x6e>
 8014950:	2301      	movs	r3, #1
 8014952:	602b      	str	r3, [r5, #0]
 8014954:	e7e9      	b.n	801492a <rcl_validate_enclave_name_with_size+0x6e>
 8014956:	4a04      	ldr	r2, [pc, #16]	@ (8014968 <rcl_validate_enclave_name_with_size+0xac>)
 8014958:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801495c:	a802      	add	r0, sp, #8
 801495e:	f001 fd25 	bl	80163ac <rcutils_snprintf>
 8014962:	f04f 0c01 	mov.w	ip, #1
 8014966:	e7ba      	b.n	80148de <rcl_validate_enclave_name_with_size+0x22>
 8014968:	0801b8f4 	.word	0x0801b8f4

0801496c <rcl_validate_enclave_name>:
 801496c:	b168      	cbz	r0, 801498a <rcl_validate_enclave_name+0x1e>
 801496e:	b570      	push	{r4, r5, r6, lr}
 8014970:	460d      	mov	r5, r1
 8014972:	4616      	mov	r6, r2
 8014974:	4604      	mov	r4, r0
 8014976:	f7eb fc5d 	bl	8000234 <strlen>
 801497a:	4633      	mov	r3, r6
 801497c:	4601      	mov	r1, r0
 801497e:	462a      	mov	r2, r5
 8014980:	4620      	mov	r0, r4
 8014982:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014986:	f7ff bf99 	b.w	80148bc <rcl_validate_enclave_name_with_size>
 801498a:	200b      	movs	r0, #11
 801498c:	4770      	bx	lr
 801498e:	bf00      	nop

08014990 <rcl_get_zero_initialized_wait_set>:
 8014990:	b510      	push	{r4, lr}
 8014992:	4c08      	ldr	r4, [pc, #32]	@ (80149b4 <rcl_get_zero_initialized_wait_set+0x24>)
 8014994:	4686      	mov	lr, r0
 8014996:	4684      	mov	ip, r0
 8014998:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801499a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801499e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80149a0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80149a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80149a6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80149aa:	6823      	ldr	r3, [r4, #0]
 80149ac:	f8cc 3000 	str.w	r3, [ip]
 80149b0:	4670      	mov	r0, lr
 80149b2:	bd10      	pop	{r4, pc}
 80149b4:	0801b954 	.word	0x0801b954

080149b8 <rcl_wait_set_is_valid>:
 80149b8:	b118      	cbz	r0, 80149c2 <rcl_wait_set_is_valid+0xa>
 80149ba:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80149bc:	3800      	subs	r0, #0
 80149be:	bf18      	it	ne
 80149c0:	2001      	movne	r0, #1
 80149c2:	4770      	bx	lr

080149c4 <rcl_wait_set_fini>:
 80149c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149c8:	b082      	sub	sp, #8
 80149ca:	2800      	cmp	r0, #0
 80149cc:	f000 8095 	beq.w	8014afa <rcl_wait_set_fini+0x136>
 80149d0:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 80149d2:	4604      	mov	r4, r0
 80149d4:	2e00      	cmp	r6, #0
 80149d6:	f000 808c 	beq.w	8014af2 <rcl_wait_set_fini+0x12e>
 80149da:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 80149dc:	f002 fd48 	bl	8017470 <rmw_destroy_wait_set>
 80149e0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80149e2:	1e06      	subs	r6, r0, #0
 80149e4:	bf18      	it	ne
 80149e6:	f44f 7661 	movne.w	r6, #900	@ 0x384
 80149ea:	2d00      	cmp	r5, #0
 80149ec:	f000 8081 	beq.w	8014af2 <rcl_wait_set_fini+0x12e>
 80149f0:	6820      	ldr	r0, [r4, #0]
 80149f2:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80149f6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80149f8:	2700      	movs	r7, #0
 80149fa:	6067      	str	r7, [r4, #4]
 80149fc:	602f      	str	r7, [r5, #0]
 80149fe:	b120      	cbz	r0, 8014a0a <rcl_wait_set_fini+0x46>
 8014a00:	9101      	str	r1, [sp, #4]
 8014a02:	47c0      	blx	r8
 8014a04:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014a06:	9901      	ldr	r1, [sp, #4]
 8014a08:	6027      	str	r7, [r4, #0]
 8014a0a:	68a8      	ldr	r0, [r5, #8]
 8014a0c:	b120      	cbz	r0, 8014a18 <rcl_wait_set_fini+0x54>
 8014a0e:	47c0      	blx	r8
 8014a10:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014a12:	2300      	movs	r3, #0
 8014a14:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8014a18:	68a0      	ldr	r0, [r4, #8]
 8014a1a:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8014a1c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014a1e:	f04f 0800 	mov.w	r8, #0
 8014a22:	f8c4 800c 	str.w	r8, [r4, #12]
 8014a26:	f8c5 800c 	str.w	r8, [r5, #12]
 8014a2a:	b128      	cbz	r0, 8014a38 <rcl_wait_set_fini+0x74>
 8014a2c:	47b8      	blx	r7
 8014a2e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014a30:	f8c4 8008 	str.w	r8, [r4, #8]
 8014a34:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8014a36:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014a38:	6968      	ldr	r0, [r5, #20]
 8014a3a:	f04f 0800 	mov.w	r8, #0
 8014a3e:	f8c5 8010 	str.w	r8, [r5, #16]
 8014a42:	b128      	cbz	r0, 8014a50 <rcl_wait_set_fini+0x8c>
 8014a44:	47b8      	blx	r7
 8014a46:	f8c5 8014 	str.w	r8, [r5, #20]
 8014a4a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014a4c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8014a4e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014a50:	6920      	ldr	r0, [r4, #16]
 8014a52:	f04f 0800 	mov.w	r8, #0
 8014a56:	f8c4 8014 	str.w	r8, [r4, #20]
 8014a5a:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 8014a5e:	b128      	cbz	r0, 8014a6c <rcl_wait_set_fini+0xa8>
 8014a60:	47b8      	blx	r7
 8014a62:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014a64:	f8c4 8010 	str.w	r8, [r4, #16]
 8014a68:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8014a6a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014a6c:	69a0      	ldr	r0, [r4, #24]
 8014a6e:	f04f 0800 	mov.w	r8, #0
 8014a72:	f8c4 801c 	str.w	r8, [r4, #28]
 8014a76:	f8c5 8018 	str.w	r8, [r5, #24]
 8014a7a:	b128      	cbz	r0, 8014a88 <rcl_wait_set_fini+0xc4>
 8014a7c:	9101      	str	r1, [sp, #4]
 8014a7e:	47b8      	blx	r7
 8014a80:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014a82:	9901      	ldr	r1, [sp, #4]
 8014a84:	f8c4 8018 	str.w	r8, [r4, #24]
 8014a88:	6a28      	ldr	r0, [r5, #32]
 8014a8a:	b120      	cbz	r0, 8014a96 <rcl_wait_set_fini+0xd2>
 8014a8c:	47b8      	blx	r7
 8014a8e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014a90:	2300      	movs	r3, #0
 8014a92:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8014a96:	6a20      	ldr	r0, [r4, #32]
 8014a98:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8014a9c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014a9e:	2700      	movs	r7, #0
 8014aa0:	6267      	str	r7, [r4, #36]	@ 0x24
 8014aa2:	626f      	str	r7, [r5, #36]	@ 0x24
 8014aa4:	b120      	cbz	r0, 8014ab0 <rcl_wait_set_fini+0xec>
 8014aa6:	9101      	str	r1, [sp, #4]
 8014aa8:	47c0      	blx	r8
 8014aaa:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014aac:	9901      	ldr	r1, [sp, #4]
 8014aae:	6227      	str	r7, [r4, #32]
 8014ab0:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8014ab2:	b120      	cbz	r0, 8014abe <rcl_wait_set_fini+0xfa>
 8014ab4:	47c0      	blx	r8
 8014ab6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014ab8:	2300      	movs	r3, #0
 8014aba:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8014abe:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8014ac0:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8014ac4:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014ac6:	2700      	movs	r7, #0
 8014ac8:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8014aca:	632f      	str	r7, [r5, #48]	@ 0x30
 8014acc:	b120      	cbz	r0, 8014ad8 <rcl_wait_set_fini+0x114>
 8014ace:	9101      	str	r1, [sp, #4]
 8014ad0:	47c0      	blx	r8
 8014ad2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014ad4:	9901      	ldr	r1, [sp, #4]
 8014ad6:	62a7      	str	r7, [r4, #40]	@ 0x28
 8014ad8:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8014ada:	b120      	cbz	r0, 8014ae6 <rcl_wait_set_fini+0x122>
 8014adc:	47c0      	blx	r8
 8014ade:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014ae0:	2300      	movs	r3, #0
 8014ae2:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8014ae6:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8014ae8:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8014aea:	4628      	mov	r0, r5
 8014aec:	4798      	blx	r3
 8014aee:	2300      	movs	r3, #0
 8014af0:	6323      	str	r3, [r4, #48]	@ 0x30
 8014af2:	4630      	mov	r0, r6
 8014af4:	b002      	add	sp, #8
 8014af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014afa:	260b      	movs	r6, #11
 8014afc:	4630      	mov	r0, r6
 8014afe:	b002      	add	sp, #8
 8014b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014b04 <rcl_wait_set_add_subscription>:
 8014b04:	b318      	cbz	r0, 8014b4e <rcl_wait_set_add_subscription+0x4a>
 8014b06:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014b08:	b570      	push	{r4, r5, r6, lr}
 8014b0a:	4604      	mov	r4, r0
 8014b0c:	b30b      	cbz	r3, 8014b52 <rcl_wait_set_add_subscription+0x4e>
 8014b0e:	b319      	cbz	r1, 8014b58 <rcl_wait_set_add_subscription+0x54>
 8014b10:	681d      	ldr	r5, [r3, #0]
 8014b12:	6840      	ldr	r0, [r0, #4]
 8014b14:	4285      	cmp	r5, r0
 8014b16:	d217      	bcs.n	8014b48 <rcl_wait_set_add_subscription+0x44>
 8014b18:	6820      	ldr	r0, [r4, #0]
 8014b1a:	1c6e      	adds	r6, r5, #1
 8014b1c:	601e      	str	r6, [r3, #0]
 8014b1e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8014b22:	b102      	cbz	r2, 8014b26 <rcl_wait_set_add_subscription+0x22>
 8014b24:	6015      	str	r5, [r2, #0]
 8014b26:	4608      	mov	r0, r1
 8014b28:	f7ff fb08 	bl	801413c <rcl_subscription_get_rmw_handle>
 8014b2c:	b150      	cbz	r0, 8014b44 <rcl_wait_set_add_subscription+0x40>
 8014b2e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014b30:	6842      	ldr	r2, [r0, #4]
 8014b32:	689b      	ldr	r3, [r3, #8]
 8014b34:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014b38:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8014b3a:	6853      	ldr	r3, [r2, #4]
 8014b3c:	3301      	adds	r3, #1
 8014b3e:	2000      	movs	r0, #0
 8014b40:	6053      	str	r3, [r2, #4]
 8014b42:	bd70      	pop	{r4, r5, r6, pc}
 8014b44:	2001      	movs	r0, #1
 8014b46:	bd70      	pop	{r4, r5, r6, pc}
 8014b48:	f240 3086 	movw	r0, #902	@ 0x386
 8014b4c:	bd70      	pop	{r4, r5, r6, pc}
 8014b4e:	200b      	movs	r0, #11
 8014b50:	4770      	bx	lr
 8014b52:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014b56:	bd70      	pop	{r4, r5, r6, pc}
 8014b58:	200b      	movs	r0, #11
 8014b5a:	bd70      	pop	{r4, r5, r6, pc}

08014b5c <rcl_wait_set_clear>:
 8014b5c:	2800      	cmp	r0, #0
 8014b5e:	d073      	beq.n	8014c48 <rcl_wait_set_clear+0xec>
 8014b60:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014b62:	b510      	push	{r4, lr}
 8014b64:	4604      	mov	r4, r0
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	d070      	beq.n	8014c4c <rcl_wait_set_clear+0xf0>
 8014b6a:	6800      	ldr	r0, [r0, #0]
 8014b6c:	b138      	cbz	r0, 8014b7e <rcl_wait_set_clear+0x22>
 8014b6e:	6862      	ldr	r2, [r4, #4]
 8014b70:	2100      	movs	r1, #0
 8014b72:	0092      	lsls	r2, r2, #2
 8014b74:	f004 fbcc 	bl	8019310 <memset>
 8014b78:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014b7a:	2200      	movs	r2, #0
 8014b7c:	601a      	str	r2, [r3, #0]
 8014b7e:	68a0      	ldr	r0, [r4, #8]
 8014b80:	b138      	cbz	r0, 8014b92 <rcl_wait_set_clear+0x36>
 8014b82:	68e2      	ldr	r2, [r4, #12]
 8014b84:	2100      	movs	r1, #0
 8014b86:	0092      	lsls	r2, r2, #2
 8014b88:	f004 fbc2 	bl	8019310 <memset>
 8014b8c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014b8e:	2200      	movs	r2, #0
 8014b90:	60da      	str	r2, [r3, #12]
 8014b92:	69a0      	ldr	r0, [r4, #24]
 8014b94:	b138      	cbz	r0, 8014ba6 <rcl_wait_set_clear+0x4a>
 8014b96:	69e2      	ldr	r2, [r4, #28]
 8014b98:	2100      	movs	r1, #0
 8014b9a:	0092      	lsls	r2, r2, #2
 8014b9c:	f004 fbb8 	bl	8019310 <memset>
 8014ba0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014ba2:	2200      	movs	r2, #0
 8014ba4:	619a      	str	r2, [r3, #24]
 8014ba6:	6a20      	ldr	r0, [r4, #32]
 8014ba8:	b138      	cbz	r0, 8014bba <rcl_wait_set_clear+0x5e>
 8014baa:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8014bac:	2100      	movs	r1, #0
 8014bae:	0092      	lsls	r2, r2, #2
 8014bb0:	f004 fbae 	bl	8019310 <memset>
 8014bb4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014bb6:	2200      	movs	r2, #0
 8014bb8:	625a      	str	r2, [r3, #36]	@ 0x24
 8014bba:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8014bbc:	b138      	cbz	r0, 8014bce <rcl_wait_set_clear+0x72>
 8014bbe:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8014bc0:	2100      	movs	r1, #0
 8014bc2:	0092      	lsls	r2, r2, #2
 8014bc4:	f004 fba4 	bl	8019310 <memset>
 8014bc8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014bca:	2200      	movs	r2, #0
 8014bcc:	631a      	str	r2, [r3, #48]	@ 0x30
 8014bce:	6920      	ldr	r0, [r4, #16]
 8014bd0:	b138      	cbz	r0, 8014be2 <rcl_wait_set_clear+0x86>
 8014bd2:	6962      	ldr	r2, [r4, #20]
 8014bd4:	2100      	movs	r1, #0
 8014bd6:	0092      	lsls	r2, r2, #2
 8014bd8:	f004 fb9a 	bl	8019310 <memset>
 8014bdc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014bde:	2200      	movs	r2, #0
 8014be0:	641a      	str	r2, [r3, #64]	@ 0x40
 8014be2:	6898      	ldr	r0, [r3, #8]
 8014be4:	b138      	cbz	r0, 8014bf6 <rcl_wait_set_clear+0x9a>
 8014be6:	685a      	ldr	r2, [r3, #4]
 8014be8:	2100      	movs	r1, #0
 8014bea:	0092      	lsls	r2, r2, #2
 8014bec:	f004 fb90 	bl	8019310 <memset>
 8014bf0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014bf2:	2200      	movs	r2, #0
 8014bf4:	605a      	str	r2, [r3, #4]
 8014bf6:	6958      	ldr	r0, [r3, #20]
 8014bf8:	b138      	cbz	r0, 8014c0a <rcl_wait_set_clear+0xae>
 8014bfa:	691a      	ldr	r2, [r3, #16]
 8014bfc:	2100      	movs	r1, #0
 8014bfe:	0092      	lsls	r2, r2, #2
 8014c00:	f004 fb86 	bl	8019310 <memset>
 8014c04:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014c06:	2200      	movs	r2, #0
 8014c08:	611a      	str	r2, [r3, #16]
 8014c0a:	6a18      	ldr	r0, [r3, #32]
 8014c0c:	b138      	cbz	r0, 8014c1e <rcl_wait_set_clear+0xc2>
 8014c0e:	69da      	ldr	r2, [r3, #28]
 8014c10:	2100      	movs	r1, #0
 8014c12:	0092      	lsls	r2, r2, #2
 8014c14:	f004 fb7c 	bl	8019310 <memset>
 8014c18:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014c1a:	2200      	movs	r2, #0
 8014c1c:	61da      	str	r2, [r3, #28]
 8014c1e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8014c20:	b138      	cbz	r0, 8014c32 <rcl_wait_set_clear+0xd6>
 8014c22:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8014c24:	2100      	movs	r1, #0
 8014c26:	0092      	lsls	r2, r2, #2
 8014c28:	f004 fb72 	bl	8019310 <memset>
 8014c2c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014c2e:	2200      	movs	r2, #0
 8014c30:	629a      	str	r2, [r3, #40]	@ 0x28
 8014c32:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8014c34:	b138      	cbz	r0, 8014c46 <rcl_wait_set_clear+0xea>
 8014c36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014c38:	2100      	movs	r1, #0
 8014c3a:	0092      	lsls	r2, r2, #2
 8014c3c:	f004 fb68 	bl	8019310 <memset>
 8014c40:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014c42:	2000      	movs	r0, #0
 8014c44:	6358      	str	r0, [r3, #52]	@ 0x34
 8014c46:	bd10      	pop	{r4, pc}
 8014c48:	200b      	movs	r0, #11
 8014c4a:	4770      	bx	lr
 8014c4c:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014c50:	bd10      	pop	{r4, pc}
 8014c52:	bf00      	nop

08014c54 <rcl_wait_set_resize>:
 8014c54:	2800      	cmp	r0, #0
 8014c56:	f000 8185 	beq.w	8014f64 <rcl_wait_set_resize+0x310>
 8014c5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c5e:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8014c60:	b083      	sub	sp, #12
 8014c62:	4605      	mov	r5, r0
 8014c64:	2c00      	cmp	r4, #0
 8014c66:	f000 817f 	beq.w	8014f68 <rcl_wait_set_resize+0x314>
 8014c6a:	f04f 0900 	mov.w	r9, #0
 8014c6e:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 8014c72:	461f      	mov	r7, r3
 8014c74:	4688      	mov	r8, r1
 8014c76:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 8014c7a:	4616      	mov	r6, r2
 8014c7c:	f8c0 9004 	str.w	r9, [r0, #4]
 8014c80:	f8c4 9000 	str.w	r9, [r4]
 8014c84:	2900      	cmp	r1, #0
 8014c86:	f000 80bd 	beq.w	8014e04 <rcl_wait_set_resize+0x1b0>
 8014c8a:	008c      	lsls	r4, r1, #2
 8014c8c:	6800      	ldr	r0, [r0, #0]
 8014c8e:	9301      	str	r3, [sp, #4]
 8014c90:	4652      	mov	r2, sl
 8014c92:	4621      	mov	r1, r4
 8014c94:	4798      	blx	r3
 8014c96:	9b01      	ldr	r3, [sp, #4]
 8014c98:	6028      	str	r0, [r5, #0]
 8014c9a:	2800      	cmp	r0, #0
 8014c9c:	f000 80cb 	beq.w	8014e36 <rcl_wait_set_resize+0x1e2>
 8014ca0:	4622      	mov	r2, r4
 8014ca2:	4649      	mov	r1, r9
 8014ca4:	9301      	str	r3, [sp, #4]
 8014ca6:	f004 fb33 	bl	8019310 <memset>
 8014caa:	f8c5 8004 	str.w	r8, [r5, #4]
 8014cae:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 8014cb2:	9b01      	ldr	r3, [sp, #4]
 8014cb4:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8014cb8:	f8c8 9004 	str.w	r9, [r8, #4]
 8014cbc:	4652      	mov	r2, sl
 8014cbe:	4621      	mov	r1, r4
 8014cc0:	4798      	blx	r3
 8014cc2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014cc4:	f8c8 0008 	str.w	r0, [r8, #8]
 8014cc8:	689b      	ldr	r3, [r3, #8]
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	f000 80ac 	beq.w	8014e28 <rcl_wait_set_resize+0x1d4>
 8014cd0:	4622      	mov	r2, r4
 8014cd2:	4649      	mov	r1, r9
 8014cd4:	4618      	mov	r0, r3
 8014cd6:	f004 fb1b 	bl	8019310 <memset>
 8014cda:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014cdc:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014ce0:	f04f 0800 	mov.w	r8, #0
 8014ce4:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8014ce8:	f8c5 800c 	str.w	r8, [r5, #12]
 8014cec:	f8c4 800c 	str.w	r8, [r4, #12]
 8014cf0:	2e00      	cmp	r6, #0
 8014cf2:	f040 80a4 	bne.w	8014e3e <rcl_wait_set_resize+0x1ea>
 8014cf6:	68a8      	ldr	r0, [r5, #8]
 8014cf8:	b128      	cbz	r0, 8014d06 <rcl_wait_set_resize+0xb2>
 8014cfa:	4649      	mov	r1, r9
 8014cfc:	4790      	blx	r2
 8014cfe:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014d00:	60ae      	str	r6, [r5, #8]
 8014d02:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014d06:	f04f 0800 	mov.w	r8, #0
 8014d0a:	19f6      	adds	r6, r6, r7
 8014d0c:	f8c4 8010 	str.w	r8, [r4, #16]
 8014d10:	f040 80ac 	bne.w	8014e6c <rcl_wait_set_resize+0x218>
 8014d14:	6960      	ldr	r0, [r4, #20]
 8014d16:	b130      	cbz	r0, 8014d26 <rcl_wait_set_resize+0xd2>
 8014d18:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8014d1a:	4649      	mov	r1, r9
 8014d1c:	4798      	blx	r3
 8014d1e:	6166      	str	r6, [r4, #20]
 8014d20:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014d22:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014d26:	2600      	movs	r6, #0
 8014d28:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8014d2c:	616e      	str	r6, [r5, #20]
 8014d2e:	6426      	str	r6, [r4, #64]	@ 0x40
 8014d30:	2f00      	cmp	r7, #0
 8014d32:	f040 80ad 	bne.w	8014e90 <rcl_wait_set_resize+0x23c>
 8014d36:	6928      	ldr	r0, [r5, #16]
 8014d38:	b138      	cbz	r0, 8014d4a <rcl_wait_set_resize+0xf6>
 8014d3a:	4649      	mov	r1, r9
 8014d3c:	47d0      	blx	sl
 8014d3e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014d40:	612f      	str	r7, [r5, #16]
 8014d42:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8014d46:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014d4a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014d4c:	2600      	movs	r6, #0
 8014d4e:	61ee      	str	r6, [r5, #28]
 8014d50:	61a6      	str	r6, [r4, #24]
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	f040 80af 	bne.w	8014eb6 <rcl_wait_set_resize+0x262>
 8014d58:	69a8      	ldr	r0, [r5, #24]
 8014d5a:	b120      	cbz	r0, 8014d66 <rcl_wait_set_resize+0x112>
 8014d5c:	4649      	mov	r1, r9
 8014d5e:	47d0      	blx	sl
 8014d60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014d62:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014d64:	61ab      	str	r3, [r5, #24]
 8014d66:	6a20      	ldr	r0, [r4, #32]
 8014d68:	b128      	cbz	r0, 8014d76 <rcl_wait_set_resize+0x122>
 8014d6a:	4649      	mov	r1, r9
 8014d6c:	47d0      	blx	sl
 8014d6e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014d70:	2300      	movs	r3, #0
 8014d72:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8014d76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014d78:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8014d7a:	2600      	movs	r6, #0
 8014d7c:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8014d80:	626e      	str	r6, [r5, #36]	@ 0x24
 8014d82:	6266      	str	r6, [r4, #36]	@ 0x24
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	f000 80b6 	beq.w	8014ef6 <rcl_wait_set_resize+0x2a2>
 8014d8a:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8014d8e:	6a28      	ldr	r0, [r5, #32]
 8014d90:	463a      	mov	r2, r7
 8014d92:	4651      	mov	r1, sl
 8014d94:	47c8      	blx	r9
 8014d96:	6228      	str	r0, [r5, #32]
 8014d98:	2800      	cmp	r0, #0
 8014d9a:	d04c      	beq.n	8014e36 <rcl_wait_set_resize+0x1e2>
 8014d9c:	4652      	mov	r2, sl
 8014d9e:	4631      	mov	r1, r6
 8014da0:	f004 fab6 	bl	8019310 <memset>
 8014da4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014da6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014da8:	626b      	str	r3, [r5, #36]	@ 0x24
 8014daa:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8014dac:	62a6      	str	r6, [r4, #40]	@ 0x28
 8014dae:	463a      	mov	r2, r7
 8014db0:	4651      	mov	r1, sl
 8014db2:	47c8      	blx	r9
 8014db4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014db6:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8014db8:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8014dba:	2c00      	cmp	r4, #0
 8014dbc:	f000 80f0 	beq.w	8014fa0 <rcl_wait_set_resize+0x34c>
 8014dc0:	4620      	mov	r0, r4
 8014dc2:	4652      	mov	r2, sl
 8014dc4:	4631      	mov	r1, r6
 8014dc6:	f004 faa3 	bl	8019310 <memset>
 8014dca:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014dcc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014dce:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8014dd0:	2600      	movs	r6, #0
 8014dd2:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8014dd6:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8014dd8:	6326      	str	r6, [r4, #48]	@ 0x30
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	f040 809d 	bne.w	8014f1a <rcl_wait_set_resize+0x2c6>
 8014de0:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8014de2:	b120      	cbz	r0, 8014dee <rcl_wait_set_resize+0x19a>
 8014de4:	4639      	mov	r1, r7
 8014de6:	47c0      	blx	r8
 8014de8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014dea:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014dec:	62ab      	str	r3, [r5, #40]	@ 0x28
 8014dee:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014df0:	b310      	cbz	r0, 8014e38 <rcl_wait_set_resize+0x1e4>
 8014df2:	4639      	mov	r1, r7
 8014df4:	47c0      	blx	r8
 8014df6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014df8:	2000      	movs	r0, #0
 8014dfa:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 8014dfe:	b003      	add	sp, #12
 8014e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e04:	6800      	ldr	r0, [r0, #0]
 8014e06:	b120      	cbz	r0, 8014e12 <rcl_wait_set_resize+0x1be>
 8014e08:	4651      	mov	r1, sl
 8014e0a:	47d8      	blx	fp
 8014e0c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014e0e:	f8c5 8000 	str.w	r8, [r5]
 8014e12:	68a0      	ldr	r0, [r4, #8]
 8014e14:	2800      	cmp	r0, #0
 8014e16:	f43f af61 	beq.w	8014cdc <rcl_wait_set_resize+0x88>
 8014e1a:	4651      	mov	r1, sl
 8014e1c:	47d8      	blx	fp
 8014e1e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014e20:	2300      	movs	r3, #0
 8014e22:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8014e26:	e759      	b.n	8014cdc <rcl_wait_set_resize+0x88>
 8014e28:	6828      	ldr	r0, [r5, #0]
 8014e2a:	9301      	str	r3, [sp, #4]
 8014e2c:	4651      	mov	r1, sl
 8014e2e:	47d8      	blx	fp
 8014e30:	9b01      	ldr	r3, [sp, #4]
 8014e32:	e9c5 3300 	strd	r3, r3, [r5]
 8014e36:	200a      	movs	r0, #10
 8014e38:	b003      	add	sp, #12
 8014e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e3e:	00b4      	lsls	r4, r6, #2
 8014e40:	68a8      	ldr	r0, [r5, #8]
 8014e42:	464a      	mov	r2, r9
 8014e44:	4621      	mov	r1, r4
 8014e46:	4798      	blx	r3
 8014e48:	60a8      	str	r0, [r5, #8]
 8014e4a:	2800      	cmp	r0, #0
 8014e4c:	d0f3      	beq.n	8014e36 <rcl_wait_set_resize+0x1e2>
 8014e4e:	4622      	mov	r2, r4
 8014e50:	4641      	mov	r1, r8
 8014e52:	f004 fa5d 	bl	8019310 <memset>
 8014e56:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014e58:	60ee      	str	r6, [r5, #12]
 8014e5a:	f04f 0800 	mov.w	r8, #0
 8014e5e:	19f6      	adds	r6, r6, r7
 8014e60:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014e64:	f8c4 8010 	str.w	r8, [r4, #16]
 8014e68:	f43f af54 	beq.w	8014d14 <rcl_wait_set_resize+0xc0>
 8014e6c:	00b6      	lsls	r6, r6, #2
 8014e6e:	464a      	mov	r2, r9
 8014e70:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8014e72:	6960      	ldr	r0, [r4, #20]
 8014e74:	4631      	mov	r1, r6
 8014e76:	4798      	blx	r3
 8014e78:	4681      	mov	r9, r0
 8014e7a:	6160      	str	r0, [r4, #20]
 8014e7c:	2800      	cmp	r0, #0
 8014e7e:	d076      	beq.n	8014f6e <rcl_wait_set_resize+0x31a>
 8014e80:	4632      	mov	r2, r6
 8014e82:	4641      	mov	r1, r8
 8014e84:	f004 fa44 	bl	8019310 <memset>
 8014e88:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014e8a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014e8e:	e74a      	b.n	8014d26 <rcl_wait_set_resize+0xd2>
 8014e90:	00bc      	lsls	r4, r7, #2
 8014e92:	6928      	ldr	r0, [r5, #16]
 8014e94:	464a      	mov	r2, r9
 8014e96:	4621      	mov	r1, r4
 8014e98:	47c0      	blx	r8
 8014e9a:	6128      	str	r0, [r5, #16]
 8014e9c:	2800      	cmp	r0, #0
 8014e9e:	d0ca      	beq.n	8014e36 <rcl_wait_set_resize+0x1e2>
 8014ea0:	4622      	mov	r2, r4
 8014ea2:	4631      	mov	r1, r6
 8014ea4:	f004 fa34 	bl	8019310 <memset>
 8014ea8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014eaa:	616f      	str	r7, [r5, #20]
 8014eac:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8014eb0:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8014eb4:	e749      	b.n	8014d4a <rcl_wait_set_resize+0xf6>
 8014eb6:	009c      	lsls	r4, r3, #2
 8014eb8:	69a8      	ldr	r0, [r5, #24]
 8014eba:	464a      	mov	r2, r9
 8014ebc:	4621      	mov	r1, r4
 8014ebe:	47c0      	blx	r8
 8014ec0:	61a8      	str	r0, [r5, #24]
 8014ec2:	2800      	cmp	r0, #0
 8014ec4:	d0b7      	beq.n	8014e36 <rcl_wait_set_resize+0x1e2>
 8014ec6:	4622      	mov	r2, r4
 8014ec8:	4631      	mov	r1, r6
 8014eca:	f004 fa21 	bl	8019310 <memset>
 8014ece:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8014ed0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014ed2:	61eb      	str	r3, [r5, #28]
 8014ed4:	6a38      	ldr	r0, [r7, #32]
 8014ed6:	61fe      	str	r6, [r7, #28]
 8014ed8:	464a      	mov	r2, r9
 8014eda:	4621      	mov	r1, r4
 8014edc:	47c0      	blx	r8
 8014ede:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014ee0:	6238      	str	r0, [r7, #32]
 8014ee2:	6a1f      	ldr	r7, [r3, #32]
 8014ee4:	2f00      	cmp	r7, #0
 8014ee6:	d054      	beq.n	8014f92 <rcl_wait_set_resize+0x33e>
 8014ee8:	4622      	mov	r2, r4
 8014eea:	4631      	mov	r1, r6
 8014eec:	4638      	mov	r0, r7
 8014eee:	f004 fa0f 	bl	8019310 <memset>
 8014ef2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014ef4:	e73f      	b.n	8014d76 <rcl_wait_set_resize+0x122>
 8014ef6:	6a28      	ldr	r0, [r5, #32]
 8014ef8:	b120      	cbz	r0, 8014f04 <rcl_wait_set_resize+0x2b0>
 8014efa:	4639      	mov	r1, r7
 8014efc:	47c0      	blx	r8
 8014efe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014f00:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014f02:	622b      	str	r3, [r5, #32]
 8014f04:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8014f06:	2800      	cmp	r0, #0
 8014f08:	f43f af60 	beq.w	8014dcc <rcl_wait_set_resize+0x178>
 8014f0c:	4639      	mov	r1, r7
 8014f0e:	47c0      	blx	r8
 8014f10:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8014f12:	2300      	movs	r3, #0
 8014f14:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8014f18:	e758      	b.n	8014dcc <rcl_wait_set_resize+0x178>
 8014f1a:	009c      	lsls	r4, r3, #2
 8014f1c:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8014f1e:	463a      	mov	r2, r7
 8014f20:	4621      	mov	r1, r4
 8014f22:	47c8      	blx	r9
 8014f24:	62a8      	str	r0, [r5, #40]	@ 0x28
 8014f26:	2800      	cmp	r0, #0
 8014f28:	d085      	beq.n	8014e36 <rcl_wait_set_resize+0x1e2>
 8014f2a:	4622      	mov	r2, r4
 8014f2c:	4631      	mov	r1, r6
 8014f2e:	f004 f9ef 	bl	8019310 <memset>
 8014f32:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8014f36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014f38:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8014f3a:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8014f3e:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 8014f42:	463a      	mov	r2, r7
 8014f44:	4621      	mov	r1, r4
 8014f46:	47c8      	blx	r9
 8014f48:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014f4a:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8014f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014f50:	b36b      	cbz	r3, 8014fae <rcl_wait_set_resize+0x35a>
 8014f52:	4622      	mov	r2, r4
 8014f54:	4631      	mov	r1, r6
 8014f56:	4618      	mov	r0, r3
 8014f58:	f004 f9da 	bl	8019310 <memset>
 8014f5c:	4630      	mov	r0, r6
 8014f5e:	b003      	add	sp, #12
 8014f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f64:	200b      	movs	r0, #11
 8014f66:	4770      	bx	lr
 8014f68:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014f6c:	e764      	b.n	8014e38 <rcl_wait_set_resize+0x1e4>
 8014f6e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014f70:	68a8      	ldr	r0, [r5, #8]
 8014f72:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8014f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014f76:	4798      	blx	r3
 8014f78:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014f7a:	6928      	ldr	r0, [r5, #16]
 8014f7c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014f7e:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8014f80:	f8c5 900c 	str.w	r9, [r5, #12]
 8014f84:	f8c5 9008 	str.w	r9, [r5, #8]
 8014f88:	4790      	blx	r2
 8014f8a:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8014f8e:	200a      	movs	r0, #10
 8014f90:	e752      	b.n	8014e38 <rcl_wait_set_resize+0x1e4>
 8014f92:	69a8      	ldr	r0, [r5, #24]
 8014f94:	4649      	mov	r1, r9
 8014f96:	47d0      	blx	sl
 8014f98:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8014f9c:	200a      	movs	r0, #10
 8014f9e:	e74b      	b.n	8014e38 <rcl_wait_set_resize+0x1e4>
 8014fa0:	6a28      	ldr	r0, [r5, #32]
 8014fa2:	4639      	mov	r1, r7
 8014fa4:	47c0      	blx	r8
 8014fa6:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8014faa:	200a      	movs	r0, #10
 8014fac:	e744      	b.n	8014e38 <rcl_wait_set_resize+0x1e4>
 8014fae:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8014fb0:	9301      	str	r3, [sp, #4]
 8014fb2:	4639      	mov	r1, r7
 8014fb4:	47c0      	blx	r8
 8014fb6:	9b01      	ldr	r3, [sp, #4]
 8014fb8:	200a      	movs	r0, #10
 8014fba:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8014fbe:	e73b      	b.n	8014e38 <rcl_wait_set_resize+0x1e4>

08014fc0 <rcl_wait_set_init>:
 8014fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014fc4:	b084      	sub	sp, #16
 8014fc6:	4604      	mov	r4, r0
 8014fc8:	a810      	add	r0, sp, #64	@ 0x40
 8014fca:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 8014fce:	460f      	mov	r7, r1
 8014fd0:	4690      	mov	r8, r2
 8014fd2:	4699      	mov	r9, r3
 8014fd4:	f7f8 fa72 	bl	800d4bc <rcutils_allocator_is_valid>
 8014fd8:	2800      	cmp	r0, #0
 8014fda:	d06b      	beq.n	80150b4 <rcl_wait_set_init+0xf4>
 8014fdc:	2c00      	cmp	r4, #0
 8014fde:	d069      	beq.n	80150b4 <rcl_wait_set_init+0xf4>
 8014fe0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014fe2:	b125      	cbz	r5, 8014fee <rcl_wait_set_init+0x2e>
 8014fe4:	2564      	movs	r5, #100	@ 0x64
 8014fe6:	4628      	mov	r0, r5
 8014fe8:	b004      	add	sp, #16
 8014fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014fee:	f1ba 0f00 	cmp.w	sl, #0
 8014ff2:	d05f      	beq.n	80150b4 <rcl_wait_set_init+0xf4>
 8014ff4:	4650      	mov	r0, sl
 8014ff6:	f7fe fa5b 	bl	80134b0 <rcl_context_is_valid>
 8014ffa:	2800      	cmp	r0, #0
 8014ffc:	d067      	beq.n	80150ce <rcl_wait_set_init+0x10e>
 8014ffe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015000:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8015002:	205c      	movs	r0, #92	@ 0x5c
 8015004:	4798      	blx	r3
 8015006:	6320      	str	r0, [r4, #48]	@ 0x30
 8015008:	2800      	cmp	r0, #0
 801500a:	d062      	beq.n	80150d2 <rcl_wait_set_init+0x112>
 801500c:	4629      	mov	r1, r5
 801500e:	225c      	movs	r2, #92	@ 0x5c
 8015010:	f004 f97e 	bl	8019310 <memset>
 8015014:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8015018:	eb03 0e02 	add.w	lr, r3, r2
 801501c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801501e:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8015020:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8015024:	449e      	add	lr, r3
 8015026:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801502a:	e9c6 5501 	strd	r5, r5, [r6, #4]
 801502e:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8015032:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8015036:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 801503a:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 801503e:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 8015042:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 8015046:	f8da a000 	ldr.w	sl, [sl]
 801504a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801504c:	44c6      	add	lr, r8
 801504e:	f8dc 3000 	ldr.w	r3, [ip]
 8015052:	602b      	str	r3, [r5, #0]
 8015054:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8015058:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 801505c:	f002 f9fe 	bl	801745c <rmw_create_wait_set>
 8015060:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015062:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8015064:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8015066:	b350      	cbz	r0, 80150be <rcl_wait_set_init+0xfe>
 8015068:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801506a:	9302      	str	r3, [sp, #8]
 801506c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801506e:	9301      	str	r3, [sp, #4]
 8015070:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015072:	9300      	str	r3, [sp, #0]
 8015074:	4642      	mov	r2, r8
 8015076:	464b      	mov	r3, r9
 8015078:	4639      	mov	r1, r7
 801507a:	4620      	mov	r0, r4
 801507c:	f7ff fdea 	bl	8014c54 <rcl_wait_set_resize>
 8015080:	4605      	mov	r5, r0
 8015082:	2800      	cmp	r0, #0
 8015084:	d0af      	beq.n	8014fe6 <rcl_wait_set_init+0x26>
 8015086:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015088:	bb2b      	cbnz	r3, 80150d6 <rcl_wait_set_init+0x116>
 801508a:	2600      	movs	r6, #0
 801508c:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8015090:	9600      	str	r6, [sp, #0]
 8015092:	4633      	mov	r3, r6
 8015094:	4632      	mov	r2, r6
 8015096:	4631      	mov	r1, r6
 8015098:	4620      	mov	r0, r4
 801509a:	f7ff fddb 	bl	8014c54 <rcl_wait_set_resize>
 801509e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80150a0:	2800      	cmp	r0, #0
 80150a2:	d0a0      	beq.n	8014fe6 <rcl_wait_set_init+0x26>
 80150a4:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80150a6:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 80150a8:	4798      	blx	r3
 80150aa:	4628      	mov	r0, r5
 80150ac:	6326      	str	r6, [r4, #48]	@ 0x30
 80150ae:	b004      	add	sp, #16
 80150b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80150b4:	250b      	movs	r5, #11
 80150b6:	4628      	mov	r0, r5
 80150b8:	b004      	add	sp, #16
 80150ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80150be:	2501      	movs	r5, #1
 80150c0:	f002 f9d6 	bl	8017470 <rmw_destroy_wait_set>
 80150c4:	2800      	cmp	r0, #0
 80150c6:	bf18      	it	ne
 80150c8:	f44f 7561 	movne.w	r5, #900	@ 0x384
 80150cc:	e7dd      	b.n	801508a <rcl_wait_set_init+0xca>
 80150ce:	2565      	movs	r5, #101	@ 0x65
 80150d0:	e789      	b.n	8014fe6 <rcl_wait_set_init+0x26>
 80150d2:	250a      	movs	r5, #10
 80150d4:	e787      	b.n	8014fe6 <rcl_wait_set_init+0x26>
 80150d6:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80150d8:	e7f2      	b.n	80150c0 <rcl_wait_set_init+0x100>
 80150da:	bf00      	nop

080150dc <rcl_wait_set_add_guard_condition>:
 80150dc:	b318      	cbz	r0, 8015126 <rcl_wait_set_add_guard_condition+0x4a>
 80150de:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80150e0:	b570      	push	{r4, r5, r6, lr}
 80150e2:	4604      	mov	r4, r0
 80150e4:	b30b      	cbz	r3, 801512a <rcl_wait_set_add_guard_condition+0x4e>
 80150e6:	b319      	cbz	r1, 8015130 <rcl_wait_set_add_guard_condition+0x54>
 80150e8:	68dd      	ldr	r5, [r3, #12]
 80150ea:	68c0      	ldr	r0, [r0, #12]
 80150ec:	4285      	cmp	r5, r0
 80150ee:	d217      	bcs.n	8015120 <rcl_wait_set_add_guard_condition+0x44>
 80150f0:	68a0      	ldr	r0, [r4, #8]
 80150f2:	1c6e      	adds	r6, r5, #1
 80150f4:	60de      	str	r6, [r3, #12]
 80150f6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80150fa:	b102      	cbz	r2, 80150fe <rcl_wait_set_add_guard_condition+0x22>
 80150fc:	6015      	str	r5, [r2, #0]
 80150fe:	4608      	mov	r0, r1
 8015100:	f003 faae 	bl	8018660 <rcl_guard_condition_get_rmw_handle>
 8015104:	b150      	cbz	r0, 801511c <rcl_wait_set_add_guard_condition+0x40>
 8015106:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015108:	6842      	ldr	r2, [r0, #4]
 801510a:	695b      	ldr	r3, [r3, #20]
 801510c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015110:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015112:	6913      	ldr	r3, [r2, #16]
 8015114:	3301      	adds	r3, #1
 8015116:	2000      	movs	r0, #0
 8015118:	6113      	str	r3, [r2, #16]
 801511a:	bd70      	pop	{r4, r5, r6, pc}
 801511c:	2001      	movs	r0, #1
 801511e:	bd70      	pop	{r4, r5, r6, pc}
 8015120:	f240 3086 	movw	r0, #902	@ 0x386
 8015124:	bd70      	pop	{r4, r5, r6, pc}
 8015126:	200b      	movs	r0, #11
 8015128:	4770      	bx	lr
 801512a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801512e:	bd70      	pop	{r4, r5, r6, pc}
 8015130:	200b      	movs	r0, #11
 8015132:	bd70      	pop	{r4, r5, r6, pc}

08015134 <rcl_wait_set_add_timer>:
 8015134:	b328      	cbz	r0, 8015182 <rcl_wait_set_add_timer+0x4e>
 8015136:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015138:	b570      	push	{r4, r5, r6, lr}
 801513a:	4604      	mov	r4, r0
 801513c:	b31b      	cbz	r3, 8015186 <rcl_wait_set_add_timer+0x52>
 801513e:	b329      	cbz	r1, 801518c <rcl_wait_set_add_timer+0x58>
 8015140:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8015142:	6965      	ldr	r5, [r4, #20]
 8015144:	42a8      	cmp	r0, r5
 8015146:	d219      	bcs.n	801517c <rcl_wait_set_add_timer+0x48>
 8015148:	6925      	ldr	r5, [r4, #16]
 801514a:	1c46      	adds	r6, r0, #1
 801514c:	641e      	str	r6, [r3, #64]	@ 0x40
 801514e:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8015152:	b102      	cbz	r2, 8015156 <rcl_wait_set_add_timer+0x22>
 8015154:	6010      	str	r0, [r2, #0]
 8015156:	4608      	mov	r0, r1
 8015158:	f7ff fba6 	bl	80148a8 <rcl_timer_get_guard_condition>
 801515c:	b168      	cbz	r0, 801517a <rcl_wait_set_add_timer+0x46>
 801515e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015160:	68e3      	ldr	r3, [r4, #12]
 8015162:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8015164:	3b01      	subs	r3, #1
 8015166:	441d      	add	r5, r3
 8015168:	f003 fa7a 	bl	8018660 <rcl_guard_condition_get_rmw_handle>
 801516c:	b180      	cbz	r0, 8015190 <rcl_wait_set_add_timer+0x5c>
 801516e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015170:	6842      	ldr	r2, [r0, #4]
 8015172:	695b      	ldr	r3, [r3, #20]
 8015174:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015178:	2000      	movs	r0, #0
 801517a:	bd70      	pop	{r4, r5, r6, pc}
 801517c:	f240 3086 	movw	r0, #902	@ 0x386
 8015180:	bd70      	pop	{r4, r5, r6, pc}
 8015182:	200b      	movs	r0, #11
 8015184:	4770      	bx	lr
 8015186:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801518a:	bd70      	pop	{r4, r5, r6, pc}
 801518c:	200b      	movs	r0, #11
 801518e:	bd70      	pop	{r4, r5, r6, pc}
 8015190:	2001      	movs	r0, #1
 8015192:	bd70      	pop	{r4, r5, r6, pc}

08015194 <rcl_wait_set_add_client>:
 8015194:	b318      	cbz	r0, 80151de <rcl_wait_set_add_client+0x4a>
 8015196:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015198:	b570      	push	{r4, r5, r6, lr}
 801519a:	4604      	mov	r4, r0
 801519c:	b30b      	cbz	r3, 80151e2 <rcl_wait_set_add_client+0x4e>
 801519e:	b319      	cbz	r1, 80151e8 <rcl_wait_set_add_client+0x54>
 80151a0:	699d      	ldr	r5, [r3, #24]
 80151a2:	69c0      	ldr	r0, [r0, #28]
 80151a4:	4285      	cmp	r5, r0
 80151a6:	d217      	bcs.n	80151d8 <rcl_wait_set_add_client+0x44>
 80151a8:	69a0      	ldr	r0, [r4, #24]
 80151aa:	1c6e      	adds	r6, r5, #1
 80151ac:	619e      	str	r6, [r3, #24]
 80151ae:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80151b2:	b102      	cbz	r2, 80151b6 <rcl_wait_set_add_client+0x22>
 80151b4:	6015      	str	r5, [r2, #0]
 80151b6:	4608      	mov	r0, r1
 80151b8:	f7fe f8ce 	bl	8013358 <rcl_client_get_rmw_handle>
 80151bc:	b150      	cbz	r0, 80151d4 <rcl_wait_set_add_client+0x40>
 80151be:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80151c0:	6842      	ldr	r2, [r0, #4]
 80151c2:	6a1b      	ldr	r3, [r3, #32]
 80151c4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80151c8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80151ca:	69d3      	ldr	r3, [r2, #28]
 80151cc:	3301      	adds	r3, #1
 80151ce:	2000      	movs	r0, #0
 80151d0:	61d3      	str	r3, [r2, #28]
 80151d2:	bd70      	pop	{r4, r5, r6, pc}
 80151d4:	2001      	movs	r0, #1
 80151d6:	bd70      	pop	{r4, r5, r6, pc}
 80151d8:	f240 3086 	movw	r0, #902	@ 0x386
 80151dc:	bd70      	pop	{r4, r5, r6, pc}
 80151de:	200b      	movs	r0, #11
 80151e0:	4770      	bx	lr
 80151e2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80151e6:	bd70      	pop	{r4, r5, r6, pc}
 80151e8:	200b      	movs	r0, #11
 80151ea:	bd70      	pop	{r4, r5, r6, pc}

080151ec <rcl_wait_set_add_service>:
 80151ec:	b318      	cbz	r0, 8015236 <rcl_wait_set_add_service+0x4a>
 80151ee:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80151f0:	b570      	push	{r4, r5, r6, lr}
 80151f2:	4604      	mov	r4, r0
 80151f4:	b30b      	cbz	r3, 801523a <rcl_wait_set_add_service+0x4e>
 80151f6:	b319      	cbz	r1, 8015240 <rcl_wait_set_add_service+0x54>
 80151f8:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 80151fa:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80151fc:	4285      	cmp	r5, r0
 80151fe:	d217      	bcs.n	8015230 <rcl_wait_set_add_service+0x44>
 8015200:	6a20      	ldr	r0, [r4, #32]
 8015202:	1c6e      	adds	r6, r5, #1
 8015204:	625e      	str	r6, [r3, #36]	@ 0x24
 8015206:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801520a:	b102      	cbz	r2, 801520e <rcl_wait_set_add_service+0x22>
 801520c:	6015      	str	r5, [r2, #0]
 801520e:	4608      	mov	r0, r1
 8015210:	f7fe fed4 	bl	8013fbc <rcl_service_get_rmw_handle>
 8015214:	b150      	cbz	r0, 801522c <rcl_wait_set_add_service+0x40>
 8015216:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015218:	6842      	ldr	r2, [r0, #4]
 801521a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801521c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015220:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015222:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8015224:	3301      	adds	r3, #1
 8015226:	2000      	movs	r0, #0
 8015228:	6293      	str	r3, [r2, #40]	@ 0x28
 801522a:	bd70      	pop	{r4, r5, r6, pc}
 801522c:	2001      	movs	r0, #1
 801522e:	bd70      	pop	{r4, r5, r6, pc}
 8015230:	f240 3086 	movw	r0, #902	@ 0x386
 8015234:	bd70      	pop	{r4, r5, r6, pc}
 8015236:	200b      	movs	r0, #11
 8015238:	4770      	bx	lr
 801523a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801523e:	bd70      	pop	{r4, r5, r6, pc}
 8015240:	200b      	movs	r0, #11
 8015242:	bd70      	pop	{r4, r5, r6, pc}
 8015244:	0000      	movs	r0, r0
	...

08015248 <rcl_wait>:
 8015248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801524c:	ed2d 8b02 	vpush	{d8}
 8015250:	b08d      	sub	sp, #52	@ 0x34
 8015252:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015256:	2800      	cmp	r0, #0
 8015258:	f000 8143 	beq.w	80154e2 <rcl_wait+0x29a>
 801525c:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801525e:	4605      	mov	r5, r0
 8015260:	2e00      	cmp	r6, #0
 8015262:	f000 8112 	beq.w	801548a <rcl_wait+0x242>
 8015266:	6843      	ldr	r3, [r0, #4]
 8015268:	b983      	cbnz	r3, 801528c <rcl_wait+0x44>
 801526a:	68eb      	ldr	r3, [r5, #12]
 801526c:	b973      	cbnz	r3, 801528c <rcl_wait+0x44>
 801526e:	696b      	ldr	r3, [r5, #20]
 8015270:	b963      	cbnz	r3, 801528c <rcl_wait+0x44>
 8015272:	69eb      	ldr	r3, [r5, #28]
 8015274:	b953      	cbnz	r3, 801528c <rcl_wait+0x44>
 8015276:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8015278:	b943      	cbnz	r3, 801528c <rcl_wait+0x44>
 801527a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 801527c:	b933      	cbnz	r3, 801528c <rcl_wait+0x44>
 801527e:	f240 3085 	movw	r0, #901	@ 0x385
 8015282:	b00d      	add	sp, #52	@ 0x34
 8015284:	ecbd 8b02 	vpop	{d8}
 8015288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801528c:	9b04      	ldr	r3, [sp, #16]
 801528e:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8015290:	2b01      	cmp	r3, #1
 8015292:	9b05      	ldr	r3, [sp, #20]
 8015294:	f173 0300 	sbcs.w	r3, r3, #0
 8015298:	f2c0 80f0 	blt.w	801547c <rcl_wait+0x234>
 801529c:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 80152a0:	4643      	mov	r3, r8
 80152a2:	2a00      	cmp	r2, #0
 80152a4:	f000 8133 	beq.w	801550e <rcl_wait+0x2c6>
 80152a8:	2400      	movs	r4, #0
 80152aa:	4613      	mov	r3, r2
 80152ac:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8015520 <rcl_wait+0x2d8>
 80152b0:	46a2      	mov	sl, r4
 80152b2:	46a3      	mov	fp, r4
 80152b4:	f240 3921 	movw	r9, #801	@ 0x321
 80152b8:	4632      	mov	r2, r6
 80152ba:	e014      	b.n	80152e6 <rcl_wait+0x9e>
 80152bc:	2800      	cmp	r0, #0
 80152be:	d1e0      	bne.n	8015282 <rcl_wait+0x3a>
 80152c0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80152c4:	4542      	cmp	r2, r8
 80152c6:	eb73 0107 	sbcs.w	r1, r3, r7
 80152ca:	da03      	bge.n	80152d4 <rcl_wait+0x8c>
 80152cc:	4690      	mov	r8, r2
 80152ce:	461f      	mov	r7, r3
 80152d0:	f04f 0b01 	mov.w	fp, #1
 80152d4:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 80152d6:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80152d8:	3401      	adds	r4, #1
 80152da:	f14a 0a00 	adc.w	sl, sl, #0
 80152de:	429c      	cmp	r4, r3
 80152e0:	f17a 0100 	sbcs.w	r1, sl, #0
 80152e4:	d228      	bcs.n	8015338 <rcl_wait+0xf0>
 80152e6:	6928      	ldr	r0, [r5, #16]
 80152e8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80152ec:	a908      	add	r1, sp, #32
 80152ee:	00a6      	lsls	r6, r4, #2
 80152f0:	2800      	cmp	r0, #0
 80152f2:	d0f1      	beq.n	80152d8 <rcl_wait+0x90>
 80152f4:	68eb      	ldr	r3, [r5, #12]
 80152f6:	f8d2 c014 	ldr.w	ip, [r2, #20]
 80152fa:	4423      	add	r3, r4
 80152fc:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8015300:	f1be 0f00 	cmp.w	lr, #0
 8015304:	d006      	beq.n	8015314 <rcl_wait+0xcc>
 8015306:	6913      	ldr	r3, [r2, #16]
 8015308:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 801530c:	3301      	adds	r3, #1
 801530e:	6113      	str	r3, [r2, #16]
 8015310:	692b      	ldr	r3, [r5, #16]
 8015312:	5998      	ldr	r0, [r3, r6]
 8015314:	ed8d 8b08 	vstr	d8, [sp, #32]
 8015318:	f7ff fa94 	bl	8014844 <rcl_timer_get_time_until_next_call>
 801531c:	4548      	cmp	r0, r9
 801531e:	d1cd      	bne.n	80152bc <rcl_wait+0x74>
 8015320:	692b      	ldr	r3, [r5, #16]
 8015322:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8015324:	2100      	movs	r1, #0
 8015326:	5199      	str	r1, [r3, r6]
 8015328:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801532a:	3401      	adds	r4, #1
 801532c:	f14a 0a00 	adc.w	sl, sl, #0
 8015330:	429c      	cmp	r4, r3
 8015332:	f17a 0100 	sbcs.w	r1, sl, #0
 8015336:	d3d6      	bcc.n	80152e6 <rcl_wait+0x9e>
 8015338:	4616      	mov	r6, r2
 801533a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801533e:	4313      	orrs	r3, r2
 8015340:	46d9      	mov	r9, fp
 8015342:	f040 80a9 	bne.w	8015498 <rcl_wait+0x250>
 8015346:	2300      	movs	r3, #0
 8015348:	2200      	movs	r2, #0
 801534a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801534e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8015352:	ab08      	add	r3, sp, #32
 8015354:	9302      	str	r3, [sp, #8]
 8015356:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8015358:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 801535c:	e9cd 3200 	strd	r3, r2, [sp]
 8015360:	f106 0110 	add.w	r1, r6, #16
 8015364:	f106 031c 	add.w	r3, r6, #28
 8015368:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 801536c:	1d30      	adds	r0, r6, #4
 801536e:	f001 fefd 	bl	801716c <rmw_wait>
 8015372:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015374:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8015376:	4680      	mov	r8, r0
 8015378:	b1ca      	cbz	r2, 80153ae <rcl_wait+0x166>
 801537a:	2400      	movs	r4, #0
 801537c:	4627      	mov	r7, r4
 801537e:	692a      	ldr	r2, [r5, #16]
 8015380:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8015384:	f10d 011f 	add.w	r1, sp, #31
 8015388:	00a6      	lsls	r6, r4, #2
 801538a:	b160      	cbz	r0, 80153a6 <rcl_wait+0x15e>
 801538c:	f88d 701f 	strb.w	r7, [sp, #31]
 8015390:	f7ff fa1e 	bl	80147d0 <rcl_timer_is_ready>
 8015394:	2800      	cmp	r0, #0
 8015396:	f47f af74 	bne.w	8015282 <rcl_wait+0x3a>
 801539a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801539e:	b90b      	cbnz	r3, 80153a4 <rcl_wait+0x15c>
 80153a0:	692a      	ldr	r2, [r5, #16]
 80153a2:	5193      	str	r3, [r2, r6]
 80153a4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80153a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80153a8:	3401      	adds	r4, #1
 80153aa:	42a2      	cmp	r2, r4
 80153ac:	d8e7      	bhi.n	801537e <rcl_wait+0x136>
 80153ae:	f038 0002 	bics.w	r0, r8, #2
 80153b2:	f040 8090 	bne.w	80154d6 <rcl_wait+0x28e>
 80153b6:	686e      	ldr	r6, [r5, #4]
 80153b8:	4602      	mov	r2, r0
 80153ba:	b91e      	cbnz	r6, 80153c4 <rcl_wait+0x17c>
 80153bc:	e00d      	b.n	80153da <rcl_wait+0x192>
 80153be:	3201      	adds	r2, #1
 80153c0:	42b2      	cmp	r2, r6
 80153c2:	d00a      	beq.n	80153da <rcl_wait+0x192>
 80153c4:	6899      	ldr	r1, [r3, #8]
 80153c6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80153ca:	2900      	cmp	r1, #0
 80153cc:	d1f7      	bne.n	80153be <rcl_wait+0x176>
 80153ce:	682c      	ldr	r4, [r5, #0]
 80153d0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80153d4:	3201      	adds	r2, #1
 80153d6:	42b2      	cmp	r2, r6
 80153d8:	d1f4      	bne.n	80153c4 <rcl_wait+0x17c>
 80153da:	68ee      	ldr	r6, [r5, #12]
 80153dc:	2200      	movs	r2, #0
 80153de:	b91e      	cbnz	r6, 80153e8 <rcl_wait+0x1a0>
 80153e0:	e00d      	b.n	80153fe <rcl_wait+0x1b6>
 80153e2:	3201      	adds	r2, #1
 80153e4:	42b2      	cmp	r2, r6
 80153e6:	d00a      	beq.n	80153fe <rcl_wait+0x1b6>
 80153e8:	6959      	ldr	r1, [r3, #20]
 80153ea:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80153ee:	2900      	cmp	r1, #0
 80153f0:	d1f7      	bne.n	80153e2 <rcl_wait+0x19a>
 80153f2:	68ac      	ldr	r4, [r5, #8]
 80153f4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80153f8:	3201      	adds	r2, #1
 80153fa:	42b2      	cmp	r2, r6
 80153fc:	d1f4      	bne.n	80153e8 <rcl_wait+0x1a0>
 80153fe:	69ee      	ldr	r6, [r5, #28]
 8015400:	2200      	movs	r2, #0
 8015402:	b91e      	cbnz	r6, 801540c <rcl_wait+0x1c4>
 8015404:	e00d      	b.n	8015422 <rcl_wait+0x1da>
 8015406:	3201      	adds	r2, #1
 8015408:	42b2      	cmp	r2, r6
 801540a:	d00a      	beq.n	8015422 <rcl_wait+0x1da>
 801540c:	6a19      	ldr	r1, [r3, #32]
 801540e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015412:	2900      	cmp	r1, #0
 8015414:	d1f7      	bne.n	8015406 <rcl_wait+0x1be>
 8015416:	69ac      	ldr	r4, [r5, #24]
 8015418:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801541c:	3201      	adds	r2, #1
 801541e:	42b2      	cmp	r2, r6
 8015420:	d1f4      	bne.n	801540c <rcl_wait+0x1c4>
 8015422:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 8015424:	2200      	movs	r2, #0
 8015426:	b91e      	cbnz	r6, 8015430 <rcl_wait+0x1e8>
 8015428:	e00d      	b.n	8015446 <rcl_wait+0x1fe>
 801542a:	3201      	adds	r2, #1
 801542c:	4296      	cmp	r6, r2
 801542e:	d00a      	beq.n	8015446 <rcl_wait+0x1fe>
 8015430:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8015432:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015436:	2900      	cmp	r1, #0
 8015438:	d1f7      	bne.n	801542a <rcl_wait+0x1e2>
 801543a:	6a2c      	ldr	r4, [r5, #32]
 801543c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8015440:	3201      	adds	r2, #1
 8015442:	4296      	cmp	r6, r2
 8015444:	d1f4      	bne.n	8015430 <rcl_wait+0x1e8>
 8015446:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8015448:	2200      	movs	r2, #0
 801544a:	b91e      	cbnz	r6, 8015454 <rcl_wait+0x20c>
 801544c:	e00d      	b.n	801546a <rcl_wait+0x222>
 801544e:	3201      	adds	r2, #1
 8015450:	42b2      	cmp	r2, r6
 8015452:	d00a      	beq.n	801546a <rcl_wait+0x222>
 8015454:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8015456:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801545a:	2900      	cmp	r1, #0
 801545c:	d1f7      	bne.n	801544e <rcl_wait+0x206>
 801545e:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8015460:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8015464:	3201      	adds	r2, #1
 8015466:	42b2      	cmp	r2, r6
 8015468:	d1f4      	bne.n	8015454 <rcl_wait+0x20c>
 801546a:	f1b8 0f02 	cmp.w	r8, #2
 801546e:	f47f af08 	bne.w	8015282 <rcl_wait+0x3a>
 8015472:	464b      	mov	r3, r9
 8015474:	2b00      	cmp	r3, #0
 8015476:	bf08      	it	eq
 8015478:	2002      	moveq	r0, #2
 801547a:	e702      	b.n	8015282 <rcl_wait+0x3a>
 801547c:	2a00      	cmp	r2, #0
 801547e:	d03a      	beq.n	80154f6 <rcl_wait+0x2ae>
 8015480:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8015484:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8015488:	e70e      	b.n	80152a8 <rcl_wait+0x60>
 801548a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801548e:	b00d      	add	sp, #52	@ 0x34
 8015490:	ecbd 8b02 	vpop	{d8}
 8015494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015498:	9b04      	ldr	r3, [sp, #16]
 801549a:	2b01      	cmp	r3, #1
 801549c:	9b05      	ldr	r3, [sp, #20]
 801549e:	f173 0300 	sbcs.w	r3, r3, #0
 80154a2:	db24      	blt.n	80154ee <rcl_wait+0x2a6>
 80154a4:	2f00      	cmp	r7, #0
 80154a6:	bfbc      	itt	lt
 80154a8:	f04f 0800 	movlt.w	r8, #0
 80154ac:	4647      	movlt	r7, r8
 80154ae:	a31e      	add	r3, pc, #120	@ (adr r3, 8015528 <rcl_wait+0x2e0>)
 80154b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154b4:	4640      	mov	r0, r8
 80154b6:	4639      	mov	r1, r7
 80154b8:	f7eb fb86 	bl	8000bc8 <__aeabi_ldivmod>
 80154bc:	a31a      	add	r3, pc, #104	@ (adr r3, 8015528 <rcl_wait+0x2e0>)
 80154be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154c2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80154c6:	4640      	mov	r0, r8
 80154c8:	4639      	mov	r1, r7
 80154ca:	f7eb fb7d 	bl	8000bc8 <__aeabi_ldivmod>
 80154ce:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80154d2:	ab08      	add	r3, sp, #32
 80154d4:	e73e      	b.n	8015354 <rcl_wait+0x10c>
 80154d6:	2001      	movs	r0, #1
 80154d8:	b00d      	add	sp, #52	@ 0x34
 80154da:	ecbd 8b02 	vpop	{d8}
 80154de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154e2:	200b      	movs	r0, #11
 80154e4:	b00d      	add	sp, #52	@ 0x34
 80154e6:	ecbd 8b02 	vpop	{d8}
 80154ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154ee:	465b      	mov	r3, fp
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	d1d7      	bne.n	80154a4 <rcl_wait+0x25c>
 80154f4:	e72e      	b.n	8015354 <rcl_wait+0x10c>
 80154f6:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 80154fa:	430b      	orrs	r3, r1
 80154fc:	bf08      	it	eq
 80154fe:	4691      	moveq	r9, r2
 8015500:	f43f af21 	beq.w	8015346 <rcl_wait+0xfe>
 8015504:	9b04      	ldr	r3, [sp, #16]
 8015506:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801550a:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 801550e:	2b01      	cmp	r3, #1
 8015510:	9b05      	ldr	r3, [sp, #20]
 8015512:	f173 0300 	sbcs.w	r3, r3, #0
 8015516:	f04f 0300 	mov.w	r3, #0
 801551a:	4699      	mov	r9, r3
 801551c:	dac2      	bge.n	80154a4 <rcl_wait+0x25c>
 801551e:	e719      	b.n	8015354 <rcl_wait+0x10c>
 8015520:	ffffffff 	.word	0xffffffff
 8015524:	7fffffff 	.word	0x7fffffff
 8015528:	3b9aca00 	.word	0x3b9aca00
 801552c:	00000000 	.word	0x00000000

08015530 <rcl_action_take_goal_response>:
 8015530:	2800      	cmp	r0, #0
 8015532:	d039      	beq.n	80155a8 <rcl_action_take_goal_response+0x78>
 8015534:	b570      	push	{r4, r5, r6, lr}
 8015536:	4604      	mov	r4, r0
 8015538:	6800      	ldr	r0, [r0, #0]
 801553a:	b380      	cbz	r0, 801559e <rcl_action_take_goal_response+0x6e>
 801553c:	460d      	mov	r5, r1
 801553e:	4616      	mov	r6, r2
 8015540:	f7fd ff8e 	bl	8013460 <rcl_client_is_valid>
 8015544:	b330      	cbz	r0, 8015594 <rcl_action_take_goal_response+0x64>
 8015546:	6820      	ldr	r0, [r4, #0]
 8015548:	3004      	adds	r0, #4
 801554a:	f7fd ff89 	bl	8013460 <rcl_client_is_valid>
 801554e:	b308      	cbz	r0, 8015594 <rcl_action_take_goal_response+0x64>
 8015550:	6820      	ldr	r0, [r4, #0]
 8015552:	3008      	adds	r0, #8
 8015554:	f7fd ff84 	bl	8013460 <rcl_client_is_valid>
 8015558:	b1e0      	cbz	r0, 8015594 <rcl_action_take_goal_response+0x64>
 801555a:	6820      	ldr	r0, [r4, #0]
 801555c:	300c      	adds	r0, #12
 801555e:	f7fe fdf3 	bl	8014148 <rcl_subscription_is_valid>
 8015562:	b1b8      	cbz	r0, 8015594 <rcl_action_take_goal_response+0x64>
 8015564:	6820      	ldr	r0, [r4, #0]
 8015566:	3010      	adds	r0, #16
 8015568:	f7fe fdee 	bl	8014148 <rcl_subscription_is_valid>
 801556c:	b190      	cbz	r0, 8015594 <rcl_action_take_goal_response+0x64>
 801556e:	b1cd      	cbz	r5, 80155a4 <rcl_action_take_goal_response+0x74>
 8015570:	b1c6      	cbz	r6, 80155a4 <rcl_action_take_goal_response+0x74>
 8015572:	6820      	ldr	r0, [r4, #0]
 8015574:	4632      	mov	r2, r6
 8015576:	4629      	mov	r1, r5
 8015578:	f7fd ff2a 	bl	80133d0 <rcl_take_response>
 801557c:	b148      	cbz	r0, 8015592 <rcl_action_take_goal_response+0x62>
 801557e:	280a      	cmp	r0, #10
 8015580:	d007      	beq.n	8015592 <rcl_action_take_goal_response+0x62>
 8015582:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8015586:	f640 0337 	movw	r3, #2103	@ 0x837
 801558a:	4290      	cmp	r0, r2
 801558c:	bf0c      	ite	eq
 801558e:	4618      	moveq	r0, r3
 8015590:	2001      	movne	r0, #1
 8015592:	bd70      	pop	{r4, r5, r6, pc}
 8015594:	f7f7 ffb8 	bl	800d508 <rcutils_reset_error>
 8015598:	f640 0036 	movw	r0, #2102	@ 0x836
 801559c:	bd70      	pop	{r4, r5, r6, pc}
 801559e:	f640 0036 	movw	r0, #2102	@ 0x836
 80155a2:	bd70      	pop	{r4, r5, r6, pc}
 80155a4:	200b      	movs	r0, #11
 80155a6:	bd70      	pop	{r4, r5, r6, pc}
 80155a8:	f640 0036 	movw	r0, #2102	@ 0x836
 80155ac:	4770      	bx	lr
 80155ae:	bf00      	nop

080155b0 <rcl_action_send_result_request>:
 80155b0:	b390      	cbz	r0, 8015618 <rcl_action_send_result_request+0x68>
 80155b2:	b570      	push	{r4, r5, r6, lr}
 80155b4:	4604      	mov	r4, r0
 80155b6:	6800      	ldr	r0, [r0, #0]
 80155b8:	b348      	cbz	r0, 801560e <rcl_action_send_result_request+0x5e>
 80155ba:	460d      	mov	r5, r1
 80155bc:	4616      	mov	r6, r2
 80155be:	f7fd ff4f 	bl	8013460 <rcl_client_is_valid>
 80155c2:	b1f8      	cbz	r0, 8015604 <rcl_action_send_result_request+0x54>
 80155c4:	6820      	ldr	r0, [r4, #0]
 80155c6:	3004      	adds	r0, #4
 80155c8:	f7fd ff4a 	bl	8013460 <rcl_client_is_valid>
 80155cc:	b1d0      	cbz	r0, 8015604 <rcl_action_send_result_request+0x54>
 80155ce:	6820      	ldr	r0, [r4, #0]
 80155d0:	3008      	adds	r0, #8
 80155d2:	f7fd ff45 	bl	8013460 <rcl_client_is_valid>
 80155d6:	b1a8      	cbz	r0, 8015604 <rcl_action_send_result_request+0x54>
 80155d8:	6820      	ldr	r0, [r4, #0]
 80155da:	300c      	adds	r0, #12
 80155dc:	f7fe fdb4 	bl	8014148 <rcl_subscription_is_valid>
 80155e0:	b180      	cbz	r0, 8015604 <rcl_action_send_result_request+0x54>
 80155e2:	6820      	ldr	r0, [r4, #0]
 80155e4:	3010      	adds	r0, #16
 80155e6:	f7fe fdaf 	bl	8014148 <rcl_subscription_is_valid>
 80155ea:	b158      	cbz	r0, 8015604 <rcl_action_send_result_request+0x54>
 80155ec:	b195      	cbz	r5, 8015614 <rcl_action_send_result_request+0x64>
 80155ee:	b18e      	cbz	r6, 8015614 <rcl_action_send_result_request+0x64>
 80155f0:	6820      	ldr	r0, [r4, #0]
 80155f2:	4632      	mov	r2, r6
 80155f4:	4629      	mov	r1, r5
 80155f6:	3008      	adds	r0, #8
 80155f8:	f7fd feb4 	bl	8013364 <rcl_send_request>
 80155fc:	3800      	subs	r0, #0
 80155fe:	bf18      	it	ne
 8015600:	2001      	movne	r0, #1
 8015602:	bd70      	pop	{r4, r5, r6, pc}
 8015604:	f7f7 ff80 	bl	800d508 <rcutils_reset_error>
 8015608:	f640 0036 	movw	r0, #2102	@ 0x836
 801560c:	bd70      	pop	{r4, r5, r6, pc}
 801560e:	f640 0036 	movw	r0, #2102	@ 0x836
 8015612:	bd70      	pop	{r4, r5, r6, pc}
 8015614:	200b      	movs	r0, #11
 8015616:	bd70      	pop	{r4, r5, r6, pc}
 8015618:	f640 0036 	movw	r0, #2102	@ 0x836
 801561c:	4770      	bx	lr
 801561e:	bf00      	nop

08015620 <rcl_action_take_result_response>:
 8015620:	2800      	cmp	r0, #0
 8015622:	d03a      	beq.n	801569a <rcl_action_take_result_response+0x7a>
 8015624:	b570      	push	{r4, r5, r6, lr}
 8015626:	4604      	mov	r4, r0
 8015628:	6800      	ldr	r0, [r0, #0]
 801562a:	b388      	cbz	r0, 8015690 <rcl_action_take_result_response+0x70>
 801562c:	460d      	mov	r5, r1
 801562e:	4616      	mov	r6, r2
 8015630:	f7fd ff16 	bl	8013460 <rcl_client_is_valid>
 8015634:	b338      	cbz	r0, 8015686 <rcl_action_take_result_response+0x66>
 8015636:	6820      	ldr	r0, [r4, #0]
 8015638:	3004      	adds	r0, #4
 801563a:	f7fd ff11 	bl	8013460 <rcl_client_is_valid>
 801563e:	b310      	cbz	r0, 8015686 <rcl_action_take_result_response+0x66>
 8015640:	6820      	ldr	r0, [r4, #0]
 8015642:	3008      	adds	r0, #8
 8015644:	f7fd ff0c 	bl	8013460 <rcl_client_is_valid>
 8015648:	b1e8      	cbz	r0, 8015686 <rcl_action_take_result_response+0x66>
 801564a:	6820      	ldr	r0, [r4, #0]
 801564c:	300c      	adds	r0, #12
 801564e:	f7fe fd7b 	bl	8014148 <rcl_subscription_is_valid>
 8015652:	b1c0      	cbz	r0, 8015686 <rcl_action_take_result_response+0x66>
 8015654:	6820      	ldr	r0, [r4, #0]
 8015656:	3010      	adds	r0, #16
 8015658:	f7fe fd76 	bl	8014148 <rcl_subscription_is_valid>
 801565c:	b198      	cbz	r0, 8015686 <rcl_action_take_result_response+0x66>
 801565e:	b1d5      	cbz	r5, 8015696 <rcl_action_take_result_response+0x76>
 8015660:	b1ce      	cbz	r6, 8015696 <rcl_action_take_result_response+0x76>
 8015662:	6820      	ldr	r0, [r4, #0]
 8015664:	4632      	mov	r2, r6
 8015666:	4629      	mov	r1, r5
 8015668:	3008      	adds	r0, #8
 801566a:	f7fd feb1 	bl	80133d0 <rcl_take_response>
 801566e:	b148      	cbz	r0, 8015684 <rcl_action_take_result_response+0x64>
 8015670:	280a      	cmp	r0, #10
 8015672:	d007      	beq.n	8015684 <rcl_action_take_result_response+0x64>
 8015674:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8015678:	f640 0337 	movw	r3, #2103	@ 0x837
 801567c:	4290      	cmp	r0, r2
 801567e:	bf0c      	ite	eq
 8015680:	4618      	moveq	r0, r3
 8015682:	2001      	movne	r0, #1
 8015684:	bd70      	pop	{r4, r5, r6, pc}
 8015686:	f7f7 ff3f 	bl	800d508 <rcutils_reset_error>
 801568a:	f640 0036 	movw	r0, #2102	@ 0x836
 801568e:	bd70      	pop	{r4, r5, r6, pc}
 8015690:	f640 0036 	movw	r0, #2102	@ 0x836
 8015694:	bd70      	pop	{r4, r5, r6, pc}
 8015696:	200b      	movs	r0, #11
 8015698:	bd70      	pop	{r4, r5, r6, pc}
 801569a:	f640 0036 	movw	r0, #2102	@ 0x836
 801569e:	4770      	bx	lr

080156a0 <rcl_action_take_cancel_response>:
 80156a0:	2800      	cmp	r0, #0
 80156a2:	d03a      	beq.n	801571a <rcl_action_take_cancel_response+0x7a>
 80156a4:	b570      	push	{r4, r5, r6, lr}
 80156a6:	4604      	mov	r4, r0
 80156a8:	6800      	ldr	r0, [r0, #0]
 80156aa:	b388      	cbz	r0, 8015710 <rcl_action_take_cancel_response+0x70>
 80156ac:	460d      	mov	r5, r1
 80156ae:	4616      	mov	r6, r2
 80156b0:	f7fd fed6 	bl	8013460 <rcl_client_is_valid>
 80156b4:	b338      	cbz	r0, 8015706 <rcl_action_take_cancel_response+0x66>
 80156b6:	6820      	ldr	r0, [r4, #0]
 80156b8:	3004      	adds	r0, #4
 80156ba:	f7fd fed1 	bl	8013460 <rcl_client_is_valid>
 80156be:	b310      	cbz	r0, 8015706 <rcl_action_take_cancel_response+0x66>
 80156c0:	6820      	ldr	r0, [r4, #0]
 80156c2:	3008      	adds	r0, #8
 80156c4:	f7fd fecc 	bl	8013460 <rcl_client_is_valid>
 80156c8:	b1e8      	cbz	r0, 8015706 <rcl_action_take_cancel_response+0x66>
 80156ca:	6820      	ldr	r0, [r4, #0]
 80156cc:	300c      	adds	r0, #12
 80156ce:	f7fe fd3b 	bl	8014148 <rcl_subscription_is_valid>
 80156d2:	b1c0      	cbz	r0, 8015706 <rcl_action_take_cancel_response+0x66>
 80156d4:	6820      	ldr	r0, [r4, #0]
 80156d6:	3010      	adds	r0, #16
 80156d8:	f7fe fd36 	bl	8014148 <rcl_subscription_is_valid>
 80156dc:	b198      	cbz	r0, 8015706 <rcl_action_take_cancel_response+0x66>
 80156de:	b1d5      	cbz	r5, 8015716 <rcl_action_take_cancel_response+0x76>
 80156e0:	b1ce      	cbz	r6, 8015716 <rcl_action_take_cancel_response+0x76>
 80156e2:	6820      	ldr	r0, [r4, #0]
 80156e4:	4632      	mov	r2, r6
 80156e6:	4629      	mov	r1, r5
 80156e8:	3004      	adds	r0, #4
 80156ea:	f7fd fe71 	bl	80133d0 <rcl_take_response>
 80156ee:	b148      	cbz	r0, 8015704 <rcl_action_take_cancel_response+0x64>
 80156f0:	280a      	cmp	r0, #10
 80156f2:	d007      	beq.n	8015704 <rcl_action_take_cancel_response+0x64>
 80156f4:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80156f8:	f640 0337 	movw	r3, #2103	@ 0x837
 80156fc:	4290      	cmp	r0, r2
 80156fe:	bf0c      	ite	eq
 8015700:	4618      	moveq	r0, r3
 8015702:	2001      	movne	r0, #1
 8015704:	bd70      	pop	{r4, r5, r6, pc}
 8015706:	f7f7 feff 	bl	800d508 <rcutils_reset_error>
 801570a:	f640 0036 	movw	r0, #2102	@ 0x836
 801570e:	bd70      	pop	{r4, r5, r6, pc}
 8015710:	f640 0036 	movw	r0, #2102	@ 0x836
 8015714:	bd70      	pop	{r4, r5, r6, pc}
 8015716:	200b      	movs	r0, #11
 8015718:	bd70      	pop	{r4, r5, r6, pc}
 801571a:	f640 0036 	movw	r0, #2102	@ 0x836
 801571e:	4770      	bx	lr

08015720 <rcl_action_take_feedback>:
 8015720:	2800      	cmp	r0, #0
 8015722:	d038      	beq.n	8015796 <rcl_action_take_feedback+0x76>
 8015724:	b530      	push	{r4, r5, lr}
 8015726:	4604      	mov	r4, r0
 8015728:	6800      	ldr	r0, [r0, #0]
 801572a:	b091      	sub	sp, #68	@ 0x44
 801572c:	b378      	cbz	r0, 801578e <rcl_action_take_feedback+0x6e>
 801572e:	460d      	mov	r5, r1
 8015730:	f7fd fe96 	bl	8013460 <rcl_client_is_valid>
 8015734:	b328      	cbz	r0, 8015782 <rcl_action_take_feedback+0x62>
 8015736:	6820      	ldr	r0, [r4, #0]
 8015738:	3004      	adds	r0, #4
 801573a:	f7fd fe91 	bl	8013460 <rcl_client_is_valid>
 801573e:	b300      	cbz	r0, 8015782 <rcl_action_take_feedback+0x62>
 8015740:	6820      	ldr	r0, [r4, #0]
 8015742:	3008      	adds	r0, #8
 8015744:	f7fd fe8c 	bl	8013460 <rcl_client_is_valid>
 8015748:	b1d8      	cbz	r0, 8015782 <rcl_action_take_feedback+0x62>
 801574a:	6820      	ldr	r0, [r4, #0]
 801574c:	300c      	adds	r0, #12
 801574e:	f7fe fcfb 	bl	8014148 <rcl_subscription_is_valid>
 8015752:	b1b0      	cbz	r0, 8015782 <rcl_action_take_feedback+0x62>
 8015754:	6820      	ldr	r0, [r4, #0]
 8015756:	3010      	adds	r0, #16
 8015758:	f7fe fcf6 	bl	8014148 <rcl_subscription_is_valid>
 801575c:	b188      	cbz	r0, 8015782 <rcl_action_take_feedback+0x62>
 801575e:	b1ed      	cbz	r5, 801579c <rcl_action_take_feedback+0x7c>
 8015760:	6820      	ldr	r0, [r4, #0]
 8015762:	2300      	movs	r3, #0
 8015764:	466a      	mov	r2, sp
 8015766:	4629      	mov	r1, r5
 8015768:	300c      	adds	r0, #12
 801576a:	f7fe fc8f 	bl	801408c <rcl_take>
 801576e:	b160      	cbz	r0, 801578a <rcl_action_take_feedback+0x6a>
 8015770:	f240 1391 	movw	r3, #401	@ 0x191
 8015774:	4298      	cmp	r0, r3
 8015776:	d014      	beq.n	80157a2 <rcl_action_take_feedback+0x82>
 8015778:	280a      	cmp	r0, #10
 801577a:	bf18      	it	ne
 801577c:	2001      	movne	r0, #1
 801577e:	b011      	add	sp, #68	@ 0x44
 8015780:	bd30      	pop	{r4, r5, pc}
 8015782:	f7f7 fec1 	bl	800d508 <rcutils_reset_error>
 8015786:	f640 0036 	movw	r0, #2102	@ 0x836
 801578a:	b011      	add	sp, #68	@ 0x44
 801578c:	bd30      	pop	{r4, r5, pc}
 801578e:	f640 0036 	movw	r0, #2102	@ 0x836
 8015792:	b011      	add	sp, #68	@ 0x44
 8015794:	bd30      	pop	{r4, r5, pc}
 8015796:	f640 0036 	movw	r0, #2102	@ 0x836
 801579a:	4770      	bx	lr
 801579c:	200b      	movs	r0, #11
 801579e:	b011      	add	sp, #68	@ 0x44
 80157a0:	bd30      	pop	{r4, r5, pc}
 80157a2:	f640 0037 	movw	r0, #2103	@ 0x837
 80157a6:	e7f0      	b.n	801578a <rcl_action_take_feedback+0x6a>

080157a8 <rcl_action_wait_set_add_action_client>:
 80157a8:	2800      	cmp	r0, #0
 80157aa:	d048      	beq.n	801583e <rcl_action_wait_set_add_action_client+0x96>
 80157ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80157ae:	460c      	mov	r4, r1
 80157b0:	2900      	cmp	r1, #0
 80157b2:	d03c      	beq.n	801582e <rcl_action_wait_set_add_action_client+0x86>
 80157b4:	4605      	mov	r5, r0
 80157b6:	6808      	ldr	r0, [r1, #0]
 80157b8:	2800      	cmp	r0, #0
 80157ba:	d038      	beq.n	801582e <rcl_action_wait_set_add_action_client+0x86>
 80157bc:	4617      	mov	r7, r2
 80157be:	461e      	mov	r6, r3
 80157c0:	f7fd fe4e 	bl	8013460 <rcl_client_is_valid>
 80157c4:	b3b0      	cbz	r0, 8015834 <rcl_action_wait_set_add_action_client+0x8c>
 80157c6:	6820      	ldr	r0, [r4, #0]
 80157c8:	3004      	adds	r0, #4
 80157ca:	f7fd fe49 	bl	8013460 <rcl_client_is_valid>
 80157ce:	b388      	cbz	r0, 8015834 <rcl_action_wait_set_add_action_client+0x8c>
 80157d0:	6820      	ldr	r0, [r4, #0]
 80157d2:	3008      	adds	r0, #8
 80157d4:	f7fd fe44 	bl	8013460 <rcl_client_is_valid>
 80157d8:	b360      	cbz	r0, 8015834 <rcl_action_wait_set_add_action_client+0x8c>
 80157da:	6820      	ldr	r0, [r4, #0]
 80157dc:	300c      	adds	r0, #12
 80157de:	f7fe fcb3 	bl	8014148 <rcl_subscription_is_valid>
 80157e2:	b338      	cbz	r0, 8015834 <rcl_action_wait_set_add_action_client+0x8c>
 80157e4:	6820      	ldr	r0, [r4, #0]
 80157e6:	3010      	adds	r0, #16
 80157e8:	f7fe fcae 	bl	8014148 <rcl_subscription_is_valid>
 80157ec:	b310      	cbz	r0, 8015834 <rcl_action_wait_set_add_action_client+0x8c>
 80157ee:	6821      	ldr	r1, [r4, #0]
 80157f0:	4628      	mov	r0, r5
 80157f2:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 80157f6:	f7ff fccd 	bl	8015194 <rcl_wait_set_add_client>
 80157fa:	b9b8      	cbnz	r0, 801582c <rcl_action_wait_set_add_action_client+0x84>
 80157fc:	6821      	ldr	r1, [r4, #0]
 80157fe:	4628      	mov	r0, r5
 8015800:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8015804:	3104      	adds	r1, #4
 8015806:	f7ff fcc5 	bl	8015194 <rcl_wait_set_add_client>
 801580a:	b978      	cbnz	r0, 801582c <rcl_action_wait_set_add_action_client+0x84>
 801580c:	6821      	ldr	r1, [r4, #0]
 801580e:	4628      	mov	r0, r5
 8015810:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8015814:	3108      	adds	r1, #8
 8015816:	f7ff fcbd 	bl	8015194 <rcl_wait_set_add_client>
 801581a:	b938      	cbnz	r0, 801582c <rcl_action_wait_set_add_action_client+0x84>
 801581c:	6821      	ldr	r1, [r4, #0]
 801581e:	4628      	mov	r0, r5
 8015820:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8015824:	310c      	adds	r1, #12
 8015826:	f7ff f96d 	bl	8014b04 <rcl_wait_set_add_subscription>
 801582a:	b158      	cbz	r0, 8015844 <rcl_action_wait_set_add_action_client+0x9c>
 801582c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801582e:	f640 0036 	movw	r0, #2102	@ 0x836
 8015832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015834:	f7f7 fe68 	bl	800d508 <rcutils_reset_error>
 8015838:	f640 0036 	movw	r0, #2102	@ 0x836
 801583c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801583e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015842:	4770      	bx	lr
 8015844:	6821      	ldr	r1, [r4, #0]
 8015846:	4628      	mov	r0, r5
 8015848:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 801584c:	3110      	adds	r1, #16
 801584e:	f7ff f959 	bl	8014b04 <rcl_wait_set_add_subscription>
 8015852:	2800      	cmp	r0, #0
 8015854:	d1ea      	bne.n	801582c <rcl_action_wait_set_add_action_client+0x84>
 8015856:	b11f      	cbz	r7, 8015860 <rcl_action_wait_set_add_action_client+0xb8>
 8015858:	6823      	ldr	r3, [r4, #0]
 801585a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 801585e:	603b      	str	r3, [r7, #0]
 8015860:	2e00      	cmp	r6, #0
 8015862:	d0e3      	beq.n	801582c <rcl_action_wait_set_add_action_client+0x84>
 8015864:	6823      	ldr	r3, [r4, #0]
 8015866:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 801586a:	6033      	str	r3, [r6, #0]
 801586c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801586e:	bf00      	nop

08015870 <rcl_action_client_wait_set_get_entities_ready>:
 8015870:	2800      	cmp	r0, #0
 8015872:	f000 808d 	beq.w	8015990 <rcl_action_client_wait_set_get_entities_ready+0x120>
 8015876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801587a:	460c      	mov	r4, r1
 801587c:	2900      	cmp	r1, #0
 801587e:	d077      	beq.n	8015970 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8015880:	4605      	mov	r5, r0
 8015882:	6808      	ldr	r0, [r1, #0]
 8015884:	2800      	cmp	r0, #0
 8015886:	d073      	beq.n	8015970 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8015888:	4616      	mov	r6, r2
 801588a:	461f      	mov	r7, r3
 801588c:	f7fd fde8 	bl	8013460 <rcl_client_is_valid>
 8015890:	2800      	cmp	r0, #0
 8015892:	d071      	beq.n	8015978 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8015894:	6820      	ldr	r0, [r4, #0]
 8015896:	3004      	adds	r0, #4
 8015898:	f7fd fde2 	bl	8013460 <rcl_client_is_valid>
 801589c:	2800      	cmp	r0, #0
 801589e:	d06b      	beq.n	8015978 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80158a0:	6820      	ldr	r0, [r4, #0]
 80158a2:	3008      	adds	r0, #8
 80158a4:	f7fd fddc 	bl	8013460 <rcl_client_is_valid>
 80158a8:	2800      	cmp	r0, #0
 80158aa:	d065      	beq.n	8015978 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80158ac:	6820      	ldr	r0, [r4, #0]
 80158ae:	300c      	adds	r0, #12
 80158b0:	f7fe fc4a 	bl	8014148 <rcl_subscription_is_valid>
 80158b4:	2800      	cmp	r0, #0
 80158b6:	d05f      	beq.n	8015978 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80158b8:	6820      	ldr	r0, [r4, #0]
 80158ba:	3010      	adds	r0, #16
 80158bc:	f7fe fc44 	bl	8014148 <rcl_subscription_is_valid>
 80158c0:	2800      	cmp	r0, #0
 80158c2:	d059      	beq.n	8015978 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80158c4:	2e00      	cmp	r6, #0
 80158c6:	d060      	beq.n	801598a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80158c8:	2f00      	cmp	r7, #0
 80158ca:	d05e      	beq.n	801598a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80158cc:	9b06      	ldr	r3, [sp, #24]
 80158ce:	2b00      	cmp	r3, #0
 80158d0:	d05b      	beq.n	801598a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80158d2:	9b07      	ldr	r3, [sp, #28]
 80158d4:	2b00      	cmp	r3, #0
 80158d6:	d058      	beq.n	801598a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80158d8:	9b08      	ldr	r3, [sp, #32]
 80158da:	2b00      	cmp	r3, #0
 80158dc:	d055      	beq.n	801598a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80158de:	6823      	ldr	r3, [r4, #0]
 80158e0:	686a      	ldr	r2, [r5, #4]
 80158e2:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 80158e6:	428a      	cmp	r2, r1
 80158e8:	d94c      	bls.n	8015984 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80158ea:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 80158ee:	4282      	cmp	r2, r0
 80158f0:	d948      	bls.n	8015984 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80158f2:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 80158f6:	69ea      	ldr	r2, [r5, #28]
 80158f8:	42a2      	cmp	r2, r4
 80158fa:	d943      	bls.n	8015984 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80158fc:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8015900:	4562      	cmp	r2, ip
 8015902:	d93f      	bls.n	8015984 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8015904:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8015908:	4572      	cmp	r2, lr
 801590a:	d93b      	bls.n	8015984 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801590c:	69aa      	ldr	r2, [r5, #24]
 801590e:	682d      	ldr	r5, [r5, #0]
 8015910:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8015914:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8015918:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 801591c:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8015920:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8015924:	f103 0c0c 	add.w	ip, r3, #12
 8015928:	eba5 050c 	sub.w	r5, r5, ip
 801592c:	fab5 f585 	clz	r5, r5
 8015930:	096d      	lsrs	r5, r5, #5
 8015932:	7035      	strb	r5, [r6, #0]
 8015934:	f103 0510 	add.w	r5, r3, #16
 8015938:	1b64      	subs	r4, r4, r5
 801593a:	fab4 f484 	clz	r4, r4
 801593e:	0964      	lsrs	r4, r4, #5
 8015940:	703c      	strb	r4, [r7, #0]
 8015942:	eba3 0008 	sub.w	r0, r3, r8
 8015946:	1d1c      	adds	r4, r3, #4
 8015948:	3308      	adds	r3, #8
 801594a:	1ad3      	subs	r3, r2, r3
 801594c:	fab0 f080 	clz	r0, r0
 8015950:	9a06      	ldr	r2, [sp, #24]
 8015952:	0940      	lsrs	r0, r0, #5
 8015954:	1b09      	subs	r1, r1, r4
 8015956:	7010      	strb	r0, [r2, #0]
 8015958:	fab1 f181 	clz	r1, r1
 801595c:	9a07      	ldr	r2, [sp, #28]
 801595e:	0949      	lsrs	r1, r1, #5
 8015960:	7011      	strb	r1, [r2, #0]
 8015962:	fab3 f383 	clz	r3, r3
 8015966:	9a08      	ldr	r2, [sp, #32]
 8015968:	095b      	lsrs	r3, r3, #5
 801596a:	2000      	movs	r0, #0
 801596c:	7013      	strb	r3, [r2, #0]
 801596e:	e001      	b.n	8015974 <rcl_action_client_wait_set_get_entities_ready+0x104>
 8015970:	f640 0036 	movw	r0, #2102	@ 0x836
 8015974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015978:	f7f7 fdc6 	bl	800d508 <rcutils_reset_error>
 801597c:	f640 0036 	movw	r0, #2102	@ 0x836
 8015980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015984:	2001      	movs	r0, #1
 8015986:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801598a:	200b      	movs	r0, #11
 801598c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015990:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015994:	4770      	bx	lr
 8015996:	bf00      	nop

08015998 <rcl_action_take_goal_request>:
 8015998:	2800      	cmp	r0, #0
 801599a:	d039      	beq.n	8015a10 <rcl_action_take_goal_request+0x78>
 801599c:	b570      	push	{r4, r5, r6, lr}
 801599e:	4604      	mov	r4, r0
 80159a0:	6800      	ldr	r0, [r0, #0]
 80159a2:	b380      	cbz	r0, 8015a06 <rcl_action_take_goal_request+0x6e>
 80159a4:	460d      	mov	r5, r1
 80159a6:	4616      	mov	r6, r2
 80159a8:	f7fe fb66 	bl	8014078 <rcl_service_is_valid>
 80159ac:	b330      	cbz	r0, 80159fc <rcl_action_take_goal_request+0x64>
 80159ae:	6820      	ldr	r0, [r4, #0]
 80159b0:	3004      	adds	r0, #4
 80159b2:	f7fe fb61 	bl	8014078 <rcl_service_is_valid>
 80159b6:	b308      	cbz	r0, 80159fc <rcl_action_take_goal_request+0x64>
 80159b8:	6820      	ldr	r0, [r4, #0]
 80159ba:	3008      	adds	r0, #8
 80159bc:	f7fe fb5c 	bl	8014078 <rcl_service_is_valid>
 80159c0:	b1e0      	cbz	r0, 80159fc <rcl_action_take_goal_request+0x64>
 80159c2:	6820      	ldr	r0, [r4, #0]
 80159c4:	300c      	adds	r0, #12
 80159c6:	f7f6 fdb9 	bl	800c53c <rcl_publisher_is_valid>
 80159ca:	b1b8      	cbz	r0, 80159fc <rcl_action_take_goal_request+0x64>
 80159cc:	6820      	ldr	r0, [r4, #0]
 80159ce:	3010      	adds	r0, #16
 80159d0:	f7f6 fdb4 	bl	800c53c <rcl_publisher_is_valid>
 80159d4:	b190      	cbz	r0, 80159fc <rcl_action_take_goal_request+0x64>
 80159d6:	b1cd      	cbz	r5, 8015a0c <rcl_action_take_goal_request+0x74>
 80159d8:	b1c6      	cbz	r6, 8015a0c <rcl_action_take_goal_request+0x74>
 80159da:	6820      	ldr	r0, [r4, #0]
 80159dc:	4632      	mov	r2, r6
 80159de:	4629      	mov	r1, r5
 80159e0:	f7fe faf2 	bl	8013fc8 <rcl_take_request>
 80159e4:	b148      	cbz	r0, 80159fa <rcl_action_take_goal_request+0x62>
 80159e6:	280a      	cmp	r0, #10
 80159e8:	d007      	beq.n	80159fa <rcl_action_take_goal_request+0x62>
 80159ea:	f240 2259 	movw	r2, #601	@ 0x259
 80159ee:	f640 0399 	movw	r3, #2201	@ 0x899
 80159f2:	4290      	cmp	r0, r2
 80159f4:	bf0c      	ite	eq
 80159f6:	4618      	moveq	r0, r3
 80159f8:	2001      	movne	r0, #1
 80159fa:	bd70      	pop	{r4, r5, r6, pc}
 80159fc:	f7f7 fd84 	bl	800d508 <rcutils_reset_error>
 8015a00:	f640 0098 	movw	r0, #2200	@ 0x898
 8015a04:	bd70      	pop	{r4, r5, r6, pc}
 8015a06:	f640 0098 	movw	r0, #2200	@ 0x898
 8015a0a:	bd70      	pop	{r4, r5, r6, pc}
 8015a0c:	200b      	movs	r0, #11
 8015a0e:	bd70      	pop	{r4, r5, r6, pc}
 8015a10:	f640 0098 	movw	r0, #2200	@ 0x898
 8015a14:	4770      	bx	lr
 8015a16:	bf00      	nop

08015a18 <rcl_action_send_goal_response>:
 8015a18:	b390      	cbz	r0, 8015a80 <rcl_action_send_goal_response+0x68>
 8015a1a:	b570      	push	{r4, r5, r6, lr}
 8015a1c:	4604      	mov	r4, r0
 8015a1e:	6800      	ldr	r0, [r0, #0]
 8015a20:	b348      	cbz	r0, 8015a76 <rcl_action_send_goal_response+0x5e>
 8015a22:	460d      	mov	r5, r1
 8015a24:	4616      	mov	r6, r2
 8015a26:	f7fe fb27 	bl	8014078 <rcl_service_is_valid>
 8015a2a:	b1f8      	cbz	r0, 8015a6c <rcl_action_send_goal_response+0x54>
 8015a2c:	6820      	ldr	r0, [r4, #0]
 8015a2e:	3004      	adds	r0, #4
 8015a30:	f7fe fb22 	bl	8014078 <rcl_service_is_valid>
 8015a34:	b1d0      	cbz	r0, 8015a6c <rcl_action_send_goal_response+0x54>
 8015a36:	6820      	ldr	r0, [r4, #0]
 8015a38:	3008      	adds	r0, #8
 8015a3a:	f7fe fb1d 	bl	8014078 <rcl_service_is_valid>
 8015a3e:	b1a8      	cbz	r0, 8015a6c <rcl_action_send_goal_response+0x54>
 8015a40:	6820      	ldr	r0, [r4, #0]
 8015a42:	300c      	adds	r0, #12
 8015a44:	f7f6 fd7a 	bl	800c53c <rcl_publisher_is_valid>
 8015a48:	b180      	cbz	r0, 8015a6c <rcl_action_send_goal_response+0x54>
 8015a4a:	6820      	ldr	r0, [r4, #0]
 8015a4c:	3010      	adds	r0, #16
 8015a4e:	f7f6 fd75 	bl	800c53c <rcl_publisher_is_valid>
 8015a52:	b158      	cbz	r0, 8015a6c <rcl_action_send_goal_response+0x54>
 8015a54:	b195      	cbz	r5, 8015a7c <rcl_action_send_goal_response+0x64>
 8015a56:	b18e      	cbz	r6, 8015a7c <rcl_action_send_goal_response+0x64>
 8015a58:	6820      	ldr	r0, [r4, #0]
 8015a5a:	4632      	mov	r2, r6
 8015a5c:	4629      	mov	r1, r5
 8015a5e:	f7fe faf3 	bl	8014048 <rcl_send_response>
 8015a62:	b110      	cbz	r0, 8015a6a <rcl_action_send_goal_response+0x52>
 8015a64:	2802      	cmp	r0, #2
 8015a66:	bf18      	it	ne
 8015a68:	2001      	movne	r0, #1
 8015a6a:	bd70      	pop	{r4, r5, r6, pc}
 8015a6c:	f7f7 fd4c 	bl	800d508 <rcutils_reset_error>
 8015a70:	f640 0098 	movw	r0, #2200	@ 0x898
 8015a74:	bd70      	pop	{r4, r5, r6, pc}
 8015a76:	f640 0098 	movw	r0, #2200	@ 0x898
 8015a7a:	bd70      	pop	{r4, r5, r6, pc}
 8015a7c:	200b      	movs	r0, #11
 8015a7e:	bd70      	pop	{r4, r5, r6, pc}
 8015a80:	f640 0098 	movw	r0, #2200	@ 0x898
 8015a84:	4770      	bx	lr
 8015a86:	bf00      	nop

08015a88 <rcl_action_take_result_request>:
 8015a88:	2800      	cmp	r0, #0
 8015a8a:	d03a      	beq.n	8015b02 <rcl_action_take_result_request+0x7a>
 8015a8c:	b570      	push	{r4, r5, r6, lr}
 8015a8e:	4604      	mov	r4, r0
 8015a90:	6800      	ldr	r0, [r0, #0]
 8015a92:	b388      	cbz	r0, 8015af8 <rcl_action_take_result_request+0x70>
 8015a94:	460d      	mov	r5, r1
 8015a96:	4616      	mov	r6, r2
 8015a98:	f7fe faee 	bl	8014078 <rcl_service_is_valid>
 8015a9c:	b338      	cbz	r0, 8015aee <rcl_action_take_result_request+0x66>
 8015a9e:	6820      	ldr	r0, [r4, #0]
 8015aa0:	3004      	adds	r0, #4
 8015aa2:	f7fe fae9 	bl	8014078 <rcl_service_is_valid>
 8015aa6:	b310      	cbz	r0, 8015aee <rcl_action_take_result_request+0x66>
 8015aa8:	6820      	ldr	r0, [r4, #0]
 8015aaa:	3008      	adds	r0, #8
 8015aac:	f7fe fae4 	bl	8014078 <rcl_service_is_valid>
 8015ab0:	b1e8      	cbz	r0, 8015aee <rcl_action_take_result_request+0x66>
 8015ab2:	6820      	ldr	r0, [r4, #0]
 8015ab4:	300c      	adds	r0, #12
 8015ab6:	f7f6 fd41 	bl	800c53c <rcl_publisher_is_valid>
 8015aba:	b1c0      	cbz	r0, 8015aee <rcl_action_take_result_request+0x66>
 8015abc:	6820      	ldr	r0, [r4, #0]
 8015abe:	3010      	adds	r0, #16
 8015ac0:	f7f6 fd3c 	bl	800c53c <rcl_publisher_is_valid>
 8015ac4:	b198      	cbz	r0, 8015aee <rcl_action_take_result_request+0x66>
 8015ac6:	b1d5      	cbz	r5, 8015afe <rcl_action_take_result_request+0x76>
 8015ac8:	b1ce      	cbz	r6, 8015afe <rcl_action_take_result_request+0x76>
 8015aca:	6820      	ldr	r0, [r4, #0]
 8015acc:	4632      	mov	r2, r6
 8015ace:	4629      	mov	r1, r5
 8015ad0:	3008      	adds	r0, #8
 8015ad2:	f7fe fa79 	bl	8013fc8 <rcl_take_request>
 8015ad6:	b148      	cbz	r0, 8015aec <rcl_action_take_result_request+0x64>
 8015ad8:	280a      	cmp	r0, #10
 8015ada:	d007      	beq.n	8015aec <rcl_action_take_result_request+0x64>
 8015adc:	f240 2259 	movw	r2, #601	@ 0x259
 8015ae0:	f640 0399 	movw	r3, #2201	@ 0x899
 8015ae4:	4290      	cmp	r0, r2
 8015ae6:	bf0c      	ite	eq
 8015ae8:	4618      	moveq	r0, r3
 8015aea:	2001      	movne	r0, #1
 8015aec:	bd70      	pop	{r4, r5, r6, pc}
 8015aee:	f7f7 fd0b 	bl	800d508 <rcutils_reset_error>
 8015af2:	f640 0098 	movw	r0, #2200	@ 0x898
 8015af6:	bd70      	pop	{r4, r5, r6, pc}
 8015af8:	f640 0098 	movw	r0, #2200	@ 0x898
 8015afc:	bd70      	pop	{r4, r5, r6, pc}
 8015afe:	200b      	movs	r0, #11
 8015b00:	bd70      	pop	{r4, r5, r6, pc}
 8015b02:	f640 0098 	movw	r0, #2200	@ 0x898
 8015b06:	4770      	bx	lr

08015b08 <rcl_action_take_cancel_request>:
 8015b08:	2800      	cmp	r0, #0
 8015b0a:	d03a      	beq.n	8015b82 <rcl_action_take_cancel_request+0x7a>
 8015b0c:	b570      	push	{r4, r5, r6, lr}
 8015b0e:	4604      	mov	r4, r0
 8015b10:	6800      	ldr	r0, [r0, #0]
 8015b12:	b388      	cbz	r0, 8015b78 <rcl_action_take_cancel_request+0x70>
 8015b14:	460d      	mov	r5, r1
 8015b16:	4616      	mov	r6, r2
 8015b18:	f7fe faae 	bl	8014078 <rcl_service_is_valid>
 8015b1c:	b338      	cbz	r0, 8015b6e <rcl_action_take_cancel_request+0x66>
 8015b1e:	6820      	ldr	r0, [r4, #0]
 8015b20:	3004      	adds	r0, #4
 8015b22:	f7fe faa9 	bl	8014078 <rcl_service_is_valid>
 8015b26:	b310      	cbz	r0, 8015b6e <rcl_action_take_cancel_request+0x66>
 8015b28:	6820      	ldr	r0, [r4, #0]
 8015b2a:	3008      	adds	r0, #8
 8015b2c:	f7fe faa4 	bl	8014078 <rcl_service_is_valid>
 8015b30:	b1e8      	cbz	r0, 8015b6e <rcl_action_take_cancel_request+0x66>
 8015b32:	6820      	ldr	r0, [r4, #0]
 8015b34:	300c      	adds	r0, #12
 8015b36:	f7f6 fd01 	bl	800c53c <rcl_publisher_is_valid>
 8015b3a:	b1c0      	cbz	r0, 8015b6e <rcl_action_take_cancel_request+0x66>
 8015b3c:	6820      	ldr	r0, [r4, #0]
 8015b3e:	3010      	adds	r0, #16
 8015b40:	f7f6 fcfc 	bl	800c53c <rcl_publisher_is_valid>
 8015b44:	b198      	cbz	r0, 8015b6e <rcl_action_take_cancel_request+0x66>
 8015b46:	b1d5      	cbz	r5, 8015b7e <rcl_action_take_cancel_request+0x76>
 8015b48:	b1ce      	cbz	r6, 8015b7e <rcl_action_take_cancel_request+0x76>
 8015b4a:	6820      	ldr	r0, [r4, #0]
 8015b4c:	4632      	mov	r2, r6
 8015b4e:	4629      	mov	r1, r5
 8015b50:	3004      	adds	r0, #4
 8015b52:	f7fe fa39 	bl	8013fc8 <rcl_take_request>
 8015b56:	b148      	cbz	r0, 8015b6c <rcl_action_take_cancel_request+0x64>
 8015b58:	280a      	cmp	r0, #10
 8015b5a:	d007      	beq.n	8015b6c <rcl_action_take_cancel_request+0x64>
 8015b5c:	f240 2259 	movw	r2, #601	@ 0x259
 8015b60:	f640 0399 	movw	r3, #2201	@ 0x899
 8015b64:	4290      	cmp	r0, r2
 8015b66:	bf0c      	ite	eq
 8015b68:	4618      	moveq	r0, r3
 8015b6a:	2001      	movne	r0, #1
 8015b6c:	bd70      	pop	{r4, r5, r6, pc}
 8015b6e:	f7f7 fccb 	bl	800d508 <rcutils_reset_error>
 8015b72:	f640 0098 	movw	r0, #2200	@ 0x898
 8015b76:	bd70      	pop	{r4, r5, r6, pc}
 8015b78:	f640 0098 	movw	r0, #2200	@ 0x898
 8015b7c:	bd70      	pop	{r4, r5, r6, pc}
 8015b7e:	200b      	movs	r0, #11
 8015b80:	bd70      	pop	{r4, r5, r6, pc}
 8015b82:	f640 0098 	movw	r0, #2200	@ 0x898
 8015b86:	4770      	bx	lr

08015b88 <rcl_action_send_cancel_response>:
 8015b88:	b398      	cbz	r0, 8015bf2 <rcl_action_send_cancel_response+0x6a>
 8015b8a:	b570      	push	{r4, r5, r6, lr}
 8015b8c:	4604      	mov	r4, r0
 8015b8e:	6800      	ldr	r0, [r0, #0]
 8015b90:	b350      	cbz	r0, 8015be8 <rcl_action_send_cancel_response+0x60>
 8015b92:	460d      	mov	r5, r1
 8015b94:	4616      	mov	r6, r2
 8015b96:	f7fe fa6f 	bl	8014078 <rcl_service_is_valid>
 8015b9a:	b300      	cbz	r0, 8015bde <rcl_action_send_cancel_response+0x56>
 8015b9c:	6820      	ldr	r0, [r4, #0]
 8015b9e:	3004      	adds	r0, #4
 8015ba0:	f7fe fa6a 	bl	8014078 <rcl_service_is_valid>
 8015ba4:	b1d8      	cbz	r0, 8015bde <rcl_action_send_cancel_response+0x56>
 8015ba6:	6820      	ldr	r0, [r4, #0]
 8015ba8:	3008      	adds	r0, #8
 8015baa:	f7fe fa65 	bl	8014078 <rcl_service_is_valid>
 8015bae:	b1b0      	cbz	r0, 8015bde <rcl_action_send_cancel_response+0x56>
 8015bb0:	6820      	ldr	r0, [r4, #0]
 8015bb2:	300c      	adds	r0, #12
 8015bb4:	f7f6 fcc2 	bl	800c53c <rcl_publisher_is_valid>
 8015bb8:	b188      	cbz	r0, 8015bde <rcl_action_send_cancel_response+0x56>
 8015bba:	6820      	ldr	r0, [r4, #0]
 8015bbc:	3010      	adds	r0, #16
 8015bbe:	f7f6 fcbd 	bl	800c53c <rcl_publisher_is_valid>
 8015bc2:	b160      	cbz	r0, 8015bde <rcl_action_send_cancel_response+0x56>
 8015bc4:	b19d      	cbz	r5, 8015bee <rcl_action_send_cancel_response+0x66>
 8015bc6:	b196      	cbz	r6, 8015bee <rcl_action_send_cancel_response+0x66>
 8015bc8:	6820      	ldr	r0, [r4, #0]
 8015bca:	4632      	mov	r2, r6
 8015bcc:	4629      	mov	r1, r5
 8015bce:	3004      	adds	r0, #4
 8015bd0:	f7fe fa3a 	bl	8014048 <rcl_send_response>
 8015bd4:	b110      	cbz	r0, 8015bdc <rcl_action_send_cancel_response+0x54>
 8015bd6:	2802      	cmp	r0, #2
 8015bd8:	bf18      	it	ne
 8015bda:	2001      	movne	r0, #1
 8015bdc:	bd70      	pop	{r4, r5, r6, pc}
 8015bde:	f7f7 fc93 	bl	800d508 <rcutils_reset_error>
 8015be2:	f640 0098 	movw	r0, #2200	@ 0x898
 8015be6:	bd70      	pop	{r4, r5, r6, pc}
 8015be8:	f640 0098 	movw	r0, #2200	@ 0x898
 8015bec:	bd70      	pop	{r4, r5, r6, pc}
 8015bee:	200b      	movs	r0, #11
 8015bf0:	bd70      	pop	{r4, r5, r6, pc}
 8015bf2:	f640 0098 	movw	r0, #2200	@ 0x898
 8015bf6:	4770      	bx	lr

08015bf8 <rcl_action_wait_set_add_action_server>:
 8015bf8:	2800      	cmp	r0, #0
 8015bfa:	d04d      	beq.n	8015c98 <rcl_action_wait_set_add_action_server+0xa0>
 8015bfc:	b570      	push	{r4, r5, r6, lr}
 8015bfe:	460c      	mov	r4, r1
 8015c00:	b159      	cbz	r1, 8015c1a <rcl_action_wait_set_add_action_server+0x22>
 8015c02:	4605      	mov	r5, r0
 8015c04:	6808      	ldr	r0, [r1, #0]
 8015c06:	b140      	cbz	r0, 8015c1a <rcl_action_wait_set_add_action_server+0x22>
 8015c08:	4616      	mov	r6, r2
 8015c0a:	f7fe fa35 	bl	8014078 <rcl_service_is_valid>
 8015c0e:	b120      	cbz	r0, 8015c1a <rcl_action_wait_set_add_action_server+0x22>
 8015c10:	6820      	ldr	r0, [r4, #0]
 8015c12:	3004      	adds	r0, #4
 8015c14:	f7fe fa30 	bl	8014078 <rcl_service_is_valid>
 8015c18:	b910      	cbnz	r0, 8015c20 <rcl_action_wait_set_add_action_server+0x28>
 8015c1a:	f640 0098 	movw	r0, #2200	@ 0x898
 8015c1e:	bd70      	pop	{r4, r5, r6, pc}
 8015c20:	6820      	ldr	r0, [r4, #0]
 8015c22:	3008      	adds	r0, #8
 8015c24:	f7fe fa28 	bl	8014078 <rcl_service_is_valid>
 8015c28:	2800      	cmp	r0, #0
 8015c2a:	d0f6      	beq.n	8015c1a <rcl_action_wait_set_add_action_server+0x22>
 8015c2c:	6820      	ldr	r0, [r4, #0]
 8015c2e:	300c      	adds	r0, #12
 8015c30:	f7f6 fc9c 	bl	800c56c <rcl_publisher_is_valid_except_context>
 8015c34:	2800      	cmp	r0, #0
 8015c36:	d0f0      	beq.n	8015c1a <rcl_action_wait_set_add_action_server+0x22>
 8015c38:	6820      	ldr	r0, [r4, #0]
 8015c3a:	3010      	adds	r0, #16
 8015c3c:	f7f6 fc96 	bl	800c56c <rcl_publisher_is_valid_except_context>
 8015c40:	2800      	cmp	r0, #0
 8015c42:	d0ea      	beq.n	8015c1a <rcl_action_wait_set_add_action_server+0x22>
 8015c44:	6821      	ldr	r1, [r4, #0]
 8015c46:	4628      	mov	r0, r5
 8015c48:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 8015c4c:	f7ff face 	bl	80151ec <rcl_wait_set_add_service>
 8015c50:	2800      	cmp	r0, #0
 8015c52:	d1e4      	bne.n	8015c1e <rcl_action_wait_set_add_action_server+0x26>
 8015c54:	6821      	ldr	r1, [r4, #0]
 8015c56:	4628      	mov	r0, r5
 8015c58:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8015c5c:	3104      	adds	r1, #4
 8015c5e:	f7ff fac5 	bl	80151ec <rcl_wait_set_add_service>
 8015c62:	2800      	cmp	r0, #0
 8015c64:	d1db      	bne.n	8015c1e <rcl_action_wait_set_add_action_server+0x26>
 8015c66:	6821      	ldr	r1, [r4, #0]
 8015c68:	4628      	mov	r0, r5
 8015c6a:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8015c6e:	3108      	adds	r1, #8
 8015c70:	f7ff fabc 	bl	80151ec <rcl_wait_set_add_service>
 8015c74:	2800      	cmp	r0, #0
 8015c76:	d1d2      	bne.n	8015c1e <rcl_action_wait_set_add_action_server+0x26>
 8015c78:	6821      	ldr	r1, [r4, #0]
 8015c7a:	4628      	mov	r0, r5
 8015c7c:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8015c80:	3114      	adds	r1, #20
 8015c82:	f7ff fa57 	bl	8015134 <rcl_wait_set_add_timer>
 8015c86:	2800      	cmp	r0, #0
 8015c88:	d1c9      	bne.n	8015c1e <rcl_action_wait_set_add_action_server+0x26>
 8015c8a:	2e00      	cmp	r6, #0
 8015c8c:	d0c7      	beq.n	8015c1e <rcl_action_wait_set_add_action_server+0x26>
 8015c8e:	6823      	ldr	r3, [r4, #0]
 8015c90:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8015c94:	6033      	str	r3, [r6, #0]
 8015c96:	bd70      	pop	{r4, r5, r6, pc}
 8015c98:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015c9c:	4770      	bx	lr
 8015c9e:	bf00      	nop

08015ca0 <rcl_action_server_wait_set_get_entities_ready>:
 8015ca0:	2800      	cmp	r0, #0
 8015ca2:	d05a      	beq.n	8015d5a <rcl_action_server_wait_set_get_entities_ready+0xba>
 8015ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ca6:	460c      	mov	r4, r1
 8015ca8:	b161      	cbz	r1, 8015cc4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015caa:	4605      	mov	r5, r0
 8015cac:	6808      	ldr	r0, [r1, #0]
 8015cae:	b148      	cbz	r0, 8015cc4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015cb0:	4616      	mov	r6, r2
 8015cb2:	461f      	mov	r7, r3
 8015cb4:	f7fe f9e0 	bl	8014078 <rcl_service_is_valid>
 8015cb8:	b120      	cbz	r0, 8015cc4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015cba:	6820      	ldr	r0, [r4, #0]
 8015cbc:	3004      	adds	r0, #4
 8015cbe:	f7fe f9db 	bl	8014078 <rcl_service_is_valid>
 8015cc2:	b910      	cbnz	r0, 8015cca <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8015cc4:	f640 0098 	movw	r0, #2200	@ 0x898
 8015cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015cca:	6820      	ldr	r0, [r4, #0]
 8015ccc:	3008      	adds	r0, #8
 8015cce:	f7fe f9d3 	bl	8014078 <rcl_service_is_valid>
 8015cd2:	2800      	cmp	r0, #0
 8015cd4:	d0f6      	beq.n	8015cc4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015cd6:	6820      	ldr	r0, [r4, #0]
 8015cd8:	300c      	adds	r0, #12
 8015cda:	f7f6 fc47 	bl	800c56c <rcl_publisher_is_valid_except_context>
 8015cde:	2800      	cmp	r0, #0
 8015ce0:	d0f0      	beq.n	8015cc4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015ce2:	6820      	ldr	r0, [r4, #0]
 8015ce4:	3010      	adds	r0, #16
 8015ce6:	f7f6 fc41 	bl	800c56c <rcl_publisher_is_valid_except_context>
 8015cea:	2800      	cmp	r0, #0
 8015cec:	d0ea      	beq.n	8015cc4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8015cee:	b3be      	cbz	r6, 8015d60 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8015cf0:	b3b7      	cbz	r7, 8015d60 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8015cf2:	9b06      	ldr	r3, [sp, #24]
 8015cf4:	b3a3      	cbz	r3, 8015d60 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8015cf6:	9b07      	ldr	r3, [sp, #28]
 8015cf8:	b393      	cbz	r3, 8015d60 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8015cfa:	6821      	ldr	r1, [r4, #0]
 8015cfc:	692a      	ldr	r2, [r5, #16]
 8015cfe:	6a2c      	ldr	r4, [r5, #32]
 8015d00:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 8015d04:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8015d08:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8015d0c:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8015d10:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 8015d14:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8015d18:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8015d1c:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8015d20:	1a64      	subs	r4, r4, r1
 8015d22:	fab4 f484 	clz	r4, r4
 8015d26:	0964      	lsrs	r4, r4, #5
 8015d28:	7034      	strb	r4, [r6, #0]
 8015d2a:	1d0c      	adds	r4, r1, #4
 8015d2c:	1b1b      	subs	r3, r3, r4
 8015d2e:	fab3 f383 	clz	r3, r3
 8015d32:	095b      	lsrs	r3, r3, #5
 8015d34:	f101 0408 	add.w	r4, r1, #8
 8015d38:	703b      	strb	r3, [r7, #0]
 8015d3a:	f101 0314 	add.w	r3, r1, #20
 8015d3e:	1b01      	subs	r1, r0, r4
 8015d40:	1ad3      	subs	r3, r2, r3
 8015d42:	fab1 f181 	clz	r1, r1
 8015d46:	9a06      	ldr	r2, [sp, #24]
 8015d48:	0949      	lsrs	r1, r1, #5
 8015d4a:	7011      	strb	r1, [r2, #0]
 8015d4c:	fab3 f383 	clz	r3, r3
 8015d50:	9a07      	ldr	r2, [sp, #28]
 8015d52:	095b      	lsrs	r3, r3, #5
 8015d54:	2000      	movs	r0, #0
 8015d56:	7013      	strb	r3, [r2, #0]
 8015d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015d5a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015d5e:	4770      	bx	lr
 8015d60:	200b      	movs	r0, #11
 8015d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015d64 <_execute_event_handler>:
 8015d64:	2002      	movs	r0, #2
 8015d66:	4770      	bx	lr

08015d68 <_cancel_goal_event_handler>:
 8015d68:	2003      	movs	r0, #3
 8015d6a:	4770      	bx	lr

08015d6c <_succeed_event_handler>:
 8015d6c:	2004      	movs	r0, #4
 8015d6e:	4770      	bx	lr

08015d70 <_abort_event_handler>:
 8015d70:	2006      	movs	r0, #6
 8015d72:	4770      	bx	lr

08015d74 <_canceled_event_handler>:
 8015d74:	2005      	movs	r0, #5
 8015d76:	4770      	bx	lr

08015d78 <rcl_action_transition_goal_state>:
 8015d78:	b2c2      	uxtb	r2, r0
 8015d7a:	2a06      	cmp	r2, #6
 8015d7c:	d80c      	bhi.n	8015d98 <rcl_action_transition_goal_state+0x20>
 8015d7e:	2904      	cmp	r1, #4
 8015d80:	d80a      	bhi.n	8015d98 <rcl_action_transition_goal_state+0x20>
 8015d82:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8015d86:	b410      	push	{r4}
 8015d88:	1853      	adds	r3, r2, r1
 8015d8a:	4c06      	ldr	r4, [pc, #24]	@ (8015da4 <rcl_action_transition_goal_state+0x2c>)
 8015d8c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8015d90:	b123      	cbz	r3, 8015d9c <rcl_action_transition_goal_state+0x24>
 8015d92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015d96:	4718      	bx	r3
 8015d98:	2000      	movs	r0, #0
 8015d9a:	4770      	bx	lr
 8015d9c:	2000      	movs	r0, #0
 8015d9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015da2:	4770      	bx	lr
 8015da4:	0801b988 	.word	0x0801b988

08015da8 <rcl_action_get_zero_initialized_cancel_response>:
 8015da8:	b510      	push	{r4, lr}
 8015daa:	4c07      	ldr	r4, [pc, #28]	@ (8015dc8 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8015dac:	4686      	mov	lr, r0
 8015dae:	4684      	mov	ip, r0
 8015db0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015db2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015db6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015db8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015dbc:	6823      	ldr	r3, [r4, #0]
 8015dbe:	f8cc 3000 	str.w	r3, [ip]
 8015dc2:	4670      	mov	r0, lr
 8015dc4:	bd10      	pop	{r4, pc}
 8015dc6:	bf00      	nop
 8015dc8:	0801ba14 	.word	0x0801ba14

08015dcc <rclc_action_send_result_request>:
 8015dcc:	b1d0      	cbz	r0, 8015e04 <rclc_action_send_result_request+0x38>
 8015dce:	b500      	push	{lr}
 8015dd0:	4684      	mov	ip, r0
 8015dd2:	b087      	sub	sp, #28
 8015dd4:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8015dd8:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8015ddc:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8015de0:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8015de4:	f10d 0e08 	add.w	lr, sp, #8
 8015de8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015dec:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8015df0:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8015df4:	a902      	add	r1, sp, #8
 8015df6:	3010      	adds	r0, #16
 8015df8:	f7ff fbda 	bl	80155b0 <rcl_action_send_result_request>
 8015dfc:	b920      	cbnz	r0, 8015e08 <rclc_action_send_result_request+0x3c>
 8015dfe:	b007      	add	sp, #28
 8015e00:	f85d fb04 	ldr.w	pc, [sp], #4
 8015e04:	200b      	movs	r0, #11
 8015e06:	4770      	bx	lr
 8015e08:	9001      	str	r0, [sp, #4]
 8015e0a:	f7f7 fb7d 	bl	800d508 <rcutils_reset_error>
 8015e0e:	9801      	ldr	r0, [sp, #4]
 8015e10:	b007      	add	sp, #28
 8015e12:	f85d fb04 	ldr.w	pc, [sp], #4
 8015e16:	bf00      	nop

08015e18 <rclc_action_take_goal_handle>:
 8015e18:	b160      	cbz	r0, 8015e34 <rclc_action_take_goal_handle+0x1c>
 8015e1a:	6883      	ldr	r3, [r0, #8]
 8015e1c:	b143      	cbz	r3, 8015e30 <rclc_action_take_goal_handle+0x18>
 8015e1e:	6819      	ldr	r1, [r3, #0]
 8015e20:	6081      	str	r1, [r0, #8]
 8015e22:	2200      	movs	r2, #0
 8015e24:	721a      	strb	r2, [r3, #8]
 8015e26:	68c1      	ldr	r1, [r0, #12]
 8015e28:	6019      	str	r1, [r3, #0]
 8015e2a:	621a      	str	r2, [r3, #32]
 8015e2c:	849a      	strh	r2, [r3, #36]	@ 0x24
 8015e2e:	60c3      	str	r3, [r0, #12]
 8015e30:	4618      	mov	r0, r3
 8015e32:	4770      	bx	lr
 8015e34:	4603      	mov	r3, r0
 8015e36:	e7fb      	b.n	8015e30 <rclc_action_take_goal_handle+0x18>

08015e38 <rclc_action_remove_used_goal_handle>:
 8015e38:	b180      	cbz	r0, 8015e5c <rclc_action_remove_used_goal_handle+0x24>
 8015e3a:	b179      	cbz	r1, 8015e5c <rclc_action_remove_used_goal_handle+0x24>
 8015e3c:	68c3      	ldr	r3, [r0, #12]
 8015e3e:	4299      	cmp	r1, r3
 8015e40:	d00d      	beq.n	8015e5e <rclc_action_remove_used_goal_handle+0x26>
 8015e42:	b12b      	cbz	r3, 8015e50 <rclc_action_remove_used_goal_handle+0x18>
 8015e44:	681a      	ldr	r2, [r3, #0]
 8015e46:	4291      	cmp	r1, r2
 8015e48:	d003      	beq.n	8015e52 <rclc_action_remove_used_goal_handle+0x1a>
 8015e4a:	4613      	mov	r3, r2
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	d1f9      	bne.n	8015e44 <rclc_action_remove_used_goal_handle+0xc>
 8015e50:	4770      	bx	lr
 8015e52:	680a      	ldr	r2, [r1, #0]
 8015e54:	601a      	str	r2, [r3, #0]
 8015e56:	6883      	ldr	r3, [r0, #8]
 8015e58:	600b      	str	r3, [r1, #0]
 8015e5a:	6081      	str	r1, [r0, #8]
 8015e5c:	4770      	bx	lr
 8015e5e:	680b      	ldr	r3, [r1, #0]
 8015e60:	60c3      	str	r3, [r0, #12]
 8015e62:	e7f8      	b.n	8015e56 <rclc_action_remove_used_goal_handle+0x1e>

08015e64 <rclc_action_find_goal_handle_by_uuid>:
 8015e64:	b538      	push	{r3, r4, r5, lr}
 8015e66:	b180      	cbz	r0, 8015e8a <rclc_action_find_goal_handle_by_uuid+0x26>
 8015e68:	460d      	mov	r5, r1
 8015e6a:	b181      	cbz	r1, 8015e8e <rclc_action_find_goal_handle_by_uuid+0x2a>
 8015e6c:	68c4      	ldr	r4, [r0, #12]
 8015e6e:	b914      	cbnz	r4, 8015e76 <rclc_action_find_goal_handle_by_uuid+0x12>
 8015e70:	e009      	b.n	8015e86 <rclc_action_find_goal_handle_by_uuid+0x22>
 8015e72:	6824      	ldr	r4, [r4, #0]
 8015e74:	b13c      	cbz	r4, 8015e86 <rclc_action_find_goal_handle_by_uuid+0x22>
 8015e76:	f104 0009 	add.w	r0, r4, #9
 8015e7a:	2210      	movs	r2, #16
 8015e7c:	4629      	mov	r1, r5
 8015e7e:	f003 fa1d 	bl	80192bc <memcmp>
 8015e82:	2800      	cmp	r0, #0
 8015e84:	d1f5      	bne.n	8015e72 <rclc_action_find_goal_handle_by_uuid+0xe>
 8015e86:	4620      	mov	r0, r4
 8015e88:	bd38      	pop	{r3, r4, r5, pc}
 8015e8a:	4604      	mov	r4, r0
 8015e8c:	e7fb      	b.n	8015e86 <rclc_action_find_goal_handle_by_uuid+0x22>
 8015e8e:	460c      	mov	r4, r1
 8015e90:	e7f9      	b.n	8015e86 <rclc_action_find_goal_handle_by_uuid+0x22>
 8015e92:	bf00      	nop

08015e94 <rclc_action_find_first_handle_by_status>:
 8015e94:	b140      	cbz	r0, 8015ea8 <rclc_action_find_first_handle_by_status+0x14>
 8015e96:	68c0      	ldr	r0, [r0, #12]
 8015e98:	b910      	cbnz	r0, 8015ea0 <rclc_action_find_first_handle_by_status+0xc>
 8015e9a:	e005      	b.n	8015ea8 <rclc_action_find_first_handle_by_status+0x14>
 8015e9c:	6800      	ldr	r0, [r0, #0]
 8015e9e:	b118      	cbz	r0, 8015ea8 <rclc_action_find_first_handle_by_status+0x14>
 8015ea0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8015ea4:	428b      	cmp	r3, r1
 8015ea6:	d1f9      	bne.n	8015e9c <rclc_action_find_first_handle_by_status+0x8>
 8015ea8:	4770      	bx	lr
 8015eaa:	bf00      	nop

08015eac <rclc_action_find_first_terminated_handle>:
 8015eac:	b140      	cbz	r0, 8015ec0 <rclc_action_find_first_terminated_handle+0x14>
 8015eae:	68c0      	ldr	r0, [r0, #12]
 8015eb0:	b910      	cbnz	r0, 8015eb8 <rclc_action_find_first_terminated_handle+0xc>
 8015eb2:	e005      	b.n	8015ec0 <rclc_action_find_first_terminated_handle+0x14>
 8015eb4:	6800      	ldr	r0, [r0, #0]
 8015eb6:	b118      	cbz	r0, 8015ec0 <rclc_action_find_first_terminated_handle+0x14>
 8015eb8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8015ebc:	2b03      	cmp	r3, #3
 8015ebe:	ddf9      	ble.n	8015eb4 <rclc_action_find_first_terminated_handle+0x8>
 8015ec0:	4770      	bx	lr
 8015ec2:	bf00      	nop

08015ec4 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8015ec4:	b170      	cbz	r0, 8015ee4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8015ec6:	68c0      	ldr	r0, [r0, #12]
 8015ec8:	b160      	cbz	r0, 8015ee4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8015eca:	b410      	push	{r4}
 8015ecc:	e001      	b.n	8015ed2 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8015ece:	6800      	ldr	r0, [r0, #0]
 8015ed0:	b128      	cbz	r0, 8015ede <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8015ed2:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8015ed6:	4299      	cmp	r1, r3
 8015ed8:	bf08      	it	eq
 8015eda:	4294      	cmpeq	r4, r2
 8015edc:	d1f7      	bne.n	8015ece <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8015ede:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015ee2:	4770      	bx	lr
 8015ee4:	4770      	bx	lr
 8015ee6:	bf00      	nop

08015ee8 <rclc_action_find_handle_by_result_request_sequence_number>:
 8015ee8:	b170      	cbz	r0, 8015f08 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8015eea:	68c0      	ldr	r0, [r0, #12]
 8015eec:	b160      	cbz	r0, 8015f08 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8015eee:	b410      	push	{r4}
 8015ef0:	e001      	b.n	8015ef6 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8015ef2:	6800      	ldr	r0, [r0, #0]
 8015ef4:	b128      	cbz	r0, 8015f02 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8015ef6:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8015efa:	4299      	cmp	r1, r3
 8015efc:	bf08      	it	eq
 8015efe:	4294      	cmpeq	r4, r2
 8015f00:	d1f7      	bne.n	8015ef2 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8015f02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015f06:	4770      	bx	lr
 8015f08:	4770      	bx	lr
 8015f0a:	bf00      	nop

08015f0c <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8015f0c:	b170      	cbz	r0, 8015f2c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8015f0e:	68c0      	ldr	r0, [r0, #12]
 8015f10:	b160      	cbz	r0, 8015f2c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8015f12:	b410      	push	{r4}
 8015f14:	e001      	b.n	8015f1a <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8015f16:	6800      	ldr	r0, [r0, #0]
 8015f18:	b128      	cbz	r0, 8015f26 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8015f1a:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8015f1e:	4299      	cmp	r1, r3
 8015f20:	bf08      	it	eq
 8015f22:	4294      	cmpeq	r4, r2
 8015f24:	d1f7      	bne.n	8015f16 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8015f26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015f2a:	4770      	bx	lr
 8015f2c:	4770      	bx	lr
 8015f2e:	bf00      	nop

08015f30 <rclc_action_find_first_handle_with_goal_response>:
 8015f30:	b140      	cbz	r0, 8015f44 <rclc_action_find_first_handle_with_goal_response+0x14>
 8015f32:	68c0      	ldr	r0, [r0, #12]
 8015f34:	b910      	cbnz	r0, 8015f3c <rclc_action_find_first_handle_with_goal_response+0xc>
 8015f36:	e005      	b.n	8015f44 <rclc_action_find_first_handle_with_goal_response+0x14>
 8015f38:	6800      	ldr	r0, [r0, #0]
 8015f3a:	b118      	cbz	r0, 8015f44 <rclc_action_find_first_handle_with_goal_response+0x14>
 8015f3c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d0f9      	beq.n	8015f38 <rclc_action_find_first_handle_with_goal_response+0x8>
 8015f44:	4770      	bx	lr
 8015f46:	bf00      	nop

08015f48 <rclc_action_find_first_handle_with_result_response>:
 8015f48:	b140      	cbz	r0, 8015f5c <rclc_action_find_first_handle_with_result_response+0x14>
 8015f4a:	68c0      	ldr	r0, [r0, #12]
 8015f4c:	b910      	cbnz	r0, 8015f54 <rclc_action_find_first_handle_with_result_response+0xc>
 8015f4e:	e005      	b.n	8015f5c <rclc_action_find_first_handle_with_result_response+0x14>
 8015f50:	6800      	ldr	r0, [r0, #0]
 8015f52:	b118      	cbz	r0, 8015f5c <rclc_action_find_first_handle_with_result_response+0x14>
 8015f54:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8015f58:	2b00      	cmp	r3, #0
 8015f5a:	d0f9      	beq.n	8015f50 <rclc_action_find_first_handle_with_result_response+0x8>
 8015f5c:	4770      	bx	lr
 8015f5e:	bf00      	nop

08015f60 <rclc_action_server_response_goal_request>:
 8015f60:	b198      	cbz	r0, 8015f8a <rclc_action_server_response_goal_request+0x2a>
 8015f62:	b510      	push	{r4, lr}
 8015f64:	6844      	ldr	r4, [r0, #4]
 8015f66:	b086      	sub	sp, #24
 8015f68:	2200      	movs	r2, #0
 8015f6a:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8015f6e:	460b      	mov	r3, r1
 8015f70:	9205      	str	r2, [sp, #20]
 8015f72:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8015f76:	aa03      	add	r2, sp, #12
 8015f78:	f104 0010 	add.w	r0, r4, #16
 8015f7c:	f88d 300c 	strb.w	r3, [sp, #12]
 8015f80:	f7ff fd4a 	bl	8015a18 <rcl_action_send_goal_response>
 8015f84:	b918      	cbnz	r0, 8015f8e <rclc_action_server_response_goal_request+0x2e>
 8015f86:	b006      	add	sp, #24
 8015f88:	bd10      	pop	{r4, pc}
 8015f8a:	200b      	movs	r0, #11
 8015f8c:	4770      	bx	lr
 8015f8e:	9001      	str	r0, [sp, #4]
 8015f90:	f7f7 faba 	bl	800d508 <rcutils_reset_error>
 8015f94:	9801      	ldr	r0, [sp, #4]
 8015f96:	b006      	add	sp, #24
 8015f98:	bd10      	pop	{r4, pc}
 8015f9a:	bf00      	nop
 8015f9c:	0000      	movs	r0, r0
	...

08015fa0 <rclc_action_server_goal_cancel_accept>:
 8015fa0:	b310      	cbz	r0, 8015fe8 <rclc_action_server_goal_cancel_accept+0x48>
 8015fa2:	b510      	push	{r4, lr}
 8015fa4:	b090      	sub	sp, #64	@ 0x40
 8015fa6:	4604      	mov	r4, r0
 8015fa8:	a806      	add	r0, sp, #24
 8015faa:	f7ff fefd 	bl	8015da8 <rcl_action_get_zero_initialized_cancel_response>
 8015fae:	2300      	movs	r3, #0
 8015fb0:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8015fb4:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8015fb8:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8015fbc:	f88d 3018 	strb.w	r3, [sp, #24]
 8015fc0:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8015fc4:	f8cd d01c 	str.w	sp, [sp, #28]
 8015fc8:	46ec      	mov	ip, sp
 8015fca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015fce:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8015ff0 <rclc_action_server_goal_cancel_accept+0x50>
 8015fd2:	6860      	ldr	r0, [r4, #4]
 8015fd4:	aa06      	add	r2, sp, #24
 8015fd6:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8015fda:	3010      	adds	r0, #16
 8015fdc:	ed8d 7b08 	vstr	d7, [sp, #32]
 8015fe0:	f7ff fdd2 	bl	8015b88 <rcl_action_send_cancel_response>
 8015fe4:	b010      	add	sp, #64	@ 0x40
 8015fe6:	bd10      	pop	{r4, pc}
 8015fe8:	200b      	movs	r0, #11
 8015fea:	4770      	bx	lr
 8015fec:	f3af 8000 	nop.w
 8015ff0:	00000001 	.word	0x00000001
 8015ff4:	00000001 	.word	0x00000001

08015ff8 <rclc_action_server_goal_cancel_reject>:
 8015ff8:	b082      	sub	sp, #8
 8015ffa:	b530      	push	{r4, r5, lr}
 8015ffc:	b08b      	sub	sp, #44	@ 0x2c
 8015ffe:	ac0e      	add	r4, sp, #56	@ 0x38
 8016000:	e884 000c 	stmia.w	r4, {r2, r3}
 8016004:	b188      	cbz	r0, 801602a <rclc_action_server_goal_cancel_reject+0x32>
 8016006:	4604      	mov	r4, r0
 8016008:	a801      	add	r0, sp, #4
 801600a:	460d      	mov	r5, r1
 801600c:	f7ff fecc 	bl	8015da8 <rcl_action_get_zero_initialized_cancel_response>
 8016010:	aa01      	add	r2, sp, #4
 8016012:	a90e      	add	r1, sp, #56	@ 0x38
 8016014:	f104 0010 	add.w	r0, r4, #16
 8016018:	f88d 5004 	strb.w	r5, [sp, #4]
 801601c:	f7ff fdb4 	bl	8015b88 <rcl_action_send_cancel_response>
 8016020:	b00b      	add	sp, #44	@ 0x2c
 8016022:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016026:	b002      	add	sp, #8
 8016028:	4770      	bx	lr
 801602a:	200b      	movs	r0, #11
 801602c:	b00b      	add	sp, #44	@ 0x2c
 801602e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016032:	b002      	add	sp, #8
 8016034:	4770      	bx	lr
 8016036:	bf00      	nop

08016038 <__atomic_load_8>:
 8016038:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 801603c:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8016040:	4a15      	ldr	r2, [pc, #84]	@ (8016098 <__atomic_load_8+0x60>)
 8016042:	4b16      	ldr	r3, [pc, #88]	@ (801609c <__atomic_load_8+0x64>)
 8016044:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8016048:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801604c:	fb02 f101 	mul.w	r1, r2, r1
 8016050:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8016054:	fba3 2301 	umull	r2, r3, r3, r1
 8016058:	091b      	lsrs	r3, r3, #4
 801605a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801605e:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8016062:	b4d0      	push	{r4, r6, r7}
 8016064:	4c0e      	ldr	r4, [pc, #56]	@ (80160a0 <__atomic_load_8+0x68>)
 8016066:	1ac9      	subs	r1, r1, r3
 8016068:	1862      	adds	r2, r4, r1
 801606a:	f04f 0c01 	mov.w	ip, #1
 801606e:	e8d2 3f4f 	ldrexb	r3, [r2]
 8016072:	e8c2 cf46 	strexb	r6, ip, [r2]
 8016076:	2e00      	cmp	r6, #0
 8016078:	d1f9      	bne.n	801606e <__atomic_load_8+0x36>
 801607a:	f3bf 8f5b 	dmb	ish
 801607e:	b2db      	uxtb	r3, r3
 8016080:	2b00      	cmp	r3, #0
 8016082:	d1f4      	bne.n	801606e <__atomic_load_8+0x36>
 8016084:	e9d0 6700 	ldrd	r6, r7, [r0]
 8016088:	f3bf 8f5b 	dmb	ish
 801608c:	5463      	strb	r3, [r4, r1]
 801608e:	4630      	mov	r0, r6
 8016090:	4639      	mov	r1, r7
 8016092:	bcd0      	pop	{r4, r6, r7}
 8016094:	4770      	bx	lr
 8016096:	bf00      	nop
 8016098:	27d4eb2d 	.word	0x27d4eb2d
 801609c:	b21642c9 	.word	0xb21642c9
 80160a0:	2000b938 	.word	0x2000b938

080160a4 <__atomic_store_8>:
 80160a4:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80160a8:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 80160ac:	b570      	push	{r4, r5, r6, lr}
 80160ae:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80160b2:	4c14      	ldr	r4, [pc, #80]	@ (8016104 <__atomic_store_8+0x60>)
 80160b4:	4d14      	ldr	r5, [pc, #80]	@ (8016108 <__atomic_store_8+0x64>)
 80160b6:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80160ba:	fb04 f101 	mul.w	r1, r4, r1
 80160be:	4c13      	ldr	r4, [pc, #76]	@ (801610c <__atomic_store_8+0x68>)
 80160c0:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80160c4:	fba4 4e01 	umull	r4, lr, r4, r1
 80160c8:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 80160cc:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 80160d0:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 80160d4:	eba1 0e0e 	sub.w	lr, r1, lr
 80160d8:	eb05 0c0e 	add.w	ip, r5, lr
 80160dc:	f04f 0401 	mov.w	r4, #1
 80160e0:	e8dc 1f4f 	ldrexb	r1, [ip]
 80160e4:	e8cc 4f46 	strexb	r6, r4, [ip]
 80160e8:	2e00      	cmp	r6, #0
 80160ea:	d1f9      	bne.n	80160e0 <__atomic_store_8+0x3c>
 80160ec:	f3bf 8f5b 	dmb	ish
 80160f0:	b2c9      	uxtb	r1, r1
 80160f2:	2900      	cmp	r1, #0
 80160f4:	d1f4      	bne.n	80160e0 <__atomic_store_8+0x3c>
 80160f6:	e9c0 2300 	strd	r2, r3, [r0]
 80160fa:	f3bf 8f5b 	dmb	ish
 80160fe:	f805 100e 	strb.w	r1, [r5, lr]
 8016102:	bd70      	pop	{r4, r5, r6, pc}
 8016104:	27d4eb2d 	.word	0x27d4eb2d
 8016108:	2000b938 	.word	0x2000b938
 801610c:	b21642c9 	.word	0xb21642c9

08016110 <__atomic_exchange_8>:
 8016110:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8016114:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8016118:	4916      	ldr	r1, [pc, #88]	@ (8016174 <__atomic_exchange_8+0x64>)
 801611a:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 801611e:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8016122:	fb01 fc0c 	mul.w	ip, r1, ip
 8016126:	4914      	ldr	r1, [pc, #80]	@ (8016178 <__atomic_exchange_8+0x68>)
 8016128:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 801612c:	b570      	push	{r4, r5, r6, lr}
 801612e:	4605      	mov	r5, r0
 8016130:	fba1 010c 	umull	r0, r1, r1, ip
 8016134:	0909      	lsrs	r1, r1, #4
 8016136:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 801613a:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 801613e:	4e0f      	ldr	r6, [pc, #60]	@ (801617c <__atomic_exchange_8+0x6c>)
 8016140:	ebac 0c01 	sub.w	ip, ip, r1
 8016144:	eb06 010c 	add.w	r1, r6, ip
 8016148:	f04f 0e01 	mov.w	lr, #1
 801614c:	e8d1 4f4f 	ldrexb	r4, [r1]
 8016150:	e8c1 ef40 	strexb	r0, lr, [r1]
 8016154:	2800      	cmp	r0, #0
 8016156:	d1f9      	bne.n	801614c <__atomic_exchange_8+0x3c>
 8016158:	f3bf 8f5b 	dmb	ish
 801615c:	b2e4      	uxtb	r4, r4
 801615e:	2c00      	cmp	r4, #0
 8016160:	d1f4      	bne.n	801614c <__atomic_exchange_8+0x3c>
 8016162:	e9d5 0100 	ldrd	r0, r1, [r5]
 8016166:	e9c5 2300 	strd	r2, r3, [r5]
 801616a:	f3bf 8f5b 	dmb	ish
 801616e:	f806 400c 	strb.w	r4, [r6, ip]
 8016172:	bd70      	pop	{r4, r5, r6, pc}
 8016174:	27d4eb2d 	.word	0x27d4eb2d
 8016178:	b21642c9 	.word	0xb21642c9
 801617c:	2000b938 	.word	0x2000b938

08016180 <rcutils_get_env>:
 8016180:	b168      	cbz	r0, 801619e <rcutils_get_env+0x1e>
 8016182:	b510      	push	{r4, lr}
 8016184:	460c      	mov	r4, r1
 8016186:	b129      	cbz	r1, 8016194 <rcutils_get_env+0x14>
 8016188:	f002 fc06 	bl	8018998 <getenv>
 801618c:	b120      	cbz	r0, 8016198 <rcutils_get_env+0x18>
 801618e:	6020      	str	r0, [r4, #0]
 8016190:	2000      	movs	r0, #0
 8016192:	bd10      	pop	{r4, pc}
 8016194:	4803      	ldr	r0, [pc, #12]	@ (80161a4 <rcutils_get_env+0x24>)
 8016196:	bd10      	pop	{r4, pc}
 8016198:	4b03      	ldr	r3, [pc, #12]	@ (80161a8 <rcutils_get_env+0x28>)
 801619a:	6023      	str	r3, [r4, #0]
 801619c:	bd10      	pop	{r4, pc}
 801619e:	4803      	ldr	r0, [pc, #12]	@ (80161ac <rcutils_get_env+0x2c>)
 80161a0:	4770      	bx	lr
 80161a2:	bf00      	nop
 80161a4:	0801ba54 	.word	0x0801ba54
 80161a8:	0801be2c 	.word	0x0801be2c
 80161ac:	0801ba38 	.word	0x0801ba38

080161b0 <rcutils_is_directory>:
 80161b0:	2000      	movs	r0, #0
 80161b2:	4770      	bx	lr

080161b4 <rcutils_join_path>:
 80161b4:	b082      	sub	sp, #8
 80161b6:	e88d 000c 	stmia.w	sp, {r2, r3}
 80161ba:	2000      	movs	r0, #0
 80161bc:	b002      	add	sp, #8
 80161be:	4770      	bx	lr

080161c0 <rcutils_to_native_path>:
 80161c0:	b084      	sub	sp, #16
 80161c2:	a801      	add	r0, sp, #4
 80161c4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80161c8:	b004      	add	sp, #16
 80161ca:	2000      	movs	r0, #0
 80161cc:	4770      	bx	lr
 80161ce:	bf00      	nop

080161d0 <rcutils_format_string_limit>:
 80161d0:	b40f      	push	{r0, r1, r2, r3}
 80161d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80161d4:	b083      	sub	sp, #12
 80161d6:	ac08      	add	r4, sp, #32
 80161d8:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 80161da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80161de:	b34e      	cbz	r6, 8016234 <rcutils_format_string_limit+0x64>
 80161e0:	a808      	add	r0, sp, #32
 80161e2:	f7f7 f96b 	bl	800d4bc <rcutils_allocator_is_valid>
 80161e6:	b328      	cbz	r0, 8016234 <rcutils_format_string_limit+0x64>
 80161e8:	2100      	movs	r1, #0
 80161ea:	ab0f      	add	r3, sp, #60	@ 0x3c
 80161ec:	4632      	mov	r2, r6
 80161ee:	4608      	mov	r0, r1
 80161f0:	e9cd 3300 	strd	r3, r3, [sp]
 80161f4:	f000 f8f4 	bl	80163e0 <rcutils_vsnprintf>
 80161f8:	1c43      	adds	r3, r0, #1
 80161fa:	4605      	mov	r5, r0
 80161fc:	d01a      	beq.n	8016234 <rcutils_format_string_limit+0x64>
 80161fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016200:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016202:	1c47      	adds	r7, r0, #1
 8016204:	429f      	cmp	r7, r3
 8016206:	bf84      	itt	hi
 8016208:	461f      	movhi	r7, r3
 801620a:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 801620e:	4638      	mov	r0, r7
 8016210:	9b08      	ldr	r3, [sp, #32]
 8016212:	4798      	blx	r3
 8016214:	4604      	mov	r4, r0
 8016216:	b168      	cbz	r0, 8016234 <rcutils_format_string_limit+0x64>
 8016218:	9b01      	ldr	r3, [sp, #4]
 801621a:	4632      	mov	r2, r6
 801621c:	4639      	mov	r1, r7
 801621e:	f000 f8df 	bl	80163e0 <rcutils_vsnprintf>
 8016222:	2800      	cmp	r0, #0
 8016224:	db02      	blt.n	801622c <rcutils_format_string_limit+0x5c>
 8016226:	2300      	movs	r3, #0
 8016228:	5563      	strb	r3, [r4, r5]
 801622a:	e004      	b.n	8016236 <rcutils_format_string_limit+0x66>
 801622c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801622e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016230:	4620      	mov	r0, r4
 8016232:	4798      	blx	r3
 8016234:	2400      	movs	r4, #0
 8016236:	4620      	mov	r0, r4
 8016238:	b003      	add	sp, #12
 801623a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801623e:	b004      	add	sp, #16
 8016240:	4770      	bx	lr
 8016242:	bf00      	nop

08016244 <rcutils_repl_str>:
 8016244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016248:	ed2d 8b02 	vpush	{d8}
 801624c:	b087      	sub	sp, #28
 801624e:	4680      	mov	r8, r0
 8016250:	4608      	mov	r0, r1
 8016252:	f8cd 8004 	str.w	r8, [sp, #4]
 8016256:	ee08 2a10 	vmov	s16, r2
 801625a:	468a      	mov	sl, r1
 801625c:	4699      	mov	r9, r3
 801625e:	f7e9 ffe9 	bl	8000234 <strlen>
 8016262:	2600      	movs	r6, #0
 8016264:	4647      	mov	r7, r8
 8016266:	9002      	str	r0, [sp, #8]
 8016268:	46b3      	mov	fp, r6
 801626a:	2510      	movs	r5, #16
 801626c:	46b0      	mov	r8, r6
 801626e:	e01d      	b.n	80162ac <rcutils_repl_str+0x68>
 8016270:	f10b 0b01 	add.w	fp, fp, #1
 8016274:	455e      	cmp	r6, fp
 8016276:	d211      	bcs.n	801629c <rcutils_repl_str+0x58>
 8016278:	442e      	add	r6, r5
 801627a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801627e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8016282:	00b1      	lsls	r1, r6, #2
 8016284:	4798      	blx	r3
 8016286:	2800      	cmp	r0, #0
 8016288:	f000 8088 	beq.w	801639c <rcutils_repl_str+0x158>
 801628c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016290:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8016294:	4680      	mov	r8, r0
 8016296:	bf28      	it	cs
 8016298:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 801629c:	9a01      	ldr	r2, [sp, #4]
 801629e:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 80162a2:	1aa2      	subs	r2, r4, r2
 80162a4:	f843 2c04 	str.w	r2, [r3, #-4]
 80162a8:	9b02      	ldr	r3, [sp, #8]
 80162aa:	18e7      	adds	r7, r4, r3
 80162ac:	4651      	mov	r1, sl
 80162ae:	4638      	mov	r0, r7
 80162b0:	f003 f855 	bl	801935e <strstr>
 80162b4:	4604      	mov	r4, r0
 80162b6:	4640      	mov	r0, r8
 80162b8:	2c00      	cmp	r4, #0
 80162ba:	d1d9      	bne.n	8016270 <rcutils_repl_str+0x2c>
 80162bc:	46b8      	mov	r8, r7
 80162be:	4607      	mov	r7, r0
 80162c0:	4640      	mov	r0, r8
 80162c2:	f7e9 ffb7 	bl	8000234 <strlen>
 80162c6:	9b01      	ldr	r3, [sp, #4]
 80162c8:	eba8 0303 	sub.w	r3, r8, r3
 80162cc:	181c      	adds	r4, r3, r0
 80162ce:	9404      	str	r4, [sp, #16]
 80162d0:	f1bb 0f00 	cmp.w	fp, #0
 80162d4:	d04a      	beq.n	801636c <rcutils_repl_str+0x128>
 80162d6:	ee18 0a10 	vmov	r0, s16
 80162da:	f7e9 ffab 	bl	8000234 <strlen>
 80162de:	9b02      	ldr	r3, [sp, #8]
 80162e0:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80162e4:	1ac3      	subs	r3, r0, r3
 80162e6:	fb0b 4303 	mla	r3, fp, r3, r4
 80162ea:	461a      	mov	r2, r3
 80162ec:	9305      	str	r3, [sp, #20]
 80162ee:	4606      	mov	r6, r0
 80162f0:	f8d9 3000 	ldr.w	r3, [r9]
 80162f4:	1c50      	adds	r0, r2, #1
 80162f6:	4798      	blx	r3
 80162f8:	9003      	str	r0, [sp, #12]
 80162fa:	2800      	cmp	r0, #0
 80162fc:	d04f      	beq.n	801639e <rcutils_repl_str+0x15a>
 80162fe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016302:	683a      	ldr	r2, [r7, #0]
 8016304:	4641      	mov	r1, r8
 8016306:	f003 f8cc 	bl	80194a2 <memcpy>
 801630a:	683d      	ldr	r5, [r7, #0]
 801630c:	9b03      	ldr	r3, [sp, #12]
 801630e:	9701      	str	r7, [sp, #4]
 8016310:	46ba      	mov	sl, r7
 8016312:	441d      	add	r5, r3
 8016314:	9f02      	ldr	r7, [sp, #8]
 8016316:	f8cd 9008 	str.w	r9, [sp, #8]
 801631a:	2401      	movs	r4, #1
 801631c:	46d1      	mov	r9, sl
 801631e:	ee18 aa10 	vmov	sl, s16
 8016322:	e00a      	b.n	801633a <rcutils_repl_str+0xf6>
 8016324:	f8d9 5000 	ldr.w	r5, [r9]
 8016328:	1aaa      	subs	r2, r5, r2
 801632a:	1885      	adds	r5, r0, r2
 801632c:	f003 f8b9 	bl	80194a2 <memcpy>
 8016330:	45a3      	cmp	fp, r4
 8016332:	f104 0201 	add.w	r2, r4, #1
 8016336:	d935      	bls.n	80163a4 <rcutils_repl_str+0x160>
 8016338:	4614      	mov	r4, r2
 801633a:	4632      	mov	r2, r6
 801633c:	4651      	mov	r1, sl
 801633e:	4628      	mov	r0, r5
 8016340:	f003 f8af 	bl	80194a2 <memcpy>
 8016344:	f859 2b04 	ldr.w	r2, [r9], #4
 8016348:	45a3      	cmp	fp, r4
 801634a:	443a      	add	r2, r7
 801634c:	eb05 0006 	add.w	r0, r5, r6
 8016350:	eb08 0102 	add.w	r1, r8, r2
 8016354:	d1e6      	bne.n	8016324 <rcutils_repl_str+0xe0>
 8016356:	9b04      	ldr	r3, [sp, #16]
 8016358:	1a9a      	subs	r2, r3, r2
 801635a:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 801635e:	f003 f8a0 	bl	80194a2 <memcpy>
 8016362:	9a03      	ldr	r2, [sp, #12]
 8016364:	9905      	ldr	r1, [sp, #20]
 8016366:	2300      	movs	r3, #0
 8016368:	5453      	strb	r3, [r2, r1]
 801636a:	e00b      	b.n	8016384 <rcutils_repl_str+0x140>
 801636c:	4620      	mov	r0, r4
 801636e:	f8d9 3000 	ldr.w	r3, [r9]
 8016372:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8016376:	3001      	adds	r0, #1
 8016378:	4798      	blx	r3
 801637a:	9003      	str	r0, [sp, #12]
 801637c:	b110      	cbz	r0, 8016384 <rcutils_repl_str+0x140>
 801637e:	9901      	ldr	r1, [sp, #4]
 8016380:	f003 f887 	bl	8019492 <strcpy>
 8016384:	4638      	mov	r0, r7
 8016386:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801638a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801638e:	4798      	blx	r3
 8016390:	9803      	ldr	r0, [sp, #12]
 8016392:	b007      	add	sp, #28
 8016394:	ecbd 8b02 	vpop	{d8}
 8016398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801639c:	4647      	mov	r7, r8
 801639e:	2300      	movs	r3, #0
 80163a0:	9303      	str	r3, [sp, #12]
 80163a2:	e7ef      	b.n	8016384 <rcutils_repl_str+0x140>
 80163a4:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 80163a8:	e7db      	b.n	8016362 <rcutils_repl_str+0x11e>
 80163aa:	bf00      	nop

080163ac <rcutils_snprintf>:
 80163ac:	b40c      	push	{r2, r3}
 80163ae:	b530      	push	{r4, r5, lr}
 80163b0:	b083      	sub	sp, #12
 80163b2:	ab06      	add	r3, sp, #24
 80163b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80163b8:	9301      	str	r3, [sp, #4]
 80163ba:	b152      	cbz	r2, 80163d2 <rcutils_snprintf+0x26>
 80163bc:	b138      	cbz	r0, 80163ce <rcutils_snprintf+0x22>
 80163be:	b141      	cbz	r1, 80163d2 <rcutils_snprintf+0x26>
 80163c0:	f002 feda 	bl	8019178 <vsniprintf>
 80163c4:	b003      	add	sp, #12
 80163c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80163ca:	b002      	add	sp, #8
 80163cc:	4770      	bx	lr
 80163ce:	2900      	cmp	r1, #0
 80163d0:	d0f6      	beq.n	80163c0 <rcutils_snprintf+0x14>
 80163d2:	f003 f831 	bl	8019438 <__errno>
 80163d6:	2316      	movs	r3, #22
 80163d8:	6003      	str	r3, [r0, #0]
 80163da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80163de:	e7f1      	b.n	80163c4 <rcutils_snprintf+0x18>

080163e0 <rcutils_vsnprintf>:
 80163e0:	b570      	push	{r4, r5, r6, lr}
 80163e2:	b13a      	cbz	r2, 80163f4 <rcutils_vsnprintf+0x14>
 80163e4:	b120      	cbz	r0, 80163f0 <rcutils_vsnprintf+0x10>
 80163e6:	b129      	cbz	r1, 80163f4 <rcutils_vsnprintf+0x14>
 80163e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80163ec:	f002 bec4 	b.w	8019178 <vsniprintf>
 80163f0:	2900      	cmp	r1, #0
 80163f2:	d0f9      	beq.n	80163e8 <rcutils_vsnprintf+0x8>
 80163f4:	f003 f820 	bl	8019438 <__errno>
 80163f8:	2316      	movs	r3, #22
 80163fa:	6003      	str	r3, [r0, #0]
 80163fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016400:	bd70      	pop	{r4, r5, r6, pc}
 8016402:	bf00      	nop

08016404 <rcutils_strdup>:
 8016404:	b084      	sub	sp, #16
 8016406:	b570      	push	{r4, r5, r6, lr}
 8016408:	b082      	sub	sp, #8
 801640a:	ac07      	add	r4, sp, #28
 801640c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8016410:	4605      	mov	r5, r0
 8016412:	b1b0      	cbz	r0, 8016442 <rcutils_strdup+0x3e>
 8016414:	f7e9 ff0e 	bl	8000234 <strlen>
 8016418:	1c42      	adds	r2, r0, #1
 801641a:	9b07      	ldr	r3, [sp, #28]
 801641c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801641e:	9201      	str	r2, [sp, #4]
 8016420:	4606      	mov	r6, r0
 8016422:	4610      	mov	r0, r2
 8016424:	4798      	blx	r3
 8016426:	4604      	mov	r4, r0
 8016428:	b128      	cbz	r0, 8016436 <rcutils_strdup+0x32>
 801642a:	9a01      	ldr	r2, [sp, #4]
 801642c:	4629      	mov	r1, r5
 801642e:	f003 f838 	bl	80194a2 <memcpy>
 8016432:	2300      	movs	r3, #0
 8016434:	55a3      	strb	r3, [r4, r6]
 8016436:	4620      	mov	r0, r4
 8016438:	b002      	add	sp, #8
 801643a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801643e:	b004      	add	sp, #16
 8016440:	4770      	bx	lr
 8016442:	4604      	mov	r4, r0
 8016444:	e7f7      	b.n	8016436 <rcutils_strdup+0x32>
 8016446:	bf00      	nop

08016448 <rcutils_strndup>:
 8016448:	b082      	sub	sp, #8
 801644a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801644c:	ac06      	add	r4, sp, #24
 801644e:	e884 000c 	stmia.w	r4, {r2, r3}
 8016452:	4605      	mov	r5, r0
 8016454:	b188      	cbz	r0, 801647a <rcutils_strndup+0x32>
 8016456:	1c4f      	adds	r7, r1, #1
 8016458:	460e      	mov	r6, r1
 801645a:	4638      	mov	r0, r7
 801645c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801645e:	4790      	blx	r2
 8016460:	4604      	mov	r4, r0
 8016462:	b128      	cbz	r0, 8016470 <rcutils_strndup+0x28>
 8016464:	463a      	mov	r2, r7
 8016466:	4629      	mov	r1, r5
 8016468:	f003 f81b 	bl	80194a2 <memcpy>
 801646c:	2300      	movs	r3, #0
 801646e:	55a3      	strb	r3, [r4, r6]
 8016470:	4620      	mov	r0, r4
 8016472:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016476:	b002      	add	sp, #8
 8016478:	4770      	bx	lr
 801647a:	4604      	mov	r4, r0
 801647c:	e7f8      	b.n	8016470 <rcutils_strndup+0x28>
 801647e:	bf00      	nop

08016480 <rcutils_get_zero_initialized_string_map>:
 8016480:	4b01      	ldr	r3, [pc, #4]	@ (8016488 <rcutils_get_zero_initialized_string_map+0x8>)
 8016482:	2000      	movs	r0, #0
 8016484:	6018      	str	r0, [r3, #0]
 8016486:	4770      	bx	lr
 8016488:	2000b950 	.word	0x2000b950

0801648c <rcutils_string_map_reserve>:
 801648c:	2800      	cmp	r0, #0
 801648e:	d05f      	beq.n	8016550 <rcutils_string_map_reserve+0xc4>
 8016490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016494:	460c      	mov	r4, r1
 8016496:	6801      	ldr	r1, [r0, #0]
 8016498:	b082      	sub	sp, #8
 801649a:	4605      	mov	r5, r0
 801649c:	b129      	cbz	r1, 80164aa <rcutils_string_map_reserve+0x1e>
 801649e:	68cb      	ldr	r3, [r1, #12]
 80164a0:	42a3      	cmp	r3, r4
 80164a2:	d906      	bls.n	80164b2 <rcutils_string_map_reserve+0x26>
 80164a4:	461c      	mov	r4, r3
 80164a6:	2900      	cmp	r1, #0
 80164a8:	d1f9      	bne.n	801649e <rcutils_string_map_reserve+0x12>
 80164aa:	201f      	movs	r0, #31
 80164ac:	b002      	add	sp, #8
 80164ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80164b2:	688b      	ldr	r3, [r1, #8]
 80164b4:	42a3      	cmp	r3, r4
 80164b6:	d047      	beq.n	8016548 <rcutils_string_map_reserve+0xbc>
 80164b8:	6a0e      	ldr	r6, [r1, #32]
 80164ba:	2c00      	cmp	r4, #0
 80164bc:	d034      	beq.n	8016528 <rcutils_string_map_reserve+0x9c>
 80164be:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80164c2:	d243      	bcs.n	801654c <rcutils_string_map_reserve+0xc0>
 80164c4:	00a7      	lsls	r7, r4, #2
 80164c6:	f8d1 8018 	ldr.w	r8, [r1, #24]
 80164ca:	6808      	ldr	r0, [r1, #0]
 80164cc:	4632      	mov	r2, r6
 80164ce:	4639      	mov	r1, r7
 80164d0:	47c0      	blx	r8
 80164d2:	2800      	cmp	r0, #0
 80164d4:	d03a      	beq.n	801654c <rcutils_string_map_reserve+0xc0>
 80164d6:	682b      	ldr	r3, [r5, #0]
 80164d8:	4632      	mov	r2, r6
 80164da:	6018      	str	r0, [r3, #0]
 80164dc:	4639      	mov	r1, r7
 80164de:	6858      	ldr	r0, [r3, #4]
 80164e0:	47c0      	blx	r8
 80164e2:	2800      	cmp	r0, #0
 80164e4:	d032      	beq.n	801654c <rcutils_string_map_reserve+0xc0>
 80164e6:	682d      	ldr	r5, [r5, #0]
 80164e8:	68ab      	ldr	r3, [r5, #8]
 80164ea:	6068      	str	r0, [r5, #4]
 80164ec:	42a3      	cmp	r3, r4
 80164ee:	d226      	bcs.n	801653e <rcutils_string_map_reserve+0xb2>
 80164f0:	682a      	ldr	r2, [r5, #0]
 80164f2:	eb00 0c07 	add.w	ip, r0, r7
 80164f6:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 80164fa:	45e6      	cmp	lr, ip
 80164fc:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8016500:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8016504:	d203      	bcs.n	801650e <rcutils_string_map_reserve+0x82>
 8016506:	eb02 0c07 	add.w	ip, r2, r7
 801650a:	4566      	cmp	r6, ip
 801650c:	d322      	bcc.n	8016554 <rcutils_string_map_reserve+0xc8>
 801650e:	1ae3      	subs	r3, r4, r3
 8016510:	009a      	lsls	r2, r3, #2
 8016512:	4670      	mov	r0, lr
 8016514:	2100      	movs	r1, #0
 8016516:	9201      	str	r2, [sp, #4]
 8016518:	f002 fefa 	bl	8019310 <memset>
 801651c:	9a01      	ldr	r2, [sp, #4]
 801651e:	2100      	movs	r1, #0
 8016520:	4630      	mov	r0, r6
 8016522:	f002 fef5 	bl	8019310 <memset>
 8016526:	e00a      	b.n	801653e <rcutils_string_map_reserve+0xb2>
 8016528:	694f      	ldr	r7, [r1, #20]
 801652a:	6808      	ldr	r0, [r1, #0]
 801652c:	4631      	mov	r1, r6
 801652e:	47b8      	blx	r7
 8016530:	682b      	ldr	r3, [r5, #0]
 8016532:	4631      	mov	r1, r6
 8016534:	6858      	ldr	r0, [r3, #4]
 8016536:	601c      	str	r4, [r3, #0]
 8016538:	47b8      	blx	r7
 801653a:	682d      	ldr	r5, [r5, #0]
 801653c:	606c      	str	r4, [r5, #4]
 801653e:	2000      	movs	r0, #0
 8016540:	60ac      	str	r4, [r5, #8]
 8016542:	b002      	add	sp, #8
 8016544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016548:	2000      	movs	r0, #0
 801654a:	e7af      	b.n	80164ac <rcutils_string_map_reserve+0x20>
 801654c:	200a      	movs	r0, #10
 801654e:	e7ad      	b.n	80164ac <rcutils_string_map_reserve+0x20>
 8016550:	200b      	movs	r0, #11
 8016552:	4770      	bx	lr
 8016554:	1f0b      	subs	r3, r1, #4
 8016556:	4418      	add	r0, r3
 8016558:	4413      	add	r3, r2
 801655a:	3a04      	subs	r2, #4
 801655c:	4417      	add	r7, r2
 801655e:	2200      	movs	r2, #0
 8016560:	f843 2f04 	str.w	r2, [r3, #4]!
 8016564:	42bb      	cmp	r3, r7
 8016566:	f840 2f04 	str.w	r2, [r0, #4]!
 801656a:	d1f9      	bne.n	8016560 <rcutils_string_map_reserve+0xd4>
 801656c:	e7e7      	b.n	801653e <rcutils_string_map_reserve+0xb2>
 801656e:	bf00      	nop

08016570 <rcutils_string_map_init>:
 8016570:	b082      	sub	sp, #8
 8016572:	b570      	push	{r4, r5, r6, lr}
 8016574:	ac04      	add	r4, sp, #16
 8016576:	e884 000c 	stmia.w	r4, {r2, r3}
 801657a:	b380      	cbz	r0, 80165de <rcutils_string_map_init+0x6e>
 801657c:	6806      	ldr	r6, [r0, #0]
 801657e:	4604      	mov	r4, r0
 8016580:	b12e      	cbz	r6, 801658e <rcutils_string_map_init+0x1e>
 8016582:	251e      	movs	r5, #30
 8016584:	4628      	mov	r0, r5
 8016586:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801658a:	b002      	add	sp, #8
 801658c:	4770      	bx	lr
 801658e:	a804      	add	r0, sp, #16
 8016590:	460d      	mov	r5, r1
 8016592:	f7f6 ff93 	bl	800d4bc <rcutils_allocator_is_valid>
 8016596:	b310      	cbz	r0, 80165de <rcutils_string_map_init+0x6e>
 8016598:	9b04      	ldr	r3, [sp, #16]
 801659a:	9908      	ldr	r1, [sp, #32]
 801659c:	2024      	movs	r0, #36	@ 0x24
 801659e:	4798      	blx	r3
 80165a0:	6020      	str	r0, [r4, #0]
 80165a2:	b310      	cbz	r0, 80165ea <rcutils_string_map_init+0x7a>
 80165a4:	f10d 0e10 	add.w	lr, sp, #16
 80165a8:	e9c0 6600 	strd	r6, r6, [r0]
 80165ac:	e9c0 6602 	strd	r6, r6, [r0, #8]
 80165b0:	f100 0c10 	add.w	ip, r0, #16
 80165b4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80165b8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80165bc:	f8de 3000 	ldr.w	r3, [lr]
 80165c0:	f8cc 3000 	str.w	r3, [ip]
 80165c4:	4629      	mov	r1, r5
 80165c6:	4620      	mov	r0, r4
 80165c8:	f7ff ff60 	bl	801648c <rcutils_string_map_reserve>
 80165cc:	4605      	mov	r5, r0
 80165ce:	2800      	cmp	r0, #0
 80165d0:	d0d8      	beq.n	8016584 <rcutils_string_map_init+0x14>
 80165d2:	9b05      	ldr	r3, [sp, #20]
 80165d4:	9908      	ldr	r1, [sp, #32]
 80165d6:	6820      	ldr	r0, [r4, #0]
 80165d8:	4798      	blx	r3
 80165da:	6026      	str	r6, [r4, #0]
 80165dc:	e7d2      	b.n	8016584 <rcutils_string_map_init+0x14>
 80165de:	250b      	movs	r5, #11
 80165e0:	4628      	mov	r0, r5
 80165e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80165e6:	b002      	add	sp, #8
 80165e8:	4770      	bx	lr
 80165ea:	250a      	movs	r5, #10
 80165ec:	e7ca      	b.n	8016584 <rcutils_string_map_init+0x14>
 80165ee:	bf00      	nop

080165f0 <rcutils_string_map_fini>:
 80165f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80165f4:	b082      	sub	sp, #8
 80165f6:	2800      	cmp	r0, #0
 80165f8:	d03a      	beq.n	8016670 <rcutils_string_map_fini+0x80>
 80165fa:	6804      	ldr	r4, [r0, #0]
 80165fc:	4606      	mov	r6, r0
 80165fe:	2c00      	cmp	r4, #0
 8016600:	d032      	beq.n	8016668 <rcutils_string_map_fini+0x78>
 8016602:	68a3      	ldr	r3, [r4, #8]
 8016604:	b32b      	cbz	r3, 8016652 <rcutils_string_map_fini+0x62>
 8016606:	2500      	movs	r5, #0
 8016608:	6822      	ldr	r2, [r4, #0]
 801660a:	462f      	mov	r7, r5
 801660c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8016610:	b1e0      	cbz	r0, 801664c <rcutils_string_map_fini+0x5c>
 8016612:	6a21      	ldr	r1, [r4, #32]
 8016614:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8016618:	9101      	str	r1, [sp, #4]
 801661a:	47c0      	blx	r8
 801661c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016620:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8016624:	9901      	ldr	r1, [sp, #4]
 8016626:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801662a:	47c0      	blx	r8
 801662c:	68e3      	ldr	r3, [r4, #12]
 801662e:	6862      	ldr	r2, [r4, #4]
 8016630:	3b01      	subs	r3, #1
 8016632:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8016636:	60e3      	str	r3, [r4, #12]
 8016638:	6834      	ldr	r4, [r6, #0]
 801663a:	68a3      	ldr	r3, [r4, #8]
 801663c:	3501      	adds	r5, #1
 801663e:	429d      	cmp	r5, r3
 8016640:	d207      	bcs.n	8016652 <rcutils_string_map_fini+0x62>
 8016642:	6822      	ldr	r2, [r4, #0]
 8016644:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8016648:	2800      	cmp	r0, #0
 801664a:	d1e2      	bne.n	8016612 <rcutils_string_map_fini+0x22>
 801664c:	3501      	adds	r5, #1
 801664e:	429d      	cmp	r5, r3
 8016650:	d3dc      	bcc.n	801660c <rcutils_string_map_fini+0x1c>
 8016652:	2100      	movs	r1, #0
 8016654:	4630      	mov	r0, r6
 8016656:	f7ff ff19 	bl	801648c <rcutils_string_map_reserve>
 801665a:	4604      	mov	r4, r0
 801665c:	b920      	cbnz	r0, 8016668 <rcutils_string_map_fini+0x78>
 801665e:	6830      	ldr	r0, [r6, #0]
 8016660:	6943      	ldr	r3, [r0, #20]
 8016662:	6a01      	ldr	r1, [r0, #32]
 8016664:	4798      	blx	r3
 8016666:	6034      	str	r4, [r6, #0]
 8016668:	4620      	mov	r0, r4
 801666a:	b002      	add	sp, #8
 801666c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016670:	240b      	movs	r4, #11
 8016672:	4620      	mov	r0, r4
 8016674:	b002      	add	sp, #8
 8016676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801667a:	bf00      	nop

0801667c <rcutils_string_map_getn>:
 801667c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016680:	b300      	cbz	r0, 80166c4 <rcutils_string_map_getn+0x48>
 8016682:	6807      	ldr	r7, [r0, #0]
 8016684:	b1ff      	cbz	r7, 80166c6 <rcutils_string_map_getn+0x4a>
 8016686:	4688      	mov	r8, r1
 8016688:	b1e1      	cbz	r1, 80166c4 <rcutils_string_map_getn+0x48>
 801668a:	f8d7 a008 	ldr.w	sl, [r7, #8]
 801668e:	683e      	ldr	r6, [r7, #0]
 8016690:	f1ba 0f00 	cmp.w	sl, #0
 8016694:	d016      	beq.n	80166c4 <rcutils_string_map_getn+0x48>
 8016696:	4691      	mov	r9, r2
 8016698:	3e04      	subs	r6, #4
 801669a:	2400      	movs	r4, #0
 801669c:	f856 5f04 	ldr.w	r5, [r6, #4]!
 80166a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80166a4:	4628      	mov	r0, r5
 80166a6:	3401      	adds	r4, #1
 80166a8:	b155      	cbz	r5, 80166c0 <rcutils_string_map_getn+0x44>
 80166aa:	f7e9 fdc3 	bl	8000234 <strlen>
 80166ae:	4548      	cmp	r0, r9
 80166b0:	4602      	mov	r2, r0
 80166b2:	4629      	mov	r1, r5
 80166b4:	bf38      	it	cc
 80166b6:	464a      	movcc	r2, r9
 80166b8:	4640      	mov	r0, r8
 80166ba:	f002 fe3e 	bl	801933a <strncmp>
 80166be:	b128      	cbz	r0, 80166cc <rcutils_string_map_getn+0x50>
 80166c0:	45a2      	cmp	sl, r4
 80166c2:	d1eb      	bne.n	801669c <rcutils_string_map_getn+0x20>
 80166c4:	2700      	movs	r7, #0
 80166c6:	4638      	mov	r0, r7
 80166c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	f853 700b 	ldr.w	r7, [r3, fp]
 80166d2:	4638      	mov	r0, r7
 80166d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080166d8 <rmw_get_zero_initialized_context>:
 80166d8:	b510      	push	{r4, lr}
 80166da:	4604      	mov	r4, r0
 80166dc:	3010      	adds	r0, #16
 80166de:	f7f6 ff7f 	bl	800d5e0 <rmw_get_zero_initialized_init_options>
 80166e2:	2300      	movs	r3, #0
 80166e4:	2000      	movs	r0, #0
 80166e6:	2100      	movs	r1, #0
 80166e8:	e9c4 0100 	strd	r0, r1, [r4]
 80166ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 80166f0:	60a3      	str	r3, [r4, #8]
 80166f2:	4620      	mov	r0, r4
 80166f4:	bd10      	pop	{r4, pc}
 80166f6:	bf00      	nop

080166f8 <rmw_time_equal>:
 80166f8:	b4f0      	push	{r4, r5, r6, r7}
 80166fa:	b084      	sub	sp, #16
 80166fc:	ac04      	add	r4, sp, #16
 80166fe:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8016702:	4603      	mov	r3, r0
 8016704:	4924      	ldr	r1, [pc, #144]	@ (8016798 <rmw_time_equal+0xa0>)
 8016706:	9e03      	ldr	r6, [sp, #12]
 8016708:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 801670c:	2202      	movs	r2, #2
 801670e:	4299      	cmp	r1, r3
 8016710:	41aa      	sbcs	r2, r5
 8016712:	d330      	bcc.n	8016776 <rmw_time_equal+0x7e>
 8016714:	4c21      	ldr	r4, [pc, #132]	@ (801679c <rmw_time_equal+0xa4>)
 8016716:	fba3 3204 	umull	r3, r2, r3, r4
 801671a:	fb04 2205 	mla	r2, r4, r5, r2
 801671e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016722:	43dd      	mvns	r5, r3
 8016724:	1a8c      	subs	r4, r1, r2
 8016726:	4285      	cmp	r5, r0
 8016728:	41b4      	sbcs	r4, r6
 801672a:	d332      	bcc.n	8016792 <rmw_time_equal+0x9a>
 801672c:	eb10 0c03 	adds.w	ip, r0, r3
 8016730:	eb42 0106 	adc.w	r1, r2, r6
 8016734:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8016738:	4817      	ldr	r0, [pc, #92]	@ (8016798 <rmw_time_equal+0xa0>)
 801673a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801673c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801673e:	2202      	movs	r2, #2
 8016740:	4298      	cmp	r0, r3
 8016742:	41b2      	sbcs	r2, r6
 8016744:	d31c      	bcc.n	8016780 <rmw_time_equal+0x88>
 8016746:	4c15      	ldr	r4, [pc, #84]	@ (801679c <rmw_time_equal+0xa4>)
 8016748:	fba3 3204 	umull	r3, r2, r3, r4
 801674c:	fb04 2206 	mla	r2, r4, r6, r2
 8016750:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8016754:	43de      	mvns	r6, r3
 8016756:	1a84      	subs	r4, r0, r2
 8016758:	42ae      	cmp	r6, r5
 801675a:	41bc      	sbcs	r4, r7
 801675c:	d315      	bcc.n	801678a <rmw_time_equal+0x92>
 801675e:	195b      	adds	r3, r3, r5
 8016760:	eb42 0207 	adc.w	r2, r2, r7
 8016764:	428a      	cmp	r2, r1
 8016766:	bf08      	it	eq
 8016768:	4563      	cmpeq	r3, ip
 801676a:	bf0c      	ite	eq
 801676c:	2001      	moveq	r0, #1
 801676e:	2000      	movne	r0, #0
 8016770:	b004      	add	sp, #16
 8016772:	bcf0      	pop	{r4, r5, r6, r7}
 8016774:	4770      	bx	lr
 8016776:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801677a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801677e:	e7d9      	b.n	8016734 <rmw_time_equal+0x3c>
 8016780:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016784:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8016788:	e7ec      	b.n	8016764 <rmw_time_equal+0x6c>
 801678a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801678e:	4602      	mov	r2, r0
 8016790:	e7e8      	b.n	8016764 <rmw_time_equal+0x6c>
 8016792:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8016796:	e7cd      	b.n	8016734 <rmw_time_equal+0x3c>
 8016798:	25c17d04 	.word	0x25c17d04
 801679c:	3b9aca00 	.word	0x3b9aca00

080167a0 <rmw_time_total_nsec>:
 80167a0:	b470      	push	{r4, r5, r6}
 80167a2:	b085      	sub	sp, #20
 80167a4:	ac04      	add	r4, sp, #16
 80167a6:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80167aa:	4603      	mov	r3, r0
 80167ac:	4912      	ldr	r1, [pc, #72]	@ (80167f8 <rmw_time_total_nsec+0x58>)
 80167ae:	9e03      	ldr	r6, [sp, #12]
 80167b0:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 80167b4:	2202      	movs	r2, #2
 80167b6:	4299      	cmp	r1, r3
 80167b8:	41aa      	sbcs	r2, r5
 80167ba:	d311      	bcc.n	80167e0 <rmw_time_total_nsec+0x40>
 80167bc:	4c0f      	ldr	r4, [pc, #60]	@ (80167fc <rmw_time_total_nsec+0x5c>)
 80167be:	fba3 3204 	umull	r3, r2, r3, r4
 80167c2:	fb04 2205 	mla	r2, r4, r5, r2
 80167c6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80167ca:	43dd      	mvns	r5, r3
 80167cc:	1a8c      	subs	r4, r1, r2
 80167ce:	4285      	cmp	r5, r0
 80167d0:	41b4      	sbcs	r4, r6
 80167d2:	d30c      	bcc.n	80167ee <rmw_time_total_nsec+0x4e>
 80167d4:	1818      	adds	r0, r3, r0
 80167d6:	eb42 0106 	adc.w	r1, r2, r6
 80167da:	b005      	add	sp, #20
 80167dc:	bc70      	pop	{r4, r5, r6}
 80167de:	4770      	bx	lr
 80167e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80167e4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80167e8:	b005      	add	sp, #20
 80167ea:	bc70      	pop	{r4, r5, r6}
 80167ec:	4770      	bx	lr
 80167ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80167f2:	b005      	add	sp, #20
 80167f4:	bc70      	pop	{r4, r5, r6}
 80167f6:	4770      	bx	lr
 80167f8:	25c17d04 	.word	0x25c17d04
 80167fc:	3b9aca00 	.word	0x3b9aca00

08016800 <rmw_get_zero_initialized_message_info>:
 8016800:	b510      	push	{r4, lr}
 8016802:	2240      	movs	r2, #64	@ 0x40
 8016804:	4604      	mov	r4, r0
 8016806:	2100      	movs	r1, #0
 8016808:	f002 fd82 	bl	8019310 <memset>
 801680c:	4620      	mov	r0, r4
 801680e:	bd10      	pop	{r4, pc}

08016810 <rmw_validate_full_topic_name>:
 8016810:	2800      	cmp	r0, #0
 8016812:	d057      	beq.n	80168c4 <rmw_validate_full_topic_name+0xb4>
 8016814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016818:	460d      	mov	r5, r1
 801681a:	2900      	cmp	r1, #0
 801681c:	d054      	beq.n	80168c8 <rmw_validate_full_topic_name+0xb8>
 801681e:	4616      	mov	r6, r2
 8016820:	4604      	mov	r4, r0
 8016822:	f7e9 fd07 	bl	8000234 <strlen>
 8016826:	b148      	cbz	r0, 801683c <rmw_validate_full_topic_name+0x2c>
 8016828:	7823      	ldrb	r3, [r4, #0]
 801682a:	2b2f      	cmp	r3, #47	@ 0x2f
 801682c:	d00d      	beq.n	801684a <rmw_validate_full_topic_name+0x3a>
 801682e:	2302      	movs	r3, #2
 8016830:	602b      	str	r3, [r5, #0]
 8016832:	b13e      	cbz	r6, 8016844 <rmw_validate_full_topic_name+0x34>
 8016834:	2000      	movs	r0, #0
 8016836:	6030      	str	r0, [r6, #0]
 8016838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801683c:	2301      	movs	r3, #1
 801683e:	602b      	str	r3, [r5, #0]
 8016840:	2e00      	cmp	r6, #0
 8016842:	d1f7      	bne.n	8016834 <rmw_validate_full_topic_name+0x24>
 8016844:	2000      	movs	r0, #0
 8016846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801684a:	1e43      	subs	r3, r0, #1
 801684c:	5ce2      	ldrb	r2, [r4, r3]
 801684e:	2a2f      	cmp	r2, #47	@ 0x2f
 8016850:	d03c      	beq.n	80168cc <rmw_validate_full_topic_name+0xbc>
 8016852:	1e63      	subs	r3, r4, #1
 8016854:	eb03 0800 	add.w	r8, r3, r0
 8016858:	f1c4 0e01 	rsb	lr, r4, #1
 801685c:	eb0e 0703 	add.w	r7, lr, r3
 8016860:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8016864:	f021 0220 	bic.w	r2, r1, #32
 8016868:	3a41      	subs	r2, #65	@ 0x41
 801686a:	2a19      	cmp	r2, #25
 801686c:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 8016870:	d90b      	bls.n	801688a <rmw_validate_full_topic_name+0x7a>
 8016872:	295f      	cmp	r1, #95	@ 0x5f
 8016874:	d009      	beq.n	801688a <rmw_validate_full_topic_name+0x7a>
 8016876:	f1bc 0f0a 	cmp.w	ip, #10
 801687a:	d906      	bls.n	801688a <rmw_validate_full_topic_name+0x7a>
 801687c:	2304      	movs	r3, #4
 801687e:	602b      	str	r3, [r5, #0]
 8016880:	2e00      	cmp	r6, #0
 8016882:	d0df      	beq.n	8016844 <rmw_validate_full_topic_name+0x34>
 8016884:	6037      	str	r7, [r6, #0]
 8016886:	2000      	movs	r0, #0
 8016888:	e7d6      	b.n	8016838 <rmw_validate_full_topic_name+0x28>
 801688a:	4543      	cmp	r3, r8
 801688c:	d1e6      	bne.n	801685c <rmw_validate_full_topic_name+0x4c>
 801688e:	4f1a      	ldr	r7, [pc, #104]	@ (80168f8 <rmw_validate_full_topic_name+0xe8>)
 8016890:	2301      	movs	r3, #1
 8016892:	e004      	b.n	801689e <rmw_validate_full_topic_name+0x8e>
 8016894:	4298      	cmp	r0, r3
 8016896:	f104 0401 	add.w	r4, r4, #1
 801689a:	d91c      	bls.n	80168d6 <rmw_validate_full_topic_name+0xc6>
 801689c:	4613      	mov	r3, r2
 801689e:	4298      	cmp	r0, r3
 80168a0:	f103 0201 	add.w	r2, r3, #1
 80168a4:	d0f6      	beq.n	8016894 <rmw_validate_full_topic_name+0x84>
 80168a6:	7821      	ldrb	r1, [r4, #0]
 80168a8:	292f      	cmp	r1, #47	@ 0x2f
 80168aa:	d1f3      	bne.n	8016894 <rmw_validate_full_topic_name+0x84>
 80168ac:	7861      	ldrb	r1, [r4, #1]
 80168ae:	292f      	cmp	r1, #47	@ 0x2f
 80168b0:	d01c      	beq.n	80168ec <rmw_validate_full_topic_name+0xdc>
 80168b2:	5dc9      	ldrb	r1, [r1, r7]
 80168b4:	0749      	lsls	r1, r1, #29
 80168b6:	d5ed      	bpl.n	8016894 <rmw_validate_full_topic_name+0x84>
 80168b8:	2206      	movs	r2, #6
 80168ba:	602a      	str	r2, [r5, #0]
 80168bc:	2e00      	cmp	r6, #0
 80168be:	d0c1      	beq.n	8016844 <rmw_validate_full_topic_name+0x34>
 80168c0:	6033      	str	r3, [r6, #0]
 80168c2:	e7bf      	b.n	8016844 <rmw_validate_full_topic_name+0x34>
 80168c4:	200b      	movs	r0, #11
 80168c6:	4770      	bx	lr
 80168c8:	200b      	movs	r0, #11
 80168ca:	e7b5      	b.n	8016838 <rmw_validate_full_topic_name+0x28>
 80168cc:	2203      	movs	r2, #3
 80168ce:	602a      	str	r2, [r5, #0]
 80168d0:	2e00      	cmp	r6, #0
 80168d2:	d1f5      	bne.n	80168c0 <rmw_validate_full_topic_name+0xb0>
 80168d4:	e7b6      	b.n	8016844 <rmw_validate_full_topic_name+0x34>
 80168d6:	28f7      	cmp	r0, #247	@ 0xf7
 80168d8:	d802      	bhi.n	80168e0 <rmw_validate_full_topic_name+0xd0>
 80168da:	2000      	movs	r0, #0
 80168dc:	6028      	str	r0, [r5, #0]
 80168de:	e7ab      	b.n	8016838 <rmw_validate_full_topic_name+0x28>
 80168e0:	2307      	movs	r3, #7
 80168e2:	602b      	str	r3, [r5, #0]
 80168e4:	2e00      	cmp	r6, #0
 80168e6:	d0ad      	beq.n	8016844 <rmw_validate_full_topic_name+0x34>
 80168e8:	23f6      	movs	r3, #246	@ 0xf6
 80168ea:	e7e9      	b.n	80168c0 <rmw_validate_full_topic_name+0xb0>
 80168ec:	2205      	movs	r2, #5
 80168ee:	602a      	str	r2, [r5, #0]
 80168f0:	2e00      	cmp	r6, #0
 80168f2:	d1e5      	bne.n	80168c0 <rmw_validate_full_topic_name+0xb0>
 80168f4:	e7a6      	b.n	8016844 <rmw_validate_full_topic_name+0x34>
 80168f6:	bf00      	nop
 80168f8:	0801bf42 	.word	0x0801bf42

080168fc <rmw_validate_namespace_with_size>:
 80168fc:	b340      	cbz	r0, 8016950 <rmw_validate_namespace_with_size+0x54>
 80168fe:	b570      	push	{r4, r5, r6, lr}
 8016900:	4614      	mov	r4, r2
 8016902:	b0c2      	sub	sp, #264	@ 0x108
 8016904:	b332      	cbz	r2, 8016954 <rmw_validate_namespace_with_size+0x58>
 8016906:	2901      	cmp	r1, #1
 8016908:	460d      	mov	r5, r1
 801690a:	461e      	mov	r6, r3
 801690c:	d102      	bne.n	8016914 <rmw_validate_namespace_with_size+0x18>
 801690e:	7803      	ldrb	r3, [r0, #0]
 8016910:	2b2f      	cmp	r3, #47	@ 0x2f
 8016912:	d012      	beq.n	801693a <rmw_validate_namespace_with_size+0x3e>
 8016914:	aa01      	add	r2, sp, #4
 8016916:	4669      	mov	r1, sp
 8016918:	f7ff ff7a 	bl	8016810 <rmw_validate_full_topic_name>
 801691c:	b978      	cbnz	r0, 801693e <rmw_validate_namespace_with_size+0x42>
 801691e:	9b00      	ldr	r3, [sp, #0]
 8016920:	b14b      	cbz	r3, 8016936 <rmw_validate_namespace_with_size+0x3a>
 8016922:	2b07      	cmp	r3, #7
 8016924:	d007      	beq.n	8016936 <rmw_validate_namespace_with_size+0x3a>
 8016926:	1e5a      	subs	r2, r3, #1
 8016928:	2a05      	cmp	r2, #5
 801692a:	d82b      	bhi.n	8016984 <rmw_validate_namespace_with_size+0x88>
 801692c:	e8df f002 	tbb	[pc, r2]
 8016930:	1e212427 	.word	0x1e212427
 8016934:	141b      	.short	0x141b
 8016936:	2df5      	cmp	r5, #245	@ 0xf5
 8016938:	d803      	bhi.n	8016942 <rmw_validate_namespace_with_size+0x46>
 801693a:	2000      	movs	r0, #0
 801693c:	6020      	str	r0, [r4, #0]
 801693e:	b042      	add	sp, #264	@ 0x108
 8016940:	bd70      	pop	{r4, r5, r6, pc}
 8016942:	2307      	movs	r3, #7
 8016944:	6023      	str	r3, [r4, #0]
 8016946:	2e00      	cmp	r6, #0
 8016948:	d0f9      	beq.n	801693e <rmw_validate_namespace_with_size+0x42>
 801694a:	23f4      	movs	r3, #244	@ 0xf4
 801694c:	6033      	str	r3, [r6, #0]
 801694e:	e7f6      	b.n	801693e <rmw_validate_namespace_with_size+0x42>
 8016950:	200b      	movs	r0, #11
 8016952:	4770      	bx	lr
 8016954:	200b      	movs	r0, #11
 8016956:	e7f2      	b.n	801693e <rmw_validate_namespace_with_size+0x42>
 8016958:	2306      	movs	r3, #6
 801695a:	6023      	str	r3, [r4, #0]
 801695c:	2e00      	cmp	r6, #0
 801695e:	d0ee      	beq.n	801693e <rmw_validate_namespace_with_size+0x42>
 8016960:	9b01      	ldr	r3, [sp, #4]
 8016962:	6033      	str	r3, [r6, #0]
 8016964:	e7eb      	b.n	801693e <rmw_validate_namespace_with_size+0x42>
 8016966:	2305      	movs	r3, #5
 8016968:	6023      	str	r3, [r4, #0]
 801696a:	e7f7      	b.n	801695c <rmw_validate_namespace_with_size+0x60>
 801696c:	2304      	movs	r3, #4
 801696e:	6023      	str	r3, [r4, #0]
 8016970:	e7f4      	b.n	801695c <rmw_validate_namespace_with_size+0x60>
 8016972:	2303      	movs	r3, #3
 8016974:	6023      	str	r3, [r4, #0]
 8016976:	e7f1      	b.n	801695c <rmw_validate_namespace_with_size+0x60>
 8016978:	2302      	movs	r3, #2
 801697a:	6023      	str	r3, [r4, #0]
 801697c:	e7ee      	b.n	801695c <rmw_validate_namespace_with_size+0x60>
 801697e:	2301      	movs	r3, #1
 8016980:	6023      	str	r3, [r4, #0]
 8016982:	e7eb      	b.n	801695c <rmw_validate_namespace_with_size+0x60>
 8016984:	4a03      	ldr	r2, [pc, #12]	@ (8016994 <rmw_validate_namespace_with_size+0x98>)
 8016986:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801698a:	a802      	add	r0, sp, #8
 801698c:	f7ff fd0e 	bl	80163ac <rcutils_snprintf>
 8016990:	2001      	movs	r0, #1
 8016992:	e7d4      	b.n	801693e <rmw_validate_namespace_with_size+0x42>
 8016994:	0801ba70 	.word	0x0801ba70

08016998 <rmw_validate_namespace>:
 8016998:	b168      	cbz	r0, 80169b6 <rmw_validate_namespace+0x1e>
 801699a:	b570      	push	{r4, r5, r6, lr}
 801699c:	460d      	mov	r5, r1
 801699e:	4616      	mov	r6, r2
 80169a0:	4604      	mov	r4, r0
 80169a2:	f7e9 fc47 	bl	8000234 <strlen>
 80169a6:	4633      	mov	r3, r6
 80169a8:	4601      	mov	r1, r0
 80169aa:	462a      	mov	r2, r5
 80169ac:	4620      	mov	r0, r4
 80169ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80169b2:	f7ff bfa3 	b.w	80168fc <rmw_validate_namespace_with_size>
 80169b6:	200b      	movs	r0, #11
 80169b8:	4770      	bx	lr
 80169ba:	bf00      	nop

080169bc <rmw_namespace_validation_result_string>:
 80169bc:	2807      	cmp	r0, #7
 80169be:	bf9a      	itte	ls
 80169c0:	4b02      	ldrls	r3, [pc, #8]	@ (80169cc <rmw_namespace_validation_result_string+0x10>)
 80169c2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80169c6:	4802      	ldrhi	r0, [pc, #8]	@ (80169d0 <rmw_namespace_validation_result_string+0x14>)
 80169c8:	4770      	bx	lr
 80169ca:	bf00      	nop
 80169cc:	0801bc68 	.word	0x0801bc68
 80169d0:	0801bac0 	.word	0x0801bac0

080169d4 <rmw_validate_node_name>:
 80169d4:	2800      	cmp	r0, #0
 80169d6:	d03b      	beq.n	8016a50 <rmw_validate_node_name+0x7c>
 80169d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80169dc:	460d      	mov	r5, r1
 80169de:	2900      	cmp	r1, #0
 80169e0:	d038      	beq.n	8016a54 <rmw_validate_node_name+0x80>
 80169e2:	4616      	mov	r6, r2
 80169e4:	4604      	mov	r4, r0
 80169e6:	f7e9 fc25 	bl	8000234 <strlen>
 80169ea:	b1e0      	cbz	r0, 8016a26 <rmw_validate_node_name+0x52>
 80169ec:	1e63      	subs	r3, r4, #1
 80169ee:	eb03 0800 	add.w	r8, r3, r0
 80169f2:	f1c4 0101 	rsb	r1, r4, #1
 80169f6:	18cf      	adds	r7, r1, r3
 80169f8:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 80169fc:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8016a00:	f02e 0c20 	bic.w	ip, lr, #32
 8016a04:	2a09      	cmp	r2, #9
 8016a06:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8016a0a:	d914      	bls.n	8016a36 <rmw_validate_node_name+0x62>
 8016a0c:	f1bc 0f19 	cmp.w	ip, #25
 8016a10:	d911      	bls.n	8016a36 <rmw_validate_node_name+0x62>
 8016a12:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8016a16:	d00e      	beq.n	8016a36 <rmw_validate_node_name+0x62>
 8016a18:	2302      	movs	r3, #2
 8016a1a:	602b      	str	r3, [r5, #0]
 8016a1c:	b106      	cbz	r6, 8016a20 <rmw_validate_node_name+0x4c>
 8016a1e:	6037      	str	r7, [r6, #0]
 8016a20:	2000      	movs	r0, #0
 8016a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a26:	2301      	movs	r3, #1
 8016a28:	602b      	str	r3, [r5, #0]
 8016a2a:	2e00      	cmp	r6, #0
 8016a2c:	d0f8      	beq.n	8016a20 <rmw_validate_node_name+0x4c>
 8016a2e:	2000      	movs	r0, #0
 8016a30:	6030      	str	r0, [r6, #0]
 8016a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a36:	4543      	cmp	r3, r8
 8016a38:	d1dd      	bne.n	80169f6 <rmw_validate_node_name+0x22>
 8016a3a:	7822      	ldrb	r2, [r4, #0]
 8016a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8016a74 <rmw_validate_node_name+0xa0>)
 8016a3e:	5cd3      	ldrb	r3, [r2, r3]
 8016a40:	f013 0304 	ands.w	r3, r3, #4
 8016a44:	d110      	bne.n	8016a68 <rmw_validate_node_name+0x94>
 8016a46:	28ff      	cmp	r0, #255	@ 0xff
 8016a48:	d806      	bhi.n	8016a58 <rmw_validate_node_name+0x84>
 8016a4a:	602b      	str	r3, [r5, #0]
 8016a4c:	4618      	mov	r0, r3
 8016a4e:	e7e8      	b.n	8016a22 <rmw_validate_node_name+0x4e>
 8016a50:	200b      	movs	r0, #11
 8016a52:	4770      	bx	lr
 8016a54:	200b      	movs	r0, #11
 8016a56:	e7e4      	b.n	8016a22 <rmw_validate_node_name+0x4e>
 8016a58:	2204      	movs	r2, #4
 8016a5a:	602a      	str	r2, [r5, #0]
 8016a5c:	2e00      	cmp	r6, #0
 8016a5e:	d0df      	beq.n	8016a20 <rmw_validate_node_name+0x4c>
 8016a60:	22fe      	movs	r2, #254	@ 0xfe
 8016a62:	6032      	str	r2, [r6, #0]
 8016a64:	4618      	mov	r0, r3
 8016a66:	e7dc      	b.n	8016a22 <rmw_validate_node_name+0x4e>
 8016a68:	2303      	movs	r3, #3
 8016a6a:	602b      	str	r3, [r5, #0]
 8016a6c:	2e00      	cmp	r6, #0
 8016a6e:	d1de      	bne.n	8016a2e <rmw_validate_node_name+0x5a>
 8016a70:	e7d6      	b.n	8016a20 <rmw_validate_node_name+0x4c>
 8016a72:	bf00      	nop
 8016a74:	0801bf42 	.word	0x0801bf42

08016a78 <rmw_node_name_validation_result_string>:
 8016a78:	2804      	cmp	r0, #4
 8016a7a:	bf9a      	itte	ls
 8016a7c:	4b02      	ldrls	r3, [pc, #8]	@ (8016a88 <rmw_node_name_validation_result_string+0x10>)
 8016a7e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8016a82:	4802      	ldrhi	r0, [pc, #8]	@ (8016a8c <rmw_node_name_validation_result_string+0x14>)
 8016a84:	4770      	bx	lr
 8016a86:	bf00      	nop
 8016a88:	0801bd74 	.word	0x0801bd74
 8016a8c:	0801bc88 	.word	0x0801bc88

08016a90 <on_status>:
 8016a90:	b082      	sub	sp, #8
 8016a92:	b002      	add	sp, #8
 8016a94:	4770      	bx	lr
 8016a96:	bf00      	nop

08016a98 <on_topic>:
 8016a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a9c:	4a22      	ldr	r2, [pc, #136]	@ (8016b28 <on_topic+0x90>)
 8016a9e:	b094      	sub	sp, #80	@ 0x50
 8016aa0:	6812      	ldr	r2, [r2, #0]
 8016aa2:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8016aa4:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8016aa8:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8016aac:	b3c2      	cbz	r2, 8016b20 <on_topic+0x88>
 8016aae:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8016ab2:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8016ab6:	e001      	b.n	8016abc <on_topic+0x24>
 8016ab8:	6852      	ldr	r2, [r2, #4]
 8016aba:	b38a      	cbz	r2, 8016b20 <on_topic+0x88>
 8016abc:	6894      	ldr	r4, [r2, #8]
 8016abe:	8aa3      	ldrh	r3, [r4, #20]
 8016ac0:	428b      	cmp	r3, r1
 8016ac2:	d1f9      	bne.n	8016ab8 <on_topic+0x20>
 8016ac4:	7da3      	ldrb	r3, [r4, #22]
 8016ac6:	4283      	cmp	r3, r0
 8016ac8:	d1f6      	bne.n	8016ab8 <on_topic+0x20>
 8016aca:	2248      	movs	r2, #72	@ 0x48
 8016acc:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8016ad0:	4668      	mov	r0, sp
 8016ad2:	f002 fce6 	bl	80194a2 <memcpy>
 8016ad6:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8016ada:	cb0c      	ldmia	r3, {r2, r3}
 8016adc:	4620      	mov	r0, r4
 8016ade:	f7f7 fe83 	bl	800e7e8 <rmw_uxrce_get_static_input_buffer_for_entity>
 8016ae2:	4607      	mov	r7, r0
 8016ae4:	b1e0      	cbz	r0, 8016b20 <on_topic+0x88>
 8016ae6:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8016aea:	4632      	mov	r2, r6
 8016aec:	4628      	mov	r0, r5
 8016aee:	f108 0110 	add.w	r1, r8, #16
 8016af2:	f7f8 fe71 	bl	800f7d8 <ucdr_deserialize_array_uint8_t>
 8016af6:	b930      	cbnz	r0, 8016b06 <on_topic+0x6e>
 8016af8:	480c      	ldr	r0, [pc, #48]	@ (8016b2c <on_topic+0x94>)
 8016afa:	4639      	mov	r1, r7
 8016afc:	b014      	add	sp, #80	@ 0x50
 8016afe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016b02:	f000 b8bd 	b.w	8016c80 <put_memory>
 8016b06:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8016b0a:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 8016b0e:	f7f7 fc69 	bl	800e3e4 <rmw_uros_epoch_nanos>
 8016b12:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8016b16:	2305      	movs	r3, #5
 8016b18:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016b1c:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8016b20:	b014      	add	sp, #80	@ 0x50
 8016b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b26:	bf00      	nop
 8016b28:	2000b894 	.word	0x2000b894
 8016b2c:	2000b884 	.word	0x2000b884

08016b30 <on_request>:
 8016b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b34:	4823      	ldr	r0, [pc, #140]	@ (8016bc4 <on_request+0x94>)
 8016b36:	b094      	sub	sp, #80	@ 0x50
 8016b38:	6800      	ldr	r0, [r0, #0]
 8016b3a:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8016b3c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8016b40:	9113      	str	r1, [sp, #76]	@ 0x4c
 8016b42:	2800      	cmp	r0, #0
 8016b44:	d03b      	beq.n	8016bbe <on_request+0x8e>
 8016b46:	461d      	mov	r5, r3
 8016b48:	e001      	b.n	8016b4e <on_request+0x1e>
 8016b4a:	6840      	ldr	r0, [r0, #4]
 8016b4c:	b3b8      	cbz	r0, 8016bbe <on_request+0x8e>
 8016b4e:	6884      	ldr	r4, [r0, #8]
 8016b50:	8b21      	ldrh	r1, [r4, #24]
 8016b52:	4291      	cmp	r1, r2
 8016b54:	d1f9      	bne.n	8016b4a <on_request+0x1a>
 8016b56:	2248      	movs	r2, #72	@ 0x48
 8016b58:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8016b5c:	4668      	mov	r0, sp
 8016b5e:	f002 fca0 	bl	80194a2 <memcpy>
 8016b62:	f104 0320 	add.w	r3, r4, #32
 8016b66:	cb0c      	ldmia	r3, {r2, r3}
 8016b68:	4620      	mov	r0, r4
 8016b6a:	f7f7 fe3d 	bl	800e7e8 <rmw_uxrce_get_static_input_buffer_for_entity>
 8016b6e:	4680      	mov	r8, r0
 8016b70:	b328      	cbz	r0, 8016bbe <on_request+0x8e>
 8016b72:	4638      	mov	r0, r7
 8016b74:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8016b78:	4632      	mov	r2, r6
 8016b7a:	f107 0110 	add.w	r1, r7, #16
 8016b7e:	f7f8 fe2b 	bl	800f7d8 <ucdr_deserialize_array_uint8_t>
 8016b82:	b930      	cbnz	r0, 8016b92 <on_request+0x62>
 8016b84:	4810      	ldr	r0, [pc, #64]	@ (8016bc8 <on_request+0x98>)
 8016b86:	4641      	mov	r1, r8
 8016b88:	b014      	add	sp, #80	@ 0x50
 8016b8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016b8e:	f000 b877 	b.w	8016c80 <put_memory>
 8016b92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016b94:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8016b98:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8016b9c:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8016ba0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016ba4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016ba8:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016bac:	f7f7 fc1a 	bl	800e3e4 <rmw_uros_epoch_nanos>
 8016bb0:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8016bb4:	2303      	movs	r3, #3
 8016bb6:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016bba:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8016bbe:	b014      	add	sp, #80	@ 0x50
 8016bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016bc4:	2000b864 	.word	0x2000b864
 8016bc8:	2000b884 	.word	0x2000b884

08016bcc <on_reply>:
 8016bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016bd0:	4821      	ldr	r0, [pc, #132]	@ (8016c58 <on_reply+0x8c>)
 8016bd2:	b094      	sub	sp, #80	@ 0x50
 8016bd4:	6800      	ldr	r0, [r0, #0]
 8016bd6:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8016bd8:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8016bdc:	9113      	str	r1, [sp, #76]	@ 0x4c
 8016bde:	b3b8      	cbz	r0, 8016c50 <on_reply+0x84>
 8016be0:	461d      	mov	r5, r3
 8016be2:	e001      	b.n	8016be8 <on_reply+0x1c>
 8016be4:	6840      	ldr	r0, [r0, #4]
 8016be6:	b398      	cbz	r0, 8016c50 <on_reply+0x84>
 8016be8:	6884      	ldr	r4, [r0, #8]
 8016bea:	8b21      	ldrh	r1, [r4, #24]
 8016bec:	4291      	cmp	r1, r2
 8016bee:	d1f9      	bne.n	8016be4 <on_reply+0x18>
 8016bf0:	2248      	movs	r2, #72	@ 0x48
 8016bf2:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8016bf6:	4668      	mov	r0, sp
 8016bf8:	f002 fc53 	bl	80194a2 <memcpy>
 8016bfc:	f104 0320 	add.w	r3, r4, #32
 8016c00:	cb0c      	ldmia	r3, {r2, r3}
 8016c02:	4620      	mov	r0, r4
 8016c04:	f7f7 fdf0 	bl	800e7e8 <rmw_uxrce_get_static_input_buffer_for_entity>
 8016c08:	4680      	mov	r8, r0
 8016c0a:	b308      	cbz	r0, 8016c50 <on_reply+0x84>
 8016c0c:	4638      	mov	r0, r7
 8016c0e:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8016c12:	4632      	mov	r2, r6
 8016c14:	f107 0110 	add.w	r1, r7, #16
 8016c18:	f7f8 fdde 	bl	800f7d8 <ucdr_deserialize_array_uint8_t>
 8016c1c:	b930      	cbnz	r0, 8016c2c <on_reply+0x60>
 8016c1e:	480f      	ldr	r0, [pc, #60]	@ (8016c5c <on_reply+0x90>)
 8016c20:	4641      	mov	r1, r8
 8016c22:	b014      	add	sp, #80	@ 0x50
 8016c24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016c28:	f000 b82a 	b.w	8016c80 <put_memory>
 8016c2c:	2200      	movs	r2, #0
 8016c2e:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8016c32:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8016c36:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8016c3a:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8016c3e:	f7f7 fbd1 	bl	800e3e4 <rmw_uros_epoch_nanos>
 8016c42:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8016c46:	2304      	movs	r3, #4
 8016c48:	e942 0102 	strd	r0, r1, [r2, #-8]
 8016c4c:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8016c50:	b014      	add	sp, #80	@ 0x50
 8016c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c56:	bf00      	nop
 8016c58:	20006eac 	.word	0x20006eac
 8016c5c:	2000b884 	.word	0x2000b884

08016c60 <get_memory>:
 8016c60:	4603      	mov	r3, r0
 8016c62:	6840      	ldr	r0, [r0, #4]
 8016c64:	b158      	cbz	r0, 8016c7e <get_memory+0x1e>
 8016c66:	6842      	ldr	r2, [r0, #4]
 8016c68:	605a      	str	r2, [r3, #4]
 8016c6a:	b10a      	cbz	r2, 8016c70 <get_memory+0x10>
 8016c6c:	2100      	movs	r1, #0
 8016c6e:	6011      	str	r1, [r2, #0]
 8016c70:	681a      	ldr	r2, [r3, #0]
 8016c72:	6042      	str	r2, [r0, #4]
 8016c74:	b102      	cbz	r2, 8016c78 <get_memory+0x18>
 8016c76:	6010      	str	r0, [r2, #0]
 8016c78:	2200      	movs	r2, #0
 8016c7a:	6002      	str	r2, [r0, #0]
 8016c7c:	6018      	str	r0, [r3, #0]
 8016c7e:	4770      	bx	lr

08016c80 <put_memory>:
 8016c80:	680b      	ldr	r3, [r1, #0]
 8016c82:	b10b      	cbz	r3, 8016c88 <put_memory+0x8>
 8016c84:	684a      	ldr	r2, [r1, #4]
 8016c86:	605a      	str	r2, [r3, #4]
 8016c88:	684a      	ldr	r2, [r1, #4]
 8016c8a:	b102      	cbz	r2, 8016c8e <put_memory+0xe>
 8016c8c:	6013      	str	r3, [r2, #0]
 8016c8e:	6803      	ldr	r3, [r0, #0]
 8016c90:	428b      	cmp	r3, r1
 8016c92:	6843      	ldr	r3, [r0, #4]
 8016c94:	bf08      	it	eq
 8016c96:	6002      	streq	r2, [r0, #0]
 8016c98:	604b      	str	r3, [r1, #4]
 8016c9a:	b103      	cbz	r3, 8016c9e <put_memory+0x1e>
 8016c9c:	6019      	str	r1, [r3, #0]
 8016c9e:	2300      	movs	r3, #0
 8016ca0:	600b      	str	r3, [r1, #0]
 8016ca2:	6041      	str	r1, [r0, #4]
 8016ca4:	4770      	bx	lr
 8016ca6:	bf00      	nop

08016ca8 <rmw_destroy_client>:
 8016ca8:	b570      	push	{r4, r5, r6, lr}
 8016caa:	b128      	cbz	r0, 8016cb8 <rmw_destroy_client+0x10>
 8016cac:	4604      	mov	r4, r0
 8016cae:	6800      	ldr	r0, [r0, #0]
 8016cb0:	460d      	mov	r5, r1
 8016cb2:	f7f7 ffa9 	bl	800ec08 <is_uxrce_rmw_identifier_valid>
 8016cb6:	b910      	cbnz	r0, 8016cbe <rmw_destroy_client+0x16>
 8016cb8:	2401      	movs	r4, #1
 8016cba:	4620      	mov	r0, r4
 8016cbc:	bd70      	pop	{r4, r5, r6, pc}
 8016cbe:	6863      	ldr	r3, [r4, #4]
 8016cc0:	2b00      	cmp	r3, #0
 8016cc2:	d0f9      	beq.n	8016cb8 <rmw_destroy_client+0x10>
 8016cc4:	2d00      	cmp	r5, #0
 8016cc6:	d0f7      	beq.n	8016cb8 <rmw_destroy_client+0x10>
 8016cc8:	6828      	ldr	r0, [r5, #0]
 8016cca:	f7f7 ff9d 	bl	800ec08 <is_uxrce_rmw_identifier_valid>
 8016cce:	2800      	cmp	r0, #0
 8016cd0:	d0f2      	beq.n	8016cb8 <rmw_destroy_client+0x10>
 8016cd2:	686e      	ldr	r6, [r5, #4]
 8016cd4:	2e00      	cmp	r6, #0
 8016cd6:	d0ef      	beq.n	8016cb8 <rmw_destroy_client+0x10>
 8016cd8:	6864      	ldr	r4, [r4, #4]
 8016cda:	6932      	ldr	r2, [r6, #16]
 8016cdc:	6920      	ldr	r0, [r4, #16]
 8016cde:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016ce2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016ce6:	6819      	ldr	r1, [r3, #0]
 8016ce8:	f7f9 f99c 	bl	8010024 <uxr_buffer_cancel_data>
 8016cec:	4602      	mov	r2, r0
 8016cee:	6920      	ldr	r0, [r4, #16]
 8016cf0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016cf4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016cf8:	f7f7 fe6c 	bl	800e9d4 <run_xrce_session>
 8016cfc:	6920      	ldr	r0, [r4, #16]
 8016cfe:	6932      	ldr	r2, [r6, #16]
 8016d00:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016d04:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016d08:	6819      	ldr	r1, [r3, #0]
 8016d0a:	f7f8 fecb 	bl	800faa4 <uxr_buffer_delete_entity>
 8016d0e:	4602      	mov	r2, r0
 8016d10:	6920      	ldr	r0, [r4, #16]
 8016d12:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016d16:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016d1a:	f7f7 fe5b 	bl	800e9d4 <run_xrce_session>
 8016d1e:	2800      	cmp	r0, #0
 8016d20:	4628      	mov	r0, r5
 8016d22:	bf14      	ite	ne
 8016d24:	2400      	movne	r4, #0
 8016d26:	2402      	moveq	r4, #2
 8016d28:	f7f7 fd3c 	bl	800e7a4 <rmw_uxrce_fini_client_memory>
 8016d2c:	e7c5      	b.n	8016cba <rmw_destroy_client+0x12>
 8016d2e:	bf00      	nop

08016d30 <rmw_get_implementation_identifier>:
 8016d30:	4b01      	ldr	r3, [pc, #4]	@ (8016d38 <rmw_get_implementation_identifier+0x8>)
 8016d32:	6818      	ldr	r0, [r3, #0]
 8016d34:	4770      	bx	lr
 8016d36:	bf00      	nop
 8016d38:	0801bda0 	.word	0x0801bda0

08016d3c <create_topic>:
 8016d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d40:	4605      	mov	r5, r0
 8016d42:	b084      	sub	sp, #16
 8016d44:	4822      	ldr	r0, [pc, #136]	@ (8016dd0 <create_topic+0x94>)
 8016d46:	460f      	mov	r7, r1
 8016d48:	4616      	mov	r6, r2
 8016d4a:	f7ff ff89 	bl	8016c60 <get_memory>
 8016d4e:	4604      	mov	r4, r0
 8016d50:	2800      	cmp	r0, #0
 8016d52:	d039      	beq.n	8016dc8 <create_topic+0x8c>
 8016d54:	692b      	ldr	r3, [r5, #16]
 8016d56:	6884      	ldr	r4, [r0, #8]
 8016d58:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8016dd8 <create_topic+0x9c>
 8016d5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016d60:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8016d64:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8016d68:	1c42      	adds	r2, r0, #1
 8016d6a:	2102      	movs	r1, #2
 8016d6c:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8016d70:	f7f9 f8ee 	bl	800ff50 <uxr_object_id>
 8016d74:	223c      	movs	r2, #60	@ 0x3c
 8016d76:	6120      	str	r0, [r4, #16]
 8016d78:	4641      	mov	r1, r8
 8016d7a:	4638      	mov	r0, r7
 8016d7c:	f7f7 ff2a 	bl	800ebd4 <generate_topic_name>
 8016d80:	b1f0      	cbz	r0, 8016dc0 <create_topic+0x84>
 8016d82:	4f14      	ldr	r7, [pc, #80]	@ (8016dd4 <create_topic+0x98>)
 8016d84:	4630      	mov	r0, r6
 8016d86:	2264      	movs	r2, #100	@ 0x64
 8016d88:	4639      	mov	r1, r7
 8016d8a:	f7f7 fef3 	bl	800eb74 <generate_type_name>
 8016d8e:	b1b8      	cbz	r0, 8016dc0 <create_topic+0x84>
 8016d90:	6928      	ldr	r0, [r5, #16]
 8016d92:	2306      	movs	r3, #6
 8016d94:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8016d98:	f8cd 8000 	str.w	r8, [sp]
 8016d9c:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8016da0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016da4:	6811      	ldr	r1, [r2, #0]
 8016da6:	696b      	ldr	r3, [r5, #20]
 8016da8:	6922      	ldr	r2, [r4, #16]
 8016daa:	f7f8 fef9 	bl	800fba0 <uxr_buffer_create_topic_bin>
 8016dae:	4602      	mov	r2, r0
 8016db0:	6928      	ldr	r0, [r5, #16]
 8016db2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8016db6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8016dba:	f7f7 fe0b 	bl	800e9d4 <run_xrce_session>
 8016dbe:	b918      	cbnz	r0, 8016dc8 <create_topic+0x8c>
 8016dc0:	4620      	mov	r0, r4
 8016dc2:	f7f7 fd05 	bl	800e7d0 <rmw_uxrce_fini_topic_memory>
 8016dc6:	2400      	movs	r4, #0
 8016dc8:	4620      	mov	r0, r4
 8016dca:	b004      	add	sp, #16
 8016dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016dd0:	2000b8a4 	.word	0x2000b8a4
 8016dd4:	2000b990 	.word	0x2000b990
 8016dd8:	2000b954 	.word	0x2000b954

08016ddc <destroy_topic>:
 8016ddc:	b538      	push	{r3, r4, r5, lr}
 8016dde:	6985      	ldr	r5, [r0, #24]
 8016de0:	b1d5      	cbz	r5, 8016e18 <destroy_topic+0x3c>
 8016de2:	4604      	mov	r4, r0
 8016de4:	6928      	ldr	r0, [r5, #16]
 8016de6:	6922      	ldr	r2, [r4, #16]
 8016de8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016dec:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016df0:	6819      	ldr	r1, [r3, #0]
 8016df2:	f7f8 fe57 	bl	800faa4 <uxr_buffer_delete_entity>
 8016df6:	4602      	mov	r2, r0
 8016df8:	6928      	ldr	r0, [r5, #16]
 8016dfa:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016dfe:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016e02:	f7f7 fde7 	bl	800e9d4 <run_xrce_session>
 8016e06:	2800      	cmp	r0, #0
 8016e08:	4620      	mov	r0, r4
 8016e0a:	bf14      	ite	ne
 8016e0c:	2400      	movne	r4, #0
 8016e0e:	2402      	moveq	r4, #2
 8016e10:	f7f7 fcde 	bl	800e7d0 <rmw_uxrce_fini_topic_memory>
 8016e14:	4620      	mov	r0, r4
 8016e16:	bd38      	pop	{r3, r4, r5, pc}
 8016e18:	2401      	movs	r4, #1
 8016e1a:	4620      	mov	r0, r4
 8016e1c:	bd38      	pop	{r3, r4, r5, pc}
 8016e1e:	bf00      	nop

08016e20 <rmw_send_request>:
 8016e20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016e24:	4604      	mov	r4, r0
 8016e26:	6800      	ldr	r0, [r0, #0]
 8016e28:	b08b      	sub	sp, #44	@ 0x2c
 8016e2a:	460e      	mov	r6, r1
 8016e2c:	4615      	mov	r5, r2
 8016e2e:	b128      	cbz	r0, 8016e3c <rmw_send_request+0x1c>
 8016e30:	4b21      	ldr	r3, [pc, #132]	@ (8016eb8 <rmw_send_request+0x98>)
 8016e32:	6819      	ldr	r1, [r3, #0]
 8016e34:	f7e9 f9f4 	bl	8000220 <strcmp>
 8016e38:	2800      	cmp	r0, #0
 8016e3a:	d139      	bne.n	8016eb0 <rmw_send_request+0x90>
 8016e3c:	6864      	ldr	r4, [r4, #4]
 8016e3e:	6963      	ldr	r3, [r4, #20]
 8016e40:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 8016e44:	689b      	ldr	r3, [r3, #8]
 8016e46:	4798      	blx	r3
 8016e48:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8016e4c:	4630      	mov	r0, r6
 8016e4e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016e52:	4798      	blx	r3
 8016e54:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8016e58:	9000      	str	r0, [sp, #0]
 8016e5a:	6922      	ldr	r2, [r4, #16]
 8016e5c:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8016e5e:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8016e62:	ab02      	add	r3, sp, #8
 8016e64:	f7fb f99a 	bl	801219c <uxr_prepare_output_stream>
 8016e68:	2700      	movs	r7, #0
 8016e6a:	6028      	str	r0, [r5, #0]
 8016e6c:	606f      	str	r7, [r5, #4]
 8016e6e:	b198      	cbz	r0, 8016e98 <rmw_send_request+0x78>
 8016e70:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8016e74:	a902      	add	r1, sp, #8
 8016e76:	4630      	mov	r0, r6
 8016e78:	4798      	blx	r3
 8016e7a:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8016e7e:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8016e82:	2b01      	cmp	r3, #1
 8016e84:	d00c      	beq.n	8016ea0 <rmw_send_request+0x80>
 8016e86:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8016e88:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016e8c:	f7f9 feb2 	bl	8010bf4 <uxr_run_session_until_confirm_delivery>
 8016e90:	4638      	mov	r0, r7
 8016e92:	b00b      	add	sp, #44	@ 0x2c
 8016e94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016e98:	2001      	movs	r0, #1
 8016e9a:	b00b      	add	sp, #44	@ 0x2c
 8016e9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016ea0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016ea4:	f7f9 fae6 	bl	8010474 <uxr_flash_output_streams>
 8016ea8:	4638      	mov	r0, r7
 8016eaa:	b00b      	add	sp, #44	@ 0x2c
 8016eac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016eb0:	200c      	movs	r0, #12
 8016eb2:	b00b      	add	sp, #44	@ 0x2c
 8016eb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016eb8:	0801bda0 	.word	0x0801bda0

08016ebc <rmw_take_request>:
 8016ebc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016ec0:	4605      	mov	r5, r0
 8016ec2:	6800      	ldr	r0, [r0, #0]
 8016ec4:	b089      	sub	sp, #36	@ 0x24
 8016ec6:	460c      	mov	r4, r1
 8016ec8:	4690      	mov	r8, r2
 8016eca:	461e      	mov	r6, r3
 8016ecc:	b128      	cbz	r0, 8016eda <rmw_take_request+0x1e>
 8016ece:	4b28      	ldr	r3, [pc, #160]	@ (8016f70 <rmw_take_request+0xb4>)
 8016ed0:	6819      	ldr	r1, [r3, #0]
 8016ed2:	f7e9 f9a5 	bl	8000220 <strcmp>
 8016ed6:	2800      	cmp	r0, #0
 8016ed8:	d146      	bne.n	8016f68 <rmw_take_request+0xac>
 8016eda:	b10e      	cbz	r6, 8016ee0 <rmw_take_request+0x24>
 8016edc:	2300      	movs	r3, #0
 8016ede:	7033      	strb	r3, [r6, #0]
 8016ee0:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8016ee4:	f7f7 fcf8 	bl	800e8d8 <rmw_uxrce_clean_expired_static_input_buffer>
 8016ee8:	4648      	mov	r0, r9
 8016eea:	f7f7 fccd 	bl	800e888 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016eee:	4607      	mov	r7, r0
 8016ef0:	b3b0      	cbz	r0, 8016f60 <rmw_take_request+0xa4>
 8016ef2:	6885      	ldr	r5, [r0, #8]
 8016ef4:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8016ef8:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8016efc:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8016f00:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8016f04:	7423      	strb	r3, [r4, #16]
 8016f06:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 8016f0a:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 8016f0e:	74e2      	strb	r2, [r4, #19]
 8016f10:	f8a4 3011 	strh.w	r3, [r4, #17]
 8016f14:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 8016f18:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 8016f1c:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8016f20:	61e1      	str	r1, [r4, #28]
 8016f22:	6162      	str	r2, [r4, #20]
 8016f24:	61a3      	str	r3, [r4, #24]
 8016f26:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8016f2a:	689b      	ldr	r3, [r3, #8]
 8016f2c:	4798      	blx	r3
 8016f2e:	6844      	ldr	r4, [r0, #4]
 8016f30:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8016f34:	f105 0110 	add.w	r1, r5, #16
 8016f38:	4668      	mov	r0, sp
 8016f3a:	f7f5 f89b 	bl	800c074 <ucdr_init_buffer>
 8016f3e:	68e3      	ldr	r3, [r4, #12]
 8016f40:	4641      	mov	r1, r8
 8016f42:	4668      	mov	r0, sp
 8016f44:	4798      	blx	r3
 8016f46:	4639      	mov	r1, r7
 8016f48:	4604      	mov	r4, r0
 8016f4a:	480a      	ldr	r0, [pc, #40]	@ (8016f74 <rmw_take_request+0xb8>)
 8016f4c:	f7ff fe98 	bl	8016c80 <put_memory>
 8016f50:	b106      	cbz	r6, 8016f54 <rmw_take_request+0x98>
 8016f52:	7034      	strb	r4, [r6, #0]
 8016f54:	f084 0001 	eor.w	r0, r4, #1
 8016f58:	b2c0      	uxtb	r0, r0
 8016f5a:	b009      	add	sp, #36	@ 0x24
 8016f5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016f60:	2001      	movs	r0, #1
 8016f62:	b009      	add	sp, #36	@ 0x24
 8016f64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016f68:	200c      	movs	r0, #12
 8016f6a:	b009      	add	sp, #36	@ 0x24
 8016f6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016f70:	0801bda0 	.word	0x0801bda0
 8016f74:	2000b884 	.word	0x2000b884

08016f78 <rmw_send_response>:
 8016f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016f7a:	4605      	mov	r5, r0
 8016f7c:	6800      	ldr	r0, [r0, #0]
 8016f7e:	b091      	sub	sp, #68	@ 0x44
 8016f80:	460c      	mov	r4, r1
 8016f82:	4616      	mov	r6, r2
 8016f84:	b128      	cbz	r0, 8016f92 <rmw_send_response+0x1a>
 8016f86:	4b29      	ldr	r3, [pc, #164]	@ (801702c <rmw_send_response+0xb4>)
 8016f88:	6819      	ldr	r1, [r3, #0]
 8016f8a:	f7e9 f949 	bl	8000220 <strcmp>
 8016f8e:	2800      	cmp	r0, #0
 8016f90:	d141      	bne.n	8017016 <rmw_send_response+0x9e>
 8016f92:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8016f96:	9306      	str	r3, [sp, #24]
 8016f98:	4623      	mov	r3, r4
 8016f9a:	9207      	str	r2, [sp, #28]
 8016f9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016fa0:	686d      	ldr	r5, [r5, #4]
 8016fa2:	789b      	ldrb	r3, [r3, #2]
 8016fa4:	68a1      	ldr	r1, [r4, #8]
 8016fa6:	f88d 2017 	strb.w	r2, [sp, #23]
 8016faa:	f88d 3016 	strb.w	r3, [sp, #22]
 8016fae:	68e2      	ldr	r2, [r4, #12]
 8016fb0:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8016fb4:	6860      	ldr	r0, [r4, #4]
 8016fb6:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016fba:	ab02      	add	r3, sp, #8
 8016fbc:	c307      	stmia	r3!, {r0, r1, r2}
 8016fbe:	696b      	ldr	r3, [r5, #20]
 8016fc0:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 8016fc2:	68db      	ldr	r3, [r3, #12]
 8016fc4:	4798      	blx	r3
 8016fc6:	6844      	ldr	r4, [r0, #4]
 8016fc8:	4630      	mov	r0, r6
 8016fca:	6923      	ldr	r3, [r4, #16]
 8016fcc:	4798      	blx	r3
 8016fce:	f100 0318 	add.w	r3, r0, #24
 8016fd2:	6938      	ldr	r0, [r7, #16]
 8016fd4:	9300      	str	r3, [sp, #0]
 8016fd6:	692a      	ldr	r2, [r5, #16]
 8016fd8:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8016fda:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016fde:	ab08      	add	r3, sp, #32
 8016fe0:	f7fb f8dc 	bl	801219c <uxr_prepare_output_stream>
 8016fe4:	b910      	cbnz	r0, 8016fec <rmw_send_response+0x74>
 8016fe6:	2001      	movs	r0, #1
 8016fe8:	b011      	add	sp, #68	@ 0x44
 8016fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016fec:	a902      	add	r1, sp, #8
 8016fee:	a808      	add	r0, sp, #32
 8016ff0:	f7fc f962 	bl	80132b8 <uxr_serialize_SampleIdentity>
 8016ff4:	68a3      	ldr	r3, [r4, #8]
 8016ff6:	a908      	add	r1, sp, #32
 8016ff8:	4630      	mov	r0, r6
 8016ffa:	4798      	blx	r3
 8016ffc:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8017000:	6938      	ldr	r0, [r7, #16]
 8017002:	2b01      	cmp	r3, #1
 8017004:	d00a      	beq.n	801701c <rmw_send_response+0xa4>
 8017006:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8017008:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801700c:	f7f9 fdf2 	bl	8010bf4 <uxr_run_session_until_confirm_delivery>
 8017010:	2000      	movs	r0, #0
 8017012:	b011      	add	sp, #68	@ 0x44
 8017014:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017016:	200c      	movs	r0, #12
 8017018:	b011      	add	sp, #68	@ 0x44
 801701a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801701c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017020:	f7f9 fa28 	bl	8010474 <uxr_flash_output_streams>
 8017024:	2000      	movs	r0, #0
 8017026:	b011      	add	sp, #68	@ 0x44
 8017028:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801702a:	bf00      	nop
 801702c:	0801bda0 	.word	0x0801bda0

08017030 <rmw_take_response>:
 8017030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017034:	4604      	mov	r4, r0
 8017036:	6800      	ldr	r0, [r0, #0]
 8017038:	b088      	sub	sp, #32
 801703a:	4688      	mov	r8, r1
 801703c:	4617      	mov	r7, r2
 801703e:	461d      	mov	r5, r3
 8017040:	b120      	cbz	r0, 801704c <rmw_take_response+0x1c>
 8017042:	4b1e      	ldr	r3, [pc, #120]	@ (80170bc <rmw_take_response+0x8c>)
 8017044:	6819      	ldr	r1, [r3, #0]
 8017046:	f7e9 f8eb 	bl	8000220 <strcmp>
 801704a:	bb78      	cbnz	r0, 80170ac <rmw_take_response+0x7c>
 801704c:	b10d      	cbz	r5, 8017052 <rmw_take_response+0x22>
 801704e:	2300      	movs	r3, #0
 8017050:	702b      	strb	r3, [r5, #0]
 8017052:	6864      	ldr	r4, [r4, #4]
 8017054:	f7f7 fc40 	bl	800e8d8 <rmw_uxrce_clean_expired_static_input_buffer>
 8017058:	4620      	mov	r0, r4
 801705a:	f7f7 fc15 	bl	800e888 <rmw_uxrce_find_static_input_buffer_by_owner>
 801705e:	4606      	mov	r6, r0
 8017060:	b340      	cbz	r0, 80170b4 <rmw_take_response+0x84>
 8017062:	6963      	ldr	r3, [r4, #20]
 8017064:	6884      	ldr	r4, [r0, #8]
 8017066:	68db      	ldr	r3, [r3, #12]
 8017068:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 801706c:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8017070:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8017074:	4798      	blx	r3
 8017076:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801707a:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 801707e:	f104 0110 	add.w	r1, r4, #16
 8017082:	4668      	mov	r0, sp
 8017084:	f7f4 fff6 	bl	800c074 <ucdr_init_buffer>
 8017088:	4639      	mov	r1, r7
 801708a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801708e:	4668      	mov	r0, sp
 8017090:	4798      	blx	r3
 8017092:	4631      	mov	r1, r6
 8017094:	4604      	mov	r4, r0
 8017096:	480a      	ldr	r0, [pc, #40]	@ (80170c0 <rmw_take_response+0x90>)
 8017098:	f7ff fdf2 	bl	8016c80 <put_memory>
 801709c:	b105      	cbz	r5, 80170a0 <rmw_take_response+0x70>
 801709e:	702c      	strb	r4, [r5, #0]
 80170a0:	f084 0001 	eor.w	r0, r4, #1
 80170a4:	b2c0      	uxtb	r0, r0
 80170a6:	b008      	add	sp, #32
 80170a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80170ac:	200c      	movs	r0, #12
 80170ae:	b008      	add	sp, #32
 80170b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80170b4:	2001      	movs	r0, #1
 80170b6:	b008      	add	sp, #32
 80170b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80170bc:	0801bda0 	.word	0x0801bda0
 80170c0:	2000b884 	.word	0x2000b884

080170c4 <rmw_take_with_info>:
 80170c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80170c6:	4604      	mov	r4, r0
 80170c8:	6800      	ldr	r0, [r0, #0]
 80170ca:	b089      	sub	sp, #36	@ 0x24
 80170cc:	460f      	mov	r7, r1
 80170ce:	4615      	mov	r5, r2
 80170d0:	b128      	cbz	r0, 80170de <rmw_take_with_info+0x1a>
 80170d2:	4b24      	ldr	r3, [pc, #144]	@ (8017164 <rmw_take_with_info+0xa0>)
 80170d4:	6819      	ldr	r1, [r3, #0]
 80170d6:	f7e9 f8a3 	bl	8000220 <strcmp>
 80170da:	2800      	cmp	r0, #0
 80170dc:	d13e      	bne.n	801715c <rmw_take_with_info+0x98>
 80170de:	b305      	cbz	r5, 8017122 <rmw_take_with_info+0x5e>
 80170e0:	6864      	ldr	r4, [r4, #4]
 80170e2:	2300      	movs	r3, #0
 80170e4:	702b      	strb	r3, [r5, #0]
 80170e6:	f7f7 fbf7 	bl	800e8d8 <rmw_uxrce_clean_expired_static_input_buffer>
 80170ea:	4620      	mov	r0, r4
 80170ec:	f7f7 fbcc 	bl	800e888 <rmw_uxrce_find_static_input_buffer_by_owner>
 80170f0:	4606      	mov	r6, r0
 80170f2:	b1f0      	cbz	r0, 8017132 <rmw_take_with_info+0x6e>
 80170f4:	6881      	ldr	r1, [r0, #8]
 80170f6:	4668      	mov	r0, sp
 80170f8:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 80170fc:	3110      	adds	r1, #16
 80170fe:	f7f4 ffb9 	bl	800c074 <ucdr_init_buffer>
 8017102:	69a3      	ldr	r3, [r4, #24]
 8017104:	4639      	mov	r1, r7
 8017106:	68db      	ldr	r3, [r3, #12]
 8017108:	4668      	mov	r0, sp
 801710a:	4798      	blx	r3
 801710c:	4631      	mov	r1, r6
 801710e:	4604      	mov	r4, r0
 8017110:	4815      	ldr	r0, [pc, #84]	@ (8017168 <rmw_take_with_info+0xa4>)
 8017112:	f7ff fdb5 	bl	8016c80 <put_memory>
 8017116:	702c      	strb	r4, [r5, #0]
 8017118:	f084 0001 	eor.w	r0, r4, #1
 801711c:	b2c0      	uxtb	r0, r0
 801711e:	b009      	add	sp, #36	@ 0x24
 8017120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017122:	6864      	ldr	r4, [r4, #4]
 8017124:	f7f7 fbd8 	bl	800e8d8 <rmw_uxrce_clean_expired_static_input_buffer>
 8017128:	4620      	mov	r0, r4
 801712a:	f7f7 fbad 	bl	800e888 <rmw_uxrce_find_static_input_buffer_by_owner>
 801712e:	4605      	mov	r5, r0
 8017130:	b910      	cbnz	r0, 8017138 <rmw_take_with_info+0x74>
 8017132:	2001      	movs	r0, #1
 8017134:	b009      	add	sp, #36	@ 0x24
 8017136:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017138:	68a9      	ldr	r1, [r5, #8]
 801713a:	4668      	mov	r0, sp
 801713c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8017140:	3110      	adds	r1, #16
 8017142:	f7f4 ff97 	bl	800c074 <ucdr_init_buffer>
 8017146:	69a3      	ldr	r3, [r4, #24]
 8017148:	4639      	mov	r1, r7
 801714a:	68db      	ldr	r3, [r3, #12]
 801714c:	4668      	mov	r0, sp
 801714e:	4798      	blx	r3
 8017150:	4629      	mov	r1, r5
 8017152:	4604      	mov	r4, r0
 8017154:	4804      	ldr	r0, [pc, #16]	@ (8017168 <rmw_take_with_info+0xa4>)
 8017156:	f7ff fd93 	bl	8016c80 <put_memory>
 801715a:	e7dd      	b.n	8017118 <rmw_take_with_info+0x54>
 801715c:	200c      	movs	r0, #12
 801715e:	b009      	add	sp, #36	@ 0x24
 8017160:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017162:	bf00      	nop
 8017164:	0801bda0 	.word	0x0801bda0
 8017168:	2000b884 	.word	0x2000b884

0801716c <rmw_wait>:
 801716c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017170:	b089      	sub	sp, #36	@ 0x24
 8017172:	4605      	mov	r5, r0
 8017174:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8017176:	460e      	mov	r6, r1
 8017178:	4698      	mov	r8, r3
 801717a:	4691      	mov	r9, r2
 801717c:	2a00      	cmp	r2, #0
 801717e:	f000 810a 	beq.w	8017396 <rmw_wait+0x22a>
 8017182:	b16c      	cbz	r4, 80171a0 <rmw_wait+0x34>
 8017184:	4bae      	ldr	r3, [pc, #696]	@ (8017440 <rmw_wait+0x2d4>)
 8017186:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017188:	af04      	add	r7, sp, #16
 801718a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 801718e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8017192:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8017196:	f7ff faaf 	bl	80166f8 <rmw_time_equal>
 801719a:	2800      	cmp	r0, #0
 801719c:	f000 8127 	beq.w	80173ee <rmw_wait+0x282>
 80171a0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80171a4:	f7f7 fb98 	bl	800e8d8 <rmw_uxrce_clean_expired_static_input_buffer>
 80171a8:	4ba6      	ldr	r3, [pc, #664]	@ (8017444 <rmw_wait+0x2d8>)
 80171aa:	681c      	ldr	r4, [r3, #0]
 80171ac:	b14c      	cbz	r4, 80171c2 <rmw_wait+0x56>
 80171ae:	4623      	mov	r3, r4
 80171b0:	2100      	movs	r1, #0
 80171b2:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 80171b6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80171ba:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 80171be:	2b00      	cmp	r3, #0
 80171c0:	d1f7      	bne.n	80171b2 <rmw_wait+0x46>
 80171c2:	f1b9 0f00 	cmp.w	r9, #0
 80171c6:	d011      	beq.n	80171ec <rmw_wait+0x80>
 80171c8:	f8d9 1000 	ldr.w	r1, [r9]
 80171cc:	b171      	cbz	r1, 80171ec <rmw_wait+0x80>
 80171ce:	f8d9 c004 	ldr.w	ip, [r9, #4]
 80171d2:	2300      	movs	r3, #0
 80171d4:	2001      	movs	r0, #1
 80171d6:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80171da:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 80171dc:	6912      	ldr	r2, [r2, #16]
 80171de:	3301      	adds	r3, #1
 80171e0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80171e4:	4299      	cmp	r1, r3
 80171e6:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80171ea:	d1f4      	bne.n	80171d6 <rmw_wait+0x6a>
 80171ec:	f1b8 0f00 	cmp.w	r8, #0
 80171f0:	d011      	beq.n	8017216 <rmw_wait+0xaa>
 80171f2:	f8d8 1000 	ldr.w	r1, [r8]
 80171f6:	b171      	cbz	r1, 8017216 <rmw_wait+0xaa>
 80171f8:	f8d8 c004 	ldr.w	ip, [r8, #4]
 80171fc:	2300      	movs	r3, #0
 80171fe:	2001      	movs	r0, #1
 8017200:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8017204:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8017206:	6912      	ldr	r2, [r2, #16]
 8017208:	3301      	adds	r3, #1
 801720a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801720e:	4299      	cmp	r1, r3
 8017210:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8017214:	d1f4      	bne.n	8017200 <rmw_wait+0x94>
 8017216:	b185      	cbz	r5, 801723a <rmw_wait+0xce>
 8017218:	6829      	ldr	r1, [r5, #0]
 801721a:	b171      	cbz	r1, 801723a <rmw_wait+0xce>
 801721c:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8017220:	2300      	movs	r3, #0
 8017222:	2001      	movs	r0, #1
 8017224:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8017228:	6a12      	ldr	r2, [r2, #32]
 801722a:	6912      	ldr	r2, [r2, #16]
 801722c:	3301      	adds	r3, #1
 801722e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017232:	4299      	cmp	r1, r3
 8017234:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8017238:	d1f4      	bne.n	8017224 <rmw_wait+0xb8>
 801723a:	b34c      	cbz	r4, 8017290 <rmw_wait+0x124>
 801723c:	4622      	mov	r2, r4
 801723e:	2300      	movs	r3, #0
 8017240:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8017244:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8017248:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 801724c:	440b      	add	r3, r1
 801724e:	b2db      	uxtb	r3, r3
 8017250:	2a00      	cmp	r2, #0
 8017252:	d1f5      	bne.n	8017240 <rmw_wait+0xd4>
 8017254:	2b00      	cmp	r3, #0
 8017256:	f000 8084 	beq.w	8017362 <rmw_wait+0x1f6>
 801725a:	1c7a      	adds	r2, r7, #1
 801725c:	d00d      	beq.n	801727a <rmw_wait+0x10e>
 801725e:	ee07 7a90 	vmov	s15, r7
 8017262:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8017266:	ee07 3a90 	vmov	s15, r3
 801726a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801726e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8017272:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8017276:	ee17 7a90 	vmov	r7, s15
 801727a:	68a0      	ldr	r0, [r4, #8]
 801727c:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8017280:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8017284:	2b00      	cmp	r3, #0
 8017286:	f040 8090 	bne.w	80173aa <rmw_wait+0x23e>
 801728a:	6864      	ldr	r4, [r4, #4]
 801728c:	2c00      	cmp	r4, #0
 801728e:	d1f4      	bne.n	801727a <rmw_wait+0x10e>
 8017290:	f1b9 0f00 	cmp.w	r9, #0
 8017294:	f000 80bc 	beq.w	8017410 <rmw_wait+0x2a4>
 8017298:	f8d9 7000 	ldr.w	r7, [r9]
 801729c:	2f00      	cmp	r7, #0
 801729e:	f000 808e 	beq.w	80173be <rmw_wait+0x252>
 80172a2:	2400      	movs	r4, #0
 80172a4:	4627      	mov	r7, r4
 80172a6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80172aa:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80172ae:	f7f7 faeb 	bl	800e888 <rmw_uxrce_find_static_input_buffer_by_owner>
 80172b2:	2800      	cmp	r0, #0
 80172b4:	d05f      	beq.n	8017376 <rmw_wait+0x20a>
 80172b6:	f8d9 3000 	ldr.w	r3, [r9]
 80172ba:	3401      	adds	r4, #1
 80172bc:	42a3      	cmp	r3, r4
 80172be:	f04f 0701 	mov.w	r7, #1
 80172c2:	d8f0      	bhi.n	80172a6 <rmw_wait+0x13a>
 80172c4:	f1b8 0f00 	cmp.w	r8, #0
 80172c8:	d012      	beq.n	80172f0 <rmw_wait+0x184>
 80172ca:	f8d8 3000 	ldr.w	r3, [r8]
 80172ce:	b17b      	cbz	r3, 80172f0 <rmw_wait+0x184>
 80172d0:	2400      	movs	r4, #0
 80172d2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80172d6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80172da:	f7f7 fad5 	bl	800e888 <rmw_uxrce_find_static_input_buffer_by_owner>
 80172de:	2800      	cmp	r0, #0
 80172e0:	d051      	beq.n	8017386 <rmw_wait+0x21a>
 80172e2:	f8d8 3000 	ldr.w	r3, [r8]
 80172e6:	3401      	adds	r4, #1
 80172e8:	42a3      	cmp	r3, r4
 80172ea:	f04f 0701 	mov.w	r7, #1
 80172ee:	d8f0      	bhi.n	80172d2 <rmw_wait+0x166>
 80172f0:	b1dd      	cbz	r5, 801732a <rmw_wait+0x1be>
 80172f2:	682b      	ldr	r3, [r5, #0]
 80172f4:	b1cb      	cbz	r3, 801732a <rmw_wait+0x1be>
 80172f6:	2400      	movs	r4, #0
 80172f8:	686b      	ldr	r3, [r5, #4]
 80172fa:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80172fe:	f7f7 fac3 	bl	800e888 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017302:	b158      	cbz	r0, 801731c <rmw_wait+0x1b0>
 8017304:	682b      	ldr	r3, [r5, #0]
 8017306:	3401      	adds	r4, #1
 8017308:	42a3      	cmp	r3, r4
 801730a:	d969      	bls.n	80173e0 <rmw_wait+0x274>
 801730c:	686b      	ldr	r3, [r5, #4]
 801730e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017312:	2701      	movs	r7, #1
 8017314:	f7f7 fab8 	bl	800e888 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017318:	2800      	cmp	r0, #0
 801731a:	d1f3      	bne.n	8017304 <rmw_wait+0x198>
 801731c:	e9d5 3200 	ldrd	r3, r2, [r5]
 8017320:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8017324:	3401      	adds	r4, #1
 8017326:	42a3      	cmp	r3, r4
 8017328:	d8e6      	bhi.n	80172f8 <rmw_wait+0x18c>
 801732a:	b1a6      	cbz	r6, 8017356 <rmw_wait+0x1ea>
 801732c:	6834      	ldr	r4, [r6, #0]
 801732e:	b194      	cbz	r4, 8017356 <rmw_wait+0x1ea>
 8017330:	2300      	movs	r3, #0
 8017332:	461d      	mov	r5, r3
 8017334:	e004      	b.n	8017340 <rmw_wait+0x1d4>
 8017336:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801733a:	3301      	adds	r3, #1
 801733c:	42a3      	cmp	r3, r4
 801733e:	d00a      	beq.n	8017356 <rmw_wait+0x1ea>
 8017340:	6870      	ldr	r0, [r6, #4]
 8017342:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8017346:	7c0a      	ldrb	r2, [r1, #16]
 8017348:	2a00      	cmp	r2, #0
 801734a:	d0f4      	beq.n	8017336 <rmw_wait+0x1ca>
 801734c:	3301      	adds	r3, #1
 801734e:	42a3      	cmp	r3, r4
 8017350:	740d      	strb	r5, [r1, #16]
 8017352:	4617      	mov	r7, r2
 8017354:	d1f4      	bne.n	8017340 <rmw_wait+0x1d4>
 8017356:	2f00      	cmp	r7, #0
 8017358:	d03e      	beq.n	80173d8 <rmw_wait+0x26c>
 801735a:	2000      	movs	r0, #0
 801735c:	b009      	add	sp, #36	@ 0x24
 801735e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017362:	68a0      	ldr	r0, [r4, #8]
 8017364:	2100      	movs	r1, #0
 8017366:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801736a:	f7f9 fc09 	bl	8010b80 <uxr_run_session_timeout>
 801736e:	6864      	ldr	r4, [r4, #4]
 8017370:	2c00      	cmp	r4, #0
 8017372:	d1f6      	bne.n	8017362 <rmw_wait+0x1f6>
 8017374:	e78c      	b.n	8017290 <rmw_wait+0x124>
 8017376:	e9d9 3200 	ldrd	r3, r2, [r9]
 801737a:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801737e:	3401      	adds	r4, #1
 8017380:	42a3      	cmp	r3, r4
 8017382:	d890      	bhi.n	80172a6 <rmw_wait+0x13a>
 8017384:	e79e      	b.n	80172c4 <rmw_wait+0x158>
 8017386:	e9d8 3200 	ldrd	r3, r2, [r8]
 801738a:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801738e:	3401      	adds	r4, #1
 8017390:	429c      	cmp	r4, r3
 8017392:	d39e      	bcc.n	80172d2 <rmw_wait+0x166>
 8017394:	e7ac      	b.n	80172f0 <rmw_wait+0x184>
 8017396:	2b00      	cmp	r3, #0
 8017398:	f47f aef3 	bne.w	8017182 <rmw_wait+0x16>
 801739c:	2800      	cmp	r0, #0
 801739e:	f47f aef0 	bne.w	8017182 <rmw_wait+0x16>
 80173a2:	2900      	cmp	r1, #0
 80173a4:	f47f aeed 	bne.w	8017182 <rmw_wait+0x16>
 80173a8:	e7d7      	b.n	801735a <rmw_wait+0x1ee>
 80173aa:	4639      	mov	r1, r7
 80173ac:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80173b0:	f7f9 fc00 	bl	8010bb4 <uxr_run_session_until_data>
 80173b4:	6864      	ldr	r4, [r4, #4]
 80173b6:	2c00      	cmp	r4, #0
 80173b8:	f47f af5f 	bne.w	801727a <rmw_wait+0x10e>
 80173bc:	e768      	b.n	8017290 <rmw_wait+0x124>
 80173be:	f1b8 0f00 	cmp.w	r8, #0
 80173c2:	d032      	beq.n	801742a <rmw_wait+0x2be>
 80173c4:	f8d8 3000 	ldr.w	r3, [r8]
 80173c8:	2b00      	cmp	r3, #0
 80173ca:	d181      	bne.n	80172d0 <rmw_wait+0x164>
 80173cc:	461f      	mov	r7, r3
 80173ce:	2d00      	cmp	r5, #0
 80173d0:	d18f      	bne.n	80172f2 <rmw_wait+0x186>
 80173d2:	462f      	mov	r7, r5
 80173d4:	2e00      	cmp	r6, #0
 80173d6:	d1a9      	bne.n	801732c <rmw_wait+0x1c0>
 80173d8:	2002      	movs	r0, #2
 80173da:	b009      	add	sp, #36	@ 0x24
 80173dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80173e0:	2e00      	cmp	r6, #0
 80173e2:	d0ba      	beq.n	801735a <rmw_wait+0x1ee>
 80173e4:	6834      	ldr	r4, [r6, #0]
 80173e6:	2701      	movs	r7, #1
 80173e8:	2c00      	cmp	r4, #0
 80173ea:	d1a1      	bne.n	8017330 <rmw_wait+0x1c4>
 80173ec:	e7b5      	b.n	801735a <rmw_wait+0x1ee>
 80173ee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80173f2:	f7ff f9d5 	bl	80167a0 <rmw_time_total_nsec>
 80173f6:	2300      	movs	r3, #0
 80173f8:	4a13      	ldr	r2, [pc, #76]	@ (8017448 <rmw_wait+0x2dc>)
 80173fa:	f7e9 fc35 	bl	8000c68 <__aeabi_uldivmod>
 80173fe:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8017402:	f171 0300 	sbcs.w	r3, r1, #0
 8017406:	4607      	mov	r7, r0
 8017408:	bfa8      	it	ge
 801740a:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 801740e:	e6c9      	b.n	80171a4 <rmw_wait+0x38>
 8017410:	f1b8 0f00 	cmp.w	r8, #0
 8017414:	d009      	beq.n	801742a <rmw_wait+0x2be>
 8017416:	f8d8 3000 	ldr.w	r3, [r8]
 801741a:	464f      	mov	r7, r9
 801741c:	2b00      	cmp	r3, #0
 801741e:	f47f af57 	bne.w	80172d0 <rmw_wait+0x164>
 8017422:	2d00      	cmp	r5, #0
 8017424:	f47f af65 	bne.w	80172f2 <rmw_wait+0x186>
 8017428:	e7d3      	b.n	80173d2 <rmw_wait+0x266>
 801742a:	b17d      	cbz	r5, 801744c <rmw_wait+0x2e0>
 801742c:	682b      	ldr	r3, [r5, #0]
 801742e:	4647      	mov	r7, r8
 8017430:	2b00      	cmp	r3, #0
 8017432:	f47f af60 	bne.w	80172f6 <rmw_wait+0x18a>
 8017436:	2e00      	cmp	r6, #0
 8017438:	f47f af78 	bne.w	801732c <rmw_wait+0x1c0>
 801743c:	e7cc      	b.n	80173d8 <rmw_wait+0x26c>
 801743e:	bf00      	nop
 8017440:	0801a8d0 	.word	0x0801a8d0
 8017444:	2000b874 	.word	0x2000b874
 8017448:	000f4240 	.word	0x000f4240
 801744c:	2e00      	cmp	r6, #0
 801744e:	d0c3      	beq.n	80173d8 <rmw_wait+0x26c>
 8017450:	6834      	ldr	r4, [r6, #0]
 8017452:	462f      	mov	r7, r5
 8017454:	2c00      	cmp	r4, #0
 8017456:	f47f af6b 	bne.w	8017330 <rmw_wait+0x1c4>
 801745a:	e7bd      	b.n	80173d8 <rmw_wait+0x26c>

0801745c <rmw_create_wait_set>:
 801745c:	b508      	push	{r3, lr}
 801745e:	4803      	ldr	r0, [pc, #12]	@ (801746c <rmw_create_wait_set+0x10>)
 8017460:	f7ff fbfe 	bl	8016c60 <get_memory>
 8017464:	b108      	cbz	r0, 801746a <rmw_create_wait_set+0xe>
 8017466:	6880      	ldr	r0, [r0, #8]
 8017468:	3010      	adds	r0, #16
 801746a:	bd08      	pop	{r3, pc}
 801746c:	2000b8b4 	.word	0x2000b8b4

08017470 <rmw_destroy_wait_set>:
 8017470:	b508      	push	{r3, lr}
 8017472:	4b08      	ldr	r3, [pc, #32]	@ (8017494 <rmw_destroy_wait_set+0x24>)
 8017474:	6819      	ldr	r1, [r3, #0]
 8017476:	b911      	cbnz	r1, 801747e <rmw_destroy_wait_set+0xe>
 8017478:	e00a      	b.n	8017490 <rmw_destroy_wait_set+0x20>
 801747a:	6849      	ldr	r1, [r1, #4]
 801747c:	b141      	cbz	r1, 8017490 <rmw_destroy_wait_set+0x20>
 801747e:	688b      	ldr	r3, [r1, #8]
 8017480:	3310      	adds	r3, #16
 8017482:	4298      	cmp	r0, r3
 8017484:	d1f9      	bne.n	801747a <rmw_destroy_wait_set+0xa>
 8017486:	4803      	ldr	r0, [pc, #12]	@ (8017494 <rmw_destroy_wait_set+0x24>)
 8017488:	f7ff fbfa 	bl	8016c80 <put_memory>
 801748c:	2000      	movs	r0, #0
 801748e:	bd08      	pop	{r3, pc}
 8017490:	2001      	movs	r0, #1
 8017492:	bd08      	pop	{r3, pc}
 8017494:	2000b8b4 	.word	0x2000b8b4

08017498 <sensor_msgs__msg__Imu__init>:
 8017498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801749c:	4605      	mov	r5, r0
 801749e:	b3c0      	cbz	r0, 8017512 <sensor_msgs__msg__Imu__init+0x7a>
 80174a0:	f000 f86a 	bl	8017578 <std_msgs__msg__Header__init>
 80174a4:	4604      	mov	r4, r0
 80174a6:	b310      	cbz	r0, 80174ee <sensor_msgs__msg__Imu__init+0x56>
 80174a8:	f105 0618 	add.w	r6, r5, #24
 80174ac:	4630      	mov	r0, r6
 80174ae:	f000 f89b 	bl	80175e8 <geometry_msgs__msg__Quaternion__init>
 80174b2:	4604      	mov	r4, r0
 80174b4:	2800      	cmp	r0, #0
 80174b6:	d040      	beq.n	801753a <sensor_msgs__msg__Imu__init+0xa2>
 80174b8:	f105 0780 	add.w	r7, r5, #128	@ 0x80
 80174bc:	4638      	mov	r0, r7
 80174be:	f000 f8a9 	bl	8017614 <geometry_msgs__msg__Vector3__init>
 80174c2:	4604      	mov	r4, r0
 80174c4:	b348      	cbz	r0, 801751a <sensor_msgs__msg__Imu__init+0x82>
 80174c6:	f105 08e0 	add.w	r8, r5, #224	@ 0xe0
 80174ca:	4640      	mov	r0, r8
 80174cc:	f000 f8a2 	bl	8017614 <geometry_msgs__msg__Vector3__init>
 80174d0:	4604      	mov	r4, r0
 80174d2:	b9d8      	cbnz	r0, 801750c <sensor_msgs__msg__Imu__init+0x74>
 80174d4:	4628      	mov	r0, r5
 80174d6:	f000 f873 	bl	80175c0 <std_msgs__msg__Header__fini>
 80174da:	4630      	mov	r0, r6
 80174dc:	f000 f898 	bl	8017610 <geometry_msgs__msg__Quaternion__fini>
 80174e0:	4638      	mov	r0, r7
 80174e2:	f000 f89b 	bl	801761c <geometry_msgs__msg__Vector3__fini>
 80174e6:	4640      	mov	r0, r8
 80174e8:	f000 f898 	bl	801761c <geometry_msgs__msg__Vector3__fini>
 80174ec:	e00e      	b.n	801750c <sensor_msgs__msg__Imu__init+0x74>
 80174ee:	4628      	mov	r0, r5
 80174f0:	f000 f866 	bl	80175c0 <std_msgs__msg__Header__fini>
 80174f4:	f105 0018 	add.w	r0, r5, #24
 80174f8:	f000 f88a 	bl	8017610 <geometry_msgs__msg__Quaternion__fini>
 80174fc:	f105 0080 	add.w	r0, r5, #128	@ 0x80
 8017500:	f000 f88c 	bl	801761c <geometry_msgs__msg__Vector3__fini>
 8017504:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 8017508:	f000 f888 	bl	801761c <geometry_msgs__msg__Vector3__fini>
 801750c:	4620      	mov	r0, r4
 801750e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017512:	4604      	mov	r4, r0
 8017514:	4620      	mov	r0, r4
 8017516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801751a:	4628      	mov	r0, r5
 801751c:	f000 f850 	bl	80175c0 <std_msgs__msg__Header__fini>
 8017520:	4630      	mov	r0, r6
 8017522:	f000 f875 	bl	8017610 <geometry_msgs__msg__Quaternion__fini>
 8017526:	4638      	mov	r0, r7
 8017528:	f000 f878 	bl	801761c <geometry_msgs__msg__Vector3__fini>
 801752c:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 8017530:	f000 f874 	bl	801761c <geometry_msgs__msg__Vector3__fini>
 8017534:	4620      	mov	r0, r4
 8017536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801753a:	4628      	mov	r0, r5
 801753c:	f000 f840 	bl	80175c0 <std_msgs__msg__Header__fini>
 8017540:	4630      	mov	r0, r6
 8017542:	e7d9      	b.n	80174f8 <sensor_msgs__msg__Imu__init+0x60>

08017544 <sensor_msgs__msg__Imu__fini>:
 8017544:	b188      	cbz	r0, 801756a <sensor_msgs__msg__Imu__fini+0x26>
 8017546:	b510      	push	{r4, lr}
 8017548:	4604      	mov	r4, r0
 801754a:	f000 f839 	bl	80175c0 <std_msgs__msg__Header__fini>
 801754e:	f104 0018 	add.w	r0, r4, #24
 8017552:	f000 f85d 	bl	8017610 <geometry_msgs__msg__Quaternion__fini>
 8017556:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 801755a:	f000 f85f 	bl	801761c <geometry_msgs__msg__Vector3__fini>
 801755e:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 8017562:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017566:	f000 b859 	b.w	801761c <geometry_msgs__msg__Vector3__fini>
 801756a:	4770      	bx	lr

0801756c <std_msgs__msg__Bool__init>:
 801756c:	3800      	subs	r0, #0
 801756e:	bf18      	it	ne
 8017570:	2001      	movne	r0, #1
 8017572:	4770      	bx	lr

08017574 <std_msgs__msg__Bool__fini>:
 8017574:	4770      	bx	lr
 8017576:	bf00      	nop

08017578 <std_msgs__msg__Header__init>:
 8017578:	b570      	push	{r4, r5, r6, lr}
 801757a:	4605      	mov	r5, r0
 801757c:	b1a8      	cbz	r0, 80175aa <std_msgs__msg__Header__init+0x32>
 801757e:	f000 f82b 	bl	80175d8 <builtin_interfaces__msg__Time__init>
 8017582:	4604      	mov	r4, r0
 8017584:	b140      	cbz	r0, 8017598 <std_msgs__msg__Header__init+0x20>
 8017586:	f105 0608 	add.w	r6, r5, #8
 801758a:	4630      	mov	r0, r6
 801758c:	f001 f978 	bl	8018880 <rosidl_runtime_c__String__init>
 8017590:	4604      	mov	r4, r0
 8017592:	b168      	cbz	r0, 80175b0 <std_msgs__msg__Header__init+0x38>
 8017594:	4620      	mov	r0, r4
 8017596:	bd70      	pop	{r4, r5, r6, pc}
 8017598:	4628      	mov	r0, r5
 801759a:	f000 f821 	bl	80175e0 <builtin_interfaces__msg__Time__fini>
 801759e:	f105 0008 	add.w	r0, r5, #8
 80175a2:	f001 f983 	bl	80188ac <rosidl_runtime_c__String__fini>
 80175a6:	4620      	mov	r0, r4
 80175a8:	bd70      	pop	{r4, r5, r6, pc}
 80175aa:	4604      	mov	r4, r0
 80175ac:	4620      	mov	r0, r4
 80175ae:	bd70      	pop	{r4, r5, r6, pc}
 80175b0:	4628      	mov	r0, r5
 80175b2:	f000 f815 	bl	80175e0 <builtin_interfaces__msg__Time__fini>
 80175b6:	4630      	mov	r0, r6
 80175b8:	f001 f978 	bl	80188ac <rosidl_runtime_c__String__fini>
 80175bc:	e7ea      	b.n	8017594 <std_msgs__msg__Header__init+0x1c>
 80175be:	bf00      	nop

080175c0 <std_msgs__msg__Header__fini>:
 80175c0:	b148      	cbz	r0, 80175d6 <std_msgs__msg__Header__fini+0x16>
 80175c2:	b510      	push	{r4, lr}
 80175c4:	4604      	mov	r4, r0
 80175c6:	f000 f80b 	bl	80175e0 <builtin_interfaces__msg__Time__fini>
 80175ca:	f104 0008 	add.w	r0, r4, #8
 80175ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80175d2:	f001 b96b 	b.w	80188ac <rosidl_runtime_c__String__fini>
 80175d6:	4770      	bx	lr

080175d8 <builtin_interfaces__msg__Time__init>:
 80175d8:	3800      	subs	r0, #0
 80175da:	bf18      	it	ne
 80175dc:	2001      	movne	r0, #1
 80175de:	4770      	bx	lr

080175e0 <builtin_interfaces__msg__Time__fini>:
 80175e0:	4770      	bx	lr
 80175e2:	bf00      	nop
 80175e4:	0000      	movs	r0, r0
	...

080175e8 <geometry_msgs__msg__Quaternion__init>:
 80175e8:	b160      	cbz	r0, 8017604 <geometry_msgs__msg__Quaternion__init+0x1c>
 80175ea:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8017608 <geometry_msgs__msg__Quaternion__init+0x20>
 80175ee:	2200      	movs	r2, #0
 80175f0:	2300      	movs	r3, #0
 80175f2:	e9c0 2300 	strd	r2, r3, [r0]
 80175f6:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80175fa:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80175fe:	ed80 7b06 	vstr	d7, [r0, #24]
 8017602:	2001      	movs	r0, #1
 8017604:	4770      	bx	lr
 8017606:	bf00      	nop
 8017608:	00000000 	.word	0x00000000
 801760c:	3ff00000 	.word	0x3ff00000

08017610 <geometry_msgs__msg__Quaternion__fini>:
 8017610:	4770      	bx	lr
 8017612:	bf00      	nop

08017614 <geometry_msgs__msg__Vector3__init>:
 8017614:	3800      	subs	r0, #0
 8017616:	bf18      	it	ne
 8017618:	2001      	movne	r0, #1
 801761a:	4770      	bx	lr

0801761c <geometry_msgs__msg__Vector3__fini>:
 801761c:	4770      	bx	lr
 801761e:	bf00      	nop

08017620 <ucdr_serialize_string>:
 8017620:	b510      	push	{r4, lr}
 8017622:	b082      	sub	sp, #8
 8017624:	4604      	mov	r4, r0
 8017626:	4608      	mov	r0, r1
 8017628:	9101      	str	r1, [sp, #4]
 801762a:	f7e8 fe03 	bl	8000234 <strlen>
 801762e:	9901      	ldr	r1, [sp, #4]
 8017630:	1c42      	adds	r2, r0, #1
 8017632:	4620      	mov	r0, r4
 8017634:	b002      	add	sp, #8
 8017636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801763a:	f7f8 b9db 	b.w	800f9f4 <ucdr_serialize_sequence_char>
 801763e:	bf00      	nop

08017640 <ucdr_deserialize_string>:
 8017640:	b500      	push	{lr}
 8017642:	b083      	sub	sp, #12
 8017644:	ab01      	add	r3, sp, #4
 8017646:	f7f8 f9e7 	bl	800fa18 <ucdr_deserialize_sequence_char>
 801764a:	b003      	add	sp, #12
 801764c:	f85d fb04 	ldr.w	pc, [sp], #4

08017650 <uxr_init_input_best_effort_stream>:
 8017650:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017654:	8003      	strh	r3, [r0, #0]
 8017656:	4770      	bx	lr

08017658 <uxr_reset_input_best_effort_stream>:
 8017658:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801765c:	8003      	strh	r3, [r0, #0]
 801765e:	4770      	bx	lr

08017660 <uxr_receive_best_effort_message>:
 8017660:	b538      	push	{r3, r4, r5, lr}
 8017662:	4604      	mov	r4, r0
 8017664:	8800      	ldrh	r0, [r0, #0]
 8017666:	460d      	mov	r5, r1
 8017668:	f000 fd42 	bl	80180f0 <uxr_seq_num_cmp>
 801766c:	4603      	mov	r3, r0
 801766e:	2b00      	cmp	r3, #0
 8017670:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8017674:	bfb8      	it	lt
 8017676:	8025      	strhlt	r5, [r4, #0]
 8017678:	bd38      	pop	{r3, r4, r5, pc}
 801767a:	bf00      	nop

0801767c <on_full_input_buffer>:
 801767c:	b570      	push	{r4, r5, r6, lr}
 801767e:	4605      	mov	r5, r0
 8017680:	460c      	mov	r4, r1
 8017682:	682b      	ldr	r3, [r5, #0]
 8017684:	6809      	ldr	r1, [r1, #0]
 8017686:	8920      	ldrh	r0, [r4, #8]
 8017688:	6862      	ldr	r2, [r4, #4]
 801768a:	fbb2 f2f0 	udiv	r2, r2, r0
 801768e:	eba3 0c01 	sub.w	ip, r3, r1
 8017692:	fbbc fcf2 	udiv	ip, ip, r2
 8017696:	f10c 0c01 	add.w	ip, ip, #1
 801769a:	fa1f f38c 	uxth.w	r3, ip
 801769e:	fbb3 f6f0 	udiv	r6, r3, r0
 80176a2:	fb00 3316 	mls	r3, r0, r6, r3
 80176a6:	b29b      	uxth	r3, r3
 80176a8:	fb02 f303 	mul.w	r3, r2, r3
 80176ac:	1d18      	adds	r0, r3, #4
 80176ae:	4408      	add	r0, r1
 80176b0:	7d26      	ldrb	r6, [r4, #20]
 80176b2:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80176b6:	b116      	cbz	r6, 80176be <on_full_input_buffer+0x42>
 80176b8:	2600      	movs	r6, #0
 80176ba:	f840 6c04 	str.w	r6, [r0, #-4]
 80176be:	2a03      	cmp	r2, #3
 80176c0:	d801      	bhi.n	80176c6 <on_full_input_buffer+0x4a>
 80176c2:	2001      	movs	r0, #1
 80176c4:	bd70      	pop	{r4, r5, r6, pc}
 80176c6:	3308      	adds	r3, #8
 80176c8:	4419      	add	r1, r3
 80176ca:	4628      	mov	r0, r5
 80176cc:	692b      	ldr	r3, [r5, #16]
 80176ce:	3a04      	subs	r2, #4
 80176d0:	f7f4 fcc8 	bl	800c064 <ucdr_init_buffer_origin>
 80176d4:	4628      	mov	r0, r5
 80176d6:	4903      	ldr	r1, [pc, #12]	@ (80176e4 <on_full_input_buffer+0x68>)
 80176d8:	4622      	mov	r2, r4
 80176da:	f7f4 fc9f 	bl	800c01c <ucdr_set_on_full_buffer_callback>
 80176de:	2000      	movs	r0, #0
 80176e0:	bd70      	pop	{r4, r5, r6, pc}
 80176e2:	bf00      	nop
 80176e4:	0801767d 	.word	0x0801767d

080176e8 <uxr_init_input_reliable_stream>:
 80176e8:	b500      	push	{lr}
 80176ea:	e9c0 1200 	strd	r1, r2, [r0]
 80176ee:	f04f 0e00 	mov.w	lr, #0
 80176f2:	9a01      	ldr	r2, [sp, #4]
 80176f4:	8103      	strh	r3, [r0, #8]
 80176f6:	6102      	str	r2, [r0, #16]
 80176f8:	f880 e014 	strb.w	lr, [r0, #20]
 80176fc:	b1d3      	cbz	r3, 8017734 <uxr_init_input_reliable_stream+0x4c>
 80176fe:	f8c1 e000 	str.w	lr, [r1]
 8017702:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8017706:	f1bc 0f01 	cmp.w	ip, #1
 801770a:	d913      	bls.n	8017734 <uxr_init_input_reliable_stream+0x4c>
 801770c:	2301      	movs	r3, #1
 801770e:	fbb3 f1fc 	udiv	r1, r3, ip
 8017712:	fb0c 3111 	mls	r1, ip, r1, r3
 8017716:	b289      	uxth	r1, r1
 8017718:	6842      	ldr	r2, [r0, #4]
 801771a:	fbb2 f2fc 	udiv	r2, r2, ip
 801771e:	fb01 f202 	mul.w	r2, r1, r2
 8017722:	6801      	ldr	r1, [r0, #0]
 8017724:	f841 e002 	str.w	lr, [r1, r2]
 8017728:	3301      	adds	r3, #1
 801772a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801772e:	b29b      	uxth	r3, r3
 8017730:	459c      	cmp	ip, r3
 8017732:	d8ec      	bhi.n	801770e <uxr_init_input_reliable_stream+0x26>
 8017734:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017738:	60c3      	str	r3, [r0, #12]
 801773a:	f85d fb04 	ldr.w	pc, [sp], #4
 801773e:	bf00      	nop

08017740 <uxr_reset_input_reliable_stream>:
 8017740:	8901      	ldrh	r1, [r0, #8]
 8017742:	b1e9      	cbz	r1, 8017780 <uxr_reset_input_reliable_stream+0x40>
 8017744:	f04f 0c00 	mov.w	ip, #0
 8017748:	b500      	push	{lr}
 801774a:	4663      	mov	r3, ip
 801774c:	46e6      	mov	lr, ip
 801774e:	fbb3 f2f1 	udiv	r2, r3, r1
 8017752:	fb01 3312 	mls	r3, r1, r2, r3
 8017756:	b29b      	uxth	r3, r3
 8017758:	6842      	ldr	r2, [r0, #4]
 801775a:	fbb2 f2f1 	udiv	r2, r2, r1
 801775e:	fb02 f303 	mul.w	r3, r2, r3
 8017762:	6802      	ldr	r2, [r0, #0]
 8017764:	f842 e003 	str.w	lr, [r2, r3]
 8017768:	f10c 0c01 	add.w	ip, ip, #1
 801776c:	8901      	ldrh	r1, [r0, #8]
 801776e:	fa1f f38c 	uxth.w	r3, ip
 8017772:	4299      	cmp	r1, r3
 8017774:	d8eb      	bhi.n	801774e <uxr_reset_input_reliable_stream+0xe>
 8017776:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801777a:	60c3      	str	r3, [r0, #12]
 801777c:	f85d fb04 	ldr.w	pc, [sp], #4
 8017780:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017784:	60c3      	str	r3, [r0, #12]
 8017786:	4770      	bx	lr

08017788 <uxr_receive_reliable_message>:
 8017788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801778c:	4604      	mov	r4, r0
 801778e:	460d      	mov	r5, r1
 8017790:	8901      	ldrh	r1, [r0, #8]
 8017792:	8980      	ldrh	r0, [r0, #12]
 8017794:	4690      	mov	r8, r2
 8017796:	461f      	mov	r7, r3
 8017798:	f000 fca2 	bl	80180e0 <uxr_seq_num_add>
 801779c:	4629      	mov	r1, r5
 801779e:	4606      	mov	r6, r0
 80177a0:	89a0      	ldrh	r0, [r4, #12]
 80177a2:	f000 fca5 	bl	80180f0 <uxr_seq_num_cmp>
 80177a6:	2800      	cmp	r0, #0
 80177a8:	db0a      	blt.n	80177c0 <uxr_receive_reliable_message+0x38>
 80177aa:	2600      	movs	r6, #0
 80177ac:	89e0      	ldrh	r0, [r4, #14]
 80177ae:	4629      	mov	r1, r5
 80177b0:	f000 fc9e 	bl	80180f0 <uxr_seq_num_cmp>
 80177b4:	2800      	cmp	r0, #0
 80177b6:	da00      	bge.n	80177ba <uxr_receive_reliable_message+0x32>
 80177b8:	81e5      	strh	r5, [r4, #14]
 80177ba:	4630      	mov	r0, r6
 80177bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80177c0:	4630      	mov	r0, r6
 80177c2:	4629      	mov	r1, r5
 80177c4:	f000 fc94 	bl	80180f0 <uxr_seq_num_cmp>
 80177c8:	2800      	cmp	r0, #0
 80177ca:	dbee      	blt.n	80177aa <uxr_receive_reliable_message+0x22>
 80177cc:	6923      	ldr	r3, [r4, #16]
 80177ce:	4640      	mov	r0, r8
 80177d0:	4798      	blx	r3
 80177d2:	2101      	movs	r1, #1
 80177d4:	4681      	mov	r9, r0
 80177d6:	89a0      	ldrh	r0, [r4, #12]
 80177d8:	f000 fc82 	bl	80180e0 <uxr_seq_num_add>
 80177dc:	f1b9 0f00 	cmp.w	r9, #0
 80177e0:	d101      	bne.n	80177e6 <uxr_receive_reliable_message+0x5e>
 80177e2:	4285      	cmp	r5, r0
 80177e4:	d047      	beq.n	8017876 <uxr_receive_reliable_message+0xee>
 80177e6:	8922      	ldrh	r2, [r4, #8]
 80177e8:	fbb5 f0f2 	udiv	r0, r5, r2
 80177ec:	fb02 5010 	mls	r0, r2, r0, r5
 80177f0:	b280      	uxth	r0, r0
 80177f2:	6863      	ldr	r3, [r4, #4]
 80177f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80177f8:	fb00 f303 	mul.w	r3, r0, r3
 80177fc:	6820      	ldr	r0, [r4, #0]
 80177fe:	3304      	adds	r3, #4
 8017800:	4418      	add	r0, r3
 8017802:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8017806:	2b00      	cmp	r3, #0
 8017808:	d1cf      	bne.n	80177aa <uxr_receive_reliable_message+0x22>
 801780a:	4641      	mov	r1, r8
 801780c:	463a      	mov	r2, r7
 801780e:	f001 fe48 	bl	80194a2 <memcpy>
 8017812:	8921      	ldrh	r1, [r4, #8]
 8017814:	fbb5 f2f1 	udiv	r2, r5, r1
 8017818:	fb01 5212 	mls	r2, r1, r2, r5
 801781c:	b292      	uxth	r2, r2
 801781e:	6863      	ldr	r3, [r4, #4]
 8017820:	fbb3 f3f1 	udiv	r3, r3, r1
 8017824:	fb02 f303 	mul.w	r3, r2, r3
 8017828:	6822      	ldr	r2, [r4, #0]
 801782a:	50d7      	str	r7, [r2, r3]
 801782c:	9a08      	ldr	r2, [sp, #32]
 801782e:	2301      	movs	r3, #1
 8017830:	7013      	strb	r3, [r2, #0]
 8017832:	f1b9 0f00 	cmp.w	r9, #0
 8017836:	d0b8      	beq.n	80177aa <uxr_receive_reliable_message+0x22>
 8017838:	89a6      	ldrh	r6, [r4, #12]
 801783a:	4630      	mov	r0, r6
 801783c:	2101      	movs	r1, #1
 801783e:	f000 fc4f 	bl	80180e0 <uxr_seq_num_add>
 8017842:	8922      	ldrh	r2, [r4, #8]
 8017844:	6863      	ldr	r3, [r4, #4]
 8017846:	fbb3 f3f2 	udiv	r3, r3, r2
 801784a:	4606      	mov	r6, r0
 801784c:	fbb0 f0f2 	udiv	r0, r0, r2
 8017850:	fb02 6010 	mls	r0, r2, r0, r6
 8017854:	b280      	uxth	r0, r0
 8017856:	fb00 f303 	mul.w	r3, r0, r3
 801785a:	6820      	ldr	r0, [r4, #0]
 801785c:	3304      	adds	r3, #4
 801785e:	4418      	add	r0, r3
 8017860:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8017864:	2b00      	cmp	r3, #0
 8017866:	d0a0      	beq.n	80177aa <uxr_receive_reliable_message+0x22>
 8017868:	6923      	ldr	r3, [r4, #16]
 801786a:	4798      	blx	r3
 801786c:	2802      	cmp	r0, #2
 801786e:	d008      	beq.n	8017882 <uxr_receive_reliable_message+0xfa>
 8017870:	2801      	cmp	r0, #1
 8017872:	d0e2      	beq.n	801783a <uxr_receive_reliable_message+0xb2>
 8017874:	e799      	b.n	80177aa <uxr_receive_reliable_message+0x22>
 8017876:	9b08      	ldr	r3, [sp, #32]
 8017878:	81a5      	strh	r5, [r4, #12]
 801787a:	2601      	movs	r6, #1
 801787c:	f883 9000 	strb.w	r9, [r3]
 8017880:	e794      	b.n	80177ac <uxr_receive_reliable_message+0x24>
 8017882:	2601      	movs	r6, #1
 8017884:	e792      	b.n	80177ac <uxr_receive_reliable_message+0x24>
 8017886:	bf00      	nop

08017888 <uxr_next_input_reliable_buffer_available>:
 8017888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801788c:	4604      	mov	r4, r0
 801788e:	460f      	mov	r7, r1
 8017890:	8980      	ldrh	r0, [r0, #12]
 8017892:	2101      	movs	r1, #1
 8017894:	4690      	mov	r8, r2
 8017896:	f000 fc23 	bl	80180e0 <uxr_seq_num_add>
 801789a:	8922      	ldrh	r2, [r4, #8]
 801789c:	fbb0 f6f2 	udiv	r6, r0, r2
 80178a0:	fb02 0616 	mls	r6, r2, r6, r0
 80178a4:	b2b6      	uxth	r6, r6
 80178a6:	6863      	ldr	r3, [r4, #4]
 80178a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80178ac:	fb06 f303 	mul.w	r3, r6, r3
 80178b0:	6826      	ldr	r6, [r4, #0]
 80178b2:	3304      	adds	r3, #4
 80178b4:	441e      	add	r6, r3
 80178b6:	f856 9c04 	ldr.w	r9, [r6, #-4]
 80178ba:	f1b9 0f00 	cmp.w	r9, #0
 80178be:	d023      	beq.n	8017908 <uxr_next_input_reliable_buffer_available+0x80>
 80178c0:	6923      	ldr	r3, [r4, #16]
 80178c2:	4605      	mov	r5, r0
 80178c4:	4630      	mov	r0, r6
 80178c6:	4798      	blx	r3
 80178c8:	4682      	mov	sl, r0
 80178ca:	b300      	cbz	r0, 801790e <uxr_next_input_reliable_buffer_available+0x86>
 80178cc:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 80178d0:	2101      	movs	r1, #1
 80178d2:	4650      	mov	r0, sl
 80178d4:	f000 fc04 	bl	80180e0 <uxr_seq_num_add>
 80178d8:	8921      	ldrh	r1, [r4, #8]
 80178da:	fbb0 f2f1 	udiv	r2, r0, r1
 80178de:	4682      	mov	sl, r0
 80178e0:	fb01 0212 	mls	r2, r1, r2, r0
 80178e4:	e9d4 0300 	ldrd	r0, r3, [r4]
 80178e8:	b292      	uxth	r2, r2
 80178ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80178ee:	fb02 f303 	mul.w	r3, r2, r3
 80178f2:	3304      	adds	r3, #4
 80178f4:	4418      	add	r0, r3
 80178f6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80178fa:	b12b      	cbz	r3, 8017908 <uxr_next_input_reliable_buffer_available+0x80>
 80178fc:	6923      	ldr	r3, [r4, #16]
 80178fe:	4798      	blx	r3
 8017900:	2802      	cmp	r0, #2
 8017902:	d01b      	beq.n	801793c <uxr_next_input_reliable_buffer_available+0xb4>
 8017904:	2801      	cmp	r0, #1
 8017906:	d0e3      	beq.n	80178d0 <uxr_next_input_reliable_buffer_available+0x48>
 8017908:	2000      	movs	r0, #0
 801790a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801790e:	464a      	mov	r2, r9
 8017910:	4631      	mov	r1, r6
 8017912:	4638      	mov	r0, r7
 8017914:	f7f4 fbae 	bl	800c074 <ucdr_init_buffer>
 8017918:	8921      	ldrh	r1, [r4, #8]
 801791a:	fbb5 f2f1 	udiv	r2, r5, r1
 801791e:	fb01 5212 	mls	r2, r1, r2, r5
 8017922:	b292      	uxth	r2, r2
 8017924:	6863      	ldr	r3, [r4, #4]
 8017926:	fbb3 f3f1 	udiv	r3, r3, r1
 801792a:	fb02 f303 	mul.w	r3, r2, r3
 801792e:	6822      	ldr	r2, [r4, #0]
 8017930:	f842 a003 	str.w	sl, [r2, r3]
 8017934:	2001      	movs	r0, #1
 8017936:	81a5      	strh	r5, [r4, #12]
 8017938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801793c:	8920      	ldrh	r0, [r4, #8]
 801793e:	fbb5 f3f0 	udiv	r3, r5, r0
 8017942:	fb00 5513 	mls	r5, r0, r3, r5
 8017946:	b2ad      	uxth	r5, r5
 8017948:	6863      	ldr	r3, [r4, #4]
 801794a:	fbb3 f3f0 	udiv	r3, r3, r0
 801794e:	fb03 f505 	mul.w	r5, r3, r5
 8017952:	6823      	ldr	r3, [r4, #0]
 8017954:	2000      	movs	r0, #0
 8017956:	5158      	str	r0, [r3, r5]
 8017958:	eb06 0108 	add.w	r1, r6, r8
 801795c:	eba9 0208 	sub.w	r2, r9, r8
 8017960:	4638      	mov	r0, r7
 8017962:	f7f4 fb87 	bl	800c074 <ucdr_init_buffer>
 8017966:	4638      	mov	r0, r7
 8017968:	4903      	ldr	r1, [pc, #12]	@ (8017978 <uxr_next_input_reliable_buffer_available+0xf0>)
 801796a:	4622      	mov	r2, r4
 801796c:	f7f4 fb56 	bl	800c01c <ucdr_set_on_full_buffer_callback>
 8017970:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8017974:	2001      	movs	r0, #1
 8017976:	e7c8      	b.n	801790a <uxr_next_input_reliable_buffer_available+0x82>
 8017978:	0801767d 	.word	0x0801767d

0801797c <uxr_process_heartbeat>:
 801797c:	b538      	push	{r3, r4, r5, lr}
 801797e:	4611      	mov	r1, r2
 8017980:	4604      	mov	r4, r0
 8017982:	89c0      	ldrh	r0, [r0, #14]
 8017984:	4615      	mov	r5, r2
 8017986:	f000 fbb3 	bl	80180f0 <uxr_seq_num_cmp>
 801798a:	2800      	cmp	r0, #0
 801798c:	bfb8      	it	lt
 801798e:	81e5      	strhlt	r5, [r4, #14]
 8017990:	bd38      	pop	{r3, r4, r5, pc}
 8017992:	bf00      	nop

08017994 <uxr_compute_acknack>:
 8017994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017998:	8903      	ldrh	r3, [r0, #8]
 801799a:	8985      	ldrh	r5, [r0, #12]
 801799c:	4604      	mov	r4, r0
 801799e:	460e      	mov	r6, r1
 80179a0:	b1d3      	cbz	r3, 80179d8 <uxr_compute_acknack+0x44>
 80179a2:	4628      	mov	r0, r5
 80179a4:	2701      	movs	r7, #1
 80179a6:	e003      	b.n	80179b0 <uxr_compute_acknack+0x1c>
 80179a8:	4567      	cmp	r7, ip
 80179aa:	d215      	bcs.n	80179d8 <uxr_compute_acknack+0x44>
 80179ac:	89a0      	ldrh	r0, [r4, #12]
 80179ae:	3701      	adds	r7, #1
 80179b0:	b2b9      	uxth	r1, r7
 80179b2:	f000 fb95 	bl	80180e0 <uxr_seq_num_add>
 80179b6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80179ba:	fbb0 f3fc 	udiv	r3, r0, ip
 80179be:	fb0c 0313 	mls	r3, ip, r3, r0
 80179c2:	b29a      	uxth	r2, r3
 80179c4:	e9d4 1300 	ldrd	r1, r3, [r4]
 80179c8:	fbb3 f3fc 	udiv	r3, r3, ip
 80179cc:	fb02 f303 	mul.w	r3, r2, r3
 80179d0:	58cb      	ldr	r3, [r1, r3]
 80179d2:	2b00      	cmp	r3, #0
 80179d4:	d1e8      	bne.n	80179a8 <uxr_compute_acknack+0x14>
 80179d6:	4605      	mov	r5, r0
 80179d8:	8035      	strh	r5, [r6, #0]
 80179da:	2101      	movs	r1, #1
 80179dc:	4628      	mov	r0, r5
 80179de:	89e7      	ldrh	r7, [r4, #14]
 80179e0:	f000 fb82 	bl	80180e8 <uxr_seq_num_sub>
 80179e4:	4601      	mov	r1, r0
 80179e6:	4638      	mov	r0, r7
 80179e8:	f000 fb7e 	bl	80180e8 <uxr_seq_num_sub>
 80179ec:	4605      	mov	r5, r0
 80179ee:	b318      	cbz	r0, 8017a38 <uxr_compute_acknack+0xa4>
 80179f0:	f04f 0900 	mov.w	r9, #0
 80179f4:	464f      	mov	r7, r9
 80179f6:	f04f 0801 	mov.w	r8, #1
 80179fa:	fa1f f189 	uxth.w	r1, r9
 80179fe:	8830      	ldrh	r0, [r6, #0]
 8017a00:	f000 fb6e 	bl	80180e0 <uxr_seq_num_add>
 8017a04:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8017a08:	fbb0 f3fc 	udiv	r3, r0, ip
 8017a0c:	e9d4 1200 	ldrd	r1, r2, [r4]
 8017a10:	fb03 001c 	mls	r0, r3, ip, r0
 8017a14:	b283      	uxth	r3, r0
 8017a16:	fbb2 f2fc 	udiv	r2, r2, ip
 8017a1a:	fb02 f303 	mul.w	r3, r2, r3
 8017a1e:	fa08 f209 	lsl.w	r2, r8, r9
 8017a22:	58cb      	ldr	r3, [r1, r3]
 8017a24:	f109 0901 	add.w	r9, r9, #1
 8017a28:	b90b      	cbnz	r3, 8017a2e <uxr_compute_acknack+0x9a>
 8017a2a:	4317      	orrs	r7, r2
 8017a2c:	b2bf      	uxth	r7, r7
 8017a2e:	454d      	cmp	r5, r9
 8017a30:	d1e3      	bne.n	80179fa <uxr_compute_acknack+0x66>
 8017a32:	4638      	mov	r0, r7
 8017a34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017a38:	4607      	mov	r7, r0
 8017a3a:	4638      	mov	r0, r7
 8017a3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08017a40 <uxr_init_output_best_effort_stream>:
 8017a40:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8017a44:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8017a48:	6001      	str	r1, [r0, #0]
 8017a4a:	7303      	strb	r3, [r0, #12]
 8017a4c:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8017a50:	4770      	bx	lr
 8017a52:	bf00      	nop

08017a54 <uxr_reset_output_best_effort_stream>:
 8017a54:	7b02      	ldrb	r2, [r0, #12]
 8017a56:	6042      	str	r2, [r0, #4]
 8017a58:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017a5c:	81c3      	strh	r3, [r0, #14]
 8017a5e:	4770      	bx	lr

08017a60 <uxr_prepare_best_effort_buffer_to_write>:
 8017a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017a62:	4604      	mov	r4, r0
 8017a64:	b083      	sub	sp, #12
 8017a66:	6840      	ldr	r0, [r0, #4]
 8017a68:	460d      	mov	r5, r1
 8017a6a:	4616      	mov	r6, r2
 8017a6c:	f7fa fad6 	bl	801201c <uxr_submessage_padding>
 8017a70:	6863      	ldr	r3, [r4, #4]
 8017a72:	4418      	add	r0, r3
 8017a74:	68a3      	ldr	r3, [r4, #8]
 8017a76:	1942      	adds	r2, r0, r5
 8017a78:	4293      	cmp	r3, r2
 8017a7a:	bf2c      	ite	cs
 8017a7c:	2701      	movcs	r7, #1
 8017a7e:	2700      	movcc	r7, #0
 8017a80:	d202      	bcs.n	8017a88 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8017a82:	4638      	mov	r0, r7
 8017a84:	b003      	add	sp, #12
 8017a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017a88:	9000      	str	r0, [sp, #0]
 8017a8a:	6821      	ldr	r1, [r4, #0]
 8017a8c:	4630      	mov	r0, r6
 8017a8e:	2300      	movs	r3, #0
 8017a90:	f7f4 fade 	bl	800c050 <ucdr_init_buffer_origin_offset>
 8017a94:	6861      	ldr	r1, [r4, #4]
 8017a96:	4638      	mov	r0, r7
 8017a98:	4429      	add	r1, r5
 8017a9a:	6061      	str	r1, [r4, #4]
 8017a9c:	b003      	add	sp, #12
 8017a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017aa0 <uxr_prepare_best_effort_buffer_to_send>:
 8017aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017aa4:	4604      	mov	r4, r0
 8017aa6:	461d      	mov	r5, r3
 8017aa8:	6840      	ldr	r0, [r0, #4]
 8017aaa:	7b23      	ldrb	r3, [r4, #12]
 8017aac:	4298      	cmp	r0, r3
 8017aae:	bf8c      	ite	hi
 8017ab0:	2601      	movhi	r6, #1
 8017ab2:	2600      	movls	r6, #0
 8017ab4:	d802      	bhi.n	8017abc <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8017ab6:	4630      	mov	r0, r6
 8017ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017abc:	4688      	mov	r8, r1
 8017abe:	89e0      	ldrh	r0, [r4, #14]
 8017ac0:	2101      	movs	r1, #1
 8017ac2:	4617      	mov	r7, r2
 8017ac4:	f000 fb0c 	bl	80180e0 <uxr_seq_num_add>
 8017ac8:	6823      	ldr	r3, [r4, #0]
 8017aca:	81e0      	strh	r0, [r4, #14]
 8017acc:	8028      	strh	r0, [r5, #0]
 8017ace:	f8c8 3000 	str.w	r3, [r8]
 8017ad2:	6863      	ldr	r3, [r4, #4]
 8017ad4:	603b      	str	r3, [r7, #0]
 8017ad6:	7b23      	ldrb	r3, [r4, #12]
 8017ad8:	6063      	str	r3, [r4, #4]
 8017ada:	4630      	mov	r0, r6
 8017adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017ae0 <on_full_output_buffer>:
 8017ae0:	b538      	push	{r3, r4, r5, lr}
 8017ae2:	6802      	ldr	r2, [r0, #0]
 8017ae4:	460c      	mov	r4, r1
 8017ae6:	6809      	ldr	r1, [r1, #0]
 8017ae8:	8923      	ldrh	r3, [r4, #8]
 8017aea:	eba2 0c01 	sub.w	ip, r2, r1
 8017aee:	6862      	ldr	r2, [r4, #4]
 8017af0:	fbb2 f2f3 	udiv	r2, r2, r3
 8017af4:	fbbc fcf2 	udiv	ip, ip, r2
 8017af8:	f10c 0c01 	add.w	ip, ip, #1
 8017afc:	fa1f fc8c 	uxth.w	ip, ip
 8017b00:	fbbc fef3 	udiv	lr, ip, r3
 8017b04:	fb03 c31e 	mls	r3, r3, lr, ip
 8017b08:	b29b      	uxth	r3, r3
 8017b0a:	fb02 f303 	mul.w	r3, r2, r3
 8017b0e:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8017b12:	58ca      	ldr	r2, [r1, r3]
 8017b14:	4463      	add	r3, ip
 8017b16:	eba2 020c 	sub.w	r2, r2, ip
 8017b1a:	3308      	adds	r3, #8
 8017b1c:	4605      	mov	r5, r0
 8017b1e:	4419      	add	r1, r3
 8017b20:	3a04      	subs	r2, #4
 8017b22:	6903      	ldr	r3, [r0, #16]
 8017b24:	f7f4 fa9e 	bl	800c064 <ucdr_init_buffer_origin>
 8017b28:	4628      	mov	r0, r5
 8017b2a:	4903      	ldr	r1, [pc, #12]	@ (8017b38 <on_full_output_buffer+0x58>)
 8017b2c:	4622      	mov	r2, r4
 8017b2e:	f7f4 fa75 	bl	800c01c <ucdr_set_on_full_buffer_callback>
 8017b32:	2000      	movs	r0, #0
 8017b34:	bd38      	pop	{r3, r4, r5, pc}
 8017b36:	bf00      	nop
 8017b38:	08017ae1 	.word	0x08017ae1

08017b3c <uxr_init_output_reliable_stream>:
 8017b3c:	b410      	push	{r4}
 8017b3e:	f89d c004 	ldrb.w	ip, [sp, #4]
 8017b42:	8103      	strh	r3, [r0, #8]
 8017b44:	e9c0 1200 	strd	r1, r2, [r0]
 8017b48:	f880 c00c 	strb.w	ip, [r0, #12]
 8017b4c:	b1d3      	cbz	r3, 8017b84 <uxr_init_output_reliable_stream+0x48>
 8017b4e:	f8c1 c000 	str.w	ip, [r1]
 8017b52:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8017b56:	f1bc 0f01 	cmp.w	ip, #1
 8017b5a:	d913      	bls.n	8017b84 <uxr_init_output_reliable_stream+0x48>
 8017b5c:	2301      	movs	r3, #1
 8017b5e:	fbb3 f1fc 	udiv	r1, r3, ip
 8017b62:	fb0c 3111 	mls	r1, ip, r1, r3
 8017b66:	b289      	uxth	r1, r1
 8017b68:	6842      	ldr	r2, [r0, #4]
 8017b6a:	6804      	ldr	r4, [r0, #0]
 8017b6c:	fbb2 f2fc 	udiv	r2, r2, ip
 8017b70:	fb01 f202 	mul.w	r2, r1, r2
 8017b74:	7b01      	ldrb	r1, [r0, #12]
 8017b76:	50a1      	str	r1, [r4, r2]
 8017b78:	3301      	adds	r3, #1
 8017b7a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8017b7e:	b29b      	uxth	r3, r3
 8017b80:	459c      	cmp	ip, r3
 8017b82:	d8ec      	bhi.n	8017b5e <uxr_init_output_reliable_stream+0x22>
 8017b84:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017b88:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017b8c:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8017b90:	4905      	ldr	r1, [pc, #20]	@ (8017ba8 <uxr_init_output_reliable_stream+0x6c>)
 8017b92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017b96:	f8c0 100e 	str.w	r1, [r0, #14]
 8017b9a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017b9e:	2300      	movs	r3, #0
 8017ba0:	8242      	strh	r2, [r0, #18]
 8017ba2:	8403      	strh	r3, [r0, #32]
 8017ba4:	4770      	bx	lr
 8017ba6:	bf00      	nop
 8017ba8:	ffff0000 	.word	0xffff0000

08017bac <uxr_reset_output_reliable_stream>:
 8017bac:	8901      	ldrh	r1, [r0, #8]
 8017bae:	b1b1      	cbz	r1, 8017bde <uxr_reset_output_reliable_stream+0x32>
 8017bb0:	f04f 0c00 	mov.w	ip, #0
 8017bb4:	4663      	mov	r3, ip
 8017bb6:	fbb3 f2f1 	udiv	r2, r3, r1
 8017bba:	fb01 3312 	mls	r3, r1, r2, r3
 8017bbe:	b29b      	uxth	r3, r3
 8017bc0:	6842      	ldr	r2, [r0, #4]
 8017bc2:	fbb2 f2f1 	udiv	r2, r2, r1
 8017bc6:	6801      	ldr	r1, [r0, #0]
 8017bc8:	fb02 f303 	mul.w	r3, r2, r3
 8017bcc:	7b02      	ldrb	r2, [r0, #12]
 8017bce:	50ca      	str	r2, [r1, r3]
 8017bd0:	f10c 0c01 	add.w	ip, ip, #1
 8017bd4:	8901      	ldrh	r1, [r0, #8]
 8017bd6:	fa1f f38c 	uxth.w	r3, ip
 8017bda:	4299      	cmp	r1, r3
 8017bdc:	d8eb      	bhi.n	8017bb6 <uxr_reset_output_reliable_stream+0xa>
 8017bde:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017be2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017be6:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8017bea:	4904      	ldr	r1, [pc, #16]	@ (8017bfc <uxr_reset_output_reliable_stream+0x50>)
 8017bec:	f8c0 100e 	str.w	r1, [r0, #14]
 8017bf0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017bf4:	2300      	movs	r3, #0
 8017bf6:	8242      	strh	r2, [r0, #18]
 8017bf8:	8403      	strh	r3, [r0, #32]
 8017bfa:	4770      	bx	lr
 8017bfc:	ffff0000 	.word	0xffff0000

08017c00 <uxr_prepare_reliable_buffer_to_write>:
 8017c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c04:	4604      	mov	r4, r0
 8017c06:	b091      	sub	sp, #68	@ 0x44
 8017c08:	8900      	ldrh	r0, [r0, #8]
 8017c0a:	89e6      	ldrh	r6, [r4, #14]
 8017c0c:	6823      	ldr	r3, [r4, #0]
 8017c0e:	9204      	str	r2, [sp, #16]
 8017c10:	fbb6 f2f0 	udiv	r2, r6, r0
 8017c14:	fb00 6212 	mls	r2, r0, r2, r6
 8017c18:	b292      	uxth	r2, r2
 8017c1a:	6865      	ldr	r5, [r4, #4]
 8017c1c:	fbb5 f5f0 	udiv	r5, r5, r0
 8017c20:	fb05 3202 	mla	r2, r5, r2, r3
 8017c24:	3204      	adds	r2, #4
 8017c26:	f852 8c04 	ldr.w	r8, [r2, #-4]
 8017c2a:	f894 900c 	ldrb.w	r9, [r4, #12]
 8017c2e:	9203      	str	r2, [sp, #12]
 8017c30:	468b      	mov	fp, r1
 8017c32:	1f2f      	subs	r7, r5, #4
 8017c34:	2800      	cmp	r0, #0
 8017c36:	f000 814c 	beq.w	8017ed2 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8017c3a:	f04f 0c00 	mov.w	ip, #0
 8017c3e:	46e2      	mov	sl, ip
 8017c40:	4661      	mov	r1, ip
 8017c42:	fbb1 f2f0 	udiv	r2, r1, r0
 8017c46:	fb00 1212 	mls	r2, r0, r2, r1
 8017c4a:	b292      	uxth	r2, r2
 8017c4c:	fb05 f202 	mul.w	r2, r5, r2
 8017c50:	f10c 0c01 	add.w	ip, ip, #1
 8017c54:	589a      	ldr	r2, [r3, r2]
 8017c56:	454a      	cmp	r2, r9
 8017c58:	bf08      	it	eq
 8017c5a:	f10a 0a01 	addeq.w	sl, sl, #1
 8017c5e:	fa1f f18c 	uxth.w	r1, ip
 8017c62:	bf08      	it	eq
 8017c64:	fa1f fa8a 	uxtheq.w	sl, sl
 8017c68:	4281      	cmp	r1, r0
 8017c6a:	d3ea      	bcc.n	8017c42 <uxr_prepare_reliable_buffer_to_write+0x42>
 8017c6c:	4640      	mov	r0, r8
 8017c6e:	2104      	movs	r1, #4
 8017c70:	f8cd a014 	str.w	sl, [sp, #20]
 8017c74:	f7f4 fa02 	bl	800c07c <ucdr_alignment>
 8017c78:	4480      	add	r8, r0
 8017c7a:	eb08 020b 	add.w	r2, r8, fp
 8017c7e:	42ba      	cmp	r2, r7
 8017c80:	f240 80cd 	bls.w	8017e1e <uxr_prepare_reliable_buffer_to_write+0x21e>
 8017c84:	7b22      	ldrb	r2, [r4, #12]
 8017c86:	445a      	add	r2, fp
 8017c88:	42ba      	cmp	r2, r7
 8017c8a:	f240 80b5 	bls.w	8017df8 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 8017c8e:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 8017c92:	33fc      	adds	r3, #252	@ 0xfc
 8017c94:	b2ba      	uxth	r2, r7
 8017c96:	4413      	add	r3, r2
 8017c98:	b29b      	uxth	r3, r3
 8017c9a:	fb0a f903 	mul.w	r9, sl, r3
 8017c9e:	45d9      	cmp	r9, fp
 8017ca0:	9305      	str	r3, [sp, #20]
 8017ca2:	9306      	str	r3, [sp, #24]
 8017ca4:	f0c0 80b7 	bcc.w	8017e16 <uxr_prepare_reliable_buffer_to_write+0x216>
 8017ca8:	f108 0304 	add.w	r3, r8, #4
 8017cac:	42bb      	cmp	r3, r7
 8017cae:	f080 80db 	bcs.w	8017e68 <uxr_prepare_reliable_buffer_to_write+0x268>
 8017cb2:	f1a2 0904 	sub.w	r9, r2, #4
 8017cb6:	eba9 0908 	sub.w	r9, r9, r8
 8017cba:	9b05      	ldr	r3, [sp, #20]
 8017cbc:	fa1f f989 	uxth.w	r9, r9
 8017cc0:	ebab 0b09 	sub.w	fp, fp, r9
 8017cc4:	fbbb f2f3 	udiv	r2, fp, r3
 8017cc8:	fb03 b312 	mls	r3, r3, r2, fp
 8017ccc:	2b00      	cmp	r3, #0
 8017cce:	f000 80c8 	beq.w	8017e62 <uxr_prepare_reliable_buffer_to_write+0x262>
 8017cd2:	3201      	adds	r2, #1
 8017cd4:	b292      	uxth	r2, r2
 8017cd6:	9306      	str	r3, [sp, #24]
 8017cd8:	4552      	cmp	r2, sl
 8017cda:	f200 809c 	bhi.w	8017e16 <uxr_prepare_reliable_buffer_to_write+0x216>
 8017cde:	f10d 0b20 	add.w	fp, sp, #32
 8017ce2:	2a00      	cmp	r2, #0
 8017ce4:	d042      	beq.n	8017d6c <uxr_prepare_reliable_buffer_to_write+0x16c>
 8017ce6:	f8cd 801c 	str.w	r8, [sp, #28]
 8017cea:	f04f 0a00 	mov.w	sl, #0
 8017cee:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8017cf2:	9505      	str	r5, [sp, #20]
 8017cf4:	f10d 0b20 	add.w	fp, sp, #32
 8017cf8:	4615      	mov	r5, r2
 8017cfa:	e000      	b.n	8017cfe <uxr_prepare_reliable_buffer_to_write+0xfe>
 8017cfc:	46c1      	mov	r9, r8
 8017cfe:	8920      	ldrh	r0, [r4, #8]
 8017d00:	fbb6 f2f0 	udiv	r2, r6, r0
 8017d04:	fb00 6112 	mls	r1, r0, r2, r6
 8017d08:	b28a      	uxth	r2, r1
 8017d0a:	6863      	ldr	r3, [r4, #4]
 8017d0c:	fbb3 f1f0 	udiv	r1, r3, r0
 8017d10:	6823      	ldr	r3, [r4, #0]
 8017d12:	fb02 f101 	mul.w	r1, r2, r1
 8017d16:	3104      	adds	r1, #4
 8017d18:	4419      	add	r1, r3
 8017d1a:	4658      	mov	r0, fp
 8017d1c:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8017d20:	9200      	str	r2, [sp, #0]
 8017d22:	2300      	movs	r3, #0
 8017d24:	463a      	mov	r2, r7
 8017d26:	f7f4 f993 	bl	800c050 <ucdr_init_buffer_origin_offset>
 8017d2a:	464a      	mov	r2, r9
 8017d2c:	2300      	movs	r3, #0
 8017d2e:	210d      	movs	r1, #13
 8017d30:	4658      	mov	r0, fp
 8017d32:	f7fa f933 	bl	8011f9c <uxr_buffer_submessage_header>
 8017d36:	8921      	ldrh	r1, [r4, #8]
 8017d38:	fbb6 f2f1 	udiv	r2, r6, r1
 8017d3c:	fb01 6212 	mls	r2, r1, r2, r6
 8017d40:	b292      	uxth	r2, r2
 8017d42:	6863      	ldr	r3, [r4, #4]
 8017d44:	fbb3 f3f1 	udiv	r3, r3, r1
 8017d48:	fb02 f303 	mul.w	r3, r2, r3
 8017d4c:	6822      	ldr	r2, [r4, #0]
 8017d4e:	4630      	mov	r0, r6
 8017d50:	50d7      	str	r7, [r2, r3]
 8017d52:	2101      	movs	r1, #1
 8017d54:	f000 f9c4 	bl	80180e0 <uxr_seq_num_add>
 8017d58:	f10a 0a01 	add.w	sl, sl, #1
 8017d5c:	fa1f f38a 	uxth.w	r3, sl
 8017d60:	429d      	cmp	r5, r3
 8017d62:	4606      	mov	r6, r0
 8017d64:	d8ca      	bhi.n	8017cfc <uxr_prepare_reliable_buffer_to_write+0xfc>
 8017d66:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8017d6a:	9d05      	ldr	r5, [sp, #20]
 8017d6c:	8920      	ldrh	r0, [r4, #8]
 8017d6e:	fbb6 f3f0 	udiv	r3, r6, r0
 8017d72:	fb00 6313 	mls	r3, r0, r3, r6
 8017d76:	b299      	uxth	r1, r3
 8017d78:	6863      	ldr	r3, [r4, #4]
 8017d7a:	fbb3 f3f0 	udiv	r3, r3, r0
 8017d7e:	fb01 f303 	mul.w	r3, r1, r3
 8017d82:	6821      	ldr	r1, [r4, #0]
 8017d84:	3304      	adds	r3, #4
 8017d86:	4419      	add	r1, r3
 8017d88:	463a      	mov	r2, r7
 8017d8a:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8017d8e:	9000      	str	r0, [sp, #0]
 8017d90:	2300      	movs	r3, #0
 8017d92:	4658      	mov	r0, fp
 8017d94:	f7f4 f95c 	bl	800c050 <ucdr_init_buffer_origin_offset>
 8017d98:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8017d9c:	4658      	mov	r0, fp
 8017d9e:	fa1f f289 	uxth.w	r2, r9
 8017da2:	2302      	movs	r3, #2
 8017da4:	210d      	movs	r1, #13
 8017da6:	f7fa f8f9 	bl	8011f9c <uxr_buffer_submessage_header>
 8017daa:	9b03      	ldr	r3, [sp, #12]
 8017dac:	8927      	ldrh	r7, [r4, #8]
 8017dae:	7b20      	ldrb	r0, [r4, #12]
 8017db0:	f108 0104 	add.w	r1, r8, #4
 8017db4:	440b      	add	r3, r1
 8017db6:	4619      	mov	r1, r3
 8017db8:	fbb6 f3f7 	udiv	r3, r6, r7
 8017dbc:	fb07 6313 	mls	r3, r7, r3, r6
 8017dc0:	f1a5 0208 	sub.w	r2, r5, #8
 8017dc4:	b29d      	uxth	r5, r3
 8017dc6:	3004      	adds	r0, #4
 8017dc8:	6863      	ldr	r3, [r4, #4]
 8017dca:	fbb3 f3f7 	udiv	r3, r3, r7
 8017dce:	fb05 f303 	mul.w	r3, r5, r3
 8017dd2:	6825      	ldr	r5, [r4, #0]
 8017dd4:	4448      	add	r0, r9
 8017dd6:	50e8      	str	r0, [r5, r3]
 8017dd8:	9d04      	ldr	r5, [sp, #16]
 8017dda:	eba2 0208 	sub.w	r2, r2, r8
 8017dde:	4628      	mov	r0, r5
 8017de0:	f7f4 f948 	bl	800c074 <ucdr_init_buffer>
 8017de4:	4628      	mov	r0, r5
 8017de6:	493c      	ldr	r1, [pc, #240]	@ (8017ed8 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8017de8:	4622      	mov	r2, r4
 8017dea:	f7f4 f917 	bl	800c01c <ucdr_set_on_full_buffer_callback>
 8017dee:	2001      	movs	r0, #1
 8017df0:	81e6      	strh	r6, [r4, #14]
 8017df2:	b011      	add	sp, #68	@ 0x44
 8017df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017df8:	2101      	movs	r1, #1
 8017dfa:	89e0      	ldrh	r0, [r4, #14]
 8017dfc:	f000 f970 	bl	80180e0 <uxr_seq_num_add>
 8017e00:	8921      	ldrh	r1, [r4, #8]
 8017e02:	4605      	mov	r5, r0
 8017e04:	8a60      	ldrh	r0, [r4, #18]
 8017e06:	f000 f96b 	bl	80180e0 <uxr_seq_num_add>
 8017e0a:	4601      	mov	r1, r0
 8017e0c:	4628      	mov	r0, r5
 8017e0e:	f000 f96f 	bl	80180f0 <uxr_seq_num_cmp>
 8017e12:	2800      	cmp	r0, #0
 8017e14:	dd42      	ble.n	8017e9c <uxr_prepare_reliable_buffer_to_write+0x29c>
 8017e16:	2000      	movs	r0, #0
 8017e18:	b011      	add	sp, #68	@ 0x44
 8017e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e1e:	8921      	ldrh	r1, [r4, #8]
 8017e20:	8a60      	ldrh	r0, [r4, #18]
 8017e22:	9205      	str	r2, [sp, #20]
 8017e24:	f000 f95c 	bl	80180e0 <uxr_seq_num_add>
 8017e28:	4601      	mov	r1, r0
 8017e2a:	4630      	mov	r0, r6
 8017e2c:	f000 f960 	bl	80180f0 <uxr_seq_num_cmp>
 8017e30:	2800      	cmp	r0, #0
 8017e32:	9a05      	ldr	r2, [sp, #20]
 8017e34:	dcef      	bgt.n	8017e16 <uxr_prepare_reliable_buffer_to_write+0x216>
 8017e36:	8927      	ldrh	r7, [r4, #8]
 8017e38:	fbb6 f3f7 	udiv	r3, r6, r7
 8017e3c:	fb07 6313 	mls	r3, r7, r3, r6
 8017e40:	b29d      	uxth	r5, r3
 8017e42:	6863      	ldr	r3, [r4, #4]
 8017e44:	6824      	ldr	r4, [r4, #0]
 8017e46:	fbb3 f3f7 	udiv	r3, r3, r7
 8017e4a:	fb05 f303 	mul.w	r3, r5, r3
 8017e4e:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8017e52:	50e2      	str	r2, [r4, r3]
 8017e54:	2300      	movs	r3, #0
 8017e56:	f8cd 8000 	str.w	r8, [sp]
 8017e5a:	f7f4 f8f9 	bl	800c050 <ucdr_init_buffer_origin_offset>
 8017e5e:	2001      	movs	r0, #1
 8017e60:	e7da      	b.n	8017e18 <uxr_prepare_reliable_buffer_to_write+0x218>
 8017e62:	b293      	uxth	r3, r2
 8017e64:	461a      	mov	r2, r3
 8017e66:	e737      	b.n	8017cd8 <uxr_prepare_reliable_buffer_to_write+0xd8>
 8017e68:	4630      	mov	r0, r6
 8017e6a:	2101      	movs	r1, #1
 8017e6c:	9207      	str	r2, [sp, #28]
 8017e6e:	f000 f937 	bl	80180e0 <uxr_seq_num_add>
 8017e72:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8017e76:	fbb0 f1fc 	udiv	r1, r0, ip
 8017e7a:	fb0c 0111 	mls	r1, ip, r1, r0
 8017e7e:	4606      	mov	r6, r0
 8017e80:	b288      	uxth	r0, r1
 8017e82:	6863      	ldr	r3, [r4, #4]
 8017e84:	fbb3 f1fc 	udiv	r1, r3, ip
 8017e88:	6823      	ldr	r3, [r4, #0]
 8017e8a:	9a07      	ldr	r2, [sp, #28]
 8017e8c:	fb00 f101 	mul.w	r1, r0, r1
 8017e90:	3104      	adds	r1, #4
 8017e92:	440b      	add	r3, r1
 8017e94:	9303      	str	r3, [sp, #12]
 8017e96:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8017e9a:	e70a      	b.n	8017cb2 <uxr_prepare_reliable_buffer_to_write+0xb2>
 8017e9c:	8921      	ldrh	r1, [r4, #8]
 8017e9e:	fbb5 f3f1 	udiv	r3, r5, r1
 8017ea2:	fb01 5313 	mls	r3, r1, r3, r5
 8017ea6:	b29a      	uxth	r2, r3
 8017ea8:	6863      	ldr	r3, [r4, #4]
 8017eaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8017eae:	6821      	ldr	r1, [r4, #0]
 8017eb0:	9804      	ldr	r0, [sp, #16]
 8017eb2:	fb02 f303 	mul.w	r3, r2, r3
 8017eb6:	3304      	adds	r3, #4
 8017eb8:	7b22      	ldrb	r2, [r4, #12]
 8017eba:	4419      	add	r1, r3
 8017ebc:	445a      	add	r2, fp
 8017ebe:	f841 2c04 	str.w	r2, [r1, #-4]
 8017ec2:	7b23      	ldrb	r3, [r4, #12]
 8017ec4:	9300      	str	r3, [sp, #0]
 8017ec6:	2300      	movs	r3, #0
 8017ec8:	f7f4 f8c2 	bl	800c050 <ucdr_init_buffer_origin_offset>
 8017ecc:	81e5      	strh	r5, [r4, #14]
 8017ece:	2001      	movs	r0, #1
 8017ed0:	e7a2      	b.n	8017e18 <uxr_prepare_reliable_buffer_to_write+0x218>
 8017ed2:	4682      	mov	sl, r0
 8017ed4:	e6ca      	b.n	8017c6c <uxr_prepare_reliable_buffer_to_write+0x6c>
 8017ed6:	bf00      	nop
 8017ed8:	08017ae1 	.word	0x08017ae1

08017edc <uxr_prepare_next_reliable_buffer_to_send>:
 8017edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ede:	4604      	mov	r4, r0
 8017ee0:	460f      	mov	r7, r1
 8017ee2:	8a00      	ldrh	r0, [r0, #16]
 8017ee4:	2101      	movs	r1, #1
 8017ee6:	4616      	mov	r6, r2
 8017ee8:	461d      	mov	r5, r3
 8017eea:	f000 f8f9 	bl	80180e0 <uxr_seq_num_add>
 8017eee:	8028      	strh	r0, [r5, #0]
 8017ef0:	8922      	ldrh	r2, [r4, #8]
 8017ef2:	fbb0 f3f2 	udiv	r3, r0, r2
 8017ef6:	fb02 0c13 	mls	ip, r2, r3, r0
 8017efa:	fa1f fc8c 	uxth.w	ip, ip
 8017efe:	6863      	ldr	r3, [r4, #4]
 8017f00:	fbb3 f3f2 	udiv	r3, r3, r2
 8017f04:	fb0c fc03 	mul.w	ip, ip, r3
 8017f08:	6823      	ldr	r3, [r4, #0]
 8017f0a:	89e1      	ldrh	r1, [r4, #14]
 8017f0c:	f10c 0c04 	add.w	ip, ip, #4
 8017f10:	4463      	add	r3, ip
 8017f12:	603b      	str	r3, [r7, #0]
 8017f14:	6823      	ldr	r3, [r4, #0]
 8017f16:	449c      	add	ip, r3
 8017f18:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8017f1c:	6033      	str	r3, [r6, #0]
 8017f1e:	f000 f8e7 	bl	80180f0 <uxr_seq_num_cmp>
 8017f22:	2800      	cmp	r0, #0
 8017f24:	dd01      	ble.n	8017f2a <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8017f26:	2000      	movs	r0, #0
 8017f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017f2a:	7b23      	ldrb	r3, [r4, #12]
 8017f2c:	6832      	ldr	r2, [r6, #0]
 8017f2e:	429a      	cmp	r2, r3
 8017f30:	d9f9      	bls.n	8017f26 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8017f32:	8a61      	ldrh	r1, [r4, #18]
 8017f34:	8a20      	ldrh	r0, [r4, #16]
 8017f36:	f000 f8d7 	bl	80180e8 <uxr_seq_num_sub>
 8017f3a:	8923      	ldrh	r3, [r4, #8]
 8017f3c:	4283      	cmp	r3, r0
 8017f3e:	d0f2      	beq.n	8017f26 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8017f40:	8828      	ldrh	r0, [r5, #0]
 8017f42:	89e3      	ldrh	r3, [r4, #14]
 8017f44:	8220      	strh	r0, [r4, #16]
 8017f46:	4298      	cmp	r0, r3
 8017f48:	d001      	beq.n	8017f4e <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8017f4a:	2001      	movs	r0, #1
 8017f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017f4e:	2101      	movs	r1, #1
 8017f50:	f000 f8c6 	bl	80180e0 <uxr_seq_num_add>
 8017f54:	81e0      	strh	r0, [r4, #14]
 8017f56:	2001      	movs	r0, #1
 8017f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017f5a:	bf00      	nop

08017f5c <uxr_update_output_stream_heartbeat_timestamp>:
 8017f5c:	b570      	push	{r4, r5, r6, lr}
 8017f5e:	8a01      	ldrh	r1, [r0, #16]
 8017f60:	4604      	mov	r4, r0
 8017f62:	8a40      	ldrh	r0, [r0, #18]
 8017f64:	4615      	mov	r5, r2
 8017f66:	461e      	mov	r6, r3
 8017f68:	f000 f8c2 	bl	80180f0 <uxr_seq_num_cmp>
 8017f6c:	2800      	cmp	r0, #0
 8017f6e:	db07      	blt.n	8017f80 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8017f70:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017f74:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017f78:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8017f7c:	2000      	movs	r0, #0
 8017f7e:	bd70      	pop	{r4, r5, r6, pc}
 8017f80:	f894 0020 	ldrb.w	r0, [r4, #32]
 8017f84:	b940      	cbnz	r0, 8017f98 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8017f86:	2301      	movs	r3, #1
 8017f88:	f884 3020 	strb.w	r3, [r4, #32]
 8017f8c:	3564      	adds	r5, #100	@ 0x64
 8017f8e:	f146 0600 	adc.w	r6, r6, #0
 8017f92:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8017f96:	bd70      	pop	{r4, r5, r6, pc}
 8017f98:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8017f9c:	4295      	cmp	r5, r2
 8017f9e:	eb76 0303 	sbcs.w	r3, r6, r3
 8017fa2:	bfa5      	ittet	ge
 8017fa4:	3001      	addge	r0, #1
 8017fa6:	f884 0020 	strbge.w	r0, [r4, #32]
 8017faa:	2000      	movlt	r0, #0
 8017fac:	2001      	movge	r0, #1
 8017fae:	e7ed      	b.n	8017f8c <uxr_update_output_stream_heartbeat_timestamp+0x30>

08017fb0 <uxr_begin_output_nack_buffer_it>:
 8017fb0:	8a40      	ldrh	r0, [r0, #18]
 8017fb2:	4770      	bx	lr

08017fb4 <uxr_next_reliable_nack_buffer_to_send>:
 8017fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017fb8:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8017fbc:	b082      	sub	sp, #8
 8017fbe:	f1b8 0f00 	cmp.w	r8, #0
 8017fc2:	d011      	beq.n	8017fe8 <uxr_next_reliable_nack_buffer_to_send+0x34>
 8017fc4:	4604      	mov	r4, r0
 8017fc6:	8818      	ldrh	r0, [r3, #0]
 8017fc8:	460e      	mov	r6, r1
 8017fca:	4617      	mov	r7, r2
 8017fcc:	461d      	mov	r5, r3
 8017fce:	2101      	movs	r1, #1
 8017fd0:	f000 f886 	bl	80180e0 <uxr_seq_num_add>
 8017fd4:	8028      	strh	r0, [r5, #0]
 8017fd6:	8a21      	ldrh	r1, [r4, #16]
 8017fd8:	f000 f88a 	bl	80180f0 <uxr_seq_num_cmp>
 8017fdc:	2800      	cmp	r0, #0
 8017fde:	dd07      	ble.n	8017ff0 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8017fe0:	f04f 0800 	mov.w	r8, #0
 8017fe4:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8017fe8:	4640      	mov	r0, r8
 8017fea:	b002      	add	sp, #8
 8017fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ff0:	8921      	ldrh	r1, [r4, #8]
 8017ff2:	8828      	ldrh	r0, [r5, #0]
 8017ff4:	6823      	ldr	r3, [r4, #0]
 8017ff6:	fbb0 f2f1 	udiv	r2, r0, r1
 8017ffa:	fb01 0c12 	mls	ip, r1, r2, r0
 8017ffe:	fa1f f28c 	uxth.w	r2, ip
 8018002:	9301      	str	r3, [sp, #4]
 8018004:	6863      	ldr	r3, [r4, #4]
 8018006:	fbb3 fcf1 	udiv	ip, r3, r1
 801800a:	9b01      	ldr	r3, [sp, #4]
 801800c:	fb02 fc0c 	mul.w	ip, r2, ip
 8018010:	f10c 0c04 	add.w	ip, ip, #4
 8018014:	4463      	add	r3, ip
 8018016:	6033      	str	r3, [r6, #0]
 8018018:	6823      	ldr	r3, [r4, #0]
 801801a:	4463      	add	r3, ip
 801801c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8018020:	603b      	str	r3, [r7, #0]
 8018022:	7b22      	ldrb	r2, [r4, #12]
 8018024:	429a      	cmp	r2, r3
 8018026:	d0d2      	beq.n	8017fce <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8018028:	4640      	mov	r0, r8
 801802a:	b002      	add	sp, #8
 801802c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018030 <uxr_process_acknack>:
 8018030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018032:	4604      	mov	r4, r0
 8018034:	460e      	mov	r6, r1
 8018036:	4610      	mov	r0, r2
 8018038:	2101      	movs	r1, #1
 801803a:	f000 f855 	bl	80180e8 <uxr_seq_num_sub>
 801803e:	8a61      	ldrh	r1, [r4, #18]
 8018040:	f000 f852 	bl	80180e8 <uxr_seq_num_sub>
 8018044:	b1c0      	cbz	r0, 8018078 <uxr_process_acknack+0x48>
 8018046:	4605      	mov	r5, r0
 8018048:	2700      	movs	r7, #0
 801804a:	2101      	movs	r1, #1
 801804c:	8a60      	ldrh	r0, [r4, #18]
 801804e:	f000 f847 	bl	80180e0 <uxr_seq_num_add>
 8018052:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018056:	fbb0 f1fc 	udiv	r1, r0, ip
 801805a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801805e:	fb0c 0111 	mls	r1, ip, r1, r0
 8018062:	b289      	uxth	r1, r1
 8018064:	3701      	adds	r7, #1
 8018066:	fbb3 f3fc 	udiv	r3, r3, ip
 801806a:	fb01 f303 	mul.w	r3, r1, r3
 801806e:	42bd      	cmp	r5, r7
 8018070:	7b21      	ldrb	r1, [r4, #12]
 8018072:	8260      	strh	r0, [r4, #18]
 8018074:	50d1      	str	r1, [r2, r3]
 8018076:	d1e8      	bne.n	801804a <uxr_process_acknack+0x1a>
 8018078:	3e00      	subs	r6, #0
 801807a:	f04f 0300 	mov.w	r3, #0
 801807e:	bf18      	it	ne
 8018080:	2601      	movne	r6, #1
 8018082:	f884 3020 	strb.w	r3, [r4, #32]
 8018086:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 801808a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801808c <uxr_is_output_up_to_date>:
 801808c:	8a01      	ldrh	r1, [r0, #16]
 801808e:	8a40      	ldrh	r0, [r0, #18]
 8018090:	b508      	push	{r3, lr}
 8018092:	f000 f82d 	bl	80180f0 <uxr_seq_num_cmp>
 8018096:	fab0 f080 	clz	r0, r0
 801809a:	0940      	lsrs	r0, r0, #5
 801809c:	bd08      	pop	{r3, pc}
 801809e:	bf00      	nop

080180a0 <get_available_free_slots>:
 80180a0:	8902      	ldrh	r2, [r0, #8]
 80180a2:	b1da      	cbz	r2, 80180dc <get_available_free_slots+0x3c>
 80180a4:	b530      	push	{r4, r5, lr}
 80180a6:	2100      	movs	r1, #0
 80180a8:	6843      	ldr	r3, [r0, #4]
 80180aa:	6805      	ldr	r5, [r0, #0]
 80180ac:	7b04      	ldrb	r4, [r0, #12]
 80180ae:	fbb3 fef2 	udiv	lr, r3, r2
 80180b2:	4608      	mov	r0, r1
 80180b4:	460b      	mov	r3, r1
 80180b6:	fbb3 fcf2 	udiv	ip, r3, r2
 80180ba:	fb02 331c 	mls	r3, r2, ip, r3
 80180be:	b29b      	uxth	r3, r3
 80180c0:	fb0e f303 	mul.w	r3, lr, r3
 80180c4:	3101      	adds	r1, #1
 80180c6:	f855 c003 	ldr.w	ip, [r5, r3]
 80180ca:	4564      	cmp	r4, ip
 80180cc:	bf08      	it	eq
 80180ce:	3001      	addeq	r0, #1
 80180d0:	b28b      	uxth	r3, r1
 80180d2:	bf08      	it	eq
 80180d4:	b280      	uxtheq	r0, r0
 80180d6:	4293      	cmp	r3, r2
 80180d8:	d3ed      	bcc.n	80180b6 <get_available_free_slots+0x16>
 80180da:	bd30      	pop	{r4, r5, pc}
 80180dc:	4610      	mov	r0, r2
 80180de:	4770      	bx	lr

080180e0 <uxr_seq_num_add>:
 80180e0:	4408      	add	r0, r1
 80180e2:	b280      	uxth	r0, r0
 80180e4:	4770      	bx	lr
 80180e6:	bf00      	nop

080180e8 <uxr_seq_num_sub>:
 80180e8:	1a40      	subs	r0, r0, r1
 80180ea:	b280      	uxth	r0, r0
 80180ec:	4770      	bx	lr
 80180ee:	bf00      	nop

080180f0 <uxr_seq_num_cmp>:
 80180f0:	4288      	cmp	r0, r1
 80180f2:	d011      	beq.n	8018118 <uxr_seq_num_cmp+0x28>
 80180f4:	d309      	bcc.n	801810a <uxr_seq_num_cmp+0x1a>
 80180f6:	4288      	cmp	r0, r1
 80180f8:	d910      	bls.n	801811c <uxr_seq_num_cmp+0x2c>
 80180fa:	1a40      	subs	r0, r0, r1
 80180fc:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8018100:	bfd4      	ite	le
 8018102:	2001      	movle	r0, #1
 8018104:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8018108:	4770      	bx	lr
 801810a:	1a0b      	subs	r3, r1, r0
 801810c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8018110:	daf1      	bge.n	80180f6 <uxr_seq_num_cmp+0x6>
 8018112:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018116:	4770      	bx	lr
 8018118:	2000      	movs	r0, #0
 801811a:	4770      	bx	lr
 801811c:	2001      	movs	r0, #1
 801811e:	4770      	bx	lr

08018120 <rcl_get_default_domain_id>:
 8018120:	b530      	push	{r4, r5, lr}
 8018122:	b083      	sub	sp, #12
 8018124:	2300      	movs	r3, #0
 8018126:	9300      	str	r3, [sp, #0]
 8018128:	b1d0      	cbz	r0, 8018160 <rcl_get_default_domain_id+0x40>
 801812a:	4604      	mov	r4, r0
 801812c:	4669      	mov	r1, sp
 801812e:	4815      	ldr	r0, [pc, #84]	@ (8018184 <rcl_get_default_domain_id+0x64>)
 8018130:	f7fe f826 	bl	8016180 <rcutils_get_env>
 8018134:	4602      	mov	r2, r0
 8018136:	b110      	cbz	r0, 801813e <rcl_get_default_domain_id+0x1e>
 8018138:	2001      	movs	r0, #1
 801813a:	b003      	add	sp, #12
 801813c:	bd30      	pop	{r4, r5, pc}
 801813e:	9b00      	ldr	r3, [sp, #0]
 8018140:	b18b      	cbz	r3, 8018166 <rcl_get_default_domain_id+0x46>
 8018142:	7818      	ldrb	r0, [r3, #0]
 8018144:	2800      	cmp	r0, #0
 8018146:	d0f8      	beq.n	801813a <rcl_get_default_domain_id+0x1a>
 8018148:	a901      	add	r1, sp, #4
 801814a:	4618      	mov	r0, r3
 801814c:	9201      	str	r2, [sp, #4]
 801814e:	f000 fe39 	bl	8018dc4 <strtoul>
 8018152:	4605      	mov	r5, r0
 8018154:	b150      	cbz	r0, 801816c <rcl_get_default_domain_id+0x4c>
 8018156:	1c43      	adds	r3, r0, #1
 8018158:	d00d      	beq.n	8018176 <rcl_get_default_domain_id+0x56>
 801815a:	6025      	str	r5, [r4, #0]
 801815c:	2000      	movs	r0, #0
 801815e:	e7ec      	b.n	801813a <rcl_get_default_domain_id+0x1a>
 8018160:	200b      	movs	r0, #11
 8018162:	b003      	add	sp, #12
 8018164:	bd30      	pop	{r4, r5, pc}
 8018166:	4618      	mov	r0, r3
 8018168:	b003      	add	sp, #12
 801816a:	bd30      	pop	{r4, r5, pc}
 801816c:	9b01      	ldr	r3, [sp, #4]
 801816e:	781b      	ldrb	r3, [r3, #0]
 8018170:	2b00      	cmp	r3, #0
 8018172:	d0f2      	beq.n	801815a <rcl_get_default_domain_id+0x3a>
 8018174:	e7e0      	b.n	8018138 <rcl_get_default_domain_id+0x18>
 8018176:	f001 f95f 	bl	8019438 <__errno>
 801817a:	6803      	ldr	r3, [r0, #0]
 801817c:	2b22      	cmp	r3, #34	@ 0x22
 801817e:	d1ec      	bne.n	801815a <rcl_get_default_domain_id+0x3a>
 8018180:	e7da      	b.n	8018138 <rcl_get_default_domain_id+0x18>
 8018182:	bf00      	nop
 8018184:	0801bda4 	.word	0x0801bda4

08018188 <rcl_expand_topic_name>:
 8018188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801818c:	b08b      	sub	sp, #44	@ 0x2c
 801818e:	9306      	str	r3, [sp, #24]
 8018190:	2800      	cmp	r0, #0
 8018192:	f000 80ad 	beq.w	80182f0 <rcl_expand_topic_name+0x168>
 8018196:	460e      	mov	r6, r1
 8018198:	2900      	cmp	r1, #0
 801819a:	f000 80a9 	beq.w	80182f0 <rcl_expand_topic_name+0x168>
 801819e:	4617      	mov	r7, r2
 80181a0:	2a00      	cmp	r2, #0
 80181a2:	f000 80a5 	beq.w	80182f0 <rcl_expand_topic_name+0x168>
 80181a6:	2b00      	cmp	r3, #0
 80181a8:	f000 80a2 	beq.w	80182f0 <rcl_expand_topic_name+0x168>
 80181ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80181ae:	2b00      	cmp	r3, #0
 80181b0:	f000 809e 	beq.w	80182f0 <rcl_expand_topic_name+0x168>
 80181b4:	2200      	movs	r2, #0
 80181b6:	a909      	add	r1, sp, #36	@ 0x24
 80181b8:	4680      	mov	r8, r0
 80181ba:	f000 fa57 	bl	801866c <rcl_validate_topic_name>
 80181be:	4604      	mov	r4, r0
 80181c0:	2800      	cmp	r0, #0
 80181c2:	f040 8096 	bne.w	80182f2 <rcl_expand_topic_name+0x16a>
 80181c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80181c8:	2b00      	cmp	r3, #0
 80181ca:	f040 809a 	bne.w	8018302 <rcl_expand_topic_name+0x17a>
 80181ce:	4602      	mov	r2, r0
 80181d0:	a909      	add	r1, sp, #36	@ 0x24
 80181d2:	4630      	mov	r0, r6
 80181d4:	f7fe fbfe 	bl	80169d4 <rmw_validate_node_name>
 80181d8:	2800      	cmp	r0, #0
 80181da:	f040 808e 	bne.w	80182fa <rcl_expand_topic_name+0x172>
 80181de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80181e0:	2a00      	cmp	r2, #0
 80181e2:	f040 8093 	bne.w	801830c <rcl_expand_topic_name+0x184>
 80181e6:	a909      	add	r1, sp, #36	@ 0x24
 80181e8:	4638      	mov	r0, r7
 80181ea:	f7fe fbd5 	bl	8016998 <rmw_validate_namespace>
 80181ee:	2800      	cmp	r0, #0
 80181f0:	f040 8083 	bne.w	80182fa <rcl_expand_topic_name+0x172>
 80181f4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80181f6:	2c00      	cmp	r4, #0
 80181f8:	f040 80ed 	bne.w	80183d6 <rcl_expand_topic_name+0x24e>
 80181fc:	217b      	movs	r1, #123	@ 0x7b
 80181fe:	4640      	mov	r0, r8
 8018200:	f001 f88e 	bl	8019320 <strchr>
 8018204:	f898 3000 	ldrb.w	r3, [r8]
 8018208:	2b2f      	cmp	r3, #47	@ 0x2f
 801820a:	4605      	mov	r5, r0
 801820c:	f000 809e 	beq.w	801834c <rcl_expand_topic_name+0x1c4>
 8018210:	2b7e      	cmp	r3, #126	@ 0x7e
 8018212:	f040 80a2 	bne.w	801835a <rcl_expand_topic_name+0x1d2>
 8018216:	4638      	mov	r0, r7
 8018218:	f7e8 f80c 	bl	8000234 <strlen>
 801821c:	4a82      	ldr	r2, [pc, #520]	@ (8018428 <rcl_expand_topic_name+0x2a0>)
 801821e:	4b83      	ldr	r3, [pc, #524]	@ (801842c <rcl_expand_topic_name+0x2a4>)
 8018220:	2801      	cmp	r0, #1
 8018222:	bf18      	it	ne
 8018224:	4613      	movne	r3, r2
 8018226:	9302      	str	r3, [sp, #8]
 8018228:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801822a:	9300      	str	r3, [sp, #0]
 801822c:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8018230:	f108 0301 	add.w	r3, r8, #1
 8018234:	9305      	str	r3, [sp, #20]
 8018236:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801823a:	9301      	str	r3, [sp, #4]
 801823c:	ab14      	add	r3, sp, #80	@ 0x50
 801823e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018240:	f7fd ffc6 	bl	80161d0 <rcutils_format_string_limit>
 8018244:	4682      	mov	sl, r0
 8018246:	2800      	cmp	r0, #0
 8018248:	f000 80c7 	beq.w	80183da <rcl_expand_topic_name+0x252>
 801824c:	2d00      	cmp	r5, #0
 801824e:	f000 80a2 	beq.w	8018396 <rcl_expand_topic_name+0x20e>
 8018252:	217b      	movs	r1, #123	@ 0x7b
 8018254:	f001 f864 	bl	8019320 <strchr>
 8018258:	46d1      	mov	r9, sl
 801825a:	4605      	mov	r5, r0
 801825c:	9407      	str	r4, [sp, #28]
 801825e:	46d3      	mov	fp, sl
 8018260:	464c      	mov	r4, r9
 8018262:	2d00      	cmp	r5, #0
 8018264:	f000 80be 	beq.w	80183e4 <rcl_expand_topic_name+0x25c>
 8018268:	217d      	movs	r1, #125	@ 0x7d
 801826a:	4620      	mov	r0, r4
 801826c:	f001 f858 	bl	8019320 <strchr>
 8018270:	eba0 0905 	sub.w	r9, r0, r5
 8018274:	f109 0a01 	add.w	sl, r9, #1
 8018278:	486d      	ldr	r0, [pc, #436]	@ (8018430 <rcl_expand_topic_name+0x2a8>)
 801827a:	4652      	mov	r2, sl
 801827c:	4629      	mov	r1, r5
 801827e:	f001 f85c 	bl	801933a <strncmp>
 8018282:	2800      	cmp	r0, #0
 8018284:	d067      	beq.n	8018356 <rcl_expand_topic_name+0x1ce>
 8018286:	486b      	ldr	r0, [pc, #428]	@ (8018434 <rcl_expand_topic_name+0x2ac>)
 8018288:	4652      	mov	r2, sl
 801828a:	4629      	mov	r1, r5
 801828c:	f001 f855 	bl	801933a <strncmp>
 8018290:	b130      	cbz	r0, 80182a0 <rcl_expand_topic_name+0x118>
 8018292:	4869      	ldr	r0, [pc, #420]	@ (8018438 <rcl_expand_topic_name+0x2b0>)
 8018294:	4652      	mov	r2, sl
 8018296:	4629      	mov	r1, r5
 8018298:	f001 f84f 	bl	801933a <strncmp>
 801829c:	2800      	cmp	r0, #0
 801829e:	d137      	bne.n	8018310 <rcl_expand_topic_name+0x188>
 80182a0:	46b9      	mov	r9, r7
 80182a2:	ab16      	add	r3, sp, #88	@ 0x58
 80182a4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80182a8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80182ac:	ab14      	add	r3, sp, #80	@ 0x50
 80182ae:	4628      	mov	r0, r5
 80182b0:	cb0c      	ldmia	r3, {r2, r3}
 80182b2:	4651      	mov	r1, sl
 80182b4:	f7fe f8c8 	bl	8016448 <rcutils_strndup>
 80182b8:	4605      	mov	r5, r0
 80182ba:	2800      	cmp	r0, #0
 80182bc:	f000 809c 	beq.w	80183f8 <rcl_expand_topic_name+0x270>
 80182c0:	464a      	mov	r2, r9
 80182c2:	4620      	mov	r0, r4
 80182c4:	ab14      	add	r3, sp, #80	@ 0x50
 80182c6:	4629      	mov	r1, r5
 80182c8:	f7fd ffbc 	bl	8016244 <rcutils_repl_str>
 80182cc:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80182ce:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80182d0:	4604      	mov	r4, r0
 80182d2:	4628      	mov	r0, r5
 80182d4:	4798      	blx	r3
 80182d6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80182d8:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80182da:	4658      	mov	r0, fp
 80182dc:	4798      	blx	r3
 80182de:	2c00      	cmp	r4, #0
 80182e0:	d07b      	beq.n	80183da <rcl_expand_topic_name+0x252>
 80182e2:	217b      	movs	r1, #123	@ 0x7b
 80182e4:	4620      	mov	r0, r4
 80182e6:	f001 f81b 	bl	8019320 <strchr>
 80182ea:	46a3      	mov	fp, r4
 80182ec:	4605      	mov	r5, r0
 80182ee:	e7b8      	b.n	8018262 <rcl_expand_topic_name+0xda>
 80182f0:	240b      	movs	r4, #11
 80182f2:	4620      	mov	r0, r4
 80182f4:	b00b      	add	sp, #44	@ 0x2c
 80182f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182fa:	f7fb f8bb 	bl	8013474 <rcl_convert_rmw_ret_to_rcl_ret>
 80182fe:	4604      	mov	r4, r0
 8018300:	e7f7      	b.n	80182f2 <rcl_expand_topic_name+0x16a>
 8018302:	2467      	movs	r4, #103	@ 0x67
 8018304:	4620      	mov	r0, r4
 8018306:	b00b      	add	sp, #44	@ 0x2c
 8018308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801830c:	24c9      	movs	r4, #201	@ 0xc9
 801830e:	e7f0      	b.n	80182f2 <rcl_expand_topic_name+0x16a>
 8018310:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8018314:	9806      	ldr	r0, [sp, #24]
 8018316:	1c69      	adds	r1, r5, #1
 8018318:	f7fe f9b0 	bl	801667c <rcutils_string_map_getn>
 801831c:	4681      	mov	r9, r0
 801831e:	2800      	cmp	r0, #0
 8018320:	d1bf      	bne.n	80182a2 <rcl_expand_topic_name+0x11a>
 8018322:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018324:	aa16      	add	r2, sp, #88	@ 0x58
 8018326:	6018      	str	r0, [r3, #0]
 8018328:	ca07      	ldmia	r2, {r0, r1, r2}
 801832a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801832e:	ab14      	add	r3, sp, #80	@ 0x50
 8018330:	cb0c      	ldmia	r3, {r2, r3}
 8018332:	4651      	mov	r1, sl
 8018334:	4628      	mov	r0, r5
 8018336:	f7fe f887 	bl	8016448 <rcutils_strndup>
 801833a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801833c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801833e:	4798      	blx	r3
 8018340:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018342:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018344:	4658      	mov	r0, fp
 8018346:	2469      	movs	r4, #105	@ 0x69
 8018348:	4798      	blx	r3
 801834a:	e7d2      	b.n	80182f2 <rcl_expand_topic_name+0x16a>
 801834c:	2800      	cmp	r0, #0
 801834e:	d05b      	beq.n	8018408 <rcl_expand_topic_name+0x280>
 8018350:	46c1      	mov	r9, r8
 8018352:	46a2      	mov	sl, r4
 8018354:	e782      	b.n	801825c <rcl_expand_topic_name+0xd4>
 8018356:	46b1      	mov	r9, r6
 8018358:	e7a3      	b.n	80182a2 <rcl_expand_topic_name+0x11a>
 801835a:	2800      	cmp	r0, #0
 801835c:	d1f8      	bne.n	8018350 <rcl_expand_topic_name+0x1c8>
 801835e:	4638      	mov	r0, r7
 8018360:	f7e7 ff68 	bl	8000234 <strlen>
 8018364:	4a35      	ldr	r2, [pc, #212]	@ (801843c <rcl_expand_topic_name+0x2b4>)
 8018366:	4b36      	ldr	r3, [pc, #216]	@ (8018440 <rcl_expand_topic_name+0x2b8>)
 8018368:	f8cd 8010 	str.w	r8, [sp, #16]
 801836c:	2801      	cmp	r0, #1
 801836e:	bf18      	it	ne
 8018370:	4613      	movne	r3, r2
 8018372:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8018376:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801837a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801837c:	9703      	str	r7, [sp, #12]
 801837e:	9200      	str	r2, [sp, #0]
 8018380:	ab14      	add	r3, sp, #80	@ 0x50
 8018382:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018384:	f7fd ff24 	bl	80161d0 <rcutils_format_string_limit>
 8018388:	4682      	mov	sl, r0
 801838a:	4653      	mov	r3, sl
 801838c:	b32b      	cbz	r3, 80183da <rcl_expand_topic_name+0x252>
 801838e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018390:	f8c3 a000 	str.w	sl, [r3]
 8018394:	e7ad      	b.n	80182f2 <rcl_expand_topic_name+0x16a>
 8018396:	f89a 3000 	ldrb.w	r3, [sl]
 801839a:	2b2f      	cmp	r3, #47	@ 0x2f
 801839c:	d0f7      	beq.n	801838e <rcl_expand_topic_name+0x206>
 801839e:	4638      	mov	r0, r7
 80183a0:	f7e7 ff48 	bl	8000234 <strlen>
 80183a4:	4a25      	ldr	r2, [pc, #148]	@ (801843c <rcl_expand_topic_name+0x2b4>)
 80183a6:	4b26      	ldr	r3, [pc, #152]	@ (8018440 <rcl_expand_topic_name+0x2b8>)
 80183a8:	f8cd a010 	str.w	sl, [sp, #16]
 80183ac:	2801      	cmp	r0, #1
 80183ae:	bf18      	it	ne
 80183b0:	4613      	movne	r3, r2
 80183b2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80183b6:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80183ba:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80183bc:	9703      	str	r7, [sp, #12]
 80183be:	9200      	str	r2, [sp, #0]
 80183c0:	ab14      	add	r3, sp, #80	@ 0x50
 80183c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80183c4:	f7fd ff04 	bl	80161d0 <rcutils_format_string_limit>
 80183c8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80183ca:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80183cc:	4605      	mov	r5, r0
 80183ce:	4650      	mov	r0, sl
 80183d0:	4798      	blx	r3
 80183d2:	46aa      	mov	sl, r5
 80183d4:	e7d9      	b.n	801838a <rcl_expand_topic_name+0x202>
 80183d6:	24ca      	movs	r4, #202	@ 0xca
 80183d8:	e78b      	b.n	80182f2 <rcl_expand_topic_name+0x16a>
 80183da:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80183dc:	2300      	movs	r3, #0
 80183de:	6013      	str	r3, [r2, #0]
 80183e0:	240a      	movs	r4, #10
 80183e2:	e786      	b.n	80182f2 <rcl_expand_topic_name+0x16a>
 80183e4:	465b      	mov	r3, fp
 80183e6:	9c07      	ldr	r4, [sp, #28]
 80183e8:	46da      	mov	sl, fp
 80183ea:	2b00      	cmp	r3, #0
 80183ec:	d1d3      	bne.n	8018396 <rcl_expand_topic_name+0x20e>
 80183ee:	f898 3000 	ldrb.w	r3, [r8]
 80183f2:	2b2f      	cmp	r3, #47	@ 0x2f
 80183f4:	d0cb      	beq.n	801838e <rcl_expand_topic_name+0x206>
 80183f6:	e7b2      	b.n	801835e <rcl_expand_topic_name+0x1d6>
 80183f8:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 80183fc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80183fe:	6015      	str	r5, [r2, #0]
 8018400:	4658      	mov	r0, fp
 8018402:	4798      	blx	r3
 8018404:	240a      	movs	r4, #10
 8018406:	e774      	b.n	80182f2 <rcl_expand_topic_name+0x16a>
 8018408:	ab17      	add	r3, sp, #92	@ 0x5c
 801840a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801840e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8018412:	ab14      	add	r3, sp, #80	@ 0x50
 8018414:	cb0e      	ldmia	r3, {r1, r2, r3}
 8018416:	4640      	mov	r0, r8
 8018418:	f7fd fff4 	bl	8016404 <rcutils_strdup>
 801841c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801841e:	2800      	cmp	r0, #0
 8018420:	6018      	str	r0, [r3, #0]
 8018422:	bf08      	it	eq
 8018424:	240a      	moveq	r4, #10
 8018426:	e764      	b.n	80182f2 <rcl_expand_topic_name+0x16a>
 8018428:	0801bdb4 	.word	0x0801bdb4
 801842c:	0801b27c 	.word	0x0801b27c
 8018430:	0801bdbc 	.word	0x0801bdbc
 8018434:	0801bdc4 	.word	0x0801bdc4
 8018438:	0801bdcc 	.word	0x0801bdcc
 801843c:	0801b268 	.word	0x0801b268
 8018440:	0801b28c 	.word	0x0801b28c

08018444 <rcl_get_default_topic_name_substitutions>:
 8018444:	2800      	cmp	r0, #0
 8018446:	bf0c      	ite	eq
 8018448:	200b      	moveq	r0, #11
 801844a:	2000      	movne	r0, #0
 801844c:	4770      	bx	lr
 801844e:	bf00      	nop

08018450 <rcl_get_zero_initialized_guard_condition>:
 8018450:	4a03      	ldr	r2, [pc, #12]	@ (8018460 <rcl_get_zero_initialized_guard_condition+0x10>)
 8018452:	4603      	mov	r3, r0
 8018454:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018458:	e883 0003 	stmia.w	r3, {r0, r1}
 801845c:	4618      	mov	r0, r3
 801845e:	4770      	bx	lr
 8018460:	0801bdd8 	.word	0x0801bdd8

08018464 <rcl_guard_condition_init>:
 8018464:	b082      	sub	sp, #8
 8018466:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018468:	b087      	sub	sp, #28
 801846a:	ac0c      	add	r4, sp, #48	@ 0x30
 801846c:	e884 000c 	stmia.w	r4, {r2, r3}
 8018470:	46a6      	mov	lr, r4
 8018472:	460d      	mov	r5, r1
 8018474:	4604      	mov	r4, r0
 8018476:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801847a:	f10d 0c04 	add.w	ip, sp, #4
 801847e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018482:	f8de 3000 	ldr.w	r3, [lr]
 8018486:	f8cc 3000 	str.w	r3, [ip]
 801848a:	a801      	add	r0, sp, #4
 801848c:	f7f5 f816 	bl	800d4bc <rcutils_allocator_is_valid>
 8018490:	b338      	cbz	r0, 80184e2 <rcl_guard_condition_init+0x7e>
 8018492:	b334      	cbz	r4, 80184e2 <rcl_guard_condition_init+0x7e>
 8018494:	6866      	ldr	r6, [r4, #4]
 8018496:	b9ee      	cbnz	r6, 80184d4 <rcl_guard_condition_init+0x70>
 8018498:	b31d      	cbz	r5, 80184e2 <rcl_guard_condition_init+0x7e>
 801849a:	4628      	mov	r0, r5
 801849c:	f7fb f808 	bl	80134b0 <rcl_context_is_valid>
 80184a0:	b308      	cbz	r0, 80184e6 <rcl_guard_condition_init+0x82>
 80184a2:	9b01      	ldr	r3, [sp, #4]
 80184a4:	9905      	ldr	r1, [sp, #20]
 80184a6:	201c      	movs	r0, #28
 80184a8:	4798      	blx	r3
 80184aa:	4607      	mov	r7, r0
 80184ac:	6060      	str	r0, [r4, #4]
 80184ae:	b310      	cbz	r0, 80184f6 <rcl_guard_condition_init+0x92>
 80184b0:	6828      	ldr	r0, [r5, #0]
 80184b2:	3028      	adds	r0, #40	@ 0x28
 80184b4:	f000 f9ac 	bl	8018810 <rmw_create_guard_condition>
 80184b8:	6038      	str	r0, [r7, #0]
 80184ba:	6860      	ldr	r0, [r4, #4]
 80184bc:	6805      	ldr	r5, [r0, #0]
 80184be:	b1a5      	cbz	r5, 80184ea <rcl_guard_condition_init+0x86>
 80184c0:	2301      	movs	r3, #1
 80184c2:	ac01      	add	r4, sp, #4
 80184c4:	7103      	strb	r3, [r0, #4]
 80184c6:	f100 0708 	add.w	r7, r0, #8
 80184ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80184cc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80184ce:	6823      	ldr	r3, [r4, #0]
 80184d0:	603b      	str	r3, [r7, #0]
 80184d2:	e000      	b.n	80184d6 <rcl_guard_condition_init+0x72>
 80184d4:	2664      	movs	r6, #100	@ 0x64
 80184d6:	4630      	mov	r0, r6
 80184d8:	b007      	add	sp, #28
 80184da:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80184de:	b002      	add	sp, #8
 80184e0:	4770      	bx	lr
 80184e2:	260b      	movs	r6, #11
 80184e4:	e7f7      	b.n	80184d6 <rcl_guard_condition_init+0x72>
 80184e6:	2665      	movs	r6, #101	@ 0x65
 80184e8:	e7f5      	b.n	80184d6 <rcl_guard_condition_init+0x72>
 80184ea:	9b02      	ldr	r3, [sp, #8]
 80184ec:	9905      	ldr	r1, [sp, #20]
 80184ee:	4798      	blx	r3
 80184f0:	2601      	movs	r6, #1
 80184f2:	6065      	str	r5, [r4, #4]
 80184f4:	e7ef      	b.n	80184d6 <rcl_guard_condition_init+0x72>
 80184f6:	260a      	movs	r6, #10
 80184f8:	e7ed      	b.n	80184d6 <rcl_guard_condition_init+0x72>
 80184fa:	bf00      	nop

080184fc <rcl_guard_condition_init_from_rmw>:
 80184fc:	b082      	sub	sp, #8
 80184fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018502:	b086      	sub	sp, #24
 8018504:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8018508:	4604      	mov	r4, r0
 801850a:	f84c 3f04 	str.w	r3, [ip, #4]!
 801850e:	460e      	mov	r6, r1
 8018510:	4617      	mov	r7, r2
 8018512:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8018516:	f10d 0e04 	add.w	lr, sp, #4
 801851a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801851e:	f8dc 3000 	ldr.w	r3, [ip]
 8018522:	f8ce 3000 	str.w	r3, [lr]
 8018526:	a801      	add	r0, sp, #4
 8018528:	f7f4 ffc8 	bl	800d4bc <rcutils_allocator_is_valid>
 801852c:	b350      	cbz	r0, 8018584 <rcl_guard_condition_init_from_rmw+0x88>
 801852e:	b34c      	cbz	r4, 8018584 <rcl_guard_condition_init_from_rmw+0x88>
 8018530:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8018534:	f1b8 0f00 	cmp.w	r8, #0
 8018538:	d11e      	bne.n	8018578 <rcl_guard_condition_init_from_rmw+0x7c>
 801853a:	b31f      	cbz	r7, 8018584 <rcl_guard_condition_init_from_rmw+0x88>
 801853c:	4638      	mov	r0, r7
 801853e:	f7fa ffb7 	bl	80134b0 <rcl_context_is_valid>
 8018542:	b328      	cbz	r0, 8018590 <rcl_guard_condition_init_from_rmw+0x94>
 8018544:	9b01      	ldr	r3, [sp, #4]
 8018546:	9905      	ldr	r1, [sp, #20]
 8018548:	201c      	movs	r0, #28
 801854a:	4798      	blx	r3
 801854c:	4605      	mov	r5, r0
 801854e:	6060      	str	r0, [r4, #4]
 8018550:	b358      	cbz	r0, 80185aa <rcl_guard_condition_init_from_rmw+0xae>
 8018552:	b1fe      	cbz	r6, 8018594 <rcl_guard_condition_init_from_rmw+0x98>
 8018554:	6006      	str	r6, [r0, #0]
 8018556:	f880 8004 	strb.w	r8, [r0, #4]
 801855a:	ac01      	add	r4, sp, #4
 801855c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801855e:	f105 0c08 	add.w	ip, r5, #8
 8018562:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018566:	6823      	ldr	r3, [r4, #0]
 8018568:	f8cc 3000 	str.w	r3, [ip]
 801856c:	2000      	movs	r0, #0
 801856e:	b006      	add	sp, #24
 8018570:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018574:	b002      	add	sp, #8
 8018576:	4770      	bx	lr
 8018578:	2064      	movs	r0, #100	@ 0x64
 801857a:	b006      	add	sp, #24
 801857c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018580:	b002      	add	sp, #8
 8018582:	4770      	bx	lr
 8018584:	200b      	movs	r0, #11
 8018586:	b006      	add	sp, #24
 8018588:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801858c:	b002      	add	sp, #8
 801858e:	4770      	bx	lr
 8018590:	2065      	movs	r0, #101	@ 0x65
 8018592:	e7f2      	b.n	801857a <rcl_guard_condition_init_from_rmw+0x7e>
 8018594:	6838      	ldr	r0, [r7, #0]
 8018596:	3028      	adds	r0, #40	@ 0x28
 8018598:	f000 f93a 	bl	8018810 <rmw_create_guard_condition>
 801859c:	6028      	str	r0, [r5, #0]
 801859e:	6865      	ldr	r5, [r4, #4]
 80185a0:	682e      	ldr	r6, [r5, #0]
 80185a2:	b126      	cbz	r6, 80185ae <rcl_guard_condition_init_from_rmw+0xb2>
 80185a4:	2301      	movs	r3, #1
 80185a6:	712b      	strb	r3, [r5, #4]
 80185a8:	e7d7      	b.n	801855a <rcl_guard_condition_init_from_rmw+0x5e>
 80185aa:	200a      	movs	r0, #10
 80185ac:	e7e5      	b.n	801857a <rcl_guard_condition_init_from_rmw+0x7e>
 80185ae:	4628      	mov	r0, r5
 80185b0:	9b02      	ldr	r3, [sp, #8]
 80185b2:	9905      	ldr	r1, [sp, #20]
 80185b4:	4798      	blx	r3
 80185b6:	6066      	str	r6, [r4, #4]
 80185b8:	2001      	movs	r0, #1
 80185ba:	e7de      	b.n	801857a <rcl_guard_condition_init_from_rmw+0x7e>

080185bc <rcl_guard_condition_fini>:
 80185bc:	b570      	push	{r4, r5, r6, lr}
 80185be:	b082      	sub	sp, #8
 80185c0:	b1f0      	cbz	r0, 8018600 <rcl_guard_condition_fini+0x44>
 80185c2:	6843      	ldr	r3, [r0, #4]
 80185c4:	4604      	mov	r4, r0
 80185c6:	b163      	cbz	r3, 80185e2 <rcl_guard_condition_fini+0x26>
 80185c8:	6818      	ldr	r0, [r3, #0]
 80185ca:	68de      	ldr	r6, [r3, #12]
 80185cc:	6999      	ldr	r1, [r3, #24]
 80185ce:	b160      	cbz	r0, 80185ea <rcl_guard_condition_fini+0x2e>
 80185d0:	791d      	ldrb	r5, [r3, #4]
 80185d2:	b965      	cbnz	r5, 80185ee <rcl_guard_condition_fini+0x32>
 80185d4:	4618      	mov	r0, r3
 80185d6:	47b0      	blx	r6
 80185d8:	2300      	movs	r3, #0
 80185da:	4628      	mov	r0, r5
 80185dc:	6063      	str	r3, [r4, #4]
 80185de:	b002      	add	sp, #8
 80185e0:	bd70      	pop	{r4, r5, r6, pc}
 80185e2:	461d      	mov	r5, r3
 80185e4:	4628      	mov	r0, r5
 80185e6:	b002      	add	sp, #8
 80185e8:	bd70      	pop	{r4, r5, r6, pc}
 80185ea:	4605      	mov	r5, r0
 80185ec:	e7f2      	b.n	80185d4 <rcl_guard_condition_fini+0x18>
 80185ee:	9101      	str	r1, [sp, #4]
 80185f0:	f000 f922 	bl	8018838 <rmw_destroy_guard_condition>
 80185f4:	1e05      	subs	r5, r0, #0
 80185f6:	6863      	ldr	r3, [r4, #4]
 80185f8:	9901      	ldr	r1, [sp, #4]
 80185fa:	bf18      	it	ne
 80185fc:	2501      	movne	r5, #1
 80185fe:	e7e9      	b.n	80185d4 <rcl_guard_condition_fini+0x18>
 8018600:	250b      	movs	r5, #11
 8018602:	4628      	mov	r0, r5
 8018604:	b002      	add	sp, #8
 8018606:	bd70      	pop	{r4, r5, r6, pc}

08018608 <rcl_guard_condition_get_default_options>:
 8018608:	b5f0      	push	{r4, r5, r6, r7, lr}
 801860a:	b087      	sub	sp, #28
 801860c:	4606      	mov	r6, r0
 801860e:	4668      	mov	r0, sp
 8018610:	f7f4 ff46 	bl	800d4a0 <rcutils_get_default_allocator>
 8018614:	4b09      	ldr	r3, [pc, #36]	@ (801863c <rcl_guard_condition_get_default_options+0x34>)
 8018616:	46ee      	mov	lr, sp
 8018618:	469c      	mov	ip, r3
 801861a:	461d      	mov	r5, r3
 801861c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018620:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018624:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018626:	4634      	mov	r4, r6
 8018628:	f8de 7000 	ldr.w	r7, [lr]
 801862c:	f8cc 7000 	str.w	r7, [ip]
 8018630:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018632:	4630      	mov	r0, r6
 8018634:	6027      	str	r7, [r4, #0]
 8018636:	b007      	add	sp, #28
 8018638:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801863a:	bf00      	nop
 801863c:	2000b9f4 	.word	0x2000b9f4

08018640 <rcl_trigger_guard_condition>:
 8018640:	b148      	cbz	r0, 8018656 <rcl_trigger_guard_condition+0x16>
 8018642:	b508      	push	{r3, lr}
 8018644:	6843      	ldr	r3, [r0, #4]
 8018646:	b143      	cbz	r3, 801865a <rcl_trigger_guard_condition+0x1a>
 8018648:	6818      	ldr	r0, [r3, #0]
 801864a:	f000 f909 	bl	8018860 <rmw_trigger_guard_condition>
 801864e:	3800      	subs	r0, #0
 8018650:	bf18      	it	ne
 8018652:	2001      	movne	r0, #1
 8018654:	bd08      	pop	{r3, pc}
 8018656:	200b      	movs	r0, #11
 8018658:	4770      	bx	lr
 801865a:	200b      	movs	r0, #11
 801865c:	bd08      	pop	{r3, pc}
 801865e:	bf00      	nop

08018660 <rcl_guard_condition_get_rmw_handle>:
 8018660:	b110      	cbz	r0, 8018668 <rcl_guard_condition_get_rmw_handle+0x8>
 8018662:	6840      	ldr	r0, [r0, #4]
 8018664:	b100      	cbz	r0, 8018668 <rcl_guard_condition_get_rmw_handle+0x8>
 8018666:	6800      	ldr	r0, [r0, #0]
 8018668:	4770      	bx	lr
 801866a:	bf00      	nop

0801866c <rcl_validate_topic_name>:
 801866c:	2800      	cmp	r0, #0
 801866e:	d07a      	beq.n	8018766 <rcl_validate_topic_name+0xfa>
 8018670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018674:	460e      	mov	r6, r1
 8018676:	2900      	cmp	r1, #0
 8018678:	d07c      	beq.n	8018774 <rcl_validate_topic_name+0x108>
 801867a:	4617      	mov	r7, r2
 801867c:	4605      	mov	r5, r0
 801867e:	f7e7 fdd9 	bl	8000234 <strlen>
 8018682:	b1b0      	cbz	r0, 80186b2 <rcl_validate_topic_name+0x46>
 8018684:	f895 9000 	ldrb.w	r9, [r5]
 8018688:	f8df c180 	ldr.w	ip, [pc, #384]	@ 801880c <rcl_validate_topic_name+0x1a0>
 801868c:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8018690:	f013 0304 	ands.w	r3, r3, #4
 8018694:	d169      	bne.n	801876a <rcl_validate_topic_name+0xfe>
 8018696:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 801869a:	f815 2008 	ldrb.w	r2, [r5, r8]
 801869e:	2a2f      	cmp	r2, #47	@ 0x2f
 80186a0:	d10e      	bne.n	80186c0 <rcl_validate_topic_name+0x54>
 80186a2:	2202      	movs	r2, #2
 80186a4:	6032      	str	r2, [r6, #0]
 80186a6:	b36f      	cbz	r7, 8018704 <rcl_validate_topic_name+0x98>
 80186a8:	f8c7 8000 	str.w	r8, [r7]
 80186ac:	4618      	mov	r0, r3
 80186ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80186b2:	2301      	movs	r3, #1
 80186b4:	6033      	str	r3, [r6, #0]
 80186b6:	b32f      	cbz	r7, 8018704 <rcl_validate_topic_name+0x98>
 80186b8:	2000      	movs	r0, #0
 80186ba:	6038      	str	r0, [r7, #0]
 80186bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80186c0:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 80186c4:	461c      	mov	r4, r3
 80186c6:	4619      	mov	r1, r3
 80186c8:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 80186cc:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80186d0:	f1be 0f09 	cmp.w	lr, #9
 80186d4:	d919      	bls.n	801870a <rcl_validate_topic_name+0x9e>
 80186d6:	f022 0e20 	bic.w	lr, r2, #32
 80186da:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 80186de:	f1be 0f19 	cmp.w	lr, #25
 80186e2:	d912      	bls.n	801870a <rcl_validate_topic_name+0x9e>
 80186e4:	2a5f      	cmp	r2, #95	@ 0x5f
 80186e6:	d019      	beq.n	801871c <rcl_validate_topic_name+0xb0>
 80186e8:	2a2f      	cmp	r2, #47	@ 0x2f
 80186ea:	d051      	beq.n	8018790 <rcl_validate_topic_name+0x124>
 80186ec:	2a7e      	cmp	r2, #126	@ 0x7e
 80186ee:	d048      	beq.n	8018782 <rcl_validate_topic_name+0x116>
 80186f0:	2a7b      	cmp	r2, #123	@ 0x7b
 80186f2:	d054      	beq.n	801879e <rcl_validate_topic_name+0x132>
 80186f4:	2a7d      	cmp	r2, #125	@ 0x7d
 80186f6:	d161      	bne.n	80187bc <rcl_validate_topic_name+0x150>
 80186f8:	2c00      	cmp	r4, #0
 80186fa:	d155      	bne.n	80187a8 <rcl_validate_topic_name+0x13c>
 80186fc:	2305      	movs	r3, #5
 80186fe:	6033      	str	r3, [r6, #0]
 8018700:	b107      	cbz	r7, 8018704 <rcl_validate_topic_name+0x98>
 8018702:	6039      	str	r1, [r7, #0]
 8018704:	2000      	movs	r0, #0
 8018706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801870a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801870e:	0752      	lsls	r2, r2, #29
 8018710:	d504      	bpl.n	801871c <rcl_validate_topic_name+0xb0>
 8018712:	b11c      	cbz	r4, 801871c <rcl_validate_topic_name+0xb0>
 8018714:	b111      	cbz	r1, 801871c <rcl_validate_topic_name+0xb0>
 8018716:	1e4a      	subs	r2, r1, #1
 8018718:	429a      	cmp	r2, r3
 801871a:	d02d      	beq.n	8018778 <rcl_validate_topic_name+0x10c>
 801871c:	3101      	adds	r1, #1
 801871e:	4288      	cmp	r0, r1
 8018720:	d1d2      	bne.n	80186c8 <rcl_validate_topic_name+0x5c>
 8018722:	2c00      	cmp	r4, #0
 8018724:	d145      	bne.n	80187b2 <rcl_validate_topic_name+0x146>
 8018726:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 801872a:	d04f      	beq.n	80187cc <rcl_validate_topic_name+0x160>
 801872c:	4620      	mov	r0, r4
 801872e:	2301      	movs	r3, #1
 8018730:	e006      	b.n	8018740 <rcl_validate_topic_name+0xd4>
 8018732:	428b      	cmp	r3, r1
 8018734:	f105 0501 	add.w	r5, r5, #1
 8018738:	f103 0201 	add.w	r2, r3, #1
 801873c:	d236      	bcs.n	80187ac <rcl_validate_topic_name+0x140>
 801873e:	4613      	mov	r3, r2
 8018740:	4580      	cmp	r8, r0
 8018742:	f100 0001 	add.w	r0, r0, #1
 8018746:	d0f4      	beq.n	8018732 <rcl_validate_topic_name+0xc6>
 8018748:	782a      	ldrb	r2, [r5, #0]
 801874a:	2a2f      	cmp	r2, #47	@ 0x2f
 801874c:	d1f1      	bne.n	8018732 <rcl_validate_topic_name+0xc6>
 801874e:	786a      	ldrb	r2, [r5, #1]
 8018750:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8018754:	0754      	lsls	r4, r2, #29
 8018756:	d5ec      	bpl.n	8018732 <rcl_validate_topic_name+0xc6>
 8018758:	2204      	movs	r2, #4
 801875a:	6032      	str	r2, [r6, #0]
 801875c:	2f00      	cmp	r7, #0
 801875e:	d0d1      	beq.n	8018704 <rcl_validate_topic_name+0x98>
 8018760:	603b      	str	r3, [r7, #0]
 8018762:	2000      	movs	r0, #0
 8018764:	e7aa      	b.n	80186bc <rcl_validate_topic_name+0x50>
 8018766:	200b      	movs	r0, #11
 8018768:	4770      	bx	lr
 801876a:	2304      	movs	r3, #4
 801876c:	6033      	str	r3, [r6, #0]
 801876e:	2f00      	cmp	r7, #0
 8018770:	d1a2      	bne.n	80186b8 <rcl_validate_topic_name+0x4c>
 8018772:	e7c7      	b.n	8018704 <rcl_validate_topic_name+0x98>
 8018774:	200b      	movs	r0, #11
 8018776:	e7a1      	b.n	80186bc <rcl_validate_topic_name+0x50>
 8018778:	2309      	movs	r3, #9
 801877a:	6033      	str	r3, [r6, #0]
 801877c:	2f00      	cmp	r7, #0
 801877e:	d1c0      	bne.n	8018702 <rcl_validate_topic_name+0x96>
 8018780:	e7c0      	b.n	8018704 <rcl_validate_topic_name+0x98>
 8018782:	2900      	cmp	r1, #0
 8018784:	d0ca      	beq.n	801871c <rcl_validate_topic_name+0xb0>
 8018786:	2306      	movs	r3, #6
 8018788:	6033      	str	r3, [r6, #0]
 801878a:	2f00      	cmp	r7, #0
 801878c:	d1b9      	bne.n	8018702 <rcl_validate_topic_name+0x96>
 801878e:	e7b9      	b.n	8018704 <rcl_validate_topic_name+0x98>
 8018790:	2c00      	cmp	r4, #0
 8018792:	d0c3      	beq.n	801871c <rcl_validate_topic_name+0xb0>
 8018794:	2308      	movs	r3, #8
 8018796:	6033      	str	r3, [r6, #0]
 8018798:	2f00      	cmp	r7, #0
 801879a:	d1b2      	bne.n	8018702 <rcl_validate_topic_name+0x96>
 801879c:	e7b2      	b.n	8018704 <rcl_validate_topic_name+0x98>
 801879e:	2c00      	cmp	r4, #0
 80187a0:	d1f8      	bne.n	8018794 <rcl_validate_topic_name+0x128>
 80187a2:	460b      	mov	r3, r1
 80187a4:	2401      	movs	r4, #1
 80187a6:	e7b9      	b.n	801871c <rcl_validate_topic_name+0xb0>
 80187a8:	2400      	movs	r4, #0
 80187aa:	e7b7      	b.n	801871c <rcl_validate_topic_name+0xb0>
 80187ac:	2000      	movs	r0, #0
 80187ae:	6030      	str	r0, [r6, #0]
 80187b0:	e784      	b.n	80186bc <rcl_validate_topic_name+0x50>
 80187b2:	2205      	movs	r2, #5
 80187b4:	6032      	str	r2, [r6, #0]
 80187b6:	2f00      	cmp	r7, #0
 80187b8:	d1d2      	bne.n	8018760 <rcl_validate_topic_name+0xf4>
 80187ba:	e7a3      	b.n	8018704 <rcl_validate_topic_name+0x98>
 80187bc:	2c00      	cmp	r4, #0
 80187be:	bf14      	ite	ne
 80187c0:	2308      	movne	r3, #8
 80187c2:	2303      	moveq	r3, #3
 80187c4:	6033      	str	r3, [r6, #0]
 80187c6:	2f00      	cmp	r7, #0
 80187c8:	d19b      	bne.n	8018702 <rcl_validate_topic_name+0x96>
 80187ca:	e79b      	b.n	8018704 <rcl_validate_topic_name+0x98>
 80187cc:	2301      	movs	r3, #1
 80187ce:	e00a      	b.n	80187e6 <rcl_validate_topic_name+0x17a>
 80187d0:	2c01      	cmp	r4, #1
 80187d2:	d013      	beq.n	80187fc <rcl_validate_topic_name+0x190>
 80187d4:	4299      	cmp	r1, r3
 80187d6:	f104 0401 	add.w	r4, r4, #1
 80187da:	f105 0501 	add.w	r5, r5, #1
 80187de:	f103 0201 	add.w	r2, r3, #1
 80187e2:	d9e3      	bls.n	80187ac <rcl_validate_topic_name+0x140>
 80187e4:	4613      	mov	r3, r2
 80187e6:	45a0      	cmp	r8, r4
 80187e8:	d0f4      	beq.n	80187d4 <rcl_validate_topic_name+0x168>
 80187ea:	782a      	ldrb	r2, [r5, #0]
 80187ec:	2a2f      	cmp	r2, #47	@ 0x2f
 80187ee:	d1ef      	bne.n	80187d0 <rcl_validate_topic_name+0x164>
 80187f0:	786a      	ldrb	r2, [r5, #1]
 80187f2:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80187f6:	0752      	lsls	r2, r2, #29
 80187f8:	d5ec      	bpl.n	80187d4 <rcl_validate_topic_name+0x168>
 80187fa:	e7ad      	b.n	8018758 <rcl_validate_topic_name+0xec>
 80187fc:	2307      	movs	r3, #7
 80187fe:	6033      	str	r3, [r6, #0]
 8018800:	2f00      	cmp	r7, #0
 8018802:	f43f af7f 	beq.w	8018704 <rcl_validate_topic_name+0x98>
 8018806:	603c      	str	r4, [r7, #0]
 8018808:	2000      	movs	r0, #0
 801880a:	e757      	b.n	80186bc <rcl_validate_topic_name+0x50>
 801880c:	0801bf42 	.word	0x0801bf42

08018810 <rmw_create_guard_condition>:
 8018810:	b538      	push	{r3, r4, r5, lr}
 8018812:	4605      	mov	r5, r0
 8018814:	4807      	ldr	r0, [pc, #28]	@ (8018834 <rmw_create_guard_condition+0x24>)
 8018816:	f7fe fa23 	bl	8016c60 <get_memory>
 801881a:	b148      	cbz	r0, 8018830 <rmw_create_guard_condition+0x20>
 801881c:	6884      	ldr	r4, [r0, #8]
 801881e:	2300      	movs	r3, #0
 8018820:	7423      	strb	r3, [r4, #16]
 8018822:	61e5      	str	r5, [r4, #28]
 8018824:	f7fe fa84 	bl	8016d30 <rmw_get_implementation_identifier>
 8018828:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801882c:	f104 0014 	add.w	r0, r4, #20
 8018830:	bd38      	pop	{r3, r4, r5, pc}
 8018832:	bf00      	nop
 8018834:	2000b824 	.word	0x2000b824

08018838 <rmw_destroy_guard_condition>:
 8018838:	b508      	push	{r3, lr}
 801883a:	4b08      	ldr	r3, [pc, #32]	@ (801885c <rmw_destroy_guard_condition+0x24>)
 801883c:	6819      	ldr	r1, [r3, #0]
 801883e:	b911      	cbnz	r1, 8018846 <rmw_destroy_guard_condition+0xe>
 8018840:	e00a      	b.n	8018858 <rmw_destroy_guard_condition+0x20>
 8018842:	6849      	ldr	r1, [r1, #4]
 8018844:	b141      	cbz	r1, 8018858 <rmw_destroy_guard_condition+0x20>
 8018846:	688b      	ldr	r3, [r1, #8]
 8018848:	3314      	adds	r3, #20
 801884a:	4298      	cmp	r0, r3
 801884c:	d1f9      	bne.n	8018842 <rmw_destroy_guard_condition+0xa>
 801884e:	4803      	ldr	r0, [pc, #12]	@ (801885c <rmw_destroy_guard_condition+0x24>)
 8018850:	f7fe fa16 	bl	8016c80 <put_memory>
 8018854:	2000      	movs	r0, #0
 8018856:	bd08      	pop	{r3, pc}
 8018858:	2001      	movs	r0, #1
 801885a:	bd08      	pop	{r3, pc}
 801885c:	2000b824 	.word	0x2000b824

08018860 <rmw_trigger_guard_condition>:
 8018860:	b160      	cbz	r0, 801887c <rmw_trigger_guard_condition+0x1c>
 8018862:	b510      	push	{r4, lr}
 8018864:	4604      	mov	r4, r0
 8018866:	6800      	ldr	r0, [r0, #0]
 8018868:	f7f6 f9ce 	bl	800ec08 <is_uxrce_rmw_identifier_valid>
 801886c:	b908      	cbnz	r0, 8018872 <rmw_trigger_guard_condition+0x12>
 801886e:	2001      	movs	r0, #1
 8018870:	bd10      	pop	{r4, pc}
 8018872:	6863      	ldr	r3, [r4, #4]
 8018874:	2201      	movs	r2, #1
 8018876:	741a      	strb	r2, [r3, #16]
 8018878:	2000      	movs	r0, #0
 801887a:	bd10      	pop	{r4, pc}
 801887c:	2001      	movs	r0, #1
 801887e:	4770      	bx	lr

08018880 <rosidl_runtime_c__String__init>:
 8018880:	b510      	push	{r4, lr}
 8018882:	4604      	mov	r4, r0
 8018884:	b086      	sub	sp, #24
 8018886:	b170      	cbz	r0, 80188a6 <rosidl_runtime_c__String__init+0x26>
 8018888:	a801      	add	r0, sp, #4
 801888a:	f7f4 fe09 	bl	800d4a0 <rcutils_get_default_allocator>
 801888e:	9b01      	ldr	r3, [sp, #4]
 8018890:	9905      	ldr	r1, [sp, #20]
 8018892:	2001      	movs	r0, #1
 8018894:	4798      	blx	r3
 8018896:	6020      	str	r0, [r4, #0]
 8018898:	b128      	cbz	r0, 80188a6 <rosidl_runtime_c__String__init+0x26>
 801889a:	2100      	movs	r1, #0
 801889c:	2201      	movs	r2, #1
 801889e:	7001      	strb	r1, [r0, #0]
 80188a0:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80188a4:	4610      	mov	r0, r2
 80188a6:	b006      	add	sp, #24
 80188a8:	bd10      	pop	{r4, pc}
 80188aa:	bf00      	nop

080188ac <rosidl_runtime_c__String__fini>:
 80188ac:	b320      	cbz	r0, 80188f8 <rosidl_runtime_c__String__fini+0x4c>
 80188ae:	b510      	push	{r4, lr}
 80188b0:	6803      	ldr	r3, [r0, #0]
 80188b2:	b086      	sub	sp, #24
 80188b4:	4604      	mov	r4, r0
 80188b6:	b173      	cbz	r3, 80188d6 <rosidl_runtime_c__String__fini+0x2a>
 80188b8:	6883      	ldr	r3, [r0, #8]
 80188ba:	b1f3      	cbz	r3, 80188fa <rosidl_runtime_c__String__fini+0x4e>
 80188bc:	a801      	add	r0, sp, #4
 80188be:	f7f4 fdef 	bl	800d4a0 <rcutils_get_default_allocator>
 80188c2:	9b02      	ldr	r3, [sp, #8]
 80188c4:	9905      	ldr	r1, [sp, #20]
 80188c6:	6820      	ldr	r0, [r4, #0]
 80188c8:	4798      	blx	r3
 80188ca:	2300      	movs	r3, #0
 80188cc:	e9c4 3300 	strd	r3, r3, [r4]
 80188d0:	60a3      	str	r3, [r4, #8]
 80188d2:	b006      	add	sp, #24
 80188d4:	bd10      	pop	{r4, pc}
 80188d6:	6843      	ldr	r3, [r0, #4]
 80188d8:	b9db      	cbnz	r3, 8018912 <rosidl_runtime_c__String__fini+0x66>
 80188da:	6883      	ldr	r3, [r0, #8]
 80188dc:	2b00      	cmp	r3, #0
 80188de:	d0f8      	beq.n	80188d2 <rosidl_runtime_c__String__fini+0x26>
 80188e0:	4b12      	ldr	r3, [pc, #72]	@ (801892c <rosidl_runtime_c__String__fini+0x80>)
 80188e2:	4813      	ldr	r0, [pc, #76]	@ (8018930 <rosidl_runtime_c__String__fini+0x84>)
 80188e4:	681b      	ldr	r3, [r3, #0]
 80188e6:	2251      	movs	r2, #81	@ 0x51
 80188e8:	68db      	ldr	r3, [r3, #12]
 80188ea:	2101      	movs	r1, #1
 80188ec:	f000 fb82 	bl	8018ff4 <fwrite>
 80188f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80188f4:	f000 f83e 	bl	8018974 <exit>
 80188f8:	4770      	bx	lr
 80188fa:	4b0c      	ldr	r3, [pc, #48]	@ (801892c <rosidl_runtime_c__String__fini+0x80>)
 80188fc:	480d      	ldr	r0, [pc, #52]	@ (8018934 <rosidl_runtime_c__String__fini+0x88>)
 80188fe:	681b      	ldr	r3, [r3, #0]
 8018900:	224c      	movs	r2, #76	@ 0x4c
 8018902:	68db      	ldr	r3, [r3, #12]
 8018904:	2101      	movs	r1, #1
 8018906:	f000 fb75 	bl	8018ff4 <fwrite>
 801890a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801890e:	f000 f831 	bl	8018974 <exit>
 8018912:	4b06      	ldr	r3, [pc, #24]	@ (801892c <rosidl_runtime_c__String__fini+0x80>)
 8018914:	4808      	ldr	r0, [pc, #32]	@ (8018938 <rosidl_runtime_c__String__fini+0x8c>)
 8018916:	681b      	ldr	r3, [r3, #0]
 8018918:	224e      	movs	r2, #78	@ 0x4e
 801891a:	68db      	ldr	r3, [r3, #12]
 801891c:	2101      	movs	r1, #1
 801891e:	f000 fb69 	bl	8018ff4 <fwrite>
 8018922:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018926:	f000 f825 	bl	8018974 <exit>
 801892a:	bf00      	nop
 801892c:	2000093c 	.word	0x2000093c
 8018930:	0801be80 	.word	0x0801be80
 8018934:	0801bde0 	.word	0x0801bde0
 8018938:	0801be30 	.word	0x0801be30

0801893c <calloc>:
 801893c:	4b02      	ldr	r3, [pc, #8]	@ (8018948 <calloc+0xc>)
 801893e:	460a      	mov	r2, r1
 8018940:	4601      	mov	r1, r0
 8018942:	6818      	ldr	r0, [r3, #0]
 8018944:	f000 b802 	b.w	801894c <_calloc_r>
 8018948:	2000093c 	.word	0x2000093c

0801894c <_calloc_r>:
 801894c:	b570      	push	{r4, r5, r6, lr}
 801894e:	fba1 5402 	umull	r5, r4, r1, r2
 8018952:	b93c      	cbnz	r4, 8018964 <_calloc_r+0x18>
 8018954:	4629      	mov	r1, r5
 8018956:	f000 f899 	bl	8018a8c <_malloc_r>
 801895a:	4606      	mov	r6, r0
 801895c:	b928      	cbnz	r0, 801896a <_calloc_r+0x1e>
 801895e:	2600      	movs	r6, #0
 8018960:	4630      	mov	r0, r6
 8018962:	bd70      	pop	{r4, r5, r6, pc}
 8018964:	220c      	movs	r2, #12
 8018966:	6002      	str	r2, [r0, #0]
 8018968:	e7f9      	b.n	801895e <_calloc_r+0x12>
 801896a:	462a      	mov	r2, r5
 801896c:	4621      	mov	r1, r4
 801896e:	f000 fccf 	bl	8019310 <memset>
 8018972:	e7f5      	b.n	8018960 <_calloc_r+0x14>

08018974 <exit>:
 8018974:	b508      	push	{r3, lr}
 8018976:	4b06      	ldr	r3, [pc, #24]	@ (8018990 <exit+0x1c>)
 8018978:	4604      	mov	r4, r0
 801897a:	b113      	cbz	r3, 8018982 <exit+0xe>
 801897c:	2100      	movs	r1, #0
 801897e:	f3af 8000 	nop.w
 8018982:	4b04      	ldr	r3, [pc, #16]	@ (8018994 <exit+0x20>)
 8018984:	681b      	ldr	r3, [r3, #0]
 8018986:	b103      	cbz	r3, 801898a <exit+0x16>
 8018988:	4798      	blx	r3
 801898a:	4620      	mov	r0, r4
 801898c:	f7e9 fd02 	bl	8002394 <_exit>
 8018990:	00000000 	.word	0x00000000
 8018994:	2000bb48 	.word	0x2000bb48

08018998 <getenv>:
 8018998:	b507      	push	{r0, r1, r2, lr}
 801899a:	4b04      	ldr	r3, [pc, #16]	@ (80189ac <getenv+0x14>)
 801899c:	4601      	mov	r1, r0
 801899e:	aa01      	add	r2, sp, #4
 80189a0:	6818      	ldr	r0, [r3, #0]
 80189a2:	f000 f805 	bl	80189b0 <_findenv_r>
 80189a6:	b003      	add	sp, #12
 80189a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80189ac:	2000093c 	.word	0x2000093c

080189b0 <_findenv_r>:
 80189b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189b4:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8018a24 <_findenv_r+0x74>
 80189b8:	4606      	mov	r6, r0
 80189ba:	4689      	mov	r9, r1
 80189bc:	4617      	mov	r7, r2
 80189be:	f000 fd9d 	bl	80194fc <__env_lock>
 80189c2:	f8da 4000 	ldr.w	r4, [sl]
 80189c6:	b134      	cbz	r4, 80189d6 <_findenv_r+0x26>
 80189c8:	464b      	mov	r3, r9
 80189ca:	4698      	mov	r8, r3
 80189cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80189d0:	b13a      	cbz	r2, 80189e2 <_findenv_r+0x32>
 80189d2:	2a3d      	cmp	r2, #61	@ 0x3d
 80189d4:	d1f9      	bne.n	80189ca <_findenv_r+0x1a>
 80189d6:	4630      	mov	r0, r6
 80189d8:	f000 fd96 	bl	8019508 <__env_unlock>
 80189dc:	2000      	movs	r0, #0
 80189de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189e2:	eba8 0809 	sub.w	r8, r8, r9
 80189e6:	46a3      	mov	fp, r4
 80189e8:	f854 0b04 	ldr.w	r0, [r4], #4
 80189ec:	2800      	cmp	r0, #0
 80189ee:	d0f2      	beq.n	80189d6 <_findenv_r+0x26>
 80189f0:	4642      	mov	r2, r8
 80189f2:	4649      	mov	r1, r9
 80189f4:	f000 fca1 	bl	801933a <strncmp>
 80189f8:	2800      	cmp	r0, #0
 80189fa:	d1f4      	bne.n	80189e6 <_findenv_r+0x36>
 80189fc:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8018a00:	eb03 0508 	add.w	r5, r3, r8
 8018a04:	f813 3008 	ldrb.w	r3, [r3, r8]
 8018a08:	2b3d      	cmp	r3, #61	@ 0x3d
 8018a0a:	d1ec      	bne.n	80189e6 <_findenv_r+0x36>
 8018a0c:	f8da 3000 	ldr.w	r3, [sl]
 8018a10:	ebab 0303 	sub.w	r3, fp, r3
 8018a14:	109b      	asrs	r3, r3, #2
 8018a16:	4630      	mov	r0, r6
 8018a18:	603b      	str	r3, [r7, #0]
 8018a1a:	f000 fd75 	bl	8019508 <__env_unlock>
 8018a1e:	1c68      	adds	r0, r5, #1
 8018a20:	e7dd      	b.n	80189de <_findenv_r+0x2e>
 8018a22:	bf00      	nop
 8018a24:	20000008 	.word	0x20000008

08018a28 <malloc>:
 8018a28:	4b02      	ldr	r3, [pc, #8]	@ (8018a34 <malloc+0xc>)
 8018a2a:	4601      	mov	r1, r0
 8018a2c:	6818      	ldr	r0, [r3, #0]
 8018a2e:	f000 b82d 	b.w	8018a8c <_malloc_r>
 8018a32:	bf00      	nop
 8018a34:	2000093c 	.word	0x2000093c

08018a38 <free>:
 8018a38:	4b02      	ldr	r3, [pc, #8]	@ (8018a44 <free+0xc>)
 8018a3a:	4601      	mov	r1, r0
 8018a3c:	6818      	ldr	r0, [r3, #0]
 8018a3e:	f000 bd69 	b.w	8019514 <_free_r>
 8018a42:	bf00      	nop
 8018a44:	2000093c 	.word	0x2000093c

08018a48 <sbrk_aligned>:
 8018a48:	b570      	push	{r4, r5, r6, lr}
 8018a4a:	4e0f      	ldr	r6, [pc, #60]	@ (8018a88 <sbrk_aligned+0x40>)
 8018a4c:	460c      	mov	r4, r1
 8018a4e:	6831      	ldr	r1, [r6, #0]
 8018a50:	4605      	mov	r5, r0
 8018a52:	b911      	cbnz	r1, 8018a5a <sbrk_aligned+0x12>
 8018a54:	f000 fcce 	bl	80193f4 <_sbrk_r>
 8018a58:	6030      	str	r0, [r6, #0]
 8018a5a:	4621      	mov	r1, r4
 8018a5c:	4628      	mov	r0, r5
 8018a5e:	f000 fcc9 	bl	80193f4 <_sbrk_r>
 8018a62:	1c43      	adds	r3, r0, #1
 8018a64:	d103      	bne.n	8018a6e <sbrk_aligned+0x26>
 8018a66:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8018a6a:	4620      	mov	r0, r4
 8018a6c:	bd70      	pop	{r4, r5, r6, pc}
 8018a6e:	1cc4      	adds	r4, r0, #3
 8018a70:	f024 0403 	bic.w	r4, r4, #3
 8018a74:	42a0      	cmp	r0, r4
 8018a76:	d0f8      	beq.n	8018a6a <sbrk_aligned+0x22>
 8018a78:	1a21      	subs	r1, r4, r0
 8018a7a:	4628      	mov	r0, r5
 8018a7c:	f000 fcba 	bl	80193f4 <_sbrk_r>
 8018a80:	3001      	adds	r0, #1
 8018a82:	d1f2      	bne.n	8018a6a <sbrk_aligned+0x22>
 8018a84:	e7ef      	b.n	8018a66 <sbrk_aligned+0x1e>
 8018a86:	bf00      	nop
 8018a88:	2000ba08 	.word	0x2000ba08

08018a8c <_malloc_r>:
 8018a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018a90:	1ccd      	adds	r5, r1, #3
 8018a92:	f025 0503 	bic.w	r5, r5, #3
 8018a96:	3508      	adds	r5, #8
 8018a98:	2d0c      	cmp	r5, #12
 8018a9a:	bf38      	it	cc
 8018a9c:	250c      	movcc	r5, #12
 8018a9e:	2d00      	cmp	r5, #0
 8018aa0:	4606      	mov	r6, r0
 8018aa2:	db01      	blt.n	8018aa8 <_malloc_r+0x1c>
 8018aa4:	42a9      	cmp	r1, r5
 8018aa6:	d904      	bls.n	8018ab2 <_malloc_r+0x26>
 8018aa8:	230c      	movs	r3, #12
 8018aaa:	6033      	str	r3, [r6, #0]
 8018aac:	2000      	movs	r0, #0
 8018aae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018ab2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8018b88 <_malloc_r+0xfc>
 8018ab6:	f000 f869 	bl	8018b8c <__malloc_lock>
 8018aba:	f8d8 3000 	ldr.w	r3, [r8]
 8018abe:	461c      	mov	r4, r3
 8018ac0:	bb44      	cbnz	r4, 8018b14 <_malloc_r+0x88>
 8018ac2:	4629      	mov	r1, r5
 8018ac4:	4630      	mov	r0, r6
 8018ac6:	f7ff ffbf 	bl	8018a48 <sbrk_aligned>
 8018aca:	1c43      	adds	r3, r0, #1
 8018acc:	4604      	mov	r4, r0
 8018ace:	d158      	bne.n	8018b82 <_malloc_r+0xf6>
 8018ad0:	f8d8 4000 	ldr.w	r4, [r8]
 8018ad4:	4627      	mov	r7, r4
 8018ad6:	2f00      	cmp	r7, #0
 8018ad8:	d143      	bne.n	8018b62 <_malloc_r+0xd6>
 8018ada:	2c00      	cmp	r4, #0
 8018adc:	d04b      	beq.n	8018b76 <_malloc_r+0xea>
 8018ade:	6823      	ldr	r3, [r4, #0]
 8018ae0:	4639      	mov	r1, r7
 8018ae2:	4630      	mov	r0, r6
 8018ae4:	eb04 0903 	add.w	r9, r4, r3
 8018ae8:	f000 fc84 	bl	80193f4 <_sbrk_r>
 8018aec:	4581      	cmp	r9, r0
 8018aee:	d142      	bne.n	8018b76 <_malloc_r+0xea>
 8018af0:	6821      	ldr	r1, [r4, #0]
 8018af2:	1a6d      	subs	r5, r5, r1
 8018af4:	4629      	mov	r1, r5
 8018af6:	4630      	mov	r0, r6
 8018af8:	f7ff ffa6 	bl	8018a48 <sbrk_aligned>
 8018afc:	3001      	adds	r0, #1
 8018afe:	d03a      	beq.n	8018b76 <_malloc_r+0xea>
 8018b00:	6823      	ldr	r3, [r4, #0]
 8018b02:	442b      	add	r3, r5
 8018b04:	6023      	str	r3, [r4, #0]
 8018b06:	f8d8 3000 	ldr.w	r3, [r8]
 8018b0a:	685a      	ldr	r2, [r3, #4]
 8018b0c:	bb62      	cbnz	r2, 8018b68 <_malloc_r+0xdc>
 8018b0e:	f8c8 7000 	str.w	r7, [r8]
 8018b12:	e00f      	b.n	8018b34 <_malloc_r+0xa8>
 8018b14:	6822      	ldr	r2, [r4, #0]
 8018b16:	1b52      	subs	r2, r2, r5
 8018b18:	d420      	bmi.n	8018b5c <_malloc_r+0xd0>
 8018b1a:	2a0b      	cmp	r2, #11
 8018b1c:	d917      	bls.n	8018b4e <_malloc_r+0xc2>
 8018b1e:	1961      	adds	r1, r4, r5
 8018b20:	42a3      	cmp	r3, r4
 8018b22:	6025      	str	r5, [r4, #0]
 8018b24:	bf18      	it	ne
 8018b26:	6059      	strne	r1, [r3, #4]
 8018b28:	6863      	ldr	r3, [r4, #4]
 8018b2a:	bf08      	it	eq
 8018b2c:	f8c8 1000 	streq.w	r1, [r8]
 8018b30:	5162      	str	r2, [r4, r5]
 8018b32:	604b      	str	r3, [r1, #4]
 8018b34:	4630      	mov	r0, r6
 8018b36:	f000 f82f 	bl	8018b98 <__malloc_unlock>
 8018b3a:	f104 000b 	add.w	r0, r4, #11
 8018b3e:	1d23      	adds	r3, r4, #4
 8018b40:	f020 0007 	bic.w	r0, r0, #7
 8018b44:	1ac2      	subs	r2, r0, r3
 8018b46:	bf1c      	itt	ne
 8018b48:	1a1b      	subne	r3, r3, r0
 8018b4a:	50a3      	strne	r3, [r4, r2]
 8018b4c:	e7af      	b.n	8018aae <_malloc_r+0x22>
 8018b4e:	6862      	ldr	r2, [r4, #4]
 8018b50:	42a3      	cmp	r3, r4
 8018b52:	bf0c      	ite	eq
 8018b54:	f8c8 2000 	streq.w	r2, [r8]
 8018b58:	605a      	strne	r2, [r3, #4]
 8018b5a:	e7eb      	b.n	8018b34 <_malloc_r+0xa8>
 8018b5c:	4623      	mov	r3, r4
 8018b5e:	6864      	ldr	r4, [r4, #4]
 8018b60:	e7ae      	b.n	8018ac0 <_malloc_r+0x34>
 8018b62:	463c      	mov	r4, r7
 8018b64:	687f      	ldr	r7, [r7, #4]
 8018b66:	e7b6      	b.n	8018ad6 <_malloc_r+0x4a>
 8018b68:	461a      	mov	r2, r3
 8018b6a:	685b      	ldr	r3, [r3, #4]
 8018b6c:	42a3      	cmp	r3, r4
 8018b6e:	d1fb      	bne.n	8018b68 <_malloc_r+0xdc>
 8018b70:	2300      	movs	r3, #0
 8018b72:	6053      	str	r3, [r2, #4]
 8018b74:	e7de      	b.n	8018b34 <_malloc_r+0xa8>
 8018b76:	230c      	movs	r3, #12
 8018b78:	6033      	str	r3, [r6, #0]
 8018b7a:	4630      	mov	r0, r6
 8018b7c:	f000 f80c 	bl	8018b98 <__malloc_unlock>
 8018b80:	e794      	b.n	8018aac <_malloc_r+0x20>
 8018b82:	6005      	str	r5, [r0, #0]
 8018b84:	e7d6      	b.n	8018b34 <_malloc_r+0xa8>
 8018b86:	bf00      	nop
 8018b88:	2000ba0c 	.word	0x2000ba0c

08018b8c <__malloc_lock>:
 8018b8c:	4801      	ldr	r0, [pc, #4]	@ (8018b94 <__malloc_lock+0x8>)
 8018b8e:	f000 bc7e 	b.w	801948e <__retarget_lock_acquire_recursive>
 8018b92:	bf00      	nop
 8018b94:	2000bb51 	.word	0x2000bb51

08018b98 <__malloc_unlock>:
 8018b98:	4801      	ldr	r0, [pc, #4]	@ (8018ba0 <__malloc_unlock+0x8>)
 8018b9a:	f000 bc79 	b.w	8019490 <__retarget_lock_release_recursive>
 8018b9e:	bf00      	nop
 8018ba0:	2000bb51 	.word	0x2000bb51

08018ba4 <srand>:
 8018ba4:	b538      	push	{r3, r4, r5, lr}
 8018ba6:	4b10      	ldr	r3, [pc, #64]	@ (8018be8 <srand+0x44>)
 8018ba8:	681d      	ldr	r5, [r3, #0]
 8018baa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018bac:	4604      	mov	r4, r0
 8018bae:	b9b3      	cbnz	r3, 8018bde <srand+0x3a>
 8018bb0:	2018      	movs	r0, #24
 8018bb2:	f7ff ff39 	bl	8018a28 <malloc>
 8018bb6:	4602      	mov	r2, r0
 8018bb8:	6328      	str	r0, [r5, #48]	@ 0x30
 8018bba:	b920      	cbnz	r0, 8018bc6 <srand+0x22>
 8018bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8018bec <srand+0x48>)
 8018bbe:	480c      	ldr	r0, [pc, #48]	@ (8018bf0 <srand+0x4c>)
 8018bc0:	2146      	movs	r1, #70	@ 0x46
 8018bc2:	f000 fc7d 	bl	80194c0 <__assert_func>
 8018bc6:	490b      	ldr	r1, [pc, #44]	@ (8018bf4 <srand+0x50>)
 8018bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8018bf8 <srand+0x54>)
 8018bca:	e9c0 1300 	strd	r1, r3, [r0]
 8018bce:	4b0b      	ldr	r3, [pc, #44]	@ (8018bfc <srand+0x58>)
 8018bd0:	6083      	str	r3, [r0, #8]
 8018bd2:	230b      	movs	r3, #11
 8018bd4:	8183      	strh	r3, [r0, #12]
 8018bd6:	2100      	movs	r1, #0
 8018bd8:	2001      	movs	r0, #1
 8018bda:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8018bde:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018be0:	2200      	movs	r2, #0
 8018be2:	611c      	str	r4, [r3, #16]
 8018be4:	615a      	str	r2, [r3, #20]
 8018be6:	bd38      	pop	{r3, r4, r5, pc}
 8018be8:	2000093c 	.word	0x2000093c
 8018bec:	0801bed2 	.word	0x0801bed2
 8018bf0:	0801bee9 	.word	0x0801bee9
 8018bf4:	abcd330e 	.word	0xabcd330e
 8018bf8:	e66d1234 	.word	0xe66d1234
 8018bfc:	0005deec 	.word	0x0005deec

08018c00 <rand>:
 8018c00:	4b16      	ldr	r3, [pc, #88]	@ (8018c5c <rand+0x5c>)
 8018c02:	b510      	push	{r4, lr}
 8018c04:	681c      	ldr	r4, [r3, #0]
 8018c06:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018c08:	b9b3      	cbnz	r3, 8018c38 <rand+0x38>
 8018c0a:	2018      	movs	r0, #24
 8018c0c:	f7ff ff0c 	bl	8018a28 <malloc>
 8018c10:	4602      	mov	r2, r0
 8018c12:	6320      	str	r0, [r4, #48]	@ 0x30
 8018c14:	b920      	cbnz	r0, 8018c20 <rand+0x20>
 8018c16:	4b12      	ldr	r3, [pc, #72]	@ (8018c60 <rand+0x60>)
 8018c18:	4812      	ldr	r0, [pc, #72]	@ (8018c64 <rand+0x64>)
 8018c1a:	2152      	movs	r1, #82	@ 0x52
 8018c1c:	f000 fc50 	bl	80194c0 <__assert_func>
 8018c20:	4911      	ldr	r1, [pc, #68]	@ (8018c68 <rand+0x68>)
 8018c22:	4b12      	ldr	r3, [pc, #72]	@ (8018c6c <rand+0x6c>)
 8018c24:	e9c0 1300 	strd	r1, r3, [r0]
 8018c28:	4b11      	ldr	r3, [pc, #68]	@ (8018c70 <rand+0x70>)
 8018c2a:	6083      	str	r3, [r0, #8]
 8018c2c:	230b      	movs	r3, #11
 8018c2e:	8183      	strh	r3, [r0, #12]
 8018c30:	2100      	movs	r1, #0
 8018c32:	2001      	movs	r0, #1
 8018c34:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8018c38:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8018c3a:	480e      	ldr	r0, [pc, #56]	@ (8018c74 <rand+0x74>)
 8018c3c:	690b      	ldr	r3, [r1, #16]
 8018c3e:	694c      	ldr	r4, [r1, #20]
 8018c40:	4a0d      	ldr	r2, [pc, #52]	@ (8018c78 <rand+0x78>)
 8018c42:	4358      	muls	r0, r3
 8018c44:	fb02 0004 	mla	r0, r2, r4, r0
 8018c48:	fba3 3202 	umull	r3, r2, r3, r2
 8018c4c:	3301      	adds	r3, #1
 8018c4e:	eb40 0002 	adc.w	r0, r0, r2
 8018c52:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8018c56:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8018c5a:	bd10      	pop	{r4, pc}
 8018c5c:	2000093c 	.word	0x2000093c
 8018c60:	0801bed2 	.word	0x0801bed2
 8018c64:	0801bee9 	.word	0x0801bee9
 8018c68:	abcd330e 	.word	0xabcd330e
 8018c6c:	e66d1234 	.word	0xe66d1234
 8018c70:	0005deec 	.word	0x0005deec
 8018c74:	5851f42d 	.word	0x5851f42d
 8018c78:	4c957f2d 	.word	0x4c957f2d

08018c7c <realloc>:
 8018c7c:	4b02      	ldr	r3, [pc, #8]	@ (8018c88 <realloc+0xc>)
 8018c7e:	460a      	mov	r2, r1
 8018c80:	4601      	mov	r1, r0
 8018c82:	6818      	ldr	r0, [r3, #0]
 8018c84:	f000 b802 	b.w	8018c8c <_realloc_r>
 8018c88:	2000093c 	.word	0x2000093c

08018c8c <_realloc_r>:
 8018c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c90:	4680      	mov	r8, r0
 8018c92:	4615      	mov	r5, r2
 8018c94:	460c      	mov	r4, r1
 8018c96:	b921      	cbnz	r1, 8018ca2 <_realloc_r+0x16>
 8018c98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018c9c:	4611      	mov	r1, r2
 8018c9e:	f7ff bef5 	b.w	8018a8c <_malloc_r>
 8018ca2:	b92a      	cbnz	r2, 8018cb0 <_realloc_r+0x24>
 8018ca4:	f000 fc36 	bl	8019514 <_free_r>
 8018ca8:	2400      	movs	r4, #0
 8018caa:	4620      	mov	r0, r4
 8018cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018cb0:	f000 fc7a 	bl	80195a8 <_malloc_usable_size_r>
 8018cb4:	4285      	cmp	r5, r0
 8018cb6:	4606      	mov	r6, r0
 8018cb8:	d802      	bhi.n	8018cc0 <_realloc_r+0x34>
 8018cba:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8018cbe:	d8f4      	bhi.n	8018caa <_realloc_r+0x1e>
 8018cc0:	4629      	mov	r1, r5
 8018cc2:	4640      	mov	r0, r8
 8018cc4:	f7ff fee2 	bl	8018a8c <_malloc_r>
 8018cc8:	4607      	mov	r7, r0
 8018cca:	2800      	cmp	r0, #0
 8018ccc:	d0ec      	beq.n	8018ca8 <_realloc_r+0x1c>
 8018cce:	42b5      	cmp	r5, r6
 8018cd0:	462a      	mov	r2, r5
 8018cd2:	4621      	mov	r1, r4
 8018cd4:	bf28      	it	cs
 8018cd6:	4632      	movcs	r2, r6
 8018cd8:	f000 fbe3 	bl	80194a2 <memcpy>
 8018cdc:	4621      	mov	r1, r4
 8018cde:	4640      	mov	r0, r8
 8018ce0:	f000 fc18 	bl	8019514 <_free_r>
 8018ce4:	463c      	mov	r4, r7
 8018ce6:	e7e0      	b.n	8018caa <_realloc_r+0x1e>

08018ce8 <_strtoul_l.constprop.0>:
 8018ce8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018cec:	4e34      	ldr	r6, [pc, #208]	@ (8018dc0 <_strtoul_l.constprop.0+0xd8>)
 8018cee:	4686      	mov	lr, r0
 8018cf0:	460d      	mov	r5, r1
 8018cf2:	4628      	mov	r0, r5
 8018cf4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018cf8:	5d37      	ldrb	r7, [r6, r4]
 8018cfa:	f017 0708 	ands.w	r7, r7, #8
 8018cfe:	d1f8      	bne.n	8018cf2 <_strtoul_l.constprop.0+0xa>
 8018d00:	2c2d      	cmp	r4, #45	@ 0x2d
 8018d02:	d12f      	bne.n	8018d64 <_strtoul_l.constprop.0+0x7c>
 8018d04:	782c      	ldrb	r4, [r5, #0]
 8018d06:	2701      	movs	r7, #1
 8018d08:	1c85      	adds	r5, r0, #2
 8018d0a:	f033 0010 	bics.w	r0, r3, #16
 8018d0e:	d109      	bne.n	8018d24 <_strtoul_l.constprop.0+0x3c>
 8018d10:	2c30      	cmp	r4, #48	@ 0x30
 8018d12:	d12c      	bne.n	8018d6e <_strtoul_l.constprop.0+0x86>
 8018d14:	7828      	ldrb	r0, [r5, #0]
 8018d16:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8018d1a:	2858      	cmp	r0, #88	@ 0x58
 8018d1c:	d127      	bne.n	8018d6e <_strtoul_l.constprop.0+0x86>
 8018d1e:	786c      	ldrb	r4, [r5, #1]
 8018d20:	2310      	movs	r3, #16
 8018d22:	3502      	adds	r5, #2
 8018d24:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8018d28:	2600      	movs	r6, #0
 8018d2a:	fbb8 f8f3 	udiv	r8, r8, r3
 8018d2e:	fb03 f908 	mul.w	r9, r3, r8
 8018d32:	ea6f 0909 	mvn.w	r9, r9
 8018d36:	4630      	mov	r0, r6
 8018d38:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8018d3c:	f1bc 0f09 	cmp.w	ip, #9
 8018d40:	d81c      	bhi.n	8018d7c <_strtoul_l.constprop.0+0x94>
 8018d42:	4664      	mov	r4, ip
 8018d44:	42a3      	cmp	r3, r4
 8018d46:	dd2a      	ble.n	8018d9e <_strtoul_l.constprop.0+0xb6>
 8018d48:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8018d4c:	d007      	beq.n	8018d5e <_strtoul_l.constprop.0+0x76>
 8018d4e:	4580      	cmp	r8, r0
 8018d50:	d322      	bcc.n	8018d98 <_strtoul_l.constprop.0+0xb0>
 8018d52:	d101      	bne.n	8018d58 <_strtoul_l.constprop.0+0x70>
 8018d54:	45a1      	cmp	r9, r4
 8018d56:	db1f      	blt.n	8018d98 <_strtoul_l.constprop.0+0xb0>
 8018d58:	fb00 4003 	mla	r0, r0, r3, r4
 8018d5c:	2601      	movs	r6, #1
 8018d5e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018d62:	e7e9      	b.n	8018d38 <_strtoul_l.constprop.0+0x50>
 8018d64:	2c2b      	cmp	r4, #43	@ 0x2b
 8018d66:	bf04      	itt	eq
 8018d68:	782c      	ldrbeq	r4, [r5, #0]
 8018d6a:	1c85      	addeq	r5, r0, #2
 8018d6c:	e7cd      	b.n	8018d0a <_strtoul_l.constprop.0+0x22>
 8018d6e:	2b00      	cmp	r3, #0
 8018d70:	d1d8      	bne.n	8018d24 <_strtoul_l.constprop.0+0x3c>
 8018d72:	2c30      	cmp	r4, #48	@ 0x30
 8018d74:	bf0c      	ite	eq
 8018d76:	2308      	moveq	r3, #8
 8018d78:	230a      	movne	r3, #10
 8018d7a:	e7d3      	b.n	8018d24 <_strtoul_l.constprop.0+0x3c>
 8018d7c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8018d80:	f1bc 0f19 	cmp.w	ip, #25
 8018d84:	d801      	bhi.n	8018d8a <_strtoul_l.constprop.0+0xa2>
 8018d86:	3c37      	subs	r4, #55	@ 0x37
 8018d88:	e7dc      	b.n	8018d44 <_strtoul_l.constprop.0+0x5c>
 8018d8a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8018d8e:	f1bc 0f19 	cmp.w	ip, #25
 8018d92:	d804      	bhi.n	8018d9e <_strtoul_l.constprop.0+0xb6>
 8018d94:	3c57      	subs	r4, #87	@ 0x57
 8018d96:	e7d5      	b.n	8018d44 <_strtoul_l.constprop.0+0x5c>
 8018d98:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8018d9c:	e7df      	b.n	8018d5e <_strtoul_l.constprop.0+0x76>
 8018d9e:	1c73      	adds	r3, r6, #1
 8018da0:	d106      	bne.n	8018db0 <_strtoul_l.constprop.0+0xc8>
 8018da2:	2322      	movs	r3, #34	@ 0x22
 8018da4:	f8ce 3000 	str.w	r3, [lr]
 8018da8:	4630      	mov	r0, r6
 8018daa:	b932      	cbnz	r2, 8018dba <_strtoul_l.constprop.0+0xd2>
 8018dac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018db0:	b107      	cbz	r7, 8018db4 <_strtoul_l.constprop.0+0xcc>
 8018db2:	4240      	negs	r0, r0
 8018db4:	2a00      	cmp	r2, #0
 8018db6:	d0f9      	beq.n	8018dac <_strtoul_l.constprop.0+0xc4>
 8018db8:	b106      	cbz	r6, 8018dbc <_strtoul_l.constprop.0+0xd4>
 8018dba:	1e69      	subs	r1, r5, #1
 8018dbc:	6011      	str	r1, [r2, #0]
 8018dbe:	e7f5      	b.n	8018dac <_strtoul_l.constprop.0+0xc4>
 8018dc0:	0801bf42 	.word	0x0801bf42

08018dc4 <strtoul>:
 8018dc4:	4613      	mov	r3, r2
 8018dc6:	460a      	mov	r2, r1
 8018dc8:	4601      	mov	r1, r0
 8018dca:	4802      	ldr	r0, [pc, #8]	@ (8018dd4 <strtoul+0x10>)
 8018dcc:	6800      	ldr	r0, [r0, #0]
 8018dce:	f7ff bf8b 	b.w	8018ce8 <_strtoul_l.constprop.0>
 8018dd2:	bf00      	nop
 8018dd4:	2000093c 	.word	0x2000093c

08018dd8 <std>:
 8018dd8:	2300      	movs	r3, #0
 8018dda:	b510      	push	{r4, lr}
 8018ddc:	4604      	mov	r4, r0
 8018dde:	e9c0 3300 	strd	r3, r3, [r0]
 8018de2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018de6:	6083      	str	r3, [r0, #8]
 8018de8:	8181      	strh	r1, [r0, #12]
 8018dea:	6643      	str	r3, [r0, #100]	@ 0x64
 8018dec:	81c2      	strh	r2, [r0, #14]
 8018dee:	6183      	str	r3, [r0, #24]
 8018df0:	4619      	mov	r1, r3
 8018df2:	2208      	movs	r2, #8
 8018df4:	305c      	adds	r0, #92	@ 0x5c
 8018df6:	f000 fa8b 	bl	8019310 <memset>
 8018dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8018e30 <std+0x58>)
 8018dfc:	6263      	str	r3, [r4, #36]	@ 0x24
 8018dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8018e34 <std+0x5c>)
 8018e00:	62a3      	str	r3, [r4, #40]	@ 0x28
 8018e02:	4b0d      	ldr	r3, [pc, #52]	@ (8018e38 <std+0x60>)
 8018e04:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8018e06:	4b0d      	ldr	r3, [pc, #52]	@ (8018e3c <std+0x64>)
 8018e08:	6323      	str	r3, [r4, #48]	@ 0x30
 8018e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8018e40 <std+0x68>)
 8018e0c:	6224      	str	r4, [r4, #32]
 8018e0e:	429c      	cmp	r4, r3
 8018e10:	d006      	beq.n	8018e20 <std+0x48>
 8018e12:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8018e16:	4294      	cmp	r4, r2
 8018e18:	d002      	beq.n	8018e20 <std+0x48>
 8018e1a:	33d0      	adds	r3, #208	@ 0xd0
 8018e1c:	429c      	cmp	r4, r3
 8018e1e:	d105      	bne.n	8018e2c <std+0x54>
 8018e20:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8018e24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018e28:	f000 bb30 	b.w	801948c <__retarget_lock_init_recursive>
 8018e2c:	bd10      	pop	{r4, pc}
 8018e2e:	bf00      	nop
 8018e30:	0801909d 	.word	0x0801909d
 8018e34:	080190bf 	.word	0x080190bf
 8018e38:	080190f7 	.word	0x080190f7
 8018e3c:	0801911b 	.word	0x0801911b
 8018e40:	2000ba10 	.word	0x2000ba10

08018e44 <stdio_exit_handler>:
 8018e44:	4a02      	ldr	r2, [pc, #8]	@ (8018e50 <stdio_exit_handler+0xc>)
 8018e46:	4903      	ldr	r1, [pc, #12]	@ (8018e54 <stdio_exit_handler+0x10>)
 8018e48:	4803      	ldr	r0, [pc, #12]	@ (8018e58 <stdio_exit_handler+0x14>)
 8018e4a:	f000 b869 	b.w	8018f20 <_fwalk_sglue>
 8018e4e:	bf00      	nop
 8018e50:	20000930 	.word	0x20000930
 8018e54:	08019f11 	.word	0x08019f11
 8018e58:	20000940 	.word	0x20000940

08018e5c <cleanup_stdio>:
 8018e5c:	6841      	ldr	r1, [r0, #4]
 8018e5e:	4b0c      	ldr	r3, [pc, #48]	@ (8018e90 <cleanup_stdio+0x34>)
 8018e60:	4299      	cmp	r1, r3
 8018e62:	b510      	push	{r4, lr}
 8018e64:	4604      	mov	r4, r0
 8018e66:	d001      	beq.n	8018e6c <cleanup_stdio+0x10>
 8018e68:	f001 f852 	bl	8019f10 <_fflush_r>
 8018e6c:	68a1      	ldr	r1, [r4, #8]
 8018e6e:	4b09      	ldr	r3, [pc, #36]	@ (8018e94 <cleanup_stdio+0x38>)
 8018e70:	4299      	cmp	r1, r3
 8018e72:	d002      	beq.n	8018e7a <cleanup_stdio+0x1e>
 8018e74:	4620      	mov	r0, r4
 8018e76:	f001 f84b 	bl	8019f10 <_fflush_r>
 8018e7a:	68e1      	ldr	r1, [r4, #12]
 8018e7c:	4b06      	ldr	r3, [pc, #24]	@ (8018e98 <cleanup_stdio+0x3c>)
 8018e7e:	4299      	cmp	r1, r3
 8018e80:	d004      	beq.n	8018e8c <cleanup_stdio+0x30>
 8018e82:	4620      	mov	r0, r4
 8018e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018e88:	f001 b842 	b.w	8019f10 <_fflush_r>
 8018e8c:	bd10      	pop	{r4, pc}
 8018e8e:	bf00      	nop
 8018e90:	2000ba10 	.word	0x2000ba10
 8018e94:	2000ba78 	.word	0x2000ba78
 8018e98:	2000bae0 	.word	0x2000bae0

08018e9c <global_stdio_init.part.0>:
 8018e9c:	b510      	push	{r4, lr}
 8018e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8018ecc <global_stdio_init.part.0+0x30>)
 8018ea0:	4c0b      	ldr	r4, [pc, #44]	@ (8018ed0 <global_stdio_init.part.0+0x34>)
 8018ea2:	4a0c      	ldr	r2, [pc, #48]	@ (8018ed4 <global_stdio_init.part.0+0x38>)
 8018ea4:	601a      	str	r2, [r3, #0]
 8018ea6:	4620      	mov	r0, r4
 8018ea8:	2200      	movs	r2, #0
 8018eaa:	2104      	movs	r1, #4
 8018eac:	f7ff ff94 	bl	8018dd8 <std>
 8018eb0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8018eb4:	2201      	movs	r2, #1
 8018eb6:	2109      	movs	r1, #9
 8018eb8:	f7ff ff8e 	bl	8018dd8 <std>
 8018ebc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8018ec0:	2202      	movs	r2, #2
 8018ec2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018ec6:	2112      	movs	r1, #18
 8018ec8:	f7ff bf86 	b.w	8018dd8 <std>
 8018ecc:	2000bb48 	.word	0x2000bb48
 8018ed0:	2000ba10 	.word	0x2000ba10
 8018ed4:	08018e45 	.word	0x08018e45

08018ed8 <__sfp_lock_acquire>:
 8018ed8:	4801      	ldr	r0, [pc, #4]	@ (8018ee0 <__sfp_lock_acquire+0x8>)
 8018eda:	f000 bad8 	b.w	801948e <__retarget_lock_acquire_recursive>
 8018ede:	bf00      	nop
 8018ee0:	2000bb52 	.word	0x2000bb52

08018ee4 <__sfp_lock_release>:
 8018ee4:	4801      	ldr	r0, [pc, #4]	@ (8018eec <__sfp_lock_release+0x8>)
 8018ee6:	f000 bad3 	b.w	8019490 <__retarget_lock_release_recursive>
 8018eea:	bf00      	nop
 8018eec:	2000bb52 	.word	0x2000bb52

08018ef0 <__sinit>:
 8018ef0:	b510      	push	{r4, lr}
 8018ef2:	4604      	mov	r4, r0
 8018ef4:	f7ff fff0 	bl	8018ed8 <__sfp_lock_acquire>
 8018ef8:	6a23      	ldr	r3, [r4, #32]
 8018efa:	b11b      	cbz	r3, 8018f04 <__sinit+0x14>
 8018efc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018f00:	f7ff bff0 	b.w	8018ee4 <__sfp_lock_release>
 8018f04:	4b04      	ldr	r3, [pc, #16]	@ (8018f18 <__sinit+0x28>)
 8018f06:	6223      	str	r3, [r4, #32]
 8018f08:	4b04      	ldr	r3, [pc, #16]	@ (8018f1c <__sinit+0x2c>)
 8018f0a:	681b      	ldr	r3, [r3, #0]
 8018f0c:	2b00      	cmp	r3, #0
 8018f0e:	d1f5      	bne.n	8018efc <__sinit+0xc>
 8018f10:	f7ff ffc4 	bl	8018e9c <global_stdio_init.part.0>
 8018f14:	e7f2      	b.n	8018efc <__sinit+0xc>
 8018f16:	bf00      	nop
 8018f18:	08018e5d 	.word	0x08018e5d
 8018f1c:	2000bb48 	.word	0x2000bb48

08018f20 <_fwalk_sglue>:
 8018f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018f24:	4607      	mov	r7, r0
 8018f26:	4688      	mov	r8, r1
 8018f28:	4614      	mov	r4, r2
 8018f2a:	2600      	movs	r6, #0
 8018f2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018f30:	f1b9 0901 	subs.w	r9, r9, #1
 8018f34:	d505      	bpl.n	8018f42 <_fwalk_sglue+0x22>
 8018f36:	6824      	ldr	r4, [r4, #0]
 8018f38:	2c00      	cmp	r4, #0
 8018f3a:	d1f7      	bne.n	8018f2c <_fwalk_sglue+0xc>
 8018f3c:	4630      	mov	r0, r6
 8018f3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018f42:	89ab      	ldrh	r3, [r5, #12]
 8018f44:	2b01      	cmp	r3, #1
 8018f46:	d907      	bls.n	8018f58 <_fwalk_sglue+0x38>
 8018f48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018f4c:	3301      	adds	r3, #1
 8018f4e:	d003      	beq.n	8018f58 <_fwalk_sglue+0x38>
 8018f50:	4629      	mov	r1, r5
 8018f52:	4638      	mov	r0, r7
 8018f54:	47c0      	blx	r8
 8018f56:	4306      	orrs	r6, r0
 8018f58:	3568      	adds	r5, #104	@ 0x68
 8018f5a:	e7e9      	b.n	8018f30 <_fwalk_sglue+0x10>

08018f5c <_fwrite_r>:
 8018f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018f60:	9c08      	ldr	r4, [sp, #32]
 8018f62:	468a      	mov	sl, r1
 8018f64:	4690      	mov	r8, r2
 8018f66:	fb02 f903 	mul.w	r9, r2, r3
 8018f6a:	4606      	mov	r6, r0
 8018f6c:	b118      	cbz	r0, 8018f76 <_fwrite_r+0x1a>
 8018f6e:	6a03      	ldr	r3, [r0, #32]
 8018f70:	b90b      	cbnz	r3, 8018f76 <_fwrite_r+0x1a>
 8018f72:	f7ff ffbd 	bl	8018ef0 <__sinit>
 8018f76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018f78:	07dd      	lsls	r5, r3, #31
 8018f7a:	d405      	bmi.n	8018f88 <_fwrite_r+0x2c>
 8018f7c:	89a3      	ldrh	r3, [r4, #12]
 8018f7e:	0598      	lsls	r0, r3, #22
 8018f80:	d402      	bmi.n	8018f88 <_fwrite_r+0x2c>
 8018f82:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018f84:	f000 fa83 	bl	801948e <__retarget_lock_acquire_recursive>
 8018f88:	89a3      	ldrh	r3, [r4, #12]
 8018f8a:	0719      	lsls	r1, r3, #28
 8018f8c:	d516      	bpl.n	8018fbc <_fwrite_r+0x60>
 8018f8e:	6923      	ldr	r3, [r4, #16]
 8018f90:	b1a3      	cbz	r3, 8018fbc <_fwrite_r+0x60>
 8018f92:	2500      	movs	r5, #0
 8018f94:	454d      	cmp	r5, r9
 8018f96:	d01f      	beq.n	8018fd8 <_fwrite_r+0x7c>
 8018f98:	68a7      	ldr	r7, [r4, #8]
 8018f9a:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8018f9e:	3f01      	subs	r7, #1
 8018fa0:	2f00      	cmp	r7, #0
 8018fa2:	60a7      	str	r7, [r4, #8]
 8018fa4:	da04      	bge.n	8018fb0 <_fwrite_r+0x54>
 8018fa6:	69a3      	ldr	r3, [r4, #24]
 8018fa8:	429f      	cmp	r7, r3
 8018faa:	db0f      	blt.n	8018fcc <_fwrite_r+0x70>
 8018fac:	290a      	cmp	r1, #10
 8018fae:	d00d      	beq.n	8018fcc <_fwrite_r+0x70>
 8018fb0:	6823      	ldr	r3, [r4, #0]
 8018fb2:	1c5a      	adds	r2, r3, #1
 8018fb4:	6022      	str	r2, [r4, #0]
 8018fb6:	7019      	strb	r1, [r3, #0]
 8018fb8:	3501      	adds	r5, #1
 8018fba:	e7eb      	b.n	8018f94 <_fwrite_r+0x38>
 8018fbc:	4621      	mov	r1, r4
 8018fbe:	4630      	mov	r0, r6
 8018fc0:	f000 f926 	bl	8019210 <__swsetup_r>
 8018fc4:	2800      	cmp	r0, #0
 8018fc6:	d0e4      	beq.n	8018f92 <_fwrite_r+0x36>
 8018fc8:	2500      	movs	r5, #0
 8018fca:	e005      	b.n	8018fd8 <_fwrite_r+0x7c>
 8018fcc:	4622      	mov	r2, r4
 8018fce:	4630      	mov	r0, r6
 8018fd0:	f000 f8e0 	bl	8019194 <__swbuf_r>
 8018fd4:	3001      	adds	r0, #1
 8018fd6:	d1ef      	bne.n	8018fb8 <_fwrite_r+0x5c>
 8018fd8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018fda:	07da      	lsls	r2, r3, #31
 8018fdc:	d405      	bmi.n	8018fea <_fwrite_r+0x8e>
 8018fde:	89a3      	ldrh	r3, [r4, #12]
 8018fe0:	059b      	lsls	r3, r3, #22
 8018fe2:	d402      	bmi.n	8018fea <_fwrite_r+0x8e>
 8018fe4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018fe6:	f000 fa53 	bl	8019490 <__retarget_lock_release_recursive>
 8018fea:	fbb5 f0f8 	udiv	r0, r5, r8
 8018fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08018ff4 <fwrite>:
 8018ff4:	b507      	push	{r0, r1, r2, lr}
 8018ff6:	9300      	str	r3, [sp, #0]
 8018ff8:	4613      	mov	r3, r2
 8018ffa:	460a      	mov	r2, r1
 8018ffc:	4601      	mov	r1, r0
 8018ffe:	4803      	ldr	r0, [pc, #12]	@ (801900c <fwrite+0x18>)
 8019000:	6800      	ldr	r0, [r0, #0]
 8019002:	f7ff ffab 	bl	8018f5c <_fwrite_r>
 8019006:	b003      	add	sp, #12
 8019008:	f85d fb04 	ldr.w	pc, [sp], #4
 801900c:	2000093c 	.word	0x2000093c

08019010 <iprintf>:
 8019010:	b40f      	push	{r0, r1, r2, r3}
 8019012:	b507      	push	{r0, r1, r2, lr}
 8019014:	4906      	ldr	r1, [pc, #24]	@ (8019030 <iprintf+0x20>)
 8019016:	ab04      	add	r3, sp, #16
 8019018:	6808      	ldr	r0, [r1, #0]
 801901a:	f853 2b04 	ldr.w	r2, [r3], #4
 801901e:	6881      	ldr	r1, [r0, #8]
 8019020:	9301      	str	r3, [sp, #4]
 8019022:	f000 fc4b 	bl	80198bc <_vfiprintf_r>
 8019026:	b003      	add	sp, #12
 8019028:	f85d eb04 	ldr.w	lr, [sp], #4
 801902c:	b004      	add	sp, #16
 801902e:	4770      	bx	lr
 8019030:	2000093c 	.word	0x2000093c

08019034 <sniprintf>:
 8019034:	b40c      	push	{r2, r3}
 8019036:	b530      	push	{r4, r5, lr}
 8019038:	4b17      	ldr	r3, [pc, #92]	@ (8019098 <sniprintf+0x64>)
 801903a:	1e0c      	subs	r4, r1, #0
 801903c:	681d      	ldr	r5, [r3, #0]
 801903e:	b09d      	sub	sp, #116	@ 0x74
 8019040:	da08      	bge.n	8019054 <sniprintf+0x20>
 8019042:	238b      	movs	r3, #139	@ 0x8b
 8019044:	602b      	str	r3, [r5, #0]
 8019046:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801904a:	b01d      	add	sp, #116	@ 0x74
 801904c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019050:	b002      	add	sp, #8
 8019052:	4770      	bx	lr
 8019054:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8019058:	f8ad 3014 	strh.w	r3, [sp, #20]
 801905c:	bf14      	ite	ne
 801905e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8019062:	4623      	moveq	r3, r4
 8019064:	9304      	str	r3, [sp, #16]
 8019066:	9307      	str	r3, [sp, #28]
 8019068:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801906c:	9002      	str	r0, [sp, #8]
 801906e:	9006      	str	r0, [sp, #24]
 8019070:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019074:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8019076:	ab21      	add	r3, sp, #132	@ 0x84
 8019078:	a902      	add	r1, sp, #8
 801907a:	4628      	mov	r0, r5
 801907c:	9301      	str	r3, [sp, #4]
 801907e:	f000 faf7 	bl	8019670 <_svfiprintf_r>
 8019082:	1c43      	adds	r3, r0, #1
 8019084:	bfbc      	itt	lt
 8019086:	238b      	movlt	r3, #139	@ 0x8b
 8019088:	602b      	strlt	r3, [r5, #0]
 801908a:	2c00      	cmp	r4, #0
 801908c:	d0dd      	beq.n	801904a <sniprintf+0x16>
 801908e:	9b02      	ldr	r3, [sp, #8]
 8019090:	2200      	movs	r2, #0
 8019092:	701a      	strb	r2, [r3, #0]
 8019094:	e7d9      	b.n	801904a <sniprintf+0x16>
 8019096:	bf00      	nop
 8019098:	2000093c 	.word	0x2000093c

0801909c <__sread>:
 801909c:	b510      	push	{r4, lr}
 801909e:	460c      	mov	r4, r1
 80190a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80190a4:	f000 f994 	bl	80193d0 <_read_r>
 80190a8:	2800      	cmp	r0, #0
 80190aa:	bfab      	itete	ge
 80190ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80190ae:	89a3      	ldrhlt	r3, [r4, #12]
 80190b0:	181b      	addge	r3, r3, r0
 80190b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80190b6:	bfac      	ite	ge
 80190b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80190ba:	81a3      	strhlt	r3, [r4, #12]
 80190bc:	bd10      	pop	{r4, pc}

080190be <__swrite>:
 80190be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80190c2:	461f      	mov	r7, r3
 80190c4:	898b      	ldrh	r3, [r1, #12]
 80190c6:	05db      	lsls	r3, r3, #23
 80190c8:	4605      	mov	r5, r0
 80190ca:	460c      	mov	r4, r1
 80190cc:	4616      	mov	r6, r2
 80190ce:	d505      	bpl.n	80190dc <__swrite+0x1e>
 80190d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80190d4:	2302      	movs	r3, #2
 80190d6:	2200      	movs	r2, #0
 80190d8:	f000 f968 	bl	80193ac <_lseek_r>
 80190dc:	89a3      	ldrh	r3, [r4, #12]
 80190de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80190e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80190e6:	81a3      	strh	r3, [r4, #12]
 80190e8:	4632      	mov	r2, r6
 80190ea:	463b      	mov	r3, r7
 80190ec:	4628      	mov	r0, r5
 80190ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80190f2:	f000 b98f 	b.w	8019414 <_write_r>

080190f6 <__sseek>:
 80190f6:	b510      	push	{r4, lr}
 80190f8:	460c      	mov	r4, r1
 80190fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80190fe:	f000 f955 	bl	80193ac <_lseek_r>
 8019102:	1c43      	adds	r3, r0, #1
 8019104:	89a3      	ldrh	r3, [r4, #12]
 8019106:	bf15      	itete	ne
 8019108:	6560      	strne	r0, [r4, #84]	@ 0x54
 801910a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801910e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8019112:	81a3      	strheq	r3, [r4, #12]
 8019114:	bf18      	it	ne
 8019116:	81a3      	strhne	r3, [r4, #12]
 8019118:	bd10      	pop	{r4, pc}

0801911a <__sclose>:
 801911a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801911e:	f000 b935 	b.w	801938c <_close_r>

08019122 <_vsniprintf_r>:
 8019122:	b530      	push	{r4, r5, lr}
 8019124:	4614      	mov	r4, r2
 8019126:	2c00      	cmp	r4, #0
 8019128:	b09b      	sub	sp, #108	@ 0x6c
 801912a:	4605      	mov	r5, r0
 801912c:	461a      	mov	r2, r3
 801912e:	da05      	bge.n	801913c <_vsniprintf_r+0x1a>
 8019130:	238b      	movs	r3, #139	@ 0x8b
 8019132:	6003      	str	r3, [r0, #0]
 8019134:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019138:	b01b      	add	sp, #108	@ 0x6c
 801913a:	bd30      	pop	{r4, r5, pc}
 801913c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8019140:	f8ad 300c 	strh.w	r3, [sp, #12]
 8019144:	bf14      	ite	ne
 8019146:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801914a:	4623      	moveq	r3, r4
 801914c:	9302      	str	r3, [sp, #8]
 801914e:	9305      	str	r3, [sp, #20]
 8019150:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019154:	9100      	str	r1, [sp, #0]
 8019156:	9104      	str	r1, [sp, #16]
 8019158:	f8ad 300e 	strh.w	r3, [sp, #14]
 801915c:	4669      	mov	r1, sp
 801915e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8019160:	f000 fa86 	bl	8019670 <_svfiprintf_r>
 8019164:	1c43      	adds	r3, r0, #1
 8019166:	bfbc      	itt	lt
 8019168:	238b      	movlt	r3, #139	@ 0x8b
 801916a:	602b      	strlt	r3, [r5, #0]
 801916c:	2c00      	cmp	r4, #0
 801916e:	d0e3      	beq.n	8019138 <_vsniprintf_r+0x16>
 8019170:	9b00      	ldr	r3, [sp, #0]
 8019172:	2200      	movs	r2, #0
 8019174:	701a      	strb	r2, [r3, #0]
 8019176:	e7df      	b.n	8019138 <_vsniprintf_r+0x16>

08019178 <vsniprintf>:
 8019178:	b507      	push	{r0, r1, r2, lr}
 801917a:	9300      	str	r3, [sp, #0]
 801917c:	4613      	mov	r3, r2
 801917e:	460a      	mov	r2, r1
 8019180:	4601      	mov	r1, r0
 8019182:	4803      	ldr	r0, [pc, #12]	@ (8019190 <vsniprintf+0x18>)
 8019184:	6800      	ldr	r0, [r0, #0]
 8019186:	f7ff ffcc 	bl	8019122 <_vsniprintf_r>
 801918a:	b003      	add	sp, #12
 801918c:	f85d fb04 	ldr.w	pc, [sp], #4
 8019190:	2000093c 	.word	0x2000093c

08019194 <__swbuf_r>:
 8019194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019196:	460e      	mov	r6, r1
 8019198:	4614      	mov	r4, r2
 801919a:	4605      	mov	r5, r0
 801919c:	b118      	cbz	r0, 80191a6 <__swbuf_r+0x12>
 801919e:	6a03      	ldr	r3, [r0, #32]
 80191a0:	b90b      	cbnz	r3, 80191a6 <__swbuf_r+0x12>
 80191a2:	f7ff fea5 	bl	8018ef0 <__sinit>
 80191a6:	69a3      	ldr	r3, [r4, #24]
 80191a8:	60a3      	str	r3, [r4, #8]
 80191aa:	89a3      	ldrh	r3, [r4, #12]
 80191ac:	071a      	lsls	r2, r3, #28
 80191ae:	d501      	bpl.n	80191b4 <__swbuf_r+0x20>
 80191b0:	6923      	ldr	r3, [r4, #16]
 80191b2:	b943      	cbnz	r3, 80191c6 <__swbuf_r+0x32>
 80191b4:	4621      	mov	r1, r4
 80191b6:	4628      	mov	r0, r5
 80191b8:	f000 f82a 	bl	8019210 <__swsetup_r>
 80191bc:	b118      	cbz	r0, 80191c6 <__swbuf_r+0x32>
 80191be:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80191c2:	4638      	mov	r0, r7
 80191c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80191c6:	6823      	ldr	r3, [r4, #0]
 80191c8:	6922      	ldr	r2, [r4, #16]
 80191ca:	1a98      	subs	r0, r3, r2
 80191cc:	6963      	ldr	r3, [r4, #20]
 80191ce:	b2f6      	uxtb	r6, r6
 80191d0:	4283      	cmp	r3, r0
 80191d2:	4637      	mov	r7, r6
 80191d4:	dc05      	bgt.n	80191e2 <__swbuf_r+0x4e>
 80191d6:	4621      	mov	r1, r4
 80191d8:	4628      	mov	r0, r5
 80191da:	f000 fe99 	bl	8019f10 <_fflush_r>
 80191de:	2800      	cmp	r0, #0
 80191e0:	d1ed      	bne.n	80191be <__swbuf_r+0x2a>
 80191e2:	68a3      	ldr	r3, [r4, #8]
 80191e4:	3b01      	subs	r3, #1
 80191e6:	60a3      	str	r3, [r4, #8]
 80191e8:	6823      	ldr	r3, [r4, #0]
 80191ea:	1c5a      	adds	r2, r3, #1
 80191ec:	6022      	str	r2, [r4, #0]
 80191ee:	701e      	strb	r6, [r3, #0]
 80191f0:	6962      	ldr	r2, [r4, #20]
 80191f2:	1c43      	adds	r3, r0, #1
 80191f4:	429a      	cmp	r2, r3
 80191f6:	d004      	beq.n	8019202 <__swbuf_r+0x6e>
 80191f8:	89a3      	ldrh	r3, [r4, #12]
 80191fa:	07db      	lsls	r3, r3, #31
 80191fc:	d5e1      	bpl.n	80191c2 <__swbuf_r+0x2e>
 80191fe:	2e0a      	cmp	r6, #10
 8019200:	d1df      	bne.n	80191c2 <__swbuf_r+0x2e>
 8019202:	4621      	mov	r1, r4
 8019204:	4628      	mov	r0, r5
 8019206:	f000 fe83 	bl	8019f10 <_fflush_r>
 801920a:	2800      	cmp	r0, #0
 801920c:	d0d9      	beq.n	80191c2 <__swbuf_r+0x2e>
 801920e:	e7d6      	b.n	80191be <__swbuf_r+0x2a>

08019210 <__swsetup_r>:
 8019210:	b538      	push	{r3, r4, r5, lr}
 8019212:	4b29      	ldr	r3, [pc, #164]	@ (80192b8 <__swsetup_r+0xa8>)
 8019214:	4605      	mov	r5, r0
 8019216:	6818      	ldr	r0, [r3, #0]
 8019218:	460c      	mov	r4, r1
 801921a:	b118      	cbz	r0, 8019224 <__swsetup_r+0x14>
 801921c:	6a03      	ldr	r3, [r0, #32]
 801921e:	b90b      	cbnz	r3, 8019224 <__swsetup_r+0x14>
 8019220:	f7ff fe66 	bl	8018ef0 <__sinit>
 8019224:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019228:	0719      	lsls	r1, r3, #28
 801922a:	d422      	bmi.n	8019272 <__swsetup_r+0x62>
 801922c:	06da      	lsls	r2, r3, #27
 801922e:	d407      	bmi.n	8019240 <__swsetup_r+0x30>
 8019230:	2209      	movs	r2, #9
 8019232:	602a      	str	r2, [r5, #0]
 8019234:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019238:	81a3      	strh	r3, [r4, #12]
 801923a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801923e:	e033      	b.n	80192a8 <__swsetup_r+0x98>
 8019240:	0758      	lsls	r0, r3, #29
 8019242:	d512      	bpl.n	801926a <__swsetup_r+0x5a>
 8019244:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019246:	b141      	cbz	r1, 801925a <__swsetup_r+0x4a>
 8019248:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801924c:	4299      	cmp	r1, r3
 801924e:	d002      	beq.n	8019256 <__swsetup_r+0x46>
 8019250:	4628      	mov	r0, r5
 8019252:	f000 f95f 	bl	8019514 <_free_r>
 8019256:	2300      	movs	r3, #0
 8019258:	6363      	str	r3, [r4, #52]	@ 0x34
 801925a:	89a3      	ldrh	r3, [r4, #12]
 801925c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8019260:	81a3      	strh	r3, [r4, #12]
 8019262:	2300      	movs	r3, #0
 8019264:	6063      	str	r3, [r4, #4]
 8019266:	6923      	ldr	r3, [r4, #16]
 8019268:	6023      	str	r3, [r4, #0]
 801926a:	89a3      	ldrh	r3, [r4, #12]
 801926c:	f043 0308 	orr.w	r3, r3, #8
 8019270:	81a3      	strh	r3, [r4, #12]
 8019272:	6923      	ldr	r3, [r4, #16]
 8019274:	b94b      	cbnz	r3, 801928a <__swsetup_r+0x7a>
 8019276:	89a3      	ldrh	r3, [r4, #12]
 8019278:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801927c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019280:	d003      	beq.n	801928a <__swsetup_r+0x7a>
 8019282:	4621      	mov	r1, r4
 8019284:	4628      	mov	r0, r5
 8019286:	f000 fea3 	bl	8019fd0 <__smakebuf_r>
 801928a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801928e:	f013 0201 	ands.w	r2, r3, #1
 8019292:	d00a      	beq.n	80192aa <__swsetup_r+0x9a>
 8019294:	2200      	movs	r2, #0
 8019296:	60a2      	str	r2, [r4, #8]
 8019298:	6962      	ldr	r2, [r4, #20]
 801929a:	4252      	negs	r2, r2
 801929c:	61a2      	str	r2, [r4, #24]
 801929e:	6922      	ldr	r2, [r4, #16]
 80192a0:	b942      	cbnz	r2, 80192b4 <__swsetup_r+0xa4>
 80192a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80192a6:	d1c5      	bne.n	8019234 <__swsetup_r+0x24>
 80192a8:	bd38      	pop	{r3, r4, r5, pc}
 80192aa:	0799      	lsls	r1, r3, #30
 80192ac:	bf58      	it	pl
 80192ae:	6962      	ldrpl	r2, [r4, #20]
 80192b0:	60a2      	str	r2, [r4, #8]
 80192b2:	e7f4      	b.n	801929e <__swsetup_r+0x8e>
 80192b4:	2000      	movs	r0, #0
 80192b6:	e7f7      	b.n	80192a8 <__swsetup_r+0x98>
 80192b8:	2000093c 	.word	0x2000093c

080192bc <memcmp>:
 80192bc:	b510      	push	{r4, lr}
 80192be:	3901      	subs	r1, #1
 80192c0:	4402      	add	r2, r0
 80192c2:	4290      	cmp	r0, r2
 80192c4:	d101      	bne.n	80192ca <memcmp+0xe>
 80192c6:	2000      	movs	r0, #0
 80192c8:	e005      	b.n	80192d6 <memcmp+0x1a>
 80192ca:	7803      	ldrb	r3, [r0, #0]
 80192cc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80192d0:	42a3      	cmp	r3, r4
 80192d2:	d001      	beq.n	80192d8 <memcmp+0x1c>
 80192d4:	1b18      	subs	r0, r3, r4
 80192d6:	bd10      	pop	{r4, pc}
 80192d8:	3001      	adds	r0, #1
 80192da:	e7f2      	b.n	80192c2 <memcmp+0x6>

080192dc <memmove>:
 80192dc:	4288      	cmp	r0, r1
 80192de:	b510      	push	{r4, lr}
 80192e0:	eb01 0402 	add.w	r4, r1, r2
 80192e4:	d902      	bls.n	80192ec <memmove+0x10>
 80192e6:	4284      	cmp	r4, r0
 80192e8:	4623      	mov	r3, r4
 80192ea:	d807      	bhi.n	80192fc <memmove+0x20>
 80192ec:	1e43      	subs	r3, r0, #1
 80192ee:	42a1      	cmp	r1, r4
 80192f0:	d008      	beq.n	8019304 <memmove+0x28>
 80192f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80192f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80192fa:	e7f8      	b.n	80192ee <memmove+0x12>
 80192fc:	4402      	add	r2, r0
 80192fe:	4601      	mov	r1, r0
 8019300:	428a      	cmp	r2, r1
 8019302:	d100      	bne.n	8019306 <memmove+0x2a>
 8019304:	bd10      	pop	{r4, pc}
 8019306:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801930a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801930e:	e7f7      	b.n	8019300 <memmove+0x24>

08019310 <memset>:
 8019310:	4402      	add	r2, r0
 8019312:	4603      	mov	r3, r0
 8019314:	4293      	cmp	r3, r2
 8019316:	d100      	bne.n	801931a <memset+0xa>
 8019318:	4770      	bx	lr
 801931a:	f803 1b01 	strb.w	r1, [r3], #1
 801931e:	e7f9      	b.n	8019314 <memset+0x4>

08019320 <strchr>:
 8019320:	b2c9      	uxtb	r1, r1
 8019322:	4603      	mov	r3, r0
 8019324:	4618      	mov	r0, r3
 8019326:	f813 2b01 	ldrb.w	r2, [r3], #1
 801932a:	b112      	cbz	r2, 8019332 <strchr+0x12>
 801932c:	428a      	cmp	r2, r1
 801932e:	d1f9      	bne.n	8019324 <strchr+0x4>
 8019330:	4770      	bx	lr
 8019332:	2900      	cmp	r1, #0
 8019334:	bf18      	it	ne
 8019336:	2000      	movne	r0, #0
 8019338:	4770      	bx	lr

0801933a <strncmp>:
 801933a:	b510      	push	{r4, lr}
 801933c:	b16a      	cbz	r2, 801935a <strncmp+0x20>
 801933e:	3901      	subs	r1, #1
 8019340:	1884      	adds	r4, r0, r2
 8019342:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019346:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801934a:	429a      	cmp	r2, r3
 801934c:	d103      	bne.n	8019356 <strncmp+0x1c>
 801934e:	42a0      	cmp	r0, r4
 8019350:	d001      	beq.n	8019356 <strncmp+0x1c>
 8019352:	2a00      	cmp	r2, #0
 8019354:	d1f5      	bne.n	8019342 <strncmp+0x8>
 8019356:	1ad0      	subs	r0, r2, r3
 8019358:	bd10      	pop	{r4, pc}
 801935a:	4610      	mov	r0, r2
 801935c:	e7fc      	b.n	8019358 <strncmp+0x1e>

0801935e <strstr>:
 801935e:	780a      	ldrb	r2, [r1, #0]
 8019360:	b570      	push	{r4, r5, r6, lr}
 8019362:	b96a      	cbnz	r2, 8019380 <strstr+0x22>
 8019364:	bd70      	pop	{r4, r5, r6, pc}
 8019366:	429a      	cmp	r2, r3
 8019368:	d109      	bne.n	801937e <strstr+0x20>
 801936a:	460c      	mov	r4, r1
 801936c:	4605      	mov	r5, r0
 801936e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8019372:	2b00      	cmp	r3, #0
 8019374:	d0f6      	beq.n	8019364 <strstr+0x6>
 8019376:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801937a:	429e      	cmp	r6, r3
 801937c:	d0f7      	beq.n	801936e <strstr+0x10>
 801937e:	3001      	adds	r0, #1
 8019380:	7803      	ldrb	r3, [r0, #0]
 8019382:	2b00      	cmp	r3, #0
 8019384:	d1ef      	bne.n	8019366 <strstr+0x8>
 8019386:	4618      	mov	r0, r3
 8019388:	e7ec      	b.n	8019364 <strstr+0x6>
	...

0801938c <_close_r>:
 801938c:	b538      	push	{r3, r4, r5, lr}
 801938e:	4d06      	ldr	r5, [pc, #24]	@ (80193a8 <_close_r+0x1c>)
 8019390:	2300      	movs	r3, #0
 8019392:	4604      	mov	r4, r0
 8019394:	4608      	mov	r0, r1
 8019396:	602b      	str	r3, [r5, #0]
 8019398:	f7e9 f840 	bl	800241c <_close>
 801939c:	1c43      	adds	r3, r0, #1
 801939e:	d102      	bne.n	80193a6 <_close_r+0x1a>
 80193a0:	682b      	ldr	r3, [r5, #0]
 80193a2:	b103      	cbz	r3, 80193a6 <_close_r+0x1a>
 80193a4:	6023      	str	r3, [r4, #0]
 80193a6:	bd38      	pop	{r3, r4, r5, pc}
 80193a8:	2000bb4c 	.word	0x2000bb4c

080193ac <_lseek_r>:
 80193ac:	b538      	push	{r3, r4, r5, lr}
 80193ae:	4d07      	ldr	r5, [pc, #28]	@ (80193cc <_lseek_r+0x20>)
 80193b0:	4604      	mov	r4, r0
 80193b2:	4608      	mov	r0, r1
 80193b4:	4611      	mov	r1, r2
 80193b6:	2200      	movs	r2, #0
 80193b8:	602a      	str	r2, [r5, #0]
 80193ba:	461a      	mov	r2, r3
 80193bc:	f7e9 f855 	bl	800246a <_lseek>
 80193c0:	1c43      	adds	r3, r0, #1
 80193c2:	d102      	bne.n	80193ca <_lseek_r+0x1e>
 80193c4:	682b      	ldr	r3, [r5, #0]
 80193c6:	b103      	cbz	r3, 80193ca <_lseek_r+0x1e>
 80193c8:	6023      	str	r3, [r4, #0]
 80193ca:	bd38      	pop	{r3, r4, r5, pc}
 80193cc:	2000bb4c 	.word	0x2000bb4c

080193d0 <_read_r>:
 80193d0:	b538      	push	{r3, r4, r5, lr}
 80193d2:	4d07      	ldr	r5, [pc, #28]	@ (80193f0 <_read_r+0x20>)
 80193d4:	4604      	mov	r4, r0
 80193d6:	4608      	mov	r0, r1
 80193d8:	4611      	mov	r1, r2
 80193da:	2200      	movs	r2, #0
 80193dc:	602a      	str	r2, [r5, #0]
 80193de:	461a      	mov	r2, r3
 80193e0:	f7e8 ffe3 	bl	80023aa <_read>
 80193e4:	1c43      	adds	r3, r0, #1
 80193e6:	d102      	bne.n	80193ee <_read_r+0x1e>
 80193e8:	682b      	ldr	r3, [r5, #0]
 80193ea:	b103      	cbz	r3, 80193ee <_read_r+0x1e>
 80193ec:	6023      	str	r3, [r4, #0]
 80193ee:	bd38      	pop	{r3, r4, r5, pc}
 80193f0:	2000bb4c 	.word	0x2000bb4c

080193f4 <_sbrk_r>:
 80193f4:	b538      	push	{r3, r4, r5, lr}
 80193f6:	4d06      	ldr	r5, [pc, #24]	@ (8019410 <_sbrk_r+0x1c>)
 80193f8:	2300      	movs	r3, #0
 80193fa:	4604      	mov	r4, r0
 80193fc:	4608      	mov	r0, r1
 80193fe:	602b      	str	r3, [r5, #0]
 8019400:	f7e9 f840 	bl	8002484 <_sbrk>
 8019404:	1c43      	adds	r3, r0, #1
 8019406:	d102      	bne.n	801940e <_sbrk_r+0x1a>
 8019408:	682b      	ldr	r3, [r5, #0]
 801940a:	b103      	cbz	r3, 801940e <_sbrk_r+0x1a>
 801940c:	6023      	str	r3, [r4, #0]
 801940e:	bd38      	pop	{r3, r4, r5, pc}
 8019410:	2000bb4c 	.word	0x2000bb4c

08019414 <_write_r>:
 8019414:	b538      	push	{r3, r4, r5, lr}
 8019416:	4d07      	ldr	r5, [pc, #28]	@ (8019434 <_write_r+0x20>)
 8019418:	4604      	mov	r4, r0
 801941a:	4608      	mov	r0, r1
 801941c:	4611      	mov	r1, r2
 801941e:	2200      	movs	r2, #0
 8019420:	602a      	str	r2, [r5, #0]
 8019422:	461a      	mov	r2, r3
 8019424:	f7e8 ffde 	bl	80023e4 <_write>
 8019428:	1c43      	adds	r3, r0, #1
 801942a:	d102      	bne.n	8019432 <_write_r+0x1e>
 801942c:	682b      	ldr	r3, [r5, #0]
 801942e:	b103      	cbz	r3, 8019432 <_write_r+0x1e>
 8019430:	6023      	str	r3, [r4, #0]
 8019432:	bd38      	pop	{r3, r4, r5, pc}
 8019434:	2000bb4c 	.word	0x2000bb4c

08019438 <__errno>:
 8019438:	4b01      	ldr	r3, [pc, #4]	@ (8019440 <__errno+0x8>)
 801943a:	6818      	ldr	r0, [r3, #0]
 801943c:	4770      	bx	lr
 801943e:	bf00      	nop
 8019440:	2000093c 	.word	0x2000093c

08019444 <__libc_init_array>:
 8019444:	b570      	push	{r4, r5, r6, lr}
 8019446:	4d0d      	ldr	r5, [pc, #52]	@ (801947c <__libc_init_array+0x38>)
 8019448:	4c0d      	ldr	r4, [pc, #52]	@ (8019480 <__libc_init_array+0x3c>)
 801944a:	1b64      	subs	r4, r4, r5
 801944c:	10a4      	asrs	r4, r4, #2
 801944e:	2600      	movs	r6, #0
 8019450:	42a6      	cmp	r6, r4
 8019452:	d109      	bne.n	8019468 <__libc_init_array+0x24>
 8019454:	4d0b      	ldr	r5, [pc, #44]	@ (8019484 <__libc_init_array+0x40>)
 8019456:	4c0c      	ldr	r4, [pc, #48]	@ (8019488 <__libc_init_array+0x44>)
 8019458:	f001 f9d4 	bl	801a804 <_init>
 801945c:	1b64      	subs	r4, r4, r5
 801945e:	10a4      	asrs	r4, r4, #2
 8019460:	2600      	movs	r6, #0
 8019462:	42a6      	cmp	r6, r4
 8019464:	d105      	bne.n	8019472 <__libc_init_array+0x2e>
 8019466:	bd70      	pop	{r4, r5, r6, pc}
 8019468:	f855 3b04 	ldr.w	r3, [r5], #4
 801946c:	4798      	blx	r3
 801946e:	3601      	adds	r6, #1
 8019470:	e7ee      	b.n	8019450 <__libc_init_array+0xc>
 8019472:	f855 3b04 	ldr.w	r3, [r5], #4
 8019476:	4798      	blx	r3
 8019478:	3601      	adds	r6, #1
 801947a:	e7f2      	b.n	8019462 <__libc_init_array+0x1e>
 801947c:	0801c130 	.word	0x0801c130
 8019480:	0801c130 	.word	0x0801c130
 8019484:	0801c130 	.word	0x0801c130
 8019488:	0801c140 	.word	0x0801c140

0801948c <__retarget_lock_init_recursive>:
 801948c:	4770      	bx	lr

0801948e <__retarget_lock_acquire_recursive>:
 801948e:	4770      	bx	lr

08019490 <__retarget_lock_release_recursive>:
 8019490:	4770      	bx	lr

08019492 <strcpy>:
 8019492:	4603      	mov	r3, r0
 8019494:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019498:	f803 2b01 	strb.w	r2, [r3], #1
 801949c:	2a00      	cmp	r2, #0
 801949e:	d1f9      	bne.n	8019494 <strcpy+0x2>
 80194a0:	4770      	bx	lr

080194a2 <memcpy>:
 80194a2:	440a      	add	r2, r1
 80194a4:	4291      	cmp	r1, r2
 80194a6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80194aa:	d100      	bne.n	80194ae <memcpy+0xc>
 80194ac:	4770      	bx	lr
 80194ae:	b510      	push	{r4, lr}
 80194b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80194b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80194b8:	4291      	cmp	r1, r2
 80194ba:	d1f9      	bne.n	80194b0 <memcpy+0xe>
 80194bc:	bd10      	pop	{r4, pc}
	...

080194c0 <__assert_func>:
 80194c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80194c2:	4614      	mov	r4, r2
 80194c4:	461a      	mov	r2, r3
 80194c6:	4b09      	ldr	r3, [pc, #36]	@ (80194ec <__assert_func+0x2c>)
 80194c8:	681b      	ldr	r3, [r3, #0]
 80194ca:	4605      	mov	r5, r0
 80194cc:	68d8      	ldr	r0, [r3, #12]
 80194ce:	b954      	cbnz	r4, 80194e6 <__assert_func+0x26>
 80194d0:	4b07      	ldr	r3, [pc, #28]	@ (80194f0 <__assert_func+0x30>)
 80194d2:	461c      	mov	r4, r3
 80194d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80194d8:	9100      	str	r1, [sp, #0]
 80194da:	462b      	mov	r3, r5
 80194dc:	4905      	ldr	r1, [pc, #20]	@ (80194f4 <__assert_func+0x34>)
 80194de:	f000 fd3f 	bl	8019f60 <fiprintf>
 80194e2:	f000 fdd3 	bl	801a08c <abort>
 80194e6:	4b04      	ldr	r3, [pc, #16]	@ (80194f8 <__assert_func+0x38>)
 80194e8:	e7f4      	b.n	80194d4 <__assert_func+0x14>
 80194ea:	bf00      	nop
 80194ec:	2000093c 	.word	0x2000093c
 80194f0:	0801c07d 	.word	0x0801c07d
 80194f4:	0801c04f 	.word	0x0801c04f
 80194f8:	0801c042 	.word	0x0801c042

080194fc <__env_lock>:
 80194fc:	4801      	ldr	r0, [pc, #4]	@ (8019504 <__env_lock+0x8>)
 80194fe:	f7ff bfc6 	b.w	801948e <__retarget_lock_acquire_recursive>
 8019502:	bf00      	nop
 8019504:	2000bb50 	.word	0x2000bb50

08019508 <__env_unlock>:
 8019508:	4801      	ldr	r0, [pc, #4]	@ (8019510 <__env_unlock+0x8>)
 801950a:	f7ff bfc1 	b.w	8019490 <__retarget_lock_release_recursive>
 801950e:	bf00      	nop
 8019510:	2000bb50 	.word	0x2000bb50

08019514 <_free_r>:
 8019514:	b538      	push	{r3, r4, r5, lr}
 8019516:	4605      	mov	r5, r0
 8019518:	2900      	cmp	r1, #0
 801951a:	d041      	beq.n	80195a0 <_free_r+0x8c>
 801951c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019520:	1f0c      	subs	r4, r1, #4
 8019522:	2b00      	cmp	r3, #0
 8019524:	bfb8      	it	lt
 8019526:	18e4      	addlt	r4, r4, r3
 8019528:	f7ff fb30 	bl	8018b8c <__malloc_lock>
 801952c:	4a1d      	ldr	r2, [pc, #116]	@ (80195a4 <_free_r+0x90>)
 801952e:	6813      	ldr	r3, [r2, #0]
 8019530:	b933      	cbnz	r3, 8019540 <_free_r+0x2c>
 8019532:	6063      	str	r3, [r4, #4]
 8019534:	6014      	str	r4, [r2, #0]
 8019536:	4628      	mov	r0, r5
 8019538:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801953c:	f7ff bb2c 	b.w	8018b98 <__malloc_unlock>
 8019540:	42a3      	cmp	r3, r4
 8019542:	d908      	bls.n	8019556 <_free_r+0x42>
 8019544:	6820      	ldr	r0, [r4, #0]
 8019546:	1821      	adds	r1, r4, r0
 8019548:	428b      	cmp	r3, r1
 801954a:	bf01      	itttt	eq
 801954c:	6819      	ldreq	r1, [r3, #0]
 801954e:	685b      	ldreq	r3, [r3, #4]
 8019550:	1809      	addeq	r1, r1, r0
 8019552:	6021      	streq	r1, [r4, #0]
 8019554:	e7ed      	b.n	8019532 <_free_r+0x1e>
 8019556:	461a      	mov	r2, r3
 8019558:	685b      	ldr	r3, [r3, #4]
 801955a:	b10b      	cbz	r3, 8019560 <_free_r+0x4c>
 801955c:	42a3      	cmp	r3, r4
 801955e:	d9fa      	bls.n	8019556 <_free_r+0x42>
 8019560:	6811      	ldr	r1, [r2, #0]
 8019562:	1850      	adds	r0, r2, r1
 8019564:	42a0      	cmp	r0, r4
 8019566:	d10b      	bne.n	8019580 <_free_r+0x6c>
 8019568:	6820      	ldr	r0, [r4, #0]
 801956a:	4401      	add	r1, r0
 801956c:	1850      	adds	r0, r2, r1
 801956e:	4283      	cmp	r3, r0
 8019570:	6011      	str	r1, [r2, #0]
 8019572:	d1e0      	bne.n	8019536 <_free_r+0x22>
 8019574:	6818      	ldr	r0, [r3, #0]
 8019576:	685b      	ldr	r3, [r3, #4]
 8019578:	6053      	str	r3, [r2, #4]
 801957a:	4408      	add	r0, r1
 801957c:	6010      	str	r0, [r2, #0]
 801957e:	e7da      	b.n	8019536 <_free_r+0x22>
 8019580:	d902      	bls.n	8019588 <_free_r+0x74>
 8019582:	230c      	movs	r3, #12
 8019584:	602b      	str	r3, [r5, #0]
 8019586:	e7d6      	b.n	8019536 <_free_r+0x22>
 8019588:	6820      	ldr	r0, [r4, #0]
 801958a:	1821      	adds	r1, r4, r0
 801958c:	428b      	cmp	r3, r1
 801958e:	bf04      	itt	eq
 8019590:	6819      	ldreq	r1, [r3, #0]
 8019592:	685b      	ldreq	r3, [r3, #4]
 8019594:	6063      	str	r3, [r4, #4]
 8019596:	bf04      	itt	eq
 8019598:	1809      	addeq	r1, r1, r0
 801959a:	6021      	streq	r1, [r4, #0]
 801959c:	6054      	str	r4, [r2, #4]
 801959e:	e7ca      	b.n	8019536 <_free_r+0x22>
 80195a0:	bd38      	pop	{r3, r4, r5, pc}
 80195a2:	bf00      	nop
 80195a4:	2000ba0c 	.word	0x2000ba0c

080195a8 <_malloc_usable_size_r>:
 80195a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80195ac:	1f18      	subs	r0, r3, #4
 80195ae:	2b00      	cmp	r3, #0
 80195b0:	bfbc      	itt	lt
 80195b2:	580b      	ldrlt	r3, [r1, r0]
 80195b4:	18c0      	addlt	r0, r0, r3
 80195b6:	4770      	bx	lr

080195b8 <__ssputs_r>:
 80195b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80195bc:	688e      	ldr	r6, [r1, #8]
 80195be:	461f      	mov	r7, r3
 80195c0:	42be      	cmp	r6, r7
 80195c2:	680b      	ldr	r3, [r1, #0]
 80195c4:	4682      	mov	sl, r0
 80195c6:	460c      	mov	r4, r1
 80195c8:	4690      	mov	r8, r2
 80195ca:	d82d      	bhi.n	8019628 <__ssputs_r+0x70>
 80195cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80195d0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80195d4:	d026      	beq.n	8019624 <__ssputs_r+0x6c>
 80195d6:	6965      	ldr	r5, [r4, #20]
 80195d8:	6909      	ldr	r1, [r1, #16]
 80195da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80195de:	eba3 0901 	sub.w	r9, r3, r1
 80195e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80195e6:	1c7b      	adds	r3, r7, #1
 80195e8:	444b      	add	r3, r9
 80195ea:	106d      	asrs	r5, r5, #1
 80195ec:	429d      	cmp	r5, r3
 80195ee:	bf38      	it	cc
 80195f0:	461d      	movcc	r5, r3
 80195f2:	0553      	lsls	r3, r2, #21
 80195f4:	d527      	bpl.n	8019646 <__ssputs_r+0x8e>
 80195f6:	4629      	mov	r1, r5
 80195f8:	f7ff fa48 	bl	8018a8c <_malloc_r>
 80195fc:	4606      	mov	r6, r0
 80195fe:	b360      	cbz	r0, 801965a <__ssputs_r+0xa2>
 8019600:	6921      	ldr	r1, [r4, #16]
 8019602:	464a      	mov	r2, r9
 8019604:	f7ff ff4d 	bl	80194a2 <memcpy>
 8019608:	89a3      	ldrh	r3, [r4, #12]
 801960a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801960e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019612:	81a3      	strh	r3, [r4, #12]
 8019614:	6126      	str	r6, [r4, #16]
 8019616:	6165      	str	r5, [r4, #20]
 8019618:	444e      	add	r6, r9
 801961a:	eba5 0509 	sub.w	r5, r5, r9
 801961e:	6026      	str	r6, [r4, #0]
 8019620:	60a5      	str	r5, [r4, #8]
 8019622:	463e      	mov	r6, r7
 8019624:	42be      	cmp	r6, r7
 8019626:	d900      	bls.n	801962a <__ssputs_r+0x72>
 8019628:	463e      	mov	r6, r7
 801962a:	6820      	ldr	r0, [r4, #0]
 801962c:	4632      	mov	r2, r6
 801962e:	4641      	mov	r1, r8
 8019630:	f7ff fe54 	bl	80192dc <memmove>
 8019634:	68a3      	ldr	r3, [r4, #8]
 8019636:	1b9b      	subs	r3, r3, r6
 8019638:	60a3      	str	r3, [r4, #8]
 801963a:	6823      	ldr	r3, [r4, #0]
 801963c:	4433      	add	r3, r6
 801963e:	6023      	str	r3, [r4, #0]
 8019640:	2000      	movs	r0, #0
 8019642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019646:	462a      	mov	r2, r5
 8019648:	f7ff fb20 	bl	8018c8c <_realloc_r>
 801964c:	4606      	mov	r6, r0
 801964e:	2800      	cmp	r0, #0
 8019650:	d1e0      	bne.n	8019614 <__ssputs_r+0x5c>
 8019652:	6921      	ldr	r1, [r4, #16]
 8019654:	4650      	mov	r0, sl
 8019656:	f7ff ff5d 	bl	8019514 <_free_r>
 801965a:	230c      	movs	r3, #12
 801965c:	f8ca 3000 	str.w	r3, [sl]
 8019660:	89a3      	ldrh	r3, [r4, #12]
 8019662:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019666:	81a3      	strh	r3, [r4, #12]
 8019668:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801966c:	e7e9      	b.n	8019642 <__ssputs_r+0x8a>
	...

08019670 <_svfiprintf_r>:
 8019670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019674:	4698      	mov	r8, r3
 8019676:	898b      	ldrh	r3, [r1, #12]
 8019678:	061b      	lsls	r3, r3, #24
 801967a:	b09d      	sub	sp, #116	@ 0x74
 801967c:	4607      	mov	r7, r0
 801967e:	460d      	mov	r5, r1
 8019680:	4614      	mov	r4, r2
 8019682:	d510      	bpl.n	80196a6 <_svfiprintf_r+0x36>
 8019684:	690b      	ldr	r3, [r1, #16]
 8019686:	b973      	cbnz	r3, 80196a6 <_svfiprintf_r+0x36>
 8019688:	2140      	movs	r1, #64	@ 0x40
 801968a:	f7ff f9ff 	bl	8018a8c <_malloc_r>
 801968e:	6028      	str	r0, [r5, #0]
 8019690:	6128      	str	r0, [r5, #16]
 8019692:	b930      	cbnz	r0, 80196a2 <_svfiprintf_r+0x32>
 8019694:	230c      	movs	r3, #12
 8019696:	603b      	str	r3, [r7, #0]
 8019698:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801969c:	b01d      	add	sp, #116	@ 0x74
 801969e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80196a2:	2340      	movs	r3, #64	@ 0x40
 80196a4:	616b      	str	r3, [r5, #20]
 80196a6:	2300      	movs	r3, #0
 80196a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80196aa:	2320      	movs	r3, #32
 80196ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80196b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80196b4:	2330      	movs	r3, #48	@ 0x30
 80196b6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8019854 <_svfiprintf_r+0x1e4>
 80196ba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80196be:	f04f 0901 	mov.w	r9, #1
 80196c2:	4623      	mov	r3, r4
 80196c4:	469a      	mov	sl, r3
 80196c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80196ca:	b10a      	cbz	r2, 80196d0 <_svfiprintf_r+0x60>
 80196cc:	2a25      	cmp	r2, #37	@ 0x25
 80196ce:	d1f9      	bne.n	80196c4 <_svfiprintf_r+0x54>
 80196d0:	ebba 0b04 	subs.w	fp, sl, r4
 80196d4:	d00b      	beq.n	80196ee <_svfiprintf_r+0x7e>
 80196d6:	465b      	mov	r3, fp
 80196d8:	4622      	mov	r2, r4
 80196da:	4629      	mov	r1, r5
 80196dc:	4638      	mov	r0, r7
 80196de:	f7ff ff6b 	bl	80195b8 <__ssputs_r>
 80196e2:	3001      	adds	r0, #1
 80196e4:	f000 80a7 	beq.w	8019836 <_svfiprintf_r+0x1c6>
 80196e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80196ea:	445a      	add	r2, fp
 80196ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80196ee:	f89a 3000 	ldrb.w	r3, [sl]
 80196f2:	2b00      	cmp	r3, #0
 80196f4:	f000 809f 	beq.w	8019836 <_svfiprintf_r+0x1c6>
 80196f8:	2300      	movs	r3, #0
 80196fa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80196fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019702:	f10a 0a01 	add.w	sl, sl, #1
 8019706:	9304      	str	r3, [sp, #16]
 8019708:	9307      	str	r3, [sp, #28]
 801970a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801970e:	931a      	str	r3, [sp, #104]	@ 0x68
 8019710:	4654      	mov	r4, sl
 8019712:	2205      	movs	r2, #5
 8019714:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019718:	484e      	ldr	r0, [pc, #312]	@ (8019854 <_svfiprintf_r+0x1e4>)
 801971a:	f7e6 fd99 	bl	8000250 <memchr>
 801971e:	9a04      	ldr	r2, [sp, #16]
 8019720:	b9d8      	cbnz	r0, 801975a <_svfiprintf_r+0xea>
 8019722:	06d0      	lsls	r0, r2, #27
 8019724:	bf44      	itt	mi
 8019726:	2320      	movmi	r3, #32
 8019728:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801972c:	0711      	lsls	r1, r2, #28
 801972e:	bf44      	itt	mi
 8019730:	232b      	movmi	r3, #43	@ 0x2b
 8019732:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019736:	f89a 3000 	ldrb.w	r3, [sl]
 801973a:	2b2a      	cmp	r3, #42	@ 0x2a
 801973c:	d015      	beq.n	801976a <_svfiprintf_r+0xfa>
 801973e:	9a07      	ldr	r2, [sp, #28]
 8019740:	4654      	mov	r4, sl
 8019742:	2000      	movs	r0, #0
 8019744:	f04f 0c0a 	mov.w	ip, #10
 8019748:	4621      	mov	r1, r4
 801974a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801974e:	3b30      	subs	r3, #48	@ 0x30
 8019750:	2b09      	cmp	r3, #9
 8019752:	d94b      	bls.n	80197ec <_svfiprintf_r+0x17c>
 8019754:	b1b0      	cbz	r0, 8019784 <_svfiprintf_r+0x114>
 8019756:	9207      	str	r2, [sp, #28]
 8019758:	e014      	b.n	8019784 <_svfiprintf_r+0x114>
 801975a:	eba0 0308 	sub.w	r3, r0, r8
 801975e:	fa09 f303 	lsl.w	r3, r9, r3
 8019762:	4313      	orrs	r3, r2
 8019764:	9304      	str	r3, [sp, #16]
 8019766:	46a2      	mov	sl, r4
 8019768:	e7d2      	b.n	8019710 <_svfiprintf_r+0xa0>
 801976a:	9b03      	ldr	r3, [sp, #12]
 801976c:	1d19      	adds	r1, r3, #4
 801976e:	681b      	ldr	r3, [r3, #0]
 8019770:	9103      	str	r1, [sp, #12]
 8019772:	2b00      	cmp	r3, #0
 8019774:	bfbb      	ittet	lt
 8019776:	425b      	neglt	r3, r3
 8019778:	f042 0202 	orrlt.w	r2, r2, #2
 801977c:	9307      	strge	r3, [sp, #28]
 801977e:	9307      	strlt	r3, [sp, #28]
 8019780:	bfb8      	it	lt
 8019782:	9204      	strlt	r2, [sp, #16]
 8019784:	7823      	ldrb	r3, [r4, #0]
 8019786:	2b2e      	cmp	r3, #46	@ 0x2e
 8019788:	d10a      	bne.n	80197a0 <_svfiprintf_r+0x130>
 801978a:	7863      	ldrb	r3, [r4, #1]
 801978c:	2b2a      	cmp	r3, #42	@ 0x2a
 801978e:	d132      	bne.n	80197f6 <_svfiprintf_r+0x186>
 8019790:	9b03      	ldr	r3, [sp, #12]
 8019792:	1d1a      	adds	r2, r3, #4
 8019794:	681b      	ldr	r3, [r3, #0]
 8019796:	9203      	str	r2, [sp, #12]
 8019798:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801979c:	3402      	adds	r4, #2
 801979e:	9305      	str	r3, [sp, #20]
 80197a0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8019864 <_svfiprintf_r+0x1f4>
 80197a4:	7821      	ldrb	r1, [r4, #0]
 80197a6:	2203      	movs	r2, #3
 80197a8:	4650      	mov	r0, sl
 80197aa:	f7e6 fd51 	bl	8000250 <memchr>
 80197ae:	b138      	cbz	r0, 80197c0 <_svfiprintf_r+0x150>
 80197b0:	9b04      	ldr	r3, [sp, #16]
 80197b2:	eba0 000a 	sub.w	r0, r0, sl
 80197b6:	2240      	movs	r2, #64	@ 0x40
 80197b8:	4082      	lsls	r2, r0
 80197ba:	4313      	orrs	r3, r2
 80197bc:	3401      	adds	r4, #1
 80197be:	9304      	str	r3, [sp, #16]
 80197c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80197c4:	4824      	ldr	r0, [pc, #144]	@ (8019858 <_svfiprintf_r+0x1e8>)
 80197c6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80197ca:	2206      	movs	r2, #6
 80197cc:	f7e6 fd40 	bl	8000250 <memchr>
 80197d0:	2800      	cmp	r0, #0
 80197d2:	d036      	beq.n	8019842 <_svfiprintf_r+0x1d2>
 80197d4:	4b21      	ldr	r3, [pc, #132]	@ (801985c <_svfiprintf_r+0x1ec>)
 80197d6:	bb1b      	cbnz	r3, 8019820 <_svfiprintf_r+0x1b0>
 80197d8:	9b03      	ldr	r3, [sp, #12]
 80197da:	3307      	adds	r3, #7
 80197dc:	f023 0307 	bic.w	r3, r3, #7
 80197e0:	3308      	adds	r3, #8
 80197e2:	9303      	str	r3, [sp, #12]
 80197e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80197e6:	4433      	add	r3, r6
 80197e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80197ea:	e76a      	b.n	80196c2 <_svfiprintf_r+0x52>
 80197ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80197f0:	460c      	mov	r4, r1
 80197f2:	2001      	movs	r0, #1
 80197f4:	e7a8      	b.n	8019748 <_svfiprintf_r+0xd8>
 80197f6:	2300      	movs	r3, #0
 80197f8:	3401      	adds	r4, #1
 80197fa:	9305      	str	r3, [sp, #20]
 80197fc:	4619      	mov	r1, r3
 80197fe:	f04f 0c0a 	mov.w	ip, #10
 8019802:	4620      	mov	r0, r4
 8019804:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019808:	3a30      	subs	r2, #48	@ 0x30
 801980a:	2a09      	cmp	r2, #9
 801980c:	d903      	bls.n	8019816 <_svfiprintf_r+0x1a6>
 801980e:	2b00      	cmp	r3, #0
 8019810:	d0c6      	beq.n	80197a0 <_svfiprintf_r+0x130>
 8019812:	9105      	str	r1, [sp, #20]
 8019814:	e7c4      	b.n	80197a0 <_svfiprintf_r+0x130>
 8019816:	fb0c 2101 	mla	r1, ip, r1, r2
 801981a:	4604      	mov	r4, r0
 801981c:	2301      	movs	r3, #1
 801981e:	e7f0      	b.n	8019802 <_svfiprintf_r+0x192>
 8019820:	ab03      	add	r3, sp, #12
 8019822:	9300      	str	r3, [sp, #0]
 8019824:	462a      	mov	r2, r5
 8019826:	4b0e      	ldr	r3, [pc, #56]	@ (8019860 <_svfiprintf_r+0x1f0>)
 8019828:	a904      	add	r1, sp, #16
 801982a:	4638      	mov	r0, r7
 801982c:	f3af 8000 	nop.w
 8019830:	1c42      	adds	r2, r0, #1
 8019832:	4606      	mov	r6, r0
 8019834:	d1d6      	bne.n	80197e4 <_svfiprintf_r+0x174>
 8019836:	89ab      	ldrh	r3, [r5, #12]
 8019838:	065b      	lsls	r3, r3, #25
 801983a:	f53f af2d 	bmi.w	8019698 <_svfiprintf_r+0x28>
 801983e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019840:	e72c      	b.n	801969c <_svfiprintf_r+0x2c>
 8019842:	ab03      	add	r3, sp, #12
 8019844:	9300      	str	r3, [sp, #0]
 8019846:	462a      	mov	r2, r5
 8019848:	4b05      	ldr	r3, [pc, #20]	@ (8019860 <_svfiprintf_r+0x1f0>)
 801984a:	a904      	add	r1, sp, #16
 801984c:	4638      	mov	r0, r7
 801984e:	f000 f9bb 	bl	8019bc8 <_printf_i>
 8019852:	e7ed      	b.n	8019830 <_svfiprintf_r+0x1c0>
 8019854:	0801c07e 	.word	0x0801c07e
 8019858:	0801c088 	.word	0x0801c088
 801985c:	00000000 	.word	0x00000000
 8019860:	080195b9 	.word	0x080195b9
 8019864:	0801c084 	.word	0x0801c084

08019868 <__sfputc_r>:
 8019868:	6893      	ldr	r3, [r2, #8]
 801986a:	3b01      	subs	r3, #1
 801986c:	2b00      	cmp	r3, #0
 801986e:	b410      	push	{r4}
 8019870:	6093      	str	r3, [r2, #8]
 8019872:	da08      	bge.n	8019886 <__sfputc_r+0x1e>
 8019874:	6994      	ldr	r4, [r2, #24]
 8019876:	42a3      	cmp	r3, r4
 8019878:	db01      	blt.n	801987e <__sfputc_r+0x16>
 801987a:	290a      	cmp	r1, #10
 801987c:	d103      	bne.n	8019886 <__sfputc_r+0x1e>
 801987e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019882:	f7ff bc87 	b.w	8019194 <__swbuf_r>
 8019886:	6813      	ldr	r3, [r2, #0]
 8019888:	1c58      	adds	r0, r3, #1
 801988a:	6010      	str	r0, [r2, #0]
 801988c:	7019      	strb	r1, [r3, #0]
 801988e:	4608      	mov	r0, r1
 8019890:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019894:	4770      	bx	lr

08019896 <__sfputs_r>:
 8019896:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019898:	4606      	mov	r6, r0
 801989a:	460f      	mov	r7, r1
 801989c:	4614      	mov	r4, r2
 801989e:	18d5      	adds	r5, r2, r3
 80198a0:	42ac      	cmp	r4, r5
 80198a2:	d101      	bne.n	80198a8 <__sfputs_r+0x12>
 80198a4:	2000      	movs	r0, #0
 80198a6:	e007      	b.n	80198b8 <__sfputs_r+0x22>
 80198a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80198ac:	463a      	mov	r2, r7
 80198ae:	4630      	mov	r0, r6
 80198b0:	f7ff ffda 	bl	8019868 <__sfputc_r>
 80198b4:	1c43      	adds	r3, r0, #1
 80198b6:	d1f3      	bne.n	80198a0 <__sfputs_r+0xa>
 80198b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080198bc <_vfiprintf_r>:
 80198bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198c0:	460d      	mov	r5, r1
 80198c2:	b09d      	sub	sp, #116	@ 0x74
 80198c4:	4614      	mov	r4, r2
 80198c6:	4698      	mov	r8, r3
 80198c8:	4606      	mov	r6, r0
 80198ca:	b118      	cbz	r0, 80198d4 <_vfiprintf_r+0x18>
 80198cc:	6a03      	ldr	r3, [r0, #32]
 80198ce:	b90b      	cbnz	r3, 80198d4 <_vfiprintf_r+0x18>
 80198d0:	f7ff fb0e 	bl	8018ef0 <__sinit>
 80198d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80198d6:	07d9      	lsls	r1, r3, #31
 80198d8:	d405      	bmi.n	80198e6 <_vfiprintf_r+0x2a>
 80198da:	89ab      	ldrh	r3, [r5, #12]
 80198dc:	059a      	lsls	r2, r3, #22
 80198de:	d402      	bmi.n	80198e6 <_vfiprintf_r+0x2a>
 80198e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80198e2:	f7ff fdd4 	bl	801948e <__retarget_lock_acquire_recursive>
 80198e6:	89ab      	ldrh	r3, [r5, #12]
 80198e8:	071b      	lsls	r3, r3, #28
 80198ea:	d501      	bpl.n	80198f0 <_vfiprintf_r+0x34>
 80198ec:	692b      	ldr	r3, [r5, #16]
 80198ee:	b99b      	cbnz	r3, 8019918 <_vfiprintf_r+0x5c>
 80198f0:	4629      	mov	r1, r5
 80198f2:	4630      	mov	r0, r6
 80198f4:	f7ff fc8c 	bl	8019210 <__swsetup_r>
 80198f8:	b170      	cbz	r0, 8019918 <_vfiprintf_r+0x5c>
 80198fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80198fc:	07dc      	lsls	r4, r3, #31
 80198fe:	d504      	bpl.n	801990a <_vfiprintf_r+0x4e>
 8019900:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019904:	b01d      	add	sp, #116	@ 0x74
 8019906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801990a:	89ab      	ldrh	r3, [r5, #12]
 801990c:	0598      	lsls	r0, r3, #22
 801990e:	d4f7      	bmi.n	8019900 <_vfiprintf_r+0x44>
 8019910:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019912:	f7ff fdbd 	bl	8019490 <__retarget_lock_release_recursive>
 8019916:	e7f3      	b.n	8019900 <_vfiprintf_r+0x44>
 8019918:	2300      	movs	r3, #0
 801991a:	9309      	str	r3, [sp, #36]	@ 0x24
 801991c:	2320      	movs	r3, #32
 801991e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8019922:	f8cd 800c 	str.w	r8, [sp, #12]
 8019926:	2330      	movs	r3, #48	@ 0x30
 8019928:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8019ad8 <_vfiprintf_r+0x21c>
 801992c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019930:	f04f 0901 	mov.w	r9, #1
 8019934:	4623      	mov	r3, r4
 8019936:	469a      	mov	sl, r3
 8019938:	f813 2b01 	ldrb.w	r2, [r3], #1
 801993c:	b10a      	cbz	r2, 8019942 <_vfiprintf_r+0x86>
 801993e:	2a25      	cmp	r2, #37	@ 0x25
 8019940:	d1f9      	bne.n	8019936 <_vfiprintf_r+0x7a>
 8019942:	ebba 0b04 	subs.w	fp, sl, r4
 8019946:	d00b      	beq.n	8019960 <_vfiprintf_r+0xa4>
 8019948:	465b      	mov	r3, fp
 801994a:	4622      	mov	r2, r4
 801994c:	4629      	mov	r1, r5
 801994e:	4630      	mov	r0, r6
 8019950:	f7ff ffa1 	bl	8019896 <__sfputs_r>
 8019954:	3001      	adds	r0, #1
 8019956:	f000 80a7 	beq.w	8019aa8 <_vfiprintf_r+0x1ec>
 801995a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801995c:	445a      	add	r2, fp
 801995e:	9209      	str	r2, [sp, #36]	@ 0x24
 8019960:	f89a 3000 	ldrb.w	r3, [sl]
 8019964:	2b00      	cmp	r3, #0
 8019966:	f000 809f 	beq.w	8019aa8 <_vfiprintf_r+0x1ec>
 801996a:	2300      	movs	r3, #0
 801996c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019970:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019974:	f10a 0a01 	add.w	sl, sl, #1
 8019978:	9304      	str	r3, [sp, #16]
 801997a:	9307      	str	r3, [sp, #28]
 801997c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8019980:	931a      	str	r3, [sp, #104]	@ 0x68
 8019982:	4654      	mov	r4, sl
 8019984:	2205      	movs	r2, #5
 8019986:	f814 1b01 	ldrb.w	r1, [r4], #1
 801998a:	4853      	ldr	r0, [pc, #332]	@ (8019ad8 <_vfiprintf_r+0x21c>)
 801998c:	f7e6 fc60 	bl	8000250 <memchr>
 8019990:	9a04      	ldr	r2, [sp, #16]
 8019992:	b9d8      	cbnz	r0, 80199cc <_vfiprintf_r+0x110>
 8019994:	06d1      	lsls	r1, r2, #27
 8019996:	bf44      	itt	mi
 8019998:	2320      	movmi	r3, #32
 801999a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801999e:	0713      	lsls	r3, r2, #28
 80199a0:	bf44      	itt	mi
 80199a2:	232b      	movmi	r3, #43	@ 0x2b
 80199a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80199a8:	f89a 3000 	ldrb.w	r3, [sl]
 80199ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80199ae:	d015      	beq.n	80199dc <_vfiprintf_r+0x120>
 80199b0:	9a07      	ldr	r2, [sp, #28]
 80199b2:	4654      	mov	r4, sl
 80199b4:	2000      	movs	r0, #0
 80199b6:	f04f 0c0a 	mov.w	ip, #10
 80199ba:	4621      	mov	r1, r4
 80199bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80199c0:	3b30      	subs	r3, #48	@ 0x30
 80199c2:	2b09      	cmp	r3, #9
 80199c4:	d94b      	bls.n	8019a5e <_vfiprintf_r+0x1a2>
 80199c6:	b1b0      	cbz	r0, 80199f6 <_vfiprintf_r+0x13a>
 80199c8:	9207      	str	r2, [sp, #28]
 80199ca:	e014      	b.n	80199f6 <_vfiprintf_r+0x13a>
 80199cc:	eba0 0308 	sub.w	r3, r0, r8
 80199d0:	fa09 f303 	lsl.w	r3, r9, r3
 80199d4:	4313      	orrs	r3, r2
 80199d6:	9304      	str	r3, [sp, #16]
 80199d8:	46a2      	mov	sl, r4
 80199da:	e7d2      	b.n	8019982 <_vfiprintf_r+0xc6>
 80199dc:	9b03      	ldr	r3, [sp, #12]
 80199de:	1d19      	adds	r1, r3, #4
 80199e0:	681b      	ldr	r3, [r3, #0]
 80199e2:	9103      	str	r1, [sp, #12]
 80199e4:	2b00      	cmp	r3, #0
 80199e6:	bfbb      	ittet	lt
 80199e8:	425b      	neglt	r3, r3
 80199ea:	f042 0202 	orrlt.w	r2, r2, #2
 80199ee:	9307      	strge	r3, [sp, #28]
 80199f0:	9307      	strlt	r3, [sp, #28]
 80199f2:	bfb8      	it	lt
 80199f4:	9204      	strlt	r2, [sp, #16]
 80199f6:	7823      	ldrb	r3, [r4, #0]
 80199f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80199fa:	d10a      	bne.n	8019a12 <_vfiprintf_r+0x156>
 80199fc:	7863      	ldrb	r3, [r4, #1]
 80199fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8019a00:	d132      	bne.n	8019a68 <_vfiprintf_r+0x1ac>
 8019a02:	9b03      	ldr	r3, [sp, #12]
 8019a04:	1d1a      	adds	r2, r3, #4
 8019a06:	681b      	ldr	r3, [r3, #0]
 8019a08:	9203      	str	r2, [sp, #12]
 8019a0a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019a0e:	3402      	adds	r4, #2
 8019a10:	9305      	str	r3, [sp, #20]
 8019a12:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8019ae8 <_vfiprintf_r+0x22c>
 8019a16:	7821      	ldrb	r1, [r4, #0]
 8019a18:	2203      	movs	r2, #3
 8019a1a:	4650      	mov	r0, sl
 8019a1c:	f7e6 fc18 	bl	8000250 <memchr>
 8019a20:	b138      	cbz	r0, 8019a32 <_vfiprintf_r+0x176>
 8019a22:	9b04      	ldr	r3, [sp, #16]
 8019a24:	eba0 000a 	sub.w	r0, r0, sl
 8019a28:	2240      	movs	r2, #64	@ 0x40
 8019a2a:	4082      	lsls	r2, r0
 8019a2c:	4313      	orrs	r3, r2
 8019a2e:	3401      	adds	r4, #1
 8019a30:	9304      	str	r3, [sp, #16]
 8019a32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019a36:	4829      	ldr	r0, [pc, #164]	@ (8019adc <_vfiprintf_r+0x220>)
 8019a38:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8019a3c:	2206      	movs	r2, #6
 8019a3e:	f7e6 fc07 	bl	8000250 <memchr>
 8019a42:	2800      	cmp	r0, #0
 8019a44:	d03f      	beq.n	8019ac6 <_vfiprintf_r+0x20a>
 8019a46:	4b26      	ldr	r3, [pc, #152]	@ (8019ae0 <_vfiprintf_r+0x224>)
 8019a48:	bb1b      	cbnz	r3, 8019a92 <_vfiprintf_r+0x1d6>
 8019a4a:	9b03      	ldr	r3, [sp, #12]
 8019a4c:	3307      	adds	r3, #7
 8019a4e:	f023 0307 	bic.w	r3, r3, #7
 8019a52:	3308      	adds	r3, #8
 8019a54:	9303      	str	r3, [sp, #12]
 8019a56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019a58:	443b      	add	r3, r7
 8019a5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8019a5c:	e76a      	b.n	8019934 <_vfiprintf_r+0x78>
 8019a5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8019a62:	460c      	mov	r4, r1
 8019a64:	2001      	movs	r0, #1
 8019a66:	e7a8      	b.n	80199ba <_vfiprintf_r+0xfe>
 8019a68:	2300      	movs	r3, #0
 8019a6a:	3401      	adds	r4, #1
 8019a6c:	9305      	str	r3, [sp, #20]
 8019a6e:	4619      	mov	r1, r3
 8019a70:	f04f 0c0a 	mov.w	ip, #10
 8019a74:	4620      	mov	r0, r4
 8019a76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019a7a:	3a30      	subs	r2, #48	@ 0x30
 8019a7c:	2a09      	cmp	r2, #9
 8019a7e:	d903      	bls.n	8019a88 <_vfiprintf_r+0x1cc>
 8019a80:	2b00      	cmp	r3, #0
 8019a82:	d0c6      	beq.n	8019a12 <_vfiprintf_r+0x156>
 8019a84:	9105      	str	r1, [sp, #20]
 8019a86:	e7c4      	b.n	8019a12 <_vfiprintf_r+0x156>
 8019a88:	fb0c 2101 	mla	r1, ip, r1, r2
 8019a8c:	4604      	mov	r4, r0
 8019a8e:	2301      	movs	r3, #1
 8019a90:	e7f0      	b.n	8019a74 <_vfiprintf_r+0x1b8>
 8019a92:	ab03      	add	r3, sp, #12
 8019a94:	9300      	str	r3, [sp, #0]
 8019a96:	462a      	mov	r2, r5
 8019a98:	4b12      	ldr	r3, [pc, #72]	@ (8019ae4 <_vfiprintf_r+0x228>)
 8019a9a:	a904      	add	r1, sp, #16
 8019a9c:	4630      	mov	r0, r6
 8019a9e:	f3af 8000 	nop.w
 8019aa2:	4607      	mov	r7, r0
 8019aa4:	1c78      	adds	r0, r7, #1
 8019aa6:	d1d6      	bne.n	8019a56 <_vfiprintf_r+0x19a>
 8019aa8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019aaa:	07d9      	lsls	r1, r3, #31
 8019aac:	d405      	bmi.n	8019aba <_vfiprintf_r+0x1fe>
 8019aae:	89ab      	ldrh	r3, [r5, #12]
 8019ab0:	059a      	lsls	r2, r3, #22
 8019ab2:	d402      	bmi.n	8019aba <_vfiprintf_r+0x1fe>
 8019ab4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019ab6:	f7ff fceb 	bl	8019490 <__retarget_lock_release_recursive>
 8019aba:	89ab      	ldrh	r3, [r5, #12]
 8019abc:	065b      	lsls	r3, r3, #25
 8019abe:	f53f af1f 	bmi.w	8019900 <_vfiprintf_r+0x44>
 8019ac2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019ac4:	e71e      	b.n	8019904 <_vfiprintf_r+0x48>
 8019ac6:	ab03      	add	r3, sp, #12
 8019ac8:	9300      	str	r3, [sp, #0]
 8019aca:	462a      	mov	r2, r5
 8019acc:	4b05      	ldr	r3, [pc, #20]	@ (8019ae4 <_vfiprintf_r+0x228>)
 8019ace:	a904      	add	r1, sp, #16
 8019ad0:	4630      	mov	r0, r6
 8019ad2:	f000 f879 	bl	8019bc8 <_printf_i>
 8019ad6:	e7e4      	b.n	8019aa2 <_vfiprintf_r+0x1e6>
 8019ad8:	0801c07e 	.word	0x0801c07e
 8019adc:	0801c088 	.word	0x0801c088
 8019ae0:	00000000 	.word	0x00000000
 8019ae4:	08019897 	.word	0x08019897
 8019ae8:	0801c084 	.word	0x0801c084

08019aec <_printf_common>:
 8019aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019af0:	4616      	mov	r6, r2
 8019af2:	4698      	mov	r8, r3
 8019af4:	688a      	ldr	r2, [r1, #8]
 8019af6:	690b      	ldr	r3, [r1, #16]
 8019af8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8019afc:	4293      	cmp	r3, r2
 8019afe:	bfb8      	it	lt
 8019b00:	4613      	movlt	r3, r2
 8019b02:	6033      	str	r3, [r6, #0]
 8019b04:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8019b08:	4607      	mov	r7, r0
 8019b0a:	460c      	mov	r4, r1
 8019b0c:	b10a      	cbz	r2, 8019b12 <_printf_common+0x26>
 8019b0e:	3301      	adds	r3, #1
 8019b10:	6033      	str	r3, [r6, #0]
 8019b12:	6823      	ldr	r3, [r4, #0]
 8019b14:	0699      	lsls	r1, r3, #26
 8019b16:	bf42      	ittt	mi
 8019b18:	6833      	ldrmi	r3, [r6, #0]
 8019b1a:	3302      	addmi	r3, #2
 8019b1c:	6033      	strmi	r3, [r6, #0]
 8019b1e:	6825      	ldr	r5, [r4, #0]
 8019b20:	f015 0506 	ands.w	r5, r5, #6
 8019b24:	d106      	bne.n	8019b34 <_printf_common+0x48>
 8019b26:	f104 0a19 	add.w	sl, r4, #25
 8019b2a:	68e3      	ldr	r3, [r4, #12]
 8019b2c:	6832      	ldr	r2, [r6, #0]
 8019b2e:	1a9b      	subs	r3, r3, r2
 8019b30:	42ab      	cmp	r3, r5
 8019b32:	dc26      	bgt.n	8019b82 <_printf_common+0x96>
 8019b34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8019b38:	6822      	ldr	r2, [r4, #0]
 8019b3a:	3b00      	subs	r3, #0
 8019b3c:	bf18      	it	ne
 8019b3e:	2301      	movne	r3, #1
 8019b40:	0692      	lsls	r2, r2, #26
 8019b42:	d42b      	bmi.n	8019b9c <_printf_common+0xb0>
 8019b44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8019b48:	4641      	mov	r1, r8
 8019b4a:	4638      	mov	r0, r7
 8019b4c:	47c8      	blx	r9
 8019b4e:	3001      	adds	r0, #1
 8019b50:	d01e      	beq.n	8019b90 <_printf_common+0xa4>
 8019b52:	6823      	ldr	r3, [r4, #0]
 8019b54:	6922      	ldr	r2, [r4, #16]
 8019b56:	f003 0306 	and.w	r3, r3, #6
 8019b5a:	2b04      	cmp	r3, #4
 8019b5c:	bf02      	ittt	eq
 8019b5e:	68e5      	ldreq	r5, [r4, #12]
 8019b60:	6833      	ldreq	r3, [r6, #0]
 8019b62:	1aed      	subeq	r5, r5, r3
 8019b64:	68a3      	ldr	r3, [r4, #8]
 8019b66:	bf0c      	ite	eq
 8019b68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019b6c:	2500      	movne	r5, #0
 8019b6e:	4293      	cmp	r3, r2
 8019b70:	bfc4      	itt	gt
 8019b72:	1a9b      	subgt	r3, r3, r2
 8019b74:	18ed      	addgt	r5, r5, r3
 8019b76:	2600      	movs	r6, #0
 8019b78:	341a      	adds	r4, #26
 8019b7a:	42b5      	cmp	r5, r6
 8019b7c:	d11a      	bne.n	8019bb4 <_printf_common+0xc8>
 8019b7e:	2000      	movs	r0, #0
 8019b80:	e008      	b.n	8019b94 <_printf_common+0xa8>
 8019b82:	2301      	movs	r3, #1
 8019b84:	4652      	mov	r2, sl
 8019b86:	4641      	mov	r1, r8
 8019b88:	4638      	mov	r0, r7
 8019b8a:	47c8      	blx	r9
 8019b8c:	3001      	adds	r0, #1
 8019b8e:	d103      	bne.n	8019b98 <_printf_common+0xac>
 8019b90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019b98:	3501      	adds	r5, #1
 8019b9a:	e7c6      	b.n	8019b2a <_printf_common+0x3e>
 8019b9c:	18e1      	adds	r1, r4, r3
 8019b9e:	1c5a      	adds	r2, r3, #1
 8019ba0:	2030      	movs	r0, #48	@ 0x30
 8019ba2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8019ba6:	4422      	add	r2, r4
 8019ba8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8019bac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8019bb0:	3302      	adds	r3, #2
 8019bb2:	e7c7      	b.n	8019b44 <_printf_common+0x58>
 8019bb4:	2301      	movs	r3, #1
 8019bb6:	4622      	mov	r2, r4
 8019bb8:	4641      	mov	r1, r8
 8019bba:	4638      	mov	r0, r7
 8019bbc:	47c8      	blx	r9
 8019bbe:	3001      	adds	r0, #1
 8019bc0:	d0e6      	beq.n	8019b90 <_printf_common+0xa4>
 8019bc2:	3601      	adds	r6, #1
 8019bc4:	e7d9      	b.n	8019b7a <_printf_common+0x8e>
	...

08019bc8 <_printf_i>:
 8019bc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019bcc:	7e0f      	ldrb	r7, [r1, #24]
 8019bce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8019bd0:	2f78      	cmp	r7, #120	@ 0x78
 8019bd2:	4691      	mov	r9, r2
 8019bd4:	4680      	mov	r8, r0
 8019bd6:	460c      	mov	r4, r1
 8019bd8:	469a      	mov	sl, r3
 8019bda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8019bde:	d807      	bhi.n	8019bf0 <_printf_i+0x28>
 8019be0:	2f62      	cmp	r7, #98	@ 0x62
 8019be2:	d80a      	bhi.n	8019bfa <_printf_i+0x32>
 8019be4:	2f00      	cmp	r7, #0
 8019be6:	f000 80d2 	beq.w	8019d8e <_printf_i+0x1c6>
 8019bea:	2f58      	cmp	r7, #88	@ 0x58
 8019bec:	f000 80b9 	beq.w	8019d62 <_printf_i+0x19a>
 8019bf0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019bf4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8019bf8:	e03a      	b.n	8019c70 <_printf_i+0xa8>
 8019bfa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8019bfe:	2b15      	cmp	r3, #21
 8019c00:	d8f6      	bhi.n	8019bf0 <_printf_i+0x28>
 8019c02:	a101      	add	r1, pc, #4	@ (adr r1, 8019c08 <_printf_i+0x40>)
 8019c04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019c08:	08019c61 	.word	0x08019c61
 8019c0c:	08019c75 	.word	0x08019c75
 8019c10:	08019bf1 	.word	0x08019bf1
 8019c14:	08019bf1 	.word	0x08019bf1
 8019c18:	08019bf1 	.word	0x08019bf1
 8019c1c:	08019bf1 	.word	0x08019bf1
 8019c20:	08019c75 	.word	0x08019c75
 8019c24:	08019bf1 	.word	0x08019bf1
 8019c28:	08019bf1 	.word	0x08019bf1
 8019c2c:	08019bf1 	.word	0x08019bf1
 8019c30:	08019bf1 	.word	0x08019bf1
 8019c34:	08019d75 	.word	0x08019d75
 8019c38:	08019c9f 	.word	0x08019c9f
 8019c3c:	08019d2f 	.word	0x08019d2f
 8019c40:	08019bf1 	.word	0x08019bf1
 8019c44:	08019bf1 	.word	0x08019bf1
 8019c48:	08019d97 	.word	0x08019d97
 8019c4c:	08019bf1 	.word	0x08019bf1
 8019c50:	08019c9f 	.word	0x08019c9f
 8019c54:	08019bf1 	.word	0x08019bf1
 8019c58:	08019bf1 	.word	0x08019bf1
 8019c5c:	08019d37 	.word	0x08019d37
 8019c60:	6833      	ldr	r3, [r6, #0]
 8019c62:	1d1a      	adds	r2, r3, #4
 8019c64:	681b      	ldr	r3, [r3, #0]
 8019c66:	6032      	str	r2, [r6, #0]
 8019c68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019c6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8019c70:	2301      	movs	r3, #1
 8019c72:	e09d      	b.n	8019db0 <_printf_i+0x1e8>
 8019c74:	6833      	ldr	r3, [r6, #0]
 8019c76:	6820      	ldr	r0, [r4, #0]
 8019c78:	1d19      	adds	r1, r3, #4
 8019c7a:	6031      	str	r1, [r6, #0]
 8019c7c:	0606      	lsls	r6, r0, #24
 8019c7e:	d501      	bpl.n	8019c84 <_printf_i+0xbc>
 8019c80:	681d      	ldr	r5, [r3, #0]
 8019c82:	e003      	b.n	8019c8c <_printf_i+0xc4>
 8019c84:	0645      	lsls	r5, r0, #25
 8019c86:	d5fb      	bpl.n	8019c80 <_printf_i+0xb8>
 8019c88:	f9b3 5000 	ldrsh.w	r5, [r3]
 8019c8c:	2d00      	cmp	r5, #0
 8019c8e:	da03      	bge.n	8019c98 <_printf_i+0xd0>
 8019c90:	232d      	movs	r3, #45	@ 0x2d
 8019c92:	426d      	negs	r5, r5
 8019c94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019c98:	4859      	ldr	r0, [pc, #356]	@ (8019e00 <_printf_i+0x238>)
 8019c9a:	230a      	movs	r3, #10
 8019c9c:	e011      	b.n	8019cc2 <_printf_i+0xfa>
 8019c9e:	6821      	ldr	r1, [r4, #0]
 8019ca0:	6833      	ldr	r3, [r6, #0]
 8019ca2:	0608      	lsls	r0, r1, #24
 8019ca4:	f853 5b04 	ldr.w	r5, [r3], #4
 8019ca8:	d402      	bmi.n	8019cb0 <_printf_i+0xe8>
 8019caa:	0649      	lsls	r1, r1, #25
 8019cac:	bf48      	it	mi
 8019cae:	b2ad      	uxthmi	r5, r5
 8019cb0:	2f6f      	cmp	r7, #111	@ 0x6f
 8019cb2:	4853      	ldr	r0, [pc, #332]	@ (8019e00 <_printf_i+0x238>)
 8019cb4:	6033      	str	r3, [r6, #0]
 8019cb6:	bf14      	ite	ne
 8019cb8:	230a      	movne	r3, #10
 8019cba:	2308      	moveq	r3, #8
 8019cbc:	2100      	movs	r1, #0
 8019cbe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8019cc2:	6866      	ldr	r6, [r4, #4]
 8019cc4:	60a6      	str	r6, [r4, #8]
 8019cc6:	2e00      	cmp	r6, #0
 8019cc8:	bfa2      	ittt	ge
 8019cca:	6821      	ldrge	r1, [r4, #0]
 8019ccc:	f021 0104 	bicge.w	r1, r1, #4
 8019cd0:	6021      	strge	r1, [r4, #0]
 8019cd2:	b90d      	cbnz	r5, 8019cd8 <_printf_i+0x110>
 8019cd4:	2e00      	cmp	r6, #0
 8019cd6:	d04b      	beq.n	8019d70 <_printf_i+0x1a8>
 8019cd8:	4616      	mov	r6, r2
 8019cda:	fbb5 f1f3 	udiv	r1, r5, r3
 8019cde:	fb03 5711 	mls	r7, r3, r1, r5
 8019ce2:	5dc7      	ldrb	r7, [r0, r7]
 8019ce4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019ce8:	462f      	mov	r7, r5
 8019cea:	42bb      	cmp	r3, r7
 8019cec:	460d      	mov	r5, r1
 8019cee:	d9f4      	bls.n	8019cda <_printf_i+0x112>
 8019cf0:	2b08      	cmp	r3, #8
 8019cf2:	d10b      	bne.n	8019d0c <_printf_i+0x144>
 8019cf4:	6823      	ldr	r3, [r4, #0]
 8019cf6:	07df      	lsls	r7, r3, #31
 8019cf8:	d508      	bpl.n	8019d0c <_printf_i+0x144>
 8019cfa:	6923      	ldr	r3, [r4, #16]
 8019cfc:	6861      	ldr	r1, [r4, #4]
 8019cfe:	4299      	cmp	r1, r3
 8019d00:	bfde      	ittt	le
 8019d02:	2330      	movle	r3, #48	@ 0x30
 8019d04:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019d08:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8019d0c:	1b92      	subs	r2, r2, r6
 8019d0e:	6122      	str	r2, [r4, #16]
 8019d10:	f8cd a000 	str.w	sl, [sp]
 8019d14:	464b      	mov	r3, r9
 8019d16:	aa03      	add	r2, sp, #12
 8019d18:	4621      	mov	r1, r4
 8019d1a:	4640      	mov	r0, r8
 8019d1c:	f7ff fee6 	bl	8019aec <_printf_common>
 8019d20:	3001      	adds	r0, #1
 8019d22:	d14a      	bne.n	8019dba <_printf_i+0x1f2>
 8019d24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019d28:	b004      	add	sp, #16
 8019d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019d2e:	6823      	ldr	r3, [r4, #0]
 8019d30:	f043 0320 	orr.w	r3, r3, #32
 8019d34:	6023      	str	r3, [r4, #0]
 8019d36:	4833      	ldr	r0, [pc, #204]	@ (8019e04 <_printf_i+0x23c>)
 8019d38:	2778      	movs	r7, #120	@ 0x78
 8019d3a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8019d3e:	6823      	ldr	r3, [r4, #0]
 8019d40:	6831      	ldr	r1, [r6, #0]
 8019d42:	061f      	lsls	r7, r3, #24
 8019d44:	f851 5b04 	ldr.w	r5, [r1], #4
 8019d48:	d402      	bmi.n	8019d50 <_printf_i+0x188>
 8019d4a:	065f      	lsls	r7, r3, #25
 8019d4c:	bf48      	it	mi
 8019d4e:	b2ad      	uxthmi	r5, r5
 8019d50:	6031      	str	r1, [r6, #0]
 8019d52:	07d9      	lsls	r1, r3, #31
 8019d54:	bf44      	itt	mi
 8019d56:	f043 0320 	orrmi.w	r3, r3, #32
 8019d5a:	6023      	strmi	r3, [r4, #0]
 8019d5c:	b11d      	cbz	r5, 8019d66 <_printf_i+0x19e>
 8019d5e:	2310      	movs	r3, #16
 8019d60:	e7ac      	b.n	8019cbc <_printf_i+0xf4>
 8019d62:	4827      	ldr	r0, [pc, #156]	@ (8019e00 <_printf_i+0x238>)
 8019d64:	e7e9      	b.n	8019d3a <_printf_i+0x172>
 8019d66:	6823      	ldr	r3, [r4, #0]
 8019d68:	f023 0320 	bic.w	r3, r3, #32
 8019d6c:	6023      	str	r3, [r4, #0]
 8019d6e:	e7f6      	b.n	8019d5e <_printf_i+0x196>
 8019d70:	4616      	mov	r6, r2
 8019d72:	e7bd      	b.n	8019cf0 <_printf_i+0x128>
 8019d74:	6833      	ldr	r3, [r6, #0]
 8019d76:	6825      	ldr	r5, [r4, #0]
 8019d78:	6961      	ldr	r1, [r4, #20]
 8019d7a:	1d18      	adds	r0, r3, #4
 8019d7c:	6030      	str	r0, [r6, #0]
 8019d7e:	062e      	lsls	r6, r5, #24
 8019d80:	681b      	ldr	r3, [r3, #0]
 8019d82:	d501      	bpl.n	8019d88 <_printf_i+0x1c0>
 8019d84:	6019      	str	r1, [r3, #0]
 8019d86:	e002      	b.n	8019d8e <_printf_i+0x1c6>
 8019d88:	0668      	lsls	r0, r5, #25
 8019d8a:	d5fb      	bpl.n	8019d84 <_printf_i+0x1bc>
 8019d8c:	8019      	strh	r1, [r3, #0]
 8019d8e:	2300      	movs	r3, #0
 8019d90:	6123      	str	r3, [r4, #16]
 8019d92:	4616      	mov	r6, r2
 8019d94:	e7bc      	b.n	8019d10 <_printf_i+0x148>
 8019d96:	6833      	ldr	r3, [r6, #0]
 8019d98:	1d1a      	adds	r2, r3, #4
 8019d9a:	6032      	str	r2, [r6, #0]
 8019d9c:	681e      	ldr	r6, [r3, #0]
 8019d9e:	6862      	ldr	r2, [r4, #4]
 8019da0:	2100      	movs	r1, #0
 8019da2:	4630      	mov	r0, r6
 8019da4:	f7e6 fa54 	bl	8000250 <memchr>
 8019da8:	b108      	cbz	r0, 8019dae <_printf_i+0x1e6>
 8019daa:	1b80      	subs	r0, r0, r6
 8019dac:	6060      	str	r0, [r4, #4]
 8019dae:	6863      	ldr	r3, [r4, #4]
 8019db0:	6123      	str	r3, [r4, #16]
 8019db2:	2300      	movs	r3, #0
 8019db4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019db8:	e7aa      	b.n	8019d10 <_printf_i+0x148>
 8019dba:	6923      	ldr	r3, [r4, #16]
 8019dbc:	4632      	mov	r2, r6
 8019dbe:	4649      	mov	r1, r9
 8019dc0:	4640      	mov	r0, r8
 8019dc2:	47d0      	blx	sl
 8019dc4:	3001      	adds	r0, #1
 8019dc6:	d0ad      	beq.n	8019d24 <_printf_i+0x15c>
 8019dc8:	6823      	ldr	r3, [r4, #0]
 8019dca:	079b      	lsls	r3, r3, #30
 8019dcc:	d413      	bmi.n	8019df6 <_printf_i+0x22e>
 8019dce:	68e0      	ldr	r0, [r4, #12]
 8019dd0:	9b03      	ldr	r3, [sp, #12]
 8019dd2:	4298      	cmp	r0, r3
 8019dd4:	bfb8      	it	lt
 8019dd6:	4618      	movlt	r0, r3
 8019dd8:	e7a6      	b.n	8019d28 <_printf_i+0x160>
 8019dda:	2301      	movs	r3, #1
 8019ddc:	4632      	mov	r2, r6
 8019dde:	4649      	mov	r1, r9
 8019de0:	4640      	mov	r0, r8
 8019de2:	47d0      	blx	sl
 8019de4:	3001      	adds	r0, #1
 8019de6:	d09d      	beq.n	8019d24 <_printf_i+0x15c>
 8019de8:	3501      	adds	r5, #1
 8019dea:	68e3      	ldr	r3, [r4, #12]
 8019dec:	9903      	ldr	r1, [sp, #12]
 8019dee:	1a5b      	subs	r3, r3, r1
 8019df0:	42ab      	cmp	r3, r5
 8019df2:	dcf2      	bgt.n	8019dda <_printf_i+0x212>
 8019df4:	e7eb      	b.n	8019dce <_printf_i+0x206>
 8019df6:	2500      	movs	r5, #0
 8019df8:	f104 0619 	add.w	r6, r4, #25
 8019dfc:	e7f5      	b.n	8019dea <_printf_i+0x222>
 8019dfe:	bf00      	nop
 8019e00:	0801c08f 	.word	0x0801c08f
 8019e04:	0801c0a0 	.word	0x0801c0a0

08019e08 <__sflush_r>:
 8019e08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e10:	0716      	lsls	r6, r2, #28
 8019e12:	4605      	mov	r5, r0
 8019e14:	460c      	mov	r4, r1
 8019e16:	d454      	bmi.n	8019ec2 <__sflush_r+0xba>
 8019e18:	684b      	ldr	r3, [r1, #4]
 8019e1a:	2b00      	cmp	r3, #0
 8019e1c:	dc02      	bgt.n	8019e24 <__sflush_r+0x1c>
 8019e1e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8019e20:	2b00      	cmp	r3, #0
 8019e22:	dd48      	ble.n	8019eb6 <__sflush_r+0xae>
 8019e24:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019e26:	2e00      	cmp	r6, #0
 8019e28:	d045      	beq.n	8019eb6 <__sflush_r+0xae>
 8019e2a:	2300      	movs	r3, #0
 8019e2c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8019e30:	682f      	ldr	r7, [r5, #0]
 8019e32:	6a21      	ldr	r1, [r4, #32]
 8019e34:	602b      	str	r3, [r5, #0]
 8019e36:	d030      	beq.n	8019e9a <__sflush_r+0x92>
 8019e38:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8019e3a:	89a3      	ldrh	r3, [r4, #12]
 8019e3c:	0759      	lsls	r1, r3, #29
 8019e3e:	d505      	bpl.n	8019e4c <__sflush_r+0x44>
 8019e40:	6863      	ldr	r3, [r4, #4]
 8019e42:	1ad2      	subs	r2, r2, r3
 8019e44:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8019e46:	b10b      	cbz	r3, 8019e4c <__sflush_r+0x44>
 8019e48:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8019e4a:	1ad2      	subs	r2, r2, r3
 8019e4c:	2300      	movs	r3, #0
 8019e4e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019e50:	6a21      	ldr	r1, [r4, #32]
 8019e52:	4628      	mov	r0, r5
 8019e54:	47b0      	blx	r6
 8019e56:	1c43      	adds	r3, r0, #1
 8019e58:	89a3      	ldrh	r3, [r4, #12]
 8019e5a:	d106      	bne.n	8019e6a <__sflush_r+0x62>
 8019e5c:	6829      	ldr	r1, [r5, #0]
 8019e5e:	291d      	cmp	r1, #29
 8019e60:	d82b      	bhi.n	8019eba <__sflush_r+0xb2>
 8019e62:	4a2a      	ldr	r2, [pc, #168]	@ (8019f0c <__sflush_r+0x104>)
 8019e64:	410a      	asrs	r2, r1
 8019e66:	07d6      	lsls	r6, r2, #31
 8019e68:	d427      	bmi.n	8019eba <__sflush_r+0xb2>
 8019e6a:	2200      	movs	r2, #0
 8019e6c:	6062      	str	r2, [r4, #4]
 8019e6e:	04d9      	lsls	r1, r3, #19
 8019e70:	6922      	ldr	r2, [r4, #16]
 8019e72:	6022      	str	r2, [r4, #0]
 8019e74:	d504      	bpl.n	8019e80 <__sflush_r+0x78>
 8019e76:	1c42      	adds	r2, r0, #1
 8019e78:	d101      	bne.n	8019e7e <__sflush_r+0x76>
 8019e7a:	682b      	ldr	r3, [r5, #0]
 8019e7c:	b903      	cbnz	r3, 8019e80 <__sflush_r+0x78>
 8019e7e:	6560      	str	r0, [r4, #84]	@ 0x54
 8019e80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019e82:	602f      	str	r7, [r5, #0]
 8019e84:	b1b9      	cbz	r1, 8019eb6 <__sflush_r+0xae>
 8019e86:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019e8a:	4299      	cmp	r1, r3
 8019e8c:	d002      	beq.n	8019e94 <__sflush_r+0x8c>
 8019e8e:	4628      	mov	r0, r5
 8019e90:	f7ff fb40 	bl	8019514 <_free_r>
 8019e94:	2300      	movs	r3, #0
 8019e96:	6363      	str	r3, [r4, #52]	@ 0x34
 8019e98:	e00d      	b.n	8019eb6 <__sflush_r+0xae>
 8019e9a:	2301      	movs	r3, #1
 8019e9c:	4628      	mov	r0, r5
 8019e9e:	47b0      	blx	r6
 8019ea0:	4602      	mov	r2, r0
 8019ea2:	1c50      	adds	r0, r2, #1
 8019ea4:	d1c9      	bne.n	8019e3a <__sflush_r+0x32>
 8019ea6:	682b      	ldr	r3, [r5, #0]
 8019ea8:	2b00      	cmp	r3, #0
 8019eaa:	d0c6      	beq.n	8019e3a <__sflush_r+0x32>
 8019eac:	2b1d      	cmp	r3, #29
 8019eae:	d001      	beq.n	8019eb4 <__sflush_r+0xac>
 8019eb0:	2b16      	cmp	r3, #22
 8019eb2:	d11e      	bne.n	8019ef2 <__sflush_r+0xea>
 8019eb4:	602f      	str	r7, [r5, #0]
 8019eb6:	2000      	movs	r0, #0
 8019eb8:	e022      	b.n	8019f00 <__sflush_r+0xf8>
 8019eba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019ebe:	b21b      	sxth	r3, r3
 8019ec0:	e01b      	b.n	8019efa <__sflush_r+0xf2>
 8019ec2:	690f      	ldr	r7, [r1, #16]
 8019ec4:	2f00      	cmp	r7, #0
 8019ec6:	d0f6      	beq.n	8019eb6 <__sflush_r+0xae>
 8019ec8:	0793      	lsls	r3, r2, #30
 8019eca:	680e      	ldr	r6, [r1, #0]
 8019ecc:	bf08      	it	eq
 8019ece:	694b      	ldreq	r3, [r1, #20]
 8019ed0:	600f      	str	r7, [r1, #0]
 8019ed2:	bf18      	it	ne
 8019ed4:	2300      	movne	r3, #0
 8019ed6:	eba6 0807 	sub.w	r8, r6, r7
 8019eda:	608b      	str	r3, [r1, #8]
 8019edc:	f1b8 0f00 	cmp.w	r8, #0
 8019ee0:	dde9      	ble.n	8019eb6 <__sflush_r+0xae>
 8019ee2:	6a21      	ldr	r1, [r4, #32]
 8019ee4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8019ee6:	4643      	mov	r3, r8
 8019ee8:	463a      	mov	r2, r7
 8019eea:	4628      	mov	r0, r5
 8019eec:	47b0      	blx	r6
 8019eee:	2800      	cmp	r0, #0
 8019ef0:	dc08      	bgt.n	8019f04 <__sflush_r+0xfc>
 8019ef2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019ef6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019efa:	81a3      	strh	r3, [r4, #12]
 8019efc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f04:	4407      	add	r7, r0
 8019f06:	eba8 0800 	sub.w	r8, r8, r0
 8019f0a:	e7e7      	b.n	8019edc <__sflush_r+0xd4>
 8019f0c:	dfbffffe 	.word	0xdfbffffe

08019f10 <_fflush_r>:
 8019f10:	b538      	push	{r3, r4, r5, lr}
 8019f12:	690b      	ldr	r3, [r1, #16]
 8019f14:	4605      	mov	r5, r0
 8019f16:	460c      	mov	r4, r1
 8019f18:	b913      	cbnz	r3, 8019f20 <_fflush_r+0x10>
 8019f1a:	2500      	movs	r5, #0
 8019f1c:	4628      	mov	r0, r5
 8019f1e:	bd38      	pop	{r3, r4, r5, pc}
 8019f20:	b118      	cbz	r0, 8019f2a <_fflush_r+0x1a>
 8019f22:	6a03      	ldr	r3, [r0, #32]
 8019f24:	b90b      	cbnz	r3, 8019f2a <_fflush_r+0x1a>
 8019f26:	f7fe ffe3 	bl	8018ef0 <__sinit>
 8019f2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019f2e:	2b00      	cmp	r3, #0
 8019f30:	d0f3      	beq.n	8019f1a <_fflush_r+0xa>
 8019f32:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8019f34:	07d0      	lsls	r0, r2, #31
 8019f36:	d404      	bmi.n	8019f42 <_fflush_r+0x32>
 8019f38:	0599      	lsls	r1, r3, #22
 8019f3a:	d402      	bmi.n	8019f42 <_fflush_r+0x32>
 8019f3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019f3e:	f7ff faa6 	bl	801948e <__retarget_lock_acquire_recursive>
 8019f42:	4628      	mov	r0, r5
 8019f44:	4621      	mov	r1, r4
 8019f46:	f7ff ff5f 	bl	8019e08 <__sflush_r>
 8019f4a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019f4c:	07da      	lsls	r2, r3, #31
 8019f4e:	4605      	mov	r5, r0
 8019f50:	d4e4      	bmi.n	8019f1c <_fflush_r+0xc>
 8019f52:	89a3      	ldrh	r3, [r4, #12]
 8019f54:	059b      	lsls	r3, r3, #22
 8019f56:	d4e1      	bmi.n	8019f1c <_fflush_r+0xc>
 8019f58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019f5a:	f7ff fa99 	bl	8019490 <__retarget_lock_release_recursive>
 8019f5e:	e7dd      	b.n	8019f1c <_fflush_r+0xc>

08019f60 <fiprintf>:
 8019f60:	b40e      	push	{r1, r2, r3}
 8019f62:	b503      	push	{r0, r1, lr}
 8019f64:	4601      	mov	r1, r0
 8019f66:	ab03      	add	r3, sp, #12
 8019f68:	4805      	ldr	r0, [pc, #20]	@ (8019f80 <fiprintf+0x20>)
 8019f6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8019f6e:	6800      	ldr	r0, [r0, #0]
 8019f70:	9301      	str	r3, [sp, #4]
 8019f72:	f7ff fca3 	bl	80198bc <_vfiprintf_r>
 8019f76:	b002      	add	sp, #8
 8019f78:	f85d eb04 	ldr.w	lr, [sp], #4
 8019f7c:	b003      	add	sp, #12
 8019f7e:	4770      	bx	lr
 8019f80:	2000093c 	.word	0x2000093c

08019f84 <__swhatbuf_r>:
 8019f84:	b570      	push	{r4, r5, r6, lr}
 8019f86:	460c      	mov	r4, r1
 8019f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019f8c:	2900      	cmp	r1, #0
 8019f8e:	b096      	sub	sp, #88	@ 0x58
 8019f90:	4615      	mov	r5, r2
 8019f92:	461e      	mov	r6, r3
 8019f94:	da0d      	bge.n	8019fb2 <__swhatbuf_r+0x2e>
 8019f96:	89a3      	ldrh	r3, [r4, #12]
 8019f98:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8019f9c:	f04f 0100 	mov.w	r1, #0
 8019fa0:	bf14      	ite	ne
 8019fa2:	2340      	movne	r3, #64	@ 0x40
 8019fa4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8019fa8:	2000      	movs	r0, #0
 8019faa:	6031      	str	r1, [r6, #0]
 8019fac:	602b      	str	r3, [r5, #0]
 8019fae:	b016      	add	sp, #88	@ 0x58
 8019fb0:	bd70      	pop	{r4, r5, r6, pc}
 8019fb2:	466a      	mov	r2, sp
 8019fb4:	f000 f848 	bl	801a048 <_fstat_r>
 8019fb8:	2800      	cmp	r0, #0
 8019fba:	dbec      	blt.n	8019f96 <__swhatbuf_r+0x12>
 8019fbc:	9901      	ldr	r1, [sp, #4]
 8019fbe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8019fc2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8019fc6:	4259      	negs	r1, r3
 8019fc8:	4159      	adcs	r1, r3
 8019fca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8019fce:	e7eb      	b.n	8019fa8 <__swhatbuf_r+0x24>

08019fd0 <__smakebuf_r>:
 8019fd0:	898b      	ldrh	r3, [r1, #12]
 8019fd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019fd4:	079d      	lsls	r5, r3, #30
 8019fd6:	4606      	mov	r6, r0
 8019fd8:	460c      	mov	r4, r1
 8019fda:	d507      	bpl.n	8019fec <__smakebuf_r+0x1c>
 8019fdc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8019fe0:	6023      	str	r3, [r4, #0]
 8019fe2:	6123      	str	r3, [r4, #16]
 8019fe4:	2301      	movs	r3, #1
 8019fe6:	6163      	str	r3, [r4, #20]
 8019fe8:	b003      	add	sp, #12
 8019fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019fec:	ab01      	add	r3, sp, #4
 8019fee:	466a      	mov	r2, sp
 8019ff0:	f7ff ffc8 	bl	8019f84 <__swhatbuf_r>
 8019ff4:	9f00      	ldr	r7, [sp, #0]
 8019ff6:	4605      	mov	r5, r0
 8019ff8:	4639      	mov	r1, r7
 8019ffa:	4630      	mov	r0, r6
 8019ffc:	f7fe fd46 	bl	8018a8c <_malloc_r>
 801a000:	b948      	cbnz	r0, 801a016 <__smakebuf_r+0x46>
 801a002:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a006:	059a      	lsls	r2, r3, #22
 801a008:	d4ee      	bmi.n	8019fe8 <__smakebuf_r+0x18>
 801a00a:	f023 0303 	bic.w	r3, r3, #3
 801a00e:	f043 0302 	orr.w	r3, r3, #2
 801a012:	81a3      	strh	r3, [r4, #12]
 801a014:	e7e2      	b.n	8019fdc <__smakebuf_r+0xc>
 801a016:	89a3      	ldrh	r3, [r4, #12]
 801a018:	6020      	str	r0, [r4, #0]
 801a01a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a01e:	81a3      	strh	r3, [r4, #12]
 801a020:	9b01      	ldr	r3, [sp, #4]
 801a022:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801a026:	b15b      	cbz	r3, 801a040 <__smakebuf_r+0x70>
 801a028:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a02c:	4630      	mov	r0, r6
 801a02e:	f000 f81d 	bl	801a06c <_isatty_r>
 801a032:	b128      	cbz	r0, 801a040 <__smakebuf_r+0x70>
 801a034:	89a3      	ldrh	r3, [r4, #12]
 801a036:	f023 0303 	bic.w	r3, r3, #3
 801a03a:	f043 0301 	orr.w	r3, r3, #1
 801a03e:	81a3      	strh	r3, [r4, #12]
 801a040:	89a3      	ldrh	r3, [r4, #12]
 801a042:	431d      	orrs	r5, r3
 801a044:	81a5      	strh	r5, [r4, #12]
 801a046:	e7cf      	b.n	8019fe8 <__smakebuf_r+0x18>

0801a048 <_fstat_r>:
 801a048:	b538      	push	{r3, r4, r5, lr}
 801a04a:	4d07      	ldr	r5, [pc, #28]	@ (801a068 <_fstat_r+0x20>)
 801a04c:	2300      	movs	r3, #0
 801a04e:	4604      	mov	r4, r0
 801a050:	4608      	mov	r0, r1
 801a052:	4611      	mov	r1, r2
 801a054:	602b      	str	r3, [r5, #0]
 801a056:	f7e8 f9ed 	bl	8002434 <_fstat>
 801a05a:	1c43      	adds	r3, r0, #1
 801a05c:	d102      	bne.n	801a064 <_fstat_r+0x1c>
 801a05e:	682b      	ldr	r3, [r5, #0]
 801a060:	b103      	cbz	r3, 801a064 <_fstat_r+0x1c>
 801a062:	6023      	str	r3, [r4, #0]
 801a064:	bd38      	pop	{r3, r4, r5, pc}
 801a066:	bf00      	nop
 801a068:	2000bb4c 	.word	0x2000bb4c

0801a06c <_isatty_r>:
 801a06c:	b538      	push	{r3, r4, r5, lr}
 801a06e:	4d06      	ldr	r5, [pc, #24]	@ (801a088 <_isatty_r+0x1c>)
 801a070:	2300      	movs	r3, #0
 801a072:	4604      	mov	r4, r0
 801a074:	4608      	mov	r0, r1
 801a076:	602b      	str	r3, [r5, #0]
 801a078:	f7e8 f9ec 	bl	8002454 <_isatty>
 801a07c:	1c43      	adds	r3, r0, #1
 801a07e:	d102      	bne.n	801a086 <_isatty_r+0x1a>
 801a080:	682b      	ldr	r3, [r5, #0]
 801a082:	b103      	cbz	r3, 801a086 <_isatty_r+0x1a>
 801a084:	6023      	str	r3, [r4, #0]
 801a086:	bd38      	pop	{r3, r4, r5, pc}
 801a088:	2000bb4c 	.word	0x2000bb4c

0801a08c <abort>:
 801a08c:	b508      	push	{r3, lr}
 801a08e:	2006      	movs	r0, #6
 801a090:	f000 f82c 	bl	801a0ec <raise>
 801a094:	2001      	movs	r0, #1
 801a096:	f7e8 f97d 	bl	8002394 <_exit>

0801a09a <_raise_r>:
 801a09a:	291f      	cmp	r1, #31
 801a09c:	b538      	push	{r3, r4, r5, lr}
 801a09e:	4605      	mov	r5, r0
 801a0a0:	460c      	mov	r4, r1
 801a0a2:	d904      	bls.n	801a0ae <_raise_r+0x14>
 801a0a4:	2316      	movs	r3, #22
 801a0a6:	6003      	str	r3, [r0, #0]
 801a0a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a0ac:	bd38      	pop	{r3, r4, r5, pc}
 801a0ae:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801a0b0:	b112      	cbz	r2, 801a0b8 <_raise_r+0x1e>
 801a0b2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a0b6:	b94b      	cbnz	r3, 801a0cc <_raise_r+0x32>
 801a0b8:	4628      	mov	r0, r5
 801a0ba:	f000 f831 	bl	801a120 <_getpid_r>
 801a0be:	4622      	mov	r2, r4
 801a0c0:	4601      	mov	r1, r0
 801a0c2:	4628      	mov	r0, r5
 801a0c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a0c8:	f000 b818 	b.w	801a0fc <_kill_r>
 801a0cc:	2b01      	cmp	r3, #1
 801a0ce:	d00a      	beq.n	801a0e6 <_raise_r+0x4c>
 801a0d0:	1c59      	adds	r1, r3, #1
 801a0d2:	d103      	bne.n	801a0dc <_raise_r+0x42>
 801a0d4:	2316      	movs	r3, #22
 801a0d6:	6003      	str	r3, [r0, #0]
 801a0d8:	2001      	movs	r0, #1
 801a0da:	e7e7      	b.n	801a0ac <_raise_r+0x12>
 801a0dc:	2100      	movs	r1, #0
 801a0de:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801a0e2:	4620      	mov	r0, r4
 801a0e4:	4798      	blx	r3
 801a0e6:	2000      	movs	r0, #0
 801a0e8:	e7e0      	b.n	801a0ac <_raise_r+0x12>
	...

0801a0ec <raise>:
 801a0ec:	4b02      	ldr	r3, [pc, #8]	@ (801a0f8 <raise+0xc>)
 801a0ee:	4601      	mov	r1, r0
 801a0f0:	6818      	ldr	r0, [r3, #0]
 801a0f2:	f7ff bfd2 	b.w	801a09a <_raise_r>
 801a0f6:	bf00      	nop
 801a0f8:	2000093c 	.word	0x2000093c

0801a0fc <_kill_r>:
 801a0fc:	b538      	push	{r3, r4, r5, lr}
 801a0fe:	4d07      	ldr	r5, [pc, #28]	@ (801a11c <_kill_r+0x20>)
 801a100:	2300      	movs	r3, #0
 801a102:	4604      	mov	r4, r0
 801a104:	4608      	mov	r0, r1
 801a106:	4611      	mov	r1, r2
 801a108:	602b      	str	r3, [r5, #0]
 801a10a:	f7e8 f933 	bl	8002374 <_kill>
 801a10e:	1c43      	adds	r3, r0, #1
 801a110:	d102      	bne.n	801a118 <_kill_r+0x1c>
 801a112:	682b      	ldr	r3, [r5, #0]
 801a114:	b103      	cbz	r3, 801a118 <_kill_r+0x1c>
 801a116:	6023      	str	r3, [r4, #0]
 801a118:	bd38      	pop	{r3, r4, r5, pc}
 801a11a:	bf00      	nop
 801a11c:	2000bb4c 	.word	0x2000bb4c

0801a120 <_getpid_r>:
 801a120:	f7e8 b920 	b.w	8002364 <_getpid>

0801a124 <atan2>:
 801a124:	f000 baa8 	b.w	801a678 <__ieee754_atan2>

0801a128 <sqrt>:
 801a128:	b538      	push	{r3, r4, r5, lr}
 801a12a:	ed2d 8b02 	vpush	{d8}
 801a12e:	ec55 4b10 	vmov	r4, r5, d0
 801a132:	f000 f9c5 	bl	801a4c0 <__ieee754_sqrt>
 801a136:	4622      	mov	r2, r4
 801a138:	462b      	mov	r3, r5
 801a13a:	4620      	mov	r0, r4
 801a13c:	4629      	mov	r1, r5
 801a13e:	eeb0 8a40 	vmov.f32	s16, s0
 801a142:	eef0 8a60 	vmov.f32	s17, s1
 801a146:	f7e6 fd29 	bl	8000b9c <__aeabi_dcmpun>
 801a14a:	b990      	cbnz	r0, 801a172 <sqrt+0x4a>
 801a14c:	2200      	movs	r2, #0
 801a14e:	2300      	movs	r3, #0
 801a150:	4620      	mov	r0, r4
 801a152:	4629      	mov	r1, r5
 801a154:	f7e6 fcfa 	bl	8000b4c <__aeabi_dcmplt>
 801a158:	b158      	cbz	r0, 801a172 <sqrt+0x4a>
 801a15a:	f7ff f96d 	bl	8019438 <__errno>
 801a15e:	2321      	movs	r3, #33	@ 0x21
 801a160:	6003      	str	r3, [r0, #0]
 801a162:	2200      	movs	r2, #0
 801a164:	2300      	movs	r3, #0
 801a166:	4610      	mov	r0, r2
 801a168:	4619      	mov	r1, r3
 801a16a:	f7e6 fba7 	bl	80008bc <__aeabi_ddiv>
 801a16e:	ec41 0b18 	vmov	d8, r0, r1
 801a172:	eeb0 0a48 	vmov.f32	s0, s16
 801a176:	eef0 0a68 	vmov.f32	s1, s17
 801a17a:	ecbd 8b02 	vpop	{d8}
 801a17e:	bd38      	pop	{r3, r4, r5, pc}

0801a180 <atan>:
 801a180:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a184:	ec55 4b10 	vmov	r4, r5, d0
 801a188:	4bbf      	ldr	r3, [pc, #764]	@ (801a488 <atan+0x308>)
 801a18a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801a18e:	429e      	cmp	r6, r3
 801a190:	46ab      	mov	fp, r5
 801a192:	d918      	bls.n	801a1c6 <atan+0x46>
 801a194:	4bbd      	ldr	r3, [pc, #756]	@ (801a48c <atan+0x30c>)
 801a196:	429e      	cmp	r6, r3
 801a198:	d801      	bhi.n	801a19e <atan+0x1e>
 801a19a:	d109      	bne.n	801a1b0 <atan+0x30>
 801a19c:	b144      	cbz	r4, 801a1b0 <atan+0x30>
 801a19e:	4622      	mov	r2, r4
 801a1a0:	462b      	mov	r3, r5
 801a1a2:	4620      	mov	r0, r4
 801a1a4:	4629      	mov	r1, r5
 801a1a6:	f7e6 f8a9 	bl	80002fc <__adddf3>
 801a1aa:	4604      	mov	r4, r0
 801a1ac:	460d      	mov	r5, r1
 801a1ae:	e006      	b.n	801a1be <atan+0x3e>
 801a1b0:	f1bb 0f00 	cmp.w	fp, #0
 801a1b4:	f340 812b 	ble.w	801a40e <atan+0x28e>
 801a1b8:	a597      	add	r5, pc, #604	@ (adr r5, 801a418 <atan+0x298>)
 801a1ba:	e9d5 4500 	ldrd	r4, r5, [r5]
 801a1be:	ec45 4b10 	vmov	d0, r4, r5
 801a1c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1c6:	4bb2      	ldr	r3, [pc, #712]	@ (801a490 <atan+0x310>)
 801a1c8:	429e      	cmp	r6, r3
 801a1ca:	d813      	bhi.n	801a1f4 <atan+0x74>
 801a1cc:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 801a1d0:	429e      	cmp	r6, r3
 801a1d2:	d80c      	bhi.n	801a1ee <atan+0x6e>
 801a1d4:	a392      	add	r3, pc, #584	@ (adr r3, 801a420 <atan+0x2a0>)
 801a1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1da:	4620      	mov	r0, r4
 801a1dc:	4629      	mov	r1, r5
 801a1de:	f7e6 f88d 	bl	80002fc <__adddf3>
 801a1e2:	4bac      	ldr	r3, [pc, #688]	@ (801a494 <atan+0x314>)
 801a1e4:	2200      	movs	r2, #0
 801a1e6:	f7e6 fccf 	bl	8000b88 <__aeabi_dcmpgt>
 801a1ea:	2800      	cmp	r0, #0
 801a1ec:	d1e7      	bne.n	801a1be <atan+0x3e>
 801a1ee:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 801a1f2:	e029      	b.n	801a248 <atan+0xc8>
 801a1f4:	f000 f95c 	bl	801a4b0 <fabs>
 801a1f8:	4ba7      	ldr	r3, [pc, #668]	@ (801a498 <atan+0x318>)
 801a1fa:	429e      	cmp	r6, r3
 801a1fc:	ec55 4b10 	vmov	r4, r5, d0
 801a200:	f200 80bc 	bhi.w	801a37c <atan+0x1fc>
 801a204:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 801a208:	429e      	cmp	r6, r3
 801a20a:	f200 809e 	bhi.w	801a34a <atan+0x1ca>
 801a20e:	4622      	mov	r2, r4
 801a210:	462b      	mov	r3, r5
 801a212:	4620      	mov	r0, r4
 801a214:	4629      	mov	r1, r5
 801a216:	f7e6 f871 	bl	80002fc <__adddf3>
 801a21a:	4b9e      	ldr	r3, [pc, #632]	@ (801a494 <atan+0x314>)
 801a21c:	2200      	movs	r2, #0
 801a21e:	f7e6 f86b 	bl	80002f8 <__aeabi_dsub>
 801a222:	2200      	movs	r2, #0
 801a224:	4606      	mov	r6, r0
 801a226:	460f      	mov	r7, r1
 801a228:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801a22c:	4620      	mov	r0, r4
 801a22e:	4629      	mov	r1, r5
 801a230:	f7e6 f864 	bl	80002fc <__adddf3>
 801a234:	4602      	mov	r2, r0
 801a236:	460b      	mov	r3, r1
 801a238:	4630      	mov	r0, r6
 801a23a:	4639      	mov	r1, r7
 801a23c:	f7e6 fb3e 	bl	80008bc <__aeabi_ddiv>
 801a240:	f04f 0a00 	mov.w	sl, #0
 801a244:	4604      	mov	r4, r0
 801a246:	460d      	mov	r5, r1
 801a248:	4622      	mov	r2, r4
 801a24a:	462b      	mov	r3, r5
 801a24c:	4620      	mov	r0, r4
 801a24e:	4629      	mov	r1, r5
 801a250:	f7e6 fa0a 	bl	8000668 <__aeabi_dmul>
 801a254:	4602      	mov	r2, r0
 801a256:	460b      	mov	r3, r1
 801a258:	4680      	mov	r8, r0
 801a25a:	4689      	mov	r9, r1
 801a25c:	f7e6 fa04 	bl	8000668 <__aeabi_dmul>
 801a260:	a371      	add	r3, pc, #452	@ (adr r3, 801a428 <atan+0x2a8>)
 801a262:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a266:	4606      	mov	r6, r0
 801a268:	460f      	mov	r7, r1
 801a26a:	f7e6 f9fd 	bl	8000668 <__aeabi_dmul>
 801a26e:	a370      	add	r3, pc, #448	@ (adr r3, 801a430 <atan+0x2b0>)
 801a270:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a274:	f7e6 f842 	bl	80002fc <__adddf3>
 801a278:	4632      	mov	r2, r6
 801a27a:	463b      	mov	r3, r7
 801a27c:	f7e6 f9f4 	bl	8000668 <__aeabi_dmul>
 801a280:	a36d      	add	r3, pc, #436	@ (adr r3, 801a438 <atan+0x2b8>)
 801a282:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a286:	f7e6 f839 	bl	80002fc <__adddf3>
 801a28a:	4632      	mov	r2, r6
 801a28c:	463b      	mov	r3, r7
 801a28e:	f7e6 f9eb 	bl	8000668 <__aeabi_dmul>
 801a292:	a36b      	add	r3, pc, #428	@ (adr r3, 801a440 <atan+0x2c0>)
 801a294:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a298:	f7e6 f830 	bl	80002fc <__adddf3>
 801a29c:	4632      	mov	r2, r6
 801a29e:	463b      	mov	r3, r7
 801a2a0:	f7e6 f9e2 	bl	8000668 <__aeabi_dmul>
 801a2a4:	a368      	add	r3, pc, #416	@ (adr r3, 801a448 <atan+0x2c8>)
 801a2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2aa:	f7e6 f827 	bl	80002fc <__adddf3>
 801a2ae:	4632      	mov	r2, r6
 801a2b0:	463b      	mov	r3, r7
 801a2b2:	f7e6 f9d9 	bl	8000668 <__aeabi_dmul>
 801a2b6:	a366      	add	r3, pc, #408	@ (adr r3, 801a450 <atan+0x2d0>)
 801a2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2bc:	f7e6 f81e 	bl	80002fc <__adddf3>
 801a2c0:	4642      	mov	r2, r8
 801a2c2:	464b      	mov	r3, r9
 801a2c4:	f7e6 f9d0 	bl	8000668 <__aeabi_dmul>
 801a2c8:	a363      	add	r3, pc, #396	@ (adr r3, 801a458 <atan+0x2d8>)
 801a2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2ce:	4680      	mov	r8, r0
 801a2d0:	4689      	mov	r9, r1
 801a2d2:	4630      	mov	r0, r6
 801a2d4:	4639      	mov	r1, r7
 801a2d6:	f7e6 f9c7 	bl	8000668 <__aeabi_dmul>
 801a2da:	a361      	add	r3, pc, #388	@ (adr r3, 801a460 <atan+0x2e0>)
 801a2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2e0:	f7e6 f80a 	bl	80002f8 <__aeabi_dsub>
 801a2e4:	4632      	mov	r2, r6
 801a2e6:	463b      	mov	r3, r7
 801a2e8:	f7e6 f9be 	bl	8000668 <__aeabi_dmul>
 801a2ec:	a35e      	add	r3, pc, #376	@ (adr r3, 801a468 <atan+0x2e8>)
 801a2ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2f2:	f7e6 f801 	bl	80002f8 <__aeabi_dsub>
 801a2f6:	4632      	mov	r2, r6
 801a2f8:	463b      	mov	r3, r7
 801a2fa:	f7e6 f9b5 	bl	8000668 <__aeabi_dmul>
 801a2fe:	a35c      	add	r3, pc, #368	@ (adr r3, 801a470 <atan+0x2f0>)
 801a300:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a304:	f7e5 fff8 	bl	80002f8 <__aeabi_dsub>
 801a308:	4632      	mov	r2, r6
 801a30a:	463b      	mov	r3, r7
 801a30c:	f7e6 f9ac 	bl	8000668 <__aeabi_dmul>
 801a310:	a359      	add	r3, pc, #356	@ (adr r3, 801a478 <atan+0x2f8>)
 801a312:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a316:	f7e5 ffef 	bl	80002f8 <__aeabi_dsub>
 801a31a:	4632      	mov	r2, r6
 801a31c:	463b      	mov	r3, r7
 801a31e:	f7e6 f9a3 	bl	8000668 <__aeabi_dmul>
 801a322:	4602      	mov	r2, r0
 801a324:	460b      	mov	r3, r1
 801a326:	4640      	mov	r0, r8
 801a328:	4649      	mov	r1, r9
 801a32a:	f7e5 ffe7 	bl	80002fc <__adddf3>
 801a32e:	4622      	mov	r2, r4
 801a330:	462b      	mov	r3, r5
 801a332:	f7e6 f999 	bl	8000668 <__aeabi_dmul>
 801a336:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 801a33a:	4602      	mov	r2, r0
 801a33c:	460b      	mov	r3, r1
 801a33e:	d148      	bne.n	801a3d2 <atan+0x252>
 801a340:	4620      	mov	r0, r4
 801a342:	4629      	mov	r1, r5
 801a344:	f7e5 ffd8 	bl	80002f8 <__aeabi_dsub>
 801a348:	e72f      	b.n	801a1aa <atan+0x2a>
 801a34a:	4b52      	ldr	r3, [pc, #328]	@ (801a494 <atan+0x314>)
 801a34c:	2200      	movs	r2, #0
 801a34e:	4620      	mov	r0, r4
 801a350:	4629      	mov	r1, r5
 801a352:	f7e5 ffd1 	bl	80002f8 <__aeabi_dsub>
 801a356:	4b4f      	ldr	r3, [pc, #316]	@ (801a494 <atan+0x314>)
 801a358:	4606      	mov	r6, r0
 801a35a:	460f      	mov	r7, r1
 801a35c:	2200      	movs	r2, #0
 801a35e:	4620      	mov	r0, r4
 801a360:	4629      	mov	r1, r5
 801a362:	f7e5 ffcb 	bl	80002fc <__adddf3>
 801a366:	4602      	mov	r2, r0
 801a368:	460b      	mov	r3, r1
 801a36a:	4630      	mov	r0, r6
 801a36c:	4639      	mov	r1, r7
 801a36e:	f7e6 faa5 	bl	80008bc <__aeabi_ddiv>
 801a372:	f04f 0a01 	mov.w	sl, #1
 801a376:	4604      	mov	r4, r0
 801a378:	460d      	mov	r5, r1
 801a37a:	e765      	b.n	801a248 <atan+0xc8>
 801a37c:	4b47      	ldr	r3, [pc, #284]	@ (801a49c <atan+0x31c>)
 801a37e:	429e      	cmp	r6, r3
 801a380:	d21c      	bcs.n	801a3bc <atan+0x23c>
 801a382:	4b47      	ldr	r3, [pc, #284]	@ (801a4a0 <atan+0x320>)
 801a384:	2200      	movs	r2, #0
 801a386:	4620      	mov	r0, r4
 801a388:	4629      	mov	r1, r5
 801a38a:	f7e5 ffb5 	bl	80002f8 <__aeabi_dsub>
 801a38e:	4b44      	ldr	r3, [pc, #272]	@ (801a4a0 <atan+0x320>)
 801a390:	4606      	mov	r6, r0
 801a392:	460f      	mov	r7, r1
 801a394:	2200      	movs	r2, #0
 801a396:	4620      	mov	r0, r4
 801a398:	4629      	mov	r1, r5
 801a39a:	f7e6 f965 	bl	8000668 <__aeabi_dmul>
 801a39e:	4b3d      	ldr	r3, [pc, #244]	@ (801a494 <atan+0x314>)
 801a3a0:	2200      	movs	r2, #0
 801a3a2:	f7e5 ffab 	bl	80002fc <__adddf3>
 801a3a6:	4602      	mov	r2, r0
 801a3a8:	460b      	mov	r3, r1
 801a3aa:	4630      	mov	r0, r6
 801a3ac:	4639      	mov	r1, r7
 801a3ae:	f7e6 fa85 	bl	80008bc <__aeabi_ddiv>
 801a3b2:	f04f 0a02 	mov.w	sl, #2
 801a3b6:	4604      	mov	r4, r0
 801a3b8:	460d      	mov	r5, r1
 801a3ba:	e745      	b.n	801a248 <atan+0xc8>
 801a3bc:	4622      	mov	r2, r4
 801a3be:	462b      	mov	r3, r5
 801a3c0:	4938      	ldr	r1, [pc, #224]	@ (801a4a4 <atan+0x324>)
 801a3c2:	2000      	movs	r0, #0
 801a3c4:	f7e6 fa7a 	bl	80008bc <__aeabi_ddiv>
 801a3c8:	f04f 0a03 	mov.w	sl, #3
 801a3cc:	4604      	mov	r4, r0
 801a3ce:	460d      	mov	r5, r1
 801a3d0:	e73a      	b.n	801a248 <atan+0xc8>
 801a3d2:	4b35      	ldr	r3, [pc, #212]	@ (801a4a8 <atan+0x328>)
 801a3d4:	4e35      	ldr	r6, [pc, #212]	@ (801a4ac <atan+0x32c>)
 801a3d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801a3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3de:	f7e5 ff8b 	bl	80002f8 <__aeabi_dsub>
 801a3e2:	4622      	mov	r2, r4
 801a3e4:	462b      	mov	r3, r5
 801a3e6:	f7e5 ff87 	bl	80002f8 <__aeabi_dsub>
 801a3ea:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801a3ee:	4602      	mov	r2, r0
 801a3f0:	460b      	mov	r3, r1
 801a3f2:	e9d6 0100 	ldrd	r0, r1, [r6]
 801a3f6:	f7e5 ff7f 	bl	80002f8 <__aeabi_dsub>
 801a3fa:	f1bb 0f00 	cmp.w	fp, #0
 801a3fe:	4604      	mov	r4, r0
 801a400:	460d      	mov	r5, r1
 801a402:	f6bf aedc 	bge.w	801a1be <atan+0x3e>
 801a406:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801a40a:	461d      	mov	r5, r3
 801a40c:	e6d7      	b.n	801a1be <atan+0x3e>
 801a40e:	a51c      	add	r5, pc, #112	@ (adr r5, 801a480 <atan+0x300>)
 801a410:	e9d5 4500 	ldrd	r4, r5, [r5]
 801a414:	e6d3      	b.n	801a1be <atan+0x3e>
 801a416:	bf00      	nop
 801a418:	54442d18 	.word	0x54442d18
 801a41c:	3ff921fb 	.word	0x3ff921fb
 801a420:	8800759c 	.word	0x8800759c
 801a424:	7e37e43c 	.word	0x7e37e43c
 801a428:	e322da11 	.word	0xe322da11
 801a42c:	3f90ad3a 	.word	0x3f90ad3a
 801a430:	24760deb 	.word	0x24760deb
 801a434:	3fa97b4b 	.word	0x3fa97b4b
 801a438:	a0d03d51 	.word	0xa0d03d51
 801a43c:	3fb10d66 	.word	0x3fb10d66
 801a440:	c54c206e 	.word	0xc54c206e
 801a444:	3fb745cd 	.word	0x3fb745cd
 801a448:	920083ff 	.word	0x920083ff
 801a44c:	3fc24924 	.word	0x3fc24924
 801a450:	5555550d 	.word	0x5555550d
 801a454:	3fd55555 	.word	0x3fd55555
 801a458:	2c6a6c2f 	.word	0x2c6a6c2f
 801a45c:	bfa2b444 	.word	0xbfa2b444
 801a460:	52defd9a 	.word	0x52defd9a
 801a464:	3fadde2d 	.word	0x3fadde2d
 801a468:	af749a6d 	.word	0xaf749a6d
 801a46c:	3fb3b0f2 	.word	0x3fb3b0f2
 801a470:	fe231671 	.word	0xfe231671
 801a474:	3fbc71c6 	.word	0x3fbc71c6
 801a478:	9998ebc4 	.word	0x9998ebc4
 801a47c:	3fc99999 	.word	0x3fc99999
 801a480:	54442d18 	.word	0x54442d18
 801a484:	bff921fb 	.word	0xbff921fb
 801a488:	440fffff 	.word	0x440fffff
 801a48c:	7ff00000 	.word	0x7ff00000
 801a490:	3fdbffff 	.word	0x3fdbffff
 801a494:	3ff00000 	.word	0x3ff00000
 801a498:	3ff2ffff 	.word	0x3ff2ffff
 801a49c:	40038000 	.word	0x40038000
 801a4a0:	3ff80000 	.word	0x3ff80000
 801a4a4:	bff00000 	.word	0xbff00000
 801a4a8:	0801c0b8 	.word	0x0801c0b8
 801a4ac:	0801c0d8 	.word	0x0801c0d8

0801a4b0 <fabs>:
 801a4b0:	ec51 0b10 	vmov	r0, r1, d0
 801a4b4:	4602      	mov	r2, r0
 801a4b6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801a4ba:	ec43 2b10 	vmov	d0, r2, r3
 801a4be:	4770      	bx	lr

0801a4c0 <__ieee754_sqrt>:
 801a4c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a4c4:	4a68      	ldr	r2, [pc, #416]	@ (801a668 <__ieee754_sqrt+0x1a8>)
 801a4c6:	ec55 4b10 	vmov	r4, r5, d0
 801a4ca:	43aa      	bics	r2, r5
 801a4cc:	462b      	mov	r3, r5
 801a4ce:	4621      	mov	r1, r4
 801a4d0:	d110      	bne.n	801a4f4 <__ieee754_sqrt+0x34>
 801a4d2:	4622      	mov	r2, r4
 801a4d4:	4620      	mov	r0, r4
 801a4d6:	4629      	mov	r1, r5
 801a4d8:	f7e6 f8c6 	bl	8000668 <__aeabi_dmul>
 801a4dc:	4602      	mov	r2, r0
 801a4de:	460b      	mov	r3, r1
 801a4e0:	4620      	mov	r0, r4
 801a4e2:	4629      	mov	r1, r5
 801a4e4:	f7e5 ff0a 	bl	80002fc <__adddf3>
 801a4e8:	4604      	mov	r4, r0
 801a4ea:	460d      	mov	r5, r1
 801a4ec:	ec45 4b10 	vmov	d0, r4, r5
 801a4f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a4f4:	2d00      	cmp	r5, #0
 801a4f6:	dc0e      	bgt.n	801a516 <__ieee754_sqrt+0x56>
 801a4f8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801a4fc:	4322      	orrs	r2, r4
 801a4fe:	d0f5      	beq.n	801a4ec <__ieee754_sqrt+0x2c>
 801a500:	b19d      	cbz	r5, 801a52a <__ieee754_sqrt+0x6a>
 801a502:	4622      	mov	r2, r4
 801a504:	4620      	mov	r0, r4
 801a506:	4629      	mov	r1, r5
 801a508:	f7e5 fef6 	bl	80002f8 <__aeabi_dsub>
 801a50c:	4602      	mov	r2, r0
 801a50e:	460b      	mov	r3, r1
 801a510:	f7e6 f9d4 	bl	80008bc <__aeabi_ddiv>
 801a514:	e7e8      	b.n	801a4e8 <__ieee754_sqrt+0x28>
 801a516:	152a      	asrs	r2, r5, #20
 801a518:	d115      	bne.n	801a546 <__ieee754_sqrt+0x86>
 801a51a:	2000      	movs	r0, #0
 801a51c:	e009      	b.n	801a532 <__ieee754_sqrt+0x72>
 801a51e:	0acb      	lsrs	r3, r1, #11
 801a520:	3a15      	subs	r2, #21
 801a522:	0549      	lsls	r1, r1, #21
 801a524:	2b00      	cmp	r3, #0
 801a526:	d0fa      	beq.n	801a51e <__ieee754_sqrt+0x5e>
 801a528:	e7f7      	b.n	801a51a <__ieee754_sqrt+0x5a>
 801a52a:	462a      	mov	r2, r5
 801a52c:	e7fa      	b.n	801a524 <__ieee754_sqrt+0x64>
 801a52e:	005b      	lsls	r3, r3, #1
 801a530:	3001      	adds	r0, #1
 801a532:	02dc      	lsls	r4, r3, #11
 801a534:	d5fb      	bpl.n	801a52e <__ieee754_sqrt+0x6e>
 801a536:	1e44      	subs	r4, r0, #1
 801a538:	1b12      	subs	r2, r2, r4
 801a53a:	f1c0 0420 	rsb	r4, r0, #32
 801a53e:	fa21 f404 	lsr.w	r4, r1, r4
 801a542:	4323      	orrs	r3, r4
 801a544:	4081      	lsls	r1, r0
 801a546:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a54a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801a54e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801a552:	07d2      	lsls	r2, r2, #31
 801a554:	bf5c      	itt	pl
 801a556:	005b      	lslpl	r3, r3, #1
 801a558:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801a55c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801a560:	bf58      	it	pl
 801a562:	0049      	lslpl	r1, r1, #1
 801a564:	2600      	movs	r6, #0
 801a566:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801a56a:	106d      	asrs	r5, r5, #1
 801a56c:	0049      	lsls	r1, r1, #1
 801a56e:	2016      	movs	r0, #22
 801a570:	4632      	mov	r2, r6
 801a572:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801a576:	1917      	adds	r7, r2, r4
 801a578:	429f      	cmp	r7, r3
 801a57a:	bfde      	ittt	le
 801a57c:	193a      	addle	r2, r7, r4
 801a57e:	1bdb      	suble	r3, r3, r7
 801a580:	1936      	addle	r6, r6, r4
 801a582:	0fcf      	lsrs	r7, r1, #31
 801a584:	3801      	subs	r0, #1
 801a586:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801a58a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801a58e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801a592:	d1f0      	bne.n	801a576 <__ieee754_sqrt+0xb6>
 801a594:	4604      	mov	r4, r0
 801a596:	2720      	movs	r7, #32
 801a598:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801a59c:	429a      	cmp	r2, r3
 801a59e:	eb00 0e0c 	add.w	lr, r0, ip
 801a5a2:	db02      	blt.n	801a5aa <__ieee754_sqrt+0xea>
 801a5a4:	d113      	bne.n	801a5ce <__ieee754_sqrt+0x10e>
 801a5a6:	458e      	cmp	lr, r1
 801a5a8:	d811      	bhi.n	801a5ce <__ieee754_sqrt+0x10e>
 801a5aa:	f1be 0f00 	cmp.w	lr, #0
 801a5ae:	eb0e 000c 	add.w	r0, lr, ip
 801a5b2:	da42      	bge.n	801a63a <__ieee754_sqrt+0x17a>
 801a5b4:	2800      	cmp	r0, #0
 801a5b6:	db40      	blt.n	801a63a <__ieee754_sqrt+0x17a>
 801a5b8:	f102 0801 	add.w	r8, r2, #1
 801a5bc:	1a9b      	subs	r3, r3, r2
 801a5be:	458e      	cmp	lr, r1
 801a5c0:	bf88      	it	hi
 801a5c2:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 801a5c6:	eba1 010e 	sub.w	r1, r1, lr
 801a5ca:	4464      	add	r4, ip
 801a5cc:	4642      	mov	r2, r8
 801a5ce:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801a5d2:	3f01      	subs	r7, #1
 801a5d4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801a5d8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801a5dc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801a5e0:	d1dc      	bne.n	801a59c <__ieee754_sqrt+0xdc>
 801a5e2:	4319      	orrs	r1, r3
 801a5e4:	d01b      	beq.n	801a61e <__ieee754_sqrt+0x15e>
 801a5e6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 801a66c <__ieee754_sqrt+0x1ac>
 801a5ea:	f8df b084 	ldr.w	fp, [pc, #132]	@ 801a670 <__ieee754_sqrt+0x1b0>
 801a5ee:	e9da 0100 	ldrd	r0, r1, [sl]
 801a5f2:	e9db 2300 	ldrd	r2, r3, [fp]
 801a5f6:	f7e5 fe7f 	bl	80002f8 <__aeabi_dsub>
 801a5fa:	e9da 8900 	ldrd	r8, r9, [sl]
 801a5fe:	4602      	mov	r2, r0
 801a600:	460b      	mov	r3, r1
 801a602:	4640      	mov	r0, r8
 801a604:	4649      	mov	r1, r9
 801a606:	f7e6 faab 	bl	8000b60 <__aeabi_dcmple>
 801a60a:	b140      	cbz	r0, 801a61e <__ieee754_sqrt+0x15e>
 801a60c:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 801a610:	e9da 0100 	ldrd	r0, r1, [sl]
 801a614:	e9db 2300 	ldrd	r2, r3, [fp]
 801a618:	d111      	bne.n	801a63e <__ieee754_sqrt+0x17e>
 801a61a:	3601      	adds	r6, #1
 801a61c:	463c      	mov	r4, r7
 801a61e:	1072      	asrs	r2, r6, #1
 801a620:	0863      	lsrs	r3, r4, #1
 801a622:	07f1      	lsls	r1, r6, #31
 801a624:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801a628:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801a62c:	bf48      	it	mi
 801a62e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801a632:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801a636:	4618      	mov	r0, r3
 801a638:	e756      	b.n	801a4e8 <__ieee754_sqrt+0x28>
 801a63a:	4690      	mov	r8, r2
 801a63c:	e7be      	b.n	801a5bc <__ieee754_sqrt+0xfc>
 801a63e:	f7e5 fe5d 	bl	80002fc <__adddf3>
 801a642:	e9da 8900 	ldrd	r8, r9, [sl]
 801a646:	4602      	mov	r2, r0
 801a648:	460b      	mov	r3, r1
 801a64a:	4640      	mov	r0, r8
 801a64c:	4649      	mov	r1, r9
 801a64e:	f7e6 fa7d 	bl	8000b4c <__aeabi_dcmplt>
 801a652:	b120      	cbz	r0, 801a65e <__ieee754_sqrt+0x19e>
 801a654:	1ca0      	adds	r0, r4, #2
 801a656:	bf08      	it	eq
 801a658:	3601      	addeq	r6, #1
 801a65a:	3402      	adds	r4, #2
 801a65c:	e7df      	b.n	801a61e <__ieee754_sqrt+0x15e>
 801a65e:	1c63      	adds	r3, r4, #1
 801a660:	f023 0401 	bic.w	r4, r3, #1
 801a664:	e7db      	b.n	801a61e <__ieee754_sqrt+0x15e>
 801a666:	bf00      	nop
 801a668:	7ff00000 	.word	0x7ff00000
 801a66c:	20000998 	.word	0x20000998
 801a670:	20000990 	.word	0x20000990
 801a674:	00000000 	.word	0x00000000

0801a678 <__ieee754_atan2>:
 801a678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a67c:	ec57 6b11 	vmov	r6, r7, d1
 801a680:	4273      	negs	r3, r6
 801a682:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 801a800 <__ieee754_atan2+0x188>
 801a686:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 801a68a:	4333      	orrs	r3, r6
 801a68c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801a690:	4543      	cmp	r3, r8
 801a692:	ec51 0b10 	vmov	r0, r1, d0
 801a696:	4635      	mov	r5, r6
 801a698:	d809      	bhi.n	801a6ae <__ieee754_atan2+0x36>
 801a69a:	4244      	negs	r4, r0
 801a69c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801a6a0:	4304      	orrs	r4, r0
 801a6a2:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801a6a6:	4544      	cmp	r4, r8
 801a6a8:	468e      	mov	lr, r1
 801a6aa:	4681      	mov	r9, r0
 801a6ac:	d907      	bls.n	801a6be <__ieee754_atan2+0x46>
 801a6ae:	4632      	mov	r2, r6
 801a6b0:	463b      	mov	r3, r7
 801a6b2:	f7e5 fe23 	bl	80002fc <__adddf3>
 801a6b6:	ec41 0b10 	vmov	d0, r0, r1
 801a6ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a6be:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 801a6c2:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 801a6c6:	4334      	orrs	r4, r6
 801a6c8:	d103      	bne.n	801a6d2 <__ieee754_atan2+0x5a>
 801a6ca:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a6ce:	f7ff bd57 	b.w	801a180 <atan>
 801a6d2:	17bc      	asrs	r4, r7, #30
 801a6d4:	f004 0402 	and.w	r4, r4, #2
 801a6d8:	ea53 0909 	orrs.w	r9, r3, r9
 801a6dc:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801a6e0:	d107      	bne.n	801a6f2 <__ieee754_atan2+0x7a>
 801a6e2:	2c02      	cmp	r4, #2
 801a6e4:	d05f      	beq.n	801a7a6 <__ieee754_atan2+0x12e>
 801a6e6:	2c03      	cmp	r4, #3
 801a6e8:	d1e5      	bne.n	801a6b6 <__ieee754_atan2+0x3e>
 801a6ea:	a141      	add	r1, pc, #260	@ (adr r1, 801a7f0 <__ieee754_atan2+0x178>)
 801a6ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a6f0:	e7e1      	b.n	801a6b6 <__ieee754_atan2+0x3e>
 801a6f2:	4315      	orrs	r5, r2
 801a6f4:	d106      	bne.n	801a704 <__ieee754_atan2+0x8c>
 801a6f6:	f1be 0f00 	cmp.w	lr, #0
 801a6fa:	da5f      	bge.n	801a7bc <__ieee754_atan2+0x144>
 801a6fc:	a13e      	add	r1, pc, #248	@ (adr r1, 801a7f8 <__ieee754_atan2+0x180>)
 801a6fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a702:	e7d8      	b.n	801a6b6 <__ieee754_atan2+0x3e>
 801a704:	4542      	cmp	r2, r8
 801a706:	d10f      	bne.n	801a728 <__ieee754_atan2+0xb0>
 801a708:	4293      	cmp	r3, r2
 801a70a:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 801a70e:	d107      	bne.n	801a720 <__ieee754_atan2+0xa8>
 801a710:	2c02      	cmp	r4, #2
 801a712:	d84c      	bhi.n	801a7ae <__ieee754_atan2+0x136>
 801a714:	4b34      	ldr	r3, [pc, #208]	@ (801a7e8 <__ieee754_atan2+0x170>)
 801a716:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801a71a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a71e:	e7ca      	b.n	801a6b6 <__ieee754_atan2+0x3e>
 801a720:	2c02      	cmp	r4, #2
 801a722:	d848      	bhi.n	801a7b6 <__ieee754_atan2+0x13e>
 801a724:	4b31      	ldr	r3, [pc, #196]	@ (801a7ec <__ieee754_atan2+0x174>)
 801a726:	e7f6      	b.n	801a716 <__ieee754_atan2+0x9e>
 801a728:	4543      	cmp	r3, r8
 801a72a:	d0e4      	beq.n	801a6f6 <__ieee754_atan2+0x7e>
 801a72c:	1a9b      	subs	r3, r3, r2
 801a72e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801a732:	ea4f 5223 	mov.w	r2, r3, asr #20
 801a736:	da1e      	bge.n	801a776 <__ieee754_atan2+0xfe>
 801a738:	2f00      	cmp	r7, #0
 801a73a:	da01      	bge.n	801a740 <__ieee754_atan2+0xc8>
 801a73c:	323c      	adds	r2, #60	@ 0x3c
 801a73e:	db1e      	blt.n	801a77e <__ieee754_atan2+0x106>
 801a740:	4632      	mov	r2, r6
 801a742:	463b      	mov	r3, r7
 801a744:	f7e6 f8ba 	bl	80008bc <__aeabi_ddiv>
 801a748:	ec41 0b10 	vmov	d0, r0, r1
 801a74c:	f7ff feb0 	bl	801a4b0 <fabs>
 801a750:	f7ff fd16 	bl	801a180 <atan>
 801a754:	ec51 0b10 	vmov	r0, r1, d0
 801a758:	2c01      	cmp	r4, #1
 801a75a:	d013      	beq.n	801a784 <__ieee754_atan2+0x10c>
 801a75c:	2c02      	cmp	r4, #2
 801a75e:	d015      	beq.n	801a78c <__ieee754_atan2+0x114>
 801a760:	2c00      	cmp	r4, #0
 801a762:	d0a8      	beq.n	801a6b6 <__ieee754_atan2+0x3e>
 801a764:	a318      	add	r3, pc, #96	@ (adr r3, 801a7c8 <__ieee754_atan2+0x150>)
 801a766:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a76a:	f7e5 fdc5 	bl	80002f8 <__aeabi_dsub>
 801a76e:	a318      	add	r3, pc, #96	@ (adr r3, 801a7d0 <__ieee754_atan2+0x158>)
 801a770:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a774:	e014      	b.n	801a7a0 <__ieee754_atan2+0x128>
 801a776:	a118      	add	r1, pc, #96	@ (adr r1, 801a7d8 <__ieee754_atan2+0x160>)
 801a778:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a77c:	e7ec      	b.n	801a758 <__ieee754_atan2+0xe0>
 801a77e:	2000      	movs	r0, #0
 801a780:	2100      	movs	r1, #0
 801a782:	e7e9      	b.n	801a758 <__ieee754_atan2+0xe0>
 801a784:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801a788:	4619      	mov	r1, r3
 801a78a:	e794      	b.n	801a6b6 <__ieee754_atan2+0x3e>
 801a78c:	a30e      	add	r3, pc, #56	@ (adr r3, 801a7c8 <__ieee754_atan2+0x150>)
 801a78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a792:	f7e5 fdb1 	bl	80002f8 <__aeabi_dsub>
 801a796:	4602      	mov	r2, r0
 801a798:	460b      	mov	r3, r1
 801a79a:	a10d      	add	r1, pc, #52	@ (adr r1, 801a7d0 <__ieee754_atan2+0x158>)
 801a79c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a7a0:	f7e5 fdaa 	bl	80002f8 <__aeabi_dsub>
 801a7a4:	e787      	b.n	801a6b6 <__ieee754_atan2+0x3e>
 801a7a6:	a10a      	add	r1, pc, #40	@ (adr r1, 801a7d0 <__ieee754_atan2+0x158>)
 801a7a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a7ac:	e783      	b.n	801a6b6 <__ieee754_atan2+0x3e>
 801a7ae:	a10c      	add	r1, pc, #48	@ (adr r1, 801a7e0 <__ieee754_atan2+0x168>)
 801a7b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a7b4:	e77f      	b.n	801a6b6 <__ieee754_atan2+0x3e>
 801a7b6:	2000      	movs	r0, #0
 801a7b8:	2100      	movs	r1, #0
 801a7ba:	e77c      	b.n	801a6b6 <__ieee754_atan2+0x3e>
 801a7bc:	a106      	add	r1, pc, #24	@ (adr r1, 801a7d8 <__ieee754_atan2+0x160>)
 801a7be:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a7c2:	e778      	b.n	801a6b6 <__ieee754_atan2+0x3e>
 801a7c4:	f3af 8000 	nop.w
 801a7c8:	33145c07 	.word	0x33145c07
 801a7cc:	3ca1a626 	.word	0x3ca1a626
 801a7d0:	54442d18 	.word	0x54442d18
 801a7d4:	400921fb 	.word	0x400921fb
 801a7d8:	54442d18 	.word	0x54442d18
 801a7dc:	3ff921fb 	.word	0x3ff921fb
 801a7e0:	54442d18 	.word	0x54442d18
 801a7e4:	3fe921fb 	.word	0x3fe921fb
 801a7e8:	0801c110 	.word	0x0801c110
 801a7ec:	0801c0f8 	.word	0x0801c0f8
 801a7f0:	54442d18 	.word	0x54442d18
 801a7f4:	c00921fb 	.word	0xc00921fb
 801a7f8:	54442d18 	.word	0x54442d18
 801a7fc:	bff921fb 	.word	0xbff921fb
 801a800:	7ff00000 	.word	0x7ff00000

0801a804 <_init>:
 801a804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a806:	bf00      	nop
 801a808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a80a:	bc08      	pop	{r3}
 801a80c:	469e      	mov	lr, r3
 801a80e:	4770      	bx	lr

0801a810 <_fini>:
 801a810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a812:	bf00      	nop
 801a814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a816:	bc08      	pop	{r3}
 801a818:	469e      	mov	lr, r3
 801a81a:	4770      	bx	lr
