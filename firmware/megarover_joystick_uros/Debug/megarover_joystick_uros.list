
megarover_joystick_uros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001afbc  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a38  0801b1a0  0801b1a0  0001c1a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801cbd8  0801cbd8  0001ea60  2**0
                  CONTENTS
  4 .ARM          00000008  0801cbd8  0801cbd8  0001dbd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801cbe0  0801cbe0  0001ea60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000014  0801cbe0  0801cbe0  0001dbe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801cbf4  0801cbf4  0001dbf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000a60  20000000  0801cbf8  0001e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b2c4  20000a60  0801d658  0001ea60  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000bd24  0801d658  0001ed24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001ea60  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026b37  00000000  00000000  0001ea90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000533b  00000000  00000000  000455c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e58  00000000  00000000  0004a908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000178b  00000000  00000000  0004c760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d835  00000000  00000000  0004deeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026f12  00000000  00000000  0007b720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011649d  00000000  00000000  000a2632  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  001b8acf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000090f4  00000000  00000000  001b8b48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  001c1c3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000a60 	.word	0x20000a60
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801b184 	.word	0x0801b184

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000a64 	.word	0x20000a64
 800021c:	0801b184 	.word	0x0801b184

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_ldivmod>:
 8000c68:	b97b      	cbnz	r3, 8000c8a <__aeabi_ldivmod+0x22>
 8000c6a:	b972      	cbnz	r2, 8000c8a <__aeabi_ldivmod+0x22>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bfbe      	ittt	lt
 8000c70:	2000      	movlt	r0, #0
 8000c72:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c76:	e006      	blt.n	8000c86 <__aeabi_ldivmod+0x1e>
 8000c78:	bf08      	it	eq
 8000c7a:	2800      	cmpeq	r0, #0
 8000c7c:	bf1c      	itt	ne
 8000c7e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c82:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c86:	f000 b9d3 	b.w	8001030 <__aeabi_idiv0>
 8000c8a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c8e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c92:	2900      	cmp	r1, #0
 8000c94:	db09      	blt.n	8000caa <__aeabi_ldivmod+0x42>
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	db1a      	blt.n	8000cd0 <__aeabi_ldivmod+0x68>
 8000c9a:	f000 f86b 	bl	8000d74 <__udivmoddi4>
 8000c9e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca6:	b004      	add	sp, #16
 8000ca8:	4770      	bx	lr
 8000caa:	4240      	negs	r0, r0
 8000cac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	db1b      	blt.n	8000cec <__aeabi_ldivmod+0x84>
 8000cb4:	f000 f85e 	bl	8000d74 <__udivmoddi4>
 8000cb8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc0:	b004      	add	sp, #16
 8000cc2:	4240      	negs	r0, r0
 8000cc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc8:	4252      	negs	r2, r2
 8000cca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cce:	4770      	bx	lr
 8000cd0:	4252      	negs	r2, r2
 8000cd2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd6:	f000 f84d 	bl	8000d74 <__udivmoddi4>
 8000cda:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce2:	b004      	add	sp, #16
 8000ce4:	4240      	negs	r0, r0
 8000ce6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cea:	4770      	bx	lr
 8000cec:	4252      	negs	r2, r2
 8000cee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf2:	f000 f83f 	bl	8000d74 <__udivmoddi4>
 8000cf6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cfe:	b004      	add	sp, #16
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_uldivmod>:
 8000d08:	b953      	cbnz	r3, 8000d20 <__aeabi_uldivmod+0x18>
 8000d0a:	b94a      	cbnz	r2, 8000d20 <__aeabi_uldivmod+0x18>
 8000d0c:	2900      	cmp	r1, #0
 8000d0e:	bf08      	it	eq
 8000d10:	2800      	cmpeq	r0, #0
 8000d12:	bf1c      	itt	ne
 8000d14:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000d18:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000d1c:	f000 b988 	b.w	8001030 <__aeabi_idiv0>
 8000d20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d28:	f000 f824 	bl	8000d74 <__udivmoddi4>
 8000d2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d34:	b004      	add	sp, #16
 8000d36:	4770      	bx	lr

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc91 	bl	8000668 <__aeabi_dmul>
 8000d46:	f000 f975 	bl	8001034 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc12 	bl	8000574 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc88 	bl	8000668 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faca 	bl	80002f8 <__aeabi_dsub>
 8000d64:	f000 f966 	bl	8001034 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <__aeabi_d2uiz>:
 8001034:	004a      	lsls	r2, r1, #1
 8001036:	d211      	bcs.n	800105c <__aeabi_d2uiz+0x28>
 8001038:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800103c:	d211      	bcs.n	8001062 <__aeabi_d2uiz+0x2e>
 800103e:	d50d      	bpl.n	800105c <__aeabi_d2uiz+0x28>
 8001040:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8001044:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8001048:	d40e      	bmi.n	8001068 <__aeabi_d2uiz+0x34>
 800104a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800104e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001052:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8001056:	fa23 f002 	lsr.w	r0, r3, r2
 800105a:	4770      	bx	lr
 800105c:	f04f 0000 	mov.w	r0, #0
 8001060:	4770      	bx	lr
 8001062:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8001066:	d102      	bne.n	800106e <__aeabi_d2uiz+0x3a>
 8001068:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800106c:	4770      	bx	lr
 800106e:	f04f 0000 	mov.w	r0, #0
 8001072:	4770      	bx	lr

08001074 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001078:	4a04      	ldr	r2, [pc, #16]	@ (800108c <MX_FREERTOS_Init+0x18>)
 800107a:	2100      	movs	r1, #0
 800107c:	4804      	ldr	r0, [pc, #16]	@ (8001090 <MX_FREERTOS_Init+0x1c>)
 800107e:	f007 f93b 	bl	80082f8 <osThreadNew>
 8001082:	4603      	mov	r3, r0
 8001084:	4a03      	ldr	r2, [pc, #12]	@ (8001094 <MX_FREERTOS_Init+0x20>)
 8001086:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	0801b270 	.word	0x0801b270
 8001090:	08002329 	.word	0x08002329
 8001094:	20000a7c 	.word	0x20000a7c

08001098 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08a      	sub	sp, #40	@ 0x28
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80010a4:	f008 f9fc 	bl	80094a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80010a8:	4b5a      	ldr	r3, [pc, #360]	@ (8001214 <pvPortMallocMicroROS+0x17c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d101      	bne.n	80010b4 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80010b0:	f000 f986 	bl	80013c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80010b4:	4b58      	ldr	r3, [pc, #352]	@ (8001218 <pvPortMallocMicroROS+0x180>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4013      	ands	r3, r2
 80010bc:	2b00      	cmp	r3, #0
 80010be:	f040 8090 	bne.w	80011e2 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d01e      	beq.n	8001106 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80010c8:	2208      	movs	r2, #8
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4413      	add	r3, r2
 80010ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d015      	beq.n	8001106 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f023 0307 	bic.w	r3, r3, #7
 80010e0:	3308      	adds	r3, #8
 80010e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d00b      	beq.n	8001106 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80010ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010f2:	f383 8811 	msr	BASEPRI, r3
 80010f6:	f3bf 8f6f 	isb	sy
 80010fa:	f3bf 8f4f 	dsb	sy
 80010fe:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001100:	bf00      	nop
 8001102:	bf00      	nop
 8001104:	e7fd      	b.n	8001102 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d06a      	beq.n	80011e2 <pvPortMallocMicroROS+0x14a>
 800110c:	4b43      	ldr	r3, [pc, #268]	@ (800121c <pvPortMallocMicroROS+0x184>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	429a      	cmp	r2, r3
 8001114:	d865      	bhi.n	80011e2 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001116:	4b42      	ldr	r3, [pc, #264]	@ (8001220 <pvPortMallocMicroROS+0x188>)
 8001118:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800111a:	4b41      	ldr	r3, [pc, #260]	@ (8001220 <pvPortMallocMicroROS+0x188>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001120:	e004      	b.n	800112c <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8001122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001124:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800112c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	429a      	cmp	r2, r3
 8001134:	d903      	bls.n	800113e <pvPortMallocMicroROS+0xa6>
 8001136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1f1      	bne.n	8001122 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800113e:	4b35      	ldr	r3, [pc, #212]	@ (8001214 <pvPortMallocMicroROS+0x17c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001144:	429a      	cmp	r2, r3
 8001146:	d04c      	beq.n	80011e2 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001148:	6a3b      	ldr	r3, [r7, #32]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2208      	movs	r2, #8
 800114e:	4413      	add	r3, r2
 8001150:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	6a3b      	ldr	r3, [r7, #32]
 8001158:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800115a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800115c:	685a      	ldr	r2, [r3, #4]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	1ad2      	subs	r2, r2, r3
 8001162:	2308      	movs	r3, #8
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	429a      	cmp	r2, r3
 8001168:	d920      	bls.n	80011ac <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800116a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4413      	add	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	f003 0307 	and.w	r3, r3, #7
 8001178:	2b00      	cmp	r3, #0
 800117a:	d00b      	beq.n	8001194 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 800117c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001180:	f383 8811 	msr	BASEPRI, r3
 8001184:	f3bf 8f6f 	isb	sy
 8001188:	f3bf 8f4f 	dsb	sy
 800118c:	613b      	str	r3, [r7, #16]
}
 800118e:	bf00      	nop
 8001190:	bf00      	nop
 8001192:	e7fd      	b.n	8001190 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001196:	685a      	ldr	r2, [r3, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	1ad2      	subs	r2, r2, r3
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80011a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80011a6:	69b8      	ldr	r0, [r7, #24]
 80011a8:	f000 f96c 	bl	8001484 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80011ac:	4b1b      	ldr	r3, [pc, #108]	@ (800121c <pvPortMallocMicroROS+0x184>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	4a19      	ldr	r2, [pc, #100]	@ (800121c <pvPortMallocMicroROS+0x184>)
 80011b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80011ba:	4b18      	ldr	r3, [pc, #96]	@ (800121c <pvPortMallocMicroROS+0x184>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	4b19      	ldr	r3, [pc, #100]	@ (8001224 <pvPortMallocMicroROS+0x18c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d203      	bcs.n	80011ce <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80011c6:	4b15      	ldr	r3, [pc, #84]	@ (800121c <pvPortMallocMicroROS+0x184>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a16      	ldr	r2, [pc, #88]	@ (8001224 <pvPortMallocMicroROS+0x18c>)
 80011cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80011ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d0:	685a      	ldr	r2, [r3, #4]
 80011d2:	4b11      	ldr	r3, [pc, #68]	@ (8001218 <pvPortMallocMicroROS+0x180>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	431a      	orrs	r2, r3
 80011d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80011dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80011e2:	f008 f96b 	bl	80094bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	f003 0307 	and.w	r3, r3, #7
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d00b      	beq.n	8001208 <pvPortMallocMicroROS+0x170>
	__asm volatile
 80011f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011f4:	f383 8811 	msr	BASEPRI, r3
 80011f8:	f3bf 8f6f 	isb	sy
 80011fc:	f3bf 8f4f 	dsb	sy
 8001200:	60fb      	str	r3, [r7, #12]
}
 8001202:	bf00      	nop
 8001204:	bf00      	nop
 8001206:	e7fd      	b.n	8001204 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8001208:	69fb      	ldr	r3, [r7, #28]
}
 800120a:	4618      	mov	r0, r3
 800120c:	3728      	adds	r7, #40	@ 0x28
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	200045c4 	.word	0x200045c4
 8001218:	200045d0 	.word	0x200045d0
 800121c:	200045c8 	.word	0x200045c8
 8001220:	200045bc 	.word	0x200045bc
 8001224:	200045cc 	.word	0x200045cc

08001228 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d04a      	beq.n	80012d0 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800123a:	2308      	movs	r3, #8
 800123c:	425b      	negs	r3, r3
 800123e:	697a      	ldr	r2, [r7, #20]
 8001240:	4413      	add	r3, r2
 8001242:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	685a      	ldr	r2, [r3, #4]
 800124c:	4b22      	ldr	r3, [pc, #136]	@ (80012d8 <vPortFreeMicroROS+0xb0>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4013      	ands	r3, r2
 8001252:	2b00      	cmp	r3, #0
 8001254:	d10b      	bne.n	800126e <vPortFreeMicroROS+0x46>
	__asm volatile
 8001256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800125a:	f383 8811 	msr	BASEPRI, r3
 800125e:	f3bf 8f6f 	isb	sy
 8001262:	f3bf 8f4f 	dsb	sy
 8001266:	60fb      	str	r3, [r7, #12]
}
 8001268:	bf00      	nop
 800126a:	bf00      	nop
 800126c:	e7fd      	b.n	800126a <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d00b      	beq.n	800128e <vPortFreeMicroROS+0x66>
	__asm volatile
 8001276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800127a:	f383 8811 	msr	BASEPRI, r3
 800127e:	f3bf 8f6f 	isb	sy
 8001282:	f3bf 8f4f 	dsb	sy
 8001286:	60bb      	str	r3, [r7, #8]
}
 8001288:	bf00      	nop
 800128a:	bf00      	nop
 800128c:	e7fd      	b.n	800128a <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	685a      	ldr	r2, [r3, #4]
 8001292:	4b11      	ldr	r3, [pc, #68]	@ (80012d8 <vPortFreeMicroROS+0xb0>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4013      	ands	r3, r2
 8001298:	2b00      	cmp	r3, #0
 800129a:	d019      	beq.n	80012d0 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d115      	bne.n	80012d0 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	685a      	ldr	r2, [r3, #4]
 80012a8:	4b0b      	ldr	r3, [pc, #44]	@ (80012d8 <vPortFreeMicroROS+0xb0>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	43db      	mvns	r3, r3
 80012ae:	401a      	ands	r2, r3
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80012b4:	f008 f8f4 	bl	80094a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	685a      	ldr	r2, [r3, #4]
 80012bc:	4b07      	ldr	r3, [pc, #28]	@ (80012dc <vPortFreeMicroROS+0xb4>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4413      	add	r3, r2
 80012c2:	4a06      	ldr	r2, [pc, #24]	@ (80012dc <vPortFreeMicroROS+0xb4>)
 80012c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80012c6:	6938      	ldr	r0, [r7, #16]
 80012c8:	f000 f8dc 	bl	8001484 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80012cc:	f008 f8f6 	bl	80094bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80012d0:	bf00      	nop
 80012d2:	3718      	adds	r7, #24
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	200045d0 	.word	0x200045d0
 80012dc:	200045c8 	.word	0x200045c8

080012e0 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80012e0:	b480      	push	{r7}
 80012e2:	b087      	sub	sp, #28
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80012ec:	2308      	movs	r3, #8
 80012ee:	425b      	negs	r3, r3
 80012f0:	697a      	ldr	r2, [r7, #20]
 80012f2:	4413      	add	r3, r2
 80012f4:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	685a      	ldr	r2, [r3, #4]
 80012fe:	4b06      	ldr	r3, [pc, #24]	@ (8001318 <getBlockSize+0x38>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	43db      	mvns	r3, r3
 8001304:	4013      	ands	r3, r2
 8001306:	60fb      	str	r3, [r7, #12]

	return count;
 8001308:	68fb      	ldr	r3, [r7, #12]
}
 800130a:	4618      	mov	r0, r3
 800130c:	371c      	adds	r7, #28
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	200045d0 	.word	0x200045d0

0800131c <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001326:	f008 f8bb 	bl	80094a0 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800132a:	6838      	ldr	r0, [r7, #0]
 800132c:	f7ff feb4 	bl	8001098 <pvPortMallocMicroROS>
 8001330:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d017      	beq.n	8001368 <pvPortReallocMicroROS+0x4c>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d014      	beq.n	8001368 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff ffce 	bl	80012e0 <getBlockSize>
 8001344:	4603      	mov	r3, r0
 8001346:	2208      	movs	r2, #8
 8001348:	1a9b      	subs	r3, r3, r2
 800134a:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 800134c:	683a      	ldr	r2, [r7, #0]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	429a      	cmp	r2, r3
 8001352:	d201      	bcs.n	8001358 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8001358:	68fa      	ldr	r2, [r7, #12]
 800135a:	6879      	ldr	r1, [r7, #4]
 800135c:	68b8      	ldr	r0, [r7, #8]
 800135e:	f018 fd3a 	bl	8019dd6 <memcpy>

		vPortFreeMicroROS(pv);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff ff60 	bl	8001228 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8001368:	f008 f8a8 	bl	80094bc <xTaskResumeAll>

	return newmem;
 800136c:	68bb      	ldr	r3, [r7, #8]
}
 800136e:	4618      	mov	r0, r3
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b086      	sub	sp, #24
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
 800137e:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001380:	f008 f88e 	bl	80094a0 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	fb02 f303 	mul.w	r3, r2, r3
 800138c:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 800138e:	6978      	ldr	r0, [r7, #20]
 8001390:	f7ff fe82 	bl	8001098 <pvPortMallocMicroROS>
 8001394:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	613b      	str	r3, [r7, #16]

  	while(count--)
 800139a:	e004      	b.n	80013a6 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	1c5a      	adds	r2, r3, #1
 80013a0:	613a      	str	r2, [r7, #16]
 80013a2:	2200      	movs	r2, #0
 80013a4:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	1e5a      	subs	r2, r3, #1
 80013aa:	617a      	str	r2, [r7, #20]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1f5      	bne.n	800139c <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80013b0:	f008 f884 	bl	80094bc <xTaskResumeAll>
  	return mem;
 80013b4:	68fb      	ldr	r3, [r7, #12]
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3718      	adds	r7, #24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80013c6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80013ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80013cc:	4b27      	ldr	r3, [pc, #156]	@ (800146c <prvHeapInit+0xac>)
 80013ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d00c      	beq.n	80013f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	3307      	adds	r3, #7
 80013de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f023 0307 	bic.w	r3, r3, #7
 80013e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80013e8:	68ba      	ldr	r2, [r7, #8]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	4a1f      	ldr	r2, [pc, #124]	@ (800146c <prvHeapInit+0xac>)
 80013f0:	4413      	add	r3, r2
 80013f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80013f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001470 <prvHeapInit+0xb0>)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80013fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001470 <prvHeapInit+0xb0>)
 8001400:	2200      	movs	r2, #0
 8001402:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	68ba      	ldr	r2, [r7, #8]
 8001408:	4413      	add	r3, r2
 800140a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800140c:	2208      	movs	r2, #8
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	1a9b      	subs	r3, r3, r2
 8001412:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f023 0307 	bic.w	r3, r3, #7
 800141a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	4a15      	ldr	r2, [pc, #84]	@ (8001474 <prvHeapInit+0xb4>)
 8001420:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001422:	4b14      	ldr	r3, [pc, #80]	@ (8001474 <prvHeapInit+0xb4>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2200      	movs	r2, #0
 8001428:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800142a:	4b12      	ldr	r3, [pc, #72]	@ (8001474 <prvHeapInit+0xb4>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	68fa      	ldr	r2, [r7, #12]
 800143a:	1ad2      	subs	r2, r2, r3
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001440:	4b0c      	ldr	r3, [pc, #48]	@ (8001474 <prvHeapInit+0xb4>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	4a0a      	ldr	r2, [pc, #40]	@ (8001478 <prvHeapInit+0xb8>)
 800144e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	4a09      	ldr	r2, [pc, #36]	@ (800147c <prvHeapInit+0xbc>)
 8001456:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001458:	4b09      	ldr	r3, [pc, #36]	@ (8001480 <prvHeapInit+0xc0>)
 800145a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800145e:	601a      	str	r2, [r3, #0]
}
 8001460:	bf00      	nop
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	200039bc 	.word	0x200039bc
 8001470:	200045bc 	.word	0x200045bc
 8001474:	200045c4 	.word	0x200045c4
 8001478:	200045cc 	.word	0x200045cc
 800147c:	200045c8 	.word	0x200045c8
 8001480:	200045d0 	.word	0x200045d0

08001484 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800148c:	4b28      	ldr	r3, [pc, #160]	@ (8001530 <prvInsertBlockIntoFreeList+0xac>)
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	e002      	b.n	8001498 <prvInsertBlockIntoFreeList+0x14>
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	429a      	cmp	r2, r3
 80014a0:	d8f7      	bhi.n	8001492 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	68ba      	ldr	r2, [r7, #8]
 80014ac:	4413      	add	r3, r2
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d108      	bne.n	80014c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	685a      	ldr	r2, [r3, #4]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	441a      	add	r2, r3
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	68ba      	ldr	r2, [r7, #8]
 80014d0:	441a      	add	r2, r3
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d118      	bne.n	800150c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	4b15      	ldr	r3, [pc, #84]	@ (8001534 <prvInsertBlockIntoFreeList+0xb0>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d00d      	beq.n	8001502 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685a      	ldr	r2, [r3, #4]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	441a      	add	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	e008      	b.n	8001514 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001502:	4b0c      	ldr	r3, [pc, #48]	@ (8001534 <prvInsertBlockIntoFreeList+0xb0>)
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	e003      	b.n	8001514 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001514:	68fa      	ldr	r2, [r7, #12]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	429a      	cmp	r2, r3
 800151a:	d002      	beq.n	8001522 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001522:	bf00      	nop
 8001524:	3714      	adds	r7, #20
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	200045bc 	.word	0x200045bc
 8001534:	200045c4 	.word	0x200045c4

08001538 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800153e:	4b16      	ldr	r3, [pc, #88]	@ (8001598 <MX_DMA_Init+0x60>)
 8001540:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001542:	4a15      	ldr	r2, [pc, #84]	@ (8001598 <MX_DMA_Init+0x60>)
 8001544:	f043 0304 	orr.w	r3, r3, #4
 8001548:	6493      	str	r3, [r2, #72]	@ 0x48
 800154a:	4b13      	ldr	r3, [pc, #76]	@ (8001598 <MX_DMA_Init+0x60>)
 800154c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800154e:	f003 0304 	and.w	r3, r3, #4
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001556:	4b10      	ldr	r3, [pc, #64]	@ (8001598 <MX_DMA_Init+0x60>)
 8001558:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800155a:	4a0f      	ldr	r2, [pc, #60]	@ (8001598 <MX_DMA_Init+0x60>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	6493      	str	r3, [r2, #72]	@ 0x48
 8001562:	4b0d      	ldr	r3, [pc, #52]	@ (8001598 <MX_DMA_Init+0x60>)
 8001564:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	603b      	str	r3, [r7, #0]
 800156c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800156e:	2200      	movs	r2, #0
 8001570:	2105      	movs	r1, #5
 8001572:	200b      	movs	r0, #11
 8001574:	f001 fdbe 	bl	80030f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001578:	200b      	movs	r0, #11
 800157a:	f001 fdd5 	bl	8003128 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 800157e:	2200      	movs	r2, #0
 8001580:	2105      	movs	r1, #5
 8001582:	200c      	movs	r0, #12
 8001584:	f001 fdb6 	bl	80030f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001588:	200c      	movs	r0, #12
 800158a:	f001 fdcd 	bl	8003128 <HAL_NVIC_EnableIRQ>

}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40021000 	.word	0x40021000

0800159c <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80015aa:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80015ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80015b0:	4904      	ldr	r1, [pc, #16]	@ (80015c4 <cubemx_transport_open+0x28>)
 80015b2:	68f8      	ldr	r0, [r7, #12]
 80015b4:	f004 fd62 	bl	800607c <HAL_UART_Receive_DMA>
    return true;
 80015b8:	2301      	movs	r3, #1
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	200045d4 	.word	0x200045d4

080015c8 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80015d6:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 80015d8:	68f8      	ldr	r0, [r7, #12]
 80015da:	f004 fd9b 	bl	8006114 <HAL_UART_DMAStop>
    return true;
 80015de:	2301      	movs	r3, #1
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3710      	adds	r7, #16
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
 80015f4:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80015fc:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001604:	2b20      	cmp	r3, #32
 8001606:	d11b      	bne.n	8001640 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	b29b      	uxth	r3, r3
 800160c:	461a      	mov	r2, r3
 800160e:	68b9      	ldr	r1, [r7, #8]
 8001610:	6978      	ldr	r0, [r7, #20]
 8001612:	f004 fcb3 	bl	8005f7c <HAL_UART_Transmit_DMA>
 8001616:	4603      	mov	r3, r0
 8001618:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800161a:	e002      	b.n	8001622 <cubemx_transport_write+0x3a>
            osDelay(1);
 800161c:	2001      	movs	r0, #1
 800161e:	f006 fefd 	bl	800841c <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001622:	7cfb      	ldrb	r3, [r7, #19]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d104      	bne.n	8001632 <cubemx_transport_write+0x4a>
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800162e:	2b20      	cmp	r3, #32
 8001630:	d1f4      	bne.n	800161c <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 8001632:	7cfb      	ldrb	r3, [r7, #19]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d101      	bne.n	800163c <cubemx_transport_write+0x54>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	e002      	b.n	8001642 <cubemx_transport_write+0x5a>
 800163c:	2300      	movs	r3, #0
 800163e:	e000      	b.n	8001642 <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8001640:	2300      	movs	r3, #0
    }
}
 8001642:	4618      	mov	r0, r3
 8001644:	3718      	adds	r7, #24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
	...

0800164c <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 800164c:	b580      	push	{r7, lr}
 800164e:	b088      	sub	sp, #32
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
 8001658:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001660:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001662:	2300      	movs	r3, #0
 8001664:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001666:	b672      	cpsid	i
}
 8001668:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001678:	4a1b      	ldr	r2, [pc, #108]	@ (80016e8 <cubemx_transport_read+0x9c>)
 800167a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800167c:	b662      	cpsie	i
}
 800167e:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	3301      	adds	r3, #1
 8001684:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001686:	2001      	movs	r0, #1
 8001688:	f006 fec8 	bl	800841c <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 800168c:	4b17      	ldr	r3, [pc, #92]	@ (80016ec <cubemx_transport_read+0xa0>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	4b15      	ldr	r3, [pc, #84]	@ (80016e8 <cubemx_transport_read+0x9c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	429a      	cmp	r2, r3
 8001696:	d103      	bne.n	80016a0 <cubemx_transport_read+0x54>
 8001698:	69fa      	ldr	r2, [r7, #28]
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	429a      	cmp	r2, r3
 800169e:	dbe2      	blt.n	8001666 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80016a4:	e011      	b.n	80016ca <cubemx_transport_read+0x7e>
        buf[wrote] = dma_buffer[dma_head];
 80016a6:	4b11      	ldr	r3, [pc, #68]	@ (80016ec <cubemx_transport_read+0xa0>)
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	68b9      	ldr	r1, [r7, #8]
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	440b      	add	r3, r1
 80016b0:	490f      	ldr	r1, [pc, #60]	@ (80016f0 <cubemx_transport_read+0xa4>)
 80016b2:	5c8a      	ldrb	r2, [r1, r2]
 80016b4:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80016b6:	4b0d      	ldr	r3, [pc, #52]	@ (80016ec <cubemx_transport_read+0xa0>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	3301      	adds	r3, #1
 80016bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016c0:	4a0a      	ldr	r2, [pc, #40]	@ (80016ec <cubemx_transport_read+0xa0>)
 80016c2:	6013      	str	r3, [r2, #0]
        wrote++;
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	3301      	adds	r3, #1
 80016c8:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80016ca:	4b08      	ldr	r3, [pc, #32]	@ (80016ec <cubemx_transport_read+0xa0>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	4b06      	ldr	r3, [pc, #24]	@ (80016e8 <cubemx_transport_read+0x9c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d003      	beq.n	80016de <cubemx_transport_read+0x92>
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d3e3      	bcc.n	80016a6 <cubemx_transport_read+0x5a>
    }
    
    return wrote;
 80016de:	69bb      	ldr	r3, [r7, #24]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3720      	adds	r7, #32
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20004dd8 	.word	0x20004dd8
 80016ec:	20004dd4 	.word	0x20004dd4
 80016f0:	200045d4 	.word	0x200045d4

080016f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b08a      	sub	sp, #40	@ 0x28
 80016f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fa:	f107 0314 	add.w	r3, r7, #20
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	609a      	str	r2, [r3, #8]
 8001706:	60da      	str	r2, [r3, #12]
 8001708:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800170a:	4b2f      	ldr	r3, [pc, #188]	@ (80017c8 <MX_GPIO_Init+0xd4>)
 800170c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800170e:	4a2e      	ldr	r2, [pc, #184]	@ (80017c8 <MX_GPIO_Init+0xd4>)
 8001710:	f043 0304 	orr.w	r3, r3, #4
 8001714:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001716:	4b2c      	ldr	r3, [pc, #176]	@ (80017c8 <MX_GPIO_Init+0xd4>)
 8001718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800171a:	f003 0304 	and.w	r3, r3, #4
 800171e:	613b      	str	r3, [r7, #16]
 8001720:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001722:	4b29      	ldr	r3, [pc, #164]	@ (80017c8 <MX_GPIO_Init+0xd4>)
 8001724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001726:	4a28      	ldr	r2, [pc, #160]	@ (80017c8 <MX_GPIO_Init+0xd4>)
 8001728:	f043 0320 	orr.w	r3, r3, #32
 800172c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800172e:	4b26      	ldr	r3, [pc, #152]	@ (80017c8 <MX_GPIO_Init+0xd4>)
 8001730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001732:	f003 0320 	and.w	r3, r3, #32
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800173a:	4b23      	ldr	r3, [pc, #140]	@ (80017c8 <MX_GPIO_Init+0xd4>)
 800173c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800173e:	4a22      	ldr	r2, [pc, #136]	@ (80017c8 <MX_GPIO_Init+0xd4>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001746:	4b20      	ldr	r3, [pc, #128]	@ (80017c8 <MX_GPIO_Init+0xd4>)
 8001748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	60bb      	str	r3, [r7, #8]
 8001750:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001752:	4b1d      	ldr	r3, [pc, #116]	@ (80017c8 <MX_GPIO_Init+0xd4>)
 8001754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001756:	4a1c      	ldr	r2, [pc, #112]	@ (80017c8 <MX_GPIO_Init+0xd4>)
 8001758:	f043 0302 	orr.w	r3, r3, #2
 800175c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800175e:	4b1a      	ldr	r3, [pc, #104]	@ (80017c8 <MX_GPIO_Init+0xd4>)
 8001760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	607b      	str	r3, [r7, #4]
 8001768:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800176a:	2200      	movs	r2, #0
 800176c:	2120      	movs	r1, #32
 800176e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001772:	f002 f9a7 	bl	8003ac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001776:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800177a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800177c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001780:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001786:	f107 0314 	add.w	r3, r7, #20
 800178a:	4619      	mov	r1, r3
 800178c:	480f      	ldr	r0, [pc, #60]	@ (80017cc <MX_GPIO_Init+0xd8>)
 800178e:	f002 f817 	bl	80037c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001792:	2320      	movs	r3, #32
 8001794:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001796:	2301      	movs	r3, #1
 8001798:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179e:	2300      	movs	r3, #0
 80017a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80017a2:	f107 0314 	add.w	r3, r7, #20
 80017a6:	4619      	mov	r1, r3
 80017a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017ac:	f002 f808 	bl	80037c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80017b0:	2200      	movs	r2, #0
 80017b2:	2105      	movs	r1, #5
 80017b4:	2028      	movs	r0, #40	@ 0x28
 80017b6:	f001 fc9d 	bl	80030f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017ba:	2028      	movs	r0, #40	@ 0x28
 80017bc:	f001 fcb4 	bl	8003128 <HAL_NVIC_EnableIRQ>

}
 80017c0:	bf00      	nop
 80017c2:	3728      	adds	r7, #40	@ 0x28
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40021000 	.word	0x40021000
 80017cc:	48000800 	.word	0x48000800

080017d0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001844 <MX_I2C1_Init+0x74>)
 80017d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001848 <MX_I2C1_Init+0x78>)
 80017d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40621236;
 80017da:	4b1a      	ldr	r3, [pc, #104]	@ (8001844 <MX_I2C1_Init+0x74>)
 80017dc:	4a1b      	ldr	r2, [pc, #108]	@ (800184c <MX_I2C1_Init+0x7c>)
 80017de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80017e0:	4b18      	ldr	r3, [pc, #96]	@ (8001844 <MX_I2C1_Init+0x74>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017e6:	4b17      	ldr	r3, [pc, #92]	@ (8001844 <MX_I2C1_Init+0x74>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017ec:	4b15      	ldr	r3, [pc, #84]	@ (8001844 <MX_I2C1_Init+0x74>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80017f2:	4b14      	ldr	r3, [pc, #80]	@ (8001844 <MX_I2C1_Init+0x74>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017f8:	4b12      	ldr	r3, [pc, #72]	@ (8001844 <MX_I2C1_Init+0x74>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017fe:	4b11      	ldr	r3, [pc, #68]	@ (8001844 <MX_I2C1_Init+0x74>)
 8001800:	2200      	movs	r2, #0
 8001802:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001804:	4b0f      	ldr	r3, [pc, #60]	@ (8001844 <MX_I2C1_Init+0x74>)
 8001806:	2200      	movs	r2, #0
 8001808:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800180a:	480e      	ldr	r0, [pc, #56]	@ (8001844 <MX_I2C1_Init+0x74>)
 800180c:	f002 f995 	bl	8003b3a <HAL_I2C_Init>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001816:	f000 ff29 	bl	800266c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800181a:	2100      	movs	r1, #0
 800181c:	4809      	ldr	r0, [pc, #36]	@ (8001844 <MX_I2C1_Init+0x74>)
 800181e:	f002 ff17 	bl	8004650 <HAL_I2CEx_ConfigAnalogFilter>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001828:	f000 ff20 	bl	800266c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800182c:	2100      	movs	r1, #0
 800182e:	4805      	ldr	r0, [pc, #20]	@ (8001844 <MX_I2C1_Init+0x74>)
 8001830:	f002 ff59 	bl	80046e6 <HAL_I2CEx_ConfigDigitalFilter>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800183a:	f000 ff17 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	20004ddc 	.word	0x20004ddc
 8001848:	40005400 	.word	0x40005400
 800184c:	40621236 	.word	0x40621236

08001850 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b09e      	sub	sp, #120	@ 0x78
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001858:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001868:	f107 0310 	add.w	r3, r7, #16
 800186c:	2254      	movs	r2, #84	@ 0x54
 800186e:	2100      	movs	r1, #0
 8001870:	4618      	mov	r0, r3
 8001872:	f018 f9e7 	bl	8019c44 <memset>
  if(i2cHandle->Instance==I2C1)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a1f      	ldr	r2, [pc, #124]	@ (80018f8 <HAL_I2C_MspInit+0xa8>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d136      	bne.n	80018ee <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001880:	2340      	movs	r3, #64	@ 0x40
 8001882:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001884:	2300      	movs	r3, #0
 8001886:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001888:	f107 0310 	add.w	r3, r7, #16
 800188c:	4618      	mov	r0, r3
 800188e:	f003 fd8b 	bl	80053a8 <HAL_RCCEx_PeriphCLKConfig>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001898:	f000 fee8 	bl	800266c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800189c:	4b17      	ldr	r3, [pc, #92]	@ (80018fc <HAL_I2C_MspInit+0xac>)
 800189e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018a0:	4a16      	ldr	r2, [pc, #88]	@ (80018fc <HAL_I2C_MspInit+0xac>)
 80018a2:	f043 0302 	orr.w	r3, r3, #2
 80018a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018a8:	4b14      	ldr	r3, [pc, #80]	@ (80018fc <HAL_I2C_MspInit+0xac>)
 80018aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ac:	f003 0302 	and.w	r3, r3, #2
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018b4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80018b8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018ba:	2312      	movs	r3, #18
 80018bc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	2300      	movs	r3, #0
 80018c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c2:	2300      	movs	r3, #0
 80018c4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018c6:	2304      	movs	r3, #4
 80018c8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ca:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80018ce:	4619      	mov	r1, r3
 80018d0:	480b      	ldr	r0, [pc, #44]	@ (8001900 <HAL_I2C_MspInit+0xb0>)
 80018d2:	f001 ff75 	bl	80037c0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018d6:	4b09      	ldr	r3, [pc, #36]	@ (80018fc <HAL_I2C_MspInit+0xac>)
 80018d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018da:	4a08      	ldr	r2, [pc, #32]	@ (80018fc <HAL_I2C_MspInit+0xac>)
 80018dc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80018e2:	4b06      	ldr	r3, [pc, #24]	@ (80018fc <HAL_I2C_MspInit+0xac>)
 80018e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018ea:	60bb      	str	r3, [r7, #8]
 80018ec:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80018ee:	bf00      	nop
 80018f0:	3778      	adds	r7, #120	@ 0x78
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40005400 	.word	0x40005400
 80018fc:	40021000 	.word	0x40021000
 8001900:	48000400 	.word	0x48000400
 8001904:	00000000 	.word	0x00000000

08001908 <Kalman_Init>:
void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Kalman_Init(KalmanFilter *kalman) {
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
    kalman->angle = 0.0;
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	f04f 0200 	mov.w	r2, #0
 8001916:	f04f 0300 	mov.w	r3, #0
 800191a:	e9c1 2300 	strd	r2, r3, [r1]
    kalman->bias = 0.0;
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	f04f 0200 	mov.w	r2, #0
 8001924:	f04f 0300 	mov.w	r3, #0
 8001928:	e9c1 2302 	strd	r2, r3, [r1, #8]
    kalman->P[0][0] = 1.0;
 800192c:	6879      	ldr	r1, [r7, #4]
 800192e:	f04f 0200 	mov.w	r2, #0
 8001932:	4b1d      	ldr	r3, [pc, #116]	@ (80019a8 <Kalman_Init+0xa0>)
 8001934:	e9c1 2306 	strd	r2, r3, [r1, #24]
    kalman->P[0][1] = 0.0;
 8001938:	6879      	ldr	r1, [r7, #4]
 800193a:	f04f 0200 	mov.w	r2, #0
 800193e:	f04f 0300 	mov.w	r3, #0
 8001942:	e9c1 2308 	strd	r2, r3, [r1, #32]
    kalman->P[1][0] = 0.0;
 8001946:	6879      	ldr	r1, [r7, #4]
 8001948:	f04f 0200 	mov.w	r2, #0
 800194c:	f04f 0300 	mov.w	r3, #0
 8001950:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    kalman->P[1][1] = 1.0;
 8001954:	6879      	ldr	r1, [r7, #4]
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	4b13      	ldr	r3, [pc, #76]	@ (80019a8 <Kalman_Init+0xa0>)
 800195c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    kalman->Q_angle = 0.001;
 8001960:	6879      	ldr	r1, [r7, #4]
 8001962:	a30b      	add	r3, pc, #44	@ (adr r3, 8001990 <Kalman_Init+0x88>)
 8001964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001968:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    kalman->Q_bias = 0.003;
 800196c:	6879      	ldr	r1, [r7, #4]
 800196e:	a30a      	add	r3, pc, #40	@ (adr r3, 8001998 <Kalman_Init+0x90>)
 8001970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001974:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    kalman->R_measure = 0.03;
 8001978:	6879      	ldr	r1, [r7, #4]
 800197a:	a309      	add	r3, pc, #36	@ (adr r3, 80019a0 <Kalman_Init+0x98>)
 800197c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001980:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	d2f1a9fc 	.word	0xd2f1a9fc
 8001994:	3f50624d 	.word	0x3f50624d
 8001998:	bc6a7efa 	.word	0xbc6a7efa
 800199c:	3f689374 	.word	0x3f689374
 80019a0:	eb851eb8 	.word	0xeb851eb8
 80019a4:	3f9eb851 	.word	0x3f9eb851
 80019a8:	3ff00000 	.word	0x3ff00000
 80019ac:	00000000 	.word	0x00000000

080019b0 <angle_from_acc>:
void angle_from_acc(){
 80019b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80019b4:	b086      	sub	sp, #24
 80019b6:	af00      	add	r7, sp, #0
	double acc_x = MPU6050.Ax - accel_offset.x;
 80019b8:	4b51      	ldr	r3, [pc, #324]	@ (8001b00 <angle_from_acc+0x150>)
 80019ba:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80019be:	4b51      	ldr	r3, [pc, #324]	@ (8001b04 <angle_from_acc+0x154>)
 80019c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c4:	f7fe fc98 	bl	80002f8 <__aeabi_dsub>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double acc_y = MPU6050.Ay - accel_offset.y;
 80019d0:	4b4b      	ldr	r3, [pc, #300]	@ (8001b00 <angle_from_acc+0x150>)
 80019d2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80019d6:	4b4b      	ldr	r3, [pc, #300]	@ (8001b04 <angle_from_acc+0x154>)
 80019d8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80019dc:	f7fe fc8c 	bl	80002f8 <__aeabi_dsub>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	e9c7 2302 	strd	r2, r3, [r7, #8]
	double acc_z = MPU6050.Az - accel_offset.z;
 80019e8:	4b45      	ldr	r3, [pc, #276]	@ (8001b00 <angle_from_acc+0x150>)
 80019ea:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80019ee:	4b45      	ldr	r3, [pc, #276]	@ (8001b04 <angle_from_acc+0x154>)
 80019f0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80019f4:	f7fe fc80 	bl	80002f8 <__aeabi_dsub>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	e9c7 2300 	strd	r2, r3, [r7]

	acc_roll_angle = RAD2DEG * atan2(acc_y , sqrt((acc_x*acc_x) + (acc_z*acc_z)));
 8001a00:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a04:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a08:	f7fe fe2e 	bl	8000668 <__aeabi_dmul>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	4690      	mov	r8, r2
 8001a12:	4699      	mov	r9, r3
 8001a14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a1c:	f7fe fe24 	bl	8000668 <__aeabi_dmul>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	4640      	mov	r0, r8
 8001a26:	4649      	mov	r1, r9
 8001a28:	f7fe fc68 	bl	80002fc <__adddf3>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	460b      	mov	r3, r1
 8001a30:	ec43 2b17 	vmov	d7, r2, r3
 8001a34:	eeb0 0a47 	vmov.f32	s0, s14
 8001a38:	eef0 0a67 	vmov.f32	s1, s15
 8001a3c:	f019 f80e 	bl	801aa5c <sqrt>
 8001a40:	eeb0 7a40 	vmov.f32	s14, s0
 8001a44:	eef0 7a60 	vmov.f32	s15, s1
 8001a48:	eeb0 1a47 	vmov.f32	s2, s14
 8001a4c:	eef0 1a67 	vmov.f32	s3, s15
 8001a50:	ed97 0b02 	vldr	d0, [r7, #8]
 8001a54:	f019 f800 	bl	801aa58 <atan2>
 8001a58:	ec51 0b10 	vmov	r0, r1, d0
 8001a5c:	a326      	add	r3, pc, #152	@ (adr r3, 8001af8 <angle_from_acc+0x148>)
 8001a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a62:	f7fe fe01 	bl	8000668 <__aeabi_dmul>
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
 8001a6a:	4927      	ldr	r1, [pc, #156]	@ (8001b08 <angle_from_acc+0x158>)
 8001a6c:	e9c1 2300 	strd	r2, r3, [r1]
	acc_pitch_angle = RAD2DEG * atan2(-1 * acc_x , sqrt((acc_y*acc_y) + (acc_z*acc_z)));
 8001a70:	693c      	ldr	r4, [r7, #16]
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001a78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a7c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a80:	f7fe fdf2 	bl	8000668 <__aeabi_dmul>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	4690      	mov	r8, r2
 8001a8a:	4699      	mov	r9, r3
 8001a8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a94:	f7fe fde8 	bl	8000668 <__aeabi_dmul>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	4640      	mov	r0, r8
 8001a9e:	4649      	mov	r1, r9
 8001aa0:	f7fe fc2c 	bl	80002fc <__adddf3>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	ec43 2b17 	vmov	d7, r2, r3
 8001aac:	eeb0 0a47 	vmov.f32	s0, s14
 8001ab0:	eef0 0a67 	vmov.f32	s1, s15
 8001ab4:	f018 ffd2 	bl	801aa5c <sqrt>
 8001ab8:	eeb0 7a40 	vmov.f32	s14, s0
 8001abc:	eef0 7a60 	vmov.f32	s15, s1
 8001ac0:	eeb0 1a47 	vmov.f32	s2, s14
 8001ac4:	eef0 1a67 	vmov.f32	s3, s15
 8001ac8:	ec45 4b10 	vmov	d0, r4, r5
 8001acc:	f018 ffc4 	bl	801aa58 <atan2>
 8001ad0:	ec51 0b10 	vmov	r0, r1, d0
 8001ad4:	a308      	add	r3, pc, #32	@ (adr r3, 8001af8 <angle_from_acc+0x148>)
 8001ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ada:	f7fe fdc5 	bl	8000668 <__aeabi_dmul>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	490a      	ldr	r1, [pc, #40]	@ (8001b0c <angle_from_acc+0x15c>)
 8001ae4:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001ae8:	bf00      	nop
 8001aea:	3718      	adds	r7, #24
 8001aec:	46bd      	mov	sp, r7
 8001aee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001af2:	bf00      	nop
 8001af4:	f3af 8000 	nop.w
 8001af8:	1a63c1f8 	.word	0x1a63c1f8
 8001afc:	404ca5dc 	.word	0x404ca5dc
 8001b00:	200051e0 	.word	0x200051e0
 8001b04:	20005238 	.word	0x20005238
 8001b08:	20005308 	.word	0x20005308
 8001b0c:	20005310 	.word	0x20005310

08001b10 <angle_kalman>:

double angle_kalman(KalmanFilter *kalman, double new_angle, double new_rate){
 8001b10:	b5b0      	push	{r4, r5, r7, lr}
 8001b12:	b092      	sub	sp, #72	@ 0x48
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6178      	str	r0, [r7, #20]
 8001b18:	ed87 0b02 	vstr	d0, [r7, #8]
 8001b1c:	ed87 1b00 	vstr	d1, [r7]
	// prediction step
	kalman->rate = new_rate - kalman->bias;
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001b26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b2a:	f7fe fbe5 	bl	80002f8 <__aeabi_dsub>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	6979      	ldr	r1, [r7, #20]
 8001b34:	e9c1 2304 	strd	r2, r3, [r1, #16]
	kalman->angle += dt * kalman->rate;
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001b44:	4ba3      	ldr	r3, [pc, #652]	@ (8001dd4 <angle_kalman+0x2c4>)
 8001b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4a:	f7fe fd8d 	bl	8000668 <__aeabi_dmul>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	4620      	mov	r0, r4
 8001b54:	4629      	mov	r1, r5
 8001b56:	f7fe fbd1 	bl	80002fc <__adddf3>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	6979      	ldr	r1, [r7, #20]
 8001b60:	e9c1 2300 	strd	r2, r3, [r1]

	// update covariance matrix
	kalman->P[0][0] += dt * (dt * kalman->P[1][1] - kalman->P[0][1] - kalman->P[1][0] + kalman->Q_angle);
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8001b70:	4b98      	ldr	r3, [pc, #608]	@ (8001dd4 <angle_kalman+0x2c4>)
 8001b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b76:	f7fe fd77 	bl	8000668 <__aeabi_dmul>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	4610      	mov	r0, r2
 8001b80:	4619      	mov	r1, r3
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001b88:	f7fe fbb6 	bl	80002f8 <__aeabi_dsub>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4610      	mov	r0, r2
 8001b92:	4619      	mov	r1, r3
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001b9a:	f7fe fbad 	bl	80002f8 <__aeabi_dsub>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	4610      	mov	r0, r2
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001bac:	f7fe fba6 	bl	80002fc <__adddf3>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4610      	mov	r0, r2
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4b86      	ldr	r3, [pc, #536]	@ (8001dd4 <angle_kalman+0x2c4>)
 8001bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbe:	f7fe fd53 	bl	8000668 <__aeabi_dmul>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	4620      	mov	r0, r4
 8001bc8:	4629      	mov	r1, r5
 8001bca:	f7fe fb97 	bl	80002fc <__adddf3>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	6979      	ldr	r1, [r7, #20]
 8001bd4:	e9c1 2306 	strd	r2, r3, [r1, #24]
	kalman->P[0][1] -= dt * kalman->P[1][1];
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8001be4:	4b7b      	ldr	r3, [pc, #492]	@ (8001dd4 <angle_kalman+0x2c4>)
 8001be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bea:	f7fe fd3d 	bl	8000668 <__aeabi_dmul>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	4620      	mov	r0, r4
 8001bf4:	4629      	mov	r1, r5
 8001bf6:	f7fe fb7f 	bl	80002f8 <__aeabi_dsub>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	6979      	ldr	r1, [r7, #20]
 8001c00:	e9c1 2308 	strd	r2, r3, [r1, #32]
	kalman->P[1][0] -= dt * kalman->P[1][1];
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8001c10:	4b70      	ldr	r3, [pc, #448]	@ (8001dd4 <angle_kalman+0x2c4>)
 8001c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c16:	f7fe fd27 	bl	8000668 <__aeabi_dmul>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	4620      	mov	r0, r4
 8001c20:	4629      	mov	r1, r5
 8001c22:	f7fe fb69 	bl	80002f8 <__aeabi_dsub>
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	6979      	ldr	r1, [r7, #20]
 8001c2c:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	kalman->P[1][1] += kalman->Q_bias * dt;
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001c3c:	4b65      	ldr	r3, [pc, #404]	@ (8001dd4 <angle_kalman+0x2c4>)
 8001c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c42:	f7fe fd11 	bl	8000668 <__aeabi_dmul>
 8001c46:	4602      	mov	r2, r0
 8001c48:	460b      	mov	r3, r1
 8001c4a:	4620      	mov	r0, r4
 8001c4c:	4629      	mov	r1, r5
 8001c4e:	f7fe fb55 	bl	80002fc <__adddf3>
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	6979      	ldr	r1, [r7, #20]
 8001c58:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

	// update value
	double S = kalman->P[0][0] + kalman->R_measure;
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8001c68:	f7fe fb48 	bl	80002fc <__adddf3>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	double K[2];
	K[0] = kalman->P[0][0] / S;
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001c7a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001c7e:	f7fe fe1d 	bl	80008bc <__aeabi_ddiv>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	e9c7 2306 	strd	r2, r3, [r7, #24]
	K[1] = kalman->P[1][0] / S;
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001c90:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001c94:	f7fe fe12 	bl	80008bc <__aeabi_ddiv>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	e9c7 2308 	strd	r2, r3, [r7, #32]

	double y = new_angle - kalman->angle;
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001caa:	f7fe fb25 	bl	80002f8 <__aeabi_dsub>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	kalman->angle += K[0] * y;
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001cbc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001cc0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001cc4:	f7fe fcd0 	bl	8000668 <__aeabi_dmul>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	4620      	mov	r0, r4
 8001cce:	4629      	mov	r1, r5
 8001cd0:	f7fe fb14 	bl	80002fc <__adddf3>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	6979      	ldr	r1, [r7, #20]
 8001cda:	e9c1 2300 	strd	r2, r3, [r1]
	kalman->bias += K[1] * y;
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001ce4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ce8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001cec:	f7fe fcbc 	bl	8000668 <__aeabi_dmul>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	4620      	mov	r0, r4
 8001cf6:	4629      	mov	r1, r5
 8001cf8:	f7fe fb00 	bl	80002fc <__adddf3>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	6979      	ldr	r1, [r7, #20]
 8001d02:	e9c1 2302 	strd	r2, r3, [r1, #8]

	// update covariance matrix
	double P00_temp = kalman->P[0][0];
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001d0c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	double P01_temp = kalman->P[0][1];
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001d16:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

	kalman->P[0][0] -= K[0] * P00_temp;
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001d20:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d24:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001d28:	f7fe fc9e 	bl	8000668 <__aeabi_dmul>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	460b      	mov	r3, r1
 8001d30:	4620      	mov	r0, r4
 8001d32:	4629      	mov	r1, r5
 8001d34:	f7fe fae0 	bl	80002f8 <__aeabi_dsub>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	6979      	ldr	r1, [r7, #20]
 8001d3e:	e9c1 2306 	strd	r2, r3, [r1, #24]
	kalman->P[0][1] -= K[0] * P01_temp;
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001d48:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001d50:	f7fe fc8a 	bl	8000668 <__aeabi_dmul>
 8001d54:	4602      	mov	r2, r0
 8001d56:	460b      	mov	r3, r1
 8001d58:	4620      	mov	r0, r4
 8001d5a:	4629      	mov	r1, r5
 8001d5c:	f7fe facc 	bl	80002f8 <__aeabi_dsub>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	6979      	ldr	r1, [r7, #20]
 8001d66:	e9c1 2308 	strd	r2, r3, [r1, #32]
	kalman->P[1][0] -= K[1] * P00_temp;
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8001d70:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001d74:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001d78:	f7fe fc76 	bl	8000668 <__aeabi_dmul>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
 8001d80:	4620      	mov	r0, r4
 8001d82:	4629      	mov	r1, r5
 8001d84:	f7fe fab8 	bl	80002f8 <__aeabi_dsub>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	6979      	ldr	r1, [r7, #20]
 8001d8e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	kalman->P[1][1] -= K[1] * P01_temp;
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8001d98:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001d9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001da0:	f7fe fc62 	bl	8000668 <__aeabi_dmul>
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	4620      	mov	r0, r4
 8001daa:	4629      	mov	r1, r5
 8001dac:	f7fe faa4 	bl	80002f8 <__aeabi_dsub>
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	6979      	ldr	r1, [r7, #20]
 8001db6:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

	return kalman->angle;
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc0:	ec43 2b17 	vmov	d7, r2, r3
}
 8001dc4:	eeb0 0a47 	vmov.f32	s0, s14
 8001dc8:	eef0 0a67 	vmov.f32	s1, s15
 8001dcc:	3748      	adds	r7, #72	@ 0x48
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bdb0      	pop	{r4, r5, r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	20000000 	.word	0x20000000

08001dd8 <convert_to_cmd_vel>:

void convert_to_cmd_vel(){
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
	linear_vel_x = roundf((roll_angle + 1.0) * 100) / 100;
 8001ddc:	4b2e      	ldr	r3, [pc, #184]	@ (8001e98 <convert_to_cmd_vel+0xc0>)
 8001dde:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001de2:	f04f 0200 	mov.w	r2, #0
 8001de6:	4b2d      	ldr	r3, [pc, #180]	@ (8001e9c <convert_to_cmd_vel+0xc4>)
 8001de8:	f7fe fa88 	bl	80002fc <__adddf3>
 8001dec:	4602      	mov	r2, r0
 8001dee:	460b      	mov	r3, r1
 8001df0:	4610      	mov	r0, r2
 8001df2:	4619      	mov	r1, r3
 8001df4:	f04f 0200 	mov.w	r2, #0
 8001df8:	4b29      	ldr	r3, [pc, #164]	@ (8001ea0 <convert_to_cmd_vel+0xc8>)
 8001dfa:	f7fe fc35 	bl	8000668 <__aeabi_dmul>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	460b      	mov	r3, r1
 8001e02:	4610      	mov	r0, r2
 8001e04:	4619      	mov	r1, r3
 8001e06:	f7fe fedf 	bl	8000bc8 <__aeabi_d2f>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	ee00 3a10 	vmov	s0, r3
 8001e10:	f019 f8cc 	bl	801afac <roundf>
 8001e14:	eef0 7a40 	vmov.f32	s15, s0
 8001e18:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001ea4 <convert_to_cmd_vel+0xcc>
 8001e1c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001e20:	ee16 0a90 	vmov	r0, s13
 8001e24:	f7fe fbc8 	bl	80005b8 <__aeabi_f2d>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	491e      	ldr	r1, [pc, #120]	@ (8001ea8 <convert_to_cmd_vel+0xd0>)
 8001e2e:	e9c1 2300 	strd	r2, r3, [r1]
	angular_vel_z = roundf((pitch_angle - 8.2)* 100) / 100;
 8001e32:	4b1e      	ldr	r3, [pc, #120]	@ (8001eac <convert_to_cmd_vel+0xd4>)
 8001e34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e38:	a315      	add	r3, pc, #84	@ (adr r3, 8001e90 <convert_to_cmd_vel+0xb8>)
 8001e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3e:	f7fe fa5b 	bl	80002f8 <__aeabi_dsub>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	4610      	mov	r0, r2
 8001e48:	4619      	mov	r1, r3
 8001e4a:	f04f 0200 	mov.w	r2, #0
 8001e4e:	4b14      	ldr	r3, [pc, #80]	@ (8001ea0 <convert_to_cmd_vel+0xc8>)
 8001e50:	f7fe fc0a 	bl	8000668 <__aeabi_dmul>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	4610      	mov	r0, r2
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	f7fe feb4 	bl	8000bc8 <__aeabi_d2f>
 8001e60:	4603      	mov	r3, r0
 8001e62:	ee00 3a10 	vmov	s0, r3
 8001e66:	f019 f8a1 	bl	801afac <roundf>
 8001e6a:	eef0 7a40 	vmov.f32	s15, s0
 8001e6e:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8001ea4 <convert_to_cmd_vel+0xcc>
 8001e72:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001e76:	ee16 0a90 	vmov	r0, s13
 8001e7a:	f7fe fb9d 	bl	80005b8 <__aeabi_f2d>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	460b      	mov	r3, r1
 8001e82:	490b      	ldr	r1, [pc, #44]	@ (8001eb0 <convert_to_cmd_vel+0xd8>)
 8001e84:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001e88:	bf00      	nop
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	f3af 8000 	nop.w
 8001e90:	66666666 	.word	0x66666666
 8001e94:	40206666 	.word	0x40206666
 8001e98:	20005318 	.word	0x20005318
 8001e9c:	3ff00000 	.word	0x3ff00000
 8001ea0:	40590000 	.word	0x40590000
 8001ea4:	42c80000 	.word	0x42c80000
 8001ea8:	20005338 	.word	0x20005338
 8001eac:	20005320 	.word	0x20005320
 8001eb0:	20005340 	.word	0x20005340
 8001eb4:	00000000 	.word	0x00000000

08001eb8 <pub_mpu6050>:

void pub_mpu6050(){
 8001eb8:	b590      	push	{r4, r7, lr}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
	// Set value in mpu6050_msg
	mpu6050_msg.header.frame_id = micro_ros_string_utilities_init("mpu6050_frame");
 8001ebe:	4c5a      	ldr	r4, [pc, #360]	@ (8002028 <pub_mpu6050+0x170>)
 8001ec0:	463b      	mov	r3, r7
 8001ec2:	495a      	ldr	r1, [pc, #360]	@ (800202c <pub_mpu6050+0x174>)
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f009 faad 	bl	800b424 <micro_ros_string_utilities_init>
 8001eca:	f104 0308 	add.w	r3, r4, #8
 8001ece:	463a      	mov	r2, r7
 8001ed0:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ed2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	mpu6050_msg.header.stamp.sec = rmw_uros_epoch_millis()/1000;
 8001ed6:	f00c ff83 	bl	800ede0 <rmw_uros_epoch_millis>
 8001eda:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001ede:	f04f 0300 	mov.w	r3, #0
 8001ee2:	f7fe fec1 	bl	8000c68 <__aeabi_ldivmod>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	460b      	mov	r3, r1
 8001eea:	4b4f      	ldr	r3, [pc, #316]	@ (8002028 <pub_mpu6050+0x170>)
 8001eec:	601a      	str	r2, [r3, #0]
	mpu6050_msg.header.stamp.nanosec = rmw_uros_epoch_nanos();
 8001eee:	f00c ff85 	bl	800edfc <rmw_uros_epoch_nanos>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	4b4c      	ldr	r3, [pc, #304]	@ (8002028 <pub_mpu6050+0x170>)
 8001ef8:	605a      	str	r2, [r3, #4]

	mpu6050_msg.linear_acceleration.x = G2M_S2 * MPU6050.Ax - accel_offset.x;
 8001efa:	4b4d      	ldr	r3, [pc, #308]	@ (8002030 <pub_mpu6050+0x178>)
 8001efc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001f00:	a345      	add	r3, pc, #276	@ (adr r3, 8002018 <pub_mpu6050+0x160>)
 8001f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f06:	f7fe fbaf 	bl	8000668 <__aeabi_dmul>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	4610      	mov	r0, r2
 8001f10:	4619      	mov	r1, r3
 8001f12:	4b48      	ldr	r3, [pc, #288]	@ (8002034 <pub_mpu6050+0x17c>)
 8001f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f18:	f7fe f9ee 	bl	80002f8 <__aeabi_dsub>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4941      	ldr	r1, [pc, #260]	@ (8002028 <pub_mpu6050+0x170>)
 8001f22:	e9c1 2338 	strd	r2, r3, [r1, #224]	@ 0xe0
	mpu6050_msg.linear_acceleration.y = G2M_S2 * MPU6050.Ay - accel_offset.y;
 8001f26:	4b42      	ldr	r3, [pc, #264]	@ (8002030 <pub_mpu6050+0x178>)
 8001f28:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001f2c:	a33a      	add	r3, pc, #232	@ (adr r3, 8002018 <pub_mpu6050+0x160>)
 8001f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f32:	f7fe fb99 	bl	8000668 <__aeabi_dmul>
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	4610      	mov	r0, r2
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4b3d      	ldr	r3, [pc, #244]	@ (8002034 <pub_mpu6050+0x17c>)
 8001f40:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001f44:	f7fe f9d8 	bl	80002f8 <__aeabi_dsub>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	4936      	ldr	r1, [pc, #216]	@ (8002028 <pub_mpu6050+0x170>)
 8001f4e:	e9c1 233a 	strd	r2, r3, [r1, #232]	@ 0xe8
	mpu6050_msg.linear_acceleration.z = G2M_S2 * MPU6050.Az - accel_offset.z;
 8001f52:	4b37      	ldr	r3, [pc, #220]	@ (8002030 <pub_mpu6050+0x178>)
 8001f54:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001f58:	a32f      	add	r3, pc, #188	@ (adr r3, 8002018 <pub_mpu6050+0x160>)
 8001f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f5e:	f7fe fb83 	bl	8000668 <__aeabi_dmul>
 8001f62:	4602      	mov	r2, r0
 8001f64:	460b      	mov	r3, r1
 8001f66:	4610      	mov	r0, r2
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4b32      	ldr	r3, [pc, #200]	@ (8002034 <pub_mpu6050+0x17c>)
 8001f6c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001f70:	f7fe f9c2 	bl	80002f8 <__aeabi_dsub>
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	492b      	ldr	r1, [pc, #172]	@ (8002028 <pub_mpu6050+0x170>)
 8001f7a:	e9c1 233c 	strd	r2, r3, [r1, #240]	@ 0xf0

	mpu6050_msg.angular_velocity.x = DEG2RAD * MPU6050.Gx - gyro_offset.x;
 8001f7e:	4b2c      	ldr	r3, [pc, #176]	@ (8002030 <pub_mpu6050+0x178>)
 8001f80:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001f84:	a326      	add	r3, pc, #152	@ (adr r3, 8002020 <pub_mpu6050+0x168>)
 8001f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f8a:	f7fe fb6d 	bl	8000668 <__aeabi_dmul>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	460b      	mov	r3, r1
 8001f92:	4610      	mov	r0, r2
 8001f94:	4619      	mov	r1, r3
 8001f96:	4b28      	ldr	r3, [pc, #160]	@ (8002038 <pub_mpu6050+0x180>)
 8001f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f9c:	f7fe f9ac 	bl	80002f8 <__aeabi_dsub>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	4920      	ldr	r1, [pc, #128]	@ (8002028 <pub_mpu6050+0x170>)
 8001fa6:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
	mpu6050_msg.angular_velocity.y = DEG2RAD * MPU6050.Gy - gyro_offset.y;
 8001faa:	4b21      	ldr	r3, [pc, #132]	@ (8002030 <pub_mpu6050+0x178>)
 8001fac:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8001fb0:	a31b      	add	r3, pc, #108	@ (adr r3, 8002020 <pub_mpu6050+0x168>)
 8001fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb6:	f7fe fb57 	bl	8000668 <__aeabi_dmul>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	4610      	mov	r0, r2
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4b1d      	ldr	r3, [pc, #116]	@ (8002038 <pub_mpu6050+0x180>)
 8001fc4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001fc8:	f7fe f996 	bl	80002f8 <__aeabi_dsub>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	4915      	ldr	r1, [pc, #84]	@ (8002028 <pub_mpu6050+0x170>)
 8001fd2:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
	mpu6050_msg.angular_velocity.z = DEG2RAD * MPU6050.Gz - gyro_offset.z;
 8001fd6:	4b16      	ldr	r3, [pc, #88]	@ (8002030 <pub_mpu6050+0x178>)
 8001fd8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8001fdc:	a310      	add	r3, pc, #64	@ (adr r3, 8002020 <pub_mpu6050+0x168>)
 8001fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe2:	f7fe fb41 	bl	8000668 <__aeabi_dmul>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	460b      	mov	r3, r1
 8001fea:	4610      	mov	r0, r2
 8001fec:	4619      	mov	r1, r3
 8001fee:	4b12      	ldr	r3, [pc, #72]	@ (8002038 <pub_mpu6050+0x180>)
 8001ff0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001ff4:	f7fe f980 	bl	80002f8 <__aeabi_dsub>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	490a      	ldr	r1, [pc, #40]	@ (8002028 <pub_mpu6050+0x170>)
 8001ffe:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90

	// Publish mpu6050 data
	RCSOFTCHECK(rcl_publish(&mpu6050_publisher, &mpu6050_msg, NULL));
 8002002:	2200      	movs	r2, #0
 8002004:	4908      	ldr	r1, [pc, #32]	@ (8002028 <pub_mpu6050+0x170>)
 8002006:	480d      	ldr	r0, [pc, #52]	@ (800203c <pub_mpu6050+0x184>)
 8002008:	f00a ff80 	bl	800cf0c <rcl_publish>
}
 800200c:	bf00      	nop
 800200e:	3714      	adds	r7, #20
 8002010:	46bd      	mov	sp, r7
 8002012:	bd90      	pop	{r4, r7, pc}
 8002014:	f3af 8000 	nop.w
 8002018:	51eb851f 	.word	0x51eb851f
 800201c:	40239eb8 	.word	0x40239eb8
 8002020:	a2529d39 	.word	0xa2529d39
 8002024:	3f91df46 	.word	0x3f91df46
 8002028:	20005070 	.word	0x20005070
 800202c:	0801b1ac 	.word	0x0801b1ac
 8002030:	200051e0 	.word	0x200051e0
 8002034:	20005238 	.word	0x20005238
 8002038:	20005250 	.word	0x20005250
 800203c:	20004f10 	.word	0x20004f10

08002040 <service_callback>:

void service_callback(const void * request_msg, void * response_msg){
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  imu_interfaces__srv__ImuCalibration_Request * req_in = (imu_interfaces__srv__ImuCalibration_Request *) request_msg;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	613b      	str	r3, [r7, #16]
  imu_interfaces__srv__ImuCalibration_Response* res_in = (imu_interfaces__srv__ImuCalibration_Response *) response_msg;
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	60fb      	str	r3, [r7, #12]

  for(int i=0 ; i<9 ; i++){
 8002052:	2300      	movs	r3, #0
 8002054:	617b      	str	r3, [r7, #20]
 8002056:	e01e      	b.n	8002096 <service_callback+0x56>
	  mpu6050_msg.linear_acceleration_covariance[i] = req_in->imu_calib.linear_acceleration_covariance[i];
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	331f      	adds	r3, #31
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	4413      	add	r3, r2
 8002062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002066:	4827      	ldr	r0, [pc, #156]	@ (8002104 <service_callback+0xc4>)
 8002068:	6979      	ldr	r1, [r7, #20]
 800206a:	311f      	adds	r1, #31
 800206c:	00c9      	lsls	r1, r1, #3
 800206e:	4401      	add	r1, r0
 8002070:	e9c1 2300 	strd	r2, r3, [r1]
	  mpu6050_msg.angular_velocity_covariance[i] = req_in->imu_calib.angular_velocity_covariance[i];
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	3313      	adds	r3, #19
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	4413      	add	r3, r2
 800207e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002082:	4820      	ldr	r0, [pc, #128]	@ (8002104 <service_callback+0xc4>)
 8002084:	6979      	ldr	r1, [r7, #20]
 8002086:	3113      	adds	r1, #19
 8002088:	00c9      	lsls	r1, r1, #3
 800208a:	4401      	add	r1, r0
 800208c:	e9c1 2300 	strd	r2, r3, [r1]
  for(int i=0 ; i<9 ; i++){
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	3301      	adds	r3, #1
 8002094:	617b      	str	r3, [r7, #20]
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	2b08      	cmp	r3, #8
 800209a:	dddd      	ble.n	8002058 <service_callback+0x18>
  }

  accel_offset.x = req_in->imu_calib.linear_acceleration.x;
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	@ 0xe0
 80020a2:	4919      	ldr	r1, [pc, #100]	@ (8002108 <service_callback+0xc8>)
 80020a4:	e9c1 2300 	strd	r2, r3, [r1]
  accel_offset.y = req_in->imu_calib.linear_acceleration.y;
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	@ 0xe8
 80020ae:	4916      	ldr	r1, [pc, #88]	@ (8002108 <service_callback+0xc8>)
 80020b0:	e9c1 2302 	strd	r2, r3, [r1, #8]
  accel_offset.z = req_in->imu_calib.linear_acceleration.z;
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	@ 0xf0
 80020ba:	4913      	ldr	r1, [pc, #76]	@ (8002108 <service_callback+0xc8>)
 80020bc:	e9c1 2304 	strd	r2, r3, [r1, #16]

  gyro_offset.x = req_in->imu_calib.angular_velocity.x;
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 80020c6:	4911      	ldr	r1, [pc, #68]	@ (800210c <service_callback+0xcc>)
 80020c8:	e9c1 2300 	strd	r2, r3, [r1]
  gyro_offset.y = req_in->imu_calib.angular_velocity.y;
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 80020d2:	490e      	ldr	r1, [pc, #56]	@ (800210c <service_callback+0xcc>)
 80020d4:	e9c1 2302 	strd	r2, r3, [r1, #8]
  gyro_offset.z = req_in->imu_calib.angular_velocity.z;
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 80020de:	490b      	ldr	r1, [pc, #44]	@ (800210c <service_callback+0xcc>)
 80020e0:	e9c1 2304 	strd	r2, r3, [r1, #16]

  res_in->success = true;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2201      	movs	r2, #1
 80020e8:	701a      	strb	r2, [r3, #0]
  is_calibrate = true;
 80020ea:	4b09      	ldr	r3, [pc, #36]	@ (8002110 <service_callback+0xd0>)
 80020ec:	2201      	movs	r2, #1
 80020ee:	701a      	strb	r2, [r3, #0]

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80020f0:	2201      	movs	r2, #1
 80020f2:	2120      	movs	r1, #32
 80020f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020f8:	f001 fce4 	bl	8003ac4 <HAL_GPIO_WritePin>
}
 80020fc:	bf00      	nop
 80020fe:	3718      	adds	r7, #24
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	20005070 	.word	0x20005070
 8002108:	20005238 	.word	0x20005238
 800210c:	20005250 	.word	0x20005250
 8002110:	20005348 	.word	0x20005348
 8002114:	00000000 	.word	0x00000000

08002118 <imu_status_service_callback>:

void imu_status_service_callback(const void * request_msg, void * response_msg){
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  imu_interfaces__srv__ImuStatus_Request * req_in = (imu_interfaces__srv__ImuStatus_Request *) request_msg;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	617b      	str	r3, [r7, #20]
  imu_interfaces__srv__ImuStatus_Response * res_in = (imu_interfaces__srv__ImuStatus_Response *) response_msg;
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	613b      	str	r3, [r7, #16]

  if (req_in->imu_status_check.data){
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d037      	beq.n	80021a2 <imu_status_service_callback+0x8a>
	  if(is_calibrate){
 8002132:	4b23      	ldr	r3, [pc, #140]	@ (80021c0 <imu_status_service_callback+0xa8>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d030      	beq.n	800219c <imu_status_service_callback+0x84>
		  double g = G2M_S2 * MPU6050.Az - accel_offset.z;
 800213a:	4b22      	ldr	r3, [pc, #136]	@ (80021c4 <imu_status_service_callback+0xac>)
 800213c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002140:	a31b      	add	r3, pc, #108	@ (adr r3, 80021b0 <imu_status_service_callback+0x98>)
 8002142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002146:	f7fe fa8f 	bl	8000668 <__aeabi_dmul>
 800214a:	4602      	mov	r2, r0
 800214c:	460b      	mov	r3, r1
 800214e:	4610      	mov	r0, r2
 8002150:	4619      	mov	r1, r3
 8002152:	4b1d      	ldr	r3, [pc, #116]	@ (80021c8 <imu_status_service_callback+0xb0>)
 8002154:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002158:	f7fe f8ce 	bl	80002f8 <__aeabi_dsub>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	e9c7 2302 	strd	r2, r3, [r7, #8]
		  if( g >= 9.0 && g <= 10.8) {
 8002164:	f04f 0200 	mov.w	r2, #0
 8002168:	4b18      	ldr	r3, [pc, #96]	@ (80021cc <imu_status_service_callback+0xb4>)
 800216a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800216e:	f7fe fd01 	bl	8000b74 <__aeabi_dcmpge>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00d      	beq.n	8002194 <imu_status_service_callback+0x7c>
 8002178:	a30f      	add	r3, pc, #60	@ (adr r3, 80021b8 <imu_status_service_callback+0xa0>)
 800217a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800217e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002182:	f7fe fced 	bl	8000b60 <__aeabi_dcmple>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d003      	beq.n	8002194 <imu_status_service_callback+0x7c>
			  res_in->imu_status.data = true;
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	2201      	movs	r2, #1
 8002190:	701a      	strb	r2, [r3, #0]
		}
	  }else {
		  res_in->imu_status.data   = false;
	}
  }
}
 8002192:	e006      	b.n	80021a2 <imu_status_service_callback+0x8a>
			  res_in->imu_status.data = false;
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	2200      	movs	r2, #0
 8002198:	701a      	strb	r2, [r3, #0]
}
 800219a:	e002      	b.n	80021a2 <imu_status_service_callback+0x8a>
		  res_in->imu_status.data   = false;
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	2200      	movs	r2, #0
 80021a0:	701a      	strb	r2, [r3, #0]
}
 80021a2:	bf00      	nop
 80021a4:	3718      	adds	r7, #24
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	f3af 8000 	nop.w
 80021b0:	51eb851f 	.word	0x51eb851f
 80021b4:	40239eb8 	.word	0x40239eb8
 80021b8:	9999999a 	.word	0x9999999a
 80021bc:	40259999 	.word	0x40259999
 80021c0:	20005348 	.word	0x20005348
 80021c4:	200051e0 	.word	0x200051e0
 80021c8:	20005238 	.word	0x20005238
 80021cc:	40220000 	.word	0x40220000

080021d0 <timer_callback>:

void timer_callback(rcl_timer_t * timer, int64_t last_call_time){
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	e9c7 2300 	strd	r2, r3, [r7]
	if (timer != NULL) {
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d07a      	beq.n	80022d8 <timer_callback+0x108>
		// Read mpu6050
		MPU6050_Read_All(&hi2c1, &MPU6050);
 80021e2:	4941      	ldr	r1, [pc, #260]	@ (80022e8 <timer_callback+0x118>)
 80021e4:	4841      	ldr	r0, [pc, #260]	@ (80022ec <timer_callback+0x11c>)
 80021e6:	f005 fcb7 	bl	8007b58 <MPU6050_Read_All>
		if (is_calibrate){
 80021ea:	4b41      	ldr	r3, [pc, #260]	@ (80022f0 <timer_callback+0x120>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d072      	beq.n	80022d8 <timer_callback+0x108>
			// call mpu6050 publish function
			pub_mpu6050();
 80021f2:	f7ff fe61 	bl	8001eb8 <pub_mpu6050>

			// calculate angle
			roll_vel = DEG2RAD * MPU6050.Gx - gyro_offset.x;
 80021f6:	4b3c      	ldr	r3, [pc, #240]	@ (80022e8 <timer_callback+0x118>)
 80021f8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80021fc:	a338      	add	r3, pc, #224	@ (adr r3, 80022e0 <timer_callback+0x110>)
 80021fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002202:	f7fe fa31 	bl	8000668 <__aeabi_dmul>
 8002206:	4602      	mov	r2, r0
 8002208:	460b      	mov	r3, r1
 800220a:	4610      	mov	r0, r2
 800220c:	4619      	mov	r1, r3
 800220e:	4b39      	ldr	r3, [pc, #228]	@ (80022f4 <timer_callback+0x124>)
 8002210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002214:	f7fe f870 	bl	80002f8 <__aeabi_dsub>
 8002218:	4602      	mov	r2, r0
 800221a:	460b      	mov	r3, r1
 800221c:	4936      	ldr	r1, [pc, #216]	@ (80022f8 <timer_callback+0x128>)
 800221e:	e9c1 2300 	strd	r2, r3, [r1]
			pitch_vel = DEG2RAD * MPU6050.Gy - gyro_offset.y;
 8002222:	4b31      	ldr	r3, [pc, #196]	@ (80022e8 <timer_callback+0x118>)
 8002224:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8002228:	a32d      	add	r3, pc, #180	@ (adr r3, 80022e0 <timer_callback+0x110>)
 800222a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800222e:	f7fe fa1b 	bl	8000668 <__aeabi_dmul>
 8002232:	4602      	mov	r2, r0
 8002234:	460b      	mov	r3, r1
 8002236:	4610      	mov	r0, r2
 8002238:	4619      	mov	r1, r3
 800223a:	4b2e      	ldr	r3, [pc, #184]	@ (80022f4 <timer_callback+0x124>)
 800223c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002240:	f7fe f85a 	bl	80002f8 <__aeabi_dsub>
 8002244:	4602      	mov	r2, r0
 8002246:	460b      	mov	r3, r1
 8002248:	492c      	ldr	r1, [pc, #176]	@ (80022fc <timer_callback+0x12c>)
 800224a:	e9c1 2300 	strd	r2, r3, [r1]

			angle_from_acc();
 800224e:	f7ff fbaf 	bl	80019b0 <angle_from_acc>

			roll_angle = angle_kalman(&kalman_roll, acc_roll_angle, roll_vel);
 8002252:	4b2b      	ldr	r3, [pc, #172]	@ (8002300 <timer_callback+0x130>)
 8002254:	ed93 7b00 	vldr	d7, [r3]
 8002258:	4b27      	ldr	r3, [pc, #156]	@ (80022f8 <timer_callback+0x128>)
 800225a:	ed93 6b00 	vldr	d6, [r3]
 800225e:	eeb0 1a46 	vmov.f32	s2, s12
 8002262:	eef0 1a66 	vmov.f32	s3, s13
 8002266:	eeb0 0a47 	vmov.f32	s0, s14
 800226a:	eef0 0a67 	vmov.f32	s1, s15
 800226e:	4825      	ldr	r0, [pc, #148]	@ (8002304 <timer_callback+0x134>)
 8002270:	f7ff fc4e 	bl	8001b10 <angle_kalman>
 8002274:	eeb0 7a40 	vmov.f32	s14, s0
 8002278:	eef0 7a60 	vmov.f32	s15, s1
 800227c:	4b22      	ldr	r3, [pc, #136]	@ (8002308 <timer_callback+0x138>)
 800227e:	ed83 7b00 	vstr	d7, [r3]
			pitch_angle = angle_kalman(&kalman_pitch, acc_pitch_angle, pitch_vel);
 8002282:	4b22      	ldr	r3, [pc, #136]	@ (800230c <timer_callback+0x13c>)
 8002284:	ed93 7b00 	vldr	d7, [r3]
 8002288:	4b1c      	ldr	r3, [pc, #112]	@ (80022fc <timer_callback+0x12c>)
 800228a:	ed93 6b00 	vldr	d6, [r3]
 800228e:	eeb0 1a46 	vmov.f32	s2, s12
 8002292:	eef0 1a66 	vmov.f32	s3, s13
 8002296:	eeb0 0a47 	vmov.f32	s0, s14
 800229a:	eef0 0a67 	vmov.f32	s1, s15
 800229e:	481c      	ldr	r0, [pc, #112]	@ (8002310 <timer_callback+0x140>)
 80022a0:	f7ff fc36 	bl	8001b10 <angle_kalman>
 80022a4:	eeb0 7a40 	vmov.f32	s14, s0
 80022a8:	eef0 7a60 	vmov.f32	s15, s1
 80022ac:	4b19      	ldr	r3, [pc, #100]	@ (8002314 <timer_callback+0x144>)
 80022ae:	ed83 7b00 	vstr	d7, [r3]


			// Set value in cmd_vel_msg
			convert_to_cmd_vel();
 80022b2:	f7ff fd91 	bl	8001dd8 <convert_to_cmd_vel>
			cmd_vel_msg.linear.x = linear_vel_x;
 80022b6:	4b18      	ldr	r3, [pc, #96]	@ (8002318 <timer_callback+0x148>)
 80022b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022bc:	4917      	ldr	r1, [pc, #92]	@ (800231c <timer_callback+0x14c>)
 80022be:	e9c1 2300 	strd	r2, r3, [r1]
			cmd_vel_msg.angular.z = angular_vel_z;
 80022c2:	4b17      	ldr	r3, [pc, #92]	@ (8002320 <timer_callback+0x150>)
 80022c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c8:	4914      	ldr	r1, [pc, #80]	@ (800231c <timer_callback+0x14c>)
 80022ca:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

			// Publish cmd_vel
			RCSOFTCHECK(rcl_publish(&cmd_vel_publisher, &cmd_vel_msg, NULL));
 80022ce:	2200      	movs	r2, #0
 80022d0:	4912      	ldr	r1, [pc, #72]	@ (800231c <timer_callback+0x14c>)
 80022d2:	4814      	ldr	r0, [pc, #80]	@ (8002324 <timer_callback+0x154>)
 80022d4:	f00a fe1a 	bl	800cf0c <rcl_publish>


		}
	}
}
 80022d8:	bf00      	nop
 80022da:	3710      	adds	r7, #16
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	a2529d39 	.word	0xa2529d39
 80022e4:	3f91df46 	.word	0x3f91df46
 80022e8:	200051e0 	.word	0x200051e0
 80022ec:	20004ddc 	.word	0x20004ddc
 80022f0:	20005348 	.word	0x20005348
 80022f4:	20005250 	.word	0x20005250
 80022f8:	20005328 	.word	0x20005328
 80022fc:	20005330 	.word	0x20005330
 8002300:	20005308 	.word	0x20005308
 8002304:	20005268 	.word	0x20005268
 8002308:	20005318 	.word	0x20005318
 800230c:	20005310 	.word	0x20005310
 8002310:	200052b8 	.word	0x200052b8
 8002314:	20005320 	.word	0x20005320
 8002318:	20005338 	.word	0x20005338
 800231c:	200051b0 	.word	0x200051b0
 8002320:	20005340 	.word	0x20005340
 8002324:	20004f14 	.word	0x20004f14

08002328 <StartDefaultTask>:

void StartDefaultTask(void *argument){
 8002328:	b5b0      	push	{r4, r5, r7, lr}
 800232a:	b0b2      	sub	sp, #200	@ 0xc8
 800232c:	af02      	add	r7, sp, #8
 800232e:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
  // micro-ROS configuration

  rmw_uros_set_custom_transport(
 8002332:	4b67      	ldr	r3, [pc, #412]	@ (80024d0 <StartDefaultTask+0x1a8>)
 8002334:	9301      	str	r3, [sp, #4]
 8002336:	4b67      	ldr	r3, [pc, #412]	@ (80024d4 <StartDefaultTask+0x1ac>)
 8002338:	9300      	str	r3, [sp, #0]
 800233a:	4b67      	ldr	r3, [pc, #412]	@ (80024d8 <StartDefaultTask+0x1b0>)
 800233c:	4a67      	ldr	r2, [pc, #412]	@ (80024dc <StartDefaultTask+0x1b4>)
 800233e:	4968      	ldr	r1, [pc, #416]	@ (80024e0 <StartDefaultTask+0x1b8>)
 8002340:	2001      	movs	r0, #1
 8002342:	f00b fe71 	bl	800e028 <rmw_uros_set_custom_transport>
    cubemx_transport_open,
    cubemx_transport_close,
    cubemx_transport_write,
    cubemx_transport_read);

  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8002346:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800234a:	4618      	mov	r0, r3
 800234c:	f00b fd88 	bl	800de60 <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate = microros_allocate;
 8002350:	4b64      	ldr	r3, [pc, #400]	@ (80024e4 <StartDefaultTask+0x1bc>)
 8002352:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  freeRTOS_allocator.deallocate = microros_deallocate;
 8002356:	4b64      	ldr	r3, [pc, #400]	@ (80024e8 <StartDefaultTask+0x1c0>)
 8002358:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  freeRTOS_allocator.reallocate = microros_reallocate;
 800235c:	4b63      	ldr	r3, [pc, #396]	@ (80024ec <StartDefaultTask+0x1c4>)
 800235e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8002362:	4b63      	ldr	r3, [pc, #396]	@ (80024f0 <StartDefaultTask+0x1c8>)
 8002364:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8002368:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800236c:	4618      	mov	r0, r3
 800236e:	f00b fd85 	bl	800de7c <rcutils_set_default_allocator>
 8002372:	4603      	mov	r3, r0
 8002374:	f083 0301 	eor.w	r3, r3, #1
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d004      	beq.n	8002388 <StartDefaultTask+0x60>
      printf("Error on default allocators (line %d)\n", __LINE__);
 800237e:	f240 113f 	movw	r1, #319	@ 0x13f
 8002382:	485c      	ldr	r0, [pc, #368]	@ (80024f4 <StartDefaultTask+0x1cc>)
 8002384:	f017 fade 	bl	8019944 <iprintf>
  }

  // micro-ROS app
  allocator = rcl_get_default_allocator();
 8002388:	4c5b      	ldr	r4, [pc, #364]	@ (80024f8 <StartDefaultTask+0x1d0>)
 800238a:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800238e:	4618      	mov	r0, r3
 8002390:	f00b fd92 	bl	800deb8 <rcutils_get_default_allocator>
 8002394:	4625      	mov	r5, r4
 8002396:	f107 0488 	add.w	r4, r7, #136	@ 0x88
 800239a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800239c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800239e:	6823      	ldr	r3, [r4, #0]
 80023a0:	602b      	str	r3, [r5, #0]

  //create init_options
  init_options = rcl_get_zero_initialized_init_options();
 80023a2:	f00a fbe3 	bl	800cb6c <rcl_get_zero_initialized_init_options>
 80023a6:	4603      	mov	r3, r0
 80023a8:	4a54      	ldr	r2, [pc, #336]	@ (80024fc <StartDefaultTask+0x1d4>)
 80023aa:	6013      	str	r3, [r2, #0]
  RCSOFTCHECK(rcl_init_options_init(&init_options, allocator));
 80023ac:	4b52      	ldr	r3, [pc, #328]	@ (80024f8 <StartDefaultTask+0x1d0>)
 80023ae:	466c      	mov	r4, sp
 80023b0:	f103 020c 	add.w	r2, r3, #12
 80023b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023b8:	e884 0003 	stmia.w	r4, {r0, r1}
 80023bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023be:	484f      	ldr	r0, [pc, #316]	@ (80024fc <StartDefaultTask+0x1d4>)
 80023c0:	f00a fbd6 	bl	800cb70 <rcl_init_options_init>
  RCSOFTCHECK(rcl_init_options_set_domain_id(&init_options, 50));
 80023c4:	2132      	movs	r1, #50	@ 0x32
 80023c6:	484d      	ldr	r0, [pc, #308]	@ (80024fc <StartDefaultTask+0x1d4>)
 80023c8:	f00a fcce 	bl	800cd68 <rcl_init_options_set_domain_id>

  rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 80023cc:	4b4a      	ldr	r3, [pc, #296]	@ (80024f8 <StartDefaultTask+0x1d0>)
 80023ce:	9300      	str	r3, [sp, #0]
 80023d0:	4b4a      	ldr	r3, [pc, #296]	@ (80024fc <StartDefaultTask+0x1d4>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	2100      	movs	r1, #0
 80023d6:	484a      	ldr	r0, [pc, #296]	@ (8002500 <StartDefaultTask+0x1d8>)
 80023d8:	f00b fc32 	bl	800dc40 <rclc_support_init_with_options>

  // create node
  rclc_node_init_default(&node, "megarover_joy_node", "", &support);
 80023dc:	4b48      	ldr	r3, [pc, #288]	@ (8002500 <StartDefaultTask+0x1d8>)
 80023de:	4a49      	ldr	r2, [pc, #292]	@ (8002504 <StartDefaultTask+0x1dc>)
 80023e0:	4949      	ldr	r1, [pc, #292]	@ (8002508 <StartDefaultTask+0x1e0>)
 80023e2:	484a      	ldr	r0, [pc, #296]	@ (800250c <StartDefaultTask+0x1e4>)
 80023e4:	f00b fc60 	bl	800dca8 <rclc_node_init_default>

  // sync time
  rmw_uros_sync_session(1000);
 80023e8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80023ec:	f00c fd14 	bl	800ee18 <rmw_uros_sync_session>

  // create timer
  rclc_timer_init_default(
	  &node_timer,
	  &support,
	  RCL_MS_TO_NS(dt*1000),
 80023f0:	4b47      	ldr	r3, [pc, #284]	@ (8002510 <StartDefaultTask+0x1e8>)
 80023f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023f6:	f04f 0200 	mov.w	r2, #0
 80023fa:	4b46      	ldr	r3, [pc, #280]	@ (8002514 <StartDefaultTask+0x1ec>)
 80023fc:	f7fe f934 	bl	8000668 <__aeabi_dmul>
 8002400:	4602      	mov	r2, r0
 8002402:	460b      	mov	r3, r1
 8002404:	4610      	mov	r0, r2
 8002406:	4619      	mov	r1, r3
 8002408:	a32f      	add	r3, pc, #188	@ (adr r3, 80024c8 <StartDefaultTask+0x1a0>)
 800240a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800240e:	f7fe f92b 	bl	8000668 <__aeabi_dmul>
 8002412:	4602      	mov	r2, r0
 8002414:	460b      	mov	r3, r1
  rclc_timer_init_default(
 8002416:	4610      	mov	r0, r2
 8002418:	4619      	mov	r1, r3
 800241a:	f7fe fc8d 	bl	8000d38 <__aeabi_d2ulz>
 800241e:	4602      	mov	r2, r0
 8002420:	460b      	mov	r3, r1
 8002422:	493d      	ldr	r1, [pc, #244]	@ (8002518 <StartDefaultTask+0x1f0>)
 8002424:	9100      	str	r1, [sp, #0]
 8002426:	4936      	ldr	r1, [pc, #216]	@ (8002500 <StartDefaultTask+0x1d8>)
 8002428:	483c      	ldr	r0, [pc, #240]	@ (800251c <StartDefaultTask+0x1f4>)
 800242a:	f00b fce1 	bl	800ddf0 <rclc_timer_init_default>
	  timer_callback
  );

  // create publisher
  rclc_publisher_init_best_effort(
 800242e:	f00d f979 	bl	800f724 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 8002432:	4602      	mov	r2, r0
 8002434:	4b3a      	ldr	r3, [pc, #232]	@ (8002520 <StartDefaultTask+0x1f8>)
 8002436:	4935      	ldr	r1, [pc, #212]	@ (800250c <StartDefaultTask+0x1e4>)
 8002438:	483a      	ldr	r0, [pc, #232]	@ (8002524 <StartDefaultTask+0x1fc>)
 800243a:	f00b fc71 	bl	800dd20 <rclc_publisher_init_best_effort>
  	  &node,
  	  ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Imu),
  	  "mpu6050_publisher"
  );

  rclc_publisher_init_best_effort(
 800243e:	f008 fcbb 	bl	800adb8 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8002442:	4602      	mov	r2, r0
 8002444:	4b38      	ldr	r3, [pc, #224]	@ (8002528 <StartDefaultTask+0x200>)
 8002446:	4931      	ldr	r1, [pc, #196]	@ (800250c <StartDefaultTask+0x1e4>)
 8002448:	4838      	ldr	r0, [pc, #224]	@ (800252c <StartDefaultTask+0x204>)
 800244a:	f00b fc69 	bl	800dd20 <rclc_publisher_init_best_effort>
	  ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist),
	  "cmd_vel"
  );

  // create service
  rclc_service_init_default(
 800244e:	f008 fdef 	bl	800b030 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration>
 8002452:	4602      	mov	r2, r0
 8002454:	4b36      	ldr	r3, [pc, #216]	@ (8002530 <StartDefaultTask+0x208>)
 8002456:	492d      	ldr	r1, [pc, #180]	@ (800250c <StartDefaultTask+0x1e4>)
 8002458:	4836      	ldr	r0, [pc, #216]	@ (8002534 <StartDefaultTask+0x20c>)
 800245a:	f00b fc95 	bl	800dd88 <rclc_service_init_default>
	  &node,
	  ROSIDL_GET_SRV_TYPE_SUPPORT(imu_interfaces, srv, ImuCalibration),
	  "mpu6050_calibration"
  );

  rclc_service_init_default(
 800245e:	f008 fe07 	bl	800b070 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuStatus>
 8002462:	4602      	mov	r2, r0
 8002464:	4b34      	ldr	r3, [pc, #208]	@ (8002538 <StartDefaultTask+0x210>)
 8002466:	4929      	ldr	r1, [pc, #164]	@ (800250c <StartDefaultTask+0x1e4>)
 8002468:	4834      	ldr	r0, [pc, #208]	@ (800253c <StartDefaultTask+0x214>)
 800246a:	f00b fc8d 	bl	800dd88 <rclc_service_init_default>
	  ROSIDL_GET_SRV_TYPE_SUPPORT(imu_interfaces, srv, ImuStatus),
	  "imu/status"
  );

  // create executor
  executor = rclc_executor_get_zero_initialized_executor();
 800246e:	4c34      	ldr	r4, [pc, #208]	@ (8002540 <StartDefaultTask+0x218>)
 8002470:	463b      	mov	r3, r7
 8002472:	4618      	mov	r0, r3
 8002474:	f00b f8d8 	bl	800d628 <rclc_executor_get_zero_initialized_executor>
 8002478:	4620      	mov	r0, r4
 800247a:	463b      	mov	r3, r7
 800247c:	2288      	movs	r2, #136	@ 0x88
 800247e:	4619      	mov	r1, r3
 8002480:	f017 fca9 	bl	8019dd6 <memcpy>
  rclc_executor_init(&executor, &support.context, 3, &allocator);
 8002484:	4b1c      	ldr	r3, [pc, #112]	@ (80024f8 <StartDefaultTask+0x1d0>)
 8002486:	2203      	movs	r2, #3
 8002488:	491d      	ldr	r1, [pc, #116]	@ (8002500 <StartDefaultTask+0x1d8>)
 800248a:	482d      	ldr	r0, [pc, #180]	@ (8002540 <StartDefaultTask+0x218>)
 800248c:	f00b f8d8 	bl	800d640 <rclc_executor_init>
  rclc_executor_add_timer(&executor, &node_timer);
 8002490:	4922      	ldr	r1, [pc, #136]	@ (800251c <StartDefaultTask+0x1f4>)
 8002492:	482b      	ldr	r0, [pc, #172]	@ (8002540 <StartDefaultTask+0x218>)
 8002494:	f00b f944 	bl	800d720 <rclc_executor_add_timer>
  rclc_executor_add_service(&executor, &mpu6050_status_service, &mpu6050_status_request, &mpu6050_status_response, imu_status_service_callback);
 8002498:	4b2a      	ldr	r3, [pc, #168]	@ (8002544 <StartDefaultTask+0x21c>)
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	4b2a      	ldr	r3, [pc, #168]	@ (8002548 <StartDefaultTask+0x220>)
 800249e:	4a2b      	ldr	r2, [pc, #172]	@ (800254c <StartDefaultTask+0x224>)
 80024a0:	4926      	ldr	r1, [pc, #152]	@ (800253c <StartDefaultTask+0x214>)
 80024a2:	4827      	ldr	r0, [pc, #156]	@ (8002540 <StartDefaultTask+0x218>)
 80024a4:	f00b f966 	bl	800d774 <rclc_executor_add_service>
  rclc_executor_add_service(&executor, &mpu6050_service, &mpu6050_request, &mpu6050_response, service_callback);
 80024a8:	4b29      	ldr	r3, [pc, #164]	@ (8002550 <StartDefaultTask+0x228>)
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	4b29      	ldr	r3, [pc, #164]	@ (8002554 <StartDefaultTask+0x22c>)
 80024ae:	4a2a      	ldr	r2, [pc, #168]	@ (8002558 <StartDefaultTask+0x230>)
 80024b0:	4920      	ldr	r1, [pc, #128]	@ (8002534 <StartDefaultTask+0x20c>)
 80024b2:	4823      	ldr	r0, [pc, #140]	@ (8002540 <StartDefaultTask+0x218>)
 80024b4:	f00b f95e 	bl	800d774 <rclc_executor_add_service>
  rclc_executor_spin(&executor);
 80024b8:	4821      	ldr	r0, [pc, #132]	@ (8002540 <StartDefaultTask+0x218>)
 80024ba:	f00b fb81 	bl	800dbc0 <rclc_executor_spin>

  for(;;){
    osDelay(10);
 80024be:	200a      	movs	r0, #10
 80024c0:	f005 ffac 	bl	800841c <osDelay>
 80024c4:	e7fb      	b.n	80024be <StartDefaultTask+0x196>
 80024c6:	bf00      	nop
 80024c8:	00000000 	.word	0x00000000
 80024cc:	412e8480 	.word	0x412e8480
 80024d0:	0800164d 	.word	0x0800164d
 80024d4:	080015e9 	.word	0x080015e9
 80024d8:	080015c9 	.word	0x080015c9
 80024dc:	0800159d 	.word	0x0800159d
 80024e0:	200053a8 	.word	0x200053a8
 80024e4:	08002679 	.word	0x08002679
 80024e8:	080026bd 	.word	0x080026bd
 80024ec:	080026f5 	.word	0x080026f5
 80024f0:	08002761 	.word	0x08002761
 80024f4:	0801b1bc 	.word	0x0801b1bc
 80024f8:	20004e64 	.word	0x20004e64
 80024fc:	20004e80 	.word	0x20004e80
 8002500:	20004e30 	.word	0x20004e30
 8002504:	0801b1e4 	.word	0x0801b1e4
 8002508:	0801b1e8 	.word	0x0801b1e8
 800250c:	20004e78 	.word	0x20004e78
 8002510:	20000000 	.word	0x20000000
 8002514:	408f4000 	.word	0x408f4000
 8002518:	080021d1 	.word	0x080021d1
 800251c:	20004e84 	.word	0x20004e84
 8002520:	0801b1fc 	.word	0x0801b1fc
 8002524:	20004f10 	.word	0x20004f10
 8002528:	0801b210 	.word	0x0801b210
 800252c:	20004f14 	.word	0x20004f14
 8002530:	0801b218 	.word	0x0801b218
 8002534:	20004f18 	.word	0x20004f18
 8002538:	0801b22c 	.word	0x0801b22c
 800253c:	20005060 	.word	0x20005060
 8002540:	20004e88 	.word	0x20004e88
 8002544:	08002119 	.word	0x08002119
 8002548:	20005068 	.word	0x20005068
 800254c:	20005064 	.word	0x20005064
 8002550:	08002041 	.word	0x08002041
 8002554:	20004f1c 	.word	0x20004f1c
 8002558:	20004f20 	.word	0x20004f20

0800255c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002560:	f000 fcd9 	bl	8002f16 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002564:	f000 f824 	bl	80025b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002568:	f7ff f8c4 	bl	80016f4 <MX_GPIO_Init>
  MX_DMA_Init();
 800256c:	f7fe ffe4 	bl	8001538 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8002570:	f000 fba0 	bl	8002cb4 <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 8002574:	f7ff f92c 	bl	80017d0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  while (MPU6050_Init(&hi2c1) == 1);
 8002578:	bf00      	nop
 800257a:	480a      	ldr	r0, [pc, #40]	@ (80025a4 <main+0x48>)
 800257c:	f005 fa92 	bl	8007aa4 <MPU6050_Init>
 8002580:	4603      	mov	r3, r0
 8002582:	2b01      	cmp	r3, #1
 8002584:	d0f9      	beq.n	800257a <main+0x1e>
  Kalman_Init(&kalman_roll);
 8002586:	4808      	ldr	r0, [pc, #32]	@ (80025a8 <main+0x4c>)
 8002588:	f7ff f9be 	bl	8001908 <Kalman_Init>
  Kalman_Init(&kalman_pitch);
 800258c:	4807      	ldr	r0, [pc, #28]	@ (80025ac <main+0x50>)
 800258e:	f7ff f9bb 	bl	8001908 <Kalman_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002592:	f005 fe67 	bl	8008264 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8002596:	f7fe fd6d 	bl	8001074 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800259a:	f005 fe87 	bl	80082ac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800259e:	bf00      	nop
 80025a0:	e7fd      	b.n	800259e <main+0x42>
 80025a2:	bf00      	nop
 80025a4:	20004ddc 	.word	0x20004ddc
 80025a8:	20005268 	.word	0x20005268
 80025ac:	200052b8 	.word	0x200052b8

080025b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b094      	sub	sp, #80	@ 0x50
 80025b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025b6:	f107 0318 	add.w	r3, r7, #24
 80025ba:	2238      	movs	r2, #56	@ 0x38
 80025bc:	2100      	movs	r1, #0
 80025be:	4618      	mov	r0, r3
 80025c0:	f017 fb40 	bl	8019c44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025c4:	1d3b      	adds	r3, r7, #4
 80025c6:	2200      	movs	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	605a      	str	r2, [r3, #4]
 80025cc:	609a      	str	r2, [r3, #8]
 80025ce:	60da      	str	r2, [r3, #12]
 80025d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80025d2:	2000      	movs	r0, #0
 80025d4:	f002 f8d4 	bl	8004780 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80025d8:	2302      	movs	r3, #2
 80025da:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025e0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80025e2:	2340      	movs	r3, #64	@ 0x40
 80025e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025e6:	2302      	movs	r3, #2
 80025e8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80025ea:	2302      	movs	r3, #2
 80025ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80025ee:	2304      	movs	r3, #4
 80025f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80025f2:	2355      	movs	r3, #85	@ 0x55
 80025f4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80025f6:	2302      	movs	r3, #2
 80025f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80025fa:	2302      	movs	r3, #2
 80025fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80025fe:	2302      	movs	r3, #2
 8002600:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002602:	f107 0318 	add.w	r3, r7, #24
 8002606:	4618      	mov	r0, r3
 8002608:	f002 f96e 	bl	80048e8 <HAL_RCC_OscConfig>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002612:	f000 f82b 	bl	800266c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002616:	230f      	movs	r3, #15
 8002618:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800261a:	2303      	movs	r3, #3
 800261c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800261e:	2300      	movs	r3, #0
 8002620:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002622:	2300      	movs	r3, #0
 8002624:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002626:	2300      	movs	r3, #0
 8002628:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800262a:	1d3b      	adds	r3, r7, #4
 800262c:	2104      	movs	r1, #4
 800262e:	4618      	mov	r0, r3
 8002630:	f002 fc6c 	bl	8004f0c <HAL_RCC_ClockConfig>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800263a:	f000 f817 	bl	800266c <Error_Handler>
  }
}
 800263e:	bf00      	nop
 8002640:	3750      	adds	r7, #80	@ 0x50
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
	...

08002648 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a04      	ldr	r2, [pc, #16]	@ (8002668 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d101      	bne.n	800265e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800265a:	f000 fc75 	bl	8002f48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800265e:	bf00      	nop
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	40012c00 	.word	0x40012c00

0800266c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002670:	b672      	cpsid	i
}
 8002672:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002674:	bf00      	nop
 8002676:	e7fd      	b.n	8002674 <Error_Handler+0x8>

08002678 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002682:	4b0c      	ldr	r3, [pc, #48]	@ (80026b4 <microros_allocate+0x3c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	461a      	mov	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4413      	add	r3, r2
 800268c:	461a      	mov	r2, r3
 800268e:	4b09      	ldr	r3, [pc, #36]	@ (80026b4 <microros_allocate+0x3c>)
 8002690:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002692:	4b09      	ldr	r3, [pc, #36]	@ (80026b8 <microros_allocate+0x40>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	461a      	mov	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4413      	add	r3, r2
 800269c:	461a      	mov	r2, r3
 800269e:	4b06      	ldr	r3, [pc, #24]	@ (80026b8 <microros_allocate+0x40>)
 80026a0:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7fe fcf8 	bl	8001098 <pvPortMallocMicroROS>
 80026a8:	4603      	mov	r3, r0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	2000534c 	.word	0x2000534c
 80026b8:	20005350 	.word	0x20005350

080026bc <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00c      	beq.n	80026e6 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f7fe fe07 	bl	80012e0 <getBlockSize>
 80026d2:	4603      	mov	r3, r0
 80026d4:	4a06      	ldr	r2, [pc, #24]	@ (80026f0 <microros_deallocate+0x34>)
 80026d6:	6812      	ldr	r2, [r2, #0]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	461a      	mov	r2, r3
 80026dc:	4b04      	ldr	r3, [pc, #16]	@ (80026f0 <microros_deallocate+0x34>)
 80026de:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f7fe fda1 	bl	8001228 <vPortFreeMicroROS>
  }
}
 80026e6:	bf00      	nop
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	20005350 	.word	0x20005350

080026f4 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002700:	4b15      	ldr	r3, [pc, #84]	@ (8002758 <microros_reallocate+0x64>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	461a      	mov	r2, r3
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	4413      	add	r3, r2
 800270a:	461a      	mov	r2, r3
 800270c:	4b12      	ldr	r3, [pc, #72]	@ (8002758 <microros_reallocate+0x64>)
 800270e:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002710:	4b12      	ldr	r3, [pc, #72]	@ (800275c <microros_reallocate+0x68>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	461a      	mov	r2, r3
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	4413      	add	r3, r2
 800271a:	461a      	mov	r2, r3
 800271c:	4b0f      	ldr	r3, [pc, #60]	@ (800275c <microros_reallocate+0x68>)
 800271e:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d104      	bne.n	8002730 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8002726:	68b8      	ldr	r0, [r7, #8]
 8002728:	f7fe fcb6 	bl	8001098 <pvPortMallocMicroROS>
 800272c:	4603      	mov	r3, r0
 800272e:	e00e      	b.n	800274e <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f7fe fdd5 	bl	80012e0 <getBlockSize>
 8002736:	4603      	mov	r3, r0
 8002738:	4a08      	ldr	r2, [pc, #32]	@ (800275c <microros_reallocate+0x68>)
 800273a:	6812      	ldr	r2, [r2, #0]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	461a      	mov	r2, r3
 8002740:	4b06      	ldr	r3, [pc, #24]	@ (800275c <microros_reallocate+0x68>)
 8002742:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8002744:	68b9      	ldr	r1, [r7, #8]
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f7fe fde8 	bl	800131c <pvPortReallocMicroROS>
 800274c:	4603      	mov	r3, r0
  }
}
 800274e:	4618      	mov	r0, r3
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	2000534c 	.word	0x2000534c
 800275c:	20005350 	.word	0x20005350

08002760 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	68ba      	ldr	r2, [r7, #8]
 8002770:	fb02 f303 	mul.w	r3, r2, r3
 8002774:	4a0c      	ldr	r2, [pc, #48]	@ (80027a8 <microros_zero_allocate+0x48>)
 8002776:	6812      	ldr	r2, [r2, #0]
 8002778:	4413      	add	r3, r2
 800277a:	461a      	mov	r2, r3
 800277c:	4b0a      	ldr	r3, [pc, #40]	@ (80027a8 <microros_zero_allocate+0x48>)
 800277e:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	68ba      	ldr	r2, [r7, #8]
 8002784:	fb02 f303 	mul.w	r3, r2, r3
 8002788:	4a08      	ldr	r2, [pc, #32]	@ (80027ac <microros_zero_allocate+0x4c>)
 800278a:	6812      	ldr	r2, [r2, #0]
 800278c:	4413      	add	r3, r2
 800278e:	461a      	mov	r2, r3
 8002790:	4b06      	ldr	r3, [pc, #24]	@ (80027ac <microros_zero_allocate+0x4c>)
 8002792:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002794:	68b9      	ldr	r1, [r7, #8]
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f7fe fded 	bl	8001376 <pvPortCallocMicroROS>
 800279c:	4603      	mov	r3, r0
 800279e:	4618      	mov	r0, r3
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	2000534c 	.word	0x2000534c
 80027ac:	20005350 	.word	0x20005350

080027b0 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80027b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80027b4:	b086      	sub	sp, #24
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80027bc:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80027be:	2300      	movs	r3, #0
 80027c0:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80027c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027c6:	a320      	add	r3, pc, #128	@ (adr r3, 8002848 <UTILS_NanosecondsToTimespec+0x98>)
 80027c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027cc:	f7fe fa4c 	bl	8000c68 <__aeabi_ldivmod>
 80027d0:	4602      	mov	r2, r0
 80027d2:	460b      	mov	r3, r1
 80027d4:	6879      	ldr	r1, [r7, #4]
 80027d6:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80027da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027de:	a31a      	add	r3, pc, #104	@ (adr r3, 8002848 <UTILS_NanosecondsToTimespec+0x98>)
 80027e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e4:	f7fe fa40 	bl	8000c68 <__aeabi_ldivmod>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	da20      	bge.n	8002836 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	4a11      	ldr	r2, [pc, #68]	@ (8002840 <UTILS_NanosecondsToTimespec+0x90>)
 80027fa:	fb82 1203 	smull	r1, r2, r2, r3
 80027fe:	1712      	asrs	r2, r2, #28
 8002800:	17db      	asrs	r3, r3, #31
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	3301      	adds	r3, #1
 8002806:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800280e:	6979      	ldr	r1, [r7, #20]
 8002810:	17c8      	asrs	r0, r1, #31
 8002812:	460c      	mov	r4, r1
 8002814:	4605      	mov	r5, r0
 8002816:	ebb2 0804 	subs.w	r8, r2, r4
 800281a:	eb63 0905 	sbc.w	r9, r3, r5
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	4906      	ldr	r1, [pc, #24]	@ (8002844 <UTILS_NanosecondsToTimespec+0x94>)
 800282c:	fb01 f303 	mul.w	r3, r1, r3
 8002830:	441a      	add	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	609a      	str	r2, [r3, #8]
    }
}
 8002836:	bf00      	nop
 8002838:	3718      	adds	r7, #24
 800283a:	46bd      	mov	sp, r7
 800283c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002840:	44b82fa1 	.word	0x44b82fa1
 8002844:	3b9aca00 	.word	0x3b9aca00
 8002848:	3b9aca00 	.word	0x3b9aca00
 800284c:	00000000 	.word	0x00000000

08002850 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002850:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002854:	b08e      	sub	sp, #56	@ 0x38
 8002856:	af00      	add	r7, sp, #0
 8002858:	6278      	str	r0, [r7, #36]	@ 0x24
 800285a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 800285c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002860:	2300      	movs	r3, #0
 8002862:	6013      	str	r3, [r2, #0]
 8002864:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8002866:	f04f 0200 	mov.w	r2, #0
 800286a:	f04f 0300 	mov.w	r3, #0
 800286e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8002872:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002876:	4618      	mov	r0, r3
 8002878:	f007 f89c 	bl	80099b4 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 800287c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800287e:	17da      	asrs	r2, r3, #31
 8002880:	61bb      	str	r3, [r7, #24]
 8002882:	61fa      	str	r2, [r7, #28]
 8002884:	f04f 0200 	mov.w	r2, #0
 8002888:	f04f 0300 	mov.w	r3, #0
 800288c:	69b9      	ldr	r1, [r7, #24]
 800288e:	000b      	movs	r3, r1
 8002890:	2200      	movs	r2, #0
 8002892:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8002896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002898:	2200      	movs	r2, #0
 800289a:	461c      	mov	r4, r3
 800289c:	4615      	mov	r5, r2
 800289e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80028a2:	1911      	adds	r1, r2, r4
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	416b      	adcs	r3, r5
 80028a8:	60fb      	str	r3, [r7, #12]
 80028aa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80028ae:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80028b2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80028b6:	4602      	mov	r2, r0
 80028b8:	460b      	mov	r3, r1
 80028ba:	f04f 0400 	mov.w	r4, #0
 80028be:	f04f 0500 	mov.w	r5, #0
 80028c2:	015d      	lsls	r5, r3, #5
 80028c4:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80028c8:	0154      	lsls	r4, r2, #5
 80028ca:	4622      	mov	r2, r4
 80028cc:	462b      	mov	r3, r5
 80028ce:	ebb2 0800 	subs.w	r8, r2, r0
 80028d2:	eb63 0901 	sbc.w	r9, r3, r1
 80028d6:	f04f 0200 	mov.w	r2, #0
 80028da:	f04f 0300 	mov.w	r3, #0
 80028de:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80028e2:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80028e6:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80028ea:	4690      	mov	r8, r2
 80028ec:	4699      	mov	r9, r3
 80028ee:	eb18 0a00 	adds.w	sl, r8, r0
 80028f2:	eb49 0b01 	adc.w	fp, r9, r1
 80028f6:	f04f 0200 	mov.w	r2, #0
 80028fa:	f04f 0300 	mov.w	r3, #0
 80028fe:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002902:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002906:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800290a:	ebb2 040a 	subs.w	r4, r2, sl
 800290e:	603c      	str	r4, [r7, #0]
 8002910:	eb63 030b 	sbc.w	r3, r3, fp
 8002914:	607b      	str	r3, [r7, #4]
 8002916:	e9d7 4500 	ldrd	r4, r5, [r7]
 800291a:	4623      	mov	r3, r4
 800291c:	181b      	adds	r3, r3, r0
 800291e:	613b      	str	r3, [r7, #16]
 8002920:	462b      	mov	r3, r5
 8002922:	eb41 0303 	adc.w	r3, r1, r3
 8002926:	617b      	str	r3, [r7, #20]
 8002928:	6a3a      	ldr	r2, [r7, #32]
 800292a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800292e:	f7ff ff3f 	bl	80027b0 <UTILS_NanosecondsToTimespec>

    return 0;
 8002932:	2300      	movs	r3, #0
 8002934:	4618      	mov	r0, r3
 8002936:	3738      	adds	r7, #56	@ 0x38
 8002938:	46bd      	mov	sp, r7
 800293a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002946:	4b12      	ldr	r3, [pc, #72]	@ (8002990 <HAL_MspInit+0x50>)
 8002948:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800294a:	4a11      	ldr	r2, [pc, #68]	@ (8002990 <HAL_MspInit+0x50>)
 800294c:	f043 0301 	orr.w	r3, r3, #1
 8002950:	6613      	str	r3, [r2, #96]	@ 0x60
 8002952:	4b0f      	ldr	r3, [pc, #60]	@ (8002990 <HAL_MspInit+0x50>)
 8002954:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	607b      	str	r3, [r7, #4]
 800295c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800295e:	4b0c      	ldr	r3, [pc, #48]	@ (8002990 <HAL_MspInit+0x50>)
 8002960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002962:	4a0b      	ldr	r2, [pc, #44]	@ (8002990 <HAL_MspInit+0x50>)
 8002964:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002968:	6593      	str	r3, [r2, #88]	@ 0x58
 800296a:	4b09      	ldr	r3, [pc, #36]	@ (8002990 <HAL_MspInit+0x50>)
 800296c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800296e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002972:	603b      	str	r3, [r7, #0]
 8002974:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002976:	2200      	movs	r2, #0
 8002978:	210f      	movs	r1, #15
 800297a:	f06f 0001 	mvn.w	r0, #1
 800297e:	f000 fbb9 	bl	80030f4 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002982:	f001 ffa1 	bl	80048c8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002986:	bf00      	nop
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	40021000 	.word	0x40021000

08002994 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b08c      	sub	sp, #48	@ 0x30
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800299c:	2300      	movs	r3, #0
 800299e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 80029a0:	2300      	movs	r3, #0
 80029a2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80029a4:	4b2c      	ldr	r3, [pc, #176]	@ (8002a58 <HAL_InitTick+0xc4>)
 80029a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029a8:	4a2b      	ldr	r2, [pc, #172]	@ (8002a58 <HAL_InitTick+0xc4>)
 80029aa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80029ae:	6613      	str	r3, [r2, #96]	@ 0x60
 80029b0:	4b29      	ldr	r3, [pc, #164]	@ (8002a58 <HAL_InitTick+0xc4>)
 80029b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029b8:	60bb      	str	r3, [r7, #8]
 80029ba:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80029bc:	f107 020c 	add.w	r2, r7, #12
 80029c0:	f107 0310 	add.w	r3, r7, #16
 80029c4:	4611      	mov	r1, r2
 80029c6:	4618      	mov	r0, r3
 80029c8:	f002 fc76 	bl	80052b8 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80029cc:	f002 fc5e 	bl	800528c <HAL_RCC_GetPCLK2Freq>
 80029d0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80029d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029d4:	4a21      	ldr	r2, [pc, #132]	@ (8002a5c <HAL_InitTick+0xc8>)
 80029d6:	fba2 2303 	umull	r2, r3, r2, r3
 80029da:	0c9b      	lsrs	r3, r3, #18
 80029dc:	3b01      	subs	r3, #1
 80029de:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80029e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002a60 <HAL_InitTick+0xcc>)
 80029e2:	4a20      	ldr	r2, [pc, #128]	@ (8002a64 <HAL_InitTick+0xd0>)
 80029e4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80029e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002a60 <HAL_InitTick+0xcc>)
 80029e8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80029ec:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80029ee:	4a1c      	ldr	r2, [pc, #112]	@ (8002a60 <HAL_InitTick+0xcc>)
 80029f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80029f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002a60 <HAL_InitTick+0xcc>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029fa:	4b19      	ldr	r3, [pc, #100]	@ (8002a60 <HAL_InitTick+0xcc>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8002a00:	4817      	ldr	r0, [pc, #92]	@ (8002a60 <HAL_InitTick+0xcc>)
 8002a02:	f002 ff1f 	bl	8005844 <HAL_TIM_Base_Init>
 8002a06:	4603      	mov	r3, r0
 8002a08:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002a0c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d11b      	bne.n	8002a4c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002a14:	4812      	ldr	r0, [pc, #72]	@ (8002a60 <HAL_InitTick+0xcc>)
 8002a16:	f002 ff77 	bl	8005908 <HAL_TIM_Base_Start_IT>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002a20:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d111      	bne.n	8002a4c <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002a28:	2019      	movs	r0, #25
 8002a2a:	f000 fb7d 	bl	8003128 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2b0f      	cmp	r3, #15
 8002a32:	d808      	bhi.n	8002a46 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8002a34:	2200      	movs	r2, #0
 8002a36:	6879      	ldr	r1, [r7, #4]
 8002a38:	2019      	movs	r0, #25
 8002a3a:	f000 fb5b 	bl	80030f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8002a68 <HAL_InitTick+0xd4>)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6013      	str	r3, [r2, #0]
 8002a44:	e002      	b.n	8002a4c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002a4c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3730      	adds	r7, #48	@ 0x30
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	431bde83 	.word	0x431bde83
 8002a60:	20005354 	.word	0x20005354
 8002a64:	40012c00 	.word	0x40012c00
 8002a68:	20000010 	.word	0x20000010

08002a6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a70:	bf00      	nop
 8002a72:	e7fd      	b.n	8002a70 <NMI_Handler+0x4>

08002a74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a78:	bf00      	nop
 8002a7a:	e7fd      	b.n	8002a78 <HardFault_Handler+0x4>

08002a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a80:	bf00      	nop
 8002a82:	e7fd      	b.n	8002a80 <MemManage_Handler+0x4>

08002a84 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a88:	bf00      	nop
 8002a8a:	e7fd      	b.n	8002a88 <BusFault_Handler+0x4>

08002a8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a90:	bf00      	nop
 8002a92:	e7fd      	b.n	8002a90 <UsageFault_Handler+0x4>

08002a94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a98:	bf00      	nop
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
	...

08002aa4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002aa8:	4802      	ldr	r0, [pc, #8]	@ (8002ab4 <DMA1_Channel1_IRQHandler+0x10>)
 8002aaa:	f000 fd2e 	bl	800350a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002aae:	bf00      	nop
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	2000543c 	.word	0x2000543c

08002ab8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8002abc:	4802      	ldr	r0, [pc, #8]	@ (8002ac8 <DMA1_Channel2_IRQHandler+0x10>)
 8002abe:	f000 fd24 	bl	800350a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002ac2:	bf00      	nop
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	2000549c 	.word	0x2000549c

08002acc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002ad0:	4802      	ldr	r0, [pc, #8]	@ (8002adc <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002ad2:	f002 ff91 	bl	80059f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002ad6:	bf00      	nop
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	20005354 	.word	0x20005354

08002ae0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002ae4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002ae8:	f001 f804 	bl	8003af4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002aec:	bf00      	nop
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002af4:	4802      	ldr	r0, [pc, #8]	@ (8002b00 <LPUART1_IRQHandler+0x10>)
 8002af6:	f003 fba3 	bl	8006240 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002afa:	bf00      	nop
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	200053a8 	.word	0x200053a8

08002b04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  return 1;
 8002b08:	2301      	movs	r3, #1
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <_kill>:

int _kill(int pid, int sig)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b1e:	f017 f925 	bl	8019d6c <__errno>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2216      	movs	r2, #22
 8002b26:	601a      	str	r2, [r3, #0]
  return -1;
 8002b28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3708      	adds	r7, #8
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <_exit>:

void _exit (int status)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b3c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f7ff ffe7 	bl	8002b14 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b46:	bf00      	nop
 8002b48:	e7fd      	b.n	8002b46 <_exit+0x12>

08002b4a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b086      	sub	sp, #24
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	60f8      	str	r0, [r7, #12]
 8002b52:	60b9      	str	r1, [r7, #8]
 8002b54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b56:	2300      	movs	r3, #0
 8002b58:	617b      	str	r3, [r7, #20]
 8002b5a:	e00a      	b.n	8002b72 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b5c:	f3af 8000 	nop.w
 8002b60:	4601      	mov	r1, r0
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	1c5a      	adds	r2, r3, #1
 8002b66:	60ba      	str	r2, [r7, #8]
 8002b68:	b2ca      	uxtb	r2, r1
 8002b6a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	3301      	adds	r3, #1
 8002b70:	617b      	str	r3, [r7, #20]
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	dbf0      	blt.n	8002b5c <_read+0x12>
  }

  return len;
 8002b7a:	687b      	ldr	r3, [r7, #4]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3718      	adds	r7, #24
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b90:	2300      	movs	r3, #0
 8002b92:	617b      	str	r3, [r7, #20]
 8002b94:	e009      	b.n	8002baa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	1c5a      	adds	r2, r3, #1
 8002b9a:	60ba      	str	r2, [r7, #8]
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	617b      	str	r3, [r7, #20]
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	dbf1      	blt.n	8002b96 <_write+0x12>
  }
  return len;
 8002bb2:	687b      	ldr	r3, [r7, #4]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3718      	adds	r7, #24
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <_close>:

int _close(int file)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002bc4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002be4:	605a      	str	r2, [r3, #4]
  return 0;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <_isatty>:

int _isatty(int file)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002bfc:	2301      	movs	r3, #1
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr

08002c0a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b085      	sub	sp, #20
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	60f8      	str	r0, [r7, #12]
 8002c12:	60b9      	str	r1, [r7, #8]
 8002c14:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3714      	adds	r7, #20
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c2c:	4a14      	ldr	r2, [pc, #80]	@ (8002c80 <_sbrk+0x5c>)
 8002c2e:	4b15      	ldr	r3, [pc, #84]	@ (8002c84 <_sbrk+0x60>)
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c38:	4b13      	ldr	r3, [pc, #76]	@ (8002c88 <_sbrk+0x64>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d102      	bne.n	8002c46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c40:	4b11      	ldr	r3, [pc, #68]	@ (8002c88 <_sbrk+0x64>)
 8002c42:	4a12      	ldr	r2, [pc, #72]	@ (8002c8c <_sbrk+0x68>)
 8002c44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c46:	4b10      	ldr	r3, [pc, #64]	@ (8002c88 <_sbrk+0x64>)
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d207      	bcs.n	8002c64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c54:	f017 f88a 	bl	8019d6c <__errno>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	220c      	movs	r2, #12
 8002c5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002c62:	e009      	b.n	8002c78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c64:	4b08      	ldr	r3, [pc, #32]	@ (8002c88 <_sbrk+0x64>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c6a:	4b07      	ldr	r3, [pc, #28]	@ (8002c88 <_sbrk+0x64>)
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4413      	add	r3, r2
 8002c72:	4a05      	ldr	r2, [pc, #20]	@ (8002c88 <_sbrk+0x64>)
 8002c74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c76:	68fb      	ldr	r3, [r7, #12]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3718      	adds	r7, #24
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	20020000 	.word	0x20020000
 8002c84:	00000400 	.word	0x00000400
 8002c88:	200053a4 	.word	0x200053a4
 8002c8c:	2000bd28 	.word	0x2000bd28

08002c90 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002c94:	4b06      	ldr	r3, [pc, #24]	@ (8002cb0 <SystemInit+0x20>)
 8002c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c9a:	4a05      	ldr	r2, [pc, #20]	@ (8002cb0 <SystemInit+0x20>)
 8002c9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ca0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ca4:	bf00      	nop
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	e000ed00 	.word	0xe000ed00

08002cb4 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002cb8:	4b20      	ldr	r3, [pc, #128]	@ (8002d3c <MX_LPUART1_UART_Init+0x88>)
 8002cba:	4a21      	ldr	r2, [pc, #132]	@ (8002d40 <MX_LPUART1_UART_Init+0x8c>)
 8002cbc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 8002cbe:	4b1f      	ldr	r3, [pc, #124]	@ (8002d3c <MX_LPUART1_UART_Init+0x88>)
 8002cc0:	4a20      	ldr	r2, [pc, #128]	@ (8002d44 <MX_LPUART1_UART_Init+0x90>)
 8002cc2:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002cc4:	4b1d      	ldr	r3, [pc, #116]	@ (8002d3c <MX_LPUART1_UART_Init+0x88>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002cca:	4b1c      	ldr	r3, [pc, #112]	@ (8002d3c <MX_LPUART1_UART_Init+0x88>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002cd0:	4b1a      	ldr	r3, [pc, #104]	@ (8002d3c <MX_LPUART1_UART_Init+0x88>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002cd6:	4b19      	ldr	r3, [pc, #100]	@ (8002d3c <MX_LPUART1_UART_Init+0x88>)
 8002cd8:	220c      	movs	r2, #12
 8002cda:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cdc:	4b17      	ldr	r3, [pc, #92]	@ (8002d3c <MX_LPUART1_UART_Init+0x88>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ce2:	4b16      	ldr	r3, [pc, #88]	@ (8002d3c <MX_LPUART1_UART_Init+0x88>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ce8:	4b14      	ldr	r3, [pc, #80]	@ (8002d3c <MX_LPUART1_UART_Init+0x88>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002cee:	4b13      	ldr	r3, [pc, #76]	@ (8002d3c <MX_LPUART1_UART_Init+0x88>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002cf4:	4811      	ldr	r0, [pc, #68]	@ (8002d3c <MX_LPUART1_UART_Init+0x88>)
 8002cf6:	f003 f8f1 	bl	8005edc <HAL_UART_Init>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8002d00:	f7ff fcb4 	bl	800266c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d04:	2100      	movs	r1, #0
 8002d06:	480d      	ldr	r0, [pc, #52]	@ (8002d3c <MX_LPUART1_UART_Init+0x88>)
 8002d08:	f004 fe01 	bl	800790e <HAL_UARTEx_SetTxFifoThreshold>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8002d12:	f7ff fcab 	bl	800266c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d16:	2100      	movs	r1, #0
 8002d18:	4808      	ldr	r0, [pc, #32]	@ (8002d3c <MX_LPUART1_UART_Init+0x88>)
 8002d1a:	f004 fe36 	bl	800798a <HAL_UARTEx_SetRxFifoThreshold>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8002d24:	f7ff fca2 	bl	800266c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002d28:	4804      	ldr	r0, [pc, #16]	@ (8002d3c <MX_LPUART1_UART_Init+0x88>)
 8002d2a:	f004 fdb7 	bl	800789c <HAL_UARTEx_DisableFifoMode>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8002d34:	f7ff fc9a 	bl	800266c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002d38:	bf00      	nop
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	200053a8 	.word	0x200053a8
 8002d40:	40008000 	.word	0x40008000
 8002d44:	001e8480 	.word	0x001e8480

08002d48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b09e      	sub	sp, #120	@ 0x78
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d50:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	605a      	str	r2, [r3, #4]
 8002d5a:	609a      	str	r2, [r3, #8]
 8002d5c:	60da      	str	r2, [r3, #12]
 8002d5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d60:	f107 0310 	add.w	r3, r7, #16
 8002d64:	2254      	movs	r2, #84	@ 0x54
 8002d66:	2100      	movs	r1, #0
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f016 ff6b 	bl	8019c44 <memset>
  if(uartHandle->Instance==LPUART1)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a4e      	ldr	r2, [pc, #312]	@ (8002eac <HAL_UART_MspInit+0x164>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	f040 8094 	bne.w	8002ea2 <HAL_UART_MspInit+0x15a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002d7a:	2320      	movs	r3, #32
 8002d7c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d82:	f107 0310 	add.w	r3, r7, #16
 8002d86:	4618      	mov	r0, r3
 8002d88:	f002 fb0e 	bl	80053a8 <HAL_RCCEx_PeriphCLKConfig>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002d92:	f7ff fc6b 	bl	800266c <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002d96:	4b46      	ldr	r3, [pc, #280]	@ (8002eb0 <HAL_UART_MspInit+0x168>)
 8002d98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d9a:	4a45      	ldr	r2, [pc, #276]	@ (8002eb0 <HAL_UART_MspInit+0x168>)
 8002d9c:	f043 0301 	orr.w	r3, r3, #1
 8002da0:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002da2:	4b43      	ldr	r3, [pc, #268]	@ (8002eb0 <HAL_UART_MspInit+0x168>)
 8002da4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	60fb      	str	r3, [r7, #12]
 8002dac:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dae:	4b40      	ldr	r3, [pc, #256]	@ (8002eb0 <HAL_UART_MspInit+0x168>)
 8002db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002db2:	4a3f      	ldr	r2, [pc, #252]	@ (8002eb0 <HAL_UART_MspInit+0x168>)
 8002db4:	f043 0301 	orr.w	r3, r3, #1
 8002db8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002dba:	4b3d      	ldr	r3, [pc, #244]	@ (8002eb0 <HAL_UART_MspInit+0x168>)
 8002dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	60bb      	str	r3, [r7, #8]
 8002dc4:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8002dc6:	230c      	movs	r3, #12
 8002dc8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dca:	2302      	movs	r3, #2
 8002dcc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002dd6:	230c      	movs	r3, #12
 8002dd8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dda:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002dde:	4619      	mov	r1, r3
 8002de0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002de4:	f000 fcec 	bl	80037c0 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel1;
 8002de8:	4b32      	ldr	r3, [pc, #200]	@ (8002eb4 <HAL_UART_MspInit+0x16c>)
 8002dea:	4a33      	ldr	r2, [pc, #204]	@ (8002eb8 <HAL_UART_MspInit+0x170>)
 8002dec:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8002dee:	4b31      	ldr	r3, [pc, #196]	@ (8002eb4 <HAL_UART_MspInit+0x16c>)
 8002df0:	2223      	movs	r2, #35	@ 0x23
 8002df2:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002df4:	4b2f      	ldr	r3, [pc, #188]	@ (8002eb4 <HAL_UART_MspInit+0x16c>)
 8002df6:	2210      	movs	r2, #16
 8002df8:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dfa:	4b2e      	ldr	r3, [pc, #184]	@ (8002eb4 <HAL_UART_MspInit+0x16c>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e00:	4b2c      	ldr	r3, [pc, #176]	@ (8002eb4 <HAL_UART_MspInit+0x16c>)
 8002e02:	2280      	movs	r2, #128	@ 0x80
 8002e04:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e06:	4b2b      	ldr	r3, [pc, #172]	@ (8002eb4 <HAL_UART_MspInit+0x16c>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e0c:	4b29      	ldr	r3, [pc, #164]	@ (8002eb4 <HAL_UART_MspInit+0x16c>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8002e12:	4b28      	ldr	r3, [pc, #160]	@ (8002eb4 <HAL_UART_MspInit+0x16c>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002e18:	4b26      	ldr	r3, [pc, #152]	@ (8002eb4 <HAL_UART_MspInit+0x16c>)
 8002e1a:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8002e1e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8002e20:	4824      	ldr	r0, [pc, #144]	@ (8002eb4 <HAL_UART_MspInit+0x16c>)
 8002e22:	f000 f98f 	bl	8003144 <HAL_DMA_Init>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8002e2c:	f7ff fc1e 	bl	800266c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a20      	ldr	r2, [pc, #128]	@ (8002eb4 <HAL_UART_MspInit+0x16c>)
 8002e34:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002e36:	4a1f      	ldr	r2, [pc, #124]	@ (8002eb4 <HAL_UART_MspInit+0x16c>)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel2;
 8002e3c:	4b1f      	ldr	r3, [pc, #124]	@ (8002ebc <HAL_UART_MspInit+0x174>)
 8002e3e:	4a20      	ldr	r2, [pc, #128]	@ (8002ec0 <HAL_UART_MspInit+0x178>)
 8002e40:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8002e42:	4b1e      	ldr	r3, [pc, #120]	@ (8002ebc <HAL_UART_MspInit+0x174>)
 8002e44:	2222      	movs	r2, #34	@ 0x22
 8002e46:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e48:	4b1c      	ldr	r3, [pc, #112]	@ (8002ebc <HAL_UART_MspInit+0x174>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e4e:	4b1b      	ldr	r3, [pc, #108]	@ (8002ebc <HAL_UART_MspInit+0x174>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e54:	4b19      	ldr	r3, [pc, #100]	@ (8002ebc <HAL_UART_MspInit+0x174>)
 8002e56:	2280      	movs	r2, #128	@ 0x80
 8002e58:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e5a:	4b18      	ldr	r3, [pc, #96]	@ (8002ebc <HAL_UART_MspInit+0x174>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e60:	4b16      	ldr	r3, [pc, #88]	@ (8002ebc <HAL_UART_MspInit+0x174>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8002e66:	4b15      	ldr	r3, [pc, #84]	@ (8002ebc <HAL_UART_MspInit+0x174>)
 8002e68:	2220      	movs	r2, #32
 8002e6a:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002e6c:	4b13      	ldr	r3, [pc, #76]	@ (8002ebc <HAL_UART_MspInit+0x174>)
 8002e6e:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8002e72:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8002e74:	4811      	ldr	r0, [pc, #68]	@ (8002ebc <HAL_UART_MspInit+0x174>)
 8002e76:	f000 f965 	bl	8003144 <HAL_DMA_Init>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <HAL_UART_MspInit+0x13c>
    {
      Error_Handler();
 8002e80:	f7ff fbf4 	bl	800266c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4a0d      	ldr	r2, [pc, #52]	@ (8002ebc <HAL_UART_MspInit+0x174>)
 8002e88:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002e8c:	4a0b      	ldr	r2, [pc, #44]	@ (8002ebc <HAL_UART_MspInit+0x174>)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8002e92:	2200      	movs	r2, #0
 8002e94:	2105      	movs	r1, #5
 8002e96:	205b      	movs	r0, #91	@ 0x5b
 8002e98:	f000 f92c 	bl	80030f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002e9c:	205b      	movs	r0, #91	@ 0x5b
 8002e9e:	f000 f943 	bl	8003128 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8002ea2:	bf00      	nop
 8002ea4:	3778      	adds	r7, #120	@ 0x78
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40008000 	.word	0x40008000
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	2000543c 	.word	0x2000543c
 8002eb8:	40020008 	.word	0x40020008
 8002ebc:	2000549c 	.word	0x2000549c
 8002ec0:	4002001c 	.word	0x4002001c

08002ec4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ec4:	480d      	ldr	r0, [pc, #52]	@ (8002efc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002ec6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ec8:	f7ff fee2 	bl	8002c90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ecc:	480c      	ldr	r0, [pc, #48]	@ (8002f00 <LoopForever+0x6>)
  ldr r1, =_edata
 8002ece:	490d      	ldr	r1, [pc, #52]	@ (8002f04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ed0:	4a0d      	ldr	r2, [pc, #52]	@ (8002f08 <LoopForever+0xe>)
  movs r3, #0
 8002ed2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002ed4:	e002      	b.n	8002edc <LoopCopyDataInit>

08002ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002eda:	3304      	adds	r3, #4

08002edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ee0:	d3f9      	bcc.n	8002ed6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ee2:	4a0a      	ldr	r2, [pc, #40]	@ (8002f0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ee4:	4c0a      	ldr	r4, [pc, #40]	@ (8002f10 <LoopForever+0x16>)
  movs r3, #0
 8002ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ee8:	e001      	b.n	8002eee <LoopFillZerobss>

08002eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002eec:	3204      	adds	r2, #4

08002eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ef0:	d3fb      	bcc.n	8002eea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ef2:	f016 ff41 	bl	8019d78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002ef6:	f7ff fb31 	bl	800255c <main>

08002efa <LoopForever>:

LoopForever:
    b LoopForever
 8002efa:	e7fe      	b.n	8002efa <LoopForever>
  ldr   r0, =_estack
 8002efc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f04:	20000a60 	.word	0x20000a60
  ldr r2, =_sidata
 8002f08:	0801cbf8 	.word	0x0801cbf8
  ldr r2, =_sbss
 8002f0c:	20000a60 	.word	0x20000a60
  ldr r4, =_ebss
 8002f10:	2000bd24 	.word	0x2000bd24

08002f14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f14:	e7fe      	b.n	8002f14 <ADC1_2_IRQHandler>

08002f16 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b082      	sub	sp, #8
 8002f1a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f20:	2003      	movs	r0, #3
 8002f22:	f000 f8dc 	bl	80030de <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f26:	200f      	movs	r0, #15
 8002f28:	f7ff fd34 	bl	8002994 <HAL_InitTick>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d002      	beq.n	8002f38 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	71fb      	strb	r3, [r7, #7]
 8002f36:	e001      	b.n	8002f3c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f38:	f7ff fd02 	bl	8002940 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f3c:	79fb      	ldrb	r3, [r7, #7]

}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
	...

08002f48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f4c:	4b05      	ldr	r3, [pc, #20]	@ (8002f64 <HAL_IncTick+0x1c>)
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	4b05      	ldr	r3, [pc, #20]	@ (8002f68 <HAL_IncTick+0x20>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4413      	add	r3, r2
 8002f56:	4a03      	ldr	r2, [pc, #12]	@ (8002f64 <HAL_IncTick+0x1c>)
 8002f58:	6013      	str	r3, [r2, #0]
}
 8002f5a:	bf00      	nop
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr
 8002f64:	200054fc 	.word	0x200054fc
 8002f68:	20000014 	.word	0x20000014

08002f6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f70:	4b03      	ldr	r3, [pc, #12]	@ (8002f80 <HAL_GetTick+0x14>)
 8002f72:	681b      	ldr	r3, [r3, #0]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	200054fc 	.word	0x200054fc

08002f84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f003 0307 	and.w	r3, r3, #7
 8002f92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f94:	4b0c      	ldr	r3, [pc, #48]	@ (8002fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f9a:	68ba      	ldr	r2, [r7, #8]
 8002f9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002fb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fb6:	4a04      	ldr	r2, [pc, #16]	@ (8002fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	60d3      	str	r3, [r2, #12]
}
 8002fbc:	bf00      	nop
 8002fbe:	3714      	adds	r7, #20
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr
 8002fc8:	e000ed00 	.word	0xe000ed00

08002fcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fd0:	4b04      	ldr	r3, [pc, #16]	@ (8002fe4 <__NVIC_GetPriorityGrouping+0x18>)
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	0a1b      	lsrs	r3, r3, #8
 8002fd6:	f003 0307 	and.w	r3, r3, #7
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr
 8002fe4:	e000ed00 	.word	0xe000ed00

08002fe8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	4603      	mov	r3, r0
 8002ff0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	db0b      	blt.n	8003012 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ffa:	79fb      	ldrb	r3, [r7, #7]
 8002ffc:	f003 021f 	and.w	r2, r3, #31
 8003000:	4907      	ldr	r1, [pc, #28]	@ (8003020 <__NVIC_EnableIRQ+0x38>)
 8003002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003006:	095b      	lsrs	r3, r3, #5
 8003008:	2001      	movs	r0, #1
 800300a:	fa00 f202 	lsl.w	r2, r0, r2
 800300e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003012:	bf00      	nop
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	e000e100 	.word	0xe000e100

08003024 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	4603      	mov	r3, r0
 800302c:	6039      	str	r1, [r7, #0]
 800302e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003034:	2b00      	cmp	r3, #0
 8003036:	db0a      	blt.n	800304e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	b2da      	uxtb	r2, r3
 800303c:	490c      	ldr	r1, [pc, #48]	@ (8003070 <__NVIC_SetPriority+0x4c>)
 800303e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003042:	0112      	lsls	r2, r2, #4
 8003044:	b2d2      	uxtb	r2, r2
 8003046:	440b      	add	r3, r1
 8003048:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800304c:	e00a      	b.n	8003064 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	b2da      	uxtb	r2, r3
 8003052:	4908      	ldr	r1, [pc, #32]	@ (8003074 <__NVIC_SetPriority+0x50>)
 8003054:	79fb      	ldrb	r3, [r7, #7]
 8003056:	f003 030f 	and.w	r3, r3, #15
 800305a:	3b04      	subs	r3, #4
 800305c:	0112      	lsls	r2, r2, #4
 800305e:	b2d2      	uxtb	r2, r2
 8003060:	440b      	add	r3, r1
 8003062:	761a      	strb	r2, [r3, #24]
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	e000e100 	.word	0xe000e100
 8003074:	e000ed00 	.word	0xe000ed00

08003078 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003078:	b480      	push	{r7}
 800307a:	b089      	sub	sp, #36	@ 0x24
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f003 0307 	and.w	r3, r3, #7
 800308a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	f1c3 0307 	rsb	r3, r3, #7
 8003092:	2b04      	cmp	r3, #4
 8003094:	bf28      	it	cs
 8003096:	2304      	movcs	r3, #4
 8003098:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	3304      	adds	r3, #4
 800309e:	2b06      	cmp	r3, #6
 80030a0:	d902      	bls.n	80030a8 <NVIC_EncodePriority+0x30>
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	3b03      	subs	r3, #3
 80030a6:	e000      	b.n	80030aa <NVIC_EncodePriority+0x32>
 80030a8:	2300      	movs	r3, #0
 80030aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	fa02 f303 	lsl.w	r3, r2, r3
 80030b6:	43da      	mvns	r2, r3
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	401a      	ands	r2, r3
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030c0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	fa01 f303 	lsl.w	r3, r1, r3
 80030ca:	43d9      	mvns	r1, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d0:	4313      	orrs	r3, r2
         );
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3724      	adds	r7, #36	@ 0x24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr

080030de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b082      	sub	sp, #8
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f7ff ff4c 	bl	8002f84 <__NVIC_SetPriorityGrouping>
}
 80030ec:	bf00      	nop
 80030ee:	3708      	adds	r7, #8
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b086      	sub	sp, #24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	4603      	mov	r3, r0
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
 8003100:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003102:	f7ff ff63 	bl	8002fcc <__NVIC_GetPriorityGrouping>
 8003106:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	68b9      	ldr	r1, [r7, #8]
 800310c:	6978      	ldr	r0, [r7, #20]
 800310e:	f7ff ffb3 	bl	8003078 <NVIC_EncodePriority>
 8003112:	4602      	mov	r2, r0
 8003114:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003118:	4611      	mov	r1, r2
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff ff82 	bl	8003024 <__NVIC_SetPriority>
}
 8003120:	bf00      	nop
 8003122:	3718      	adds	r7, #24
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	4603      	mov	r3, r0
 8003130:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff ff56 	bl	8002fe8 <__NVIC_EnableIRQ>
}
 800313c:	bf00      	nop
 800313e:	3708      	adds	r7, #8
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e08d      	b.n	8003272 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	461a      	mov	r2, r3
 800315c:	4b47      	ldr	r3, [pc, #284]	@ (800327c <HAL_DMA_Init+0x138>)
 800315e:	429a      	cmp	r2, r3
 8003160:	d80f      	bhi.n	8003182 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	461a      	mov	r2, r3
 8003168:	4b45      	ldr	r3, [pc, #276]	@ (8003280 <HAL_DMA_Init+0x13c>)
 800316a:	4413      	add	r3, r2
 800316c:	4a45      	ldr	r2, [pc, #276]	@ (8003284 <HAL_DMA_Init+0x140>)
 800316e:	fba2 2303 	umull	r2, r3, r2, r3
 8003172:	091b      	lsrs	r3, r3, #4
 8003174:	009a      	lsls	r2, r3, #2
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a42      	ldr	r2, [pc, #264]	@ (8003288 <HAL_DMA_Init+0x144>)
 800317e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003180:	e00e      	b.n	80031a0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	461a      	mov	r2, r3
 8003188:	4b40      	ldr	r3, [pc, #256]	@ (800328c <HAL_DMA_Init+0x148>)
 800318a:	4413      	add	r3, r2
 800318c:	4a3d      	ldr	r2, [pc, #244]	@ (8003284 <HAL_DMA_Init+0x140>)
 800318e:	fba2 2303 	umull	r2, r3, r2, r3
 8003192:	091b      	lsrs	r3, r3, #4
 8003194:	009a      	lsls	r2, r3, #2
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a3c      	ldr	r2, [pc, #240]	@ (8003290 <HAL_DMA_Init+0x14c>)
 800319e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2202      	movs	r2, #2
 80031a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80031b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80031c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 fa82 	bl	80036fc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003200:	d102      	bne.n	8003208 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003210:	b2d2      	uxtb	r2, r2
 8003212:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800321c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d010      	beq.n	8003248 <HAL_DMA_Init+0x104>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	2b04      	cmp	r3, #4
 800322c:	d80c      	bhi.n	8003248 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 faa2 	bl	8003778 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003244:	605a      	str	r2, [r3, #4]
 8003246:	e008      	b.n	800325a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	40020407 	.word	0x40020407
 8003280:	bffdfff8 	.word	0xbffdfff8
 8003284:	cccccccd 	.word	0xcccccccd
 8003288:	40020000 	.word	0x40020000
 800328c:	bffdfbf8 	.word	0xbffdfbf8
 8003290:	40020400 	.word	0x40020400

08003294 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
 80032a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032a2:	2300      	movs	r3, #0
 80032a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d101      	bne.n	80032b4 <HAL_DMA_Start_IT+0x20>
 80032b0:	2302      	movs	r3, #2
 80032b2:	e066      	b.n	8003382 <HAL_DMA_Start_IT+0xee>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d155      	bne.n	8003374 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2202      	movs	r2, #2
 80032cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f022 0201 	bic.w	r2, r2, #1
 80032e4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	68b9      	ldr	r1, [r7, #8]
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f000 f9c7 	bl	8003680 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d008      	beq.n	800330c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f042 020e 	orr.w	r2, r2, #14
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	e00f      	b.n	800332c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 0204 	bic.w	r2, r2, #4
 800331a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f042 020a 	orr.w	r2, r2, #10
 800332a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d007      	beq.n	800334a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003344:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003348:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800334e:	2b00      	cmp	r3, #0
 8003350:	d007      	beq.n	8003362 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800335c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003360:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f042 0201 	orr.w	r2, r2, #1
 8003370:	601a      	str	r2, [r3, #0]
 8003372:	e005      	b.n	8003380 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800337c:	2302      	movs	r3, #2
 800337e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003380:	7dfb      	ldrb	r3, [r7, #23]
}
 8003382:	4618      	mov	r0, r3
 8003384:	3718      	adds	r7, #24
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800338a:	b480      	push	{r7}
 800338c:	b085      	sub	sp, #20
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003392:	2300      	movs	r3, #0
 8003394:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d005      	beq.n	80033ae <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2204      	movs	r2, #4
 80033a6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	73fb      	strb	r3, [r7, #15]
 80033ac:	e037      	b.n	800341e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 020e 	bic.w	r2, r2, #14
 80033bc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033cc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 0201 	bic.w	r2, r2, #1
 80033dc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033e2:	f003 021f 	and.w	r2, r3, #31
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ea:	2101      	movs	r1, #1
 80033ec:	fa01 f202 	lsl.w	r2, r1, r2
 80033f0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80033fa:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00c      	beq.n	800341e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800340e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003412:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800341c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800342e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003430:	4618      	mov	r0, r3
 8003432:	3714      	adds	r7, #20
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003444:	2300      	movs	r3, #0
 8003446:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800344e:	b2db      	uxtb	r3, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d00d      	beq.n	8003470 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2204      	movs	r2, #4
 8003458:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2201      	movs	r2, #1
 800345e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	73fb      	strb	r3, [r7, #15]
 800346e:	e047      	b.n	8003500 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f022 020e 	bic.w	r2, r2, #14
 800347e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f022 0201 	bic.w	r2, r2, #1
 800348e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800349a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800349e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034a4:	f003 021f 	and.w	r2, r3, #31
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ac:	2101      	movs	r1, #1
 80034ae:	fa01 f202 	lsl.w	r2, r1, r2
 80034b2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80034bc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00c      	beq.n	80034e0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80034d4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80034de:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d003      	beq.n	8003500 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	4798      	blx	r3
    }
  }
  return status;
 8003500:	7bfb      	ldrb	r3, [r7, #15]
}
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b084      	sub	sp, #16
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003526:	f003 031f 	and.w	r3, r3, #31
 800352a:	2204      	movs	r2, #4
 800352c:	409a      	lsls	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	4013      	ands	r3, r2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d026      	beq.n	8003584 <HAL_DMA_IRQHandler+0x7a>
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	f003 0304 	and.w	r3, r3, #4
 800353c:	2b00      	cmp	r3, #0
 800353e:	d021      	beq.n	8003584 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0320 	and.w	r3, r3, #32
 800354a:	2b00      	cmp	r3, #0
 800354c:	d107      	bne.n	800355e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 0204 	bic.w	r2, r2, #4
 800355c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003562:	f003 021f 	and.w	r2, r3, #31
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356a:	2104      	movs	r1, #4
 800356c:	fa01 f202 	lsl.w	r2, r1, r2
 8003570:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003576:	2b00      	cmp	r3, #0
 8003578:	d071      	beq.n	800365e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003582:	e06c      	b.n	800365e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003588:	f003 031f 	and.w	r3, r3, #31
 800358c:	2202      	movs	r2, #2
 800358e:	409a      	lsls	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	4013      	ands	r3, r2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d02e      	beq.n	80035f6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d029      	beq.n	80035f6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0320 	and.w	r3, r3, #32
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d10b      	bne.n	80035c8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 020a 	bic.w	r2, r2, #10
 80035be:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035cc:	f003 021f 	and.w	r2, r3, #31
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d4:	2102      	movs	r1, #2
 80035d6:	fa01 f202 	lsl.w	r2, r1, r2
 80035da:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d038      	beq.n	800365e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80035f4:	e033      	b.n	800365e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035fa:	f003 031f 	and.w	r3, r3, #31
 80035fe:	2208      	movs	r2, #8
 8003600:	409a      	lsls	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	4013      	ands	r3, r2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d02a      	beq.n	8003660 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	f003 0308 	and.w	r3, r3, #8
 8003610:	2b00      	cmp	r3, #0
 8003612:	d025      	beq.n	8003660 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 020e 	bic.w	r2, r2, #14
 8003622:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003628:	f003 021f 	and.w	r2, r3, #31
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003630:	2101      	movs	r1, #1
 8003632:	fa01 f202 	lsl.w	r2, r1, r2
 8003636:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003652:	2b00      	cmp	r3, #0
 8003654:	d004      	beq.n	8003660 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800365e:	bf00      	nop
 8003660:	bf00      	nop
}
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8003674:	4618      	mov	r0, r3
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
 800368c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003696:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800369c:	2b00      	cmp	r3, #0
 800369e:	d004      	beq.n	80036aa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80036a8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ae:	f003 021f 	and.w	r2, r3, #31
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b6:	2101      	movs	r1, #1
 80036b8:	fa01 f202 	lsl.w	r2, r1, r2
 80036bc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	2b10      	cmp	r3, #16
 80036cc:	d108      	bne.n	80036e0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68ba      	ldr	r2, [r7, #8]
 80036dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80036de:	e007      	b.n	80036f0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68ba      	ldr	r2, [r7, #8]
 80036e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	60da      	str	r2, [r3, #12]
}
 80036f0:	bf00      	nop
 80036f2:	3714      	adds	r7, #20
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b087      	sub	sp, #28
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	461a      	mov	r2, r3
 800370a:	4b16      	ldr	r3, [pc, #88]	@ (8003764 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800370c:	429a      	cmp	r2, r3
 800370e:	d802      	bhi.n	8003716 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003710:	4b15      	ldr	r3, [pc, #84]	@ (8003768 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003712:	617b      	str	r3, [r7, #20]
 8003714:	e001      	b.n	800371a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003716:	4b15      	ldr	r3, [pc, #84]	@ (800376c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003718:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	b2db      	uxtb	r3, r3
 8003724:	3b08      	subs	r3, #8
 8003726:	4a12      	ldr	r2, [pc, #72]	@ (8003770 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003728:	fba2 2303 	umull	r2, r3, r2, r3
 800372c:	091b      	lsrs	r3, r3, #4
 800372e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003734:	089b      	lsrs	r3, r3, #2
 8003736:	009a      	lsls	r2, r3, #2
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	4413      	add	r3, r2
 800373c:	461a      	mov	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a0b      	ldr	r2, [pc, #44]	@ (8003774 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003746:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f003 031f 	and.w	r3, r3, #31
 800374e:	2201      	movs	r2, #1
 8003750:	409a      	lsls	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003756:	bf00      	nop
 8003758:	371c      	adds	r7, #28
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	40020407 	.word	0x40020407
 8003768:	40020800 	.word	0x40020800
 800376c:	40020820 	.word	0x40020820
 8003770:	cccccccd 	.word	0xcccccccd
 8003774:	40020880 	.word	0x40020880

08003778 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	b2db      	uxtb	r3, r3
 8003786:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	4b0b      	ldr	r3, [pc, #44]	@ (80037b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800378c:	4413      	add	r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	461a      	mov	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a08      	ldr	r2, [pc, #32]	@ (80037bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800379a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	3b01      	subs	r3, #1
 80037a0:	f003 031f 	and.w	r3, r3, #31
 80037a4:	2201      	movs	r2, #1
 80037a6:	409a      	lsls	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80037ac:	bf00      	nop
 80037ae:	3714      	adds	r7, #20
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr
 80037b8:	1000823f 	.word	0x1000823f
 80037bc:	40020940 	.word	0x40020940

080037c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b087      	sub	sp, #28
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80037ca:	2300      	movs	r3, #0
 80037cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80037ce:	e15a      	b.n	8003a86 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	2101      	movs	r1, #1
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	fa01 f303 	lsl.w	r3, r1, r3
 80037dc:	4013      	ands	r3, r2
 80037de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	f000 814c 	beq.w	8003a80 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f003 0303 	and.w	r3, r3, #3
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d005      	beq.n	8003800 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d130      	bne.n	8003862 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	2203      	movs	r2, #3
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	43db      	mvns	r3, r3
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	4013      	ands	r3, r2
 8003816:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	68da      	ldr	r2, [r3, #12]
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	4313      	orrs	r3, r2
 8003828:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003836:	2201      	movs	r2, #1
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	fa02 f303 	lsl.w	r3, r2, r3
 800383e:	43db      	mvns	r3, r3
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	4013      	ands	r3, r2
 8003844:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	091b      	lsrs	r3, r3, #4
 800384c:	f003 0201 	and.w	r2, r3, #1
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	fa02 f303 	lsl.w	r3, r2, r3
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	4313      	orrs	r3, r2
 800385a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f003 0303 	and.w	r3, r3, #3
 800386a:	2b03      	cmp	r3, #3
 800386c:	d017      	beq.n	800389e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	2203      	movs	r2, #3
 800387a:	fa02 f303 	lsl.w	r3, r2, r3
 800387e:	43db      	mvns	r3, r3
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	4013      	ands	r3, r2
 8003884:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	689a      	ldr	r2, [r3, #8]
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	fa02 f303 	lsl.w	r3, r2, r3
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	4313      	orrs	r3, r2
 8003896:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f003 0303 	and.w	r3, r3, #3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d123      	bne.n	80038f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	08da      	lsrs	r2, r3, #3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	3208      	adds	r2, #8
 80038b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	f003 0307 	and.w	r3, r3, #7
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	220f      	movs	r2, #15
 80038c2:	fa02 f303 	lsl.w	r3, r2, r3
 80038c6:	43db      	mvns	r3, r3
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	4013      	ands	r3, r2
 80038cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	691a      	ldr	r2, [r3, #16]
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	f003 0307 	and.w	r3, r3, #7
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	fa02 f303 	lsl.w	r3, r2, r3
 80038de:	693a      	ldr	r2, [r7, #16]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	08da      	lsrs	r2, r3, #3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	3208      	adds	r2, #8
 80038ec:	6939      	ldr	r1, [r7, #16]
 80038ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	2203      	movs	r2, #3
 80038fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003902:	43db      	mvns	r3, r3
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	4013      	ands	r3, r2
 8003908:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f003 0203 	and.w	r2, r3, #3
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	fa02 f303 	lsl.w	r3, r2, r3
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	4313      	orrs	r3, r2
 800391e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800392e:	2b00      	cmp	r3, #0
 8003930:	f000 80a6 	beq.w	8003a80 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003934:	4b5b      	ldr	r3, [pc, #364]	@ (8003aa4 <HAL_GPIO_Init+0x2e4>)
 8003936:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003938:	4a5a      	ldr	r2, [pc, #360]	@ (8003aa4 <HAL_GPIO_Init+0x2e4>)
 800393a:	f043 0301 	orr.w	r3, r3, #1
 800393e:	6613      	str	r3, [r2, #96]	@ 0x60
 8003940:	4b58      	ldr	r3, [pc, #352]	@ (8003aa4 <HAL_GPIO_Init+0x2e4>)
 8003942:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	60bb      	str	r3, [r7, #8]
 800394a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800394c:	4a56      	ldr	r2, [pc, #344]	@ (8003aa8 <HAL_GPIO_Init+0x2e8>)
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	089b      	lsrs	r3, r3, #2
 8003952:	3302      	adds	r3, #2
 8003954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003958:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	f003 0303 	and.w	r3, r3, #3
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	220f      	movs	r2, #15
 8003964:	fa02 f303 	lsl.w	r3, r2, r3
 8003968:	43db      	mvns	r3, r3
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	4013      	ands	r3, r2
 800396e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003976:	d01f      	beq.n	80039b8 <HAL_GPIO_Init+0x1f8>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a4c      	ldr	r2, [pc, #304]	@ (8003aac <HAL_GPIO_Init+0x2ec>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d019      	beq.n	80039b4 <HAL_GPIO_Init+0x1f4>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a4b      	ldr	r2, [pc, #300]	@ (8003ab0 <HAL_GPIO_Init+0x2f0>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d013      	beq.n	80039b0 <HAL_GPIO_Init+0x1f0>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a4a      	ldr	r2, [pc, #296]	@ (8003ab4 <HAL_GPIO_Init+0x2f4>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d00d      	beq.n	80039ac <HAL_GPIO_Init+0x1ec>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a49      	ldr	r2, [pc, #292]	@ (8003ab8 <HAL_GPIO_Init+0x2f8>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d007      	beq.n	80039a8 <HAL_GPIO_Init+0x1e8>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a48      	ldr	r2, [pc, #288]	@ (8003abc <HAL_GPIO_Init+0x2fc>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d101      	bne.n	80039a4 <HAL_GPIO_Init+0x1e4>
 80039a0:	2305      	movs	r3, #5
 80039a2:	e00a      	b.n	80039ba <HAL_GPIO_Init+0x1fa>
 80039a4:	2306      	movs	r3, #6
 80039a6:	e008      	b.n	80039ba <HAL_GPIO_Init+0x1fa>
 80039a8:	2304      	movs	r3, #4
 80039aa:	e006      	b.n	80039ba <HAL_GPIO_Init+0x1fa>
 80039ac:	2303      	movs	r3, #3
 80039ae:	e004      	b.n	80039ba <HAL_GPIO_Init+0x1fa>
 80039b0:	2302      	movs	r3, #2
 80039b2:	e002      	b.n	80039ba <HAL_GPIO_Init+0x1fa>
 80039b4:	2301      	movs	r3, #1
 80039b6:	e000      	b.n	80039ba <HAL_GPIO_Init+0x1fa>
 80039b8:	2300      	movs	r3, #0
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	f002 0203 	and.w	r2, r2, #3
 80039c0:	0092      	lsls	r2, r2, #2
 80039c2:	4093      	lsls	r3, r2
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039ca:	4937      	ldr	r1, [pc, #220]	@ (8003aa8 <HAL_GPIO_Init+0x2e8>)
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	089b      	lsrs	r3, r3, #2
 80039d0:	3302      	adds	r3, #2
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80039d8:	4b39      	ldr	r3, [pc, #228]	@ (8003ac0 <HAL_GPIO_Init+0x300>)
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	43db      	mvns	r3, r3
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	4013      	ands	r3, r2
 80039e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d003      	beq.n	80039fc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80039fc:	4a30      	ldr	r2, [pc, #192]	@ (8003ac0 <HAL_GPIO_Init+0x300>)
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003a02:	4b2f      	ldr	r3, [pc, #188]	@ (8003ac0 <HAL_GPIO_Init+0x300>)
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	43db      	mvns	r3, r3
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	4013      	ands	r3, r2
 8003a10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003a26:	4a26      	ldr	r2, [pc, #152]	@ (8003ac0 <HAL_GPIO_Init+0x300>)
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003a2c:	4b24      	ldr	r3, [pc, #144]	@ (8003ac0 <HAL_GPIO_Init+0x300>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	43db      	mvns	r3, r3
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	4013      	ands	r3, r2
 8003a3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d003      	beq.n	8003a50 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003a48:	693a      	ldr	r2, [r7, #16]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a50:	4a1b      	ldr	r2, [pc, #108]	@ (8003ac0 <HAL_GPIO_Init+0x300>)
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003a56:	4b1a      	ldr	r3, [pc, #104]	@ (8003ac0 <HAL_GPIO_Init+0x300>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	43db      	mvns	r3, r3
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	4013      	ands	r3, r2
 8003a64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d003      	beq.n	8003a7a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a7a:	4a11      	ldr	r2, [pc, #68]	@ (8003ac0 <HAL_GPIO_Init+0x300>)
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	3301      	adds	r3, #1
 8003a84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f47f ae9d 	bne.w	80037d0 <HAL_GPIO_Init+0x10>
  }
}
 8003a96:	bf00      	nop
 8003a98:	bf00      	nop
 8003a9a:	371c      	adds	r7, #28
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	40010000 	.word	0x40010000
 8003aac:	48000400 	.word	0x48000400
 8003ab0:	48000800 	.word	0x48000800
 8003ab4:	48000c00 	.word	0x48000c00
 8003ab8:	48001000 	.word	0x48001000
 8003abc:	48001400 	.word	0x48001400
 8003ac0:	40010400 	.word	0x40010400

08003ac4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	460b      	mov	r3, r1
 8003ace:	807b      	strh	r3, [r7, #2]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ad4:	787b      	ldrb	r3, [r7, #1]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d003      	beq.n	8003ae2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ada:	887a      	ldrh	r2, [r7, #2]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ae0:	e002      	b.n	8003ae8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ae2:	887a      	ldrh	r2, [r7, #2]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	4603      	mov	r3, r0
 8003afc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003afe:	4b08      	ldr	r3, [pc, #32]	@ (8003b20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b00:	695a      	ldr	r2, [r3, #20]
 8003b02:	88fb      	ldrh	r3, [r7, #6]
 8003b04:	4013      	ands	r3, r2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d006      	beq.n	8003b18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b0a:	4a05      	ldr	r2, [pc, #20]	@ (8003b20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b0c:	88fb      	ldrh	r3, [r7, #6]
 8003b0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b10:	88fb      	ldrh	r3, [r7, #6]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 f806 	bl	8003b24 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b18:	bf00      	nop
 8003b1a:	3708      	adds	r7, #8
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	40010400 	.word	0x40010400

08003b24 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003b2e:	bf00      	nop
 8003b30:	370c      	adds	r7, #12
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr

08003b3a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	b082      	sub	sp, #8
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d101      	bne.n	8003b4c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e08d      	b.n	8003c68 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d106      	bne.n	8003b66 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f7fd fe75 	bl	8001850 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2224      	movs	r2, #36	@ 0x24
 8003b6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f022 0201 	bic.w	r2, r2, #1
 8003b7c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003b8a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689a      	ldr	r2, [r3, #8]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b9a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d107      	bne.n	8003bb4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	689a      	ldr	r2, [r3, #8]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003bb0:	609a      	str	r2, [r3, #8]
 8003bb2:	e006      	b.n	8003bc2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689a      	ldr	r2, [r3, #8]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003bc0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d108      	bne.n	8003bdc <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	685a      	ldr	r2, [r3, #4]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bd8:	605a      	str	r2, [r3, #4]
 8003bda:	e007      	b.n	8003bec <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003bea:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	6812      	ldr	r2, [r2, #0]
 8003bf6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003bfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bfe:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68da      	ldr	r2, [r3, #12]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c0e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	691a      	ldr	r2, [r3, #16]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	695b      	ldr	r3, [r3, #20]
 8003c18:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	430a      	orrs	r2, r1
 8003c28:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	69d9      	ldr	r1, [r3, #28]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a1a      	ldr	r2, [r3, #32]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	430a      	orrs	r2, r1
 8003c38:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f042 0201 	orr.w	r2, r2, #1
 8003c48:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2220      	movs	r2, #32
 8003c54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3708      	adds	r7, #8
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b088      	sub	sp, #32
 8003c74:	af02      	add	r7, sp, #8
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	4608      	mov	r0, r1
 8003c7a:	4611      	mov	r1, r2
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	4603      	mov	r3, r0
 8003c80:	817b      	strh	r3, [r7, #10]
 8003c82:	460b      	mov	r3, r1
 8003c84:	813b      	strh	r3, [r7, #8]
 8003c86:	4613      	mov	r3, r2
 8003c88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b20      	cmp	r3, #32
 8003c94:	f040 80f9 	bne.w	8003e8a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c98:	6a3b      	ldr	r3, [r7, #32]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d002      	beq.n	8003ca4 <HAL_I2C_Mem_Write+0x34>
 8003c9e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d105      	bne.n	8003cb0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003caa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e0ed      	b.n	8003e8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d101      	bne.n	8003cbe <HAL_I2C_Mem_Write+0x4e>
 8003cba:	2302      	movs	r3, #2
 8003cbc:	e0e6      	b.n	8003e8c <HAL_I2C_Mem_Write+0x21c>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003cc6:	f7ff f951 	bl	8002f6c <HAL_GetTick>
 8003cca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	9300      	str	r3, [sp, #0]
 8003cd0:	2319      	movs	r3, #25
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003cd8:	68f8      	ldr	r0, [r7, #12]
 8003cda:	f000 fac3 	bl	8004264 <I2C_WaitOnFlagUntilTimeout>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d001      	beq.n	8003ce8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e0d1      	b.n	8003e8c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2221      	movs	r2, #33	@ 0x21
 8003cec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2240      	movs	r2, #64	@ 0x40
 8003cf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6a3a      	ldr	r2, [r7, #32]
 8003d02:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003d08:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d10:	88f8      	ldrh	r0, [r7, #6]
 8003d12:	893a      	ldrh	r2, [r7, #8]
 8003d14:	8979      	ldrh	r1, [r7, #10]
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	9301      	str	r3, [sp, #4]
 8003d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	4603      	mov	r3, r0
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f000 f9d3 	bl	80040cc <I2C_RequestMemoryWrite>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d005      	beq.n	8003d38 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e0a9      	b.n	8003e8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	2bff      	cmp	r3, #255	@ 0xff
 8003d40:	d90e      	bls.n	8003d60 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	22ff      	movs	r2, #255	@ 0xff
 8003d46:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d4c:	b2da      	uxtb	r2, r3
 8003d4e:	8979      	ldrh	r1, [r7, #10]
 8003d50:	2300      	movs	r3, #0
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003d58:	68f8      	ldr	r0, [r7, #12]
 8003d5a:	f000 fc47 	bl	80045ec <I2C_TransferConfig>
 8003d5e:	e00f      	b.n	8003d80 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d6e:	b2da      	uxtb	r2, r3
 8003d70:	8979      	ldrh	r1, [r7, #10]
 8003d72:	2300      	movs	r3, #0
 8003d74:	9300      	str	r3, [sp, #0]
 8003d76:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	f000 fc36 	bl	80045ec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f000 fac6 	bl	8004316 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d001      	beq.n	8003d94 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e07b      	b.n	8003e8c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d98:	781a      	ldrb	r2, [r3, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da4:	1c5a      	adds	r2, r3, #1
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	3b01      	subs	r3, #1
 8003db2:	b29a      	uxth	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d034      	beq.n	8003e38 <HAL_I2C_Mem_Write+0x1c8>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d130      	bne.n	8003e38 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ddc:	2200      	movs	r2, #0
 8003dde:	2180      	movs	r1, #128	@ 0x80
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f000 fa3f 	bl	8004264 <I2C_WaitOnFlagUntilTimeout>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d001      	beq.n	8003df0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e04d      	b.n	8003e8c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	2bff      	cmp	r3, #255	@ 0xff
 8003df8:	d90e      	bls.n	8003e18 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	22ff      	movs	r2, #255	@ 0xff
 8003dfe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e04:	b2da      	uxtb	r2, r3
 8003e06:	8979      	ldrh	r1, [r7, #10]
 8003e08:	2300      	movs	r3, #0
 8003e0a:	9300      	str	r3, [sp, #0]
 8003e0c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	f000 fbeb 	bl	80045ec <I2C_TransferConfig>
 8003e16:	e00f      	b.n	8003e38 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e26:	b2da      	uxtb	r2, r3
 8003e28:	8979      	ldrh	r1, [r7, #10]
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f000 fbda 	bl	80045ec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d19e      	bne.n	8003d80 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f000 faac 	bl	80043a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e01a      	b.n	8003e8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	6859      	ldr	r1, [r3, #4]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	4b0a      	ldr	r3, [pc, #40]	@ (8003e94 <HAL_I2C_Mem_Write+0x224>)
 8003e6a:	400b      	ands	r3, r1
 8003e6c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2220      	movs	r2, #32
 8003e72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e86:	2300      	movs	r3, #0
 8003e88:	e000      	b.n	8003e8c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003e8a:	2302      	movs	r3, #2
  }
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3718      	adds	r7, #24
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	fe00e800 	.word	0xfe00e800

08003e98 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b088      	sub	sp, #32
 8003e9c:	af02      	add	r7, sp, #8
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	4608      	mov	r0, r1
 8003ea2:	4611      	mov	r1, r2
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	817b      	strh	r3, [r7, #10]
 8003eaa:	460b      	mov	r3, r1
 8003eac:	813b      	strh	r3, [r7, #8]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b20      	cmp	r3, #32
 8003ebc:	f040 80fd 	bne.w	80040ba <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ec0:	6a3b      	ldr	r3, [r7, #32]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d002      	beq.n	8003ecc <HAL_I2C_Mem_Read+0x34>
 8003ec6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d105      	bne.n	8003ed8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ed2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e0f1      	b.n	80040bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d101      	bne.n	8003ee6 <HAL_I2C_Mem_Read+0x4e>
 8003ee2:	2302      	movs	r3, #2
 8003ee4:	e0ea      	b.n	80040bc <HAL_I2C_Mem_Read+0x224>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003eee:	f7ff f83d 	bl	8002f6c <HAL_GetTick>
 8003ef2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	9300      	str	r3, [sp, #0]
 8003ef8:	2319      	movs	r3, #25
 8003efa:	2201      	movs	r2, #1
 8003efc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f000 f9af 	bl	8004264 <I2C_WaitOnFlagUntilTimeout>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d001      	beq.n	8003f10 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e0d5      	b.n	80040bc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2222      	movs	r2, #34	@ 0x22
 8003f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2240      	movs	r2, #64	@ 0x40
 8003f1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6a3a      	ldr	r2, [r7, #32]
 8003f2a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003f30:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f38:	88f8      	ldrh	r0, [r7, #6]
 8003f3a:	893a      	ldrh	r2, [r7, #8]
 8003f3c:	8979      	ldrh	r1, [r7, #10]
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	9301      	str	r3, [sp, #4]
 8003f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f44:	9300      	str	r3, [sp, #0]
 8003f46:	4603      	mov	r3, r0
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f000 f913 	bl	8004174 <I2C_RequestMemoryRead>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d005      	beq.n	8003f60 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e0ad      	b.n	80040bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	2bff      	cmp	r3, #255	@ 0xff
 8003f68:	d90e      	bls.n	8003f88 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	22ff      	movs	r2, #255	@ 0xff
 8003f6e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f74:	b2da      	uxtb	r2, r3
 8003f76:	8979      	ldrh	r1, [r7, #10]
 8003f78:	4b52      	ldr	r3, [pc, #328]	@ (80040c4 <HAL_I2C_Mem_Read+0x22c>)
 8003f7a:	9300      	str	r3, [sp, #0]
 8003f7c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f000 fb33 	bl	80045ec <I2C_TransferConfig>
 8003f86:	e00f      	b.n	8003fa8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f96:	b2da      	uxtb	r2, r3
 8003f98:	8979      	ldrh	r1, [r7, #10]
 8003f9a:	4b4a      	ldr	r3, [pc, #296]	@ (80040c4 <HAL_I2C_Mem_Read+0x22c>)
 8003f9c:	9300      	str	r3, [sp, #0]
 8003f9e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f000 fb22 	bl	80045ec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	9300      	str	r3, [sp, #0]
 8003fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fae:	2200      	movs	r2, #0
 8003fb0:	2104      	movs	r1, #4
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f000 f956 	bl	8004264 <I2C_WaitOnFlagUntilTimeout>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e07c      	b.n	80040bc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fcc:	b2d2      	uxtb	r2, r2
 8003fce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd4:	1c5a      	adds	r2, r3, #1
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	3b01      	subs	r3, #1
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d034      	beq.n	8004068 <HAL_I2C_Mem_Read+0x1d0>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004002:	2b00      	cmp	r3, #0
 8004004:	d130      	bne.n	8004068 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	9300      	str	r3, [sp, #0]
 800400a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800400c:	2200      	movs	r2, #0
 800400e:	2180      	movs	r1, #128	@ 0x80
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f000 f927 	bl	8004264 <I2C_WaitOnFlagUntilTimeout>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d001      	beq.n	8004020 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e04d      	b.n	80040bc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004024:	b29b      	uxth	r3, r3
 8004026:	2bff      	cmp	r3, #255	@ 0xff
 8004028:	d90e      	bls.n	8004048 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	22ff      	movs	r2, #255	@ 0xff
 800402e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004034:	b2da      	uxtb	r2, r3
 8004036:	8979      	ldrh	r1, [r7, #10]
 8004038:	2300      	movs	r3, #0
 800403a:	9300      	str	r3, [sp, #0]
 800403c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f000 fad3 	bl	80045ec <I2C_TransferConfig>
 8004046:	e00f      	b.n	8004068 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800404c:	b29a      	uxth	r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004056:	b2da      	uxtb	r2, r3
 8004058:	8979      	ldrh	r1, [r7, #10]
 800405a:	2300      	movs	r3, #0
 800405c:	9300      	str	r3, [sp, #0]
 800405e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f000 fac2 	bl	80045ec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800406c:	b29b      	uxth	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d19a      	bne.n	8003fa8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f000 f994 	bl	80043a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e01a      	b.n	80040bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2220      	movs	r2, #32
 800408c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	6859      	ldr	r1, [r3, #4]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	4b0b      	ldr	r3, [pc, #44]	@ (80040c8 <HAL_I2C_Mem_Read+0x230>)
 800409a:	400b      	ands	r3, r1
 800409c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2220      	movs	r2, #32
 80040a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80040b6:	2300      	movs	r3, #0
 80040b8:	e000      	b.n	80040bc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80040ba:	2302      	movs	r3, #2
  }
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3718      	adds	r7, #24
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	80002400 	.word	0x80002400
 80040c8:	fe00e800 	.word	0xfe00e800

080040cc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b086      	sub	sp, #24
 80040d0:	af02      	add	r7, sp, #8
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	4608      	mov	r0, r1
 80040d6:	4611      	mov	r1, r2
 80040d8:	461a      	mov	r2, r3
 80040da:	4603      	mov	r3, r0
 80040dc:	817b      	strh	r3, [r7, #10]
 80040de:	460b      	mov	r3, r1
 80040e0:	813b      	strh	r3, [r7, #8]
 80040e2:	4613      	mov	r3, r2
 80040e4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80040e6:	88fb      	ldrh	r3, [r7, #6]
 80040e8:	b2da      	uxtb	r2, r3
 80040ea:	8979      	ldrh	r1, [r7, #10]
 80040ec:	4b20      	ldr	r3, [pc, #128]	@ (8004170 <I2C_RequestMemoryWrite+0xa4>)
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f000 fa79 	bl	80045ec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040fa:	69fa      	ldr	r2, [r7, #28]
 80040fc:	69b9      	ldr	r1, [r7, #24]
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f000 f909 	bl	8004316 <I2C_WaitOnTXISFlagUntilTimeout>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d001      	beq.n	800410e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e02c      	b.n	8004168 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800410e:	88fb      	ldrh	r3, [r7, #6]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d105      	bne.n	8004120 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004114:	893b      	ldrh	r3, [r7, #8]
 8004116:	b2da      	uxtb	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	629a      	str	r2, [r3, #40]	@ 0x28
 800411e:	e015      	b.n	800414c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004120:	893b      	ldrh	r3, [r7, #8]
 8004122:	0a1b      	lsrs	r3, r3, #8
 8004124:	b29b      	uxth	r3, r3
 8004126:	b2da      	uxtb	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800412e:	69fa      	ldr	r2, [r7, #28]
 8004130:	69b9      	ldr	r1, [r7, #24]
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f000 f8ef 	bl	8004316 <I2C_WaitOnTXISFlagUntilTimeout>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d001      	beq.n	8004142 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e012      	b.n	8004168 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004142:	893b      	ldrh	r3, [r7, #8]
 8004144:	b2da      	uxtb	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	9300      	str	r3, [sp, #0]
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	2200      	movs	r2, #0
 8004154:	2180      	movs	r1, #128	@ 0x80
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	f000 f884 	bl	8004264 <I2C_WaitOnFlagUntilTimeout>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d001      	beq.n	8004166 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e000      	b.n	8004168 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	3710      	adds	r7, #16
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	80002000 	.word	0x80002000

08004174 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b086      	sub	sp, #24
 8004178:	af02      	add	r7, sp, #8
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	4608      	mov	r0, r1
 800417e:	4611      	mov	r1, r2
 8004180:	461a      	mov	r2, r3
 8004182:	4603      	mov	r3, r0
 8004184:	817b      	strh	r3, [r7, #10]
 8004186:	460b      	mov	r3, r1
 8004188:	813b      	strh	r3, [r7, #8]
 800418a:	4613      	mov	r3, r2
 800418c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800418e:	88fb      	ldrh	r3, [r7, #6]
 8004190:	b2da      	uxtb	r2, r3
 8004192:	8979      	ldrh	r1, [r7, #10]
 8004194:	4b20      	ldr	r3, [pc, #128]	@ (8004218 <I2C_RequestMemoryRead+0xa4>)
 8004196:	9300      	str	r3, [sp, #0]
 8004198:	2300      	movs	r3, #0
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f000 fa26 	bl	80045ec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041a0:	69fa      	ldr	r2, [r7, #28]
 80041a2:	69b9      	ldr	r1, [r7, #24]
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f000 f8b6 	bl	8004316 <I2C_WaitOnTXISFlagUntilTimeout>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d001      	beq.n	80041b4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e02c      	b.n	800420e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041b4:	88fb      	ldrh	r3, [r7, #6]
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d105      	bne.n	80041c6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041ba:	893b      	ldrh	r3, [r7, #8]
 80041bc:	b2da      	uxtb	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	629a      	str	r2, [r3, #40]	@ 0x28
 80041c4:	e015      	b.n	80041f2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80041c6:	893b      	ldrh	r3, [r7, #8]
 80041c8:	0a1b      	lsrs	r3, r3, #8
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	b2da      	uxtb	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041d4:	69fa      	ldr	r2, [r7, #28]
 80041d6:	69b9      	ldr	r1, [r7, #24]
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f000 f89c 	bl	8004316 <I2C_WaitOnTXISFlagUntilTimeout>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d001      	beq.n	80041e8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e012      	b.n	800420e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041e8:	893b      	ldrh	r3, [r7, #8]
 80041ea:	b2da      	uxtb	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	9300      	str	r3, [sp, #0]
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	2200      	movs	r2, #0
 80041fa:	2140      	movs	r1, #64	@ 0x40
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f000 f831 	bl	8004264 <I2C_WaitOnFlagUntilTimeout>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d001      	beq.n	800420c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e000      	b.n	800420e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	80002000 	.word	0x80002000

0800421c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b02      	cmp	r3, #2
 8004230:	d103      	bne.n	800423a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2200      	movs	r2, #0
 8004238:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	2b01      	cmp	r3, #1
 8004246:	d007      	beq.n	8004258 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	699a      	ldr	r2, [r3, #24]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f042 0201 	orr.w	r2, r2, #1
 8004256:	619a      	str	r2, [r3, #24]
  }
}
 8004258:	bf00      	nop
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	603b      	str	r3, [r7, #0]
 8004270:	4613      	mov	r3, r2
 8004272:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004274:	e03b      	b.n	80042ee <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	6839      	ldr	r1, [r7, #0]
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f000 f8d6 	bl	800442c <I2C_IsErrorOccurred>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d001      	beq.n	800428a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e041      	b.n	800430e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004290:	d02d      	beq.n	80042ee <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004292:	f7fe fe6b 	bl	8002f6c <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	683a      	ldr	r2, [r7, #0]
 800429e:	429a      	cmp	r2, r3
 80042a0:	d302      	bcc.n	80042a8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d122      	bne.n	80042ee <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	699a      	ldr	r2, [r3, #24]
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	4013      	ands	r3, r2
 80042b2:	68ba      	ldr	r2, [r7, #8]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	bf0c      	ite	eq
 80042b8:	2301      	moveq	r3, #1
 80042ba:	2300      	movne	r3, #0
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	461a      	mov	r2, r3
 80042c0:	79fb      	ldrb	r3, [r7, #7]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d113      	bne.n	80042ee <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ca:	f043 0220 	orr.w	r2, r3, #32
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2220      	movs	r2, #32
 80042d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e00f      	b.n	800430e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	699a      	ldr	r2, [r3, #24]
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	4013      	ands	r3, r2
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	bf0c      	ite	eq
 80042fe:	2301      	moveq	r3, #1
 8004300:	2300      	movne	r3, #0
 8004302:	b2db      	uxtb	r3, r3
 8004304:	461a      	mov	r2, r3
 8004306:	79fb      	ldrb	r3, [r7, #7]
 8004308:	429a      	cmp	r2, r3
 800430a:	d0b4      	beq.n	8004276 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3710      	adds	r7, #16
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b084      	sub	sp, #16
 800431a:	af00      	add	r7, sp, #0
 800431c:	60f8      	str	r0, [r7, #12]
 800431e:	60b9      	str	r1, [r7, #8]
 8004320:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004322:	e033      	b.n	800438c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	68b9      	ldr	r1, [r7, #8]
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f000 f87f 	bl	800442c <I2C_IsErrorOccurred>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d001      	beq.n	8004338 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e031      	b.n	800439c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800433e:	d025      	beq.n	800438c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004340:	f7fe fe14 	bl	8002f6c <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	68ba      	ldr	r2, [r7, #8]
 800434c:	429a      	cmp	r2, r3
 800434e:	d302      	bcc.n	8004356 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d11a      	bne.n	800438c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	f003 0302 	and.w	r3, r3, #2
 8004360:	2b02      	cmp	r3, #2
 8004362:	d013      	beq.n	800438c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004368:	f043 0220 	orr.w	r2, r3, #32
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2220      	movs	r2, #32
 8004374:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e007      	b.n	800439c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	2b02      	cmp	r3, #2
 8004398:	d1c4      	bne.n	8004324 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	3710      	adds	r7, #16
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043b0:	e02f      	b.n	8004412 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	68b9      	ldr	r1, [r7, #8]
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f000 f838 	bl	800442c <I2C_IsErrorOccurred>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d001      	beq.n	80043c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e02d      	b.n	8004422 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043c6:	f7fe fdd1 	bl	8002f6c <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	68ba      	ldr	r2, [r7, #8]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d302      	bcc.n	80043dc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d11a      	bne.n	8004412 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	f003 0320 	and.w	r3, r3, #32
 80043e6:	2b20      	cmp	r3, #32
 80043e8:	d013      	beq.n	8004412 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ee:	f043 0220 	orr.w	r2, r3, #32
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2220      	movs	r2, #32
 80043fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e007      	b.n	8004422 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	f003 0320 	and.w	r3, r3, #32
 800441c:	2b20      	cmp	r3, #32
 800441e:	d1c8      	bne.n	80043b2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3710      	adds	r7, #16
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
	...

0800442c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b08a      	sub	sp, #40	@ 0x28
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004438:	2300      	movs	r3, #0
 800443a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004446:	2300      	movs	r3, #0
 8004448:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	f003 0310 	and.w	r3, r3, #16
 8004454:	2b00      	cmp	r3, #0
 8004456:	d068      	beq.n	800452a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2210      	movs	r2, #16
 800445e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004460:	e049      	b.n	80044f6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004468:	d045      	beq.n	80044f6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800446a:	f7fe fd7f 	bl	8002f6c <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	68ba      	ldr	r2, [r7, #8]
 8004476:	429a      	cmp	r2, r3
 8004478:	d302      	bcc.n	8004480 <I2C_IsErrorOccurred+0x54>
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d13a      	bne.n	80044f6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800448a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004492:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800449e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044a2:	d121      	bne.n	80044e8 <I2C_IsErrorOccurred+0xbc>
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80044aa:	d01d      	beq.n	80044e8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80044ac:	7cfb      	ldrb	r3, [r7, #19]
 80044ae:	2b20      	cmp	r3, #32
 80044b0:	d01a      	beq.n	80044e8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	685a      	ldr	r2, [r3, #4]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80044c0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80044c2:	f7fe fd53 	bl	8002f6c <HAL_GetTick>
 80044c6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044c8:	e00e      	b.n	80044e8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80044ca:	f7fe fd4f 	bl	8002f6c <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b19      	cmp	r3, #25
 80044d6:	d907      	bls.n	80044e8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80044d8:	6a3b      	ldr	r3, [r7, #32]
 80044da:	f043 0320 	orr.w	r3, r3, #32
 80044de:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80044e6:	e006      	b.n	80044f6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	f003 0320 	and.w	r3, r3, #32
 80044f2:	2b20      	cmp	r3, #32
 80044f4:	d1e9      	bne.n	80044ca <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	f003 0320 	and.w	r3, r3, #32
 8004500:	2b20      	cmp	r3, #32
 8004502:	d003      	beq.n	800450c <I2C_IsErrorOccurred+0xe0>
 8004504:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004508:	2b00      	cmp	r3, #0
 800450a:	d0aa      	beq.n	8004462 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800450c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004510:	2b00      	cmp	r3, #0
 8004512:	d103      	bne.n	800451c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2220      	movs	r2, #32
 800451a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800451c:	6a3b      	ldr	r3, [r7, #32]
 800451e:	f043 0304 	orr.w	r3, r3, #4
 8004522:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00b      	beq.n	8004554 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800453c:	6a3b      	ldr	r3, [r7, #32]
 800453e:	f043 0301 	orr.w	r3, r3, #1
 8004542:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800454c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00b      	beq.n	8004576 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800455e:	6a3b      	ldr	r3, [r7, #32]
 8004560:	f043 0308 	orr.w	r3, r3, #8
 8004564:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800456e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800457c:	2b00      	cmp	r3, #0
 800457e:	d00b      	beq.n	8004598 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004580:	6a3b      	ldr	r3, [r7, #32]
 8004582:	f043 0302 	orr.w	r3, r3, #2
 8004586:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004590:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004598:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800459c:	2b00      	cmp	r3, #0
 800459e:	d01c      	beq.n	80045da <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f7ff fe3b 	bl	800421c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	6859      	ldr	r1, [r3, #4]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	4b0d      	ldr	r3, [pc, #52]	@ (80045e8 <I2C_IsErrorOccurred+0x1bc>)
 80045b2:	400b      	ands	r3, r1
 80045b4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045ba:	6a3b      	ldr	r3, [r7, #32]
 80045bc:	431a      	orrs	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2220      	movs	r2, #32
 80045c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80045da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3728      	adds	r7, #40	@ 0x28
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	fe00e800 	.word	0xfe00e800

080045ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b087      	sub	sp, #28
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	607b      	str	r3, [r7, #4]
 80045f6:	460b      	mov	r3, r1
 80045f8:	817b      	strh	r3, [r7, #10]
 80045fa:	4613      	mov	r3, r2
 80045fc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80045fe:	897b      	ldrh	r3, [r7, #10]
 8004600:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004604:	7a7b      	ldrb	r3, [r7, #9]
 8004606:	041b      	lsls	r3, r3, #16
 8004608:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800460c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004612:	6a3b      	ldr	r3, [r7, #32]
 8004614:	4313      	orrs	r3, r2
 8004616:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800461a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	685a      	ldr	r2, [r3, #4]
 8004622:	6a3b      	ldr	r3, [r7, #32]
 8004624:	0d5b      	lsrs	r3, r3, #21
 8004626:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800462a:	4b08      	ldr	r3, [pc, #32]	@ (800464c <I2C_TransferConfig+0x60>)
 800462c:	430b      	orrs	r3, r1
 800462e:	43db      	mvns	r3, r3
 8004630:	ea02 0103 	and.w	r1, r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	697a      	ldr	r2, [r7, #20]
 800463a:	430a      	orrs	r2, r1
 800463c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800463e:	bf00      	nop
 8004640:	371c      	adds	r7, #28
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	03ff63ff 	.word	0x03ff63ff

08004650 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b20      	cmp	r3, #32
 8004664:	d138      	bne.n	80046d8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800466c:	2b01      	cmp	r3, #1
 800466e:	d101      	bne.n	8004674 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004670:	2302      	movs	r3, #2
 8004672:	e032      	b.n	80046da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2224      	movs	r2, #36	@ 0x24
 8004680:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f022 0201 	bic.w	r2, r2, #1
 8004692:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80046a2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6819      	ldr	r1, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	683a      	ldr	r2, [r7, #0]
 80046b0:	430a      	orrs	r2, r1
 80046b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f042 0201 	orr.w	r2, r2, #1
 80046c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2220      	movs	r2, #32
 80046c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80046d4:	2300      	movs	r3, #0
 80046d6:	e000      	b.n	80046da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80046d8:	2302      	movs	r3, #2
  }
}
 80046da:	4618      	mov	r0, r3
 80046dc:	370c      	adds	r7, #12
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr

080046e6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80046e6:	b480      	push	{r7}
 80046e8:	b085      	sub	sp, #20
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
 80046ee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b20      	cmp	r3, #32
 80046fa:	d139      	bne.n	8004770 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004702:	2b01      	cmp	r3, #1
 8004704:	d101      	bne.n	800470a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004706:	2302      	movs	r3, #2
 8004708:	e033      	b.n	8004772 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2224      	movs	r2, #36	@ 0x24
 8004716:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f022 0201 	bic.w	r2, r2, #1
 8004728:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004738:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	021b      	lsls	r3, r3, #8
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	4313      	orrs	r3, r2
 8004742:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f042 0201 	orr.w	r2, r2, #1
 800475a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2220      	movs	r2, #32
 8004760:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800476c:	2300      	movs	r3, #0
 800476e:	e000      	b.n	8004772 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004770:	2302      	movs	r3, #2
  }
}
 8004772:	4618      	mov	r0, r3
 8004774:	3714      	adds	r7, #20
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
	...

08004780 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d141      	bne.n	8004812 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800478e:	4b4b      	ldr	r3, [pc, #300]	@ (80048bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004796:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800479a:	d131      	bne.n	8004800 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800479c:	4b47      	ldr	r3, [pc, #284]	@ (80048bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800479e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047a2:	4a46      	ldr	r2, [pc, #280]	@ (80048bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80047ac:	4b43      	ldr	r3, [pc, #268]	@ (80048bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80047b4:	4a41      	ldr	r2, [pc, #260]	@ (80048bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80047ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80047bc:	4b40      	ldr	r3, [pc, #256]	@ (80048c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2232      	movs	r2, #50	@ 0x32
 80047c2:	fb02 f303 	mul.w	r3, r2, r3
 80047c6:	4a3f      	ldr	r2, [pc, #252]	@ (80048c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80047c8:	fba2 2303 	umull	r2, r3, r2, r3
 80047cc:	0c9b      	lsrs	r3, r3, #18
 80047ce:	3301      	adds	r3, #1
 80047d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047d2:	e002      	b.n	80047da <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	3b01      	subs	r3, #1
 80047d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047da:	4b38      	ldr	r3, [pc, #224]	@ (80048bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047e6:	d102      	bne.n	80047ee <HAL_PWREx_ControlVoltageScaling+0x6e>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1f2      	bne.n	80047d4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80047ee:	4b33      	ldr	r3, [pc, #204]	@ (80048bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047fa:	d158      	bne.n	80048ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e057      	b.n	80048b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004800:	4b2e      	ldr	r3, [pc, #184]	@ (80048bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004802:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004806:	4a2d      	ldr	r2, [pc, #180]	@ (80048bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004808:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800480c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004810:	e04d      	b.n	80048ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004818:	d141      	bne.n	800489e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800481a:	4b28      	ldr	r3, [pc, #160]	@ (80048bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004822:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004826:	d131      	bne.n	800488c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004828:	4b24      	ldr	r3, [pc, #144]	@ (80048bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800482a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800482e:	4a23      	ldr	r2, [pc, #140]	@ (80048bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004830:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004834:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004838:	4b20      	ldr	r3, [pc, #128]	@ (80048bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004840:	4a1e      	ldr	r2, [pc, #120]	@ (80048bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004842:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004846:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004848:	4b1d      	ldr	r3, [pc, #116]	@ (80048c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2232      	movs	r2, #50	@ 0x32
 800484e:	fb02 f303 	mul.w	r3, r2, r3
 8004852:	4a1c      	ldr	r2, [pc, #112]	@ (80048c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004854:	fba2 2303 	umull	r2, r3, r2, r3
 8004858:	0c9b      	lsrs	r3, r3, #18
 800485a:	3301      	adds	r3, #1
 800485c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800485e:	e002      	b.n	8004866 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	3b01      	subs	r3, #1
 8004864:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004866:	4b15      	ldr	r3, [pc, #84]	@ (80048bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800486e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004872:	d102      	bne.n	800487a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1f2      	bne.n	8004860 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800487a:	4b10      	ldr	r3, [pc, #64]	@ (80048bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800487c:	695b      	ldr	r3, [r3, #20]
 800487e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004882:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004886:	d112      	bne.n	80048ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e011      	b.n	80048b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800488c:	4b0b      	ldr	r3, [pc, #44]	@ (80048bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800488e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004892:	4a0a      	ldr	r2, [pc, #40]	@ (80048bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004894:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004898:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800489c:	e007      	b.n	80048ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800489e:	4b07      	ldr	r3, [pc, #28]	@ (80048bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80048a6:	4a05      	ldr	r2, [pc, #20]	@ (80048bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048a8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80048ac:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3714      	adds	r7, #20
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr
 80048bc:	40007000 	.word	0x40007000
 80048c0:	2000000c 	.word	0x2000000c
 80048c4:	431bde83 	.word	0x431bde83

080048c8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80048c8:	b480      	push	{r7}
 80048ca:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80048cc:	4b05      	ldr	r3, [pc, #20]	@ (80048e4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	4a04      	ldr	r2, [pc, #16]	@ (80048e4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80048d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80048d6:	6093      	str	r3, [r2, #8]
}
 80048d8:	bf00      	nop
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	40007000 	.word	0x40007000

080048e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b088      	sub	sp, #32
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e2fe      	b.n	8004ef8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	2b00      	cmp	r3, #0
 8004904:	d075      	beq.n	80049f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004906:	4b97      	ldr	r3, [pc, #604]	@ (8004b64 <HAL_RCC_OscConfig+0x27c>)
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f003 030c 	and.w	r3, r3, #12
 800490e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004910:	4b94      	ldr	r3, [pc, #592]	@ (8004b64 <HAL_RCC_OscConfig+0x27c>)
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	f003 0303 	and.w	r3, r3, #3
 8004918:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	2b0c      	cmp	r3, #12
 800491e:	d102      	bne.n	8004926 <HAL_RCC_OscConfig+0x3e>
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	2b03      	cmp	r3, #3
 8004924:	d002      	beq.n	800492c <HAL_RCC_OscConfig+0x44>
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	2b08      	cmp	r3, #8
 800492a:	d10b      	bne.n	8004944 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800492c:	4b8d      	ldr	r3, [pc, #564]	@ (8004b64 <HAL_RCC_OscConfig+0x27c>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d05b      	beq.n	80049f0 <HAL_RCC_OscConfig+0x108>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d157      	bne.n	80049f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e2d9      	b.n	8004ef8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800494c:	d106      	bne.n	800495c <HAL_RCC_OscConfig+0x74>
 800494e:	4b85      	ldr	r3, [pc, #532]	@ (8004b64 <HAL_RCC_OscConfig+0x27c>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a84      	ldr	r2, [pc, #528]	@ (8004b64 <HAL_RCC_OscConfig+0x27c>)
 8004954:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004958:	6013      	str	r3, [r2, #0]
 800495a:	e01d      	b.n	8004998 <HAL_RCC_OscConfig+0xb0>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004964:	d10c      	bne.n	8004980 <HAL_RCC_OscConfig+0x98>
 8004966:	4b7f      	ldr	r3, [pc, #508]	@ (8004b64 <HAL_RCC_OscConfig+0x27c>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a7e      	ldr	r2, [pc, #504]	@ (8004b64 <HAL_RCC_OscConfig+0x27c>)
 800496c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004970:	6013      	str	r3, [r2, #0]
 8004972:	4b7c      	ldr	r3, [pc, #496]	@ (8004b64 <HAL_RCC_OscConfig+0x27c>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a7b      	ldr	r2, [pc, #492]	@ (8004b64 <HAL_RCC_OscConfig+0x27c>)
 8004978:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800497c:	6013      	str	r3, [r2, #0]
 800497e:	e00b      	b.n	8004998 <HAL_RCC_OscConfig+0xb0>
 8004980:	4b78      	ldr	r3, [pc, #480]	@ (8004b64 <HAL_RCC_OscConfig+0x27c>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a77      	ldr	r2, [pc, #476]	@ (8004b64 <HAL_RCC_OscConfig+0x27c>)
 8004986:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800498a:	6013      	str	r3, [r2, #0]
 800498c:	4b75      	ldr	r3, [pc, #468]	@ (8004b64 <HAL_RCC_OscConfig+0x27c>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a74      	ldr	r2, [pc, #464]	@ (8004b64 <HAL_RCC_OscConfig+0x27c>)
 8004992:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004996:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d013      	beq.n	80049c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a0:	f7fe fae4 	bl	8002f6c <HAL_GetTick>
 80049a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049a6:	e008      	b.n	80049ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049a8:	f7fe fae0 	bl	8002f6c <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b64      	cmp	r3, #100	@ 0x64
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e29e      	b.n	8004ef8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049ba:	4b6a      	ldr	r3, [pc, #424]	@ (8004b64 <HAL_RCC_OscConfig+0x27c>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d0f0      	beq.n	80049a8 <HAL_RCC_OscConfig+0xc0>
 80049c6:	e014      	b.n	80049f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c8:	f7fe fad0 	bl	8002f6c <HAL_GetTick>
 80049cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049ce:	e008      	b.n	80049e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049d0:	f7fe facc 	bl	8002f6c <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b64      	cmp	r3, #100	@ 0x64
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e28a      	b.n	8004ef8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049e2:	4b60      	ldr	r3, [pc, #384]	@ (8004b64 <HAL_RCC_OscConfig+0x27c>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1f0      	bne.n	80049d0 <HAL_RCC_OscConfig+0xe8>
 80049ee:	e000      	b.n	80049f2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0302 	and.w	r3, r3, #2
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d075      	beq.n	8004aea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049fe:	4b59      	ldr	r3, [pc, #356]	@ (8004b64 <HAL_RCC_OscConfig+0x27c>)
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f003 030c 	and.w	r3, r3, #12
 8004a06:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a08:	4b56      	ldr	r3, [pc, #344]	@ (8004b64 <HAL_RCC_OscConfig+0x27c>)
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	f003 0303 	and.w	r3, r3, #3
 8004a10:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	2b0c      	cmp	r3, #12
 8004a16:	d102      	bne.n	8004a1e <HAL_RCC_OscConfig+0x136>
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d002      	beq.n	8004a24 <HAL_RCC_OscConfig+0x13c>
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	2b04      	cmp	r3, #4
 8004a22:	d11f      	bne.n	8004a64 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a24:	4b4f      	ldr	r3, [pc, #316]	@ (8004b64 <HAL_RCC_OscConfig+0x27c>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d005      	beq.n	8004a3c <HAL_RCC_OscConfig+0x154>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d101      	bne.n	8004a3c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e25d      	b.n	8004ef8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a3c:	4b49      	ldr	r3, [pc, #292]	@ (8004b64 <HAL_RCC_OscConfig+0x27c>)
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	061b      	lsls	r3, r3, #24
 8004a4a:	4946      	ldr	r1, [pc, #280]	@ (8004b64 <HAL_RCC_OscConfig+0x27c>)
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004a50:	4b45      	ldr	r3, [pc, #276]	@ (8004b68 <HAL_RCC_OscConfig+0x280>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7fd ff9d 	bl	8002994 <HAL_InitTick>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d043      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e249      	b.n	8004ef8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d023      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a6c:	4b3d      	ldr	r3, [pc, #244]	@ (8004b64 <HAL_RCC_OscConfig+0x27c>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a3c      	ldr	r2, [pc, #240]	@ (8004b64 <HAL_RCC_OscConfig+0x27c>)
 8004a72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a78:	f7fe fa78 	bl	8002f6c <HAL_GetTick>
 8004a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a7e:	e008      	b.n	8004a92 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a80:	f7fe fa74 	bl	8002f6c <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e232      	b.n	8004ef8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a92:	4b34      	ldr	r3, [pc, #208]	@ (8004b64 <HAL_RCC_OscConfig+0x27c>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d0f0      	beq.n	8004a80 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a9e:	4b31      	ldr	r3, [pc, #196]	@ (8004b64 <HAL_RCC_OscConfig+0x27c>)
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	061b      	lsls	r3, r3, #24
 8004aac:	492d      	ldr	r1, [pc, #180]	@ (8004b64 <HAL_RCC_OscConfig+0x27c>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	604b      	str	r3, [r1, #4]
 8004ab2:	e01a      	b.n	8004aea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ab4:	4b2b      	ldr	r3, [pc, #172]	@ (8004b64 <HAL_RCC_OscConfig+0x27c>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a2a      	ldr	r2, [pc, #168]	@ (8004b64 <HAL_RCC_OscConfig+0x27c>)
 8004aba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004abe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac0:	f7fe fa54 	bl	8002f6c <HAL_GetTick>
 8004ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ac6:	e008      	b.n	8004ada <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ac8:	f7fe fa50 	bl	8002f6c <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e20e      	b.n	8004ef8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ada:	4b22      	ldr	r3, [pc, #136]	@ (8004b64 <HAL_RCC_OscConfig+0x27c>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1f0      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x1e0>
 8004ae6:	e000      	b.n	8004aea <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ae8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0308 	and.w	r3, r3, #8
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d041      	beq.n	8004b7a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d01c      	beq.n	8004b38 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004afe:	4b19      	ldr	r3, [pc, #100]	@ (8004b64 <HAL_RCC_OscConfig+0x27c>)
 8004b00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b04:	4a17      	ldr	r2, [pc, #92]	@ (8004b64 <HAL_RCC_OscConfig+0x27c>)
 8004b06:	f043 0301 	orr.w	r3, r3, #1
 8004b0a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b0e:	f7fe fa2d 	bl	8002f6c <HAL_GetTick>
 8004b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b14:	e008      	b.n	8004b28 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b16:	f7fe fa29 	bl	8002f6c <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d901      	bls.n	8004b28 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e1e7      	b.n	8004ef8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b28:	4b0e      	ldr	r3, [pc, #56]	@ (8004b64 <HAL_RCC_OscConfig+0x27c>)
 8004b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b2e:	f003 0302 	and.w	r3, r3, #2
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d0ef      	beq.n	8004b16 <HAL_RCC_OscConfig+0x22e>
 8004b36:	e020      	b.n	8004b7a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b38:	4b0a      	ldr	r3, [pc, #40]	@ (8004b64 <HAL_RCC_OscConfig+0x27c>)
 8004b3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b3e:	4a09      	ldr	r2, [pc, #36]	@ (8004b64 <HAL_RCC_OscConfig+0x27c>)
 8004b40:	f023 0301 	bic.w	r3, r3, #1
 8004b44:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b48:	f7fe fa10 	bl	8002f6c <HAL_GetTick>
 8004b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b4e:	e00d      	b.n	8004b6c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b50:	f7fe fa0c 	bl	8002f6c <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d906      	bls.n	8004b6c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e1ca      	b.n	8004ef8 <HAL_RCC_OscConfig+0x610>
 8004b62:	bf00      	nop
 8004b64:	40021000 	.word	0x40021000
 8004b68:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b6c:	4b8c      	ldr	r3, [pc, #560]	@ (8004da0 <HAL_RCC_OscConfig+0x4b8>)
 8004b6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b72:	f003 0302 	and.w	r3, r3, #2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1ea      	bne.n	8004b50 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0304 	and.w	r3, r3, #4
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	f000 80a6 	beq.w	8004cd4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b8c:	4b84      	ldr	r3, [pc, #528]	@ (8004da0 <HAL_RCC_OscConfig+0x4b8>)
 8004b8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d101      	bne.n	8004b9c <HAL_RCC_OscConfig+0x2b4>
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e000      	b.n	8004b9e <HAL_RCC_OscConfig+0x2b6>
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00d      	beq.n	8004bbe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ba2:	4b7f      	ldr	r3, [pc, #508]	@ (8004da0 <HAL_RCC_OscConfig+0x4b8>)
 8004ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ba6:	4a7e      	ldr	r2, [pc, #504]	@ (8004da0 <HAL_RCC_OscConfig+0x4b8>)
 8004ba8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bac:	6593      	str	r3, [r2, #88]	@ 0x58
 8004bae:	4b7c      	ldr	r3, [pc, #496]	@ (8004da0 <HAL_RCC_OscConfig+0x4b8>)
 8004bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bb6:	60fb      	str	r3, [r7, #12]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bbe:	4b79      	ldr	r3, [pc, #484]	@ (8004da4 <HAL_RCC_OscConfig+0x4bc>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d118      	bne.n	8004bfc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bca:	4b76      	ldr	r3, [pc, #472]	@ (8004da4 <HAL_RCC_OscConfig+0x4bc>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a75      	ldr	r2, [pc, #468]	@ (8004da4 <HAL_RCC_OscConfig+0x4bc>)
 8004bd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bd6:	f7fe f9c9 	bl	8002f6c <HAL_GetTick>
 8004bda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bdc:	e008      	b.n	8004bf0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bde:	f7fe f9c5 	bl	8002f6c <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d901      	bls.n	8004bf0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e183      	b.n	8004ef8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bf0:	4b6c      	ldr	r3, [pc, #432]	@ (8004da4 <HAL_RCC_OscConfig+0x4bc>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d0f0      	beq.n	8004bde <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d108      	bne.n	8004c16 <HAL_RCC_OscConfig+0x32e>
 8004c04:	4b66      	ldr	r3, [pc, #408]	@ (8004da0 <HAL_RCC_OscConfig+0x4b8>)
 8004c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c0a:	4a65      	ldr	r2, [pc, #404]	@ (8004da0 <HAL_RCC_OscConfig+0x4b8>)
 8004c0c:	f043 0301 	orr.w	r3, r3, #1
 8004c10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c14:	e024      	b.n	8004c60 <HAL_RCC_OscConfig+0x378>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	2b05      	cmp	r3, #5
 8004c1c:	d110      	bne.n	8004c40 <HAL_RCC_OscConfig+0x358>
 8004c1e:	4b60      	ldr	r3, [pc, #384]	@ (8004da0 <HAL_RCC_OscConfig+0x4b8>)
 8004c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c24:	4a5e      	ldr	r2, [pc, #376]	@ (8004da0 <HAL_RCC_OscConfig+0x4b8>)
 8004c26:	f043 0304 	orr.w	r3, r3, #4
 8004c2a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c2e:	4b5c      	ldr	r3, [pc, #368]	@ (8004da0 <HAL_RCC_OscConfig+0x4b8>)
 8004c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c34:	4a5a      	ldr	r2, [pc, #360]	@ (8004da0 <HAL_RCC_OscConfig+0x4b8>)
 8004c36:	f043 0301 	orr.w	r3, r3, #1
 8004c3a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c3e:	e00f      	b.n	8004c60 <HAL_RCC_OscConfig+0x378>
 8004c40:	4b57      	ldr	r3, [pc, #348]	@ (8004da0 <HAL_RCC_OscConfig+0x4b8>)
 8004c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c46:	4a56      	ldr	r2, [pc, #344]	@ (8004da0 <HAL_RCC_OscConfig+0x4b8>)
 8004c48:	f023 0301 	bic.w	r3, r3, #1
 8004c4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c50:	4b53      	ldr	r3, [pc, #332]	@ (8004da0 <HAL_RCC_OscConfig+0x4b8>)
 8004c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c56:	4a52      	ldr	r2, [pc, #328]	@ (8004da0 <HAL_RCC_OscConfig+0x4b8>)
 8004c58:	f023 0304 	bic.w	r3, r3, #4
 8004c5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d016      	beq.n	8004c96 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c68:	f7fe f980 	bl	8002f6c <HAL_GetTick>
 8004c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c6e:	e00a      	b.n	8004c86 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c70:	f7fe f97c 	bl	8002f6c <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d901      	bls.n	8004c86 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e138      	b.n	8004ef8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c86:	4b46      	ldr	r3, [pc, #280]	@ (8004da0 <HAL_RCC_OscConfig+0x4b8>)
 8004c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c8c:	f003 0302 	and.w	r3, r3, #2
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d0ed      	beq.n	8004c70 <HAL_RCC_OscConfig+0x388>
 8004c94:	e015      	b.n	8004cc2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c96:	f7fe f969 	bl	8002f6c <HAL_GetTick>
 8004c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c9c:	e00a      	b.n	8004cb4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c9e:	f7fe f965 	bl	8002f6c <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d901      	bls.n	8004cb4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e121      	b.n	8004ef8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cb4:	4b3a      	ldr	r3, [pc, #232]	@ (8004da0 <HAL_RCC_OscConfig+0x4b8>)
 8004cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1ed      	bne.n	8004c9e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004cc2:	7ffb      	ldrb	r3, [r7, #31]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d105      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cc8:	4b35      	ldr	r3, [pc, #212]	@ (8004da0 <HAL_RCC_OscConfig+0x4b8>)
 8004cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ccc:	4a34      	ldr	r2, [pc, #208]	@ (8004da0 <HAL_RCC_OscConfig+0x4b8>)
 8004cce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cd2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0320 	and.w	r3, r3, #32
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d03c      	beq.n	8004d5a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d01c      	beq.n	8004d22 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ce8:	4b2d      	ldr	r3, [pc, #180]	@ (8004da0 <HAL_RCC_OscConfig+0x4b8>)
 8004cea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004cee:	4a2c      	ldr	r2, [pc, #176]	@ (8004da0 <HAL_RCC_OscConfig+0x4b8>)
 8004cf0:	f043 0301 	orr.w	r3, r3, #1
 8004cf4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cf8:	f7fe f938 	bl	8002f6c <HAL_GetTick>
 8004cfc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004cfe:	e008      	b.n	8004d12 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d00:	f7fe f934 	bl	8002f6c <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e0f2      	b.n	8004ef8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d12:	4b23      	ldr	r3, [pc, #140]	@ (8004da0 <HAL_RCC_OscConfig+0x4b8>)
 8004d14:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d18:	f003 0302 	and.w	r3, r3, #2
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d0ef      	beq.n	8004d00 <HAL_RCC_OscConfig+0x418>
 8004d20:	e01b      	b.n	8004d5a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d22:	4b1f      	ldr	r3, [pc, #124]	@ (8004da0 <HAL_RCC_OscConfig+0x4b8>)
 8004d24:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d28:	4a1d      	ldr	r2, [pc, #116]	@ (8004da0 <HAL_RCC_OscConfig+0x4b8>)
 8004d2a:	f023 0301 	bic.w	r3, r3, #1
 8004d2e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d32:	f7fe f91b 	bl	8002f6c <HAL_GetTick>
 8004d36:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d38:	e008      	b.n	8004d4c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d3a:	f7fe f917 	bl	8002f6c <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d901      	bls.n	8004d4c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e0d5      	b.n	8004ef8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d4c:	4b14      	ldr	r3, [pc, #80]	@ (8004da0 <HAL_RCC_OscConfig+0x4b8>)
 8004d4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1ef      	bne.n	8004d3a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	69db      	ldr	r3, [r3, #28]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	f000 80c9 	beq.w	8004ef6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d64:	4b0e      	ldr	r3, [pc, #56]	@ (8004da0 <HAL_RCC_OscConfig+0x4b8>)
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f003 030c 	and.w	r3, r3, #12
 8004d6c:	2b0c      	cmp	r3, #12
 8004d6e:	f000 8083 	beq.w	8004e78 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	69db      	ldr	r3, [r3, #28]
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d15e      	bne.n	8004e38 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d7a:	4b09      	ldr	r3, [pc, #36]	@ (8004da0 <HAL_RCC_OscConfig+0x4b8>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a08      	ldr	r2, [pc, #32]	@ (8004da0 <HAL_RCC_OscConfig+0x4b8>)
 8004d80:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d86:	f7fe f8f1 	bl	8002f6c <HAL_GetTick>
 8004d8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d8c:	e00c      	b.n	8004da8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d8e:	f7fe f8ed 	bl	8002f6c <HAL_GetTick>
 8004d92:	4602      	mov	r2, r0
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	2b02      	cmp	r3, #2
 8004d9a:	d905      	bls.n	8004da8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	e0ab      	b.n	8004ef8 <HAL_RCC_OscConfig+0x610>
 8004da0:	40021000 	.word	0x40021000
 8004da4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004da8:	4b55      	ldr	r3, [pc, #340]	@ (8004f00 <HAL_RCC_OscConfig+0x618>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1ec      	bne.n	8004d8e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004db4:	4b52      	ldr	r3, [pc, #328]	@ (8004f00 <HAL_RCC_OscConfig+0x618>)
 8004db6:	68da      	ldr	r2, [r3, #12]
 8004db8:	4b52      	ldr	r3, [pc, #328]	@ (8004f04 <HAL_RCC_OscConfig+0x61c>)
 8004dba:	4013      	ands	r3, r2
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	6a11      	ldr	r1, [r2, #32]
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004dc4:	3a01      	subs	r2, #1
 8004dc6:	0112      	lsls	r2, r2, #4
 8004dc8:	4311      	orrs	r1, r2
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004dce:	0212      	lsls	r2, r2, #8
 8004dd0:	4311      	orrs	r1, r2
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004dd6:	0852      	lsrs	r2, r2, #1
 8004dd8:	3a01      	subs	r2, #1
 8004dda:	0552      	lsls	r2, r2, #21
 8004ddc:	4311      	orrs	r1, r2
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004de2:	0852      	lsrs	r2, r2, #1
 8004de4:	3a01      	subs	r2, #1
 8004de6:	0652      	lsls	r2, r2, #25
 8004de8:	4311      	orrs	r1, r2
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004dee:	06d2      	lsls	r2, r2, #27
 8004df0:	430a      	orrs	r2, r1
 8004df2:	4943      	ldr	r1, [pc, #268]	@ (8004f00 <HAL_RCC_OscConfig+0x618>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004df8:	4b41      	ldr	r3, [pc, #260]	@ (8004f00 <HAL_RCC_OscConfig+0x618>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a40      	ldr	r2, [pc, #256]	@ (8004f00 <HAL_RCC_OscConfig+0x618>)
 8004dfe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e02:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e04:	4b3e      	ldr	r3, [pc, #248]	@ (8004f00 <HAL_RCC_OscConfig+0x618>)
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	4a3d      	ldr	r2, [pc, #244]	@ (8004f00 <HAL_RCC_OscConfig+0x618>)
 8004e0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e0e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e10:	f7fe f8ac 	bl	8002f6c <HAL_GetTick>
 8004e14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e16:	e008      	b.n	8004e2a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e18:	f7fe f8a8 	bl	8002f6c <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d901      	bls.n	8004e2a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e066      	b.n	8004ef8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e2a:	4b35      	ldr	r3, [pc, #212]	@ (8004f00 <HAL_RCC_OscConfig+0x618>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d0f0      	beq.n	8004e18 <HAL_RCC_OscConfig+0x530>
 8004e36:	e05e      	b.n	8004ef6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e38:	4b31      	ldr	r3, [pc, #196]	@ (8004f00 <HAL_RCC_OscConfig+0x618>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a30      	ldr	r2, [pc, #192]	@ (8004f00 <HAL_RCC_OscConfig+0x618>)
 8004e3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e44:	f7fe f892 	bl	8002f6c <HAL_GetTick>
 8004e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e4a:	e008      	b.n	8004e5e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e4c:	f7fe f88e 	bl	8002f6c <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d901      	bls.n	8004e5e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e04c      	b.n	8004ef8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e5e:	4b28      	ldr	r3, [pc, #160]	@ (8004f00 <HAL_RCC_OscConfig+0x618>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1f0      	bne.n	8004e4c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004e6a:	4b25      	ldr	r3, [pc, #148]	@ (8004f00 <HAL_RCC_OscConfig+0x618>)
 8004e6c:	68da      	ldr	r2, [r3, #12]
 8004e6e:	4924      	ldr	r1, [pc, #144]	@ (8004f00 <HAL_RCC_OscConfig+0x618>)
 8004e70:	4b25      	ldr	r3, [pc, #148]	@ (8004f08 <HAL_RCC_OscConfig+0x620>)
 8004e72:	4013      	ands	r3, r2
 8004e74:	60cb      	str	r3, [r1, #12]
 8004e76:	e03e      	b.n	8004ef6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	69db      	ldr	r3, [r3, #28]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d101      	bne.n	8004e84 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e039      	b.n	8004ef8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004e84:	4b1e      	ldr	r3, [pc, #120]	@ (8004f00 <HAL_RCC_OscConfig+0x618>)
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	f003 0203 	and.w	r2, r3, #3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a1b      	ldr	r3, [r3, #32]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d12c      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d123      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d11b      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d113      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ed4:	085b      	lsrs	r3, r3, #1
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d109      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ee8:	085b      	lsrs	r3, r3, #1
 8004eea:	3b01      	subs	r3, #1
 8004eec:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d001      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e000      	b.n	8004ef8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3720      	adds	r7, #32
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	40021000 	.word	0x40021000
 8004f04:	019f800c 	.word	0x019f800c
 8004f08:	feeefffc 	.word	0xfeeefffc

08004f0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b086      	sub	sp, #24
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004f16:	2300      	movs	r3, #0
 8004f18:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d101      	bne.n	8004f24 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e11e      	b.n	8005162 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f24:	4b91      	ldr	r3, [pc, #580]	@ (800516c <HAL_RCC_ClockConfig+0x260>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 030f 	and.w	r3, r3, #15
 8004f2c:	683a      	ldr	r2, [r7, #0]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d910      	bls.n	8004f54 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f32:	4b8e      	ldr	r3, [pc, #568]	@ (800516c <HAL_RCC_ClockConfig+0x260>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f023 020f 	bic.w	r2, r3, #15
 8004f3a:	498c      	ldr	r1, [pc, #560]	@ (800516c <HAL_RCC_ClockConfig+0x260>)
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f42:	4b8a      	ldr	r3, [pc, #552]	@ (800516c <HAL_RCC_ClockConfig+0x260>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 030f 	and.w	r3, r3, #15
 8004f4a:	683a      	ldr	r2, [r7, #0]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d001      	beq.n	8004f54 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e106      	b.n	8005162 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 0301 	and.w	r3, r3, #1
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d073      	beq.n	8005048 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	2b03      	cmp	r3, #3
 8004f66:	d129      	bne.n	8004fbc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f68:	4b81      	ldr	r3, [pc, #516]	@ (8005170 <HAL_RCC_ClockConfig+0x264>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d101      	bne.n	8004f78 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e0f4      	b.n	8005162 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004f78:	f000 f9d0 	bl	800531c <RCC_GetSysClockFreqFromPLLSource>
 8004f7c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	4a7c      	ldr	r2, [pc, #496]	@ (8005174 <HAL_RCC_ClockConfig+0x268>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d93f      	bls.n	8005006 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004f86:	4b7a      	ldr	r3, [pc, #488]	@ (8005170 <HAL_RCC_ClockConfig+0x264>)
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d009      	beq.n	8004fa6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d033      	beq.n	8005006 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d12f      	bne.n	8005006 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004fa6:	4b72      	ldr	r3, [pc, #456]	@ (8005170 <HAL_RCC_ClockConfig+0x264>)
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004fae:	4a70      	ldr	r2, [pc, #448]	@ (8005170 <HAL_RCC_ClockConfig+0x264>)
 8004fb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fb4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004fb6:	2380      	movs	r3, #128	@ 0x80
 8004fb8:	617b      	str	r3, [r7, #20]
 8004fba:	e024      	b.n	8005006 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d107      	bne.n	8004fd4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fc4:	4b6a      	ldr	r3, [pc, #424]	@ (8005170 <HAL_RCC_ClockConfig+0x264>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d109      	bne.n	8004fe4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e0c6      	b.n	8005162 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fd4:	4b66      	ldr	r3, [pc, #408]	@ (8005170 <HAL_RCC_ClockConfig+0x264>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d101      	bne.n	8004fe4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e0be      	b.n	8005162 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004fe4:	f000 f8ce 	bl	8005184 <HAL_RCC_GetSysClockFreq>
 8004fe8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	4a61      	ldr	r2, [pc, #388]	@ (8005174 <HAL_RCC_ClockConfig+0x268>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d909      	bls.n	8005006 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004ff2:	4b5f      	ldr	r3, [pc, #380]	@ (8005170 <HAL_RCC_ClockConfig+0x264>)
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ffa:	4a5d      	ldr	r2, [pc, #372]	@ (8005170 <HAL_RCC_ClockConfig+0x264>)
 8004ffc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005000:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005002:	2380      	movs	r3, #128	@ 0x80
 8005004:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005006:	4b5a      	ldr	r3, [pc, #360]	@ (8005170 <HAL_RCC_ClockConfig+0x264>)
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	f023 0203 	bic.w	r2, r3, #3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	4957      	ldr	r1, [pc, #348]	@ (8005170 <HAL_RCC_ClockConfig+0x264>)
 8005014:	4313      	orrs	r3, r2
 8005016:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005018:	f7fd ffa8 	bl	8002f6c <HAL_GetTick>
 800501c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800501e:	e00a      	b.n	8005036 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005020:	f7fd ffa4 	bl	8002f6c <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800502e:	4293      	cmp	r3, r2
 8005030:	d901      	bls.n	8005036 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e095      	b.n	8005162 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005036:	4b4e      	ldr	r3, [pc, #312]	@ (8005170 <HAL_RCC_ClockConfig+0x264>)
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f003 020c 	and.w	r2, r3, #12
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	429a      	cmp	r2, r3
 8005046:	d1eb      	bne.n	8005020 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0302 	and.w	r3, r3, #2
 8005050:	2b00      	cmp	r3, #0
 8005052:	d023      	beq.n	800509c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0304 	and.w	r3, r3, #4
 800505c:	2b00      	cmp	r3, #0
 800505e:	d005      	beq.n	800506c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005060:	4b43      	ldr	r3, [pc, #268]	@ (8005170 <HAL_RCC_ClockConfig+0x264>)
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	4a42      	ldr	r2, [pc, #264]	@ (8005170 <HAL_RCC_ClockConfig+0x264>)
 8005066:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800506a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0308 	and.w	r3, r3, #8
 8005074:	2b00      	cmp	r3, #0
 8005076:	d007      	beq.n	8005088 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005078:	4b3d      	ldr	r3, [pc, #244]	@ (8005170 <HAL_RCC_ClockConfig+0x264>)
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005080:	4a3b      	ldr	r2, [pc, #236]	@ (8005170 <HAL_RCC_ClockConfig+0x264>)
 8005082:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005086:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005088:	4b39      	ldr	r3, [pc, #228]	@ (8005170 <HAL_RCC_ClockConfig+0x264>)
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	4936      	ldr	r1, [pc, #216]	@ (8005170 <HAL_RCC_ClockConfig+0x264>)
 8005096:	4313      	orrs	r3, r2
 8005098:	608b      	str	r3, [r1, #8]
 800509a:	e008      	b.n	80050ae <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	2b80      	cmp	r3, #128	@ 0x80
 80050a0:	d105      	bne.n	80050ae <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80050a2:	4b33      	ldr	r3, [pc, #204]	@ (8005170 <HAL_RCC_ClockConfig+0x264>)
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	4a32      	ldr	r2, [pc, #200]	@ (8005170 <HAL_RCC_ClockConfig+0x264>)
 80050a8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80050ac:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050ae:	4b2f      	ldr	r3, [pc, #188]	@ (800516c <HAL_RCC_ClockConfig+0x260>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 030f 	and.w	r3, r3, #15
 80050b6:	683a      	ldr	r2, [r7, #0]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d21d      	bcs.n	80050f8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050bc:	4b2b      	ldr	r3, [pc, #172]	@ (800516c <HAL_RCC_ClockConfig+0x260>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f023 020f 	bic.w	r2, r3, #15
 80050c4:	4929      	ldr	r1, [pc, #164]	@ (800516c <HAL_RCC_ClockConfig+0x260>)
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80050cc:	f7fd ff4e 	bl	8002f6c <HAL_GetTick>
 80050d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050d2:	e00a      	b.n	80050ea <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050d4:	f7fd ff4a 	bl	8002f6c <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d901      	bls.n	80050ea <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e03b      	b.n	8005162 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ea:	4b20      	ldr	r3, [pc, #128]	@ (800516c <HAL_RCC_ClockConfig+0x260>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 030f 	and.w	r3, r3, #15
 80050f2:	683a      	ldr	r2, [r7, #0]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d1ed      	bne.n	80050d4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 0304 	and.w	r3, r3, #4
 8005100:	2b00      	cmp	r3, #0
 8005102:	d008      	beq.n	8005116 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005104:	4b1a      	ldr	r3, [pc, #104]	@ (8005170 <HAL_RCC_ClockConfig+0x264>)
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	4917      	ldr	r1, [pc, #92]	@ (8005170 <HAL_RCC_ClockConfig+0x264>)
 8005112:	4313      	orrs	r3, r2
 8005114:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0308 	and.w	r3, r3, #8
 800511e:	2b00      	cmp	r3, #0
 8005120:	d009      	beq.n	8005136 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005122:	4b13      	ldr	r3, [pc, #76]	@ (8005170 <HAL_RCC_ClockConfig+0x264>)
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	00db      	lsls	r3, r3, #3
 8005130:	490f      	ldr	r1, [pc, #60]	@ (8005170 <HAL_RCC_ClockConfig+0x264>)
 8005132:	4313      	orrs	r3, r2
 8005134:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005136:	f000 f825 	bl	8005184 <HAL_RCC_GetSysClockFreq>
 800513a:	4602      	mov	r2, r0
 800513c:	4b0c      	ldr	r3, [pc, #48]	@ (8005170 <HAL_RCC_ClockConfig+0x264>)
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	091b      	lsrs	r3, r3, #4
 8005142:	f003 030f 	and.w	r3, r3, #15
 8005146:	490c      	ldr	r1, [pc, #48]	@ (8005178 <HAL_RCC_ClockConfig+0x26c>)
 8005148:	5ccb      	ldrb	r3, [r1, r3]
 800514a:	f003 031f 	and.w	r3, r3, #31
 800514e:	fa22 f303 	lsr.w	r3, r2, r3
 8005152:	4a0a      	ldr	r2, [pc, #40]	@ (800517c <HAL_RCC_ClockConfig+0x270>)
 8005154:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005156:	4b0a      	ldr	r3, [pc, #40]	@ (8005180 <HAL_RCC_ClockConfig+0x274>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4618      	mov	r0, r3
 800515c:	f7fd fc1a 	bl	8002994 <HAL_InitTick>
 8005160:	4603      	mov	r3, r0
}
 8005162:	4618      	mov	r0, r3
 8005164:	3718      	adds	r7, #24
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	40022000 	.word	0x40022000
 8005170:	40021000 	.word	0x40021000
 8005174:	04c4b400 	.word	0x04c4b400
 8005178:	0801b294 	.word	0x0801b294
 800517c:	2000000c 	.word	0x2000000c
 8005180:	20000010 	.word	0x20000010

08005184 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005184:	b480      	push	{r7}
 8005186:	b087      	sub	sp, #28
 8005188:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800518a:	4b2c      	ldr	r3, [pc, #176]	@ (800523c <HAL_RCC_GetSysClockFreq+0xb8>)
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f003 030c 	and.w	r3, r3, #12
 8005192:	2b04      	cmp	r3, #4
 8005194:	d102      	bne.n	800519c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005196:	4b2a      	ldr	r3, [pc, #168]	@ (8005240 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005198:	613b      	str	r3, [r7, #16]
 800519a:	e047      	b.n	800522c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800519c:	4b27      	ldr	r3, [pc, #156]	@ (800523c <HAL_RCC_GetSysClockFreq+0xb8>)
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f003 030c 	and.w	r3, r3, #12
 80051a4:	2b08      	cmp	r3, #8
 80051a6:	d102      	bne.n	80051ae <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80051a8:	4b26      	ldr	r3, [pc, #152]	@ (8005244 <HAL_RCC_GetSysClockFreq+0xc0>)
 80051aa:	613b      	str	r3, [r7, #16]
 80051ac:	e03e      	b.n	800522c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80051ae:	4b23      	ldr	r3, [pc, #140]	@ (800523c <HAL_RCC_GetSysClockFreq+0xb8>)
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f003 030c 	and.w	r3, r3, #12
 80051b6:	2b0c      	cmp	r3, #12
 80051b8:	d136      	bne.n	8005228 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80051ba:	4b20      	ldr	r3, [pc, #128]	@ (800523c <HAL_RCC_GetSysClockFreq+0xb8>)
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	f003 0303 	and.w	r3, r3, #3
 80051c2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051c4:	4b1d      	ldr	r3, [pc, #116]	@ (800523c <HAL_RCC_GetSysClockFreq+0xb8>)
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	091b      	lsrs	r3, r3, #4
 80051ca:	f003 030f 	and.w	r3, r3, #15
 80051ce:	3301      	adds	r3, #1
 80051d0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2b03      	cmp	r3, #3
 80051d6:	d10c      	bne.n	80051f2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051d8:	4a1a      	ldr	r2, [pc, #104]	@ (8005244 <HAL_RCC_GetSysClockFreq+0xc0>)
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e0:	4a16      	ldr	r2, [pc, #88]	@ (800523c <HAL_RCC_GetSysClockFreq+0xb8>)
 80051e2:	68d2      	ldr	r2, [r2, #12]
 80051e4:	0a12      	lsrs	r2, r2, #8
 80051e6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80051ea:	fb02 f303 	mul.w	r3, r2, r3
 80051ee:	617b      	str	r3, [r7, #20]
      break;
 80051f0:	e00c      	b.n	800520c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051f2:	4a13      	ldr	r2, [pc, #76]	@ (8005240 <HAL_RCC_GetSysClockFreq+0xbc>)
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80051fa:	4a10      	ldr	r2, [pc, #64]	@ (800523c <HAL_RCC_GetSysClockFreq+0xb8>)
 80051fc:	68d2      	ldr	r2, [r2, #12]
 80051fe:	0a12      	lsrs	r2, r2, #8
 8005200:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005204:	fb02 f303 	mul.w	r3, r2, r3
 8005208:	617b      	str	r3, [r7, #20]
      break;
 800520a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800520c:	4b0b      	ldr	r3, [pc, #44]	@ (800523c <HAL_RCC_GetSysClockFreq+0xb8>)
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	0e5b      	lsrs	r3, r3, #25
 8005212:	f003 0303 	and.w	r3, r3, #3
 8005216:	3301      	adds	r3, #1
 8005218:	005b      	lsls	r3, r3, #1
 800521a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800521c:	697a      	ldr	r2, [r7, #20]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	fbb2 f3f3 	udiv	r3, r2, r3
 8005224:	613b      	str	r3, [r7, #16]
 8005226:	e001      	b.n	800522c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005228:	2300      	movs	r3, #0
 800522a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800522c:	693b      	ldr	r3, [r7, #16]
}
 800522e:	4618      	mov	r0, r3
 8005230:	371c      	adds	r7, #28
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	40021000 	.word	0x40021000
 8005240:	00f42400 	.word	0x00f42400
 8005244:	016e3600 	.word	0x016e3600

08005248 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005248:	b480      	push	{r7}
 800524a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800524c:	4b03      	ldr	r3, [pc, #12]	@ (800525c <HAL_RCC_GetHCLKFreq+0x14>)
 800524e:	681b      	ldr	r3, [r3, #0]
}
 8005250:	4618      	mov	r0, r3
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	2000000c 	.word	0x2000000c

08005260 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005264:	f7ff fff0 	bl	8005248 <HAL_RCC_GetHCLKFreq>
 8005268:	4602      	mov	r2, r0
 800526a:	4b06      	ldr	r3, [pc, #24]	@ (8005284 <HAL_RCC_GetPCLK1Freq+0x24>)
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	0a1b      	lsrs	r3, r3, #8
 8005270:	f003 0307 	and.w	r3, r3, #7
 8005274:	4904      	ldr	r1, [pc, #16]	@ (8005288 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005276:	5ccb      	ldrb	r3, [r1, r3]
 8005278:	f003 031f 	and.w	r3, r3, #31
 800527c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005280:	4618      	mov	r0, r3
 8005282:	bd80      	pop	{r7, pc}
 8005284:	40021000 	.word	0x40021000
 8005288:	0801b2a4 	.word	0x0801b2a4

0800528c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005290:	f7ff ffda 	bl	8005248 <HAL_RCC_GetHCLKFreq>
 8005294:	4602      	mov	r2, r0
 8005296:	4b06      	ldr	r3, [pc, #24]	@ (80052b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	0adb      	lsrs	r3, r3, #11
 800529c:	f003 0307 	and.w	r3, r3, #7
 80052a0:	4904      	ldr	r1, [pc, #16]	@ (80052b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80052a2:	5ccb      	ldrb	r3, [r1, r3]
 80052a4:	f003 031f 	and.w	r3, r3, #31
 80052a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	40021000 	.word	0x40021000
 80052b4:	0801b2a4 	.word	0x0801b2a4

080052b8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	220f      	movs	r2, #15
 80052c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80052c8:	4b12      	ldr	r3, [pc, #72]	@ (8005314 <HAL_RCC_GetClockConfig+0x5c>)
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f003 0203 	and.w	r2, r3, #3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80052d4:	4b0f      	ldr	r3, [pc, #60]	@ (8005314 <HAL_RCC_GetClockConfig+0x5c>)
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80052e0:	4b0c      	ldr	r3, [pc, #48]	@ (8005314 <HAL_RCC_GetClockConfig+0x5c>)
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80052ec:	4b09      	ldr	r3, [pc, #36]	@ (8005314 <HAL_RCC_GetClockConfig+0x5c>)
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	08db      	lsrs	r3, r3, #3
 80052f2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80052fa:	4b07      	ldr	r3, [pc, #28]	@ (8005318 <HAL_RCC_GetClockConfig+0x60>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 020f 	and.w	r2, r3, #15
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	601a      	str	r2, [r3, #0]
}
 8005306:	bf00      	nop
 8005308:	370c      	adds	r7, #12
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	40021000 	.word	0x40021000
 8005318:	40022000 	.word	0x40022000

0800531c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800531c:	b480      	push	{r7}
 800531e:	b087      	sub	sp, #28
 8005320:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005322:	4b1e      	ldr	r3, [pc, #120]	@ (800539c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	f003 0303 	and.w	r3, r3, #3
 800532a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800532c:	4b1b      	ldr	r3, [pc, #108]	@ (800539c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	091b      	lsrs	r3, r3, #4
 8005332:	f003 030f 	and.w	r3, r3, #15
 8005336:	3301      	adds	r3, #1
 8005338:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	2b03      	cmp	r3, #3
 800533e:	d10c      	bne.n	800535a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005340:	4a17      	ldr	r2, [pc, #92]	@ (80053a0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	fbb2 f3f3 	udiv	r3, r2, r3
 8005348:	4a14      	ldr	r2, [pc, #80]	@ (800539c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800534a:	68d2      	ldr	r2, [r2, #12]
 800534c:	0a12      	lsrs	r2, r2, #8
 800534e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005352:	fb02 f303 	mul.w	r3, r2, r3
 8005356:	617b      	str	r3, [r7, #20]
    break;
 8005358:	e00c      	b.n	8005374 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800535a:	4a12      	ldr	r2, [pc, #72]	@ (80053a4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005362:	4a0e      	ldr	r2, [pc, #56]	@ (800539c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005364:	68d2      	ldr	r2, [r2, #12]
 8005366:	0a12      	lsrs	r2, r2, #8
 8005368:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800536c:	fb02 f303 	mul.w	r3, r2, r3
 8005370:	617b      	str	r3, [r7, #20]
    break;
 8005372:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005374:	4b09      	ldr	r3, [pc, #36]	@ (800539c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	0e5b      	lsrs	r3, r3, #25
 800537a:	f003 0303 	and.w	r3, r3, #3
 800537e:	3301      	adds	r3, #1
 8005380:	005b      	lsls	r3, r3, #1
 8005382:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005384:	697a      	ldr	r2, [r7, #20]
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	fbb2 f3f3 	udiv	r3, r2, r3
 800538c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800538e:	687b      	ldr	r3, [r7, #4]
}
 8005390:	4618      	mov	r0, r3
 8005392:	371c      	adds	r7, #28
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr
 800539c:	40021000 	.word	0x40021000
 80053a0:	016e3600 	.word	0x016e3600
 80053a4:	00f42400 	.word	0x00f42400

080053a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b086      	sub	sp, #24
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80053b0:	2300      	movs	r3, #0
 80053b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80053b4:	2300      	movs	r3, #0
 80053b6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	f000 8098 	beq.w	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053c6:	2300      	movs	r3, #0
 80053c8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053ca:	4b43      	ldr	r3, [pc, #268]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d10d      	bne.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053d6:	4b40      	ldr	r3, [pc, #256]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053da:	4a3f      	ldr	r2, [pc, #252]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80053e2:	4b3d      	ldr	r3, [pc, #244]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053ea:	60bb      	str	r3, [r7, #8]
 80053ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053ee:	2301      	movs	r3, #1
 80053f0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053f2:	4b3a      	ldr	r3, [pc, #232]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a39      	ldr	r2, [pc, #228]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80053f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80053fe:	f7fd fdb5 	bl	8002f6c <HAL_GetTick>
 8005402:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005404:	e009      	b.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005406:	f7fd fdb1 	bl	8002f6c <HAL_GetTick>
 800540a:	4602      	mov	r2, r0
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	2b02      	cmp	r3, #2
 8005412:	d902      	bls.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	74fb      	strb	r3, [r7, #19]
        break;
 8005418:	e005      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800541a:	4b30      	ldr	r3, [pc, #192]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005422:	2b00      	cmp	r3, #0
 8005424:	d0ef      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005426:	7cfb      	ldrb	r3, [r7, #19]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d159      	bne.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800542c:	4b2a      	ldr	r3, [pc, #168]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800542e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005432:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005436:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d01e      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	429a      	cmp	r2, r3
 8005446:	d019      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005448:	4b23      	ldr	r3, [pc, #140]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800544a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800544e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005452:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005454:	4b20      	ldr	r3, [pc, #128]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005456:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800545a:	4a1f      	ldr	r2, [pc, #124]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800545c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005460:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005464:	4b1c      	ldr	r3, [pc, #112]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005466:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800546a:	4a1b      	ldr	r2, [pc, #108]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800546c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005470:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005474:	4a18      	ldr	r2, [pc, #96]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	f003 0301 	and.w	r3, r3, #1
 8005482:	2b00      	cmp	r3, #0
 8005484:	d016      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005486:	f7fd fd71 	bl	8002f6c <HAL_GetTick>
 800548a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800548c:	e00b      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800548e:	f7fd fd6d 	bl	8002f6c <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	f241 3288 	movw	r2, #5000	@ 0x1388
 800549c:	4293      	cmp	r3, r2
 800549e:	d902      	bls.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	74fb      	strb	r3, [r7, #19]
            break;
 80054a4:	e006      	b.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054a6:	4b0c      	ldr	r3, [pc, #48]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054ac:	f003 0302 	and.w	r3, r3, #2
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d0ec      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80054b4:	7cfb      	ldrb	r3, [r7, #19]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d10b      	bne.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054ba:	4b07      	ldr	r3, [pc, #28]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054c8:	4903      	ldr	r1, [pc, #12]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80054d0:	e008      	b.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80054d2:	7cfb      	ldrb	r3, [r7, #19]
 80054d4:	74bb      	strb	r3, [r7, #18]
 80054d6:	e005      	b.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80054d8:	40021000 	.word	0x40021000
 80054dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054e0:	7cfb      	ldrb	r3, [r7, #19]
 80054e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80054e4:	7c7b      	ldrb	r3, [r7, #17]
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d105      	bne.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054ea:	4ba7      	ldr	r3, [pc, #668]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054ee:	4aa6      	ldr	r2, [pc, #664]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054f4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0301 	and.w	r3, r3, #1
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d00a      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005502:	4ba1      	ldr	r3, [pc, #644]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005504:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005508:	f023 0203 	bic.w	r2, r3, #3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	499d      	ldr	r1, [pc, #628]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005512:	4313      	orrs	r3, r2
 8005514:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0302 	and.w	r3, r3, #2
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00a      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005524:	4b98      	ldr	r3, [pc, #608]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800552a:	f023 020c 	bic.w	r2, r3, #12
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	4995      	ldr	r1, [pc, #596]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005534:	4313      	orrs	r3, r2
 8005536:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0304 	and.w	r3, r3, #4
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00a      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005546:	4b90      	ldr	r3, [pc, #576]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800554c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	498c      	ldr	r1, [pc, #560]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005556:	4313      	orrs	r3, r2
 8005558:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0308 	and.w	r3, r3, #8
 8005564:	2b00      	cmp	r3, #0
 8005566:	d00a      	beq.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005568:	4b87      	ldr	r3, [pc, #540]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800556a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800556e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	4984      	ldr	r1, [pc, #528]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005578:	4313      	orrs	r3, r2
 800557a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0310 	and.w	r3, r3, #16
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00a      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800558a:	4b7f      	ldr	r3, [pc, #508]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800558c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005590:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	695b      	ldr	r3, [r3, #20]
 8005598:	497b      	ldr	r1, [pc, #492]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800559a:	4313      	orrs	r3, r2
 800559c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0320 	and.w	r3, r3, #32
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d00a      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80055ac:	4b76      	ldr	r3, [pc, #472]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055b2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	4973      	ldr	r1, [pc, #460]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055bc:	4313      	orrs	r3, r2
 80055be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00a      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80055ce:	4b6e      	ldr	r3, [pc, #440]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055d4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	69db      	ldr	r3, [r3, #28]
 80055dc:	496a      	ldr	r1, [pc, #424]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00a      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80055f0:	4b65      	ldr	r3, [pc, #404]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055f6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	4962      	ldr	r1, [pc, #392]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005600:	4313      	orrs	r3, r2
 8005602:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00a      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005612:	4b5d      	ldr	r3, [pc, #372]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005614:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005618:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005620:	4959      	ldr	r1, [pc, #356]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005622:	4313      	orrs	r3, r2
 8005624:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00a      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005634:	4b54      	ldr	r3, [pc, #336]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005636:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800563a:	f023 0203 	bic.w	r2, r3, #3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005642:	4951      	ldr	r1, [pc, #324]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005644:	4313      	orrs	r3, r2
 8005646:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00a      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005656:	4b4c      	ldr	r3, [pc, #304]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005658:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800565c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005664:	4948      	ldr	r1, [pc, #288]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005666:	4313      	orrs	r3, r2
 8005668:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005674:	2b00      	cmp	r3, #0
 8005676:	d015      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005678:	4b43      	ldr	r3, [pc, #268]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800567a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800567e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005686:	4940      	ldr	r1, [pc, #256]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005688:	4313      	orrs	r3, r2
 800568a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005692:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005696:	d105      	bne.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005698:	4b3b      	ldr	r3, [pc, #236]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	4a3a      	ldr	r2, [pc, #232]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800569e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056a2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d015      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80056b0:	4b35      	ldr	r3, [pc, #212]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056b6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056be:	4932      	ldr	r1, [pc, #200]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056c0:	4313      	orrs	r3, r2
 80056c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80056ce:	d105      	bne.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056d0:	4b2d      	ldr	r3, [pc, #180]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	4a2c      	ldr	r2, [pc, #176]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056da:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d015      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80056e8:	4b27      	ldr	r3, [pc, #156]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ee:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056f6:	4924      	ldr	r1, [pc, #144]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056f8:	4313      	orrs	r3, r2
 80056fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005702:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005706:	d105      	bne.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005708:	4b1f      	ldr	r3, [pc, #124]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	4a1e      	ldr	r2, [pc, #120]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800570e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005712:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d015      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005720:	4b19      	ldr	r3, [pc, #100]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005726:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800572e:	4916      	ldr	r1, [pc, #88]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005730:	4313      	orrs	r3, r2
 8005732:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800573a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800573e:	d105      	bne.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005740:	4b11      	ldr	r3, [pc, #68]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	4a10      	ldr	r2, [pc, #64]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005746:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800574a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005754:	2b00      	cmp	r3, #0
 8005756:	d019      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005758:	4b0b      	ldr	r3, [pc, #44]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800575a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800575e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005766:	4908      	ldr	r1, [pc, #32]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005768:	4313      	orrs	r3, r2
 800576a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005772:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005776:	d109      	bne.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005778:	4b03      	ldr	r3, [pc, #12]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	4a02      	ldr	r2, [pc, #8]	@ (8005788 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800577e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005782:	60d3      	str	r3, [r2, #12]
 8005784:	e002      	b.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005786:	bf00      	nop
 8005788:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d015      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005798:	4b29      	ldr	r3, [pc, #164]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800579a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800579e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057a6:	4926      	ldr	r1, [pc, #152]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057a8:	4313      	orrs	r3, r2
 80057aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80057b6:	d105      	bne.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80057b8:	4b21      	ldr	r3, [pc, #132]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	4a20      	ldr	r2, [pc, #128]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057c2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d015      	beq.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80057d0:	4b1b      	ldr	r3, [pc, #108]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057d6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057de:	4918      	ldr	r1, [pc, #96]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057e0:	4313      	orrs	r3, r2
 80057e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057ee:	d105      	bne.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80057f0:	4b13      	ldr	r3, [pc, #76]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	4a12      	ldr	r2, [pc, #72]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057fa:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005804:	2b00      	cmp	r3, #0
 8005806:	d015      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005808:	4b0d      	ldr	r3, [pc, #52]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800580a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800580e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005816:	490a      	ldr	r1, [pc, #40]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005818:	4313      	orrs	r3, r2
 800581a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005822:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005826:	d105      	bne.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005828:	4b05      	ldr	r3, [pc, #20]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	4a04      	ldr	r2, [pc, #16]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800582e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005832:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005834:	7cbb      	ldrb	r3, [r7, #18]
}
 8005836:	4618      	mov	r0, r3
 8005838:	3718      	adds	r7, #24
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	40021000 	.word	0x40021000

08005844 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d101      	bne.n	8005856 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e049      	b.n	80058ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800585c:	b2db      	uxtb	r3, r3
 800585e:	2b00      	cmp	r3, #0
 8005860:	d106      	bne.n	8005870 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 f841 	bl	80058f2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2202      	movs	r2, #2
 8005874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	3304      	adds	r3, #4
 8005880:	4619      	mov	r1, r3
 8005882:	4610      	mov	r0, r2
 8005884:	f000 fa30 	bl	8005ce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3708      	adds	r7, #8
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}

080058f2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80058f2:	b480      	push	{r7}
 80058f4:	b083      	sub	sp, #12
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80058fa:	bf00      	nop
 80058fc:	370c      	adds	r7, #12
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr
	...

08005908 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005916:	b2db      	uxtb	r3, r3
 8005918:	2b01      	cmp	r3, #1
 800591a:	d001      	beq.n	8005920 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e054      	b.n	80059ca <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2202      	movs	r2, #2
 8005924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68da      	ldr	r2, [r3, #12]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f042 0201 	orr.w	r2, r2, #1
 8005936:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a26      	ldr	r2, [pc, #152]	@ (80059d8 <HAL_TIM_Base_Start_IT+0xd0>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d022      	beq.n	8005988 <HAL_TIM_Base_Start_IT+0x80>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800594a:	d01d      	beq.n	8005988 <HAL_TIM_Base_Start_IT+0x80>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a22      	ldr	r2, [pc, #136]	@ (80059dc <HAL_TIM_Base_Start_IT+0xd4>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d018      	beq.n	8005988 <HAL_TIM_Base_Start_IT+0x80>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a21      	ldr	r2, [pc, #132]	@ (80059e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d013      	beq.n	8005988 <HAL_TIM_Base_Start_IT+0x80>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a1f      	ldr	r2, [pc, #124]	@ (80059e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d00e      	beq.n	8005988 <HAL_TIM_Base_Start_IT+0x80>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a1e      	ldr	r2, [pc, #120]	@ (80059e8 <HAL_TIM_Base_Start_IT+0xe0>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d009      	beq.n	8005988 <HAL_TIM_Base_Start_IT+0x80>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a1c      	ldr	r2, [pc, #112]	@ (80059ec <HAL_TIM_Base_Start_IT+0xe4>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d004      	beq.n	8005988 <HAL_TIM_Base_Start_IT+0x80>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a1b      	ldr	r2, [pc, #108]	@ (80059f0 <HAL_TIM_Base_Start_IT+0xe8>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d115      	bne.n	80059b4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	689a      	ldr	r2, [r3, #8]
 800598e:	4b19      	ldr	r3, [pc, #100]	@ (80059f4 <HAL_TIM_Base_Start_IT+0xec>)
 8005990:	4013      	ands	r3, r2
 8005992:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2b06      	cmp	r3, #6
 8005998:	d015      	beq.n	80059c6 <HAL_TIM_Base_Start_IT+0xbe>
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059a0:	d011      	beq.n	80059c6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f042 0201 	orr.w	r2, r2, #1
 80059b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059b2:	e008      	b.n	80059c6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f042 0201 	orr.w	r2, r2, #1
 80059c2:	601a      	str	r2, [r3, #0]
 80059c4:	e000      	b.n	80059c8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3714      	adds	r7, #20
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	40012c00 	.word	0x40012c00
 80059dc:	40000400 	.word	0x40000400
 80059e0:	40000800 	.word	0x40000800
 80059e4:	40000c00 	.word	0x40000c00
 80059e8:	40013400 	.word	0x40013400
 80059ec:	40014000 	.word	0x40014000
 80059f0:	40015000 	.word	0x40015000
 80059f4:	00010007 	.word	0x00010007

080059f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	f003 0302 	and.w	r3, r3, #2
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d020      	beq.n	8005a5c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f003 0302 	and.w	r3, r3, #2
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d01b      	beq.n	8005a5c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f06f 0202 	mvn.w	r2, #2
 8005a2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2201      	movs	r2, #1
 8005a32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	f003 0303 	and.w	r3, r3, #3
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d003      	beq.n	8005a4a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 f931 	bl	8005caa <HAL_TIM_IC_CaptureCallback>
 8005a48:	e005      	b.n	8005a56 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 f923 	bl	8005c96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 f934 	bl	8005cbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	f003 0304 	and.w	r3, r3, #4
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d020      	beq.n	8005aa8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f003 0304 	and.w	r3, r3, #4
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d01b      	beq.n	8005aa8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f06f 0204 	mvn.w	r2, #4
 8005a78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2202      	movs	r2, #2
 8005a7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d003      	beq.n	8005a96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 f90b 	bl	8005caa <HAL_TIM_IC_CaptureCallback>
 8005a94:	e005      	b.n	8005aa2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 f8fd 	bl	8005c96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f000 f90e 	bl	8005cbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	f003 0308 	and.w	r3, r3, #8
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d020      	beq.n	8005af4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f003 0308 	and.w	r3, r3, #8
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d01b      	beq.n	8005af4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f06f 0208 	mvn.w	r2, #8
 8005ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2204      	movs	r2, #4
 8005aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	69db      	ldr	r3, [r3, #28]
 8005ad2:	f003 0303 	and.w	r3, r3, #3
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d003      	beq.n	8005ae2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 f8e5 	bl	8005caa <HAL_TIM_IC_CaptureCallback>
 8005ae0:	e005      	b.n	8005aee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 f8d7 	bl	8005c96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f000 f8e8 	bl	8005cbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	f003 0310 	and.w	r3, r3, #16
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d020      	beq.n	8005b40 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f003 0310 	and.w	r3, r3, #16
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d01b      	beq.n	8005b40 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f06f 0210 	mvn.w	r2, #16
 8005b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2208      	movs	r2, #8
 8005b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	69db      	ldr	r3, [r3, #28]
 8005b1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d003      	beq.n	8005b2e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 f8bf 	bl	8005caa <HAL_TIM_IC_CaptureCallback>
 8005b2c:	e005      	b.n	8005b3a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 f8b1 	bl	8005c96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 f8c2 	bl	8005cbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	f003 0301 	and.w	r3, r3, #1
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d00c      	beq.n	8005b64 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f003 0301 	and.w	r3, r3, #1
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d007      	beq.n	8005b64 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f06f 0201 	mvn.w	r2, #1
 8005b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f7fc fd72 	bl	8002648 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d104      	bne.n	8005b78 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00c      	beq.n	8005b92 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d007      	beq.n	8005b92 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005b8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f000 f969 	bl	8005e64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d00c      	beq.n	8005bb6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d007      	beq.n	8005bb6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005bae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f000 f961 	bl	8005e78 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00c      	beq.n	8005bda <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d007      	beq.n	8005bda <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005bd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 f87c 	bl	8005cd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	f003 0320 	and.w	r3, r3, #32
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d00c      	beq.n	8005bfe <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f003 0320 	and.w	r3, r3, #32
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d007      	beq.n	8005bfe <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f06f 0220 	mvn.w	r2, #32
 8005bf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f000 f929 	bl	8005e50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d00c      	beq.n	8005c22 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d007      	beq.n	8005c22 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005c1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 f935 	bl	8005e8c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d00c      	beq.n	8005c46 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d007      	beq.n	8005c46 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005c3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 f92d 	bl	8005ea0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d00c      	beq.n	8005c6a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d007      	beq.n	8005c6a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005c62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 f925 	bl	8005eb4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d00c      	beq.n	8005c8e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d007      	beq.n	8005c8e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005c86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 f91d 	bl	8005ec8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c8e:	bf00      	nop
 8005c90:	3710      	adds	r7, #16
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}

08005c96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c96:	b480      	push	{r7}
 8005c98:	b083      	sub	sp, #12
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c9e:	bf00      	nop
 8005ca0:	370c      	adds	r7, #12
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr

08005caa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005caa:	b480      	push	{r7}
 8005cac:	b083      	sub	sp, #12
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005cb2:	bf00      	nop
 8005cb4:	370c      	adds	r7, #12
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr

08005cbe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005cbe:	b480      	push	{r7}
 8005cc0:	b083      	sub	sp, #12
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005cc6:	bf00      	nop
 8005cc8:	370c      	adds	r7, #12
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr

08005cd2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005cd2:	b480      	push	{r7}
 8005cd4:	b083      	sub	sp, #12
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005cda:	bf00      	nop
 8005cdc:	370c      	adds	r7, #12
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr
	...

08005ce8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a4c      	ldr	r2, [pc, #304]	@ (8005e2c <TIM_Base_SetConfig+0x144>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d017      	beq.n	8005d30 <TIM_Base_SetConfig+0x48>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d06:	d013      	beq.n	8005d30 <TIM_Base_SetConfig+0x48>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a49      	ldr	r2, [pc, #292]	@ (8005e30 <TIM_Base_SetConfig+0x148>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d00f      	beq.n	8005d30 <TIM_Base_SetConfig+0x48>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a48      	ldr	r2, [pc, #288]	@ (8005e34 <TIM_Base_SetConfig+0x14c>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d00b      	beq.n	8005d30 <TIM_Base_SetConfig+0x48>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a47      	ldr	r2, [pc, #284]	@ (8005e38 <TIM_Base_SetConfig+0x150>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d007      	beq.n	8005d30 <TIM_Base_SetConfig+0x48>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a46      	ldr	r2, [pc, #280]	@ (8005e3c <TIM_Base_SetConfig+0x154>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d003      	beq.n	8005d30 <TIM_Base_SetConfig+0x48>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a45      	ldr	r2, [pc, #276]	@ (8005e40 <TIM_Base_SetConfig+0x158>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d108      	bne.n	8005d42 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a39      	ldr	r2, [pc, #228]	@ (8005e2c <TIM_Base_SetConfig+0x144>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d023      	beq.n	8005d92 <TIM_Base_SetConfig+0xaa>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d50:	d01f      	beq.n	8005d92 <TIM_Base_SetConfig+0xaa>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a36      	ldr	r2, [pc, #216]	@ (8005e30 <TIM_Base_SetConfig+0x148>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d01b      	beq.n	8005d92 <TIM_Base_SetConfig+0xaa>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a35      	ldr	r2, [pc, #212]	@ (8005e34 <TIM_Base_SetConfig+0x14c>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d017      	beq.n	8005d92 <TIM_Base_SetConfig+0xaa>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a34      	ldr	r2, [pc, #208]	@ (8005e38 <TIM_Base_SetConfig+0x150>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d013      	beq.n	8005d92 <TIM_Base_SetConfig+0xaa>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a33      	ldr	r2, [pc, #204]	@ (8005e3c <TIM_Base_SetConfig+0x154>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d00f      	beq.n	8005d92 <TIM_Base_SetConfig+0xaa>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a33      	ldr	r2, [pc, #204]	@ (8005e44 <TIM_Base_SetConfig+0x15c>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d00b      	beq.n	8005d92 <TIM_Base_SetConfig+0xaa>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4a32      	ldr	r2, [pc, #200]	@ (8005e48 <TIM_Base_SetConfig+0x160>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d007      	beq.n	8005d92 <TIM_Base_SetConfig+0xaa>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a31      	ldr	r2, [pc, #196]	@ (8005e4c <TIM_Base_SetConfig+0x164>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d003      	beq.n	8005d92 <TIM_Base_SetConfig+0xaa>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a2c      	ldr	r2, [pc, #176]	@ (8005e40 <TIM_Base_SetConfig+0x158>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d108      	bne.n	8005da4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	695b      	ldr	r3, [r3, #20]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	689a      	ldr	r2, [r3, #8]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4a18      	ldr	r2, [pc, #96]	@ (8005e2c <TIM_Base_SetConfig+0x144>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d013      	beq.n	8005df8 <TIM_Base_SetConfig+0x110>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4a1a      	ldr	r2, [pc, #104]	@ (8005e3c <TIM_Base_SetConfig+0x154>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d00f      	beq.n	8005df8 <TIM_Base_SetConfig+0x110>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a1a      	ldr	r2, [pc, #104]	@ (8005e44 <TIM_Base_SetConfig+0x15c>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d00b      	beq.n	8005df8 <TIM_Base_SetConfig+0x110>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a19      	ldr	r2, [pc, #100]	@ (8005e48 <TIM_Base_SetConfig+0x160>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d007      	beq.n	8005df8 <TIM_Base_SetConfig+0x110>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a18      	ldr	r2, [pc, #96]	@ (8005e4c <TIM_Base_SetConfig+0x164>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d003      	beq.n	8005df8 <TIM_Base_SetConfig+0x110>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4a13      	ldr	r2, [pc, #76]	@ (8005e40 <TIM_Base_SetConfig+0x158>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d103      	bne.n	8005e00 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	691a      	ldr	r2, [r3, #16]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	f003 0301 	and.w	r3, r3, #1
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d105      	bne.n	8005e1e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	f023 0201 	bic.w	r2, r3, #1
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	611a      	str	r2, [r3, #16]
  }
}
 8005e1e:	bf00      	nop
 8005e20:	3714      	adds	r7, #20
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	40012c00 	.word	0x40012c00
 8005e30:	40000400 	.word	0x40000400
 8005e34:	40000800 	.word	0x40000800
 8005e38:	40000c00 	.word	0x40000c00
 8005e3c:	40013400 	.word	0x40013400
 8005e40:	40015000 	.word	0x40015000
 8005e44:	40014000 	.word	0x40014000
 8005e48:	40014400 	.word	0x40014400
 8005e4c:	40014800 	.word	0x40014800

08005e50 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e58:	bf00      	nop
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e6c:	bf00      	nop
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e80:	bf00      	nop
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005e94:	bf00      	nop
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005ea8:	bf00      	nop
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005ebc:	bf00      	nop
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005ed0:	bf00      	nop
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d101      	bne.n	8005eee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e042      	b.n	8005f74 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d106      	bne.n	8005f06 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f7fc ff21 	bl	8002d48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2224      	movs	r2, #36	@ 0x24
 8005f0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f022 0201 	bic.w	r2, r2, #1
 8005f1c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d002      	beq.n	8005f2c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f001 f806 	bl	8006f38 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f000 fd07 	bl	8006940 <UART_SetConfig>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d101      	bne.n	8005f3c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e01b      	b.n	8005f74 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	685a      	ldr	r2, [r3, #4]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005f4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	689a      	ldr	r2, [r3, #8]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005f5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f042 0201 	orr.w	r2, r2, #1
 8005f6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f001 f885 	bl	800707c <UART_CheckIdleState>
 8005f72:	4603      	mov	r3, r0
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3708      	adds	r7, #8
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b08a      	sub	sp, #40	@ 0x28
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	4613      	mov	r3, r2
 8005f88:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f90:	2b20      	cmp	r3, #32
 8005f92:	d167      	bne.n	8006064 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d002      	beq.n	8005fa0 <HAL_UART_Transmit_DMA+0x24>
 8005f9a:	88fb      	ldrh	r3, [r7, #6]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d101      	bne.n	8005fa4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e060      	b.n	8006066 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	68ba      	ldr	r2, [r7, #8]
 8005fa8:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	88fa      	ldrh	r2, [r7, #6]
 8005fae:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	88fa      	ldrh	r2, [r7, #6]
 8005fb6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2221      	movs	r2, #33	@ 0x21
 8005fc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d028      	beq.n	8006024 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005fd6:	4a26      	ldr	r2, [pc, #152]	@ (8006070 <HAL_UART_Transmit_DMA+0xf4>)
 8005fd8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005fde:	4a25      	ldr	r2, [pc, #148]	@ (8006074 <HAL_UART_Transmit_DMA+0xf8>)
 8005fe0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005fe6:	4a24      	ldr	r2, [pc, #144]	@ (8006078 <HAL_UART_Transmit_DMA+0xfc>)
 8005fe8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005fee:	2200      	movs	r2, #0
 8005ff0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	3328      	adds	r3, #40	@ 0x28
 8006002:	461a      	mov	r2, r3
 8006004:	88fb      	ldrh	r3, [r7, #6]
 8006006:	f7fd f945 	bl	8003294 <HAL_DMA_Start_IT>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d009      	beq.n	8006024 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2210      	movs	r2, #16
 8006014:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2220      	movs	r2, #32
 800601c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e020      	b.n	8006066 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2240      	movs	r2, #64	@ 0x40
 800602a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	3308      	adds	r3, #8
 8006032:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	e853 3f00 	ldrex	r3, [r3]
 800603a:	613b      	str	r3, [r7, #16]
   return(result);
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006042:	627b      	str	r3, [r7, #36]	@ 0x24
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	3308      	adds	r3, #8
 800604a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800604c:	623a      	str	r2, [r7, #32]
 800604e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006050:	69f9      	ldr	r1, [r7, #28]
 8006052:	6a3a      	ldr	r2, [r7, #32]
 8006054:	e841 2300 	strex	r3, r2, [r1]
 8006058:	61bb      	str	r3, [r7, #24]
   return(result);
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d1e5      	bne.n	800602c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8006060:	2300      	movs	r3, #0
 8006062:	e000      	b.n	8006066 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006064:	2302      	movs	r3, #2
  }
}
 8006066:	4618      	mov	r0, r3
 8006068:	3728      	adds	r7, #40	@ 0x28
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	08007547 	.word	0x08007547
 8006074:	080075e1 	.word	0x080075e1
 8006078:	08007767 	.word	0x08007767

0800607c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b08a      	sub	sp, #40	@ 0x28
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	4613      	mov	r3, r2
 8006088:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006090:	2b20      	cmp	r3, #32
 8006092:	d137      	bne.n	8006104 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d002      	beq.n	80060a0 <HAL_UART_Receive_DMA+0x24>
 800609a:	88fb      	ldrh	r3, [r7, #6]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d101      	bne.n	80060a4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	e030      	b.n	8006106 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2200      	movs	r2, #0
 80060a8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a18      	ldr	r2, [pc, #96]	@ (8006110 <HAL_UART_Receive_DMA+0x94>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d01f      	beq.n	80060f4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d018      	beq.n	80060f4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	e853 3f00 	ldrex	r3, [r3]
 80060ce:	613b      	str	r3, [r7, #16]
   return(result);
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80060d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	461a      	mov	r2, r3
 80060de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e0:	623b      	str	r3, [r7, #32]
 80060e2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e4:	69f9      	ldr	r1, [r7, #28]
 80060e6:	6a3a      	ldr	r2, [r7, #32]
 80060e8:	e841 2300 	strex	r3, r2, [r1]
 80060ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d1e6      	bne.n	80060c2 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80060f4:	88fb      	ldrh	r3, [r7, #6]
 80060f6:	461a      	mov	r2, r3
 80060f8:	68b9      	ldr	r1, [r7, #8]
 80060fa:	68f8      	ldr	r0, [r7, #12]
 80060fc:	f001 f8d6 	bl	80072ac <UART_Start_Receive_DMA>
 8006100:	4603      	mov	r3, r0
 8006102:	e000      	b.n	8006106 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006104:	2302      	movs	r3, #2
  }
}
 8006106:	4618      	mov	r0, r3
 8006108:	3728      	adds	r7, #40	@ 0x28
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	40008000 	.word	0x40008000

08006114 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b090      	sub	sp, #64	@ 0x40
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006122:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800612a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006136:	2b80      	cmp	r3, #128	@ 0x80
 8006138:	d139      	bne.n	80061ae <HAL_UART_DMAStop+0x9a>
 800613a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800613c:	2b21      	cmp	r3, #33	@ 0x21
 800613e:	d136      	bne.n	80061ae <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	3308      	adds	r3, #8
 8006146:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006148:	6a3b      	ldr	r3, [r7, #32]
 800614a:	e853 3f00 	ldrex	r3, [r3]
 800614e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006156:	637b      	str	r3, [r7, #52]	@ 0x34
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	3308      	adds	r3, #8
 800615e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006160:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006162:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006164:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006166:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006168:	e841 2300 	strex	r3, r2, [r1]
 800616c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800616e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006170:	2b00      	cmp	r3, #0
 8006172:	d1e5      	bne.n	8006140 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006178:	2b00      	cmp	r3, #0
 800617a:	d015      	beq.n	80061a8 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006180:	4618      	mov	r0, r3
 8006182:	f7fd f902 	bl	800338a <HAL_DMA_Abort>
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	d00d      	beq.n	80061a8 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006190:	4618      	mov	r0, r3
 8006192:	f7fd fa69 	bl	8003668 <HAL_DMA_GetError>
 8006196:	4603      	mov	r3, r0
 8006198:	2b20      	cmp	r3, #32
 800619a:	d105      	bne.n	80061a8 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2210      	movs	r2, #16
 80061a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80061a4:	2303      	movs	r3, #3
 80061a6:	e047      	b.n	8006238 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f001 f925 	bl	80073f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061b8:	2b40      	cmp	r3, #64	@ 0x40
 80061ba:	d13c      	bne.n	8006236 <HAL_UART_DMAStop+0x122>
 80061bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061be:	2b22      	cmp	r3, #34	@ 0x22
 80061c0:	d139      	bne.n	8006236 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	3308      	adds	r3, #8
 80061c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	e853 3f00 	ldrex	r3, [r3]
 80061d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	3308      	adds	r3, #8
 80061e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061e2:	61ba      	str	r2, [r7, #24]
 80061e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e6:	6979      	ldr	r1, [r7, #20]
 80061e8:	69ba      	ldr	r2, [r7, #24]
 80061ea:	e841 2300 	strex	r3, r2, [r1]
 80061ee:	613b      	str	r3, [r7, #16]
   return(result);
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d1e5      	bne.n	80061c2 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d017      	beq.n	8006230 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006206:	4618      	mov	r0, r3
 8006208:	f7fd f8bf 	bl	800338a <HAL_DMA_Abort>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d00e      	beq.n	8006230 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006218:	4618      	mov	r0, r3
 800621a:	f7fd fa25 	bl	8003668 <HAL_DMA_GetError>
 800621e:	4603      	mov	r3, r0
 8006220:	2b20      	cmp	r3, #32
 8006222:	d105      	bne.n	8006230 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2210      	movs	r2, #16
 8006228:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800622c:	2303      	movs	r3, #3
 800622e:	e003      	b.n	8006238 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f001 f922 	bl	800747a <UART_EndRxTransfer>
  }

  return HAL_OK;
 8006236:	2300      	movs	r3, #0
}
 8006238:	4618      	mov	r0, r3
 800623a:	3740      	adds	r7, #64	@ 0x40
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}

08006240 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b0ba      	sub	sp, #232	@ 0xe8
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	69db      	ldr	r3, [r3, #28]
 800624e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006266:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800626a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800626e:	4013      	ands	r3, r2
 8006270:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006274:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006278:	2b00      	cmp	r3, #0
 800627a:	d11b      	bne.n	80062b4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800627c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006280:	f003 0320 	and.w	r3, r3, #32
 8006284:	2b00      	cmp	r3, #0
 8006286:	d015      	beq.n	80062b4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800628c:	f003 0320 	and.w	r3, r3, #32
 8006290:	2b00      	cmp	r3, #0
 8006292:	d105      	bne.n	80062a0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006294:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006298:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800629c:	2b00      	cmp	r3, #0
 800629e:	d009      	beq.n	80062b4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	f000 8300 	beq.w	80068aa <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	4798      	blx	r3
      }
      return;
 80062b2:	e2fa      	b.n	80068aa <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80062b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	f000 8123 	beq.w	8006504 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80062be:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80062c2:	4b8d      	ldr	r3, [pc, #564]	@ (80064f8 <HAL_UART_IRQHandler+0x2b8>)
 80062c4:	4013      	ands	r3, r2
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d106      	bne.n	80062d8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80062ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80062ce:	4b8b      	ldr	r3, [pc, #556]	@ (80064fc <HAL_UART_IRQHandler+0x2bc>)
 80062d0:	4013      	ands	r3, r2
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	f000 8116 	beq.w	8006504 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80062d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062dc:	f003 0301 	and.w	r3, r3, #1
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d011      	beq.n	8006308 <HAL_UART_IRQHandler+0xc8>
 80062e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00b      	beq.n	8006308 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2201      	movs	r2, #1
 80062f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062fe:	f043 0201 	orr.w	r2, r3, #1
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006308:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800630c:	f003 0302 	and.w	r3, r3, #2
 8006310:	2b00      	cmp	r3, #0
 8006312:	d011      	beq.n	8006338 <HAL_UART_IRQHandler+0xf8>
 8006314:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006318:	f003 0301 	and.w	r3, r3, #1
 800631c:	2b00      	cmp	r3, #0
 800631e:	d00b      	beq.n	8006338 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2202      	movs	r2, #2
 8006326:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800632e:	f043 0204 	orr.w	r2, r3, #4
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800633c:	f003 0304 	and.w	r3, r3, #4
 8006340:	2b00      	cmp	r3, #0
 8006342:	d011      	beq.n	8006368 <HAL_UART_IRQHandler+0x128>
 8006344:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006348:	f003 0301 	and.w	r3, r3, #1
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00b      	beq.n	8006368 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2204      	movs	r2, #4
 8006356:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800635e:	f043 0202 	orr.w	r2, r3, #2
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800636c:	f003 0308 	and.w	r3, r3, #8
 8006370:	2b00      	cmp	r3, #0
 8006372:	d017      	beq.n	80063a4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006378:	f003 0320 	and.w	r3, r3, #32
 800637c:	2b00      	cmp	r3, #0
 800637e:	d105      	bne.n	800638c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006380:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006384:	4b5c      	ldr	r3, [pc, #368]	@ (80064f8 <HAL_UART_IRQHandler+0x2b8>)
 8006386:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006388:	2b00      	cmp	r3, #0
 800638a:	d00b      	beq.n	80063a4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2208      	movs	r2, #8
 8006392:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800639a:	f043 0208 	orr.w	r2, r3, #8
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80063a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d012      	beq.n	80063d6 <HAL_UART_IRQHandler+0x196>
 80063b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063b4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d00c      	beq.n	80063d6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80063c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063cc:	f043 0220 	orr.w	r2, r3, #32
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063dc:	2b00      	cmp	r3, #0
 80063de:	f000 8266 	beq.w	80068ae <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80063e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063e6:	f003 0320 	and.w	r3, r3, #32
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d013      	beq.n	8006416 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80063ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063f2:	f003 0320 	and.w	r3, r3, #32
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d105      	bne.n	8006406 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80063fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006402:	2b00      	cmp	r3, #0
 8006404:	d007      	beq.n	8006416 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800640a:	2b00      	cmp	r3, #0
 800640c:	d003      	beq.n	8006416 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800641c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800642a:	2b40      	cmp	r3, #64	@ 0x40
 800642c:	d005      	beq.n	800643a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800642e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006432:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006436:	2b00      	cmp	r3, #0
 8006438:	d054      	beq.n	80064e4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f001 f81d 	bl	800747a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800644a:	2b40      	cmp	r3, #64	@ 0x40
 800644c:	d146      	bne.n	80064dc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	3308      	adds	r3, #8
 8006454:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006458:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800645c:	e853 3f00 	ldrex	r3, [r3]
 8006460:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006464:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006468:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800646c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	3308      	adds	r3, #8
 8006476:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800647a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800647e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006482:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006486:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800648a:	e841 2300 	strex	r3, r2, [r1]
 800648e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006492:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d1d9      	bne.n	800644e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d017      	beq.n	80064d4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064aa:	4a15      	ldr	r2, [pc, #84]	@ (8006500 <HAL_UART_IRQHandler+0x2c0>)
 80064ac:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064b4:	4618      	mov	r0, r3
 80064b6:	f7fc ffc1 	bl	800343c <HAL_DMA_Abort_IT>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d019      	beq.n	80064f4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80064ce:	4610      	mov	r0, r2
 80064d0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064d2:	e00f      	b.n	80064f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 fa1d 	bl	8006914 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064da:	e00b      	b.n	80064f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 fa19 	bl	8006914 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064e2:	e007      	b.n	80064f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 fa15 	bl	8006914 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80064f2:	e1dc      	b.n	80068ae <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064f4:	bf00      	nop
    return;
 80064f6:	e1da      	b.n	80068ae <HAL_UART_IRQHandler+0x66e>
 80064f8:	10000001 	.word	0x10000001
 80064fc:	04000120 	.word	0x04000120
 8006500:	080077e7 	.word	0x080077e7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006508:	2b01      	cmp	r3, #1
 800650a:	f040 8170 	bne.w	80067ee <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800650e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006512:	f003 0310 	and.w	r3, r3, #16
 8006516:	2b00      	cmp	r3, #0
 8006518:	f000 8169 	beq.w	80067ee <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800651c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006520:	f003 0310 	and.w	r3, r3, #16
 8006524:	2b00      	cmp	r3, #0
 8006526:	f000 8162 	beq.w	80067ee <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2210      	movs	r2, #16
 8006530:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800653c:	2b40      	cmp	r3, #64	@ 0x40
 800653e:	f040 80d8 	bne.w	80066f2 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006550:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006554:	2b00      	cmp	r3, #0
 8006556:	f000 80af 	beq.w	80066b8 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006560:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006564:	429a      	cmp	r2, r3
 8006566:	f080 80a7 	bcs.w	80066b8 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006570:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f003 0320 	and.w	r3, r3, #32
 8006582:	2b00      	cmp	r3, #0
 8006584:	f040 8087 	bne.w	8006696 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006590:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006594:	e853 3f00 	ldrex	r3, [r3]
 8006598:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800659c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80065a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	461a      	mov	r2, r3
 80065ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80065b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80065b6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80065be:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80065c2:	e841 2300 	strex	r3, r2, [r1]
 80065c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80065ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d1da      	bne.n	8006588 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	3308      	adds	r3, #8
 80065d8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80065dc:	e853 3f00 	ldrex	r3, [r3]
 80065e0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80065e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80065e4:	f023 0301 	bic.w	r3, r3, #1
 80065e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	3308      	adds	r3, #8
 80065f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80065f6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80065fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80065fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006602:	e841 2300 	strex	r3, r2, [r1]
 8006606:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006608:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800660a:	2b00      	cmp	r3, #0
 800660c:	d1e1      	bne.n	80065d2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	3308      	adds	r3, #8
 8006614:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006616:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006618:	e853 3f00 	ldrex	r3, [r3]
 800661c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800661e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006620:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006624:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	3308      	adds	r3, #8
 800662e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006632:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006634:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006636:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006638:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800663a:	e841 2300 	strex	r3, r2, [r1]
 800663e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006640:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006642:	2b00      	cmp	r3, #0
 8006644:	d1e3      	bne.n	800660e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2220      	movs	r2, #32
 800664a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800665a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800665c:	e853 3f00 	ldrex	r3, [r3]
 8006660:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006662:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006664:	f023 0310 	bic.w	r3, r3, #16
 8006668:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	461a      	mov	r2, r3
 8006672:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006676:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006678:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800667a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800667c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800667e:	e841 2300 	strex	r3, r2, [r1]
 8006682:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006684:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006686:	2b00      	cmp	r3, #0
 8006688:	d1e4      	bne.n	8006654 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006690:	4618      	mov	r0, r3
 8006692:	f7fc fe7a 	bl	800338a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2202      	movs	r2, #2
 800669a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	1ad3      	subs	r3, r2, r3
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	4619      	mov	r1, r3
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 f939 	bl	8006928 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80066b6:	e0fc      	b.n	80068b2 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80066be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80066c2:	429a      	cmp	r2, r3
 80066c4:	f040 80f5 	bne.w	80068b2 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 0320 	and.w	r3, r3, #32
 80066d6:	2b20      	cmp	r3, #32
 80066d8:	f040 80eb 	bne.w	80068b2 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2202      	movs	r2, #2
 80066e0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80066e8:	4619      	mov	r1, r3
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 f91c 	bl	8006928 <HAL_UARTEx_RxEventCallback>
      return;
 80066f0:	e0df      	b.n	80068b2 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80066fe:	b29b      	uxth	r3, r3
 8006700:	1ad3      	subs	r3, r2, r3
 8006702:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800670c:	b29b      	uxth	r3, r3
 800670e:	2b00      	cmp	r3, #0
 8006710:	f000 80d1 	beq.w	80068b6 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8006714:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006718:	2b00      	cmp	r3, #0
 800671a:	f000 80cc 	beq.w	80068b6 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006726:	e853 3f00 	ldrex	r3, [r3]
 800672a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800672c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800672e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006732:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	461a      	mov	r2, r3
 800673c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006740:	647b      	str	r3, [r7, #68]	@ 0x44
 8006742:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006744:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006746:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006748:	e841 2300 	strex	r3, r2, [r1]
 800674c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800674e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006750:	2b00      	cmp	r3, #0
 8006752:	d1e4      	bne.n	800671e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	3308      	adds	r3, #8
 800675a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800675c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800675e:	e853 3f00 	ldrex	r3, [r3]
 8006762:	623b      	str	r3, [r7, #32]
   return(result);
 8006764:	6a3b      	ldr	r3, [r7, #32]
 8006766:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800676a:	f023 0301 	bic.w	r3, r3, #1
 800676e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	3308      	adds	r3, #8
 8006778:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800677c:	633a      	str	r2, [r7, #48]	@ 0x30
 800677e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006780:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006782:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006784:	e841 2300 	strex	r3, r2, [r1]
 8006788:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800678a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800678c:	2b00      	cmp	r3, #0
 800678e:	d1e1      	bne.n	8006754 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2220      	movs	r2, #32
 8006794:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	e853 3f00 	ldrex	r3, [r3]
 80067b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f023 0310 	bic.w	r3, r3, #16
 80067b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	461a      	mov	r2, r3
 80067c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80067c6:	61fb      	str	r3, [r7, #28]
 80067c8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ca:	69b9      	ldr	r1, [r7, #24]
 80067cc:	69fa      	ldr	r2, [r7, #28]
 80067ce:	e841 2300 	strex	r3, r2, [r1]
 80067d2:	617b      	str	r3, [r7, #20]
   return(result);
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1e4      	bne.n	80067a4 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2202      	movs	r2, #2
 80067de:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80067e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80067e4:	4619      	mov	r1, r3
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 f89e 	bl	8006928 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80067ec:	e063      	b.n	80068b6 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80067ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d00e      	beq.n	8006818 <HAL_UART_IRQHandler+0x5d8>
 80067fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006802:	2b00      	cmp	r3, #0
 8006804:	d008      	beq.n	8006818 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800680e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f001 f825 	bl	8007860 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006816:	e051      	b.n	80068bc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800681c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006820:	2b00      	cmp	r3, #0
 8006822:	d014      	beq.n	800684e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006828:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800682c:	2b00      	cmp	r3, #0
 800682e:	d105      	bne.n	800683c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006830:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006834:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006838:	2b00      	cmp	r3, #0
 800683a:	d008      	beq.n	800684e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006840:	2b00      	cmp	r3, #0
 8006842:	d03a      	beq.n	80068ba <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	4798      	blx	r3
    }
    return;
 800684c:	e035      	b.n	80068ba <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800684e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006852:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006856:	2b00      	cmp	r3, #0
 8006858:	d009      	beq.n	800686e <HAL_UART_IRQHandler+0x62e>
 800685a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800685e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006862:	2b00      	cmp	r3, #0
 8006864:	d003      	beq.n	800686e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 ffcf 	bl	800780a <UART_EndTransmit_IT>
    return;
 800686c:	e026      	b.n	80068bc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800686e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006872:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006876:	2b00      	cmp	r3, #0
 8006878:	d009      	beq.n	800688e <HAL_UART_IRQHandler+0x64e>
 800687a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800687e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006882:	2b00      	cmp	r3, #0
 8006884:	d003      	beq.n	800688e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 fffe 	bl	8007888 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800688c:	e016      	b.n	80068bc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800688e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006892:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006896:	2b00      	cmp	r3, #0
 8006898:	d010      	beq.n	80068bc <HAL_UART_IRQHandler+0x67c>
 800689a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	da0c      	bge.n	80068bc <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 ffe6 	bl	8007874 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80068a8:	e008      	b.n	80068bc <HAL_UART_IRQHandler+0x67c>
      return;
 80068aa:	bf00      	nop
 80068ac:	e006      	b.n	80068bc <HAL_UART_IRQHandler+0x67c>
    return;
 80068ae:	bf00      	nop
 80068b0:	e004      	b.n	80068bc <HAL_UART_IRQHandler+0x67c>
      return;
 80068b2:	bf00      	nop
 80068b4:	e002      	b.n	80068bc <HAL_UART_IRQHandler+0x67c>
      return;
 80068b6:	bf00      	nop
 80068b8:	e000      	b.n	80068bc <HAL_UART_IRQHandler+0x67c>
    return;
 80068ba:	bf00      	nop
  }
}
 80068bc:	37e8      	adds	r7, #232	@ 0xe8
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop

080068c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80068cc:	bf00      	nop
 80068ce:	370c      	adds	r7, #12
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr

080068d8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80068e0:	bf00      	nop
 80068e2:	370c      	adds	r7, #12
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr

080068ec <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80068f4:	bf00      	nop
 80068f6:	370c      	adds	r7, #12
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006908:	bf00      	nop
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800691c:	bf00      	nop
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	460b      	mov	r3, r1
 8006932:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006934:	bf00      	nop
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006940:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006944:	b08c      	sub	sp, #48	@ 0x30
 8006946:	af00      	add	r7, sp, #0
 8006948:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800694a:	2300      	movs	r3, #0
 800694c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	689a      	ldr	r2, [r3, #8]
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	691b      	ldr	r3, [r3, #16]
 8006958:	431a      	orrs	r2, r3
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	695b      	ldr	r3, [r3, #20]
 800695e:	431a      	orrs	r2, r3
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	69db      	ldr	r3, [r3, #28]
 8006964:	4313      	orrs	r3, r2
 8006966:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	4baa      	ldr	r3, [pc, #680]	@ (8006c18 <UART_SetConfig+0x2d8>)
 8006970:	4013      	ands	r3, r2
 8006972:	697a      	ldr	r2, [r7, #20]
 8006974:	6812      	ldr	r2, [r2, #0]
 8006976:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006978:	430b      	orrs	r3, r1
 800697a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	68da      	ldr	r2, [r3, #12]
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	430a      	orrs	r2, r1
 8006990:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	699b      	ldr	r3, [r3, #24]
 8006996:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a9f      	ldr	r2, [pc, #636]	@ (8006c1c <UART_SetConfig+0x2dc>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d004      	beq.n	80069ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	6a1b      	ldr	r3, [r3, #32]
 80069a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069a8:	4313      	orrs	r3, r2
 80069aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80069b6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80069ba:	697a      	ldr	r2, [r7, #20]
 80069bc:	6812      	ldr	r2, [r2, #0]
 80069be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069c0:	430b      	orrs	r3, r1
 80069c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ca:	f023 010f 	bic.w	r1, r3, #15
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	430a      	orrs	r2, r1
 80069d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a90      	ldr	r2, [pc, #576]	@ (8006c20 <UART_SetConfig+0x2e0>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d125      	bne.n	8006a30 <UART_SetConfig+0xf0>
 80069e4:	4b8f      	ldr	r3, [pc, #572]	@ (8006c24 <UART_SetConfig+0x2e4>)
 80069e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069ea:	f003 0303 	and.w	r3, r3, #3
 80069ee:	2b03      	cmp	r3, #3
 80069f0:	d81a      	bhi.n	8006a28 <UART_SetConfig+0xe8>
 80069f2:	a201      	add	r2, pc, #4	@ (adr r2, 80069f8 <UART_SetConfig+0xb8>)
 80069f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f8:	08006a09 	.word	0x08006a09
 80069fc:	08006a19 	.word	0x08006a19
 8006a00:	08006a11 	.word	0x08006a11
 8006a04:	08006a21 	.word	0x08006a21
 8006a08:	2301      	movs	r3, #1
 8006a0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a0e:	e116      	b.n	8006c3e <UART_SetConfig+0x2fe>
 8006a10:	2302      	movs	r3, #2
 8006a12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a16:	e112      	b.n	8006c3e <UART_SetConfig+0x2fe>
 8006a18:	2304      	movs	r3, #4
 8006a1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a1e:	e10e      	b.n	8006c3e <UART_SetConfig+0x2fe>
 8006a20:	2308      	movs	r3, #8
 8006a22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a26:	e10a      	b.n	8006c3e <UART_SetConfig+0x2fe>
 8006a28:	2310      	movs	r3, #16
 8006a2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a2e:	e106      	b.n	8006c3e <UART_SetConfig+0x2fe>
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a7c      	ldr	r2, [pc, #496]	@ (8006c28 <UART_SetConfig+0x2e8>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d138      	bne.n	8006aac <UART_SetConfig+0x16c>
 8006a3a:	4b7a      	ldr	r3, [pc, #488]	@ (8006c24 <UART_SetConfig+0x2e4>)
 8006a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a40:	f003 030c 	and.w	r3, r3, #12
 8006a44:	2b0c      	cmp	r3, #12
 8006a46:	d82d      	bhi.n	8006aa4 <UART_SetConfig+0x164>
 8006a48:	a201      	add	r2, pc, #4	@ (adr r2, 8006a50 <UART_SetConfig+0x110>)
 8006a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a4e:	bf00      	nop
 8006a50:	08006a85 	.word	0x08006a85
 8006a54:	08006aa5 	.word	0x08006aa5
 8006a58:	08006aa5 	.word	0x08006aa5
 8006a5c:	08006aa5 	.word	0x08006aa5
 8006a60:	08006a95 	.word	0x08006a95
 8006a64:	08006aa5 	.word	0x08006aa5
 8006a68:	08006aa5 	.word	0x08006aa5
 8006a6c:	08006aa5 	.word	0x08006aa5
 8006a70:	08006a8d 	.word	0x08006a8d
 8006a74:	08006aa5 	.word	0x08006aa5
 8006a78:	08006aa5 	.word	0x08006aa5
 8006a7c:	08006aa5 	.word	0x08006aa5
 8006a80:	08006a9d 	.word	0x08006a9d
 8006a84:	2300      	movs	r3, #0
 8006a86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a8a:	e0d8      	b.n	8006c3e <UART_SetConfig+0x2fe>
 8006a8c:	2302      	movs	r3, #2
 8006a8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a92:	e0d4      	b.n	8006c3e <UART_SetConfig+0x2fe>
 8006a94:	2304      	movs	r3, #4
 8006a96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a9a:	e0d0      	b.n	8006c3e <UART_SetConfig+0x2fe>
 8006a9c:	2308      	movs	r3, #8
 8006a9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aa2:	e0cc      	b.n	8006c3e <UART_SetConfig+0x2fe>
 8006aa4:	2310      	movs	r3, #16
 8006aa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aaa:	e0c8      	b.n	8006c3e <UART_SetConfig+0x2fe>
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a5e      	ldr	r2, [pc, #376]	@ (8006c2c <UART_SetConfig+0x2ec>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d125      	bne.n	8006b02 <UART_SetConfig+0x1c2>
 8006ab6:	4b5b      	ldr	r3, [pc, #364]	@ (8006c24 <UART_SetConfig+0x2e4>)
 8006ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006abc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006ac0:	2b30      	cmp	r3, #48	@ 0x30
 8006ac2:	d016      	beq.n	8006af2 <UART_SetConfig+0x1b2>
 8006ac4:	2b30      	cmp	r3, #48	@ 0x30
 8006ac6:	d818      	bhi.n	8006afa <UART_SetConfig+0x1ba>
 8006ac8:	2b20      	cmp	r3, #32
 8006aca:	d00a      	beq.n	8006ae2 <UART_SetConfig+0x1a2>
 8006acc:	2b20      	cmp	r3, #32
 8006ace:	d814      	bhi.n	8006afa <UART_SetConfig+0x1ba>
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d002      	beq.n	8006ada <UART_SetConfig+0x19a>
 8006ad4:	2b10      	cmp	r3, #16
 8006ad6:	d008      	beq.n	8006aea <UART_SetConfig+0x1aa>
 8006ad8:	e00f      	b.n	8006afa <UART_SetConfig+0x1ba>
 8006ada:	2300      	movs	r3, #0
 8006adc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ae0:	e0ad      	b.n	8006c3e <UART_SetConfig+0x2fe>
 8006ae2:	2302      	movs	r3, #2
 8006ae4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ae8:	e0a9      	b.n	8006c3e <UART_SetConfig+0x2fe>
 8006aea:	2304      	movs	r3, #4
 8006aec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006af0:	e0a5      	b.n	8006c3e <UART_SetConfig+0x2fe>
 8006af2:	2308      	movs	r3, #8
 8006af4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006af8:	e0a1      	b.n	8006c3e <UART_SetConfig+0x2fe>
 8006afa:	2310      	movs	r3, #16
 8006afc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b00:	e09d      	b.n	8006c3e <UART_SetConfig+0x2fe>
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a4a      	ldr	r2, [pc, #296]	@ (8006c30 <UART_SetConfig+0x2f0>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d125      	bne.n	8006b58 <UART_SetConfig+0x218>
 8006b0c:	4b45      	ldr	r3, [pc, #276]	@ (8006c24 <UART_SetConfig+0x2e4>)
 8006b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b12:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006b16:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b18:	d016      	beq.n	8006b48 <UART_SetConfig+0x208>
 8006b1a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b1c:	d818      	bhi.n	8006b50 <UART_SetConfig+0x210>
 8006b1e:	2b80      	cmp	r3, #128	@ 0x80
 8006b20:	d00a      	beq.n	8006b38 <UART_SetConfig+0x1f8>
 8006b22:	2b80      	cmp	r3, #128	@ 0x80
 8006b24:	d814      	bhi.n	8006b50 <UART_SetConfig+0x210>
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d002      	beq.n	8006b30 <UART_SetConfig+0x1f0>
 8006b2a:	2b40      	cmp	r3, #64	@ 0x40
 8006b2c:	d008      	beq.n	8006b40 <UART_SetConfig+0x200>
 8006b2e:	e00f      	b.n	8006b50 <UART_SetConfig+0x210>
 8006b30:	2300      	movs	r3, #0
 8006b32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b36:	e082      	b.n	8006c3e <UART_SetConfig+0x2fe>
 8006b38:	2302      	movs	r3, #2
 8006b3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b3e:	e07e      	b.n	8006c3e <UART_SetConfig+0x2fe>
 8006b40:	2304      	movs	r3, #4
 8006b42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b46:	e07a      	b.n	8006c3e <UART_SetConfig+0x2fe>
 8006b48:	2308      	movs	r3, #8
 8006b4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b4e:	e076      	b.n	8006c3e <UART_SetConfig+0x2fe>
 8006b50:	2310      	movs	r3, #16
 8006b52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b56:	e072      	b.n	8006c3e <UART_SetConfig+0x2fe>
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a35      	ldr	r2, [pc, #212]	@ (8006c34 <UART_SetConfig+0x2f4>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d12a      	bne.n	8006bb8 <UART_SetConfig+0x278>
 8006b62:	4b30      	ldr	r3, [pc, #192]	@ (8006c24 <UART_SetConfig+0x2e4>)
 8006b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b6c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b70:	d01a      	beq.n	8006ba8 <UART_SetConfig+0x268>
 8006b72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b76:	d81b      	bhi.n	8006bb0 <UART_SetConfig+0x270>
 8006b78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b7c:	d00c      	beq.n	8006b98 <UART_SetConfig+0x258>
 8006b7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b82:	d815      	bhi.n	8006bb0 <UART_SetConfig+0x270>
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d003      	beq.n	8006b90 <UART_SetConfig+0x250>
 8006b88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b8c:	d008      	beq.n	8006ba0 <UART_SetConfig+0x260>
 8006b8e:	e00f      	b.n	8006bb0 <UART_SetConfig+0x270>
 8006b90:	2300      	movs	r3, #0
 8006b92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b96:	e052      	b.n	8006c3e <UART_SetConfig+0x2fe>
 8006b98:	2302      	movs	r3, #2
 8006b9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b9e:	e04e      	b.n	8006c3e <UART_SetConfig+0x2fe>
 8006ba0:	2304      	movs	r3, #4
 8006ba2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ba6:	e04a      	b.n	8006c3e <UART_SetConfig+0x2fe>
 8006ba8:	2308      	movs	r3, #8
 8006baa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bae:	e046      	b.n	8006c3e <UART_SetConfig+0x2fe>
 8006bb0:	2310      	movs	r3, #16
 8006bb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bb6:	e042      	b.n	8006c3e <UART_SetConfig+0x2fe>
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a17      	ldr	r2, [pc, #92]	@ (8006c1c <UART_SetConfig+0x2dc>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d13a      	bne.n	8006c38 <UART_SetConfig+0x2f8>
 8006bc2:	4b18      	ldr	r3, [pc, #96]	@ (8006c24 <UART_SetConfig+0x2e4>)
 8006bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bc8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006bcc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006bd0:	d01a      	beq.n	8006c08 <UART_SetConfig+0x2c8>
 8006bd2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006bd6:	d81b      	bhi.n	8006c10 <UART_SetConfig+0x2d0>
 8006bd8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006bdc:	d00c      	beq.n	8006bf8 <UART_SetConfig+0x2b8>
 8006bde:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006be2:	d815      	bhi.n	8006c10 <UART_SetConfig+0x2d0>
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d003      	beq.n	8006bf0 <UART_SetConfig+0x2b0>
 8006be8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bec:	d008      	beq.n	8006c00 <UART_SetConfig+0x2c0>
 8006bee:	e00f      	b.n	8006c10 <UART_SetConfig+0x2d0>
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bf6:	e022      	b.n	8006c3e <UART_SetConfig+0x2fe>
 8006bf8:	2302      	movs	r3, #2
 8006bfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bfe:	e01e      	b.n	8006c3e <UART_SetConfig+0x2fe>
 8006c00:	2304      	movs	r3, #4
 8006c02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c06:	e01a      	b.n	8006c3e <UART_SetConfig+0x2fe>
 8006c08:	2308      	movs	r3, #8
 8006c0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c0e:	e016      	b.n	8006c3e <UART_SetConfig+0x2fe>
 8006c10:	2310      	movs	r3, #16
 8006c12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c16:	e012      	b.n	8006c3e <UART_SetConfig+0x2fe>
 8006c18:	cfff69f3 	.word	0xcfff69f3
 8006c1c:	40008000 	.word	0x40008000
 8006c20:	40013800 	.word	0x40013800
 8006c24:	40021000 	.word	0x40021000
 8006c28:	40004400 	.word	0x40004400
 8006c2c:	40004800 	.word	0x40004800
 8006c30:	40004c00 	.word	0x40004c00
 8006c34:	40005000 	.word	0x40005000
 8006c38:	2310      	movs	r3, #16
 8006c3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4aae      	ldr	r2, [pc, #696]	@ (8006efc <UART_SetConfig+0x5bc>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	f040 8097 	bne.w	8006d78 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c4a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006c4e:	2b08      	cmp	r3, #8
 8006c50:	d823      	bhi.n	8006c9a <UART_SetConfig+0x35a>
 8006c52:	a201      	add	r2, pc, #4	@ (adr r2, 8006c58 <UART_SetConfig+0x318>)
 8006c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c58:	08006c7d 	.word	0x08006c7d
 8006c5c:	08006c9b 	.word	0x08006c9b
 8006c60:	08006c85 	.word	0x08006c85
 8006c64:	08006c9b 	.word	0x08006c9b
 8006c68:	08006c8b 	.word	0x08006c8b
 8006c6c:	08006c9b 	.word	0x08006c9b
 8006c70:	08006c9b 	.word	0x08006c9b
 8006c74:	08006c9b 	.word	0x08006c9b
 8006c78:	08006c93 	.word	0x08006c93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c7c:	f7fe faf0 	bl	8005260 <HAL_RCC_GetPCLK1Freq>
 8006c80:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c82:	e010      	b.n	8006ca6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c84:	4b9e      	ldr	r3, [pc, #632]	@ (8006f00 <UART_SetConfig+0x5c0>)
 8006c86:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006c88:	e00d      	b.n	8006ca6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c8a:	f7fe fa7b 	bl	8005184 <HAL_RCC_GetSysClockFreq>
 8006c8e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c90:	e009      	b.n	8006ca6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c96:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006c98:	e005      	b.n	8006ca6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006ca4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	f000 8130 	beq.w	8006f0e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cb2:	4a94      	ldr	r2, [pc, #592]	@ (8006f04 <UART_SetConfig+0x5c4>)
 8006cb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cb8:	461a      	mov	r2, r3
 8006cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cc0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	685a      	ldr	r2, [r3, #4]
 8006cc6:	4613      	mov	r3, r2
 8006cc8:	005b      	lsls	r3, r3, #1
 8006cca:	4413      	add	r3, r2
 8006ccc:	69ba      	ldr	r2, [r7, #24]
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d305      	bcc.n	8006cde <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006cd8:	69ba      	ldr	r2, [r7, #24]
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d903      	bls.n	8006ce6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006ce4:	e113      	b.n	8006f0e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce8:	2200      	movs	r2, #0
 8006cea:	60bb      	str	r3, [r7, #8]
 8006cec:	60fa      	str	r2, [r7, #12]
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cf2:	4a84      	ldr	r2, [pc, #528]	@ (8006f04 <UART_SetConfig+0x5c4>)
 8006cf4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	603b      	str	r3, [r7, #0]
 8006cfe:	607a      	str	r2, [r7, #4]
 8006d00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d04:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006d08:	f7f9 fffe 	bl	8000d08 <__aeabi_uldivmod>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	460b      	mov	r3, r1
 8006d10:	4610      	mov	r0, r2
 8006d12:	4619      	mov	r1, r3
 8006d14:	f04f 0200 	mov.w	r2, #0
 8006d18:	f04f 0300 	mov.w	r3, #0
 8006d1c:	020b      	lsls	r3, r1, #8
 8006d1e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006d22:	0202      	lsls	r2, r0, #8
 8006d24:	6979      	ldr	r1, [r7, #20]
 8006d26:	6849      	ldr	r1, [r1, #4]
 8006d28:	0849      	lsrs	r1, r1, #1
 8006d2a:	2000      	movs	r0, #0
 8006d2c:	460c      	mov	r4, r1
 8006d2e:	4605      	mov	r5, r0
 8006d30:	eb12 0804 	adds.w	r8, r2, r4
 8006d34:	eb43 0905 	adc.w	r9, r3, r5
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	469a      	mov	sl, r3
 8006d40:	4693      	mov	fp, r2
 8006d42:	4652      	mov	r2, sl
 8006d44:	465b      	mov	r3, fp
 8006d46:	4640      	mov	r0, r8
 8006d48:	4649      	mov	r1, r9
 8006d4a:	f7f9 ffdd 	bl	8000d08 <__aeabi_uldivmod>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	460b      	mov	r3, r1
 8006d52:	4613      	mov	r3, r2
 8006d54:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d56:	6a3b      	ldr	r3, [r7, #32]
 8006d58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d5c:	d308      	bcc.n	8006d70 <UART_SetConfig+0x430>
 8006d5e:	6a3b      	ldr	r3, [r7, #32]
 8006d60:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d64:	d204      	bcs.n	8006d70 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	6a3a      	ldr	r2, [r7, #32]
 8006d6c:	60da      	str	r2, [r3, #12]
 8006d6e:	e0ce      	b.n	8006f0e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006d76:	e0ca      	b.n	8006f0e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	69db      	ldr	r3, [r3, #28]
 8006d7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d80:	d166      	bne.n	8006e50 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006d82:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006d86:	2b08      	cmp	r3, #8
 8006d88:	d827      	bhi.n	8006dda <UART_SetConfig+0x49a>
 8006d8a:	a201      	add	r2, pc, #4	@ (adr r2, 8006d90 <UART_SetConfig+0x450>)
 8006d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d90:	08006db5 	.word	0x08006db5
 8006d94:	08006dbd 	.word	0x08006dbd
 8006d98:	08006dc5 	.word	0x08006dc5
 8006d9c:	08006ddb 	.word	0x08006ddb
 8006da0:	08006dcb 	.word	0x08006dcb
 8006da4:	08006ddb 	.word	0x08006ddb
 8006da8:	08006ddb 	.word	0x08006ddb
 8006dac:	08006ddb 	.word	0x08006ddb
 8006db0:	08006dd3 	.word	0x08006dd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006db4:	f7fe fa54 	bl	8005260 <HAL_RCC_GetPCLK1Freq>
 8006db8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006dba:	e014      	b.n	8006de6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006dbc:	f7fe fa66 	bl	800528c <HAL_RCC_GetPCLK2Freq>
 8006dc0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006dc2:	e010      	b.n	8006de6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006dc4:	4b4e      	ldr	r3, [pc, #312]	@ (8006f00 <UART_SetConfig+0x5c0>)
 8006dc6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006dc8:	e00d      	b.n	8006de6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dca:	f7fe f9db 	bl	8005184 <HAL_RCC_GetSysClockFreq>
 8006dce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006dd0:	e009      	b.n	8006de6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006dd6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006dd8:	e005      	b.n	8006de6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006de4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	f000 8090 	beq.w	8006f0e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006df2:	4a44      	ldr	r2, [pc, #272]	@ (8006f04 <UART_SetConfig+0x5c4>)
 8006df4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006df8:	461a      	mov	r2, r3
 8006dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dfc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e00:	005a      	lsls	r2, r3, #1
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	085b      	lsrs	r3, r3, #1
 8006e08:	441a      	add	r2, r3
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e12:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e14:	6a3b      	ldr	r3, [r7, #32]
 8006e16:	2b0f      	cmp	r3, #15
 8006e18:	d916      	bls.n	8006e48 <UART_SetConfig+0x508>
 8006e1a:	6a3b      	ldr	r3, [r7, #32]
 8006e1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e20:	d212      	bcs.n	8006e48 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e22:	6a3b      	ldr	r3, [r7, #32]
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	f023 030f 	bic.w	r3, r3, #15
 8006e2a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e2c:	6a3b      	ldr	r3, [r7, #32]
 8006e2e:	085b      	lsrs	r3, r3, #1
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	f003 0307 	and.w	r3, r3, #7
 8006e36:	b29a      	uxth	r2, r3
 8006e38:	8bfb      	ldrh	r3, [r7, #30]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	8bfa      	ldrh	r2, [r7, #30]
 8006e44:	60da      	str	r2, [r3, #12]
 8006e46:	e062      	b.n	8006f0e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006e4e:	e05e      	b.n	8006f0e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e50:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006e54:	2b08      	cmp	r3, #8
 8006e56:	d828      	bhi.n	8006eaa <UART_SetConfig+0x56a>
 8006e58:	a201      	add	r2, pc, #4	@ (adr r2, 8006e60 <UART_SetConfig+0x520>)
 8006e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e5e:	bf00      	nop
 8006e60:	08006e85 	.word	0x08006e85
 8006e64:	08006e8d 	.word	0x08006e8d
 8006e68:	08006e95 	.word	0x08006e95
 8006e6c:	08006eab 	.word	0x08006eab
 8006e70:	08006e9b 	.word	0x08006e9b
 8006e74:	08006eab 	.word	0x08006eab
 8006e78:	08006eab 	.word	0x08006eab
 8006e7c:	08006eab 	.word	0x08006eab
 8006e80:	08006ea3 	.word	0x08006ea3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e84:	f7fe f9ec 	bl	8005260 <HAL_RCC_GetPCLK1Freq>
 8006e88:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e8a:	e014      	b.n	8006eb6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e8c:	f7fe f9fe 	bl	800528c <HAL_RCC_GetPCLK2Freq>
 8006e90:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e92:	e010      	b.n	8006eb6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e94:	4b1a      	ldr	r3, [pc, #104]	@ (8006f00 <UART_SetConfig+0x5c0>)
 8006e96:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e98:	e00d      	b.n	8006eb6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e9a:	f7fe f973 	bl	8005184 <HAL_RCC_GetSysClockFreq>
 8006e9e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ea0:	e009      	b.n	8006eb6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ea2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ea6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ea8:	e005      	b.n	8006eb6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006eb4:	bf00      	nop
    }

    if (pclk != 0U)
 8006eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d028      	beq.n	8006f0e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ec0:	4a10      	ldr	r2, [pc, #64]	@ (8006f04 <UART_SetConfig+0x5c4>)
 8006ec2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eca:	fbb3 f2f2 	udiv	r2, r3, r2
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	085b      	lsrs	r3, r3, #1
 8006ed4:	441a      	add	r2, r3
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ede:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ee0:	6a3b      	ldr	r3, [r7, #32]
 8006ee2:	2b0f      	cmp	r3, #15
 8006ee4:	d910      	bls.n	8006f08 <UART_SetConfig+0x5c8>
 8006ee6:	6a3b      	ldr	r3, [r7, #32]
 8006ee8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006eec:	d20c      	bcs.n	8006f08 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006eee:	6a3b      	ldr	r3, [r7, #32]
 8006ef0:	b29a      	uxth	r2, r3
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	60da      	str	r2, [r3, #12]
 8006ef8:	e009      	b.n	8006f0e <UART_SetConfig+0x5ce>
 8006efa:	bf00      	nop
 8006efc:	40008000 	.word	0x40008000
 8006f00:	00f42400 	.word	0x00f42400
 8006f04:	0801b2ac 	.word	0x0801b2ac
      }
      else
      {
        ret = HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	2201      	movs	r2, #1
 8006f12:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	2201      	movs	r2, #1
 8006f1a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	2200      	movs	r2, #0
 8006f22:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	2200      	movs	r2, #0
 8006f28:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006f2a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3730      	adds	r7, #48	@ 0x30
 8006f32:	46bd      	mov	sp, r7
 8006f34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006f38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b083      	sub	sp, #12
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f44:	f003 0308 	and.w	r3, r3, #8
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d00a      	beq.n	8006f62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	430a      	orrs	r2, r1
 8006f60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f66:	f003 0301 	and.w	r3, r3, #1
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d00a      	beq.n	8006f84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	430a      	orrs	r2, r1
 8006f82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f88:	f003 0302 	and.w	r3, r3, #2
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d00a      	beq.n	8006fa6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	430a      	orrs	r2, r1
 8006fa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006faa:	f003 0304 	and.w	r3, r3, #4
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d00a      	beq.n	8006fc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	430a      	orrs	r2, r1
 8006fc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fcc:	f003 0310 	and.w	r3, r3, #16
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d00a      	beq.n	8006fea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	430a      	orrs	r2, r1
 8006fe8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fee:	f003 0320 	and.w	r3, r3, #32
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d00a      	beq.n	800700c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	430a      	orrs	r2, r1
 800700a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007010:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007014:	2b00      	cmp	r3, #0
 8007016:	d01a      	beq.n	800704e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	430a      	orrs	r2, r1
 800702c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007032:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007036:	d10a      	bne.n	800704e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	430a      	orrs	r2, r1
 800704c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007056:	2b00      	cmp	r3, #0
 8007058:	d00a      	beq.n	8007070 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	430a      	orrs	r2, r1
 800706e:	605a      	str	r2, [r3, #4]
  }
}
 8007070:	bf00      	nop
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b098      	sub	sp, #96	@ 0x60
 8007080:	af02      	add	r7, sp, #8
 8007082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800708c:	f7fb ff6e 	bl	8002f6c <HAL_GetTick>
 8007090:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 0308 	and.w	r3, r3, #8
 800709c:	2b08      	cmp	r3, #8
 800709e:	d12f      	bne.n	8007100 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80070a4:	9300      	str	r3, [sp, #0]
 80070a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070a8:	2200      	movs	r2, #0
 80070aa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 f88e 	bl	80071d0 <UART_WaitOnFlagUntilTimeout>
 80070b4:	4603      	mov	r3, r0
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d022      	beq.n	8007100 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070c2:	e853 3f00 	ldrex	r3, [r3]
 80070c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80070c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80070ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	461a      	mov	r2, r3
 80070d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80070da:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80070de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80070e0:	e841 2300 	strex	r3, r2, [r1]
 80070e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80070e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d1e6      	bne.n	80070ba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2220      	movs	r2, #32
 80070f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070fc:	2303      	movs	r3, #3
 80070fe:	e063      	b.n	80071c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f003 0304 	and.w	r3, r3, #4
 800710a:	2b04      	cmp	r3, #4
 800710c:	d149      	bne.n	80071a2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800710e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007112:	9300      	str	r3, [sp, #0]
 8007114:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007116:	2200      	movs	r2, #0
 8007118:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 f857 	bl	80071d0 <UART_WaitOnFlagUntilTimeout>
 8007122:	4603      	mov	r3, r0
 8007124:	2b00      	cmp	r3, #0
 8007126:	d03c      	beq.n	80071a2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800712e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007130:	e853 3f00 	ldrex	r3, [r3]
 8007134:	623b      	str	r3, [r7, #32]
   return(result);
 8007136:	6a3b      	ldr	r3, [r7, #32]
 8007138:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800713c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	461a      	mov	r2, r3
 8007144:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007146:	633b      	str	r3, [r7, #48]	@ 0x30
 8007148:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800714a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800714c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800714e:	e841 2300 	strex	r3, r2, [r1]
 8007152:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007156:	2b00      	cmp	r3, #0
 8007158:	d1e6      	bne.n	8007128 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	3308      	adds	r3, #8
 8007160:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	e853 3f00 	ldrex	r3, [r3]
 8007168:	60fb      	str	r3, [r7, #12]
   return(result);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f023 0301 	bic.w	r3, r3, #1
 8007170:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	3308      	adds	r3, #8
 8007178:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800717a:	61fa      	str	r2, [r7, #28]
 800717c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800717e:	69b9      	ldr	r1, [r7, #24]
 8007180:	69fa      	ldr	r2, [r7, #28]
 8007182:	e841 2300 	strex	r3, r2, [r1]
 8007186:	617b      	str	r3, [r7, #20]
   return(result);
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d1e5      	bne.n	800715a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2220      	movs	r2, #32
 8007192:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800719e:	2303      	movs	r3, #3
 80071a0:	e012      	b.n	80071c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2220      	movs	r2, #32
 80071a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2220      	movs	r2, #32
 80071ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2200      	movs	r2, #0
 80071c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80071c6:	2300      	movs	r3, #0
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3758      	adds	r7, #88	@ 0x58
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	60f8      	str	r0, [r7, #12]
 80071d8:	60b9      	str	r1, [r7, #8]
 80071da:	603b      	str	r3, [r7, #0]
 80071dc:	4613      	mov	r3, r2
 80071de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071e0:	e04f      	b.n	8007282 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071e2:	69bb      	ldr	r3, [r7, #24]
 80071e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80071e8:	d04b      	beq.n	8007282 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071ea:	f7fb febf 	bl	8002f6c <HAL_GetTick>
 80071ee:	4602      	mov	r2, r0
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	1ad3      	subs	r3, r2, r3
 80071f4:	69ba      	ldr	r2, [r7, #24]
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d302      	bcc.n	8007200 <UART_WaitOnFlagUntilTimeout+0x30>
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d101      	bne.n	8007204 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007200:	2303      	movs	r3, #3
 8007202:	e04e      	b.n	80072a2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f003 0304 	and.w	r3, r3, #4
 800720e:	2b00      	cmp	r3, #0
 8007210:	d037      	beq.n	8007282 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	2b80      	cmp	r3, #128	@ 0x80
 8007216:	d034      	beq.n	8007282 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	2b40      	cmp	r3, #64	@ 0x40
 800721c:	d031      	beq.n	8007282 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	69db      	ldr	r3, [r3, #28]
 8007224:	f003 0308 	and.w	r3, r3, #8
 8007228:	2b08      	cmp	r3, #8
 800722a:	d110      	bne.n	800724e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2208      	movs	r2, #8
 8007232:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007234:	68f8      	ldr	r0, [r7, #12]
 8007236:	f000 f920 	bl	800747a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2208      	movs	r2, #8
 800723e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2200      	movs	r2, #0
 8007246:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	e029      	b.n	80072a2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	69db      	ldr	r3, [r3, #28]
 8007254:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007258:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800725c:	d111      	bne.n	8007282 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007266:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007268:	68f8      	ldr	r0, [r7, #12]
 800726a:	f000 f906 	bl	800747a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2220      	movs	r2, #32
 8007272:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2200      	movs	r2, #0
 800727a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800727e:	2303      	movs	r3, #3
 8007280:	e00f      	b.n	80072a2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	69da      	ldr	r2, [r3, #28]
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	4013      	ands	r3, r2
 800728c:	68ba      	ldr	r2, [r7, #8]
 800728e:	429a      	cmp	r2, r3
 8007290:	bf0c      	ite	eq
 8007292:	2301      	moveq	r3, #1
 8007294:	2300      	movne	r3, #0
 8007296:	b2db      	uxtb	r3, r3
 8007298:	461a      	mov	r2, r3
 800729a:	79fb      	ldrb	r3, [r7, #7]
 800729c:	429a      	cmp	r2, r3
 800729e:	d0a0      	beq.n	80071e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3710      	adds	r7, #16
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
	...

080072ac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b096      	sub	sp, #88	@ 0x58
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	60b9      	str	r1, [r7, #8]
 80072b6:	4613      	mov	r3, r2
 80072b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	68ba      	ldr	r2, [r7, #8]
 80072be:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	88fa      	ldrh	r2, [r7, #6]
 80072c4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2200      	movs	r2, #0
 80072cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2222      	movs	r2, #34	@ 0x22
 80072d4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d02d      	beq.n	800733e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072e8:	4a40      	ldr	r2, [pc, #256]	@ (80073ec <UART_Start_Receive_DMA+0x140>)
 80072ea:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072f2:	4a3f      	ldr	r2, [pc, #252]	@ (80073f0 <UART_Start_Receive_DMA+0x144>)
 80072f4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072fc:	4a3d      	ldr	r2, [pc, #244]	@ (80073f4 <UART_Start_Receive_DMA+0x148>)
 80072fe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007306:	2200      	movs	r2, #0
 8007308:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	3324      	adds	r3, #36	@ 0x24
 8007316:	4619      	mov	r1, r3
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800731c:	461a      	mov	r2, r3
 800731e:	88fb      	ldrh	r3, [r7, #6]
 8007320:	f7fb ffb8 	bl	8003294 <HAL_DMA_Start_IT>
 8007324:	4603      	mov	r3, r0
 8007326:	2b00      	cmp	r3, #0
 8007328:	d009      	beq.n	800733e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2210      	movs	r2, #16
 800732e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2220      	movs	r2, #32
 8007336:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	e051      	b.n	80073e2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	691b      	ldr	r3, [r3, #16]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d018      	beq.n	8007378 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800734e:	e853 3f00 	ldrex	r3, [r3]
 8007352:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007356:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800735a:	657b      	str	r3, [r7, #84]	@ 0x54
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	461a      	mov	r2, r3
 8007362:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007364:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007366:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007368:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800736a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800736c:	e841 2300 	strex	r3, r2, [r1]
 8007370:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007372:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007374:	2b00      	cmp	r3, #0
 8007376:	d1e6      	bne.n	8007346 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	3308      	adds	r3, #8
 800737e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007382:	e853 3f00 	ldrex	r3, [r3]
 8007386:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800738a:	f043 0301 	orr.w	r3, r3, #1
 800738e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	3308      	adds	r3, #8
 8007396:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007398:	637a      	str	r2, [r7, #52]	@ 0x34
 800739a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800739c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800739e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80073a0:	e841 2300 	strex	r3, r2, [r1]
 80073a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80073a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d1e5      	bne.n	8007378 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	3308      	adds	r3, #8
 80073b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	e853 3f00 	ldrex	r3, [r3]
 80073ba:	613b      	str	r3, [r7, #16]
   return(result);
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	3308      	adds	r3, #8
 80073ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80073cc:	623a      	str	r2, [r7, #32]
 80073ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d0:	69f9      	ldr	r1, [r7, #28]
 80073d2:	6a3a      	ldr	r2, [r7, #32]
 80073d4:	e841 2300 	strex	r3, r2, [r1]
 80073d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80073da:	69bb      	ldr	r3, [r7, #24]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d1e5      	bne.n	80073ac <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3758      	adds	r7, #88	@ 0x58
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	080075fd 	.word	0x080075fd
 80073f0:	08007729 	.word	0x08007729
 80073f4:	08007767 	.word	0x08007767

080073f8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b08f      	sub	sp, #60	@ 0x3c
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007406:	6a3b      	ldr	r3, [r7, #32]
 8007408:	e853 3f00 	ldrex	r3, [r3]
 800740c:	61fb      	str	r3, [r7, #28]
   return(result);
 800740e:	69fb      	ldr	r3, [r7, #28]
 8007410:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007414:	637b      	str	r3, [r7, #52]	@ 0x34
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	461a      	mov	r2, r3
 800741c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800741e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007420:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007422:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007424:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007426:	e841 2300 	strex	r3, r2, [r1]
 800742a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800742c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800742e:	2b00      	cmp	r3, #0
 8007430:	d1e6      	bne.n	8007400 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	3308      	adds	r3, #8
 8007438:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	e853 3f00 	ldrex	r3, [r3]
 8007440:	60bb      	str	r3, [r7, #8]
   return(result);
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007448:	633b      	str	r3, [r7, #48]	@ 0x30
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	3308      	adds	r3, #8
 8007450:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007452:	61ba      	str	r2, [r7, #24]
 8007454:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007456:	6979      	ldr	r1, [r7, #20]
 8007458:	69ba      	ldr	r2, [r7, #24]
 800745a:	e841 2300 	strex	r3, r2, [r1]
 800745e:	613b      	str	r3, [r7, #16]
   return(result);
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d1e5      	bne.n	8007432 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2220      	movs	r2, #32
 800746a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800746e:	bf00      	nop
 8007470:	373c      	adds	r7, #60	@ 0x3c
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr

0800747a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800747a:	b480      	push	{r7}
 800747c:	b095      	sub	sp, #84	@ 0x54
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800748a:	e853 3f00 	ldrex	r3, [r3]
 800748e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007492:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007496:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	461a      	mov	r2, r3
 800749e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80074a2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80074a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80074a8:	e841 2300 	strex	r3, r2, [r1]
 80074ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80074ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d1e6      	bne.n	8007482 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	3308      	adds	r3, #8
 80074ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074bc:	6a3b      	ldr	r3, [r7, #32]
 80074be:	e853 3f00 	ldrex	r3, [r3]
 80074c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80074c4:	69fb      	ldr	r3, [r7, #28]
 80074c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80074ca:	f023 0301 	bic.w	r3, r3, #1
 80074ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	3308      	adds	r3, #8
 80074d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80074d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80074da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80074de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80074e0:	e841 2300 	strex	r3, r2, [r1]
 80074e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80074e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d1e3      	bne.n	80074b4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d118      	bne.n	8007526 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	e853 3f00 	ldrex	r3, [r3]
 8007500:	60bb      	str	r3, [r7, #8]
   return(result);
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	f023 0310 	bic.w	r3, r3, #16
 8007508:	647b      	str	r3, [r7, #68]	@ 0x44
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	461a      	mov	r2, r3
 8007510:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007512:	61bb      	str	r3, [r7, #24]
 8007514:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007516:	6979      	ldr	r1, [r7, #20]
 8007518:	69ba      	ldr	r2, [r7, #24]
 800751a:	e841 2300 	strex	r3, r2, [r1]
 800751e:	613b      	str	r3, [r7, #16]
   return(result);
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d1e6      	bne.n	80074f4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2220      	movs	r2, #32
 800752a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800753a:	bf00      	nop
 800753c:	3754      	adds	r7, #84	@ 0x54
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr

08007546 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007546:	b580      	push	{r7, lr}
 8007548:	b090      	sub	sp, #64	@ 0x40
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007552:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 0320 	and.w	r3, r3, #32
 800755e:	2b00      	cmp	r3, #0
 8007560:	d137      	bne.n	80075d2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8007562:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007564:	2200      	movs	r2, #0
 8007566:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800756a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	3308      	adds	r3, #8
 8007570:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007574:	e853 3f00 	ldrex	r3, [r3]
 8007578:	623b      	str	r3, [r7, #32]
   return(result);
 800757a:	6a3b      	ldr	r3, [r7, #32]
 800757c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007580:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007582:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	3308      	adds	r3, #8
 8007588:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800758a:	633a      	str	r2, [r7, #48]	@ 0x30
 800758c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007590:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007592:	e841 2300 	strex	r3, r2, [r1]
 8007596:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800759a:	2b00      	cmp	r3, #0
 800759c:	d1e5      	bne.n	800756a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800759e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	e853 3f00 	ldrex	r3, [r3]
 80075aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80075b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	461a      	mov	r2, r3
 80075ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075bc:	61fb      	str	r3, [r7, #28]
 80075be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c0:	69b9      	ldr	r1, [r7, #24]
 80075c2:	69fa      	ldr	r2, [r7, #28]
 80075c4:	e841 2300 	strex	r3, r2, [r1]
 80075c8:	617b      	str	r3, [r7, #20]
   return(result);
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d1e6      	bne.n	800759e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80075d0:	e002      	b.n	80075d8 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80075d2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80075d4:	f7ff f976 	bl	80068c4 <HAL_UART_TxCpltCallback>
}
 80075d8:	bf00      	nop
 80075da:	3740      	adds	r7, #64	@ 0x40
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ec:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80075ee:	68f8      	ldr	r0, [r7, #12]
 80075f0:	f7ff f972 	bl	80068d8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075f4:	bf00      	nop
 80075f6:	3710      	adds	r7, #16
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}

080075fc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b09c      	sub	sp, #112	@ 0x70
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007608:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f003 0320 	and.w	r3, r3, #32
 8007614:	2b00      	cmp	r3, #0
 8007616:	d171      	bne.n	80076fc <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8007618:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800761a:	2200      	movs	r2, #0
 800761c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007620:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007626:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007628:	e853 3f00 	ldrex	r3, [r3]
 800762c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800762e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007630:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007634:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007636:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	461a      	mov	r2, r3
 800763c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800763e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007640:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007642:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007644:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007646:	e841 2300 	strex	r3, r2, [r1]
 800764a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800764c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800764e:	2b00      	cmp	r3, #0
 8007650:	d1e6      	bne.n	8007620 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007652:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	3308      	adds	r3, #8
 8007658:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800765a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800765c:	e853 3f00 	ldrex	r3, [r3]
 8007660:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007664:	f023 0301 	bic.w	r3, r3, #1
 8007668:	667b      	str	r3, [r7, #100]	@ 0x64
 800766a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	3308      	adds	r3, #8
 8007670:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007672:	647a      	str	r2, [r7, #68]	@ 0x44
 8007674:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007676:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007678:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800767a:	e841 2300 	strex	r3, r2, [r1]
 800767e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007680:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007682:	2b00      	cmp	r3, #0
 8007684:	d1e5      	bne.n	8007652 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007686:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	3308      	adds	r3, #8
 800768c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800768e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007690:	e853 3f00 	ldrex	r3, [r3]
 8007694:	623b      	str	r3, [r7, #32]
   return(result);
 8007696:	6a3b      	ldr	r3, [r7, #32]
 8007698:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800769c:	663b      	str	r3, [r7, #96]	@ 0x60
 800769e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	3308      	adds	r3, #8
 80076a4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80076a6:	633a      	str	r2, [r7, #48]	@ 0x30
 80076a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80076ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076ae:	e841 2300 	strex	r3, r2, [r1]
 80076b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80076b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d1e5      	bne.n	8007686 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80076ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076bc:	2220      	movs	r2, #32
 80076be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d118      	bne.n	80076fc <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	e853 3f00 	ldrex	r3, [r3]
 80076d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f023 0310 	bic.w	r3, r3, #16
 80076de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80076e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	461a      	mov	r2, r3
 80076e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80076e8:	61fb      	str	r3, [r7, #28]
 80076ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ec:	69b9      	ldr	r1, [r7, #24]
 80076ee:	69fa      	ldr	r2, [r7, #28]
 80076f0:	e841 2300 	strex	r3, r2, [r1]
 80076f4:	617b      	str	r3, [r7, #20]
   return(result);
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d1e6      	bne.n	80076ca <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076fe:	2200      	movs	r2, #0
 8007700:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007702:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007704:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007706:	2b01      	cmp	r3, #1
 8007708:	d107      	bne.n	800771a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800770a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800770c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007710:	4619      	mov	r1, r3
 8007712:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007714:	f7ff f908 	bl	8006928 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007718:	e002      	b.n	8007720 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800771a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800771c:	f7ff f8e6 	bl	80068ec <HAL_UART_RxCpltCallback>
}
 8007720:	bf00      	nop
 8007722:	3770      	adds	r7, #112	@ 0x70
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b084      	sub	sp, #16
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007734:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2201      	movs	r2, #1
 800773a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007740:	2b01      	cmp	r3, #1
 8007742:	d109      	bne.n	8007758 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800774a:	085b      	lsrs	r3, r3, #1
 800774c:	b29b      	uxth	r3, r3
 800774e:	4619      	mov	r1, r3
 8007750:	68f8      	ldr	r0, [r7, #12]
 8007752:	f7ff f8e9 	bl	8006928 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007756:	e002      	b.n	800775e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007758:	68f8      	ldr	r0, [r7, #12]
 800775a:	f7ff f8d1 	bl	8006900 <HAL_UART_RxHalfCpltCallback>
}
 800775e:	bf00      	nop
 8007760:	3710      	adds	r7, #16
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}

08007766 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007766:	b580      	push	{r7, lr}
 8007768:	b086      	sub	sp, #24
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007772:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800777a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007782:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800778e:	2b80      	cmp	r3, #128	@ 0x80
 8007790:	d109      	bne.n	80077a6 <UART_DMAError+0x40>
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	2b21      	cmp	r3, #33	@ 0x21
 8007796:	d106      	bne.n	80077a6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	2200      	movs	r2, #0
 800779c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80077a0:	6978      	ldr	r0, [r7, #20]
 80077a2:	f7ff fe29 	bl	80073f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077b0:	2b40      	cmp	r3, #64	@ 0x40
 80077b2:	d109      	bne.n	80077c8 <UART_DMAError+0x62>
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2b22      	cmp	r3, #34	@ 0x22
 80077b8:	d106      	bne.n	80077c8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	2200      	movs	r2, #0
 80077be:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80077c2:	6978      	ldr	r0, [r7, #20]
 80077c4:	f7ff fe59 	bl	800747a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077ce:	f043 0210 	orr.w	r2, r3, #16
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80077d8:	6978      	ldr	r0, [r7, #20]
 80077da:	f7ff f89b 	bl	8006914 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077de:	bf00      	nop
 80077e0:	3718      	adds	r7, #24
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}

080077e6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80077e6:	b580      	push	{r7, lr}
 80077e8:	b084      	sub	sp, #16
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2200      	movs	r2, #0
 80077f8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80077fc:	68f8      	ldr	r0, [r7, #12]
 80077fe:	f7ff f889 	bl	8006914 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007802:	bf00      	nop
 8007804:	3710      	adds	r7, #16
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}

0800780a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800780a:	b580      	push	{r7, lr}
 800780c:	b088      	sub	sp, #32
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	e853 3f00 	ldrex	r3, [r3]
 800781e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007826:	61fb      	str	r3, [r7, #28]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	461a      	mov	r2, r3
 800782e:	69fb      	ldr	r3, [r7, #28]
 8007830:	61bb      	str	r3, [r7, #24]
 8007832:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007834:	6979      	ldr	r1, [r7, #20]
 8007836:	69ba      	ldr	r2, [r7, #24]
 8007838:	e841 2300 	strex	r3, r2, [r1]
 800783c:	613b      	str	r3, [r7, #16]
   return(result);
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d1e6      	bne.n	8007812 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2220      	movs	r2, #32
 8007848:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f7ff f836 	bl	80068c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007858:	bf00      	nop
 800785a:	3720      	adds	r7, #32
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007860:	b480      	push	{r7}
 8007862:	b083      	sub	sp, #12
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007868:	bf00      	nop
 800786a:	370c      	adds	r7, #12
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr

08007874 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800787c:	bf00      	nop
 800787e:	370c      	adds	r7, #12
 8007880:	46bd      	mov	sp, r7
 8007882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007886:	4770      	bx	lr

08007888 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007890:	bf00      	nop
 8007892:	370c      	adds	r7, #12
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800789c:	b480      	push	{r7}
 800789e:	b085      	sub	sp, #20
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d101      	bne.n	80078b2 <HAL_UARTEx_DisableFifoMode+0x16>
 80078ae:	2302      	movs	r3, #2
 80078b0:	e027      	b.n	8007902 <HAL_UARTEx_DisableFifoMode+0x66>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2201      	movs	r2, #1
 80078b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2224      	movs	r2, #36	@ 0x24
 80078be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f022 0201 	bic.w	r2, r2, #1
 80078d8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80078e0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2200      	movs	r2, #0
 80078e6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	68fa      	ldr	r2, [r7, #12]
 80078ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2220      	movs	r2, #32
 80078f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2200      	movs	r2, #0
 80078fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007900:	2300      	movs	r3, #0
}
 8007902:	4618      	mov	r0, r3
 8007904:	3714      	adds	r7, #20
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr

0800790e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800790e:	b580      	push	{r7, lr}
 8007910:	b084      	sub	sp, #16
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
 8007916:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800791e:	2b01      	cmp	r3, #1
 8007920:	d101      	bne.n	8007926 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007922:	2302      	movs	r3, #2
 8007924:	e02d      	b.n	8007982 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2201      	movs	r2, #1
 800792a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2224      	movs	r2, #36	@ 0x24
 8007932:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f022 0201 	bic.w	r2, r2, #1
 800794c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	683a      	ldr	r2, [r7, #0]
 800795e:	430a      	orrs	r2, r1
 8007960:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 f850 	bl	8007a08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	68fa      	ldr	r2, [r7, #12]
 800796e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2220      	movs	r2, #32
 8007974:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2200      	movs	r2, #0
 800797c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007980:	2300      	movs	r3, #0
}
 8007982:	4618      	mov	r0, r3
 8007984:	3710      	adds	r7, #16
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}

0800798a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800798a:	b580      	push	{r7, lr}
 800798c:	b084      	sub	sp, #16
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
 8007992:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800799a:	2b01      	cmp	r3, #1
 800799c:	d101      	bne.n	80079a2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800799e:	2302      	movs	r3, #2
 80079a0:	e02d      	b.n	80079fe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2201      	movs	r2, #1
 80079a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2224      	movs	r2, #36	@ 0x24
 80079ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	681a      	ldr	r2, [r3, #0]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f022 0201 	bic.w	r2, r2, #1
 80079c8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	683a      	ldr	r2, [r7, #0]
 80079da:	430a      	orrs	r2, r1
 80079dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 f812 	bl	8007a08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	68fa      	ldr	r2, [r7, #12]
 80079ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2220      	movs	r2, #32
 80079f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80079fc:	2300      	movs	r3, #0
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3710      	adds	r7, #16
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
	...

08007a08 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b085      	sub	sp, #20
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d108      	bne.n	8007a2a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2201      	movs	r2, #1
 8007a24:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007a28:	e031      	b.n	8007a8e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007a2a:	2308      	movs	r3, #8
 8007a2c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007a2e:	2308      	movs	r3, #8
 8007a30:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	0e5b      	lsrs	r3, r3, #25
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	f003 0307 	and.w	r3, r3, #7
 8007a40:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	0f5b      	lsrs	r3, r3, #29
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	f003 0307 	and.w	r3, r3, #7
 8007a50:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a52:	7bbb      	ldrb	r3, [r7, #14]
 8007a54:	7b3a      	ldrb	r2, [r7, #12]
 8007a56:	4911      	ldr	r1, [pc, #68]	@ (8007a9c <UARTEx_SetNbDataToProcess+0x94>)
 8007a58:	5c8a      	ldrb	r2, [r1, r2]
 8007a5a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007a5e:	7b3a      	ldrb	r2, [r7, #12]
 8007a60:	490f      	ldr	r1, [pc, #60]	@ (8007aa0 <UARTEx_SetNbDataToProcess+0x98>)
 8007a62:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a64:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a68:	b29a      	uxth	r2, r3
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a70:	7bfb      	ldrb	r3, [r7, #15]
 8007a72:	7b7a      	ldrb	r2, [r7, #13]
 8007a74:	4909      	ldr	r1, [pc, #36]	@ (8007a9c <UARTEx_SetNbDataToProcess+0x94>)
 8007a76:	5c8a      	ldrb	r2, [r1, r2]
 8007a78:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007a7c:	7b7a      	ldrb	r2, [r7, #13]
 8007a7e:	4908      	ldr	r1, [pc, #32]	@ (8007aa0 <UARTEx_SetNbDataToProcess+0x98>)
 8007a80:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a82:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a86:	b29a      	uxth	r2, r3
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007a8e:	bf00      	nop
 8007a90:	3714      	adds	r7, #20
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr
 8007a9a:	bf00      	nop
 8007a9c:	0801b2c4 	.word	0x0801b2c4
 8007aa0:	0801b2cc 	.word	0x0801b2cc

08007aa4 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b088      	sub	sp, #32
 8007aa8:	af04      	add	r7, sp, #16
 8007aaa:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8007aac:	2364      	movs	r3, #100	@ 0x64
 8007aae:	9302      	str	r3, [sp, #8]
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	9301      	str	r3, [sp, #4]
 8007ab4:	f107 030f 	add.w	r3, r7, #15
 8007ab8:	9300      	str	r3, [sp, #0]
 8007aba:	2301      	movs	r3, #1
 8007abc:	2275      	movs	r2, #117	@ 0x75
 8007abe:	21d0      	movs	r1, #208	@ 0xd0
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f7fc f9e9 	bl	8003e98 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8007ac6:	7bfb      	ldrb	r3, [r7, #15]
 8007ac8:	2b68      	cmp	r3, #104	@ 0x68
 8007aca:	d13d      	bne.n	8007b48 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8007acc:	2300      	movs	r3, #0
 8007ace:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8007ad0:	2364      	movs	r3, #100	@ 0x64
 8007ad2:	9302      	str	r3, [sp, #8]
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	9301      	str	r3, [sp, #4]
 8007ad8:	f107 030e 	add.w	r3, r7, #14
 8007adc:	9300      	str	r3, [sp, #0]
 8007ade:	2301      	movs	r3, #1
 8007ae0:	226b      	movs	r2, #107	@ 0x6b
 8007ae2:	21d0      	movs	r1, #208	@ 0xd0
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f7fc f8c3 	bl	8003c70 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8007aea:	2307      	movs	r3, #7
 8007aec:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8007aee:	2364      	movs	r3, #100	@ 0x64
 8007af0:	9302      	str	r3, [sp, #8]
 8007af2:	2301      	movs	r3, #1
 8007af4:	9301      	str	r3, [sp, #4]
 8007af6:	f107 030e 	add.w	r3, r7, #14
 8007afa:	9300      	str	r3, [sp, #0]
 8007afc:	2301      	movs	r3, #1
 8007afe:	2219      	movs	r2, #25
 8007b00:	21d0      	movs	r1, #208	@ 0xd0
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f7fc f8b4 	bl	8003c70 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8007b0c:	2364      	movs	r3, #100	@ 0x64
 8007b0e:	9302      	str	r3, [sp, #8]
 8007b10:	2301      	movs	r3, #1
 8007b12:	9301      	str	r3, [sp, #4]
 8007b14:	f107 030e 	add.w	r3, r7, #14
 8007b18:	9300      	str	r3, [sp, #0]
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	221c      	movs	r2, #28
 8007b1e:	21d0      	movs	r1, #208	@ 0xd0
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f7fc f8a5 	bl	8003c70 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8007b26:	2300      	movs	r3, #0
 8007b28:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8007b2a:	2364      	movs	r3, #100	@ 0x64
 8007b2c:	9302      	str	r3, [sp, #8]
 8007b2e:	2301      	movs	r3, #1
 8007b30:	9301      	str	r3, [sp, #4]
 8007b32:	f107 030e 	add.w	r3, r7, #14
 8007b36:	9300      	str	r3, [sp, #0]
 8007b38:	2301      	movs	r3, #1
 8007b3a:	221b      	movs	r2, #27
 8007b3c:	21d0      	movs	r1, #208	@ 0xd0
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f7fc f896 	bl	8003c70 <HAL_I2C_Mem_Write>
        return 0;
 8007b44:	2300      	movs	r3, #0
 8007b46:	e000      	b.n	8007b4a <MPU6050_Init+0xa6>
    }
    return 1;
 8007b48:	2301      	movs	r3, #1
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3710      	adds	r7, #16
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
 8007b52:	0000      	movs	r0, r0
 8007b54:	0000      	movs	r0, r0
	...

08007b58 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8007b58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b5c:	b094      	sub	sp, #80	@ 0x50
 8007b5e:	af04      	add	r7, sp, #16
 8007b60:	6078      	str	r0, [r7, #4]
 8007b62:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8007b64:	2364      	movs	r3, #100	@ 0x64
 8007b66:	9302      	str	r3, [sp, #8]
 8007b68:	230e      	movs	r3, #14
 8007b6a:	9301      	str	r3, [sp, #4]
 8007b6c:	f107 0308 	add.w	r3, r7, #8
 8007b70:	9300      	str	r3, [sp, #0]
 8007b72:	2301      	movs	r3, #1
 8007b74:	223b      	movs	r2, #59	@ 0x3b
 8007b76:	21d0      	movs	r1, #208	@ 0xd0
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f7fc f98d 	bl	8003e98 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8007b7e:	7a3b      	ldrb	r3, [r7, #8]
 8007b80:	021b      	lsls	r3, r3, #8
 8007b82:	b21a      	sxth	r2, r3
 8007b84:	7a7b      	ldrb	r3, [r7, #9]
 8007b86:	b21b      	sxth	r3, r3
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	b21a      	sxth	r2, r3
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8007b90:	7abb      	ldrb	r3, [r7, #10]
 8007b92:	021b      	lsls	r3, r3, #8
 8007b94:	b21a      	sxth	r2, r3
 8007b96:	7afb      	ldrb	r3, [r7, #11]
 8007b98:	b21b      	sxth	r3, r3
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	b21a      	sxth	r2, r3
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8007ba2:	7b3b      	ldrb	r3, [r7, #12]
 8007ba4:	021b      	lsls	r3, r3, #8
 8007ba6:	b21a      	sxth	r2, r3
 8007ba8:	7b7b      	ldrb	r3, [r7, #13]
 8007baa:	b21b      	sxth	r3, r3
 8007bac:	4313      	orrs	r3, r2
 8007bae:	b21a      	sxth	r2, r3
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8007bb4:	7bbb      	ldrb	r3, [r7, #14]
 8007bb6:	021b      	lsls	r3, r3, #8
 8007bb8:	b21a      	sxth	r2, r3
 8007bba:	7bfb      	ldrb	r3, [r7, #15]
 8007bbc:	b21b      	sxth	r3, r3
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	86fb      	strh	r3, [r7, #54]	@ 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8007bc2:	7c3b      	ldrb	r3, [r7, #16]
 8007bc4:	021b      	lsls	r3, r3, #8
 8007bc6:	b21a      	sxth	r2, r3
 8007bc8:	7c7b      	ldrb	r3, [r7, #17]
 8007bca:	b21b      	sxth	r3, r3
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	b21a      	sxth	r2, r3
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8007bd4:	7cbb      	ldrb	r3, [r7, #18]
 8007bd6:	021b      	lsls	r3, r3, #8
 8007bd8:	b21a      	sxth	r2, r3
 8007bda:	7cfb      	ldrb	r3, [r7, #19]
 8007bdc:	b21b      	sxth	r3, r3
 8007bde:	4313      	orrs	r3, r2
 8007be0:	b21a      	sxth	r2, r3
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8007be6:	7d3b      	ldrb	r3, [r7, #20]
 8007be8:	021b      	lsls	r3, r3, #8
 8007bea:	b21a      	sxth	r2, r3
 8007bec:	7d7b      	ldrb	r3, [r7, #21]
 8007bee:	b21b      	sxth	r3, r3
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	b21a      	sxth	r2, r3
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	849a      	strh	r2, [r3, #36]	@ 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f7f8 fcc8 	bl	8000594 <__aeabi_i2d>
 8007c04:	f04f 0200 	mov.w	r2, #0
 8007c08:	4bbd      	ldr	r3, [pc, #756]	@ (8007f00 <MPU6050_Read_All+0x3a8>)
 8007c0a:	f7f8 fe57 	bl	80008bc <__aeabi_ddiv>
 8007c0e:	4602      	mov	r2, r0
 8007c10:	460b      	mov	r3, r1
 8007c12:	6839      	ldr	r1, [r7, #0]
 8007c14:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7f8 fcb8 	bl	8000594 <__aeabi_i2d>
 8007c24:	f04f 0200 	mov.w	r2, #0
 8007c28:	4bb5      	ldr	r3, [pc, #724]	@ (8007f00 <MPU6050_Read_All+0x3a8>)
 8007c2a:	f7f8 fe47 	bl	80008bc <__aeabi_ddiv>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	460b      	mov	r3, r1
 8007c32:	6839      	ldr	r1, [r7, #0]
 8007c34:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f7f8 fca8 	bl	8000594 <__aeabi_i2d>
 8007c44:	a3a8      	add	r3, pc, #672	@ (adr r3, 8007ee8 <MPU6050_Read_All+0x390>)
 8007c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4a:	f7f8 fe37 	bl	80008bc <__aeabi_ddiv>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	460b      	mov	r3, r1
 8007c52:	6839      	ldr	r1, [r7, #0]
 8007c54:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8007c58:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8007c5c:	ee07 3a90 	vmov	s15, r3
 8007c60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007c64:	eddf 6aa7 	vldr	s13, [pc, #668]	@ 8007f04 <MPU6050_Read_All+0x3ac>
 8007c68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007c6c:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 8007f08 <MPU6050_Read_All+0x3b0>
 8007c70:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8007c80:	4618      	mov	r0, r3
 8007c82:	f7f8 fc87 	bl	8000594 <__aeabi_i2d>
 8007c86:	a39a      	add	r3, pc, #616	@ (adr r3, 8007ef0 <MPU6050_Read_All+0x398>)
 8007c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c8c:	f7f8 fe16 	bl	80008bc <__aeabi_ddiv>
 8007c90:	4602      	mov	r2, r0
 8007c92:	460b      	mov	r3, r1
 8007c94:	6839      	ldr	r1, [r7, #0]
 8007c96:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f7f8 fc77 	bl	8000594 <__aeabi_i2d>
 8007ca6:	a392      	add	r3, pc, #584	@ (adr r3, 8007ef0 <MPU6050_Read_All+0x398>)
 8007ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cac:	f7f8 fe06 	bl	80008bc <__aeabi_ddiv>
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	6839      	ldr	r1, [r7, #0]
 8007cb6:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f7f8 fc67 	bl	8000594 <__aeabi_i2d>
 8007cc6:	a38a      	add	r3, pc, #552	@ (adr r3, 8007ef0 <MPU6050_Read_All+0x398>)
 8007cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ccc:	f7f8 fdf6 	bl	80008bc <__aeabi_ddiv>
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	460b      	mov	r3, r1
 8007cd4:	6839      	ldr	r1, [r7, #0]
 8007cd6:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8007cda:	f7fb f947 	bl	8002f6c <HAL_GetTick>
 8007cde:	4602      	mov	r2, r0
 8007ce0:	4b8a      	ldr	r3, [pc, #552]	@ (8007f0c <MPU6050_Read_All+0x3b4>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	1ad3      	subs	r3, r2, r3
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f7f8 fc44 	bl	8000574 <__aeabi_ui2d>
 8007cec:	f04f 0200 	mov.w	r2, #0
 8007cf0:	4b87      	ldr	r3, [pc, #540]	@ (8007f10 <MPU6050_Read_All+0x3b8>)
 8007cf2:	f7f8 fde3 	bl	80008bc <__aeabi_ddiv>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    timer = HAL_GetTick();
 8007cfe:	f7fb f935 	bl	8002f6c <HAL_GetTick>
 8007d02:	4603      	mov	r3, r0
 8007d04:	4a81      	ldr	r2, [pc, #516]	@ (8007f0c <MPU6050_Read_All+0x3b4>)
 8007d06:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007d0e:	461a      	mov	r2, r3
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007d16:	fb03 f202 	mul.w	r2, r3, r2
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007d20:	4619      	mov	r1, r3
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007d28:	fb01 f303 	mul.w	r3, r1, r3
 8007d2c:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f7f8 fc30 	bl	8000594 <__aeabi_i2d>
 8007d34:	4602      	mov	r2, r0
 8007d36:	460b      	mov	r3, r1
 8007d38:	ec43 2b10 	vmov	d0, r2, r3
 8007d3c:	f012 fe8e 	bl	801aa5c <sqrt>
 8007d40:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 8007d44:	f04f 0200 	mov.w	r2, #0
 8007d48:	f04f 0300 	mov.w	r3, #0
 8007d4c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007d50:	f7f8 fef2 	bl	8000b38 <__aeabi_dcmpeq>
 8007d54:	4603      	mov	r3, r0
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d11f      	bne.n	8007d9a <MPU6050_Read_All+0x242>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007d60:	4618      	mov	r0, r3
 8007d62:	f7f8 fc17 	bl	8000594 <__aeabi_i2d>
 8007d66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007d6a:	f7f8 fda7 	bl	80008bc <__aeabi_ddiv>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	460b      	mov	r3, r1
 8007d72:	ec43 2b17 	vmov	d7, r2, r3
 8007d76:	eeb0 0a47 	vmov.f32	s0, s14
 8007d7a:	eef0 0a67 	vmov.f32	s1, s15
 8007d7e:	f012 fe9b 	bl	801aab8 <atan>
 8007d82:	ec51 0b10 	vmov	r0, r1, d0
 8007d86:	a35c      	add	r3, pc, #368	@ (adr r3, 8007ef8 <MPU6050_Read_All+0x3a0>)
 8007d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d8c:	f7f8 fc6c 	bl	8000668 <__aeabi_dmul>
 8007d90:	4602      	mov	r2, r0
 8007d92:	460b      	mov	r3, r1
 8007d94:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8007d98:	e005      	b.n	8007da6 <MPU6050_Read_All+0x24e>
    }
    else
    {
        roll = 0.0;
 8007d9a:	f04f 0200 	mov.w	r2, #0
 8007d9e:	f04f 0300 	mov.w	r3, #0
 8007da2:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007dac:	425b      	negs	r3, r3
 8007dae:	4618      	mov	r0, r3
 8007db0:	f7f8 fbf0 	bl	8000594 <__aeabi_i2d>
 8007db4:	4682      	mov	sl, r0
 8007db6:	468b      	mov	fp, r1
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7f8 fbe8 	bl	8000594 <__aeabi_i2d>
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	460b      	mov	r3, r1
 8007dc8:	ec43 2b11 	vmov	d1, r2, r3
 8007dcc:	ec4b ab10 	vmov	d0, sl, fp
 8007dd0:	f012 fe42 	bl	801aa58 <atan2>
 8007dd4:	ec51 0b10 	vmov	r0, r1, d0
 8007dd8:	a347      	add	r3, pc, #284	@ (adr r3, 8007ef8 <MPU6050_Read_All+0x3a0>)
 8007dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dde:	f7f8 fc43 	bl	8000668 <__aeabi_dmul>
 8007de2:	4602      	mov	r2, r0
 8007de4:	460b      	mov	r3, r1
 8007de6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8007dea:	f04f 0200 	mov.w	r2, #0
 8007dee:	4b49      	ldr	r3, [pc, #292]	@ (8007f14 <MPU6050_Read_All+0x3bc>)
 8007df0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007df4:	f7f8 feaa 	bl	8000b4c <__aeabi_dcmplt>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d00a      	beq.n	8007e14 <MPU6050_Read_All+0x2bc>
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8007e04:	f04f 0200 	mov.w	r2, #0
 8007e08:	4b43      	ldr	r3, [pc, #268]	@ (8007f18 <MPU6050_Read_All+0x3c0>)
 8007e0a:	f7f8 febd 	bl	8000b88 <__aeabi_dcmpgt>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d114      	bne.n	8007e3e <MPU6050_Read_All+0x2e6>
 8007e14:	f04f 0200 	mov.w	r2, #0
 8007e18:	4b3f      	ldr	r3, [pc, #252]	@ (8007f18 <MPU6050_Read_All+0x3c0>)
 8007e1a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007e1e:	f7f8 feb3 	bl	8000b88 <__aeabi_dcmpgt>
 8007e22:	4603      	mov	r3, r0
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d015      	beq.n	8007e54 <MPU6050_Read_All+0x2fc>
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8007e2e:	f04f 0200 	mov.w	r2, #0
 8007e32:	4b38      	ldr	r3, [pc, #224]	@ (8007f14 <MPU6050_Read_All+0x3bc>)
 8007e34:	f7f8 fe8a 	bl	8000b4c <__aeabi_dcmplt>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d00a      	beq.n	8007e54 <MPU6050_Read_All+0x2fc>
    {
        KalmanY.angle = pitch;
 8007e3e:	4937      	ldr	r1, [pc, #220]	@ (8007f1c <MPU6050_Read_All+0x3c4>)
 8007e40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e44:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8007e48:	6839      	ldr	r1, [r7, #0]
 8007e4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e4e:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8007e52:	e014      	b.n	8007e7e <MPU6050_Read_All+0x326>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 8007e5a:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 8007e5e:	eeb0 1a47 	vmov.f32	s2, s14
 8007e62:	eef0 1a67 	vmov.f32	s3, s15
 8007e66:	ed97 0b06 	vldr	d0, [r7, #24]
 8007e6a:	482c      	ldr	r0, [pc, #176]	@ (8007f1c <MPU6050_Read_All+0x3c4>)
 8007e6c:	f000 f85a 	bl	8007f24 <Kalman_getAngle>
 8007e70:	eeb0 7a40 	vmov.f32	s14, s0
 8007e74:	eef0 7a60 	vmov.f32	s15, s1
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8007e84:	4690      	mov	r8, r2
 8007e86:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8007e8a:	f04f 0200 	mov.w	r2, #0
 8007e8e:	4b22      	ldr	r3, [pc, #136]	@ (8007f18 <MPU6050_Read_All+0x3c0>)
 8007e90:	4640      	mov	r0, r8
 8007e92:	4649      	mov	r1, r9
 8007e94:	f7f8 fe78 	bl	8000b88 <__aeabi_dcmpgt>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d008      	beq.n	8007eb0 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8007ea4:	4614      	mov	r4, r2
 8007ea6:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8007eb6:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 8007eba:	eeb0 1a47 	vmov.f32	s2, s14
 8007ebe:	eef0 1a67 	vmov.f32	s3, s15
 8007ec2:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8007ec6:	4816      	ldr	r0, [pc, #88]	@ (8007f20 <MPU6050_Read_All+0x3c8>)
 8007ec8:	f000 f82c 	bl	8007f24 <Kalman_getAngle>
 8007ecc:	eeb0 7a40 	vmov.f32	s14, s0
 8007ed0:	eef0 7a60 	vmov.f32	s15, s1
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48
}
 8007eda:	bf00      	nop
 8007edc:	3740      	adds	r7, #64	@ 0x40
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ee4:	f3af 8000 	nop.w
 8007ee8:	00000000 	.word	0x00000000
 8007eec:	40cc2900 	.word	0x40cc2900
 8007ef0:	00000000 	.word	0x00000000
 8007ef4:	40606000 	.word	0x40606000
 8007ef8:	1a63c1f8 	.word	0x1a63c1f8
 8007efc:	404ca5dc 	.word	0x404ca5dc
 8007f00:	40d00000 	.word	0x40d00000
 8007f04:	43aa0000 	.word	0x43aa0000
 8007f08:	42121eb8 	.word	0x42121eb8
 8007f0c:	20005500 	.word	0x20005500
 8007f10:	408f4000 	.word	0x408f4000
 8007f14:	c0568000 	.word	0xc0568000
 8007f18:	40568000 	.word	0x40568000
 8007f1c:	20000060 	.word	0x20000060
 8007f20:	20000018 	.word	0x20000018

08007f24 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8007f24:	b5b0      	push	{r4, r5, r7, lr}
 8007f26:	b096      	sub	sp, #88	@ 0x58
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	61f8      	str	r0, [r7, #28]
 8007f2c:	ed87 0b04 	vstr	d0, [r7, #16]
 8007f30:	ed87 1b02 	vstr	d1, [r7, #8]
 8007f34:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8007f38:	69fb      	ldr	r3, [r7, #28]
 8007f3a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007f3e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007f42:	f7f8 f9d9 	bl	80002f8 <__aeabi_dsub>
 8007f46:	4602      	mov	r2, r0
 8007f48:	460b      	mov	r3, r1
 8007f4a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    Kalman->angle += dt * rate;
 8007f4e:	69fb      	ldr	r3, [r7, #28]
 8007f50:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8007f54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007f58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f5c:	f7f8 fb84 	bl	8000668 <__aeabi_dmul>
 8007f60:	4602      	mov	r2, r0
 8007f62:	460b      	mov	r3, r1
 8007f64:	4620      	mov	r0, r4
 8007f66:	4629      	mov	r1, r5
 8007f68:	f7f8 f9c8 	bl	80002fc <__adddf3>
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	460b      	mov	r3, r1
 8007f70:	69f9      	ldr	r1, [r7, #28]
 8007f72:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8007f76:	69fb      	ldr	r3, [r7, #28]
 8007f78:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8007f7c:	69fb      	ldr	r3, [r7, #28]
 8007f7e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8007f82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f86:	f7f8 fb6f 	bl	8000668 <__aeabi_dmul>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	460b      	mov	r3, r1
 8007f8e:	4610      	mov	r0, r2
 8007f90:	4619      	mov	r1, r3
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8007f98:	f7f8 f9ae 	bl	80002f8 <__aeabi_dsub>
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	4610      	mov	r0, r2
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	69fb      	ldr	r3, [r7, #28]
 8007fa6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8007faa:	f7f8 f9a5 	bl	80002f8 <__aeabi_dsub>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	4610      	mov	r0, r2
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	69fb      	ldr	r3, [r7, #28]
 8007fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fbc:	f7f8 f99e 	bl	80002fc <__adddf3>
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	4610      	mov	r0, r2
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fcc:	f7f8 fb4c 	bl	8000668 <__aeabi_dmul>
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	4620      	mov	r0, r4
 8007fd6:	4629      	mov	r1, r5
 8007fd8:	f7f8 f990 	bl	80002fc <__adddf3>
 8007fdc:	4602      	mov	r2, r0
 8007fde:	460b      	mov	r3, r1
 8007fe0:	69f9      	ldr	r1, [r7, #28]
 8007fe2:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8007fe6:	69fb      	ldr	r3, [r7, #28]
 8007fe8:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8007fec:	69fb      	ldr	r3, [r7, #28]
 8007fee:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8007ff2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ff6:	f7f8 fb37 	bl	8000668 <__aeabi_dmul>
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	4620      	mov	r0, r4
 8008000:	4629      	mov	r1, r5
 8008002:	f7f8 f979 	bl	80002f8 <__aeabi_dsub>
 8008006:	4602      	mov	r2, r0
 8008008:	460b      	mov	r3, r1
 800800a:	69f9      	ldr	r1, [r7, #28]
 800800c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8008010:	69fb      	ldr	r3, [r7, #28]
 8008012:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8008016:	69fb      	ldr	r3, [r7, #28]
 8008018:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800801c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008020:	f7f8 fb22 	bl	8000668 <__aeabi_dmul>
 8008024:	4602      	mov	r2, r0
 8008026:	460b      	mov	r3, r1
 8008028:	4620      	mov	r0, r4
 800802a:	4629      	mov	r1, r5
 800802c:	f7f8 f964 	bl	80002f8 <__aeabi_dsub>
 8008030:	4602      	mov	r2, r0
 8008032:	460b      	mov	r3, r1
 8008034:	69f9      	ldr	r1, [r7, #28]
 8008036:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 800803a:	69fb      	ldr	r3, [r7, #28]
 800803c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8008040:	69fb      	ldr	r3, [r7, #28]
 8008042:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8008046:	e9d7 2300 	ldrd	r2, r3, [r7]
 800804a:	f7f8 fb0d 	bl	8000668 <__aeabi_dmul>
 800804e:	4602      	mov	r2, r0
 8008050:	460b      	mov	r3, r1
 8008052:	4620      	mov	r0, r4
 8008054:	4629      	mov	r1, r5
 8008056:	f7f8 f951 	bl	80002fc <__adddf3>
 800805a:	4602      	mov	r2, r0
 800805c:	460b      	mov	r3, r1
 800805e:	69f9      	ldr	r1, [r7, #28]
 8008060:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8008064:	69fb      	ldr	r3, [r7, #28]
 8008066:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800806a:	69fb      	ldr	r3, [r7, #28]
 800806c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008070:	f7f8 f944 	bl	80002fc <__adddf3>
 8008074:	4602      	mov	r2, r0
 8008076:	460b      	mov	r3, r1
 8008078:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 800807c:	69fb      	ldr	r3, [r7, #28]
 800807e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8008082:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008086:	f7f8 fc19 	bl	80008bc <__aeabi_ddiv>
 800808a:	4602      	mov	r2, r0
 800808c:	460b      	mov	r3, r1
 800808e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8008092:	69fb      	ldr	r3, [r7, #28]
 8008094:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8008098:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800809c:	f7f8 fc0e 	bl	80008bc <__aeabi_ddiv>
 80080a0:	4602      	mov	r2, r0
 80080a2:	460b      	mov	r3, r1
 80080a4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    double y = newAngle - Kalman->angle;
 80080a8:	69fb      	ldr	r3, [r7, #28]
 80080aa:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80080ae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80080b2:	f7f8 f921 	bl	80002f8 <__aeabi_dsub>
 80080b6:	4602      	mov	r2, r0
 80080b8:	460b      	mov	r3, r1
 80080ba:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += K[0] * y;
 80080be:	69fb      	ldr	r3, [r7, #28]
 80080c0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80080c4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80080c8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80080cc:	f7f8 facc 	bl	8000668 <__aeabi_dmul>
 80080d0:	4602      	mov	r2, r0
 80080d2:	460b      	mov	r3, r1
 80080d4:	4620      	mov	r0, r4
 80080d6:	4629      	mov	r1, r5
 80080d8:	f7f8 f910 	bl	80002fc <__adddf3>
 80080dc:	4602      	mov	r2, r0
 80080de:	460b      	mov	r3, r1
 80080e0:	69f9      	ldr	r1, [r7, #28]
 80080e2:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 80080e6:	69fb      	ldr	r3, [r7, #28]
 80080e8:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80080ec:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80080f0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80080f4:	f7f8 fab8 	bl	8000668 <__aeabi_dmul>
 80080f8:	4602      	mov	r2, r0
 80080fa:	460b      	mov	r3, r1
 80080fc:	4620      	mov	r0, r4
 80080fe:	4629      	mov	r1, r5
 8008100:	f7f8 f8fc 	bl	80002fc <__adddf3>
 8008104:	4602      	mov	r2, r0
 8008106:	460b      	mov	r3, r1
 8008108:	69f9      	ldr	r1, [r7, #28]
 800810a:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 800810e:	69fb      	ldr	r3, [r7, #28]
 8008110:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8008114:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double P01_temp = Kalman->P[0][1];
 8008118:	69fb      	ldr	r3, [r7, #28]
 800811a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800811e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8008122:	69fb      	ldr	r3, [r7, #28]
 8008124:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8008128:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800812c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008130:	f7f8 fa9a 	bl	8000668 <__aeabi_dmul>
 8008134:	4602      	mov	r2, r0
 8008136:	460b      	mov	r3, r1
 8008138:	4620      	mov	r0, r4
 800813a:	4629      	mov	r1, r5
 800813c:	f7f8 f8dc 	bl	80002f8 <__aeabi_dsub>
 8008140:	4602      	mov	r2, r0
 8008142:	460b      	mov	r3, r1
 8008144:	69f9      	ldr	r1, [r7, #28]
 8008146:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 800814a:	69fb      	ldr	r3, [r7, #28]
 800814c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8008150:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008154:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8008158:	f7f8 fa86 	bl	8000668 <__aeabi_dmul>
 800815c:	4602      	mov	r2, r0
 800815e:	460b      	mov	r3, r1
 8008160:	4620      	mov	r0, r4
 8008162:	4629      	mov	r1, r5
 8008164:	f7f8 f8c8 	bl	80002f8 <__aeabi_dsub>
 8008168:	4602      	mov	r2, r0
 800816a:	460b      	mov	r3, r1
 800816c:	69f9      	ldr	r1, [r7, #28]
 800816e:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8008172:	69fb      	ldr	r3, [r7, #28]
 8008174:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8008178:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800817c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008180:	f7f8 fa72 	bl	8000668 <__aeabi_dmul>
 8008184:	4602      	mov	r2, r0
 8008186:	460b      	mov	r3, r1
 8008188:	4620      	mov	r0, r4
 800818a:	4629      	mov	r1, r5
 800818c:	f7f8 f8b4 	bl	80002f8 <__aeabi_dsub>
 8008190:	4602      	mov	r2, r0
 8008192:	460b      	mov	r3, r1
 8008194:	69f9      	ldr	r1, [r7, #28]
 8008196:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 800819a:	69fb      	ldr	r3, [r7, #28]
 800819c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 80081a0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80081a4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80081a8:	f7f8 fa5e 	bl	8000668 <__aeabi_dmul>
 80081ac:	4602      	mov	r2, r0
 80081ae:	460b      	mov	r3, r1
 80081b0:	4620      	mov	r0, r4
 80081b2:	4629      	mov	r1, r5
 80081b4:	f7f8 f8a0 	bl	80002f8 <__aeabi_dsub>
 80081b8:	4602      	mov	r2, r0
 80081ba:	460b      	mov	r3, r1
 80081bc:	69f9      	ldr	r1, [r7, #28]
 80081be:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 80081c2:	69fb      	ldr	r3, [r7, #28]
 80081c4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80081c8:	ec43 2b17 	vmov	d7, r2, r3
};
 80081cc:	eeb0 0a47 	vmov.f32	s0, s14
 80081d0:	eef0 0a67 	vmov.f32	s1, s15
 80081d4:	3758      	adds	r7, #88	@ 0x58
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080081dc <__NVIC_SetPriority>:
{
 80081dc:	b480      	push	{r7}
 80081de:	b083      	sub	sp, #12
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	4603      	mov	r3, r0
 80081e4:	6039      	str	r1, [r7, #0]
 80081e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80081e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	db0a      	blt.n	8008206 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	b2da      	uxtb	r2, r3
 80081f4:	490c      	ldr	r1, [pc, #48]	@ (8008228 <__NVIC_SetPriority+0x4c>)
 80081f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081fa:	0112      	lsls	r2, r2, #4
 80081fc:	b2d2      	uxtb	r2, r2
 80081fe:	440b      	add	r3, r1
 8008200:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008204:	e00a      	b.n	800821c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	b2da      	uxtb	r2, r3
 800820a:	4908      	ldr	r1, [pc, #32]	@ (800822c <__NVIC_SetPriority+0x50>)
 800820c:	79fb      	ldrb	r3, [r7, #7]
 800820e:	f003 030f 	and.w	r3, r3, #15
 8008212:	3b04      	subs	r3, #4
 8008214:	0112      	lsls	r2, r2, #4
 8008216:	b2d2      	uxtb	r2, r2
 8008218:	440b      	add	r3, r1
 800821a:	761a      	strb	r2, [r3, #24]
}
 800821c:	bf00      	nop
 800821e:	370c      	adds	r7, #12
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr
 8008228:	e000e100 	.word	0xe000e100
 800822c:	e000ed00 	.word	0xe000ed00

08008230 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008230:	b580      	push	{r7, lr}
 8008232:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008234:	4b05      	ldr	r3, [pc, #20]	@ (800824c <SysTick_Handler+0x1c>)
 8008236:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008238:	f001 fd40 	bl	8009cbc <xTaskGetSchedulerState>
 800823c:	4603      	mov	r3, r0
 800823e:	2b01      	cmp	r3, #1
 8008240:	d001      	beq.n	8008246 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008242:	f002 fb39 	bl	800a8b8 <xPortSysTickHandler>
  }
}
 8008246:	bf00      	nop
 8008248:	bd80      	pop	{r7, pc}
 800824a:	bf00      	nop
 800824c:	e000e010 	.word	0xe000e010

08008250 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008250:	b580      	push	{r7, lr}
 8008252:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008254:	2100      	movs	r1, #0
 8008256:	f06f 0004 	mvn.w	r0, #4
 800825a:	f7ff ffbf 	bl	80081dc <__NVIC_SetPriority>
#endif
}
 800825e:	bf00      	nop
 8008260:	bd80      	pop	{r7, pc}
	...

08008264 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008264:	b480      	push	{r7}
 8008266:	b083      	sub	sp, #12
 8008268:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800826a:	f3ef 8305 	mrs	r3, IPSR
 800826e:	603b      	str	r3, [r7, #0]
  return(result);
 8008270:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008272:	2b00      	cmp	r3, #0
 8008274:	d003      	beq.n	800827e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008276:	f06f 0305 	mvn.w	r3, #5
 800827a:	607b      	str	r3, [r7, #4]
 800827c:	e00c      	b.n	8008298 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800827e:	4b0a      	ldr	r3, [pc, #40]	@ (80082a8 <osKernelInitialize+0x44>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d105      	bne.n	8008292 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008286:	4b08      	ldr	r3, [pc, #32]	@ (80082a8 <osKernelInitialize+0x44>)
 8008288:	2201      	movs	r2, #1
 800828a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800828c:	2300      	movs	r3, #0
 800828e:	607b      	str	r3, [r7, #4]
 8008290:	e002      	b.n	8008298 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008292:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008296:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008298:	687b      	ldr	r3, [r7, #4]
}
 800829a:	4618      	mov	r0, r3
 800829c:	370c      	adds	r7, #12
 800829e:	46bd      	mov	sp, r7
 80082a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a4:	4770      	bx	lr
 80082a6:	bf00      	nop
 80082a8:	20005504 	.word	0x20005504

080082ac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b082      	sub	sp, #8
 80082b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082b2:	f3ef 8305 	mrs	r3, IPSR
 80082b6:	603b      	str	r3, [r7, #0]
  return(result);
 80082b8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d003      	beq.n	80082c6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80082be:	f06f 0305 	mvn.w	r3, #5
 80082c2:	607b      	str	r3, [r7, #4]
 80082c4:	e010      	b.n	80082e8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80082c6:	4b0b      	ldr	r3, [pc, #44]	@ (80082f4 <osKernelStart+0x48>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d109      	bne.n	80082e2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80082ce:	f7ff ffbf 	bl	8008250 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80082d2:	4b08      	ldr	r3, [pc, #32]	@ (80082f4 <osKernelStart+0x48>)
 80082d4:	2202      	movs	r2, #2
 80082d6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80082d8:	f001 f87a 	bl	80093d0 <vTaskStartScheduler>
      stat = osOK;
 80082dc:	2300      	movs	r3, #0
 80082de:	607b      	str	r3, [r7, #4]
 80082e0:	e002      	b.n	80082e8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80082e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80082e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80082e8:	687b      	ldr	r3, [r7, #4]
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3708      	adds	r7, #8
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}
 80082f2:	bf00      	nop
 80082f4:	20005504 	.word	0x20005504

080082f8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b08e      	sub	sp, #56	@ 0x38
 80082fc:	af04      	add	r7, sp, #16
 80082fe:	60f8      	str	r0, [r7, #12]
 8008300:	60b9      	str	r1, [r7, #8]
 8008302:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008304:	2300      	movs	r3, #0
 8008306:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008308:	f3ef 8305 	mrs	r3, IPSR
 800830c:	617b      	str	r3, [r7, #20]
  return(result);
 800830e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008310:	2b00      	cmp	r3, #0
 8008312:	d17e      	bne.n	8008412 <osThreadNew+0x11a>
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d07b      	beq.n	8008412 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800831a:	2380      	movs	r3, #128	@ 0x80
 800831c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800831e:	2318      	movs	r3, #24
 8008320:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008322:	2300      	movs	r3, #0
 8008324:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008326:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800832a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d045      	beq.n	80083be <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d002      	beq.n	8008340 <osThreadNew+0x48>
        name = attr->name;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	699b      	ldr	r3, [r3, #24]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d002      	beq.n	800834e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	699b      	ldr	r3, [r3, #24]
 800834c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800834e:	69fb      	ldr	r3, [r7, #28]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d008      	beq.n	8008366 <osThreadNew+0x6e>
 8008354:	69fb      	ldr	r3, [r7, #28]
 8008356:	2b38      	cmp	r3, #56	@ 0x38
 8008358:	d805      	bhi.n	8008366 <osThreadNew+0x6e>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	f003 0301 	and.w	r3, r3, #1
 8008362:	2b00      	cmp	r3, #0
 8008364:	d001      	beq.n	800836a <osThreadNew+0x72>
        return (NULL);
 8008366:	2300      	movs	r3, #0
 8008368:	e054      	b.n	8008414 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	695b      	ldr	r3, [r3, #20]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d003      	beq.n	800837a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	695b      	ldr	r3, [r3, #20]
 8008376:	089b      	lsrs	r3, r3, #2
 8008378:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	689b      	ldr	r3, [r3, #8]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d00e      	beq.n	80083a0 <osThreadNew+0xa8>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	68db      	ldr	r3, [r3, #12]
 8008386:	2b5b      	cmp	r3, #91	@ 0x5b
 8008388:	d90a      	bls.n	80083a0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800838e:	2b00      	cmp	r3, #0
 8008390:	d006      	beq.n	80083a0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	695b      	ldr	r3, [r3, #20]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d002      	beq.n	80083a0 <osThreadNew+0xa8>
        mem = 1;
 800839a:	2301      	movs	r3, #1
 800839c:	61bb      	str	r3, [r7, #24]
 800839e:	e010      	b.n	80083c2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	689b      	ldr	r3, [r3, #8]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d10c      	bne.n	80083c2 <osThreadNew+0xca>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	68db      	ldr	r3, [r3, #12]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d108      	bne.n	80083c2 <osThreadNew+0xca>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	691b      	ldr	r3, [r3, #16]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d104      	bne.n	80083c2 <osThreadNew+0xca>
          mem = 0;
 80083b8:	2300      	movs	r3, #0
 80083ba:	61bb      	str	r3, [r7, #24]
 80083bc:	e001      	b.n	80083c2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80083be:	2300      	movs	r3, #0
 80083c0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80083c2:	69bb      	ldr	r3, [r7, #24]
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d110      	bne.n	80083ea <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80083d0:	9202      	str	r2, [sp, #8]
 80083d2:	9301      	str	r3, [sp, #4]
 80083d4:	69fb      	ldr	r3, [r7, #28]
 80083d6:	9300      	str	r3, [sp, #0]
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	6a3a      	ldr	r2, [r7, #32]
 80083dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80083de:	68f8      	ldr	r0, [r7, #12]
 80083e0:	f000 fe1a 	bl	8009018 <xTaskCreateStatic>
 80083e4:	4603      	mov	r3, r0
 80083e6:	613b      	str	r3, [r7, #16]
 80083e8:	e013      	b.n	8008412 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80083ea:	69bb      	ldr	r3, [r7, #24]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d110      	bne.n	8008412 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80083f0:	6a3b      	ldr	r3, [r7, #32]
 80083f2:	b29a      	uxth	r2, r3
 80083f4:	f107 0310 	add.w	r3, r7, #16
 80083f8:	9301      	str	r3, [sp, #4]
 80083fa:	69fb      	ldr	r3, [r7, #28]
 80083fc:	9300      	str	r3, [sp, #0]
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008402:	68f8      	ldr	r0, [r7, #12]
 8008404:	f000 fe68 	bl	80090d8 <xTaskCreate>
 8008408:	4603      	mov	r3, r0
 800840a:	2b01      	cmp	r3, #1
 800840c:	d001      	beq.n	8008412 <osThreadNew+0x11a>
            hTask = NULL;
 800840e:	2300      	movs	r3, #0
 8008410:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008412:	693b      	ldr	r3, [r7, #16]
}
 8008414:	4618      	mov	r0, r3
 8008416:	3728      	adds	r7, #40	@ 0x28
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}

0800841c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800841c:	b580      	push	{r7, lr}
 800841e:	b084      	sub	sp, #16
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008424:	f3ef 8305 	mrs	r3, IPSR
 8008428:	60bb      	str	r3, [r7, #8]
  return(result);
 800842a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800842c:	2b00      	cmp	r3, #0
 800842e:	d003      	beq.n	8008438 <osDelay+0x1c>
    stat = osErrorISR;
 8008430:	f06f 0305 	mvn.w	r3, #5
 8008434:	60fb      	str	r3, [r7, #12]
 8008436:	e007      	b.n	8008448 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008438:	2300      	movs	r3, #0
 800843a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d002      	beq.n	8008448 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 ff8e 	bl	8009364 <vTaskDelay>
    }
  }

  return (stat);
 8008448:	68fb      	ldr	r3, [r7, #12]
}
 800844a:	4618      	mov	r0, r3
 800844c:	3710      	adds	r7, #16
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
	...

08008454 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008454:	b480      	push	{r7}
 8008456:	b085      	sub	sp, #20
 8008458:	af00      	add	r7, sp, #0
 800845a:	60f8      	str	r0, [r7, #12]
 800845c:	60b9      	str	r1, [r7, #8]
 800845e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	4a07      	ldr	r2, [pc, #28]	@ (8008480 <vApplicationGetIdleTaskMemory+0x2c>)
 8008464:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	4a06      	ldr	r2, [pc, #24]	@ (8008484 <vApplicationGetIdleTaskMemory+0x30>)
 800846a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2280      	movs	r2, #128	@ 0x80
 8008470:	601a      	str	r2, [r3, #0]
}
 8008472:	bf00      	nop
 8008474:	3714      	adds	r7, #20
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr
 800847e:	bf00      	nop
 8008480:	20005508 	.word	0x20005508
 8008484:	20005564 	.word	0x20005564

08008488 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008488:	b480      	push	{r7}
 800848a:	b085      	sub	sp, #20
 800848c:	af00      	add	r7, sp, #0
 800848e:	60f8      	str	r0, [r7, #12]
 8008490:	60b9      	str	r1, [r7, #8]
 8008492:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	4a07      	ldr	r2, [pc, #28]	@ (80084b4 <vApplicationGetTimerTaskMemory+0x2c>)
 8008498:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	4a06      	ldr	r2, [pc, #24]	@ (80084b8 <vApplicationGetTimerTaskMemory+0x30>)
 800849e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80084a6:	601a      	str	r2, [r3, #0]
}
 80084a8:	bf00      	nop
 80084aa:	3714      	adds	r7, #20
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr
 80084b4:	20005764 	.word	0x20005764
 80084b8:	200057c0 	.word	0x200057c0

080084bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80084bc:	b480      	push	{r7}
 80084be:	b083      	sub	sp, #12
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f103 0208 	add.w	r2, r3, #8
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80084d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f103 0208 	add.w	r2, r3, #8
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f103 0208 	add.w	r2, r3, #8
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2200      	movs	r2, #0
 80084ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80084f0:	bf00      	nop
 80084f2:	370c      	adds	r7, #12
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr

080084fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80084fc:	b480      	push	{r7}
 80084fe:	b083      	sub	sp, #12
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2200      	movs	r2, #0
 8008508:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800850a:	bf00      	nop
 800850c:	370c      	adds	r7, #12
 800850e:	46bd      	mov	sp, r7
 8008510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008514:	4770      	bx	lr

08008516 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008516:	b480      	push	{r7}
 8008518:	b085      	sub	sp, #20
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
 800851e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	68fa      	ldr	r2, [r7, #12]
 800852a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	689a      	ldr	r2, [r3, #8]
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	689b      	ldr	r3, [r3, #8]
 8008538:	683a      	ldr	r2, [r7, #0]
 800853a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	683a      	ldr	r2, [r7, #0]
 8008540:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	1c5a      	adds	r2, r3, #1
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	601a      	str	r2, [r3, #0]
}
 8008552:	bf00      	nop
 8008554:	3714      	adds	r7, #20
 8008556:	46bd      	mov	sp, r7
 8008558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855c:	4770      	bx	lr

0800855e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800855e:	b480      	push	{r7}
 8008560:	b085      	sub	sp, #20
 8008562:	af00      	add	r7, sp, #0
 8008564:	6078      	str	r0, [r7, #4]
 8008566:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008574:	d103      	bne.n	800857e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	691b      	ldr	r3, [r3, #16]
 800857a:	60fb      	str	r3, [r7, #12]
 800857c:	e00c      	b.n	8008598 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	3308      	adds	r3, #8
 8008582:	60fb      	str	r3, [r7, #12]
 8008584:	e002      	b.n	800858c <vListInsert+0x2e>
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	60fb      	str	r3, [r7, #12]
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	68ba      	ldr	r2, [r7, #8]
 8008594:	429a      	cmp	r2, r3
 8008596:	d2f6      	bcs.n	8008586 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	685a      	ldr	r2, [r3, #4]
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	683a      	ldr	r2, [r7, #0]
 80085a6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	68fa      	ldr	r2, [r7, #12]
 80085ac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	683a      	ldr	r2, [r7, #0]
 80085b2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	1c5a      	adds	r2, r3, #1
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	601a      	str	r2, [r3, #0]
}
 80085c4:	bf00      	nop
 80085c6:	3714      	adds	r7, #20
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr

080085d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80085d0:	b480      	push	{r7}
 80085d2:	b085      	sub	sp, #20
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	691b      	ldr	r3, [r3, #16]
 80085dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	6892      	ldr	r2, [r2, #8]
 80085e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	689b      	ldr	r3, [r3, #8]
 80085ec:	687a      	ldr	r2, [r7, #4]
 80085ee:	6852      	ldr	r2, [r2, #4]
 80085f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d103      	bne.n	8008604 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	689a      	ldr	r2, [r3, #8]
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2200      	movs	r2, #0
 8008608:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	1e5a      	subs	r2, r3, #1
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
}
 8008618:	4618      	mov	r0, r3
 800861a:	3714      	adds	r7, #20
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr

08008624 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b084      	sub	sp, #16
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d10b      	bne.n	8008650 <xQueueGenericReset+0x2c>
	__asm volatile
 8008638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800863c:	f383 8811 	msr	BASEPRI, r3
 8008640:	f3bf 8f6f 	isb	sy
 8008644:	f3bf 8f4f 	dsb	sy
 8008648:	60bb      	str	r3, [r7, #8]
}
 800864a:	bf00      	nop
 800864c:	bf00      	nop
 800864e:	e7fd      	b.n	800864c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008650:	f002 f8a2 	bl	800a798 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681a      	ldr	r2, [r3, #0]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800865c:	68f9      	ldr	r1, [r7, #12]
 800865e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008660:	fb01 f303 	mul.w	r3, r1, r3
 8008664:	441a      	add	r2, r3
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2200      	movs	r2, #0
 800866e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681a      	ldr	r2, [r3, #0]
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008680:	3b01      	subs	r3, #1
 8008682:	68f9      	ldr	r1, [r7, #12]
 8008684:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008686:	fb01 f303 	mul.w	r3, r1, r3
 800868a:	441a      	add	r2, r3
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	22ff      	movs	r2, #255	@ 0xff
 8008694:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	22ff      	movs	r2, #255	@ 0xff
 800869c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d114      	bne.n	80086d0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	691b      	ldr	r3, [r3, #16]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d01a      	beq.n	80086e4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	3310      	adds	r3, #16
 80086b2:	4618      	mov	r0, r3
 80086b4:	f001 f91a 	bl	80098ec <xTaskRemoveFromEventList>
 80086b8:	4603      	mov	r3, r0
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d012      	beq.n	80086e4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80086be:	4b0d      	ldr	r3, [pc, #52]	@ (80086f4 <xQueueGenericReset+0xd0>)
 80086c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086c4:	601a      	str	r2, [r3, #0]
 80086c6:	f3bf 8f4f 	dsb	sy
 80086ca:	f3bf 8f6f 	isb	sy
 80086ce:	e009      	b.n	80086e4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	3310      	adds	r3, #16
 80086d4:	4618      	mov	r0, r3
 80086d6:	f7ff fef1 	bl	80084bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	3324      	adds	r3, #36	@ 0x24
 80086de:	4618      	mov	r0, r3
 80086e0:	f7ff feec 	bl	80084bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80086e4:	f002 f88a 	bl	800a7fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80086e8:	2301      	movs	r3, #1
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3710      	adds	r7, #16
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
 80086f2:	bf00      	nop
 80086f4:	e000ed04 	.word	0xe000ed04

080086f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b08e      	sub	sp, #56	@ 0x38
 80086fc:	af02      	add	r7, sp, #8
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	607a      	str	r2, [r7, #4]
 8008704:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d10b      	bne.n	8008724 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800870c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008710:	f383 8811 	msr	BASEPRI, r3
 8008714:	f3bf 8f6f 	isb	sy
 8008718:	f3bf 8f4f 	dsb	sy
 800871c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800871e:	bf00      	nop
 8008720:	bf00      	nop
 8008722:	e7fd      	b.n	8008720 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d10b      	bne.n	8008742 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800872a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800872e:	f383 8811 	msr	BASEPRI, r3
 8008732:	f3bf 8f6f 	isb	sy
 8008736:	f3bf 8f4f 	dsb	sy
 800873a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800873c:	bf00      	nop
 800873e:	bf00      	nop
 8008740:	e7fd      	b.n	800873e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d002      	beq.n	800874e <xQueueGenericCreateStatic+0x56>
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d001      	beq.n	8008752 <xQueueGenericCreateStatic+0x5a>
 800874e:	2301      	movs	r3, #1
 8008750:	e000      	b.n	8008754 <xQueueGenericCreateStatic+0x5c>
 8008752:	2300      	movs	r3, #0
 8008754:	2b00      	cmp	r3, #0
 8008756:	d10b      	bne.n	8008770 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800875c:	f383 8811 	msr	BASEPRI, r3
 8008760:	f3bf 8f6f 	isb	sy
 8008764:	f3bf 8f4f 	dsb	sy
 8008768:	623b      	str	r3, [r7, #32]
}
 800876a:	bf00      	nop
 800876c:	bf00      	nop
 800876e:	e7fd      	b.n	800876c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d102      	bne.n	800877c <xQueueGenericCreateStatic+0x84>
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d101      	bne.n	8008780 <xQueueGenericCreateStatic+0x88>
 800877c:	2301      	movs	r3, #1
 800877e:	e000      	b.n	8008782 <xQueueGenericCreateStatic+0x8a>
 8008780:	2300      	movs	r3, #0
 8008782:	2b00      	cmp	r3, #0
 8008784:	d10b      	bne.n	800879e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800878a:	f383 8811 	msr	BASEPRI, r3
 800878e:	f3bf 8f6f 	isb	sy
 8008792:	f3bf 8f4f 	dsb	sy
 8008796:	61fb      	str	r3, [r7, #28]
}
 8008798:	bf00      	nop
 800879a:	bf00      	nop
 800879c:	e7fd      	b.n	800879a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800879e:	2350      	movs	r3, #80	@ 0x50
 80087a0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	2b50      	cmp	r3, #80	@ 0x50
 80087a6:	d00b      	beq.n	80087c0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80087a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ac:	f383 8811 	msr	BASEPRI, r3
 80087b0:	f3bf 8f6f 	isb	sy
 80087b4:	f3bf 8f4f 	dsb	sy
 80087b8:	61bb      	str	r3, [r7, #24]
}
 80087ba:	bf00      	nop
 80087bc:	bf00      	nop
 80087be:	e7fd      	b.n	80087bc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80087c0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80087c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d00d      	beq.n	80087e8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80087cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087ce:	2201      	movs	r2, #1
 80087d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80087d4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80087d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087da:	9300      	str	r3, [sp, #0]
 80087dc:	4613      	mov	r3, r2
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	68b9      	ldr	r1, [r7, #8]
 80087e2:	68f8      	ldr	r0, [r7, #12]
 80087e4:	f000 f805 	bl	80087f2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80087e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3730      	adds	r7, #48	@ 0x30
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}

080087f2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80087f2:	b580      	push	{r7, lr}
 80087f4:	b084      	sub	sp, #16
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	60f8      	str	r0, [r7, #12]
 80087fa:	60b9      	str	r1, [r7, #8]
 80087fc:	607a      	str	r2, [r7, #4]
 80087fe:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d103      	bne.n	800880e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008806:	69bb      	ldr	r3, [r7, #24]
 8008808:	69ba      	ldr	r2, [r7, #24]
 800880a:	601a      	str	r2, [r3, #0]
 800880c:	e002      	b.n	8008814 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800880e:	69bb      	ldr	r3, [r7, #24]
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008814:	69bb      	ldr	r3, [r7, #24]
 8008816:	68fa      	ldr	r2, [r7, #12]
 8008818:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800881a:	69bb      	ldr	r3, [r7, #24]
 800881c:	68ba      	ldr	r2, [r7, #8]
 800881e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008820:	2101      	movs	r1, #1
 8008822:	69b8      	ldr	r0, [r7, #24]
 8008824:	f7ff fefe 	bl	8008624 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008828:	69bb      	ldr	r3, [r7, #24]
 800882a:	78fa      	ldrb	r2, [r7, #3]
 800882c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008830:	bf00      	nop
 8008832:	3710      	adds	r7, #16
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}

08008838 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b08e      	sub	sp, #56	@ 0x38
 800883c:	af00      	add	r7, sp, #0
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	60b9      	str	r1, [r7, #8]
 8008842:	607a      	str	r2, [r7, #4]
 8008844:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008846:	2300      	movs	r3, #0
 8008848:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800884e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008850:	2b00      	cmp	r3, #0
 8008852:	d10b      	bne.n	800886c <xQueueGenericSend+0x34>
	__asm volatile
 8008854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008858:	f383 8811 	msr	BASEPRI, r3
 800885c:	f3bf 8f6f 	isb	sy
 8008860:	f3bf 8f4f 	dsb	sy
 8008864:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008866:	bf00      	nop
 8008868:	bf00      	nop
 800886a:	e7fd      	b.n	8008868 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d103      	bne.n	800887a <xQueueGenericSend+0x42>
 8008872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008876:	2b00      	cmp	r3, #0
 8008878:	d101      	bne.n	800887e <xQueueGenericSend+0x46>
 800887a:	2301      	movs	r3, #1
 800887c:	e000      	b.n	8008880 <xQueueGenericSend+0x48>
 800887e:	2300      	movs	r3, #0
 8008880:	2b00      	cmp	r3, #0
 8008882:	d10b      	bne.n	800889c <xQueueGenericSend+0x64>
	__asm volatile
 8008884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008888:	f383 8811 	msr	BASEPRI, r3
 800888c:	f3bf 8f6f 	isb	sy
 8008890:	f3bf 8f4f 	dsb	sy
 8008894:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008896:	bf00      	nop
 8008898:	bf00      	nop
 800889a:	e7fd      	b.n	8008898 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	2b02      	cmp	r3, #2
 80088a0:	d103      	bne.n	80088aa <xQueueGenericSend+0x72>
 80088a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088a6:	2b01      	cmp	r3, #1
 80088a8:	d101      	bne.n	80088ae <xQueueGenericSend+0x76>
 80088aa:	2301      	movs	r3, #1
 80088ac:	e000      	b.n	80088b0 <xQueueGenericSend+0x78>
 80088ae:	2300      	movs	r3, #0
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d10b      	bne.n	80088cc <xQueueGenericSend+0x94>
	__asm volatile
 80088b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088b8:	f383 8811 	msr	BASEPRI, r3
 80088bc:	f3bf 8f6f 	isb	sy
 80088c0:	f3bf 8f4f 	dsb	sy
 80088c4:	623b      	str	r3, [r7, #32]
}
 80088c6:	bf00      	nop
 80088c8:	bf00      	nop
 80088ca:	e7fd      	b.n	80088c8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80088cc:	f001 f9f6 	bl	8009cbc <xTaskGetSchedulerState>
 80088d0:	4603      	mov	r3, r0
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d102      	bne.n	80088dc <xQueueGenericSend+0xa4>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d101      	bne.n	80088e0 <xQueueGenericSend+0xa8>
 80088dc:	2301      	movs	r3, #1
 80088de:	e000      	b.n	80088e2 <xQueueGenericSend+0xaa>
 80088e0:	2300      	movs	r3, #0
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d10b      	bne.n	80088fe <xQueueGenericSend+0xc6>
	__asm volatile
 80088e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088ea:	f383 8811 	msr	BASEPRI, r3
 80088ee:	f3bf 8f6f 	isb	sy
 80088f2:	f3bf 8f4f 	dsb	sy
 80088f6:	61fb      	str	r3, [r7, #28]
}
 80088f8:	bf00      	nop
 80088fa:	bf00      	nop
 80088fc:	e7fd      	b.n	80088fa <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80088fe:	f001 ff4b 	bl	800a798 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008904:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008908:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800890a:	429a      	cmp	r2, r3
 800890c:	d302      	bcc.n	8008914 <xQueueGenericSend+0xdc>
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	2b02      	cmp	r3, #2
 8008912:	d129      	bne.n	8008968 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008914:	683a      	ldr	r2, [r7, #0]
 8008916:	68b9      	ldr	r1, [r7, #8]
 8008918:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800891a:	f000 fa0f 	bl	8008d3c <prvCopyDataToQueue>
 800891e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008924:	2b00      	cmp	r3, #0
 8008926:	d010      	beq.n	800894a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800892a:	3324      	adds	r3, #36	@ 0x24
 800892c:	4618      	mov	r0, r3
 800892e:	f000 ffdd 	bl	80098ec <xTaskRemoveFromEventList>
 8008932:	4603      	mov	r3, r0
 8008934:	2b00      	cmp	r3, #0
 8008936:	d013      	beq.n	8008960 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008938:	4b3f      	ldr	r3, [pc, #252]	@ (8008a38 <xQueueGenericSend+0x200>)
 800893a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800893e:	601a      	str	r2, [r3, #0]
 8008940:	f3bf 8f4f 	dsb	sy
 8008944:	f3bf 8f6f 	isb	sy
 8008948:	e00a      	b.n	8008960 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800894a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800894c:	2b00      	cmp	r3, #0
 800894e:	d007      	beq.n	8008960 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008950:	4b39      	ldr	r3, [pc, #228]	@ (8008a38 <xQueueGenericSend+0x200>)
 8008952:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008956:	601a      	str	r2, [r3, #0]
 8008958:	f3bf 8f4f 	dsb	sy
 800895c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008960:	f001 ff4c 	bl	800a7fc <vPortExitCritical>
				return pdPASS;
 8008964:	2301      	movs	r3, #1
 8008966:	e063      	b.n	8008a30 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d103      	bne.n	8008976 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800896e:	f001 ff45 	bl	800a7fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008972:	2300      	movs	r3, #0
 8008974:	e05c      	b.n	8008a30 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008978:	2b00      	cmp	r3, #0
 800897a:	d106      	bne.n	800898a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800897c:	f107 0314 	add.w	r3, r7, #20
 8008980:	4618      	mov	r0, r3
 8008982:	f001 f83f 	bl	8009a04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008986:	2301      	movs	r3, #1
 8008988:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800898a:	f001 ff37 	bl	800a7fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800898e:	f000 fd87 	bl	80094a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008992:	f001 ff01 	bl	800a798 <vPortEnterCritical>
 8008996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008998:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800899c:	b25b      	sxtb	r3, r3
 800899e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80089a2:	d103      	bne.n	80089ac <xQueueGenericSend+0x174>
 80089a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089a6:	2200      	movs	r2, #0
 80089a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80089ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80089b2:	b25b      	sxtb	r3, r3
 80089b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80089b8:	d103      	bne.n	80089c2 <xQueueGenericSend+0x18a>
 80089ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089bc:	2200      	movs	r2, #0
 80089be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80089c2:	f001 ff1b 	bl	800a7fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80089c6:	1d3a      	adds	r2, r7, #4
 80089c8:	f107 0314 	add.w	r3, r7, #20
 80089cc:	4611      	mov	r1, r2
 80089ce:	4618      	mov	r0, r3
 80089d0:	f001 f82e 	bl	8009a30 <xTaskCheckForTimeOut>
 80089d4:	4603      	mov	r3, r0
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d124      	bne.n	8008a24 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80089da:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80089dc:	f000 faa6 	bl	8008f2c <prvIsQueueFull>
 80089e0:	4603      	mov	r3, r0
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d018      	beq.n	8008a18 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80089e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e8:	3310      	adds	r3, #16
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	4611      	mov	r1, r2
 80089ee:	4618      	mov	r0, r3
 80089f0:	f000 ff2a 	bl	8009848 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80089f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80089f6:	f000 fa31 	bl	8008e5c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80089fa:	f000 fd5f 	bl	80094bc <xTaskResumeAll>
 80089fe:	4603      	mov	r3, r0
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	f47f af7c 	bne.w	80088fe <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008a06:	4b0c      	ldr	r3, [pc, #48]	@ (8008a38 <xQueueGenericSend+0x200>)
 8008a08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a0c:	601a      	str	r2, [r3, #0]
 8008a0e:	f3bf 8f4f 	dsb	sy
 8008a12:	f3bf 8f6f 	isb	sy
 8008a16:	e772      	b.n	80088fe <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008a18:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a1a:	f000 fa1f 	bl	8008e5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a1e:	f000 fd4d 	bl	80094bc <xTaskResumeAll>
 8008a22:	e76c      	b.n	80088fe <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008a24:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a26:	f000 fa19 	bl	8008e5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008a2a:	f000 fd47 	bl	80094bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008a2e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3738      	adds	r7, #56	@ 0x38
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}
 8008a38:	e000ed04 	.word	0xe000ed04

08008a3c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b090      	sub	sp, #64	@ 0x40
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	60f8      	str	r0, [r7, #12]
 8008a44:	60b9      	str	r1, [r7, #8]
 8008a46:	607a      	str	r2, [r7, #4]
 8008a48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d10b      	bne.n	8008a6c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a58:	f383 8811 	msr	BASEPRI, r3
 8008a5c:	f3bf 8f6f 	isb	sy
 8008a60:	f3bf 8f4f 	dsb	sy
 8008a64:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008a66:	bf00      	nop
 8008a68:	bf00      	nop
 8008a6a:	e7fd      	b.n	8008a68 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d103      	bne.n	8008a7a <xQueueGenericSendFromISR+0x3e>
 8008a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d101      	bne.n	8008a7e <xQueueGenericSendFromISR+0x42>
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	e000      	b.n	8008a80 <xQueueGenericSendFromISR+0x44>
 8008a7e:	2300      	movs	r3, #0
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d10b      	bne.n	8008a9c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a88:	f383 8811 	msr	BASEPRI, r3
 8008a8c:	f3bf 8f6f 	isb	sy
 8008a90:	f3bf 8f4f 	dsb	sy
 8008a94:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008a96:	bf00      	nop
 8008a98:	bf00      	nop
 8008a9a:	e7fd      	b.n	8008a98 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	2b02      	cmp	r3, #2
 8008aa0:	d103      	bne.n	8008aaa <xQueueGenericSendFromISR+0x6e>
 8008aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	d101      	bne.n	8008aae <xQueueGenericSendFromISR+0x72>
 8008aaa:	2301      	movs	r3, #1
 8008aac:	e000      	b.n	8008ab0 <xQueueGenericSendFromISR+0x74>
 8008aae:	2300      	movs	r3, #0
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d10b      	bne.n	8008acc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ab8:	f383 8811 	msr	BASEPRI, r3
 8008abc:	f3bf 8f6f 	isb	sy
 8008ac0:	f3bf 8f4f 	dsb	sy
 8008ac4:	623b      	str	r3, [r7, #32]
}
 8008ac6:	bf00      	nop
 8008ac8:	bf00      	nop
 8008aca:	e7fd      	b.n	8008ac8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008acc:	f001 ff44 	bl	800a958 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008ad0:	f3ef 8211 	mrs	r2, BASEPRI
 8008ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ad8:	f383 8811 	msr	BASEPRI, r3
 8008adc:	f3bf 8f6f 	isb	sy
 8008ae0:	f3bf 8f4f 	dsb	sy
 8008ae4:	61fa      	str	r2, [r7, #28]
 8008ae6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008ae8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008aea:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008af2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d302      	bcc.n	8008afe <xQueueGenericSendFromISR+0xc2>
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	2b02      	cmp	r3, #2
 8008afc:	d12f      	bne.n	8008b5e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b00:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b04:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008b0e:	683a      	ldr	r2, [r7, #0]
 8008b10:	68b9      	ldr	r1, [r7, #8]
 8008b12:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008b14:	f000 f912 	bl	8008d3c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008b18:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008b1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008b20:	d112      	bne.n	8008b48 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d016      	beq.n	8008b58 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b2c:	3324      	adds	r3, #36	@ 0x24
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f000 fedc 	bl	80098ec <xTaskRemoveFromEventList>
 8008b34:	4603      	mov	r3, r0
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d00e      	beq.n	8008b58 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d00b      	beq.n	8008b58 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2201      	movs	r2, #1
 8008b44:	601a      	str	r2, [r3, #0]
 8008b46:	e007      	b.n	8008b58 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008b48:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008b4c:	3301      	adds	r3, #1
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	b25a      	sxtb	r2, r3
 8008b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008b58:	2301      	movs	r3, #1
 8008b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008b5c:	e001      	b.n	8008b62 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b64:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008b6c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008b6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3740      	adds	r7, #64	@ 0x40
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b08c      	sub	sp, #48	@ 0x30
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	60f8      	str	r0, [r7, #12]
 8008b80:	60b9      	str	r1, [r7, #8]
 8008b82:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008b84:	2300      	movs	r3, #0
 8008b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d10b      	bne.n	8008baa <xQueueReceive+0x32>
	__asm volatile
 8008b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b96:	f383 8811 	msr	BASEPRI, r3
 8008b9a:	f3bf 8f6f 	isb	sy
 8008b9e:	f3bf 8f4f 	dsb	sy
 8008ba2:	623b      	str	r3, [r7, #32]
}
 8008ba4:	bf00      	nop
 8008ba6:	bf00      	nop
 8008ba8:	e7fd      	b.n	8008ba6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d103      	bne.n	8008bb8 <xQueueReceive+0x40>
 8008bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d101      	bne.n	8008bbc <xQueueReceive+0x44>
 8008bb8:	2301      	movs	r3, #1
 8008bba:	e000      	b.n	8008bbe <xQueueReceive+0x46>
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d10b      	bne.n	8008bda <xQueueReceive+0x62>
	__asm volatile
 8008bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bc6:	f383 8811 	msr	BASEPRI, r3
 8008bca:	f3bf 8f6f 	isb	sy
 8008bce:	f3bf 8f4f 	dsb	sy
 8008bd2:	61fb      	str	r3, [r7, #28]
}
 8008bd4:	bf00      	nop
 8008bd6:	bf00      	nop
 8008bd8:	e7fd      	b.n	8008bd6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008bda:	f001 f86f 	bl	8009cbc <xTaskGetSchedulerState>
 8008bde:	4603      	mov	r3, r0
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d102      	bne.n	8008bea <xQueueReceive+0x72>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d101      	bne.n	8008bee <xQueueReceive+0x76>
 8008bea:	2301      	movs	r3, #1
 8008bec:	e000      	b.n	8008bf0 <xQueueReceive+0x78>
 8008bee:	2300      	movs	r3, #0
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d10b      	bne.n	8008c0c <xQueueReceive+0x94>
	__asm volatile
 8008bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bf8:	f383 8811 	msr	BASEPRI, r3
 8008bfc:	f3bf 8f6f 	isb	sy
 8008c00:	f3bf 8f4f 	dsb	sy
 8008c04:	61bb      	str	r3, [r7, #24]
}
 8008c06:	bf00      	nop
 8008c08:	bf00      	nop
 8008c0a:	e7fd      	b.n	8008c08 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008c0c:	f001 fdc4 	bl	800a798 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c14:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d01f      	beq.n	8008c5c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008c1c:	68b9      	ldr	r1, [r7, #8]
 8008c1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c20:	f000 f8f6 	bl	8008e10 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c26:	1e5a      	subs	r2, r3, #1
 8008c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c2a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c2e:	691b      	ldr	r3, [r3, #16]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d00f      	beq.n	8008c54 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c36:	3310      	adds	r3, #16
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f000 fe57 	bl	80098ec <xTaskRemoveFromEventList>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d007      	beq.n	8008c54 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008c44:	4b3c      	ldr	r3, [pc, #240]	@ (8008d38 <xQueueReceive+0x1c0>)
 8008c46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c4a:	601a      	str	r2, [r3, #0]
 8008c4c:	f3bf 8f4f 	dsb	sy
 8008c50:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008c54:	f001 fdd2 	bl	800a7fc <vPortExitCritical>
				return pdPASS;
 8008c58:	2301      	movs	r3, #1
 8008c5a:	e069      	b.n	8008d30 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d103      	bne.n	8008c6a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008c62:	f001 fdcb 	bl	800a7fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008c66:	2300      	movs	r3, #0
 8008c68:	e062      	b.n	8008d30 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d106      	bne.n	8008c7e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c70:	f107 0310 	add.w	r3, r7, #16
 8008c74:	4618      	mov	r0, r3
 8008c76:	f000 fec5 	bl	8009a04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008c7e:	f001 fdbd 	bl	800a7fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008c82:	f000 fc0d 	bl	80094a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c86:	f001 fd87 	bl	800a798 <vPortEnterCritical>
 8008c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008c90:	b25b      	sxtb	r3, r3
 8008c92:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008c96:	d103      	bne.n	8008ca0 <xQueueReceive+0x128>
 8008c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ca2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008ca6:	b25b      	sxtb	r3, r3
 8008ca8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008cac:	d103      	bne.n	8008cb6 <xQueueReceive+0x13e>
 8008cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008cb6:	f001 fda1 	bl	800a7fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008cba:	1d3a      	adds	r2, r7, #4
 8008cbc:	f107 0310 	add.w	r3, r7, #16
 8008cc0:	4611      	mov	r1, r2
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f000 feb4 	bl	8009a30 <xTaskCheckForTimeOut>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d123      	bne.n	8008d16 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008cce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008cd0:	f000 f916 	bl	8008f00 <prvIsQueueEmpty>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d017      	beq.n	8008d0a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cdc:	3324      	adds	r3, #36	@ 0x24
 8008cde:	687a      	ldr	r2, [r7, #4]
 8008ce0:	4611      	mov	r1, r2
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f000 fdb0 	bl	8009848 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008ce8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008cea:	f000 f8b7 	bl	8008e5c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008cee:	f000 fbe5 	bl	80094bc <xTaskResumeAll>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d189      	bne.n	8008c0c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008cf8:	4b0f      	ldr	r3, [pc, #60]	@ (8008d38 <xQueueReceive+0x1c0>)
 8008cfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008cfe:	601a      	str	r2, [r3, #0]
 8008d00:	f3bf 8f4f 	dsb	sy
 8008d04:	f3bf 8f6f 	isb	sy
 8008d08:	e780      	b.n	8008c0c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008d0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d0c:	f000 f8a6 	bl	8008e5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d10:	f000 fbd4 	bl	80094bc <xTaskResumeAll>
 8008d14:	e77a      	b.n	8008c0c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008d16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d18:	f000 f8a0 	bl	8008e5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d1c:	f000 fbce 	bl	80094bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d22:	f000 f8ed 	bl	8008f00 <prvIsQueueEmpty>
 8008d26:	4603      	mov	r3, r0
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	f43f af6f 	beq.w	8008c0c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008d2e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3730      	adds	r7, #48	@ 0x30
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}
 8008d38:	e000ed04 	.word	0xe000ed04

08008d3c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b086      	sub	sp, #24
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	60b9      	str	r1, [r7, #8]
 8008d46:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d50:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d10d      	bne.n	8008d76 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d14d      	bne.n	8008dfe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	689b      	ldr	r3, [r3, #8]
 8008d66:	4618      	mov	r0, r3
 8008d68:	f000 ffc6 	bl	8009cf8 <xTaskPriorityDisinherit>
 8008d6c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	2200      	movs	r2, #0
 8008d72:	609a      	str	r2, [r3, #8]
 8008d74:	e043      	b.n	8008dfe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d119      	bne.n	8008db0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	6858      	ldr	r0, [r3, #4]
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d84:	461a      	mov	r2, r3
 8008d86:	68b9      	ldr	r1, [r7, #8]
 8008d88:	f011 f825 	bl	8019dd6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	685a      	ldr	r2, [r3, #4]
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d94:	441a      	add	r2, r3
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	685a      	ldr	r2, [r3, #4]
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	689b      	ldr	r3, [r3, #8]
 8008da2:	429a      	cmp	r2, r3
 8008da4:	d32b      	bcc.n	8008dfe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681a      	ldr	r2, [r3, #0]
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	605a      	str	r2, [r3, #4]
 8008dae:	e026      	b.n	8008dfe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	68d8      	ldr	r0, [r3, #12]
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008db8:	461a      	mov	r2, r3
 8008dba:	68b9      	ldr	r1, [r7, #8]
 8008dbc:	f011 f80b 	bl	8019dd6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	68da      	ldr	r2, [r3, #12]
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dc8:	425b      	negs	r3, r3
 8008dca:	441a      	add	r2, r3
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	68da      	ldr	r2, [r3, #12]
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	d207      	bcs.n	8008dec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	689a      	ldr	r2, [r3, #8]
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008de4:	425b      	negs	r3, r3
 8008de6:	441a      	add	r2, r3
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2b02      	cmp	r3, #2
 8008df0:	d105      	bne.n	8008dfe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d002      	beq.n	8008dfe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	3b01      	subs	r3, #1
 8008dfc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	1c5a      	adds	r2, r3, #1
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008e06:	697b      	ldr	r3, [r7, #20]
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3718      	adds	r7, #24
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b082      	sub	sp, #8
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
 8008e18:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d018      	beq.n	8008e54 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	68da      	ldr	r2, [r3, #12]
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e2a:	441a      	add	r2, r3
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	68da      	ldr	r2, [r3, #12]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	689b      	ldr	r3, [r3, #8]
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	d303      	bcc.n	8008e44 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681a      	ldr	r2, [r3, #0]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	68d9      	ldr	r1, [r3, #12]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e4c:	461a      	mov	r2, r3
 8008e4e:	6838      	ldr	r0, [r7, #0]
 8008e50:	f010 ffc1 	bl	8019dd6 <memcpy>
	}
}
 8008e54:	bf00      	nop
 8008e56:	3708      	adds	r7, #8
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}

08008e5c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b084      	sub	sp, #16
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008e64:	f001 fc98 	bl	800a798 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008e6e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008e70:	e011      	b.n	8008e96 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d012      	beq.n	8008ea0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	3324      	adds	r3, #36	@ 0x24
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f000 fd34 	bl	80098ec <xTaskRemoveFromEventList>
 8008e84:	4603      	mov	r3, r0
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d001      	beq.n	8008e8e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008e8a:	f000 fe35 	bl	8009af8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008e8e:	7bfb      	ldrb	r3, [r7, #15]
 8008e90:	3b01      	subs	r3, #1
 8008e92:	b2db      	uxtb	r3, r3
 8008e94:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	dce9      	bgt.n	8008e72 <prvUnlockQueue+0x16>
 8008e9e:	e000      	b.n	8008ea2 <prvUnlockQueue+0x46>
					break;
 8008ea0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	22ff      	movs	r2, #255	@ 0xff
 8008ea6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008eaa:	f001 fca7 	bl	800a7fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008eae:	f001 fc73 	bl	800a798 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008eb8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008eba:	e011      	b.n	8008ee0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	691b      	ldr	r3, [r3, #16]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d012      	beq.n	8008eea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	3310      	adds	r3, #16
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f000 fd0f 	bl	80098ec <xTaskRemoveFromEventList>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d001      	beq.n	8008ed8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008ed4:	f000 fe10 	bl	8009af8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008ed8:	7bbb      	ldrb	r3, [r7, #14]
 8008eda:	3b01      	subs	r3, #1
 8008edc:	b2db      	uxtb	r3, r3
 8008ede:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008ee0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	dce9      	bgt.n	8008ebc <prvUnlockQueue+0x60>
 8008ee8:	e000      	b.n	8008eec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008eea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	22ff      	movs	r2, #255	@ 0xff
 8008ef0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008ef4:	f001 fc82 	bl	800a7fc <vPortExitCritical>
}
 8008ef8:	bf00      	nop
 8008efa:	3710      	adds	r7, #16
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}

08008f00 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b084      	sub	sp, #16
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008f08:	f001 fc46 	bl	800a798 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d102      	bne.n	8008f1a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008f14:	2301      	movs	r3, #1
 8008f16:	60fb      	str	r3, [r7, #12]
 8008f18:	e001      	b.n	8008f1e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008f1e:	f001 fc6d 	bl	800a7fc <vPortExitCritical>

	return xReturn;
 8008f22:	68fb      	ldr	r3, [r7, #12]
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3710      	adds	r7, #16
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b084      	sub	sp, #16
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008f34:	f001 fc30 	bl	800a798 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f40:	429a      	cmp	r2, r3
 8008f42:	d102      	bne.n	8008f4a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008f44:	2301      	movs	r3, #1
 8008f46:	60fb      	str	r3, [r7, #12]
 8008f48:	e001      	b.n	8008f4e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008f4e:	f001 fc55 	bl	800a7fc <vPortExitCritical>

	return xReturn;
 8008f52:	68fb      	ldr	r3, [r7, #12]
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3710      	adds	r7, #16
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b085      	sub	sp, #20
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008f66:	2300      	movs	r3, #0
 8008f68:	60fb      	str	r3, [r7, #12]
 8008f6a:	e014      	b.n	8008f96 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008f6c:	4a0f      	ldr	r2, [pc, #60]	@ (8008fac <vQueueAddToRegistry+0x50>)
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d10b      	bne.n	8008f90 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008f78:	490c      	ldr	r1, [pc, #48]	@ (8008fac <vQueueAddToRegistry+0x50>)
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	683a      	ldr	r2, [r7, #0]
 8008f7e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008f82:	4a0a      	ldr	r2, [pc, #40]	@ (8008fac <vQueueAddToRegistry+0x50>)
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	00db      	lsls	r3, r3, #3
 8008f88:	4413      	add	r3, r2
 8008f8a:	687a      	ldr	r2, [r7, #4]
 8008f8c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008f8e:	e006      	b.n	8008f9e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	3301      	adds	r3, #1
 8008f94:	60fb      	str	r3, [r7, #12]
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2b07      	cmp	r3, #7
 8008f9a:	d9e7      	bls.n	8008f6c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008f9c:	bf00      	nop
 8008f9e:	bf00      	nop
 8008fa0:	3714      	adds	r7, #20
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa8:	4770      	bx	lr
 8008faa:	bf00      	nop
 8008fac:	20005bc0 	.word	0x20005bc0

08008fb0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b086      	sub	sp, #24
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	60f8      	str	r0, [r7, #12]
 8008fb8:	60b9      	str	r1, [r7, #8]
 8008fba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008fc0:	f001 fbea 	bl	800a798 <vPortEnterCritical>
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008fca:	b25b      	sxtb	r3, r3
 8008fcc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008fd0:	d103      	bne.n	8008fda <vQueueWaitForMessageRestricted+0x2a>
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008fe0:	b25b      	sxtb	r3, r3
 8008fe2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008fe6:	d103      	bne.n	8008ff0 <vQueueWaitForMessageRestricted+0x40>
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	2200      	movs	r2, #0
 8008fec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008ff0:	f001 fc04 	bl	800a7fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d106      	bne.n	800900a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	3324      	adds	r3, #36	@ 0x24
 8009000:	687a      	ldr	r2, [r7, #4]
 8009002:	68b9      	ldr	r1, [r7, #8]
 8009004:	4618      	mov	r0, r3
 8009006:	f000 fc45 	bl	8009894 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800900a:	6978      	ldr	r0, [r7, #20]
 800900c:	f7ff ff26 	bl	8008e5c <prvUnlockQueue>
	}
 8009010:	bf00      	nop
 8009012:	3718      	adds	r7, #24
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}

08009018 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009018:	b580      	push	{r7, lr}
 800901a:	b08e      	sub	sp, #56	@ 0x38
 800901c:	af04      	add	r7, sp, #16
 800901e:	60f8      	str	r0, [r7, #12]
 8009020:	60b9      	str	r1, [r7, #8]
 8009022:	607a      	str	r2, [r7, #4]
 8009024:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009026:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009028:	2b00      	cmp	r3, #0
 800902a:	d10b      	bne.n	8009044 <xTaskCreateStatic+0x2c>
	__asm volatile
 800902c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009030:	f383 8811 	msr	BASEPRI, r3
 8009034:	f3bf 8f6f 	isb	sy
 8009038:	f3bf 8f4f 	dsb	sy
 800903c:	623b      	str	r3, [r7, #32]
}
 800903e:	bf00      	nop
 8009040:	bf00      	nop
 8009042:	e7fd      	b.n	8009040 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009046:	2b00      	cmp	r3, #0
 8009048:	d10b      	bne.n	8009062 <xTaskCreateStatic+0x4a>
	__asm volatile
 800904a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800904e:	f383 8811 	msr	BASEPRI, r3
 8009052:	f3bf 8f6f 	isb	sy
 8009056:	f3bf 8f4f 	dsb	sy
 800905a:	61fb      	str	r3, [r7, #28]
}
 800905c:	bf00      	nop
 800905e:	bf00      	nop
 8009060:	e7fd      	b.n	800905e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009062:	235c      	movs	r3, #92	@ 0x5c
 8009064:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	2b5c      	cmp	r3, #92	@ 0x5c
 800906a:	d00b      	beq.n	8009084 <xTaskCreateStatic+0x6c>
	__asm volatile
 800906c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009070:	f383 8811 	msr	BASEPRI, r3
 8009074:	f3bf 8f6f 	isb	sy
 8009078:	f3bf 8f4f 	dsb	sy
 800907c:	61bb      	str	r3, [r7, #24]
}
 800907e:	bf00      	nop
 8009080:	bf00      	nop
 8009082:	e7fd      	b.n	8009080 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009084:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009088:	2b00      	cmp	r3, #0
 800908a:	d01e      	beq.n	80090ca <xTaskCreateStatic+0xb2>
 800908c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800908e:	2b00      	cmp	r3, #0
 8009090:	d01b      	beq.n	80090ca <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009094:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009098:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800909a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800909c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800909e:	2202      	movs	r2, #2
 80090a0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80090a4:	2300      	movs	r3, #0
 80090a6:	9303      	str	r3, [sp, #12]
 80090a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090aa:	9302      	str	r3, [sp, #8]
 80090ac:	f107 0314 	add.w	r3, r7, #20
 80090b0:	9301      	str	r3, [sp, #4]
 80090b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090b4:	9300      	str	r3, [sp, #0]
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	687a      	ldr	r2, [r7, #4]
 80090ba:	68b9      	ldr	r1, [r7, #8]
 80090bc:	68f8      	ldr	r0, [r7, #12]
 80090be:	f000 f850 	bl	8009162 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80090c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80090c4:	f000 f8de 	bl	8009284 <prvAddNewTaskToReadyList>
 80090c8:	e001      	b.n	80090ce <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80090ca:	2300      	movs	r3, #0
 80090cc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80090ce:	697b      	ldr	r3, [r7, #20]
	}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3728      	adds	r7, #40	@ 0x28
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b08c      	sub	sp, #48	@ 0x30
 80090dc:	af04      	add	r7, sp, #16
 80090de:	60f8      	str	r0, [r7, #12]
 80090e0:	60b9      	str	r1, [r7, #8]
 80090e2:	603b      	str	r3, [r7, #0]
 80090e4:	4613      	mov	r3, r2
 80090e6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80090e8:	88fb      	ldrh	r3, [r7, #6]
 80090ea:	009b      	lsls	r3, r3, #2
 80090ec:	4618      	mov	r0, r3
 80090ee:	f001 fc75 	bl	800a9dc <pvPortMalloc>
 80090f2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d00e      	beq.n	8009118 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80090fa:	205c      	movs	r0, #92	@ 0x5c
 80090fc:	f001 fc6e 	bl	800a9dc <pvPortMalloc>
 8009100:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009102:	69fb      	ldr	r3, [r7, #28]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d003      	beq.n	8009110 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009108:	69fb      	ldr	r3, [r7, #28]
 800910a:	697a      	ldr	r2, [r7, #20]
 800910c:	631a      	str	r2, [r3, #48]	@ 0x30
 800910e:	e005      	b.n	800911c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009110:	6978      	ldr	r0, [r7, #20]
 8009112:	f001 fd31 	bl	800ab78 <vPortFree>
 8009116:	e001      	b.n	800911c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009118:	2300      	movs	r3, #0
 800911a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800911c:	69fb      	ldr	r3, [r7, #28]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d017      	beq.n	8009152 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009122:	69fb      	ldr	r3, [r7, #28]
 8009124:	2200      	movs	r2, #0
 8009126:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800912a:	88fa      	ldrh	r2, [r7, #6]
 800912c:	2300      	movs	r3, #0
 800912e:	9303      	str	r3, [sp, #12]
 8009130:	69fb      	ldr	r3, [r7, #28]
 8009132:	9302      	str	r3, [sp, #8]
 8009134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009136:	9301      	str	r3, [sp, #4]
 8009138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800913a:	9300      	str	r3, [sp, #0]
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	68b9      	ldr	r1, [r7, #8]
 8009140:	68f8      	ldr	r0, [r7, #12]
 8009142:	f000 f80e 	bl	8009162 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009146:	69f8      	ldr	r0, [r7, #28]
 8009148:	f000 f89c 	bl	8009284 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800914c:	2301      	movs	r3, #1
 800914e:	61bb      	str	r3, [r7, #24]
 8009150:	e002      	b.n	8009158 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009152:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009156:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009158:	69bb      	ldr	r3, [r7, #24]
	}
 800915a:	4618      	mov	r0, r3
 800915c:	3720      	adds	r7, #32
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}

08009162 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009162:	b580      	push	{r7, lr}
 8009164:	b088      	sub	sp, #32
 8009166:	af00      	add	r7, sp, #0
 8009168:	60f8      	str	r0, [r7, #12]
 800916a:	60b9      	str	r1, [r7, #8]
 800916c:	607a      	str	r2, [r7, #4]
 800916e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009172:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	009b      	lsls	r3, r3, #2
 8009178:	461a      	mov	r2, r3
 800917a:	21a5      	movs	r1, #165	@ 0xa5
 800917c:	f010 fd62 	bl	8019c44 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009182:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800918a:	3b01      	subs	r3, #1
 800918c:	009b      	lsls	r3, r3, #2
 800918e:	4413      	add	r3, r2
 8009190:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009192:	69bb      	ldr	r3, [r7, #24]
 8009194:	f023 0307 	bic.w	r3, r3, #7
 8009198:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800919a:	69bb      	ldr	r3, [r7, #24]
 800919c:	f003 0307 	and.w	r3, r3, #7
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d00b      	beq.n	80091bc <prvInitialiseNewTask+0x5a>
	__asm volatile
 80091a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091a8:	f383 8811 	msr	BASEPRI, r3
 80091ac:	f3bf 8f6f 	isb	sy
 80091b0:	f3bf 8f4f 	dsb	sy
 80091b4:	617b      	str	r3, [r7, #20]
}
 80091b6:	bf00      	nop
 80091b8:	bf00      	nop
 80091ba:	e7fd      	b.n	80091b8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d01f      	beq.n	8009202 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80091c2:	2300      	movs	r3, #0
 80091c4:	61fb      	str	r3, [r7, #28]
 80091c6:	e012      	b.n	80091ee <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80091c8:	68ba      	ldr	r2, [r7, #8]
 80091ca:	69fb      	ldr	r3, [r7, #28]
 80091cc:	4413      	add	r3, r2
 80091ce:	7819      	ldrb	r1, [r3, #0]
 80091d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091d2:	69fb      	ldr	r3, [r7, #28]
 80091d4:	4413      	add	r3, r2
 80091d6:	3334      	adds	r3, #52	@ 0x34
 80091d8:	460a      	mov	r2, r1
 80091da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80091dc:	68ba      	ldr	r2, [r7, #8]
 80091de:	69fb      	ldr	r3, [r7, #28]
 80091e0:	4413      	add	r3, r2
 80091e2:	781b      	ldrb	r3, [r3, #0]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d006      	beq.n	80091f6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80091e8:	69fb      	ldr	r3, [r7, #28]
 80091ea:	3301      	adds	r3, #1
 80091ec:	61fb      	str	r3, [r7, #28]
 80091ee:	69fb      	ldr	r3, [r7, #28]
 80091f0:	2b0f      	cmp	r3, #15
 80091f2:	d9e9      	bls.n	80091c8 <prvInitialiseNewTask+0x66>
 80091f4:	e000      	b.n	80091f8 <prvInitialiseNewTask+0x96>
			{
				break;
 80091f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80091f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091fa:	2200      	movs	r2, #0
 80091fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009200:	e003      	b.n	800920a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009204:	2200      	movs	r2, #0
 8009206:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800920a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800920c:	2b37      	cmp	r3, #55	@ 0x37
 800920e:	d901      	bls.n	8009214 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009210:	2337      	movs	r3, #55	@ 0x37
 8009212:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009216:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009218:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800921a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800921c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800921e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009222:	2200      	movs	r2, #0
 8009224:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009228:	3304      	adds	r3, #4
 800922a:	4618      	mov	r0, r3
 800922c:	f7ff f966 	bl	80084fc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009232:	3318      	adds	r3, #24
 8009234:	4618      	mov	r0, r3
 8009236:	f7ff f961 	bl	80084fc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800923a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800923c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800923e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009242:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009248:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800924a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800924c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800924e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009252:	2200      	movs	r2, #0
 8009254:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009258:	2200      	movs	r2, #0
 800925a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800925e:	683a      	ldr	r2, [r7, #0]
 8009260:	68f9      	ldr	r1, [r7, #12]
 8009262:	69b8      	ldr	r0, [r7, #24]
 8009264:	f001 f966 	bl	800a534 <pxPortInitialiseStack>
 8009268:	4602      	mov	r2, r0
 800926a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800926c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800926e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009270:	2b00      	cmp	r3, #0
 8009272:	d002      	beq.n	800927a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009276:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009278:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800927a:	bf00      	nop
 800927c:	3720      	adds	r7, #32
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
	...

08009284 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b082      	sub	sp, #8
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800928c:	f001 fa84 	bl	800a798 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009290:	4b2d      	ldr	r3, [pc, #180]	@ (8009348 <prvAddNewTaskToReadyList+0xc4>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	3301      	adds	r3, #1
 8009296:	4a2c      	ldr	r2, [pc, #176]	@ (8009348 <prvAddNewTaskToReadyList+0xc4>)
 8009298:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800929a:	4b2c      	ldr	r3, [pc, #176]	@ (800934c <prvAddNewTaskToReadyList+0xc8>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d109      	bne.n	80092b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80092a2:	4a2a      	ldr	r2, [pc, #168]	@ (800934c <prvAddNewTaskToReadyList+0xc8>)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80092a8:	4b27      	ldr	r3, [pc, #156]	@ (8009348 <prvAddNewTaskToReadyList+0xc4>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d110      	bne.n	80092d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80092b0:	f000 fc46 	bl	8009b40 <prvInitialiseTaskLists>
 80092b4:	e00d      	b.n	80092d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80092b6:	4b26      	ldr	r3, [pc, #152]	@ (8009350 <prvAddNewTaskToReadyList+0xcc>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d109      	bne.n	80092d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80092be:	4b23      	ldr	r3, [pc, #140]	@ (800934c <prvAddNewTaskToReadyList+0xc8>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092c8:	429a      	cmp	r2, r3
 80092ca:	d802      	bhi.n	80092d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80092cc:	4a1f      	ldr	r2, [pc, #124]	@ (800934c <prvAddNewTaskToReadyList+0xc8>)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80092d2:	4b20      	ldr	r3, [pc, #128]	@ (8009354 <prvAddNewTaskToReadyList+0xd0>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	3301      	adds	r3, #1
 80092d8:	4a1e      	ldr	r2, [pc, #120]	@ (8009354 <prvAddNewTaskToReadyList+0xd0>)
 80092da:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80092dc:	4b1d      	ldr	r3, [pc, #116]	@ (8009354 <prvAddNewTaskToReadyList+0xd0>)
 80092de:	681a      	ldr	r2, [r3, #0]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092e8:	4b1b      	ldr	r3, [pc, #108]	@ (8009358 <prvAddNewTaskToReadyList+0xd4>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d903      	bls.n	80092f8 <prvAddNewTaskToReadyList+0x74>
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092f4:	4a18      	ldr	r2, [pc, #96]	@ (8009358 <prvAddNewTaskToReadyList+0xd4>)
 80092f6:	6013      	str	r3, [r2, #0]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092fc:	4613      	mov	r3, r2
 80092fe:	009b      	lsls	r3, r3, #2
 8009300:	4413      	add	r3, r2
 8009302:	009b      	lsls	r3, r3, #2
 8009304:	4a15      	ldr	r2, [pc, #84]	@ (800935c <prvAddNewTaskToReadyList+0xd8>)
 8009306:	441a      	add	r2, r3
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	3304      	adds	r3, #4
 800930c:	4619      	mov	r1, r3
 800930e:	4610      	mov	r0, r2
 8009310:	f7ff f901 	bl	8008516 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009314:	f001 fa72 	bl	800a7fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009318:	4b0d      	ldr	r3, [pc, #52]	@ (8009350 <prvAddNewTaskToReadyList+0xcc>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d00e      	beq.n	800933e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009320:	4b0a      	ldr	r3, [pc, #40]	@ (800934c <prvAddNewTaskToReadyList+0xc8>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800932a:	429a      	cmp	r2, r3
 800932c:	d207      	bcs.n	800933e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800932e:	4b0c      	ldr	r3, [pc, #48]	@ (8009360 <prvAddNewTaskToReadyList+0xdc>)
 8009330:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009334:	601a      	str	r2, [r3, #0]
 8009336:	f3bf 8f4f 	dsb	sy
 800933a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800933e:	bf00      	nop
 8009340:	3708      	adds	r7, #8
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	200060d4 	.word	0x200060d4
 800934c:	20005c00 	.word	0x20005c00
 8009350:	200060e0 	.word	0x200060e0
 8009354:	200060f0 	.word	0x200060f0
 8009358:	200060dc 	.word	0x200060dc
 800935c:	20005c04 	.word	0x20005c04
 8009360:	e000ed04 	.word	0xe000ed04

08009364 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009364:	b580      	push	{r7, lr}
 8009366:	b084      	sub	sp, #16
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800936c:	2300      	movs	r3, #0
 800936e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d018      	beq.n	80093a8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009376:	4b14      	ldr	r3, [pc, #80]	@ (80093c8 <vTaskDelay+0x64>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d00b      	beq.n	8009396 <vTaskDelay+0x32>
	__asm volatile
 800937e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009382:	f383 8811 	msr	BASEPRI, r3
 8009386:	f3bf 8f6f 	isb	sy
 800938a:	f3bf 8f4f 	dsb	sy
 800938e:	60bb      	str	r3, [r7, #8]
}
 8009390:	bf00      	nop
 8009392:	bf00      	nop
 8009394:	e7fd      	b.n	8009392 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009396:	f000 f883 	bl	80094a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800939a:	2100      	movs	r1, #0
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f000 fd1b 	bl	8009dd8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80093a2:	f000 f88b 	bl	80094bc <xTaskResumeAll>
 80093a6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d107      	bne.n	80093be <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80093ae:	4b07      	ldr	r3, [pc, #28]	@ (80093cc <vTaskDelay+0x68>)
 80093b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093b4:	601a      	str	r2, [r3, #0]
 80093b6:	f3bf 8f4f 	dsb	sy
 80093ba:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80093be:	bf00      	nop
 80093c0:	3710      	adds	r7, #16
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}
 80093c6:	bf00      	nop
 80093c8:	200060fc 	.word	0x200060fc
 80093cc:	e000ed04 	.word	0xe000ed04

080093d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b08a      	sub	sp, #40	@ 0x28
 80093d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80093d6:	2300      	movs	r3, #0
 80093d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80093da:	2300      	movs	r3, #0
 80093dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80093de:	463a      	mov	r2, r7
 80093e0:	1d39      	adds	r1, r7, #4
 80093e2:	f107 0308 	add.w	r3, r7, #8
 80093e6:	4618      	mov	r0, r3
 80093e8:	f7ff f834 	bl	8008454 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80093ec:	6839      	ldr	r1, [r7, #0]
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	68ba      	ldr	r2, [r7, #8]
 80093f2:	9202      	str	r2, [sp, #8]
 80093f4:	9301      	str	r3, [sp, #4]
 80093f6:	2300      	movs	r3, #0
 80093f8:	9300      	str	r3, [sp, #0]
 80093fa:	2300      	movs	r3, #0
 80093fc:	460a      	mov	r2, r1
 80093fe:	4922      	ldr	r1, [pc, #136]	@ (8009488 <vTaskStartScheduler+0xb8>)
 8009400:	4822      	ldr	r0, [pc, #136]	@ (800948c <vTaskStartScheduler+0xbc>)
 8009402:	f7ff fe09 	bl	8009018 <xTaskCreateStatic>
 8009406:	4603      	mov	r3, r0
 8009408:	4a21      	ldr	r2, [pc, #132]	@ (8009490 <vTaskStartScheduler+0xc0>)
 800940a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800940c:	4b20      	ldr	r3, [pc, #128]	@ (8009490 <vTaskStartScheduler+0xc0>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d002      	beq.n	800941a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009414:	2301      	movs	r3, #1
 8009416:	617b      	str	r3, [r7, #20]
 8009418:	e001      	b.n	800941e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800941a:	2300      	movs	r3, #0
 800941c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	2b01      	cmp	r3, #1
 8009422:	d102      	bne.n	800942a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009424:	f000 fd2c 	bl	8009e80 <xTimerCreateTimerTask>
 8009428:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	2b01      	cmp	r3, #1
 800942e:	d116      	bne.n	800945e <vTaskStartScheduler+0x8e>
	__asm volatile
 8009430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009434:	f383 8811 	msr	BASEPRI, r3
 8009438:	f3bf 8f6f 	isb	sy
 800943c:	f3bf 8f4f 	dsb	sy
 8009440:	613b      	str	r3, [r7, #16]
}
 8009442:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009444:	4b13      	ldr	r3, [pc, #76]	@ (8009494 <vTaskStartScheduler+0xc4>)
 8009446:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800944a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800944c:	4b12      	ldr	r3, [pc, #72]	@ (8009498 <vTaskStartScheduler+0xc8>)
 800944e:	2201      	movs	r2, #1
 8009450:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009452:	4b12      	ldr	r3, [pc, #72]	@ (800949c <vTaskStartScheduler+0xcc>)
 8009454:	2200      	movs	r2, #0
 8009456:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009458:	f001 f8fa 	bl	800a650 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800945c:	e00f      	b.n	800947e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009464:	d10b      	bne.n	800947e <vTaskStartScheduler+0xae>
	__asm volatile
 8009466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800946a:	f383 8811 	msr	BASEPRI, r3
 800946e:	f3bf 8f6f 	isb	sy
 8009472:	f3bf 8f4f 	dsb	sy
 8009476:	60fb      	str	r3, [r7, #12]
}
 8009478:	bf00      	nop
 800947a:	bf00      	nop
 800947c:	e7fd      	b.n	800947a <vTaskStartScheduler+0xaa>
}
 800947e:	bf00      	nop
 8009480:	3718      	adds	r7, #24
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
 8009486:	bf00      	nop
 8009488:	0801b238 	.word	0x0801b238
 800948c:	08009b11 	.word	0x08009b11
 8009490:	200060f8 	.word	0x200060f8
 8009494:	200060f4 	.word	0x200060f4
 8009498:	200060e0 	.word	0x200060e0
 800949c:	200060d8 	.word	0x200060d8

080094a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80094a0:	b480      	push	{r7}
 80094a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80094a4:	4b04      	ldr	r3, [pc, #16]	@ (80094b8 <vTaskSuspendAll+0x18>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	3301      	adds	r3, #1
 80094aa:	4a03      	ldr	r2, [pc, #12]	@ (80094b8 <vTaskSuspendAll+0x18>)
 80094ac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80094ae:	bf00      	nop
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr
 80094b8:	200060fc 	.word	0x200060fc

080094bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80094c2:	2300      	movs	r3, #0
 80094c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80094c6:	2300      	movs	r3, #0
 80094c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80094ca:	4b42      	ldr	r3, [pc, #264]	@ (80095d4 <xTaskResumeAll+0x118>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d10b      	bne.n	80094ea <xTaskResumeAll+0x2e>
	__asm volatile
 80094d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094d6:	f383 8811 	msr	BASEPRI, r3
 80094da:	f3bf 8f6f 	isb	sy
 80094de:	f3bf 8f4f 	dsb	sy
 80094e2:	603b      	str	r3, [r7, #0]
}
 80094e4:	bf00      	nop
 80094e6:	bf00      	nop
 80094e8:	e7fd      	b.n	80094e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80094ea:	f001 f955 	bl	800a798 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80094ee:	4b39      	ldr	r3, [pc, #228]	@ (80095d4 <xTaskResumeAll+0x118>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	3b01      	subs	r3, #1
 80094f4:	4a37      	ldr	r2, [pc, #220]	@ (80095d4 <xTaskResumeAll+0x118>)
 80094f6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094f8:	4b36      	ldr	r3, [pc, #216]	@ (80095d4 <xTaskResumeAll+0x118>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d162      	bne.n	80095c6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009500:	4b35      	ldr	r3, [pc, #212]	@ (80095d8 <xTaskResumeAll+0x11c>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d05e      	beq.n	80095c6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009508:	e02f      	b.n	800956a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800950a:	4b34      	ldr	r3, [pc, #208]	@ (80095dc <xTaskResumeAll+0x120>)
 800950c:	68db      	ldr	r3, [r3, #12]
 800950e:	68db      	ldr	r3, [r3, #12]
 8009510:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	3318      	adds	r3, #24
 8009516:	4618      	mov	r0, r3
 8009518:	f7ff f85a 	bl	80085d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	3304      	adds	r3, #4
 8009520:	4618      	mov	r0, r3
 8009522:	f7ff f855 	bl	80085d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800952a:	4b2d      	ldr	r3, [pc, #180]	@ (80095e0 <xTaskResumeAll+0x124>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	429a      	cmp	r2, r3
 8009530:	d903      	bls.n	800953a <xTaskResumeAll+0x7e>
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009536:	4a2a      	ldr	r2, [pc, #168]	@ (80095e0 <xTaskResumeAll+0x124>)
 8009538:	6013      	str	r3, [r2, #0]
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800953e:	4613      	mov	r3, r2
 8009540:	009b      	lsls	r3, r3, #2
 8009542:	4413      	add	r3, r2
 8009544:	009b      	lsls	r3, r3, #2
 8009546:	4a27      	ldr	r2, [pc, #156]	@ (80095e4 <xTaskResumeAll+0x128>)
 8009548:	441a      	add	r2, r3
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	3304      	adds	r3, #4
 800954e:	4619      	mov	r1, r3
 8009550:	4610      	mov	r0, r2
 8009552:	f7fe ffe0 	bl	8008516 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800955a:	4b23      	ldr	r3, [pc, #140]	@ (80095e8 <xTaskResumeAll+0x12c>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009560:	429a      	cmp	r2, r3
 8009562:	d302      	bcc.n	800956a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009564:	4b21      	ldr	r3, [pc, #132]	@ (80095ec <xTaskResumeAll+0x130>)
 8009566:	2201      	movs	r2, #1
 8009568:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800956a:	4b1c      	ldr	r3, [pc, #112]	@ (80095dc <xTaskResumeAll+0x120>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d1cb      	bne.n	800950a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d001      	beq.n	800957c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009578:	f000 fb80 	bl	8009c7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800957c:	4b1c      	ldr	r3, [pc, #112]	@ (80095f0 <xTaskResumeAll+0x134>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d010      	beq.n	80095aa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009588:	f000 f846 	bl	8009618 <xTaskIncrementTick>
 800958c:	4603      	mov	r3, r0
 800958e:	2b00      	cmp	r3, #0
 8009590:	d002      	beq.n	8009598 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009592:	4b16      	ldr	r3, [pc, #88]	@ (80095ec <xTaskResumeAll+0x130>)
 8009594:	2201      	movs	r2, #1
 8009596:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	3b01      	subs	r3, #1
 800959c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d1f1      	bne.n	8009588 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80095a4:	4b12      	ldr	r3, [pc, #72]	@ (80095f0 <xTaskResumeAll+0x134>)
 80095a6:	2200      	movs	r2, #0
 80095a8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80095aa:	4b10      	ldr	r3, [pc, #64]	@ (80095ec <xTaskResumeAll+0x130>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d009      	beq.n	80095c6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80095b2:	2301      	movs	r3, #1
 80095b4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80095b6:	4b0f      	ldr	r3, [pc, #60]	@ (80095f4 <xTaskResumeAll+0x138>)
 80095b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095bc:	601a      	str	r2, [r3, #0]
 80095be:	f3bf 8f4f 	dsb	sy
 80095c2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80095c6:	f001 f919 	bl	800a7fc <vPortExitCritical>

	return xAlreadyYielded;
 80095ca:	68bb      	ldr	r3, [r7, #8]
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3710      	adds	r7, #16
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}
 80095d4:	200060fc 	.word	0x200060fc
 80095d8:	200060d4 	.word	0x200060d4
 80095dc:	20006094 	.word	0x20006094
 80095e0:	200060dc 	.word	0x200060dc
 80095e4:	20005c04 	.word	0x20005c04
 80095e8:	20005c00 	.word	0x20005c00
 80095ec:	200060e8 	.word	0x200060e8
 80095f0:	200060e4 	.word	0x200060e4
 80095f4:	e000ed04 	.word	0xe000ed04

080095f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80095f8:	b480      	push	{r7}
 80095fa:	b083      	sub	sp, #12
 80095fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80095fe:	4b05      	ldr	r3, [pc, #20]	@ (8009614 <xTaskGetTickCount+0x1c>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009604:	687b      	ldr	r3, [r7, #4]
}
 8009606:	4618      	mov	r0, r3
 8009608:	370c      	adds	r7, #12
 800960a:	46bd      	mov	sp, r7
 800960c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009610:	4770      	bx	lr
 8009612:	bf00      	nop
 8009614:	200060d8 	.word	0x200060d8

08009618 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b086      	sub	sp, #24
 800961c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800961e:	2300      	movs	r3, #0
 8009620:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009622:	4b4f      	ldr	r3, [pc, #316]	@ (8009760 <xTaskIncrementTick+0x148>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	2b00      	cmp	r3, #0
 8009628:	f040 8090 	bne.w	800974c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800962c:	4b4d      	ldr	r3, [pc, #308]	@ (8009764 <xTaskIncrementTick+0x14c>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	3301      	adds	r3, #1
 8009632:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009634:	4a4b      	ldr	r2, [pc, #300]	@ (8009764 <xTaskIncrementTick+0x14c>)
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d121      	bne.n	8009684 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009640:	4b49      	ldr	r3, [pc, #292]	@ (8009768 <xTaskIncrementTick+0x150>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d00b      	beq.n	8009662 <xTaskIncrementTick+0x4a>
	__asm volatile
 800964a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800964e:	f383 8811 	msr	BASEPRI, r3
 8009652:	f3bf 8f6f 	isb	sy
 8009656:	f3bf 8f4f 	dsb	sy
 800965a:	603b      	str	r3, [r7, #0]
}
 800965c:	bf00      	nop
 800965e:	bf00      	nop
 8009660:	e7fd      	b.n	800965e <xTaskIncrementTick+0x46>
 8009662:	4b41      	ldr	r3, [pc, #260]	@ (8009768 <xTaskIncrementTick+0x150>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	60fb      	str	r3, [r7, #12]
 8009668:	4b40      	ldr	r3, [pc, #256]	@ (800976c <xTaskIncrementTick+0x154>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4a3e      	ldr	r2, [pc, #248]	@ (8009768 <xTaskIncrementTick+0x150>)
 800966e:	6013      	str	r3, [r2, #0]
 8009670:	4a3e      	ldr	r2, [pc, #248]	@ (800976c <xTaskIncrementTick+0x154>)
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	6013      	str	r3, [r2, #0]
 8009676:	4b3e      	ldr	r3, [pc, #248]	@ (8009770 <xTaskIncrementTick+0x158>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	3301      	adds	r3, #1
 800967c:	4a3c      	ldr	r2, [pc, #240]	@ (8009770 <xTaskIncrementTick+0x158>)
 800967e:	6013      	str	r3, [r2, #0]
 8009680:	f000 fafc 	bl	8009c7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009684:	4b3b      	ldr	r3, [pc, #236]	@ (8009774 <xTaskIncrementTick+0x15c>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	693a      	ldr	r2, [r7, #16]
 800968a:	429a      	cmp	r2, r3
 800968c:	d349      	bcc.n	8009722 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800968e:	4b36      	ldr	r3, [pc, #216]	@ (8009768 <xTaskIncrementTick+0x150>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d104      	bne.n	80096a2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009698:	4b36      	ldr	r3, [pc, #216]	@ (8009774 <xTaskIncrementTick+0x15c>)
 800969a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800969e:	601a      	str	r2, [r3, #0]
					break;
 80096a0:	e03f      	b.n	8009722 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096a2:	4b31      	ldr	r3, [pc, #196]	@ (8009768 <xTaskIncrementTick+0x150>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	68db      	ldr	r3, [r3, #12]
 80096a8:	68db      	ldr	r3, [r3, #12]
 80096aa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80096b2:	693a      	ldr	r2, [r7, #16]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	429a      	cmp	r2, r3
 80096b8:	d203      	bcs.n	80096c2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80096ba:	4a2e      	ldr	r2, [pc, #184]	@ (8009774 <xTaskIncrementTick+0x15c>)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80096c0:	e02f      	b.n	8009722 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	3304      	adds	r3, #4
 80096c6:	4618      	mov	r0, r3
 80096c8:	f7fe ff82 	bl	80085d0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d004      	beq.n	80096de <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	3318      	adds	r3, #24
 80096d8:	4618      	mov	r0, r3
 80096da:	f7fe ff79 	bl	80085d0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096e2:	4b25      	ldr	r3, [pc, #148]	@ (8009778 <xTaskIncrementTick+0x160>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	429a      	cmp	r2, r3
 80096e8:	d903      	bls.n	80096f2 <xTaskIncrementTick+0xda>
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096ee:	4a22      	ldr	r2, [pc, #136]	@ (8009778 <xTaskIncrementTick+0x160>)
 80096f0:	6013      	str	r3, [r2, #0]
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096f6:	4613      	mov	r3, r2
 80096f8:	009b      	lsls	r3, r3, #2
 80096fa:	4413      	add	r3, r2
 80096fc:	009b      	lsls	r3, r3, #2
 80096fe:	4a1f      	ldr	r2, [pc, #124]	@ (800977c <xTaskIncrementTick+0x164>)
 8009700:	441a      	add	r2, r3
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	3304      	adds	r3, #4
 8009706:	4619      	mov	r1, r3
 8009708:	4610      	mov	r0, r2
 800970a:	f7fe ff04 	bl	8008516 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009712:	4b1b      	ldr	r3, [pc, #108]	@ (8009780 <xTaskIncrementTick+0x168>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009718:	429a      	cmp	r2, r3
 800971a:	d3b8      	bcc.n	800968e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800971c:	2301      	movs	r3, #1
 800971e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009720:	e7b5      	b.n	800968e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009722:	4b17      	ldr	r3, [pc, #92]	@ (8009780 <xTaskIncrementTick+0x168>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009728:	4914      	ldr	r1, [pc, #80]	@ (800977c <xTaskIncrementTick+0x164>)
 800972a:	4613      	mov	r3, r2
 800972c:	009b      	lsls	r3, r3, #2
 800972e:	4413      	add	r3, r2
 8009730:	009b      	lsls	r3, r3, #2
 8009732:	440b      	add	r3, r1
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	2b01      	cmp	r3, #1
 8009738:	d901      	bls.n	800973e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800973a:	2301      	movs	r3, #1
 800973c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800973e:	4b11      	ldr	r3, [pc, #68]	@ (8009784 <xTaskIncrementTick+0x16c>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d007      	beq.n	8009756 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8009746:	2301      	movs	r3, #1
 8009748:	617b      	str	r3, [r7, #20]
 800974a:	e004      	b.n	8009756 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800974c:	4b0e      	ldr	r3, [pc, #56]	@ (8009788 <xTaskIncrementTick+0x170>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	3301      	adds	r3, #1
 8009752:	4a0d      	ldr	r2, [pc, #52]	@ (8009788 <xTaskIncrementTick+0x170>)
 8009754:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009756:	697b      	ldr	r3, [r7, #20]
}
 8009758:	4618      	mov	r0, r3
 800975a:	3718      	adds	r7, #24
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}
 8009760:	200060fc 	.word	0x200060fc
 8009764:	200060d8 	.word	0x200060d8
 8009768:	2000608c 	.word	0x2000608c
 800976c:	20006090 	.word	0x20006090
 8009770:	200060ec 	.word	0x200060ec
 8009774:	200060f4 	.word	0x200060f4
 8009778:	200060dc 	.word	0x200060dc
 800977c:	20005c04 	.word	0x20005c04
 8009780:	20005c00 	.word	0x20005c00
 8009784:	200060e8 	.word	0x200060e8
 8009788:	200060e4 	.word	0x200060e4

0800978c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800978c:	b480      	push	{r7}
 800978e:	b085      	sub	sp, #20
 8009790:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009792:	4b28      	ldr	r3, [pc, #160]	@ (8009834 <vTaskSwitchContext+0xa8>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d003      	beq.n	80097a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800979a:	4b27      	ldr	r3, [pc, #156]	@ (8009838 <vTaskSwitchContext+0xac>)
 800979c:	2201      	movs	r2, #1
 800979e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80097a0:	e042      	b.n	8009828 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80097a2:	4b25      	ldr	r3, [pc, #148]	@ (8009838 <vTaskSwitchContext+0xac>)
 80097a4:	2200      	movs	r2, #0
 80097a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097a8:	4b24      	ldr	r3, [pc, #144]	@ (800983c <vTaskSwitchContext+0xb0>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	60fb      	str	r3, [r7, #12]
 80097ae:	e011      	b.n	80097d4 <vTaskSwitchContext+0x48>
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d10b      	bne.n	80097ce <vTaskSwitchContext+0x42>
	__asm volatile
 80097b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097ba:	f383 8811 	msr	BASEPRI, r3
 80097be:	f3bf 8f6f 	isb	sy
 80097c2:	f3bf 8f4f 	dsb	sy
 80097c6:	607b      	str	r3, [r7, #4]
}
 80097c8:	bf00      	nop
 80097ca:	bf00      	nop
 80097cc:	e7fd      	b.n	80097ca <vTaskSwitchContext+0x3e>
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	3b01      	subs	r3, #1
 80097d2:	60fb      	str	r3, [r7, #12]
 80097d4:	491a      	ldr	r1, [pc, #104]	@ (8009840 <vTaskSwitchContext+0xb4>)
 80097d6:	68fa      	ldr	r2, [r7, #12]
 80097d8:	4613      	mov	r3, r2
 80097da:	009b      	lsls	r3, r3, #2
 80097dc:	4413      	add	r3, r2
 80097de:	009b      	lsls	r3, r3, #2
 80097e0:	440b      	add	r3, r1
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d0e3      	beq.n	80097b0 <vTaskSwitchContext+0x24>
 80097e8:	68fa      	ldr	r2, [r7, #12]
 80097ea:	4613      	mov	r3, r2
 80097ec:	009b      	lsls	r3, r3, #2
 80097ee:	4413      	add	r3, r2
 80097f0:	009b      	lsls	r3, r3, #2
 80097f2:	4a13      	ldr	r2, [pc, #76]	@ (8009840 <vTaskSwitchContext+0xb4>)
 80097f4:	4413      	add	r3, r2
 80097f6:	60bb      	str	r3, [r7, #8]
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	685b      	ldr	r3, [r3, #4]
 80097fc:	685a      	ldr	r2, [r3, #4]
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	605a      	str	r2, [r3, #4]
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	685a      	ldr	r2, [r3, #4]
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	3308      	adds	r3, #8
 800980a:	429a      	cmp	r2, r3
 800980c:	d104      	bne.n	8009818 <vTaskSwitchContext+0x8c>
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	685a      	ldr	r2, [r3, #4]
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	605a      	str	r2, [r3, #4]
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	68db      	ldr	r3, [r3, #12]
 800981e:	4a09      	ldr	r2, [pc, #36]	@ (8009844 <vTaskSwitchContext+0xb8>)
 8009820:	6013      	str	r3, [r2, #0]
 8009822:	4a06      	ldr	r2, [pc, #24]	@ (800983c <vTaskSwitchContext+0xb0>)
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	6013      	str	r3, [r2, #0]
}
 8009828:	bf00      	nop
 800982a:	3714      	adds	r7, #20
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr
 8009834:	200060fc 	.word	0x200060fc
 8009838:	200060e8 	.word	0x200060e8
 800983c:	200060dc 	.word	0x200060dc
 8009840:	20005c04 	.word	0x20005c04
 8009844:	20005c00 	.word	0x20005c00

08009848 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b084      	sub	sp, #16
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d10b      	bne.n	8009870 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800985c:	f383 8811 	msr	BASEPRI, r3
 8009860:	f3bf 8f6f 	isb	sy
 8009864:	f3bf 8f4f 	dsb	sy
 8009868:	60fb      	str	r3, [r7, #12]
}
 800986a:	bf00      	nop
 800986c:	bf00      	nop
 800986e:	e7fd      	b.n	800986c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009870:	4b07      	ldr	r3, [pc, #28]	@ (8009890 <vTaskPlaceOnEventList+0x48>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	3318      	adds	r3, #24
 8009876:	4619      	mov	r1, r3
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f7fe fe70 	bl	800855e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800987e:	2101      	movs	r1, #1
 8009880:	6838      	ldr	r0, [r7, #0]
 8009882:	f000 faa9 	bl	8009dd8 <prvAddCurrentTaskToDelayedList>
}
 8009886:	bf00      	nop
 8009888:	3710      	adds	r7, #16
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
 800988e:	bf00      	nop
 8009890:	20005c00 	.word	0x20005c00

08009894 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009894:	b580      	push	{r7, lr}
 8009896:	b086      	sub	sp, #24
 8009898:	af00      	add	r7, sp, #0
 800989a:	60f8      	str	r0, [r7, #12]
 800989c:	60b9      	str	r1, [r7, #8]
 800989e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d10b      	bne.n	80098be <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80098a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098aa:	f383 8811 	msr	BASEPRI, r3
 80098ae:	f3bf 8f6f 	isb	sy
 80098b2:	f3bf 8f4f 	dsb	sy
 80098b6:	617b      	str	r3, [r7, #20]
}
 80098b8:	bf00      	nop
 80098ba:	bf00      	nop
 80098bc:	e7fd      	b.n	80098ba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80098be:	4b0a      	ldr	r3, [pc, #40]	@ (80098e8 <vTaskPlaceOnEventListRestricted+0x54>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	3318      	adds	r3, #24
 80098c4:	4619      	mov	r1, r3
 80098c6:	68f8      	ldr	r0, [r7, #12]
 80098c8:	f7fe fe25 	bl	8008516 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d002      	beq.n	80098d8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80098d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80098d6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80098d8:	6879      	ldr	r1, [r7, #4]
 80098da:	68b8      	ldr	r0, [r7, #8]
 80098dc:	f000 fa7c 	bl	8009dd8 <prvAddCurrentTaskToDelayedList>
	}
 80098e0:	bf00      	nop
 80098e2:	3718      	adds	r7, #24
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}
 80098e8:	20005c00 	.word	0x20005c00

080098ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b086      	sub	sp, #24
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	68db      	ldr	r3, [r3, #12]
 80098f8:	68db      	ldr	r3, [r3, #12]
 80098fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d10b      	bne.n	800991a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009906:	f383 8811 	msr	BASEPRI, r3
 800990a:	f3bf 8f6f 	isb	sy
 800990e:	f3bf 8f4f 	dsb	sy
 8009912:	60fb      	str	r3, [r7, #12]
}
 8009914:	bf00      	nop
 8009916:	bf00      	nop
 8009918:	e7fd      	b.n	8009916 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	3318      	adds	r3, #24
 800991e:	4618      	mov	r0, r3
 8009920:	f7fe fe56 	bl	80085d0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009924:	4b1d      	ldr	r3, [pc, #116]	@ (800999c <xTaskRemoveFromEventList+0xb0>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d11d      	bne.n	8009968 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	3304      	adds	r3, #4
 8009930:	4618      	mov	r0, r3
 8009932:	f7fe fe4d 	bl	80085d0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800993a:	4b19      	ldr	r3, [pc, #100]	@ (80099a0 <xTaskRemoveFromEventList+0xb4>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	429a      	cmp	r2, r3
 8009940:	d903      	bls.n	800994a <xTaskRemoveFromEventList+0x5e>
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009946:	4a16      	ldr	r2, [pc, #88]	@ (80099a0 <xTaskRemoveFromEventList+0xb4>)
 8009948:	6013      	str	r3, [r2, #0]
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800994e:	4613      	mov	r3, r2
 8009950:	009b      	lsls	r3, r3, #2
 8009952:	4413      	add	r3, r2
 8009954:	009b      	lsls	r3, r3, #2
 8009956:	4a13      	ldr	r2, [pc, #76]	@ (80099a4 <xTaskRemoveFromEventList+0xb8>)
 8009958:	441a      	add	r2, r3
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	3304      	adds	r3, #4
 800995e:	4619      	mov	r1, r3
 8009960:	4610      	mov	r0, r2
 8009962:	f7fe fdd8 	bl	8008516 <vListInsertEnd>
 8009966:	e005      	b.n	8009974 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009968:	693b      	ldr	r3, [r7, #16]
 800996a:	3318      	adds	r3, #24
 800996c:	4619      	mov	r1, r3
 800996e:	480e      	ldr	r0, [pc, #56]	@ (80099a8 <xTaskRemoveFromEventList+0xbc>)
 8009970:	f7fe fdd1 	bl	8008516 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009974:	693b      	ldr	r3, [r7, #16]
 8009976:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009978:	4b0c      	ldr	r3, [pc, #48]	@ (80099ac <xTaskRemoveFromEventList+0xc0>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800997e:	429a      	cmp	r2, r3
 8009980:	d905      	bls.n	800998e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009982:	2301      	movs	r3, #1
 8009984:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009986:	4b0a      	ldr	r3, [pc, #40]	@ (80099b0 <xTaskRemoveFromEventList+0xc4>)
 8009988:	2201      	movs	r2, #1
 800998a:	601a      	str	r2, [r3, #0]
 800998c:	e001      	b.n	8009992 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800998e:	2300      	movs	r3, #0
 8009990:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009992:	697b      	ldr	r3, [r7, #20]
}
 8009994:	4618      	mov	r0, r3
 8009996:	3718      	adds	r7, #24
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}
 800999c:	200060fc 	.word	0x200060fc
 80099a0:	200060dc 	.word	0x200060dc
 80099a4:	20005c04 	.word	0x20005c04
 80099a8:	20006094 	.word	0x20006094
 80099ac:	20005c00 	.word	0x20005c00
 80099b0:	200060e8 	.word	0x200060e8

080099b4 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b084      	sub	sp, #16
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d10b      	bne.n	80099da <vTaskSetTimeOutState+0x26>
	__asm volatile
 80099c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099c6:	f383 8811 	msr	BASEPRI, r3
 80099ca:	f3bf 8f6f 	isb	sy
 80099ce:	f3bf 8f4f 	dsb	sy
 80099d2:	60fb      	str	r3, [r7, #12]
}
 80099d4:	bf00      	nop
 80099d6:	bf00      	nop
 80099d8:	e7fd      	b.n	80099d6 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 80099da:	f000 fedd 	bl	800a798 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 80099de:	4b07      	ldr	r3, [pc, #28]	@ (80099fc <vTaskSetTimeOutState+0x48>)
 80099e0:	681a      	ldr	r2, [r3, #0]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 80099e6:	4b06      	ldr	r3, [pc, #24]	@ (8009a00 <vTaskSetTimeOutState+0x4c>)
 80099e8:	681a      	ldr	r2, [r3, #0]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 80099ee:	f000 ff05 	bl	800a7fc <vPortExitCritical>
}
 80099f2:	bf00      	nop
 80099f4:	3710      	adds	r7, #16
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}
 80099fa:	bf00      	nop
 80099fc:	200060ec 	.word	0x200060ec
 8009a00:	200060d8 	.word	0x200060d8

08009a04 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009a04:	b480      	push	{r7}
 8009a06:	b083      	sub	sp, #12
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009a0c:	4b06      	ldr	r3, [pc, #24]	@ (8009a28 <vTaskInternalSetTimeOutState+0x24>)
 8009a0e:	681a      	ldr	r2, [r3, #0]
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009a14:	4b05      	ldr	r3, [pc, #20]	@ (8009a2c <vTaskInternalSetTimeOutState+0x28>)
 8009a16:	681a      	ldr	r2, [r3, #0]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	605a      	str	r2, [r3, #4]
}
 8009a1c:	bf00      	nop
 8009a1e:	370c      	adds	r7, #12
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr
 8009a28:	200060ec 	.word	0x200060ec
 8009a2c:	200060d8 	.word	0x200060d8

08009a30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b088      	sub	sp, #32
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
 8009a38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d10b      	bne.n	8009a58 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a44:	f383 8811 	msr	BASEPRI, r3
 8009a48:	f3bf 8f6f 	isb	sy
 8009a4c:	f3bf 8f4f 	dsb	sy
 8009a50:	613b      	str	r3, [r7, #16]
}
 8009a52:	bf00      	nop
 8009a54:	bf00      	nop
 8009a56:	e7fd      	b.n	8009a54 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d10b      	bne.n	8009a76 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a62:	f383 8811 	msr	BASEPRI, r3
 8009a66:	f3bf 8f6f 	isb	sy
 8009a6a:	f3bf 8f4f 	dsb	sy
 8009a6e:	60fb      	str	r3, [r7, #12]
}
 8009a70:	bf00      	nop
 8009a72:	bf00      	nop
 8009a74:	e7fd      	b.n	8009a72 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009a76:	f000 fe8f 	bl	800a798 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009a7a:	4b1d      	ldr	r3, [pc, #116]	@ (8009af0 <xTaskCheckForTimeOut+0xc0>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	685b      	ldr	r3, [r3, #4]
 8009a84:	69ba      	ldr	r2, [r7, #24]
 8009a86:	1ad3      	subs	r3, r2, r3
 8009a88:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009a92:	d102      	bne.n	8009a9a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009a94:	2300      	movs	r3, #0
 8009a96:	61fb      	str	r3, [r7, #28]
 8009a98:	e023      	b.n	8009ae2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681a      	ldr	r2, [r3, #0]
 8009a9e:	4b15      	ldr	r3, [pc, #84]	@ (8009af4 <xTaskCheckForTimeOut+0xc4>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	429a      	cmp	r2, r3
 8009aa4:	d007      	beq.n	8009ab6 <xTaskCheckForTimeOut+0x86>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	69ba      	ldr	r2, [r7, #24]
 8009aac:	429a      	cmp	r2, r3
 8009aae:	d302      	bcc.n	8009ab6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	61fb      	str	r3, [r7, #28]
 8009ab4:	e015      	b.n	8009ae2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	697a      	ldr	r2, [r7, #20]
 8009abc:	429a      	cmp	r2, r3
 8009abe:	d20b      	bcs.n	8009ad8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	681a      	ldr	r2, [r3, #0]
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	1ad2      	subs	r2, r2, r3
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f7ff ff99 	bl	8009a04 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	61fb      	str	r3, [r7, #28]
 8009ad6:	e004      	b.n	8009ae2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	2200      	movs	r2, #0
 8009adc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009ade:	2301      	movs	r3, #1
 8009ae0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009ae2:	f000 fe8b 	bl	800a7fc <vPortExitCritical>

	return xReturn;
 8009ae6:	69fb      	ldr	r3, [r7, #28]
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	3720      	adds	r7, #32
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}
 8009af0:	200060d8 	.word	0x200060d8
 8009af4:	200060ec 	.word	0x200060ec

08009af8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009af8:	b480      	push	{r7}
 8009afa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009afc:	4b03      	ldr	r3, [pc, #12]	@ (8009b0c <vTaskMissedYield+0x14>)
 8009afe:	2201      	movs	r2, #1
 8009b00:	601a      	str	r2, [r3, #0]
}
 8009b02:	bf00      	nop
 8009b04:	46bd      	mov	sp, r7
 8009b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0a:	4770      	bx	lr
 8009b0c:	200060e8 	.word	0x200060e8

08009b10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b082      	sub	sp, #8
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009b18:	f000 f852 	bl	8009bc0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009b1c:	4b06      	ldr	r3, [pc, #24]	@ (8009b38 <prvIdleTask+0x28>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	2b01      	cmp	r3, #1
 8009b22:	d9f9      	bls.n	8009b18 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009b24:	4b05      	ldr	r3, [pc, #20]	@ (8009b3c <prvIdleTask+0x2c>)
 8009b26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b2a:	601a      	str	r2, [r3, #0]
 8009b2c:	f3bf 8f4f 	dsb	sy
 8009b30:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009b34:	e7f0      	b.n	8009b18 <prvIdleTask+0x8>
 8009b36:	bf00      	nop
 8009b38:	20005c04 	.word	0x20005c04
 8009b3c:	e000ed04 	.word	0xe000ed04

08009b40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b082      	sub	sp, #8
 8009b44:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009b46:	2300      	movs	r3, #0
 8009b48:	607b      	str	r3, [r7, #4]
 8009b4a:	e00c      	b.n	8009b66 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009b4c:	687a      	ldr	r2, [r7, #4]
 8009b4e:	4613      	mov	r3, r2
 8009b50:	009b      	lsls	r3, r3, #2
 8009b52:	4413      	add	r3, r2
 8009b54:	009b      	lsls	r3, r3, #2
 8009b56:	4a12      	ldr	r2, [pc, #72]	@ (8009ba0 <prvInitialiseTaskLists+0x60>)
 8009b58:	4413      	add	r3, r2
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f7fe fcae 	bl	80084bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	3301      	adds	r3, #1
 8009b64:	607b      	str	r3, [r7, #4]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2b37      	cmp	r3, #55	@ 0x37
 8009b6a:	d9ef      	bls.n	8009b4c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009b6c:	480d      	ldr	r0, [pc, #52]	@ (8009ba4 <prvInitialiseTaskLists+0x64>)
 8009b6e:	f7fe fca5 	bl	80084bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009b72:	480d      	ldr	r0, [pc, #52]	@ (8009ba8 <prvInitialiseTaskLists+0x68>)
 8009b74:	f7fe fca2 	bl	80084bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009b78:	480c      	ldr	r0, [pc, #48]	@ (8009bac <prvInitialiseTaskLists+0x6c>)
 8009b7a:	f7fe fc9f 	bl	80084bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009b7e:	480c      	ldr	r0, [pc, #48]	@ (8009bb0 <prvInitialiseTaskLists+0x70>)
 8009b80:	f7fe fc9c 	bl	80084bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009b84:	480b      	ldr	r0, [pc, #44]	@ (8009bb4 <prvInitialiseTaskLists+0x74>)
 8009b86:	f7fe fc99 	bl	80084bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8009bb8 <prvInitialiseTaskLists+0x78>)
 8009b8c:	4a05      	ldr	r2, [pc, #20]	@ (8009ba4 <prvInitialiseTaskLists+0x64>)
 8009b8e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009b90:	4b0a      	ldr	r3, [pc, #40]	@ (8009bbc <prvInitialiseTaskLists+0x7c>)
 8009b92:	4a05      	ldr	r2, [pc, #20]	@ (8009ba8 <prvInitialiseTaskLists+0x68>)
 8009b94:	601a      	str	r2, [r3, #0]
}
 8009b96:	bf00      	nop
 8009b98:	3708      	adds	r7, #8
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}
 8009b9e:	bf00      	nop
 8009ba0:	20005c04 	.word	0x20005c04
 8009ba4:	20006064 	.word	0x20006064
 8009ba8:	20006078 	.word	0x20006078
 8009bac:	20006094 	.word	0x20006094
 8009bb0:	200060a8 	.word	0x200060a8
 8009bb4:	200060c0 	.word	0x200060c0
 8009bb8:	2000608c 	.word	0x2000608c
 8009bbc:	20006090 	.word	0x20006090

08009bc0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b082      	sub	sp, #8
 8009bc4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009bc6:	e019      	b.n	8009bfc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009bc8:	f000 fde6 	bl	800a798 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bcc:	4b10      	ldr	r3, [pc, #64]	@ (8009c10 <prvCheckTasksWaitingTermination+0x50>)
 8009bce:	68db      	ldr	r3, [r3, #12]
 8009bd0:	68db      	ldr	r3, [r3, #12]
 8009bd2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	3304      	adds	r3, #4
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f7fe fcf9 	bl	80085d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009bde:	4b0d      	ldr	r3, [pc, #52]	@ (8009c14 <prvCheckTasksWaitingTermination+0x54>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	3b01      	subs	r3, #1
 8009be4:	4a0b      	ldr	r2, [pc, #44]	@ (8009c14 <prvCheckTasksWaitingTermination+0x54>)
 8009be6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009be8:	4b0b      	ldr	r3, [pc, #44]	@ (8009c18 <prvCheckTasksWaitingTermination+0x58>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	3b01      	subs	r3, #1
 8009bee:	4a0a      	ldr	r2, [pc, #40]	@ (8009c18 <prvCheckTasksWaitingTermination+0x58>)
 8009bf0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009bf2:	f000 fe03 	bl	800a7fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f000 f810 	bl	8009c1c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009bfc:	4b06      	ldr	r3, [pc, #24]	@ (8009c18 <prvCheckTasksWaitingTermination+0x58>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d1e1      	bne.n	8009bc8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009c04:	bf00      	nop
 8009c06:	bf00      	nop
 8009c08:	3708      	adds	r7, #8
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}
 8009c0e:	bf00      	nop
 8009c10:	200060a8 	.word	0x200060a8
 8009c14:	200060d4 	.word	0x200060d4
 8009c18:	200060bc 	.word	0x200060bc

08009c1c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b084      	sub	sp, #16
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d108      	bne.n	8009c40 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c32:	4618      	mov	r0, r3
 8009c34:	f000 ffa0 	bl	800ab78 <vPortFree>
				vPortFree( pxTCB );
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f000 ff9d 	bl	800ab78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009c3e:	e019      	b.n	8009c74 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009c46:	2b01      	cmp	r3, #1
 8009c48:	d103      	bne.n	8009c52 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f000 ff94 	bl	800ab78 <vPortFree>
	}
 8009c50:	e010      	b.n	8009c74 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009c58:	2b02      	cmp	r3, #2
 8009c5a:	d00b      	beq.n	8009c74 <prvDeleteTCB+0x58>
	__asm volatile
 8009c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c60:	f383 8811 	msr	BASEPRI, r3
 8009c64:	f3bf 8f6f 	isb	sy
 8009c68:	f3bf 8f4f 	dsb	sy
 8009c6c:	60fb      	str	r3, [r7, #12]
}
 8009c6e:	bf00      	nop
 8009c70:	bf00      	nop
 8009c72:	e7fd      	b.n	8009c70 <prvDeleteTCB+0x54>
	}
 8009c74:	bf00      	nop
 8009c76:	3710      	adds	r7, #16
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b083      	sub	sp, #12
 8009c80:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c82:	4b0c      	ldr	r3, [pc, #48]	@ (8009cb4 <prvResetNextTaskUnblockTime+0x38>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d104      	bne.n	8009c96 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8009cb8 <prvResetNextTaskUnblockTime+0x3c>)
 8009c8e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009c92:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009c94:	e008      	b.n	8009ca8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c96:	4b07      	ldr	r3, [pc, #28]	@ (8009cb4 <prvResetNextTaskUnblockTime+0x38>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	68db      	ldr	r3, [r3, #12]
 8009c9c:	68db      	ldr	r3, [r3, #12]
 8009c9e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	4a04      	ldr	r2, [pc, #16]	@ (8009cb8 <prvResetNextTaskUnblockTime+0x3c>)
 8009ca6:	6013      	str	r3, [r2, #0]
}
 8009ca8:	bf00      	nop
 8009caa:	370c      	adds	r7, #12
 8009cac:	46bd      	mov	sp, r7
 8009cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb2:	4770      	bx	lr
 8009cb4:	2000608c 	.word	0x2000608c
 8009cb8:	200060f4 	.word	0x200060f4

08009cbc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b083      	sub	sp, #12
 8009cc0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009cc2:	4b0b      	ldr	r3, [pc, #44]	@ (8009cf0 <xTaskGetSchedulerState+0x34>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d102      	bne.n	8009cd0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009cca:	2301      	movs	r3, #1
 8009ccc:	607b      	str	r3, [r7, #4]
 8009cce:	e008      	b.n	8009ce2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009cd0:	4b08      	ldr	r3, [pc, #32]	@ (8009cf4 <xTaskGetSchedulerState+0x38>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d102      	bne.n	8009cde <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009cd8:	2302      	movs	r3, #2
 8009cda:	607b      	str	r3, [r7, #4]
 8009cdc:	e001      	b.n	8009ce2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009ce2:	687b      	ldr	r3, [r7, #4]
	}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	370c      	adds	r7, #12
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cee:	4770      	bx	lr
 8009cf0:	200060e0 	.word	0x200060e0
 8009cf4:	200060fc 	.word	0x200060fc

08009cf8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b086      	sub	sp, #24
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009d04:	2300      	movs	r3, #0
 8009d06:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d058      	beq.n	8009dc0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009d0e:	4b2f      	ldr	r3, [pc, #188]	@ (8009dcc <xTaskPriorityDisinherit+0xd4>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	693a      	ldr	r2, [r7, #16]
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d00b      	beq.n	8009d30 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d1c:	f383 8811 	msr	BASEPRI, r3
 8009d20:	f3bf 8f6f 	isb	sy
 8009d24:	f3bf 8f4f 	dsb	sy
 8009d28:	60fb      	str	r3, [r7, #12]
}
 8009d2a:	bf00      	nop
 8009d2c:	bf00      	nop
 8009d2e:	e7fd      	b.n	8009d2c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d10b      	bne.n	8009d50 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d3c:	f383 8811 	msr	BASEPRI, r3
 8009d40:	f3bf 8f6f 	isb	sy
 8009d44:	f3bf 8f4f 	dsb	sy
 8009d48:	60bb      	str	r3, [r7, #8]
}
 8009d4a:	bf00      	nop
 8009d4c:	bf00      	nop
 8009d4e:	e7fd      	b.n	8009d4c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d54:	1e5a      	subs	r2, r3, #1
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d62:	429a      	cmp	r2, r3
 8009d64:	d02c      	beq.n	8009dc0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009d66:	693b      	ldr	r3, [r7, #16]
 8009d68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d128      	bne.n	8009dc0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	3304      	adds	r3, #4
 8009d72:	4618      	mov	r0, r3
 8009d74:	f7fe fc2c 	bl	80085d0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d84:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009d8c:	693b      	ldr	r3, [r7, #16]
 8009d8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d90:	4b0f      	ldr	r3, [pc, #60]	@ (8009dd0 <xTaskPriorityDisinherit+0xd8>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	429a      	cmp	r2, r3
 8009d96:	d903      	bls.n	8009da0 <xTaskPriorityDisinherit+0xa8>
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d9c:	4a0c      	ldr	r2, [pc, #48]	@ (8009dd0 <xTaskPriorityDisinherit+0xd8>)
 8009d9e:	6013      	str	r3, [r2, #0]
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009da4:	4613      	mov	r3, r2
 8009da6:	009b      	lsls	r3, r3, #2
 8009da8:	4413      	add	r3, r2
 8009daa:	009b      	lsls	r3, r3, #2
 8009dac:	4a09      	ldr	r2, [pc, #36]	@ (8009dd4 <xTaskPriorityDisinherit+0xdc>)
 8009dae:	441a      	add	r2, r3
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	3304      	adds	r3, #4
 8009db4:	4619      	mov	r1, r3
 8009db6:	4610      	mov	r0, r2
 8009db8:	f7fe fbad 	bl	8008516 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009dc0:	697b      	ldr	r3, [r7, #20]
	}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3718      	adds	r7, #24
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}
 8009dca:	bf00      	nop
 8009dcc:	20005c00 	.word	0x20005c00
 8009dd0:	200060dc 	.word	0x200060dc
 8009dd4:	20005c04 	.word	0x20005c04

08009dd8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b084      	sub	sp, #16
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009de2:	4b21      	ldr	r3, [pc, #132]	@ (8009e68 <prvAddCurrentTaskToDelayedList+0x90>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009de8:	4b20      	ldr	r3, [pc, #128]	@ (8009e6c <prvAddCurrentTaskToDelayedList+0x94>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	3304      	adds	r3, #4
 8009dee:	4618      	mov	r0, r3
 8009df0:	f7fe fbee 	bl	80085d0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009dfa:	d10a      	bne.n	8009e12 <prvAddCurrentTaskToDelayedList+0x3a>
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d007      	beq.n	8009e12 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e02:	4b1a      	ldr	r3, [pc, #104]	@ (8009e6c <prvAddCurrentTaskToDelayedList+0x94>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	3304      	adds	r3, #4
 8009e08:	4619      	mov	r1, r3
 8009e0a:	4819      	ldr	r0, [pc, #100]	@ (8009e70 <prvAddCurrentTaskToDelayedList+0x98>)
 8009e0c:	f7fe fb83 	bl	8008516 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009e10:	e026      	b.n	8009e60 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009e12:	68fa      	ldr	r2, [r7, #12]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	4413      	add	r3, r2
 8009e18:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009e1a:	4b14      	ldr	r3, [pc, #80]	@ (8009e6c <prvAddCurrentTaskToDelayedList+0x94>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	68ba      	ldr	r2, [r7, #8]
 8009e20:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009e22:	68ba      	ldr	r2, [r7, #8]
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	429a      	cmp	r2, r3
 8009e28:	d209      	bcs.n	8009e3e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e2a:	4b12      	ldr	r3, [pc, #72]	@ (8009e74 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009e2c:	681a      	ldr	r2, [r3, #0]
 8009e2e:	4b0f      	ldr	r3, [pc, #60]	@ (8009e6c <prvAddCurrentTaskToDelayedList+0x94>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	3304      	adds	r3, #4
 8009e34:	4619      	mov	r1, r3
 8009e36:	4610      	mov	r0, r2
 8009e38:	f7fe fb91 	bl	800855e <vListInsert>
}
 8009e3c:	e010      	b.n	8009e60 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8009e78 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009e40:	681a      	ldr	r2, [r3, #0]
 8009e42:	4b0a      	ldr	r3, [pc, #40]	@ (8009e6c <prvAddCurrentTaskToDelayedList+0x94>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	3304      	adds	r3, #4
 8009e48:	4619      	mov	r1, r3
 8009e4a:	4610      	mov	r0, r2
 8009e4c:	f7fe fb87 	bl	800855e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009e50:	4b0a      	ldr	r3, [pc, #40]	@ (8009e7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	68ba      	ldr	r2, [r7, #8]
 8009e56:	429a      	cmp	r2, r3
 8009e58:	d202      	bcs.n	8009e60 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009e5a:	4a08      	ldr	r2, [pc, #32]	@ (8009e7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	6013      	str	r3, [r2, #0]
}
 8009e60:	bf00      	nop
 8009e62:	3710      	adds	r7, #16
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}
 8009e68:	200060d8 	.word	0x200060d8
 8009e6c:	20005c00 	.word	0x20005c00
 8009e70:	200060c0 	.word	0x200060c0
 8009e74:	20006090 	.word	0x20006090
 8009e78:	2000608c 	.word	0x2000608c
 8009e7c:	200060f4 	.word	0x200060f4

08009e80 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b08a      	sub	sp, #40	@ 0x28
 8009e84:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009e86:	2300      	movs	r3, #0
 8009e88:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009e8a:	f000 fb13 	bl	800a4b4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009e8e:	4b1d      	ldr	r3, [pc, #116]	@ (8009f04 <xTimerCreateTimerTask+0x84>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d021      	beq.n	8009eda <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009e96:	2300      	movs	r3, #0
 8009e98:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009e9e:	1d3a      	adds	r2, r7, #4
 8009ea0:	f107 0108 	add.w	r1, r7, #8
 8009ea4:	f107 030c 	add.w	r3, r7, #12
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f7fe faed 	bl	8008488 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009eae:	6879      	ldr	r1, [r7, #4]
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	68fa      	ldr	r2, [r7, #12]
 8009eb4:	9202      	str	r2, [sp, #8]
 8009eb6:	9301      	str	r3, [sp, #4]
 8009eb8:	2302      	movs	r3, #2
 8009eba:	9300      	str	r3, [sp, #0]
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	460a      	mov	r2, r1
 8009ec0:	4911      	ldr	r1, [pc, #68]	@ (8009f08 <xTimerCreateTimerTask+0x88>)
 8009ec2:	4812      	ldr	r0, [pc, #72]	@ (8009f0c <xTimerCreateTimerTask+0x8c>)
 8009ec4:	f7ff f8a8 	bl	8009018 <xTaskCreateStatic>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	4a11      	ldr	r2, [pc, #68]	@ (8009f10 <xTimerCreateTimerTask+0x90>)
 8009ecc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009ece:	4b10      	ldr	r3, [pc, #64]	@ (8009f10 <xTimerCreateTimerTask+0x90>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d001      	beq.n	8009eda <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d10b      	bne.n	8009ef8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ee4:	f383 8811 	msr	BASEPRI, r3
 8009ee8:	f3bf 8f6f 	isb	sy
 8009eec:	f3bf 8f4f 	dsb	sy
 8009ef0:	613b      	str	r3, [r7, #16]
}
 8009ef2:	bf00      	nop
 8009ef4:	bf00      	nop
 8009ef6:	e7fd      	b.n	8009ef4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009ef8:	697b      	ldr	r3, [r7, #20]
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3718      	adds	r7, #24
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}
 8009f02:	bf00      	nop
 8009f04:	20006130 	.word	0x20006130
 8009f08:	0801b240 	.word	0x0801b240
 8009f0c:	0800a04d 	.word	0x0800a04d
 8009f10:	20006134 	.word	0x20006134

08009f14 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b08a      	sub	sp, #40	@ 0x28
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	60f8      	str	r0, [r7, #12]
 8009f1c:	60b9      	str	r1, [r7, #8]
 8009f1e:	607a      	str	r2, [r7, #4]
 8009f20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009f22:	2300      	movs	r3, #0
 8009f24:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d10b      	bne.n	8009f44 <xTimerGenericCommand+0x30>
	__asm volatile
 8009f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f30:	f383 8811 	msr	BASEPRI, r3
 8009f34:	f3bf 8f6f 	isb	sy
 8009f38:	f3bf 8f4f 	dsb	sy
 8009f3c:	623b      	str	r3, [r7, #32]
}
 8009f3e:	bf00      	nop
 8009f40:	bf00      	nop
 8009f42:	e7fd      	b.n	8009f40 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009f44:	4b19      	ldr	r3, [pc, #100]	@ (8009fac <xTimerGenericCommand+0x98>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d02a      	beq.n	8009fa2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	2b05      	cmp	r3, #5
 8009f5c:	dc18      	bgt.n	8009f90 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009f5e:	f7ff fead 	bl	8009cbc <xTaskGetSchedulerState>
 8009f62:	4603      	mov	r3, r0
 8009f64:	2b02      	cmp	r3, #2
 8009f66:	d109      	bne.n	8009f7c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009f68:	4b10      	ldr	r3, [pc, #64]	@ (8009fac <xTimerGenericCommand+0x98>)
 8009f6a:	6818      	ldr	r0, [r3, #0]
 8009f6c:	f107 0110 	add.w	r1, r7, #16
 8009f70:	2300      	movs	r3, #0
 8009f72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f74:	f7fe fc60 	bl	8008838 <xQueueGenericSend>
 8009f78:	6278      	str	r0, [r7, #36]	@ 0x24
 8009f7a:	e012      	b.n	8009fa2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8009fac <xTimerGenericCommand+0x98>)
 8009f7e:	6818      	ldr	r0, [r3, #0]
 8009f80:	f107 0110 	add.w	r1, r7, #16
 8009f84:	2300      	movs	r3, #0
 8009f86:	2200      	movs	r2, #0
 8009f88:	f7fe fc56 	bl	8008838 <xQueueGenericSend>
 8009f8c:	6278      	str	r0, [r7, #36]	@ 0x24
 8009f8e:	e008      	b.n	8009fa2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009f90:	4b06      	ldr	r3, [pc, #24]	@ (8009fac <xTimerGenericCommand+0x98>)
 8009f92:	6818      	ldr	r0, [r3, #0]
 8009f94:	f107 0110 	add.w	r1, r7, #16
 8009f98:	2300      	movs	r3, #0
 8009f9a:	683a      	ldr	r2, [r7, #0]
 8009f9c:	f7fe fd4e 	bl	8008a3c <xQueueGenericSendFromISR>
 8009fa0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3728      	adds	r7, #40	@ 0x28
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}
 8009fac:	20006130 	.word	0x20006130

08009fb0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b088      	sub	sp, #32
 8009fb4:	af02      	add	r7, sp, #8
 8009fb6:	6078      	str	r0, [r7, #4]
 8009fb8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fba:	4b23      	ldr	r3, [pc, #140]	@ (800a048 <prvProcessExpiredTimer+0x98>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	68db      	ldr	r3, [r3, #12]
 8009fc0:	68db      	ldr	r3, [r3, #12]
 8009fc2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	3304      	adds	r3, #4
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f7fe fb01 	bl	80085d0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009fd4:	f003 0304 	and.w	r3, r3, #4
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d023      	beq.n	800a024 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	699a      	ldr	r2, [r3, #24]
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	18d1      	adds	r1, r2, r3
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	683a      	ldr	r2, [r7, #0]
 8009fe8:	6978      	ldr	r0, [r7, #20]
 8009fea:	f000 f8d5 	bl	800a198 <prvInsertTimerInActiveList>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d020      	beq.n	800a036 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	9300      	str	r3, [sp, #0]
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	687a      	ldr	r2, [r7, #4]
 8009ffc:	2100      	movs	r1, #0
 8009ffe:	6978      	ldr	r0, [r7, #20]
 800a000:	f7ff ff88 	bl	8009f14 <xTimerGenericCommand>
 800a004:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d114      	bne.n	800a036 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800a00c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a010:	f383 8811 	msr	BASEPRI, r3
 800a014:	f3bf 8f6f 	isb	sy
 800a018:	f3bf 8f4f 	dsb	sy
 800a01c:	60fb      	str	r3, [r7, #12]
}
 800a01e:	bf00      	nop
 800a020:	bf00      	nop
 800a022:	e7fd      	b.n	800a020 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a024:	697b      	ldr	r3, [r7, #20]
 800a026:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a02a:	f023 0301 	bic.w	r3, r3, #1
 800a02e:	b2da      	uxtb	r2, r3
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	6a1b      	ldr	r3, [r3, #32]
 800a03a:	6978      	ldr	r0, [r7, #20]
 800a03c:	4798      	blx	r3
}
 800a03e:	bf00      	nop
 800a040:	3718      	adds	r7, #24
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}
 800a046:	bf00      	nop
 800a048:	20006128 	.word	0x20006128

0800a04c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b084      	sub	sp, #16
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a054:	f107 0308 	add.w	r3, r7, #8
 800a058:	4618      	mov	r0, r3
 800a05a:	f000 f859 	bl	800a110 <prvGetNextExpireTime>
 800a05e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	4619      	mov	r1, r3
 800a064:	68f8      	ldr	r0, [r7, #12]
 800a066:	f000 f805 	bl	800a074 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a06a:	f000 f8d7 	bl	800a21c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a06e:	bf00      	nop
 800a070:	e7f0      	b.n	800a054 <prvTimerTask+0x8>
	...

0800a074 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b084      	sub	sp, #16
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
 800a07c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a07e:	f7ff fa0f 	bl	80094a0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a082:	f107 0308 	add.w	r3, r7, #8
 800a086:	4618      	mov	r0, r3
 800a088:	f000 f866 	bl	800a158 <prvSampleTimeNow>
 800a08c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d130      	bne.n	800a0f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d10a      	bne.n	800a0b0 <prvProcessTimerOrBlockTask+0x3c>
 800a09a:	687a      	ldr	r2, [r7, #4]
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	d806      	bhi.n	800a0b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a0a2:	f7ff fa0b 	bl	80094bc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a0a6:	68f9      	ldr	r1, [r7, #12]
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f7ff ff81 	bl	8009fb0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a0ae:	e024      	b.n	800a0fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d008      	beq.n	800a0c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a0b6:	4b13      	ldr	r3, [pc, #76]	@ (800a104 <prvProcessTimerOrBlockTask+0x90>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d101      	bne.n	800a0c4 <prvProcessTimerOrBlockTask+0x50>
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	e000      	b.n	800a0c6 <prvProcessTimerOrBlockTask+0x52>
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a0c8:	4b0f      	ldr	r3, [pc, #60]	@ (800a108 <prvProcessTimerOrBlockTask+0x94>)
 800a0ca:	6818      	ldr	r0, [r3, #0]
 800a0cc:	687a      	ldr	r2, [r7, #4]
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	1ad3      	subs	r3, r2, r3
 800a0d2:	683a      	ldr	r2, [r7, #0]
 800a0d4:	4619      	mov	r1, r3
 800a0d6:	f7fe ff6b 	bl	8008fb0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a0da:	f7ff f9ef 	bl	80094bc <xTaskResumeAll>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d10a      	bne.n	800a0fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a0e4:	4b09      	ldr	r3, [pc, #36]	@ (800a10c <prvProcessTimerOrBlockTask+0x98>)
 800a0e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a0ea:	601a      	str	r2, [r3, #0]
 800a0ec:	f3bf 8f4f 	dsb	sy
 800a0f0:	f3bf 8f6f 	isb	sy
}
 800a0f4:	e001      	b.n	800a0fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a0f6:	f7ff f9e1 	bl	80094bc <xTaskResumeAll>
}
 800a0fa:	bf00      	nop
 800a0fc:	3710      	adds	r7, #16
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}
 800a102:	bf00      	nop
 800a104:	2000612c 	.word	0x2000612c
 800a108:	20006130 	.word	0x20006130
 800a10c:	e000ed04 	.word	0xe000ed04

0800a110 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a110:	b480      	push	{r7}
 800a112:	b085      	sub	sp, #20
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a118:	4b0e      	ldr	r3, [pc, #56]	@ (800a154 <prvGetNextExpireTime+0x44>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d101      	bne.n	800a126 <prvGetNextExpireTime+0x16>
 800a122:	2201      	movs	r2, #1
 800a124:	e000      	b.n	800a128 <prvGetNextExpireTime+0x18>
 800a126:	2200      	movs	r2, #0
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d105      	bne.n	800a140 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a134:	4b07      	ldr	r3, [pc, #28]	@ (800a154 <prvGetNextExpireTime+0x44>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	68db      	ldr	r3, [r3, #12]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	60fb      	str	r3, [r7, #12]
 800a13e:	e001      	b.n	800a144 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a140:	2300      	movs	r3, #0
 800a142:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a144:	68fb      	ldr	r3, [r7, #12]
}
 800a146:	4618      	mov	r0, r3
 800a148:	3714      	adds	r7, #20
 800a14a:	46bd      	mov	sp, r7
 800a14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a150:	4770      	bx	lr
 800a152:	bf00      	nop
 800a154:	20006128 	.word	0x20006128

0800a158 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b084      	sub	sp, #16
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a160:	f7ff fa4a 	bl	80095f8 <xTaskGetTickCount>
 800a164:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a166:	4b0b      	ldr	r3, [pc, #44]	@ (800a194 <prvSampleTimeNow+0x3c>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	68fa      	ldr	r2, [r7, #12]
 800a16c:	429a      	cmp	r2, r3
 800a16e:	d205      	bcs.n	800a17c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a170:	f000 f93a 	bl	800a3e8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2201      	movs	r2, #1
 800a178:	601a      	str	r2, [r3, #0]
 800a17a:	e002      	b.n	800a182 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2200      	movs	r2, #0
 800a180:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a182:	4a04      	ldr	r2, [pc, #16]	@ (800a194 <prvSampleTimeNow+0x3c>)
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a188:	68fb      	ldr	r3, [r7, #12]
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	3710      	adds	r7, #16
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}
 800a192:	bf00      	nop
 800a194:	20006138 	.word	0x20006138

0800a198 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b086      	sub	sp, #24
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	60f8      	str	r0, [r7, #12]
 800a1a0:	60b9      	str	r1, [r7, #8]
 800a1a2:	607a      	str	r2, [r7, #4]
 800a1a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	68ba      	ldr	r2, [r7, #8]
 800a1ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	68fa      	ldr	r2, [r7, #12]
 800a1b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a1b6:	68ba      	ldr	r2, [r7, #8]
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	429a      	cmp	r2, r3
 800a1bc:	d812      	bhi.n	800a1e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1be:	687a      	ldr	r2, [r7, #4]
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	1ad2      	subs	r2, r2, r3
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	699b      	ldr	r3, [r3, #24]
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d302      	bcc.n	800a1d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	617b      	str	r3, [r7, #20]
 800a1d0:	e01b      	b.n	800a20a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a1d2:	4b10      	ldr	r3, [pc, #64]	@ (800a214 <prvInsertTimerInActiveList+0x7c>)
 800a1d4:	681a      	ldr	r2, [r3, #0]
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	3304      	adds	r3, #4
 800a1da:	4619      	mov	r1, r3
 800a1dc:	4610      	mov	r0, r2
 800a1de:	f7fe f9be 	bl	800855e <vListInsert>
 800a1e2:	e012      	b.n	800a20a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a1e4:	687a      	ldr	r2, [r7, #4]
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	d206      	bcs.n	800a1fa <prvInsertTimerInActiveList+0x62>
 800a1ec:	68ba      	ldr	r2, [r7, #8]
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	d302      	bcc.n	800a1fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	617b      	str	r3, [r7, #20]
 800a1f8:	e007      	b.n	800a20a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a1fa:	4b07      	ldr	r3, [pc, #28]	@ (800a218 <prvInsertTimerInActiveList+0x80>)
 800a1fc:	681a      	ldr	r2, [r3, #0]
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	3304      	adds	r3, #4
 800a202:	4619      	mov	r1, r3
 800a204:	4610      	mov	r0, r2
 800a206:	f7fe f9aa 	bl	800855e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a20a:	697b      	ldr	r3, [r7, #20]
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3718      	adds	r7, #24
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}
 800a214:	2000612c 	.word	0x2000612c
 800a218:	20006128 	.word	0x20006128

0800a21c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b08e      	sub	sp, #56	@ 0x38
 800a220:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a222:	e0ce      	b.n	800a3c2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2b00      	cmp	r3, #0
 800a228:	da19      	bge.n	800a25e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a22a:	1d3b      	adds	r3, r7, #4
 800a22c:	3304      	adds	r3, #4
 800a22e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a232:	2b00      	cmp	r3, #0
 800a234:	d10b      	bne.n	800a24e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a23a:	f383 8811 	msr	BASEPRI, r3
 800a23e:	f3bf 8f6f 	isb	sy
 800a242:	f3bf 8f4f 	dsb	sy
 800a246:	61fb      	str	r3, [r7, #28]
}
 800a248:	bf00      	nop
 800a24a:	bf00      	nop
 800a24c:	e7fd      	b.n	800a24a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a24e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a254:	6850      	ldr	r0, [r2, #4]
 800a256:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a258:	6892      	ldr	r2, [r2, #8]
 800a25a:	4611      	mov	r1, r2
 800a25c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2b00      	cmp	r3, #0
 800a262:	f2c0 80ae 	blt.w	800a3c2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a26a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a26c:	695b      	ldr	r3, [r3, #20]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d004      	beq.n	800a27c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a274:	3304      	adds	r3, #4
 800a276:	4618      	mov	r0, r3
 800a278:	f7fe f9aa 	bl	80085d0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a27c:	463b      	mov	r3, r7
 800a27e:	4618      	mov	r0, r3
 800a280:	f7ff ff6a 	bl	800a158 <prvSampleTimeNow>
 800a284:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2b09      	cmp	r3, #9
 800a28a:	f200 8097 	bhi.w	800a3bc <prvProcessReceivedCommands+0x1a0>
 800a28e:	a201      	add	r2, pc, #4	@ (adr r2, 800a294 <prvProcessReceivedCommands+0x78>)
 800a290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a294:	0800a2bd 	.word	0x0800a2bd
 800a298:	0800a2bd 	.word	0x0800a2bd
 800a29c:	0800a2bd 	.word	0x0800a2bd
 800a2a0:	0800a333 	.word	0x0800a333
 800a2a4:	0800a347 	.word	0x0800a347
 800a2a8:	0800a393 	.word	0x0800a393
 800a2ac:	0800a2bd 	.word	0x0800a2bd
 800a2b0:	0800a2bd 	.word	0x0800a2bd
 800a2b4:	0800a333 	.word	0x0800a333
 800a2b8:	0800a347 	.word	0x0800a347
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a2bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a2c2:	f043 0301 	orr.w	r3, r3, #1
 800a2c6:	b2da      	uxtb	r2, r3
 800a2c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a2ce:	68ba      	ldr	r2, [r7, #8]
 800a2d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2d2:	699b      	ldr	r3, [r3, #24]
 800a2d4:	18d1      	adds	r1, r2, r3
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a2da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a2dc:	f7ff ff5c 	bl	800a198 <prvInsertTimerInActiveList>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d06c      	beq.n	800a3c0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a2e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2e8:	6a1b      	ldr	r3, [r3, #32]
 800a2ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a2ec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a2ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a2f4:	f003 0304 	and.w	r3, r3, #4
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d061      	beq.n	800a3c0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a2fc:	68ba      	ldr	r2, [r7, #8]
 800a2fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a300:	699b      	ldr	r3, [r3, #24]
 800a302:	441a      	add	r2, r3
 800a304:	2300      	movs	r3, #0
 800a306:	9300      	str	r3, [sp, #0]
 800a308:	2300      	movs	r3, #0
 800a30a:	2100      	movs	r1, #0
 800a30c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a30e:	f7ff fe01 	bl	8009f14 <xTimerGenericCommand>
 800a312:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a314:	6a3b      	ldr	r3, [r7, #32]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d152      	bne.n	800a3c0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a31a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a31e:	f383 8811 	msr	BASEPRI, r3
 800a322:	f3bf 8f6f 	isb	sy
 800a326:	f3bf 8f4f 	dsb	sy
 800a32a:	61bb      	str	r3, [r7, #24]
}
 800a32c:	bf00      	nop
 800a32e:	bf00      	nop
 800a330:	e7fd      	b.n	800a32e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a334:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a338:	f023 0301 	bic.w	r3, r3, #1
 800a33c:	b2da      	uxtb	r2, r3
 800a33e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a340:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a344:	e03d      	b.n	800a3c2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a348:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a34c:	f043 0301 	orr.w	r3, r3, #1
 800a350:	b2da      	uxtb	r2, r3
 800a352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a354:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a358:	68ba      	ldr	r2, [r7, #8]
 800a35a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a35c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a35e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a360:	699b      	ldr	r3, [r3, #24]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d10b      	bne.n	800a37e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a36a:	f383 8811 	msr	BASEPRI, r3
 800a36e:	f3bf 8f6f 	isb	sy
 800a372:	f3bf 8f4f 	dsb	sy
 800a376:	617b      	str	r3, [r7, #20]
}
 800a378:	bf00      	nop
 800a37a:	bf00      	nop
 800a37c:	e7fd      	b.n	800a37a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a37e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a380:	699a      	ldr	r2, [r3, #24]
 800a382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a384:	18d1      	adds	r1, r2, r3
 800a386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a388:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a38a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a38c:	f7ff ff04 	bl	800a198 <prvInsertTimerInActiveList>
					break;
 800a390:	e017      	b.n	800a3c2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a394:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a398:	f003 0302 	and.w	r3, r3, #2
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d103      	bne.n	800a3a8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a3a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a3a2:	f000 fbe9 	bl	800ab78 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a3a6:	e00c      	b.n	800a3c2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a3a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a3ae:	f023 0301 	bic.w	r3, r3, #1
 800a3b2:	b2da      	uxtb	r2, r3
 800a3b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a3ba:	e002      	b.n	800a3c2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a3bc:	bf00      	nop
 800a3be:	e000      	b.n	800a3c2 <prvProcessReceivedCommands+0x1a6>
					break;
 800a3c0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a3c2:	4b08      	ldr	r3, [pc, #32]	@ (800a3e4 <prvProcessReceivedCommands+0x1c8>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	1d39      	adds	r1, r7, #4
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f7fe fbd4 	bl	8008b78 <xQueueReceive>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	f47f af26 	bne.w	800a224 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a3d8:	bf00      	nop
 800a3da:	bf00      	nop
 800a3dc:	3730      	adds	r7, #48	@ 0x30
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}
 800a3e2:	bf00      	nop
 800a3e4:	20006130 	.word	0x20006130

0800a3e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b088      	sub	sp, #32
 800a3ec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a3ee:	e049      	b.n	800a484 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a3f0:	4b2e      	ldr	r3, [pc, #184]	@ (800a4ac <prvSwitchTimerLists+0xc4>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	68db      	ldr	r3, [r3, #12]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3fa:	4b2c      	ldr	r3, [pc, #176]	@ (800a4ac <prvSwitchTimerLists+0xc4>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	68db      	ldr	r3, [r3, #12]
 800a400:	68db      	ldr	r3, [r3, #12]
 800a402:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	3304      	adds	r3, #4
 800a408:	4618      	mov	r0, r3
 800a40a:	f7fe f8e1 	bl	80085d0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	6a1b      	ldr	r3, [r3, #32]
 800a412:	68f8      	ldr	r0, [r7, #12]
 800a414:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a41c:	f003 0304 	and.w	r3, r3, #4
 800a420:	2b00      	cmp	r3, #0
 800a422:	d02f      	beq.n	800a484 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	699b      	ldr	r3, [r3, #24]
 800a428:	693a      	ldr	r2, [r7, #16]
 800a42a:	4413      	add	r3, r2
 800a42c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a42e:	68ba      	ldr	r2, [r7, #8]
 800a430:	693b      	ldr	r3, [r7, #16]
 800a432:	429a      	cmp	r2, r3
 800a434:	d90e      	bls.n	800a454 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	68ba      	ldr	r2, [r7, #8]
 800a43a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	68fa      	ldr	r2, [r7, #12]
 800a440:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a442:	4b1a      	ldr	r3, [pc, #104]	@ (800a4ac <prvSwitchTimerLists+0xc4>)
 800a444:	681a      	ldr	r2, [r3, #0]
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	3304      	adds	r3, #4
 800a44a:	4619      	mov	r1, r3
 800a44c:	4610      	mov	r0, r2
 800a44e:	f7fe f886 	bl	800855e <vListInsert>
 800a452:	e017      	b.n	800a484 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a454:	2300      	movs	r3, #0
 800a456:	9300      	str	r3, [sp, #0]
 800a458:	2300      	movs	r3, #0
 800a45a:	693a      	ldr	r2, [r7, #16]
 800a45c:	2100      	movs	r1, #0
 800a45e:	68f8      	ldr	r0, [r7, #12]
 800a460:	f7ff fd58 	bl	8009f14 <xTimerGenericCommand>
 800a464:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d10b      	bne.n	800a484 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a46c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a470:	f383 8811 	msr	BASEPRI, r3
 800a474:	f3bf 8f6f 	isb	sy
 800a478:	f3bf 8f4f 	dsb	sy
 800a47c:	603b      	str	r3, [r7, #0]
}
 800a47e:	bf00      	nop
 800a480:	bf00      	nop
 800a482:	e7fd      	b.n	800a480 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a484:	4b09      	ldr	r3, [pc, #36]	@ (800a4ac <prvSwitchTimerLists+0xc4>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d1b0      	bne.n	800a3f0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a48e:	4b07      	ldr	r3, [pc, #28]	@ (800a4ac <prvSwitchTimerLists+0xc4>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a494:	4b06      	ldr	r3, [pc, #24]	@ (800a4b0 <prvSwitchTimerLists+0xc8>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	4a04      	ldr	r2, [pc, #16]	@ (800a4ac <prvSwitchTimerLists+0xc4>)
 800a49a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a49c:	4a04      	ldr	r2, [pc, #16]	@ (800a4b0 <prvSwitchTimerLists+0xc8>)
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	6013      	str	r3, [r2, #0]
}
 800a4a2:	bf00      	nop
 800a4a4:	3718      	adds	r7, #24
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}
 800a4aa:	bf00      	nop
 800a4ac:	20006128 	.word	0x20006128
 800a4b0:	2000612c 	.word	0x2000612c

0800a4b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b082      	sub	sp, #8
 800a4b8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a4ba:	f000 f96d 	bl	800a798 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a4be:	4b15      	ldr	r3, [pc, #84]	@ (800a514 <prvCheckForValidListAndQueue+0x60>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d120      	bne.n	800a508 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a4c6:	4814      	ldr	r0, [pc, #80]	@ (800a518 <prvCheckForValidListAndQueue+0x64>)
 800a4c8:	f7fd fff8 	bl	80084bc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a4cc:	4813      	ldr	r0, [pc, #76]	@ (800a51c <prvCheckForValidListAndQueue+0x68>)
 800a4ce:	f7fd fff5 	bl	80084bc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a4d2:	4b13      	ldr	r3, [pc, #76]	@ (800a520 <prvCheckForValidListAndQueue+0x6c>)
 800a4d4:	4a10      	ldr	r2, [pc, #64]	@ (800a518 <prvCheckForValidListAndQueue+0x64>)
 800a4d6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a4d8:	4b12      	ldr	r3, [pc, #72]	@ (800a524 <prvCheckForValidListAndQueue+0x70>)
 800a4da:	4a10      	ldr	r2, [pc, #64]	@ (800a51c <prvCheckForValidListAndQueue+0x68>)
 800a4dc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a4de:	2300      	movs	r3, #0
 800a4e0:	9300      	str	r3, [sp, #0]
 800a4e2:	4b11      	ldr	r3, [pc, #68]	@ (800a528 <prvCheckForValidListAndQueue+0x74>)
 800a4e4:	4a11      	ldr	r2, [pc, #68]	@ (800a52c <prvCheckForValidListAndQueue+0x78>)
 800a4e6:	2110      	movs	r1, #16
 800a4e8:	200a      	movs	r0, #10
 800a4ea:	f7fe f905 	bl	80086f8 <xQueueGenericCreateStatic>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	4a08      	ldr	r2, [pc, #32]	@ (800a514 <prvCheckForValidListAndQueue+0x60>)
 800a4f2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a4f4:	4b07      	ldr	r3, [pc, #28]	@ (800a514 <prvCheckForValidListAndQueue+0x60>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d005      	beq.n	800a508 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a4fc:	4b05      	ldr	r3, [pc, #20]	@ (800a514 <prvCheckForValidListAndQueue+0x60>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	490b      	ldr	r1, [pc, #44]	@ (800a530 <prvCheckForValidListAndQueue+0x7c>)
 800a502:	4618      	mov	r0, r3
 800a504:	f7fe fd2a 	bl	8008f5c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a508:	f000 f978 	bl	800a7fc <vPortExitCritical>
}
 800a50c:	bf00      	nop
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}
 800a512:	bf00      	nop
 800a514:	20006130 	.word	0x20006130
 800a518:	20006100 	.word	0x20006100
 800a51c:	20006114 	.word	0x20006114
 800a520:	20006128 	.word	0x20006128
 800a524:	2000612c 	.word	0x2000612c
 800a528:	200061dc 	.word	0x200061dc
 800a52c:	2000613c 	.word	0x2000613c
 800a530:	0801b248 	.word	0x0801b248

0800a534 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a534:	b480      	push	{r7}
 800a536:	b085      	sub	sp, #20
 800a538:	af00      	add	r7, sp, #0
 800a53a:	60f8      	str	r0, [r7, #12]
 800a53c:	60b9      	str	r1, [r7, #8]
 800a53e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	3b04      	subs	r3, #4
 800a544:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a54c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	3b04      	subs	r3, #4
 800a552:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	f023 0201 	bic.w	r2, r3, #1
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	3b04      	subs	r3, #4
 800a562:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a564:	4a0c      	ldr	r2, [pc, #48]	@ (800a598 <pxPortInitialiseStack+0x64>)
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	3b14      	subs	r3, #20
 800a56e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a570:	687a      	ldr	r2, [r7, #4]
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	3b04      	subs	r3, #4
 800a57a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	f06f 0202 	mvn.w	r2, #2
 800a582:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	3b20      	subs	r3, #32
 800a588:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a58a:	68fb      	ldr	r3, [r7, #12]
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	3714      	adds	r7, #20
 800a590:	46bd      	mov	sp, r7
 800a592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a596:	4770      	bx	lr
 800a598:	0800a59d 	.word	0x0800a59d

0800a59c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a59c:	b480      	push	{r7}
 800a59e:	b085      	sub	sp, #20
 800a5a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a5a6:	4b13      	ldr	r3, [pc, #76]	@ (800a5f4 <prvTaskExitError+0x58>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a5ae:	d00b      	beq.n	800a5c8 <prvTaskExitError+0x2c>
	__asm volatile
 800a5b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5b4:	f383 8811 	msr	BASEPRI, r3
 800a5b8:	f3bf 8f6f 	isb	sy
 800a5bc:	f3bf 8f4f 	dsb	sy
 800a5c0:	60fb      	str	r3, [r7, #12]
}
 800a5c2:	bf00      	nop
 800a5c4:	bf00      	nop
 800a5c6:	e7fd      	b.n	800a5c4 <prvTaskExitError+0x28>
	__asm volatile
 800a5c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5cc:	f383 8811 	msr	BASEPRI, r3
 800a5d0:	f3bf 8f6f 	isb	sy
 800a5d4:	f3bf 8f4f 	dsb	sy
 800a5d8:	60bb      	str	r3, [r7, #8]
}
 800a5da:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a5dc:	bf00      	nop
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d0fc      	beq.n	800a5de <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a5e4:	bf00      	nop
 800a5e6:	bf00      	nop
 800a5e8:	3714      	adds	r7, #20
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f0:	4770      	bx	lr
 800a5f2:	bf00      	nop
 800a5f4:	200000a8 	.word	0x200000a8
	...

0800a600 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a600:	4b07      	ldr	r3, [pc, #28]	@ (800a620 <pxCurrentTCBConst2>)
 800a602:	6819      	ldr	r1, [r3, #0]
 800a604:	6808      	ldr	r0, [r1, #0]
 800a606:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a60a:	f380 8809 	msr	PSP, r0
 800a60e:	f3bf 8f6f 	isb	sy
 800a612:	f04f 0000 	mov.w	r0, #0
 800a616:	f380 8811 	msr	BASEPRI, r0
 800a61a:	4770      	bx	lr
 800a61c:	f3af 8000 	nop.w

0800a620 <pxCurrentTCBConst2>:
 800a620:	20005c00 	.word	0x20005c00
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a624:	bf00      	nop
 800a626:	bf00      	nop

0800a628 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a628:	4808      	ldr	r0, [pc, #32]	@ (800a64c <prvPortStartFirstTask+0x24>)
 800a62a:	6800      	ldr	r0, [r0, #0]
 800a62c:	6800      	ldr	r0, [r0, #0]
 800a62e:	f380 8808 	msr	MSP, r0
 800a632:	f04f 0000 	mov.w	r0, #0
 800a636:	f380 8814 	msr	CONTROL, r0
 800a63a:	b662      	cpsie	i
 800a63c:	b661      	cpsie	f
 800a63e:	f3bf 8f4f 	dsb	sy
 800a642:	f3bf 8f6f 	isb	sy
 800a646:	df00      	svc	0
 800a648:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a64a:	bf00      	nop
 800a64c:	e000ed08 	.word	0xe000ed08

0800a650 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b086      	sub	sp, #24
 800a654:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a656:	4b47      	ldr	r3, [pc, #284]	@ (800a774 <xPortStartScheduler+0x124>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	4a47      	ldr	r2, [pc, #284]	@ (800a778 <xPortStartScheduler+0x128>)
 800a65c:	4293      	cmp	r3, r2
 800a65e:	d10b      	bne.n	800a678 <xPortStartScheduler+0x28>
	__asm volatile
 800a660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a664:	f383 8811 	msr	BASEPRI, r3
 800a668:	f3bf 8f6f 	isb	sy
 800a66c:	f3bf 8f4f 	dsb	sy
 800a670:	613b      	str	r3, [r7, #16]
}
 800a672:	bf00      	nop
 800a674:	bf00      	nop
 800a676:	e7fd      	b.n	800a674 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a678:	4b3e      	ldr	r3, [pc, #248]	@ (800a774 <xPortStartScheduler+0x124>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	4a3f      	ldr	r2, [pc, #252]	@ (800a77c <xPortStartScheduler+0x12c>)
 800a67e:	4293      	cmp	r3, r2
 800a680:	d10b      	bne.n	800a69a <xPortStartScheduler+0x4a>
	__asm volatile
 800a682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a686:	f383 8811 	msr	BASEPRI, r3
 800a68a:	f3bf 8f6f 	isb	sy
 800a68e:	f3bf 8f4f 	dsb	sy
 800a692:	60fb      	str	r3, [r7, #12]
}
 800a694:	bf00      	nop
 800a696:	bf00      	nop
 800a698:	e7fd      	b.n	800a696 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a69a:	4b39      	ldr	r3, [pc, #228]	@ (800a780 <xPortStartScheduler+0x130>)
 800a69c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	781b      	ldrb	r3, [r3, #0]
 800a6a2:	b2db      	uxtb	r3, r3
 800a6a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	22ff      	movs	r2, #255	@ 0xff
 800a6aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	781b      	ldrb	r3, [r3, #0]
 800a6b0:	b2db      	uxtb	r3, r3
 800a6b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a6b4:	78fb      	ldrb	r3, [r7, #3]
 800a6b6:	b2db      	uxtb	r3, r3
 800a6b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a6bc:	b2da      	uxtb	r2, r3
 800a6be:	4b31      	ldr	r3, [pc, #196]	@ (800a784 <xPortStartScheduler+0x134>)
 800a6c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a6c2:	4b31      	ldr	r3, [pc, #196]	@ (800a788 <xPortStartScheduler+0x138>)
 800a6c4:	2207      	movs	r2, #7
 800a6c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a6c8:	e009      	b.n	800a6de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a6ca:	4b2f      	ldr	r3, [pc, #188]	@ (800a788 <xPortStartScheduler+0x138>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	3b01      	subs	r3, #1
 800a6d0:	4a2d      	ldr	r2, [pc, #180]	@ (800a788 <xPortStartScheduler+0x138>)
 800a6d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a6d4:	78fb      	ldrb	r3, [r7, #3]
 800a6d6:	b2db      	uxtb	r3, r3
 800a6d8:	005b      	lsls	r3, r3, #1
 800a6da:	b2db      	uxtb	r3, r3
 800a6dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a6de:	78fb      	ldrb	r3, [r7, #3]
 800a6e0:	b2db      	uxtb	r3, r3
 800a6e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6e6:	2b80      	cmp	r3, #128	@ 0x80
 800a6e8:	d0ef      	beq.n	800a6ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a6ea:	4b27      	ldr	r3, [pc, #156]	@ (800a788 <xPortStartScheduler+0x138>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f1c3 0307 	rsb	r3, r3, #7
 800a6f2:	2b04      	cmp	r3, #4
 800a6f4:	d00b      	beq.n	800a70e <xPortStartScheduler+0xbe>
	__asm volatile
 800a6f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6fa:	f383 8811 	msr	BASEPRI, r3
 800a6fe:	f3bf 8f6f 	isb	sy
 800a702:	f3bf 8f4f 	dsb	sy
 800a706:	60bb      	str	r3, [r7, #8]
}
 800a708:	bf00      	nop
 800a70a:	bf00      	nop
 800a70c:	e7fd      	b.n	800a70a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a70e:	4b1e      	ldr	r3, [pc, #120]	@ (800a788 <xPortStartScheduler+0x138>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	021b      	lsls	r3, r3, #8
 800a714:	4a1c      	ldr	r2, [pc, #112]	@ (800a788 <xPortStartScheduler+0x138>)
 800a716:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a718:	4b1b      	ldr	r3, [pc, #108]	@ (800a788 <xPortStartScheduler+0x138>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a720:	4a19      	ldr	r2, [pc, #100]	@ (800a788 <xPortStartScheduler+0x138>)
 800a722:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	b2da      	uxtb	r2, r3
 800a728:	697b      	ldr	r3, [r7, #20]
 800a72a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a72c:	4b17      	ldr	r3, [pc, #92]	@ (800a78c <xPortStartScheduler+0x13c>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	4a16      	ldr	r2, [pc, #88]	@ (800a78c <xPortStartScheduler+0x13c>)
 800a732:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a736:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a738:	4b14      	ldr	r3, [pc, #80]	@ (800a78c <xPortStartScheduler+0x13c>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	4a13      	ldr	r2, [pc, #76]	@ (800a78c <xPortStartScheduler+0x13c>)
 800a73e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a742:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a744:	f000 f8da 	bl	800a8fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a748:	4b11      	ldr	r3, [pc, #68]	@ (800a790 <xPortStartScheduler+0x140>)
 800a74a:	2200      	movs	r2, #0
 800a74c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a74e:	f000 f8f9 	bl	800a944 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a752:	4b10      	ldr	r3, [pc, #64]	@ (800a794 <xPortStartScheduler+0x144>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	4a0f      	ldr	r2, [pc, #60]	@ (800a794 <xPortStartScheduler+0x144>)
 800a758:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a75c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a75e:	f7ff ff63 	bl	800a628 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a762:	f7ff f813 	bl	800978c <vTaskSwitchContext>
	prvTaskExitError();
 800a766:	f7ff ff19 	bl	800a59c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a76a:	2300      	movs	r3, #0
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	3718      	adds	r7, #24
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}
 800a774:	e000ed00 	.word	0xe000ed00
 800a778:	410fc271 	.word	0x410fc271
 800a77c:	410fc270 	.word	0x410fc270
 800a780:	e000e400 	.word	0xe000e400
 800a784:	2000622c 	.word	0x2000622c
 800a788:	20006230 	.word	0x20006230
 800a78c:	e000ed20 	.word	0xe000ed20
 800a790:	200000a8 	.word	0x200000a8
 800a794:	e000ef34 	.word	0xe000ef34

0800a798 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a798:	b480      	push	{r7}
 800a79a:	b083      	sub	sp, #12
 800a79c:	af00      	add	r7, sp, #0
	__asm volatile
 800a79e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7a2:	f383 8811 	msr	BASEPRI, r3
 800a7a6:	f3bf 8f6f 	isb	sy
 800a7aa:	f3bf 8f4f 	dsb	sy
 800a7ae:	607b      	str	r3, [r7, #4]
}
 800a7b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a7b2:	4b10      	ldr	r3, [pc, #64]	@ (800a7f4 <vPortEnterCritical+0x5c>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	3301      	adds	r3, #1
 800a7b8:	4a0e      	ldr	r2, [pc, #56]	@ (800a7f4 <vPortEnterCritical+0x5c>)
 800a7ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a7bc:	4b0d      	ldr	r3, [pc, #52]	@ (800a7f4 <vPortEnterCritical+0x5c>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	2b01      	cmp	r3, #1
 800a7c2:	d110      	bne.n	800a7e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a7c4:	4b0c      	ldr	r3, [pc, #48]	@ (800a7f8 <vPortEnterCritical+0x60>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	b2db      	uxtb	r3, r3
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d00b      	beq.n	800a7e6 <vPortEnterCritical+0x4e>
	__asm volatile
 800a7ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7d2:	f383 8811 	msr	BASEPRI, r3
 800a7d6:	f3bf 8f6f 	isb	sy
 800a7da:	f3bf 8f4f 	dsb	sy
 800a7de:	603b      	str	r3, [r7, #0]
}
 800a7e0:	bf00      	nop
 800a7e2:	bf00      	nop
 800a7e4:	e7fd      	b.n	800a7e2 <vPortEnterCritical+0x4a>
	}
}
 800a7e6:	bf00      	nop
 800a7e8:	370c      	adds	r7, #12
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f0:	4770      	bx	lr
 800a7f2:	bf00      	nop
 800a7f4:	200000a8 	.word	0x200000a8
 800a7f8:	e000ed04 	.word	0xe000ed04

0800a7fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b083      	sub	sp, #12
 800a800:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a802:	4b12      	ldr	r3, [pc, #72]	@ (800a84c <vPortExitCritical+0x50>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d10b      	bne.n	800a822 <vPortExitCritical+0x26>
	__asm volatile
 800a80a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a80e:	f383 8811 	msr	BASEPRI, r3
 800a812:	f3bf 8f6f 	isb	sy
 800a816:	f3bf 8f4f 	dsb	sy
 800a81a:	607b      	str	r3, [r7, #4]
}
 800a81c:	bf00      	nop
 800a81e:	bf00      	nop
 800a820:	e7fd      	b.n	800a81e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a822:	4b0a      	ldr	r3, [pc, #40]	@ (800a84c <vPortExitCritical+0x50>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	3b01      	subs	r3, #1
 800a828:	4a08      	ldr	r2, [pc, #32]	@ (800a84c <vPortExitCritical+0x50>)
 800a82a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a82c:	4b07      	ldr	r3, [pc, #28]	@ (800a84c <vPortExitCritical+0x50>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d105      	bne.n	800a840 <vPortExitCritical+0x44>
 800a834:	2300      	movs	r3, #0
 800a836:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	f383 8811 	msr	BASEPRI, r3
}
 800a83e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a840:	bf00      	nop
 800a842:	370c      	adds	r7, #12
 800a844:	46bd      	mov	sp, r7
 800a846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84a:	4770      	bx	lr
 800a84c:	200000a8 	.word	0x200000a8

0800a850 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a850:	f3ef 8009 	mrs	r0, PSP
 800a854:	f3bf 8f6f 	isb	sy
 800a858:	4b15      	ldr	r3, [pc, #84]	@ (800a8b0 <pxCurrentTCBConst>)
 800a85a:	681a      	ldr	r2, [r3, #0]
 800a85c:	f01e 0f10 	tst.w	lr, #16
 800a860:	bf08      	it	eq
 800a862:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a866:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a86a:	6010      	str	r0, [r2, #0]
 800a86c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a870:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a874:	f380 8811 	msr	BASEPRI, r0
 800a878:	f3bf 8f4f 	dsb	sy
 800a87c:	f3bf 8f6f 	isb	sy
 800a880:	f7fe ff84 	bl	800978c <vTaskSwitchContext>
 800a884:	f04f 0000 	mov.w	r0, #0
 800a888:	f380 8811 	msr	BASEPRI, r0
 800a88c:	bc09      	pop	{r0, r3}
 800a88e:	6819      	ldr	r1, [r3, #0]
 800a890:	6808      	ldr	r0, [r1, #0]
 800a892:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a896:	f01e 0f10 	tst.w	lr, #16
 800a89a:	bf08      	it	eq
 800a89c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a8a0:	f380 8809 	msr	PSP, r0
 800a8a4:	f3bf 8f6f 	isb	sy
 800a8a8:	4770      	bx	lr
 800a8aa:	bf00      	nop
 800a8ac:	f3af 8000 	nop.w

0800a8b0 <pxCurrentTCBConst>:
 800a8b0:	20005c00 	.word	0x20005c00
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a8b4:	bf00      	nop
 800a8b6:	bf00      	nop

0800a8b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b082      	sub	sp, #8
 800a8bc:	af00      	add	r7, sp, #0
	__asm volatile
 800a8be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8c2:	f383 8811 	msr	BASEPRI, r3
 800a8c6:	f3bf 8f6f 	isb	sy
 800a8ca:	f3bf 8f4f 	dsb	sy
 800a8ce:	607b      	str	r3, [r7, #4]
}
 800a8d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a8d2:	f7fe fea1 	bl	8009618 <xTaskIncrementTick>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d003      	beq.n	800a8e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a8dc:	4b06      	ldr	r3, [pc, #24]	@ (800a8f8 <xPortSysTickHandler+0x40>)
 800a8de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a8e2:	601a      	str	r2, [r3, #0]
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	f383 8811 	msr	BASEPRI, r3
}
 800a8ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a8f0:	bf00      	nop
 800a8f2:	3708      	adds	r7, #8
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}
 800a8f8:	e000ed04 	.word	0xe000ed04

0800a8fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a900:	4b0b      	ldr	r3, [pc, #44]	@ (800a930 <vPortSetupTimerInterrupt+0x34>)
 800a902:	2200      	movs	r2, #0
 800a904:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a906:	4b0b      	ldr	r3, [pc, #44]	@ (800a934 <vPortSetupTimerInterrupt+0x38>)
 800a908:	2200      	movs	r2, #0
 800a90a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a90c:	4b0a      	ldr	r3, [pc, #40]	@ (800a938 <vPortSetupTimerInterrupt+0x3c>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	4a0a      	ldr	r2, [pc, #40]	@ (800a93c <vPortSetupTimerInterrupt+0x40>)
 800a912:	fba2 2303 	umull	r2, r3, r2, r3
 800a916:	099b      	lsrs	r3, r3, #6
 800a918:	4a09      	ldr	r2, [pc, #36]	@ (800a940 <vPortSetupTimerInterrupt+0x44>)
 800a91a:	3b01      	subs	r3, #1
 800a91c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a91e:	4b04      	ldr	r3, [pc, #16]	@ (800a930 <vPortSetupTimerInterrupt+0x34>)
 800a920:	2207      	movs	r2, #7
 800a922:	601a      	str	r2, [r3, #0]
}
 800a924:	bf00      	nop
 800a926:	46bd      	mov	sp, r7
 800a928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92c:	4770      	bx	lr
 800a92e:	bf00      	nop
 800a930:	e000e010 	.word	0xe000e010
 800a934:	e000e018 	.word	0xe000e018
 800a938:	2000000c 	.word	0x2000000c
 800a93c:	10624dd3 	.word	0x10624dd3
 800a940:	e000e014 	.word	0xe000e014

0800a944 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a944:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a954 <vPortEnableVFP+0x10>
 800a948:	6801      	ldr	r1, [r0, #0]
 800a94a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a94e:	6001      	str	r1, [r0, #0]
 800a950:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a952:	bf00      	nop
 800a954:	e000ed88 	.word	0xe000ed88

0800a958 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a958:	b480      	push	{r7}
 800a95a:	b085      	sub	sp, #20
 800a95c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a95e:	f3ef 8305 	mrs	r3, IPSR
 800a962:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	2b0f      	cmp	r3, #15
 800a968:	d915      	bls.n	800a996 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a96a:	4a18      	ldr	r2, [pc, #96]	@ (800a9cc <vPortValidateInterruptPriority+0x74>)
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	4413      	add	r3, r2
 800a970:	781b      	ldrb	r3, [r3, #0]
 800a972:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a974:	4b16      	ldr	r3, [pc, #88]	@ (800a9d0 <vPortValidateInterruptPriority+0x78>)
 800a976:	781b      	ldrb	r3, [r3, #0]
 800a978:	7afa      	ldrb	r2, [r7, #11]
 800a97a:	429a      	cmp	r2, r3
 800a97c:	d20b      	bcs.n	800a996 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a97e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a982:	f383 8811 	msr	BASEPRI, r3
 800a986:	f3bf 8f6f 	isb	sy
 800a98a:	f3bf 8f4f 	dsb	sy
 800a98e:	607b      	str	r3, [r7, #4]
}
 800a990:	bf00      	nop
 800a992:	bf00      	nop
 800a994:	e7fd      	b.n	800a992 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a996:	4b0f      	ldr	r3, [pc, #60]	@ (800a9d4 <vPortValidateInterruptPriority+0x7c>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a99e:	4b0e      	ldr	r3, [pc, #56]	@ (800a9d8 <vPortValidateInterruptPriority+0x80>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	429a      	cmp	r2, r3
 800a9a4:	d90b      	bls.n	800a9be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a9a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9aa:	f383 8811 	msr	BASEPRI, r3
 800a9ae:	f3bf 8f6f 	isb	sy
 800a9b2:	f3bf 8f4f 	dsb	sy
 800a9b6:	603b      	str	r3, [r7, #0]
}
 800a9b8:	bf00      	nop
 800a9ba:	bf00      	nop
 800a9bc:	e7fd      	b.n	800a9ba <vPortValidateInterruptPriority+0x62>
	}
 800a9be:	bf00      	nop
 800a9c0:	3714      	adds	r7, #20
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c8:	4770      	bx	lr
 800a9ca:	bf00      	nop
 800a9cc:	e000e3f0 	.word	0xe000e3f0
 800a9d0:	2000622c 	.word	0x2000622c
 800a9d4:	e000ed0c 	.word	0xe000ed0c
 800a9d8:	20006230 	.word	0x20006230

0800a9dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b08a      	sub	sp, #40	@ 0x28
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a9e8:	f7fe fd5a 	bl	80094a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a9ec:	4b5c      	ldr	r3, [pc, #368]	@ (800ab60 <pvPortMalloc+0x184>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d101      	bne.n	800a9f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a9f4:	f000 f924 	bl	800ac40 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a9f8:	4b5a      	ldr	r3, [pc, #360]	@ (800ab64 <pvPortMalloc+0x188>)
 800a9fa:	681a      	ldr	r2, [r3, #0]
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	4013      	ands	r3, r2
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	f040 8095 	bne.w	800ab30 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d01e      	beq.n	800aa4a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800aa0c:	2208      	movs	r2, #8
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	4413      	add	r3, r2
 800aa12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f003 0307 	and.w	r3, r3, #7
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d015      	beq.n	800aa4a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f023 0307 	bic.w	r3, r3, #7
 800aa24:	3308      	adds	r3, #8
 800aa26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f003 0307 	and.w	r3, r3, #7
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d00b      	beq.n	800aa4a <pvPortMalloc+0x6e>
	__asm volatile
 800aa32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa36:	f383 8811 	msr	BASEPRI, r3
 800aa3a:	f3bf 8f6f 	isb	sy
 800aa3e:	f3bf 8f4f 	dsb	sy
 800aa42:	617b      	str	r3, [r7, #20]
}
 800aa44:	bf00      	nop
 800aa46:	bf00      	nop
 800aa48:	e7fd      	b.n	800aa46 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d06f      	beq.n	800ab30 <pvPortMalloc+0x154>
 800aa50:	4b45      	ldr	r3, [pc, #276]	@ (800ab68 <pvPortMalloc+0x18c>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	687a      	ldr	r2, [r7, #4]
 800aa56:	429a      	cmp	r2, r3
 800aa58:	d86a      	bhi.n	800ab30 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800aa5a:	4b44      	ldr	r3, [pc, #272]	@ (800ab6c <pvPortMalloc+0x190>)
 800aa5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800aa5e:	4b43      	ldr	r3, [pc, #268]	@ (800ab6c <pvPortMalloc+0x190>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aa64:	e004      	b.n	800aa70 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800aa66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800aa6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aa70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa72:	685b      	ldr	r3, [r3, #4]
 800aa74:	687a      	ldr	r2, [r7, #4]
 800aa76:	429a      	cmp	r2, r3
 800aa78:	d903      	bls.n	800aa82 <pvPortMalloc+0xa6>
 800aa7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d1f1      	bne.n	800aa66 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800aa82:	4b37      	ldr	r3, [pc, #220]	@ (800ab60 <pvPortMalloc+0x184>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa88:	429a      	cmp	r2, r3
 800aa8a:	d051      	beq.n	800ab30 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aa8c:	6a3b      	ldr	r3, [r7, #32]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	2208      	movs	r2, #8
 800aa92:	4413      	add	r3, r2
 800aa94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aa96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa98:	681a      	ldr	r2, [r3, #0]
 800aa9a:	6a3b      	ldr	r3, [r7, #32]
 800aa9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800aa9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaa0:	685a      	ldr	r2, [r3, #4]
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	1ad2      	subs	r2, r2, r3
 800aaa6:	2308      	movs	r3, #8
 800aaa8:	005b      	lsls	r3, r3, #1
 800aaaa:	429a      	cmp	r2, r3
 800aaac:	d920      	bls.n	800aaf0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aaae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	4413      	add	r3, r2
 800aab4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aab6:	69bb      	ldr	r3, [r7, #24]
 800aab8:	f003 0307 	and.w	r3, r3, #7
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d00b      	beq.n	800aad8 <pvPortMalloc+0xfc>
	__asm volatile
 800aac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aac4:	f383 8811 	msr	BASEPRI, r3
 800aac8:	f3bf 8f6f 	isb	sy
 800aacc:	f3bf 8f4f 	dsb	sy
 800aad0:	613b      	str	r3, [r7, #16]
}
 800aad2:	bf00      	nop
 800aad4:	bf00      	nop
 800aad6:	e7fd      	b.n	800aad4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aada:	685a      	ldr	r2, [r3, #4]
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	1ad2      	subs	r2, r2, r3
 800aae0:	69bb      	ldr	r3, [r7, #24]
 800aae2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aae6:	687a      	ldr	r2, [r7, #4]
 800aae8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aaea:	69b8      	ldr	r0, [r7, #24]
 800aaec:	f000 f90a 	bl	800ad04 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aaf0:	4b1d      	ldr	r3, [pc, #116]	@ (800ab68 <pvPortMalloc+0x18c>)
 800aaf2:	681a      	ldr	r2, [r3, #0]
 800aaf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaf6:	685b      	ldr	r3, [r3, #4]
 800aaf8:	1ad3      	subs	r3, r2, r3
 800aafa:	4a1b      	ldr	r2, [pc, #108]	@ (800ab68 <pvPortMalloc+0x18c>)
 800aafc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aafe:	4b1a      	ldr	r3, [pc, #104]	@ (800ab68 <pvPortMalloc+0x18c>)
 800ab00:	681a      	ldr	r2, [r3, #0]
 800ab02:	4b1b      	ldr	r3, [pc, #108]	@ (800ab70 <pvPortMalloc+0x194>)
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	429a      	cmp	r2, r3
 800ab08:	d203      	bcs.n	800ab12 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ab0a:	4b17      	ldr	r3, [pc, #92]	@ (800ab68 <pvPortMalloc+0x18c>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	4a18      	ldr	r2, [pc, #96]	@ (800ab70 <pvPortMalloc+0x194>)
 800ab10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ab12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab14:	685a      	ldr	r2, [r3, #4]
 800ab16:	4b13      	ldr	r3, [pc, #76]	@ (800ab64 <pvPortMalloc+0x188>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	431a      	orrs	r2, r3
 800ab1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ab20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab22:	2200      	movs	r2, #0
 800ab24:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ab26:	4b13      	ldr	r3, [pc, #76]	@ (800ab74 <pvPortMalloc+0x198>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	3301      	adds	r3, #1
 800ab2c:	4a11      	ldr	r2, [pc, #68]	@ (800ab74 <pvPortMalloc+0x198>)
 800ab2e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ab30:	f7fe fcc4 	bl	80094bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab34:	69fb      	ldr	r3, [r7, #28]
 800ab36:	f003 0307 	and.w	r3, r3, #7
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d00b      	beq.n	800ab56 <pvPortMalloc+0x17a>
	__asm volatile
 800ab3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab42:	f383 8811 	msr	BASEPRI, r3
 800ab46:	f3bf 8f6f 	isb	sy
 800ab4a:	f3bf 8f4f 	dsb	sy
 800ab4e:	60fb      	str	r3, [r7, #12]
}
 800ab50:	bf00      	nop
 800ab52:	bf00      	nop
 800ab54:	e7fd      	b.n	800ab52 <pvPortMalloc+0x176>
	return pvReturn;
 800ab56:	69fb      	ldr	r3, [r7, #28]
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	3728      	adds	r7, #40	@ 0x28
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}
 800ab60:	20006e3c 	.word	0x20006e3c
 800ab64:	20006e50 	.word	0x20006e50
 800ab68:	20006e40 	.word	0x20006e40
 800ab6c:	20006e34 	.word	0x20006e34
 800ab70:	20006e44 	.word	0x20006e44
 800ab74:	20006e48 	.word	0x20006e48

0800ab78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b086      	sub	sp, #24
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d04f      	beq.n	800ac2a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ab8a:	2308      	movs	r3, #8
 800ab8c:	425b      	negs	r3, r3
 800ab8e:	697a      	ldr	r2, [r7, #20]
 800ab90:	4413      	add	r3, r2
 800ab92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	685a      	ldr	r2, [r3, #4]
 800ab9c:	4b25      	ldr	r3, [pc, #148]	@ (800ac34 <vPortFree+0xbc>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	4013      	ands	r3, r2
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d10b      	bne.n	800abbe <vPortFree+0x46>
	__asm volatile
 800aba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abaa:	f383 8811 	msr	BASEPRI, r3
 800abae:	f3bf 8f6f 	isb	sy
 800abb2:	f3bf 8f4f 	dsb	sy
 800abb6:	60fb      	str	r3, [r7, #12]
}
 800abb8:	bf00      	nop
 800abba:	bf00      	nop
 800abbc:	e7fd      	b.n	800abba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800abbe:	693b      	ldr	r3, [r7, #16]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d00b      	beq.n	800abde <vPortFree+0x66>
	__asm volatile
 800abc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abca:	f383 8811 	msr	BASEPRI, r3
 800abce:	f3bf 8f6f 	isb	sy
 800abd2:	f3bf 8f4f 	dsb	sy
 800abd6:	60bb      	str	r3, [r7, #8]
}
 800abd8:	bf00      	nop
 800abda:	bf00      	nop
 800abdc:	e7fd      	b.n	800abda <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800abde:	693b      	ldr	r3, [r7, #16]
 800abe0:	685a      	ldr	r2, [r3, #4]
 800abe2:	4b14      	ldr	r3, [pc, #80]	@ (800ac34 <vPortFree+0xbc>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	4013      	ands	r3, r2
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d01e      	beq.n	800ac2a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800abec:	693b      	ldr	r3, [r7, #16]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d11a      	bne.n	800ac2a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	685a      	ldr	r2, [r3, #4]
 800abf8:	4b0e      	ldr	r3, [pc, #56]	@ (800ac34 <vPortFree+0xbc>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	43db      	mvns	r3, r3
 800abfe:	401a      	ands	r2, r3
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ac04:	f7fe fc4c 	bl	80094a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ac08:	693b      	ldr	r3, [r7, #16]
 800ac0a:	685a      	ldr	r2, [r3, #4]
 800ac0c:	4b0a      	ldr	r3, [pc, #40]	@ (800ac38 <vPortFree+0xc0>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	4413      	add	r3, r2
 800ac12:	4a09      	ldr	r2, [pc, #36]	@ (800ac38 <vPortFree+0xc0>)
 800ac14:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ac16:	6938      	ldr	r0, [r7, #16]
 800ac18:	f000 f874 	bl	800ad04 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ac1c:	4b07      	ldr	r3, [pc, #28]	@ (800ac3c <vPortFree+0xc4>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	3301      	adds	r3, #1
 800ac22:	4a06      	ldr	r2, [pc, #24]	@ (800ac3c <vPortFree+0xc4>)
 800ac24:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ac26:	f7fe fc49 	bl	80094bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ac2a:	bf00      	nop
 800ac2c:	3718      	adds	r7, #24
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}
 800ac32:	bf00      	nop
 800ac34:	20006e50 	.word	0x20006e50
 800ac38:	20006e40 	.word	0x20006e40
 800ac3c:	20006e4c 	.word	0x20006e4c

0800ac40 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ac40:	b480      	push	{r7}
 800ac42:	b085      	sub	sp, #20
 800ac44:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ac46:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800ac4a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ac4c:	4b27      	ldr	r3, [pc, #156]	@ (800acec <prvHeapInit+0xac>)
 800ac4e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	f003 0307 	and.w	r3, r3, #7
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d00c      	beq.n	800ac74 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	3307      	adds	r3, #7
 800ac5e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	f023 0307 	bic.w	r3, r3, #7
 800ac66:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ac68:	68ba      	ldr	r2, [r7, #8]
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	1ad3      	subs	r3, r2, r3
 800ac6e:	4a1f      	ldr	r2, [pc, #124]	@ (800acec <prvHeapInit+0xac>)
 800ac70:	4413      	add	r3, r2
 800ac72:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ac78:	4a1d      	ldr	r2, [pc, #116]	@ (800acf0 <prvHeapInit+0xb0>)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ac7e:	4b1c      	ldr	r3, [pc, #112]	@ (800acf0 <prvHeapInit+0xb0>)
 800ac80:	2200      	movs	r2, #0
 800ac82:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	68ba      	ldr	r2, [r7, #8]
 800ac88:	4413      	add	r3, r2
 800ac8a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ac8c:	2208      	movs	r2, #8
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	1a9b      	subs	r3, r3, r2
 800ac92:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	f023 0307 	bic.w	r3, r3, #7
 800ac9a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	4a15      	ldr	r2, [pc, #84]	@ (800acf4 <prvHeapInit+0xb4>)
 800aca0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800aca2:	4b14      	ldr	r3, [pc, #80]	@ (800acf4 <prvHeapInit+0xb4>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	2200      	movs	r2, #0
 800aca8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800acaa:	4b12      	ldr	r3, [pc, #72]	@ (800acf4 <prvHeapInit+0xb4>)
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	2200      	movs	r2, #0
 800acb0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	68fa      	ldr	r2, [r7, #12]
 800acba:	1ad2      	subs	r2, r2, r3
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800acc0:	4b0c      	ldr	r3, [pc, #48]	@ (800acf4 <prvHeapInit+0xb4>)
 800acc2:	681a      	ldr	r2, [r3, #0]
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	685b      	ldr	r3, [r3, #4]
 800accc:	4a0a      	ldr	r2, [pc, #40]	@ (800acf8 <prvHeapInit+0xb8>)
 800acce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	685b      	ldr	r3, [r3, #4]
 800acd4:	4a09      	ldr	r2, [pc, #36]	@ (800acfc <prvHeapInit+0xbc>)
 800acd6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800acd8:	4b09      	ldr	r3, [pc, #36]	@ (800ad00 <prvHeapInit+0xc0>)
 800acda:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800acde:	601a      	str	r2, [r3, #0]
}
 800ace0:	bf00      	nop
 800ace2:	3714      	adds	r7, #20
 800ace4:	46bd      	mov	sp, r7
 800ace6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acea:	4770      	bx	lr
 800acec:	20006234 	.word	0x20006234
 800acf0:	20006e34 	.word	0x20006e34
 800acf4:	20006e3c 	.word	0x20006e3c
 800acf8:	20006e44 	.word	0x20006e44
 800acfc:	20006e40 	.word	0x20006e40
 800ad00:	20006e50 	.word	0x20006e50

0800ad04 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ad04:	b480      	push	{r7}
 800ad06:	b085      	sub	sp, #20
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ad0c:	4b28      	ldr	r3, [pc, #160]	@ (800adb0 <prvInsertBlockIntoFreeList+0xac>)
 800ad0e:	60fb      	str	r3, [r7, #12]
 800ad10:	e002      	b.n	800ad18 <prvInsertBlockIntoFreeList+0x14>
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	60fb      	str	r3, [r7, #12]
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	687a      	ldr	r2, [r7, #4]
 800ad1e:	429a      	cmp	r2, r3
 800ad20:	d8f7      	bhi.n	800ad12 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	685b      	ldr	r3, [r3, #4]
 800ad2a:	68ba      	ldr	r2, [r7, #8]
 800ad2c:	4413      	add	r3, r2
 800ad2e:	687a      	ldr	r2, [r7, #4]
 800ad30:	429a      	cmp	r2, r3
 800ad32:	d108      	bne.n	800ad46 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	685a      	ldr	r2, [r3, #4]
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	685b      	ldr	r3, [r3, #4]
 800ad3c:	441a      	add	r2, r3
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	685b      	ldr	r3, [r3, #4]
 800ad4e:	68ba      	ldr	r2, [r7, #8]
 800ad50:	441a      	add	r2, r3
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	429a      	cmp	r2, r3
 800ad58:	d118      	bne.n	800ad8c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	681a      	ldr	r2, [r3, #0]
 800ad5e:	4b15      	ldr	r3, [pc, #84]	@ (800adb4 <prvInsertBlockIntoFreeList+0xb0>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	429a      	cmp	r2, r3
 800ad64:	d00d      	beq.n	800ad82 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	685a      	ldr	r2, [r3, #4]
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	685b      	ldr	r3, [r3, #4]
 800ad70:	441a      	add	r2, r3
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	681a      	ldr	r2, [r3, #0]
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	601a      	str	r2, [r3, #0]
 800ad80:	e008      	b.n	800ad94 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ad82:	4b0c      	ldr	r3, [pc, #48]	@ (800adb4 <prvInsertBlockIntoFreeList+0xb0>)
 800ad84:	681a      	ldr	r2, [r3, #0]
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	601a      	str	r2, [r3, #0]
 800ad8a:	e003      	b.n	800ad94 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	681a      	ldr	r2, [r3, #0]
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ad94:	68fa      	ldr	r2, [r7, #12]
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	429a      	cmp	r2, r3
 800ad9a:	d002      	beq.n	800ada2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	687a      	ldr	r2, [r7, #4]
 800ada0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ada2:	bf00      	nop
 800ada4:	3714      	adds	r7, #20
 800ada6:	46bd      	mov	sp, r7
 800ada8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adac:	4770      	bx	lr
 800adae:	bf00      	nop
 800adb0:	20006e34 	.word	0x20006e34
 800adb4:	20006e3c 	.word	0x20006e3c

0800adb8 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800adb8:	4b04      	ldr	r3, [pc, #16]	@ (800adcc <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800adba:	681a      	ldr	r2, [r3, #0]
 800adbc:	b10a      	cbz	r2, 800adc2 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 800adbe:	4803      	ldr	r0, [pc, #12]	@ (800adcc <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800adc0:	4770      	bx	lr
 800adc2:	4a03      	ldr	r2, [pc, #12]	@ (800add0 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 800adc4:	4801      	ldr	r0, [pc, #4]	@ (800adcc <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800adc6:	6812      	ldr	r2, [r2, #0]
 800adc8:	601a      	str	r2, [r3, #0]
 800adca:	4770      	bx	lr
 800adcc:	200000b4 	.word	0x200000b4
 800add0:	20000510 	.word	0x20000510

0800add4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800add4:	4a02      	ldr	r2, [pc, #8]	@ (800ade0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 800add6:	4b03      	ldr	r3, [pc, #12]	@ (800ade4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 800add8:	6812      	ldr	r2, [r2, #0]
 800adda:	601a      	str	r2, [r3, #0]
 800addc:	4770      	bx	lr
 800adde:	bf00      	nop
 800ade0:	20000510 	.word	0x20000510
 800ade4:	200000b4 	.word	0x200000b4

0800ade8 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 800ade8:	f004 bf86 	b.w	800fcf8 <geometry_msgs__msg__Twist__init>

0800adec <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 800adec:	f004 bfa8 	b.w	800fd40 <geometry_msgs__msg__Twist__fini>

0800adf0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800adf0:	b510      	push	{r4, lr}
 800adf2:	f000 f819 	bl	800ae28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800adf6:	4c07      	ldr	r4, [pc, #28]	@ (800ae14 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 800adf8:	60e0      	str	r0, [r4, #12]
 800adfa:	f000 f815 	bl	800ae28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800adfe:	4b06      	ldr	r3, [pc, #24]	@ (800ae18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800ae00:	64a0      	str	r0, [r4, #72]	@ 0x48
 800ae02:	681a      	ldr	r2, [r3, #0]
 800ae04:	b10a      	cbz	r2, 800ae0a <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 800ae06:	4804      	ldr	r0, [pc, #16]	@ (800ae18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800ae08:	bd10      	pop	{r4, pc}
 800ae0a:	4a04      	ldr	r2, [pc, #16]	@ (800ae1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 800ae0c:	4802      	ldr	r0, [pc, #8]	@ (800ae18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800ae0e:	6812      	ldr	r2, [r2, #0]
 800ae10:	601a      	str	r2, [r3, #0]
 800ae12:	bd10      	pop	{r4, pc}
 800ae14:	200000c0 	.word	0x200000c0
 800ae18:	20000138 	.word	0x20000138
 800ae1c:	20000514 	.word	0x20000514

0800ae20 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800ae20:	f004 bf9a 	b.w	800fd58 <geometry_msgs__msg__Vector3__init>

0800ae24 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800ae24:	f004 bf9c 	b.w	800fd60 <geometry_msgs__msg__Vector3__fini>

0800ae28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800ae28:	4b04      	ldr	r3, [pc, #16]	@ (800ae3c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800ae2a:	681a      	ldr	r2, [r3, #0]
 800ae2c:	b10a      	cbz	r2, 800ae32 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800ae2e:	4803      	ldr	r0, [pc, #12]	@ (800ae3c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800ae30:	4770      	bx	lr
 800ae32:	4a03      	ldr	r2, [pc, #12]	@ (800ae40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800ae34:	4801      	ldr	r0, [pc, #4]	@ (800ae3c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800ae36:	6812      	ldr	r2, [r2, #0]
 800ae38:	601a      	str	r2, [r3, #0]
 800ae3a:	4770      	bx	lr
 800ae3c:	200001f8 	.word	0x200001f8
 800ae40:	20000514 	.word	0x20000514

0800ae44 <get_serialized_size_geometry_msgs__msg__Twist>:
 800ae44:	b570      	push	{r4, r5, r6, lr}
 800ae46:	4604      	mov	r4, r0
 800ae48:	b148      	cbz	r0, 800ae5e <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 800ae4a:	460d      	mov	r5, r1
 800ae4c:	f000 f860 	bl	800af10 <get_serialized_size_geometry_msgs__msg__Vector3>
 800ae50:	4606      	mov	r6, r0
 800ae52:	1829      	adds	r1, r5, r0
 800ae54:	f104 0018 	add.w	r0, r4, #24
 800ae58:	f000 f85a 	bl	800af10 <get_serialized_size_geometry_msgs__msg__Vector3>
 800ae5c:	4430      	add	r0, r6
 800ae5e:	bd70      	pop	{r4, r5, r6, pc}

0800ae60 <_Twist__cdr_deserialize>:
 800ae60:	b570      	push	{r4, r5, r6, lr}
 800ae62:	460c      	mov	r4, r1
 800ae64:	b189      	cbz	r1, 800ae8a <_Twist__cdr_deserialize+0x2a>
 800ae66:	4605      	mov	r5, r0
 800ae68:	f000 f8de 	bl	800b028 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ae6c:	6843      	ldr	r3, [r0, #4]
 800ae6e:	4621      	mov	r1, r4
 800ae70:	68db      	ldr	r3, [r3, #12]
 800ae72:	4628      	mov	r0, r5
 800ae74:	4798      	blx	r3
 800ae76:	f000 f8d7 	bl	800b028 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ae7a:	6843      	ldr	r3, [r0, #4]
 800ae7c:	f104 0118 	add.w	r1, r4, #24
 800ae80:	4628      	mov	r0, r5
 800ae82:	68db      	ldr	r3, [r3, #12]
 800ae84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ae88:	4718      	bx	r3
 800ae8a:	4608      	mov	r0, r1
 800ae8c:	bd70      	pop	{r4, r5, r6, pc}
 800ae8e:	bf00      	nop

0800ae90 <_Twist__cdr_serialize>:
 800ae90:	b510      	push	{r4, lr}
 800ae92:	b082      	sub	sp, #8
 800ae94:	9101      	str	r1, [sp, #4]
 800ae96:	b190      	cbz	r0, 800aebe <_Twist__cdr_serialize+0x2e>
 800ae98:	4604      	mov	r4, r0
 800ae9a:	f000 f8c5 	bl	800b028 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ae9e:	6843      	ldr	r3, [r0, #4]
 800aea0:	9901      	ldr	r1, [sp, #4]
 800aea2:	689b      	ldr	r3, [r3, #8]
 800aea4:	4620      	mov	r0, r4
 800aea6:	4798      	blx	r3
 800aea8:	f000 f8be 	bl	800b028 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800aeac:	6843      	ldr	r3, [r0, #4]
 800aeae:	9901      	ldr	r1, [sp, #4]
 800aeb0:	689b      	ldr	r3, [r3, #8]
 800aeb2:	f104 0018 	add.w	r0, r4, #24
 800aeb6:	b002      	add	sp, #8
 800aeb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aebc:	4718      	bx	r3
 800aebe:	b002      	add	sp, #8
 800aec0:	bd10      	pop	{r4, pc}
 800aec2:	bf00      	nop

0800aec4 <_Twist__get_serialized_size>:
 800aec4:	b538      	push	{r3, r4, r5, lr}
 800aec6:	4604      	mov	r4, r0
 800aec8:	b148      	cbz	r0, 800aede <_Twist__get_serialized_size+0x1a>
 800aeca:	2100      	movs	r1, #0
 800aecc:	f000 f820 	bl	800af10 <get_serialized_size_geometry_msgs__msg__Vector3>
 800aed0:	4605      	mov	r5, r0
 800aed2:	4601      	mov	r1, r0
 800aed4:	f104 0018 	add.w	r0, r4, #24
 800aed8:	f000 f81a 	bl	800af10 <get_serialized_size_geometry_msgs__msg__Vector3>
 800aedc:	4428      	add	r0, r5
 800aede:	bd38      	pop	{r3, r4, r5, pc}

0800aee0 <_Twist__max_serialized_size>:
 800aee0:	b510      	push	{r4, lr}
 800aee2:	b082      	sub	sp, #8
 800aee4:	2301      	movs	r3, #1
 800aee6:	2100      	movs	r1, #0
 800aee8:	f10d 0007 	add.w	r0, sp, #7
 800aeec:	f88d 3007 	strb.w	r3, [sp, #7]
 800aef0:	f000 f87e 	bl	800aff0 <max_serialized_size_geometry_msgs__msg__Vector3>
 800aef4:	4604      	mov	r4, r0
 800aef6:	4601      	mov	r1, r0
 800aef8:	f10d 0007 	add.w	r0, sp, #7
 800aefc:	f000 f878 	bl	800aff0 <max_serialized_size_geometry_msgs__msg__Vector3>
 800af00:	4420      	add	r0, r4
 800af02:	b002      	add	sp, #8
 800af04:	bd10      	pop	{r4, pc}
 800af06:	bf00      	nop

0800af08 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800af08:	4800      	ldr	r0, [pc, #0]	@ (800af0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 800af0a:	4770      	bx	lr
 800af0c:	20000204 	.word	0x20000204

0800af10 <get_serialized_size_geometry_msgs__msg__Vector3>:
 800af10:	b1b8      	cbz	r0, 800af42 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800af12:	b538      	push	{r3, r4, r5, lr}
 800af14:	460d      	mov	r5, r1
 800af16:	4628      	mov	r0, r5
 800af18:	2108      	movs	r1, #8
 800af1a:	f001 fdbb 	bl	800ca94 <ucdr_alignment>
 800af1e:	f105 0308 	add.w	r3, r5, #8
 800af22:	181c      	adds	r4, r3, r0
 800af24:	2108      	movs	r1, #8
 800af26:	4620      	mov	r0, r4
 800af28:	f001 fdb4 	bl	800ca94 <ucdr_alignment>
 800af2c:	3008      	adds	r0, #8
 800af2e:	4404      	add	r4, r0
 800af30:	2108      	movs	r1, #8
 800af32:	4620      	mov	r0, r4
 800af34:	f001 fdae 	bl	800ca94 <ucdr_alignment>
 800af38:	f1c5 0508 	rsb	r5, r5, #8
 800af3c:	4428      	add	r0, r5
 800af3e:	4420      	add	r0, r4
 800af40:	bd38      	pop	{r3, r4, r5, pc}
 800af42:	4770      	bx	lr

0800af44 <_Vector3__cdr_deserialize>:
 800af44:	b538      	push	{r3, r4, r5, lr}
 800af46:	460c      	mov	r4, r1
 800af48:	b171      	cbz	r1, 800af68 <_Vector3__cdr_deserialize+0x24>
 800af4a:	4605      	mov	r5, r0
 800af4c:	f001 fbb6 	bl	800c6bc <ucdr_deserialize_double>
 800af50:	f104 0108 	add.w	r1, r4, #8
 800af54:	4628      	mov	r0, r5
 800af56:	f001 fbb1 	bl	800c6bc <ucdr_deserialize_double>
 800af5a:	f104 0110 	add.w	r1, r4, #16
 800af5e:	4628      	mov	r0, r5
 800af60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af64:	f001 bbaa 	b.w	800c6bc <ucdr_deserialize_double>
 800af68:	4608      	mov	r0, r1
 800af6a:	bd38      	pop	{r3, r4, r5, pc}

0800af6c <_Vector3__cdr_serialize>:
 800af6c:	b198      	cbz	r0, 800af96 <_Vector3__cdr_serialize+0x2a>
 800af6e:	b538      	push	{r3, r4, r5, lr}
 800af70:	ed90 0b00 	vldr	d0, [r0]
 800af74:	460d      	mov	r5, r1
 800af76:	4604      	mov	r4, r0
 800af78:	4608      	mov	r0, r1
 800af7a:	f001 f9fd 	bl	800c378 <ucdr_serialize_double>
 800af7e:	ed94 0b02 	vldr	d0, [r4, #8]
 800af82:	4628      	mov	r0, r5
 800af84:	f001 f9f8 	bl	800c378 <ucdr_serialize_double>
 800af88:	ed94 0b04 	vldr	d0, [r4, #16]
 800af8c:	4628      	mov	r0, r5
 800af8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af92:	f001 b9f1 	b.w	800c378 <ucdr_serialize_double>
 800af96:	4770      	bx	lr

0800af98 <_Vector3__get_serialized_size>:
 800af98:	b198      	cbz	r0, 800afc2 <_Vector3__get_serialized_size+0x2a>
 800af9a:	b510      	push	{r4, lr}
 800af9c:	2108      	movs	r1, #8
 800af9e:	2000      	movs	r0, #0
 800afa0:	f001 fd78 	bl	800ca94 <ucdr_alignment>
 800afa4:	f100 0408 	add.w	r4, r0, #8
 800afa8:	2108      	movs	r1, #8
 800afaa:	4620      	mov	r0, r4
 800afac:	f001 fd72 	bl	800ca94 <ucdr_alignment>
 800afb0:	3008      	adds	r0, #8
 800afb2:	4404      	add	r4, r0
 800afb4:	2108      	movs	r1, #8
 800afb6:	4620      	mov	r0, r4
 800afb8:	f001 fd6c 	bl	800ca94 <ucdr_alignment>
 800afbc:	3008      	adds	r0, #8
 800afbe:	4420      	add	r0, r4
 800afc0:	bd10      	pop	{r4, pc}
 800afc2:	4770      	bx	lr

0800afc4 <_Vector3__max_serialized_size>:
 800afc4:	b538      	push	{r3, r4, r5, lr}
 800afc6:	2108      	movs	r1, #8
 800afc8:	2000      	movs	r0, #0
 800afca:	f001 fd63 	bl	800ca94 <ucdr_alignment>
 800afce:	f100 0508 	add.w	r5, r0, #8
 800afd2:	2108      	movs	r1, #8
 800afd4:	4628      	mov	r0, r5
 800afd6:	f001 fd5d 	bl	800ca94 <ucdr_alignment>
 800afda:	f100 0408 	add.w	r4, r0, #8
 800afde:	442c      	add	r4, r5
 800afe0:	2108      	movs	r1, #8
 800afe2:	4620      	mov	r0, r4
 800afe4:	f001 fd56 	bl	800ca94 <ucdr_alignment>
 800afe8:	3008      	adds	r0, #8
 800afea:	4420      	add	r0, r4
 800afec:	bd38      	pop	{r3, r4, r5, pc}
 800afee:	bf00      	nop

0800aff0 <max_serialized_size_geometry_msgs__msg__Vector3>:
 800aff0:	b570      	push	{r4, r5, r6, lr}
 800aff2:	2301      	movs	r3, #1
 800aff4:	460c      	mov	r4, r1
 800aff6:	7003      	strb	r3, [r0, #0]
 800aff8:	2108      	movs	r1, #8
 800affa:	4620      	mov	r0, r4
 800affc:	f001 fd4a 	bl	800ca94 <ucdr_alignment>
 800b000:	f104 0508 	add.w	r5, r4, #8
 800b004:	1946      	adds	r6, r0, r5
 800b006:	2108      	movs	r1, #8
 800b008:	4630      	mov	r0, r6
 800b00a:	f001 fd43 	bl	800ca94 <ucdr_alignment>
 800b00e:	f100 0508 	add.w	r5, r0, #8
 800b012:	4435      	add	r5, r6
 800b014:	2108      	movs	r1, #8
 800b016:	4628      	mov	r0, r5
 800b018:	f001 fd3c 	bl	800ca94 <ucdr_alignment>
 800b01c:	f1c4 0408 	rsb	r4, r4, #8
 800b020:	4420      	add	r0, r4
 800b022:	4428      	add	r0, r5
 800b024:	bd70      	pop	{r4, r5, r6, pc}
 800b026:	bf00      	nop

0800b028 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800b028:	4800      	ldr	r0, [pc, #0]	@ (800b02c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800b02a:	4770      	bx	lr
 800b02c:	2000022c 	.word	0x2000022c

0800b030 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration>:
 800b030:	4b04      	ldr	r3, [pc, #16]	@ (800b044 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x14>)
 800b032:	681a      	ldr	r2, [r3, #0]
 800b034:	b10a      	cbz	r2, 800b03a <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xa>
 800b036:	4803      	ldr	r0, [pc, #12]	@ (800b044 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x14>)
 800b038:	4770      	bx	lr
 800b03a:	4a03      	ldr	r2, [pc, #12]	@ (800b048 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x18>)
 800b03c:	4801      	ldr	r0, [pc, #4]	@ (800b044 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x14>)
 800b03e:	6812      	ldr	r2, [r2, #0]
 800b040:	601a      	str	r2, [r3, #0]
 800b042:	4770      	bx	lr
 800b044:	2000025c 	.word	0x2000025c
 800b048:	20000510 	.word	0x20000510

0800b04c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request>:
 800b04c:	4b04      	ldr	r3, [pc, #16]	@ (800b060 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x14>)
 800b04e:	4805      	ldr	r0, [pc, #20]	@ (800b064 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x18>)
 800b050:	4905      	ldr	r1, [pc, #20]	@ (800b068 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x1c>)
 800b052:	4a06      	ldr	r2, [pc, #24]	@ (800b06c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x20>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	6003      	str	r3, [r0, #0]
 800b058:	600b      	str	r3, [r1, #0]
 800b05a:	6013      	str	r3, [r2, #0]
 800b05c:	4770      	bx	lr
 800b05e:	bf00      	nop
 800b060:	20000510 	.word	0x20000510
 800b064:	20000278 	.word	0x20000278
 800b068:	20000284 	.word	0x20000284
 800b06c:	2000025c 	.word	0x2000025c

0800b070 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuStatus>:
 800b070:	4b04      	ldr	r3, [pc, #16]	@ (800b084 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuStatus+0x14>)
 800b072:	681a      	ldr	r2, [r3, #0]
 800b074:	b10a      	cbz	r2, 800b07a <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuStatus+0xa>
 800b076:	4803      	ldr	r0, [pc, #12]	@ (800b084 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuStatus+0x14>)
 800b078:	4770      	bx	lr
 800b07a:	4a03      	ldr	r2, [pc, #12]	@ (800b088 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuStatus+0x18>)
 800b07c:	4801      	ldr	r0, [pc, #4]	@ (800b084 <rosidl_typesupport_c__get_service_type_support_handle__imu_interfaces__srv__ImuStatus+0x14>)
 800b07e:	6812      	ldr	r2, [r2, #0]
 800b080:	601a      	str	r2, [r3, #0]
 800b082:	4770      	bx	lr
 800b084:	20000298 	.word	0x20000298
 800b088:	20000510 	.word	0x20000510

0800b08c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuStatus_Request>:
 800b08c:	4b04      	ldr	r3, [pc, #16]	@ (800b0a0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuStatus_Request+0x14>)
 800b08e:	4805      	ldr	r0, [pc, #20]	@ (800b0a4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuStatus_Request+0x18>)
 800b090:	4905      	ldr	r1, [pc, #20]	@ (800b0a8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuStatus_Request+0x1c>)
 800b092:	4a06      	ldr	r2, [pc, #24]	@ (800b0ac <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_interfaces__srv__ImuStatus_Request+0x20>)
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	6003      	str	r3, [r0, #0]
 800b098:	600b      	str	r3, [r1, #0]
 800b09a:	6013      	str	r3, [r2, #0]
 800b09c:	4770      	bx	lr
 800b09e:	bf00      	nop
 800b0a0:	20000510 	.word	0x20000510
 800b0a4:	200002b4 	.word	0x200002b4
 800b0a8:	200002c0 	.word	0x200002c0
 800b0ac:	20000298 	.word	0x20000298

0800b0b0 <imu_interfaces__srv__ImuCalibration_Request__rosidl_typesupport_introspection_c__ImuCalibration_Request_init_function>:
 800b0b0:	f004 bf22 	b.w	800fef8 <imu_interfaces__srv__ImuCalibration_Request__init>

0800b0b4 <imu_interfaces__srv__ImuCalibration_Request__rosidl_typesupport_introspection_c__ImuCalibration_Request_fini_function>:
 800b0b4:	f004 bf32 	b.w	800ff1c <imu_interfaces__srv__ImuCalibration_Request__fini>

0800b0b8 <imu_interfaces__srv__ImuCalibration_Response__rosidl_typesupport_introspection_c__ImuCalibration_Response_init_function>:
 800b0b8:	f004 bf34 	b.w	800ff24 <imu_interfaces__srv__ImuCalibration_Response__init>

0800b0bc <imu_interfaces__srv__ImuCalibration_Response__rosidl_typesupport_introspection_c__ImuCalibration_Response_fini_function>:
 800b0bc:	f004 bf36 	b.w	800ff2c <imu_interfaces__srv__ImuCalibration_Response__fini>

0800b0c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request>:
 800b0c0:	b508      	push	{r3, lr}
 800b0c2:	f004 fb99 	bl	800f7f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800b0c6:	4b06      	ldr	r3, [pc, #24]	@ (800b0e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x20>)
 800b0c8:	4906      	ldr	r1, [pc, #24]	@ (800b0e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x24>)
 800b0ca:	681a      	ldr	r2, [r3, #0]
 800b0cc:	60c8      	str	r0, [r1, #12]
 800b0ce:	b10a      	cbz	r2, 800b0d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x14>
 800b0d0:	4803      	ldr	r0, [pc, #12]	@ (800b0e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x20>)
 800b0d2:	bd08      	pop	{r3, pc}
 800b0d4:	4a04      	ldr	r2, [pc, #16]	@ (800b0e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x28>)
 800b0d6:	4802      	ldr	r0, [pc, #8]	@ (800b0e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x20>)
 800b0d8:	6812      	ldr	r2, [r2, #0]
 800b0da:	601a      	str	r2, [r3, #0]
 800b0dc:	bd08      	pop	{r3, pc}
 800b0de:	bf00      	nop
 800b0e0:	20000308 	.word	0x20000308
 800b0e4:	200002cc 	.word	0x200002cc
 800b0e8:	20000514 	.word	0x20000514

0800b0ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response>:
 800b0ec:	4b04      	ldr	r3, [pc, #16]	@ (800b100 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x14>)
 800b0ee:	681a      	ldr	r2, [r3, #0]
 800b0f0:	b10a      	cbz	r2, 800b0f6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0xa>
 800b0f2:	4803      	ldr	r0, [pc, #12]	@ (800b100 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x14>)
 800b0f4:	4770      	bx	lr
 800b0f6:	4a03      	ldr	r2, [pc, #12]	@ (800b104 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x18>)
 800b0f8:	4801      	ldr	r0, [pc, #4]	@ (800b100 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x14>)
 800b0fa:	6812      	ldr	r2, [r2, #0]
 800b0fc:	601a      	str	r2, [r3, #0]
 800b0fe:	4770      	bx	lr
 800b100:	20000350 	.word	0x20000350
 800b104:	20000514 	.word	0x20000514

0800b108 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration>:
 800b108:	4b16      	ldr	r3, [pc, #88]	@ (800b164 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x5c>)
 800b10a:	681a      	ldr	r2, [r3, #0]
 800b10c:	b510      	push	{r4, lr}
 800b10e:	b132      	cbz	r2, 800b11e <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x16>
 800b110:	685c      	ldr	r4, [r3, #4]
 800b112:	68a3      	ldr	r3, [r4, #8]
 800b114:	b153      	cbz	r3, 800b12c <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x24>
 800b116:	68e3      	ldr	r3, [r4, #12]
 800b118:	b1a3      	cbz	r3, 800b144 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x3c>
 800b11a:	4812      	ldr	r0, [pc, #72]	@ (800b164 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x5c>)
 800b11c:	bd10      	pop	{r4, pc}
 800b11e:	4a12      	ldr	r2, [pc, #72]	@ (800b168 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x60>)
 800b120:	685c      	ldr	r4, [r3, #4]
 800b122:	6812      	ldr	r2, [r2, #0]
 800b124:	601a      	str	r2, [r3, #0]
 800b126:	68a3      	ldr	r3, [r4, #8]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d1f4      	bne.n	800b116 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0xe>
 800b12c:	f004 fb64 	bl	800f7f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800b130:	4b0e      	ldr	r3, [pc, #56]	@ (800b16c <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x64>)
 800b132:	490f      	ldr	r1, [pc, #60]	@ (800b170 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x68>)
 800b134:	681a      	ldr	r2, [r3, #0]
 800b136:	60c8      	str	r0, [r1, #12]
 800b138:	b17a      	cbz	r2, 800b15a <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x52>
 800b13a:	685b      	ldr	r3, [r3, #4]
 800b13c:	60a3      	str	r3, [r4, #8]
 800b13e:	68e3      	ldr	r3, [r4, #12]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d1ea      	bne.n	800b11a <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x12>
 800b144:	4b0b      	ldr	r3, [pc, #44]	@ (800b174 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x6c>)
 800b146:	681a      	ldr	r2, [r3, #0]
 800b148:	b11a      	cbz	r2, 800b152 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x4a>
 800b14a:	685b      	ldr	r3, [r3, #4]
 800b14c:	4805      	ldr	r0, [pc, #20]	@ (800b164 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x5c>)
 800b14e:	60e3      	str	r3, [r4, #12]
 800b150:	bd10      	pop	{r4, pc}
 800b152:	4a05      	ldr	r2, [pc, #20]	@ (800b168 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x60>)
 800b154:	6812      	ldr	r2, [r2, #0]
 800b156:	601a      	str	r2, [r3, #0]
 800b158:	e7f7      	b.n	800b14a <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x42>
 800b15a:	4a03      	ldr	r2, [pc, #12]	@ (800b168 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x60>)
 800b15c:	6812      	ldr	r2, [r2, #0]
 800b15e:	601a      	str	r2, [r3, #0]
 800b160:	e7eb      	b.n	800b13a <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x32>
 800b162:	bf00      	nop
 800b164:	2000036c 	.word	0x2000036c
 800b168:	20000514 	.word	0x20000514
 800b16c:	20000308 	.word	0x20000308
 800b170:	200002cc 	.word	0x200002cc
 800b174:	20000350 	.word	0x20000350

0800b178 <imu_interfaces__srv__ImuStatus_Request__rosidl_typesupport_introspection_c__ImuStatus_Request_init_function>:
 800b178:	f004 beda 	b.w	800ff30 <imu_interfaces__srv__ImuStatus_Request__init>

0800b17c <imu_interfaces__srv__ImuStatus_Request__rosidl_typesupport_introspection_c__ImuStatus_Request_fini_function>:
 800b17c:	f004 beea 	b.w	800ff54 <imu_interfaces__srv__ImuStatus_Request__fini>

0800b180 <imu_interfaces__srv__ImuStatus_Response__rosidl_typesupport_introspection_c__ImuStatus_Response_init_function>:
 800b180:	f004 beec 	b.w	800ff5c <imu_interfaces__srv__ImuStatus_Response__init>

0800b184 <imu_interfaces__srv__ImuStatus_Response__rosidl_typesupport_introspection_c__ImuStatus_Response_fini_function>:
 800b184:	f004 befc 	b.w	800ff80 <imu_interfaces__srv__ImuStatus_Response__fini>

0800b188 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuStatus_Request>:
 800b188:	b508      	push	{r3, lr}
 800b18a:	f004 fc47 	bl	800fa1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool>
 800b18e:	4b06      	ldr	r3, [pc, #24]	@ (800b1a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuStatus_Request+0x20>)
 800b190:	4906      	ldr	r1, [pc, #24]	@ (800b1ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuStatus_Request+0x24>)
 800b192:	681a      	ldr	r2, [r3, #0]
 800b194:	60c8      	str	r0, [r1, #12]
 800b196:	b10a      	cbz	r2, 800b19c <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuStatus_Request+0x14>
 800b198:	4803      	ldr	r0, [pc, #12]	@ (800b1a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuStatus_Request+0x20>)
 800b19a:	bd08      	pop	{r3, pc}
 800b19c:	4a04      	ldr	r2, [pc, #16]	@ (800b1b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuStatus_Request+0x28>)
 800b19e:	4802      	ldr	r0, [pc, #8]	@ (800b1a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuStatus_Request+0x20>)
 800b1a0:	6812      	ldr	r2, [r2, #0]
 800b1a2:	601a      	str	r2, [r3, #0]
 800b1a4:	bd08      	pop	{r3, pc}
 800b1a6:	bf00      	nop
 800b1a8:	200003b4 	.word	0x200003b4
 800b1ac:	20000378 	.word	0x20000378
 800b1b0:	20000514 	.word	0x20000514

0800b1b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuStatus_Response>:
 800b1b4:	b508      	push	{r3, lr}
 800b1b6:	f004 fc31 	bl	800fa1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool>
 800b1ba:	4b06      	ldr	r3, [pc, #24]	@ (800b1d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuStatus_Response+0x20>)
 800b1bc:	4906      	ldr	r1, [pc, #24]	@ (800b1d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuStatus_Response+0x24>)
 800b1be:	681a      	ldr	r2, [r3, #0]
 800b1c0:	60c8      	str	r0, [r1, #12]
 800b1c2:	b10a      	cbz	r2, 800b1c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuStatus_Response+0x14>
 800b1c4:	4803      	ldr	r0, [pc, #12]	@ (800b1d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuStatus_Response+0x20>)
 800b1c6:	bd08      	pop	{r3, pc}
 800b1c8:	4a04      	ldr	r2, [pc, #16]	@ (800b1dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuStatus_Response+0x28>)
 800b1ca:	4802      	ldr	r0, [pc, #8]	@ (800b1d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_interfaces__srv__ImuStatus_Response+0x20>)
 800b1cc:	6812      	ldr	r2, [r2, #0]
 800b1ce:	601a      	str	r2, [r3, #0]
 800b1d0:	bd08      	pop	{r3, pc}
 800b1d2:	bf00      	nop
 800b1d4:	200003fc 	.word	0x200003fc
 800b1d8:	200003c0 	.word	0x200003c0
 800b1dc:	20000514 	.word	0x20000514

0800b1e0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuStatus>:
 800b1e0:	4b18      	ldr	r3, [pc, #96]	@ (800b244 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuStatus+0x64>)
 800b1e2:	681a      	ldr	r2, [r3, #0]
 800b1e4:	b510      	push	{r4, lr}
 800b1e6:	b132      	cbz	r2, 800b1f6 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuStatus+0x16>
 800b1e8:	685c      	ldr	r4, [r3, #4]
 800b1ea:	68a3      	ldr	r3, [r4, #8]
 800b1ec:	b153      	cbz	r3, 800b204 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuStatus+0x24>
 800b1ee:	68e3      	ldr	r3, [r4, #12]
 800b1f0:	b1a3      	cbz	r3, 800b21c <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuStatus+0x3c>
 800b1f2:	4814      	ldr	r0, [pc, #80]	@ (800b244 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuStatus+0x64>)
 800b1f4:	bd10      	pop	{r4, pc}
 800b1f6:	4a14      	ldr	r2, [pc, #80]	@ (800b248 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuStatus+0x68>)
 800b1f8:	685c      	ldr	r4, [r3, #4]
 800b1fa:	6812      	ldr	r2, [r2, #0]
 800b1fc:	601a      	str	r2, [r3, #0]
 800b1fe:	68a3      	ldr	r3, [r4, #8]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d1f4      	bne.n	800b1ee <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuStatus+0xe>
 800b204:	f004 fc0a 	bl	800fa1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool>
 800b208:	4b10      	ldr	r3, [pc, #64]	@ (800b24c <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuStatus+0x6c>)
 800b20a:	4911      	ldr	r1, [pc, #68]	@ (800b250 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuStatus+0x70>)
 800b20c:	681a      	ldr	r2, [r3, #0]
 800b20e:	60c8      	str	r0, [r1, #12]
 800b210:	b19a      	cbz	r2, 800b23a <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuStatus+0x5a>
 800b212:	685b      	ldr	r3, [r3, #4]
 800b214:	60a3      	str	r3, [r4, #8]
 800b216:	68e3      	ldr	r3, [r4, #12]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d1ea      	bne.n	800b1f2 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuStatus+0x12>
 800b21c:	f004 fbfe 	bl	800fa1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool>
 800b220:	4b0c      	ldr	r3, [pc, #48]	@ (800b254 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuStatus+0x74>)
 800b222:	490d      	ldr	r1, [pc, #52]	@ (800b258 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuStatus+0x78>)
 800b224:	681a      	ldr	r2, [r3, #0]
 800b226:	60c8      	str	r0, [r1, #12]
 800b228:	b11a      	cbz	r2, 800b232 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuStatus+0x52>
 800b22a:	685b      	ldr	r3, [r3, #4]
 800b22c:	4805      	ldr	r0, [pc, #20]	@ (800b244 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuStatus+0x64>)
 800b22e:	60e3      	str	r3, [r4, #12]
 800b230:	bd10      	pop	{r4, pc}
 800b232:	4a05      	ldr	r2, [pc, #20]	@ (800b248 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuStatus+0x68>)
 800b234:	6812      	ldr	r2, [r2, #0]
 800b236:	601a      	str	r2, [r3, #0]
 800b238:	e7f7      	b.n	800b22a <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuStatus+0x4a>
 800b23a:	4a03      	ldr	r2, [pc, #12]	@ (800b248 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuStatus+0x68>)
 800b23c:	6812      	ldr	r2, [r2, #0]
 800b23e:	601a      	str	r2, [r3, #0]
 800b240:	e7e7      	b.n	800b212 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_interfaces__srv__ImuStatus+0x32>
 800b242:	bf00      	nop
 800b244:	20000418 	.word	0x20000418
 800b248:	20000514 	.word	0x20000514
 800b24c:	200003b4 	.word	0x200003b4
 800b250:	20000378 	.word	0x20000378
 800b254:	200003fc 	.word	0x200003fc
 800b258:	200003c0 	.word	0x200003c0

0800b25c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request>:
 800b25c:	4800      	ldr	r0, [pc, #0]	@ (800b260 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Request+0x4>)
 800b25e:	4770      	bx	lr
 800b260:	20000440 	.word	0x20000440

0800b264 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response>:
 800b264:	4800      	ldr	r0, [pc, #0]	@ (800b268 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuCalibration_Response+0x4>)
 800b266:	4770      	bx	lr
 800b268:	2000044c 	.word	0x2000044c

0800b26c <get_serialized_size_imu_interfaces__srv__ImuCalibration_Request>:
 800b26c:	b108      	cbz	r0, 800b272 <get_serialized_size_imu_interfaces__srv__ImuCalibration_Request+0x6>
 800b26e:	f004 bb15 	b.w	800f89c <get_serialized_size_sensor_msgs__msg__Imu>
 800b272:	4770      	bx	lr

0800b274 <_ImuCalibration_Request__max_serialized_size>:
 800b274:	b500      	push	{lr}
 800b276:	b083      	sub	sp, #12
 800b278:	2301      	movs	r3, #1
 800b27a:	2100      	movs	r1, #0
 800b27c:	f10d 0007 	add.w	r0, sp, #7
 800b280:	f88d 3007 	strb.w	r3, [sp, #7]
 800b284:	f004 fb88 	bl	800f998 <max_serialized_size_sensor_msgs__msg__Imu>
 800b288:	b003      	add	sp, #12
 800b28a:	f85d fb04 	ldr.w	pc, [sp], #4
 800b28e:	bf00      	nop

0800b290 <_ImuCalibration_Response__max_serialized_size>:
 800b290:	b508      	push	{r3, lr}
 800b292:	2101      	movs	r1, #1
 800b294:	2000      	movs	r0, #0
 800b296:	f001 fbfd 	bl	800ca94 <ucdr_alignment>
 800b29a:	3001      	adds	r0, #1
 800b29c:	bd08      	pop	{r3, pc}
 800b29e:	bf00      	nop

0800b2a0 <_ImuCalibration_Response__cdr_deserialize>:
 800b2a0:	b109      	cbz	r1, 800b2a6 <_ImuCalibration_Response__cdr_deserialize+0x6>
 800b2a2:	f000 b8f9 	b.w	800b498 <ucdr_deserialize_bool>
 800b2a6:	4608      	mov	r0, r1
 800b2a8:	4770      	bx	lr
 800b2aa:	bf00      	nop

0800b2ac <_ImuCalibration_Request__get_serialized_size>:
 800b2ac:	b110      	cbz	r0, 800b2b4 <_ImuCalibration_Request__get_serialized_size+0x8>
 800b2ae:	2100      	movs	r1, #0
 800b2b0:	f004 baf4 	b.w	800f89c <get_serialized_size_sensor_msgs__msg__Imu>
 800b2b4:	4770      	bx	lr
 800b2b6:	bf00      	nop

0800b2b8 <_ImuCalibration_Request__cdr_deserialize>:
 800b2b8:	b570      	push	{r4, r5, r6, lr}
 800b2ba:	460c      	mov	r4, r1
 800b2bc:	b149      	cbz	r1, 800b2d2 <_ImuCalibration_Request__cdr_deserialize+0x1a>
 800b2be:	4605      	mov	r5, r0
 800b2c0:	f004 fba4 	bl	800fa0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800b2c4:	6843      	ldr	r3, [r0, #4]
 800b2c6:	4621      	mov	r1, r4
 800b2c8:	4628      	mov	r0, r5
 800b2ca:	68db      	ldr	r3, [r3, #12]
 800b2cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b2d0:	4718      	bx	r3
 800b2d2:	4608      	mov	r0, r1
 800b2d4:	bd70      	pop	{r4, r5, r6, pc}
 800b2d6:	bf00      	nop

0800b2d8 <_ImuCalibration_Request__cdr_serialize>:
 800b2d8:	b158      	cbz	r0, 800b2f2 <_ImuCalibration_Request__cdr_serialize+0x1a>
 800b2da:	b570      	push	{r4, r5, r6, lr}
 800b2dc:	460d      	mov	r5, r1
 800b2de:	4604      	mov	r4, r0
 800b2e0:	f004 fb94 	bl	800fa0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800b2e4:	6843      	ldr	r3, [r0, #4]
 800b2e6:	4629      	mov	r1, r5
 800b2e8:	4620      	mov	r0, r4
 800b2ea:	689b      	ldr	r3, [r3, #8]
 800b2ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b2f0:	4718      	bx	r3
 800b2f2:	4770      	bx	lr

0800b2f4 <get_serialized_size_imu_interfaces__srv__ImuCalibration_Response>:
 800b2f4:	b138      	cbz	r0, 800b306 <get_serialized_size_imu_interfaces__srv__ImuCalibration_Response+0x12>
 800b2f6:	b508      	push	{r3, lr}
 800b2f8:	460b      	mov	r3, r1
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	2101      	movs	r1, #1
 800b2fe:	f001 fbc9 	bl	800ca94 <ucdr_alignment>
 800b302:	3001      	adds	r0, #1
 800b304:	bd08      	pop	{r3, pc}
 800b306:	4770      	bx	lr

0800b308 <_ImuCalibration_Response__cdr_serialize>:
 800b308:	460a      	mov	r2, r1
 800b30a:	b118      	cbz	r0, 800b314 <_ImuCalibration_Response__cdr_serialize+0xc>
 800b30c:	7801      	ldrb	r1, [r0, #0]
 800b30e:	4610      	mov	r0, r2
 800b310:	f000 b8ac 	b.w	800b46c <ucdr_serialize_bool>
 800b314:	4770      	bx	lr
 800b316:	bf00      	nop

0800b318 <_ImuCalibration_Response__get_serialized_size>:
 800b318:	b130      	cbz	r0, 800b328 <_ImuCalibration_Response__get_serialized_size+0x10>
 800b31a:	b508      	push	{r3, lr}
 800b31c:	2101      	movs	r1, #1
 800b31e:	2000      	movs	r0, #0
 800b320:	f001 fbb8 	bl	800ca94 <ucdr_alignment>
 800b324:	3001      	adds	r0, #1
 800b326:	bd08      	pop	{r3, pc}
 800b328:	4770      	bx	lr
 800b32a:	bf00      	nop

0800b32c <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration>:
 800b32c:	4800      	ldr	r0, [pc, #0]	@ (800b330 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__imu_interfaces__srv__ImuCalibration+0x4>)
 800b32e:	4770      	bx	lr
 800b330:	20000434 	.word	0x20000434

0800b334 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuStatus_Request>:
 800b334:	4800      	ldr	r0, [pc, #0]	@ (800b338 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuStatus_Request+0x4>)
 800b336:	4770      	bx	lr
 800b338:	200004ac 	.word	0x200004ac

0800b33c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuStatus_Response>:
 800b33c:	4800      	ldr	r0, [pc, #0]	@ (800b340 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_interfaces__srv__ImuStatus_Response+0x4>)
 800b33e:	4770      	bx	lr
 800b340:	200004b8 	.word	0x200004b8

0800b344 <get_serialized_size_imu_interfaces__srv__ImuStatus_Request>:
 800b344:	b108      	cbz	r0, 800b34a <get_serialized_size_imu_interfaces__srv__ImuStatus_Request+0x6>
 800b346:	f004 bb9f 	b.w	800fa88 <get_serialized_size_std_msgs__msg__Bool>
 800b34a:	4770      	bx	lr

0800b34c <get_serialized_size_imu_interfaces__srv__ImuStatus_Response>:
 800b34c:	b108      	cbz	r0, 800b352 <get_serialized_size_imu_interfaces__srv__ImuStatus_Response+0x6>
 800b34e:	f004 bb9b 	b.w	800fa88 <get_serialized_size_std_msgs__msg__Bool>
 800b352:	4770      	bx	lr

0800b354 <_ImuStatus_Request__max_serialized_size>:
 800b354:	b500      	push	{lr}
 800b356:	b083      	sub	sp, #12
 800b358:	2301      	movs	r3, #1
 800b35a:	2100      	movs	r1, #0
 800b35c:	f10d 0007 	add.w	r0, sp, #7
 800b360:	f88d 3007 	strb.w	r3, [sp, #7]
 800b364:	f004 fbac 	bl	800fac0 <max_serialized_size_std_msgs__msg__Bool>
 800b368:	b003      	add	sp, #12
 800b36a:	f85d fb04 	ldr.w	pc, [sp], #4
 800b36e:	bf00      	nop

0800b370 <_ImuStatus_Request__get_serialized_size>:
 800b370:	b110      	cbz	r0, 800b378 <_ImuStatus_Request__get_serialized_size+0x8>
 800b372:	2100      	movs	r1, #0
 800b374:	f004 bb88 	b.w	800fa88 <get_serialized_size_std_msgs__msg__Bool>
 800b378:	4770      	bx	lr
 800b37a:	bf00      	nop

0800b37c <_ImuStatus_Response__get_serialized_size>:
 800b37c:	b110      	cbz	r0, 800b384 <_ImuStatus_Response__get_serialized_size+0x8>
 800b37e:	2100      	movs	r1, #0
 800b380:	f004 bb82 	b.w	800fa88 <get_serialized_size_std_msgs__msg__Bool>
 800b384:	4770      	bx	lr
 800b386:	bf00      	nop

0800b388 <_ImuStatus_Request__cdr_deserialize>:
 800b388:	b570      	push	{r4, r5, r6, lr}
 800b38a:	460c      	mov	r4, r1
 800b38c:	b149      	cbz	r1, 800b3a2 <_ImuStatus_Request__cdr_deserialize+0x1a>
 800b38e:	4605      	mov	r5, r0
 800b390:	f004 fba0 	bl	800fad4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Bool>
 800b394:	6843      	ldr	r3, [r0, #4]
 800b396:	4621      	mov	r1, r4
 800b398:	4628      	mov	r0, r5
 800b39a:	68db      	ldr	r3, [r3, #12]
 800b39c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b3a0:	4718      	bx	r3
 800b3a2:	4608      	mov	r0, r1
 800b3a4:	bd70      	pop	{r4, r5, r6, pc}
 800b3a6:	bf00      	nop

0800b3a8 <_ImuStatus_Request__cdr_serialize>:
 800b3a8:	b158      	cbz	r0, 800b3c2 <_ImuStatus_Request__cdr_serialize+0x1a>
 800b3aa:	b570      	push	{r4, r5, r6, lr}
 800b3ac:	460d      	mov	r5, r1
 800b3ae:	4604      	mov	r4, r0
 800b3b0:	f004 fb90 	bl	800fad4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Bool>
 800b3b4:	6843      	ldr	r3, [r0, #4]
 800b3b6:	4629      	mov	r1, r5
 800b3b8:	4620      	mov	r0, r4
 800b3ba:	689b      	ldr	r3, [r3, #8]
 800b3bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b3c0:	4718      	bx	r3
 800b3c2:	4770      	bx	lr

0800b3c4 <_ImuStatus_Response__cdr_deserialize>:
 800b3c4:	b570      	push	{r4, r5, r6, lr}
 800b3c6:	460c      	mov	r4, r1
 800b3c8:	b149      	cbz	r1, 800b3de <_ImuStatus_Response__cdr_deserialize+0x1a>
 800b3ca:	4605      	mov	r5, r0
 800b3cc:	f004 fb82 	bl	800fad4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Bool>
 800b3d0:	6843      	ldr	r3, [r0, #4]
 800b3d2:	4621      	mov	r1, r4
 800b3d4:	4628      	mov	r0, r5
 800b3d6:	68db      	ldr	r3, [r3, #12]
 800b3d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b3dc:	4718      	bx	r3
 800b3de:	4608      	mov	r0, r1
 800b3e0:	bd70      	pop	{r4, r5, r6, pc}
 800b3e2:	bf00      	nop

0800b3e4 <_ImuStatus_Response__cdr_serialize>:
 800b3e4:	b158      	cbz	r0, 800b3fe <_ImuStatus_Response__cdr_serialize+0x1a>
 800b3e6:	b570      	push	{r4, r5, r6, lr}
 800b3e8:	460d      	mov	r5, r1
 800b3ea:	4604      	mov	r4, r0
 800b3ec:	f004 fb72 	bl	800fad4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Bool>
 800b3f0:	6843      	ldr	r3, [r0, #4]
 800b3f2:	4629      	mov	r1, r5
 800b3f4:	4620      	mov	r0, r4
 800b3f6:	689b      	ldr	r3, [r3, #8]
 800b3f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b3fc:	4718      	bx	r3
 800b3fe:	4770      	bx	lr

0800b400 <_ImuStatus_Response__max_serialized_size>:
 800b400:	b500      	push	{lr}
 800b402:	b083      	sub	sp, #12
 800b404:	2301      	movs	r3, #1
 800b406:	2100      	movs	r1, #0
 800b408:	f10d 0007 	add.w	r0, sp, #7
 800b40c:	f88d 3007 	strb.w	r3, [sp, #7]
 800b410:	f004 fb56 	bl	800fac0 <max_serialized_size_std_msgs__msg__Bool>
 800b414:	b003      	add	sp, #12
 800b416:	f85d fb04 	ldr.w	pc, [sp], #4
 800b41a:	bf00      	nop

0800b41c <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__imu_interfaces__srv__ImuStatus>:
 800b41c:	4800      	ldr	r0, [pc, #0]	@ (800b420 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__imu_interfaces__srv__ImuStatus+0x4>)
 800b41e:	4770      	bx	lr
 800b420:	200004a0 	.word	0x200004a0

0800b424 <micro_ros_string_utilities_init>:
 800b424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b428:	b086      	sub	sp, #24
 800b42a:	460f      	mov	r7, r1
 800b42c:	4604      	mov	r4, r0
 800b42e:	a801      	add	r0, sp, #4
 800b430:	f002 fd42 	bl	800deb8 <rcutils_get_default_allocator>
 800b434:	4638      	mov	r0, r7
 800b436:	f7f4 fefd 	bl	8000234 <strlen>
 800b43a:	f100 0801 	add.w	r8, r0, #1
 800b43e:	9b01      	ldr	r3, [sp, #4]
 800b440:	9905      	ldr	r1, [sp, #20]
 800b442:	4605      	mov	r5, r0
 800b444:	4640      	mov	r0, r8
 800b446:	4798      	blx	r3
 800b448:	4642      	mov	r2, r8
 800b44a:	4606      	mov	r6, r0
 800b44c:	2100      	movs	r1, #0
 800b44e:	f00e fbf9 	bl	8019c44 <memset>
 800b452:	462a      	mov	r2, r5
 800b454:	4639      	mov	r1, r7
 800b456:	4630      	mov	r0, r6
 800b458:	f00e fcbd 	bl	8019dd6 <memcpy>
 800b45c:	4620      	mov	r0, r4
 800b45e:	e9c4 6500 	strd	r6, r5, [r4]
 800b462:	f8c4 8008 	str.w	r8, [r4, #8]
 800b466:	b006      	add	sp, #24
 800b468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b46c <ucdr_serialize_bool>:
 800b46c:	b538      	push	{r3, r4, r5, lr}
 800b46e:	460d      	mov	r5, r1
 800b470:	2101      	movs	r1, #1
 800b472:	4604      	mov	r4, r0
 800b474:	f001 fac2 	bl	800c9fc <ucdr_check_final_buffer_behavior>
 800b478:	b148      	cbz	r0, 800b48e <ucdr_serialize_bool+0x22>
 800b47a:	68a3      	ldr	r3, [r4, #8]
 800b47c:	701d      	strb	r5, [r3, #0]
 800b47e:	68a2      	ldr	r2, [r4, #8]
 800b480:	6923      	ldr	r3, [r4, #16]
 800b482:	2101      	movs	r1, #1
 800b484:	440a      	add	r2, r1
 800b486:	440b      	add	r3, r1
 800b488:	60a2      	str	r2, [r4, #8]
 800b48a:	6123      	str	r3, [r4, #16]
 800b48c:	7561      	strb	r1, [r4, #21]
 800b48e:	7da0      	ldrb	r0, [r4, #22]
 800b490:	f080 0001 	eor.w	r0, r0, #1
 800b494:	bd38      	pop	{r3, r4, r5, pc}
 800b496:	bf00      	nop

0800b498 <ucdr_deserialize_bool>:
 800b498:	b538      	push	{r3, r4, r5, lr}
 800b49a:	460d      	mov	r5, r1
 800b49c:	2101      	movs	r1, #1
 800b49e:	4604      	mov	r4, r0
 800b4a0:	f001 faac 	bl	800c9fc <ucdr_check_final_buffer_behavior>
 800b4a4:	b160      	cbz	r0, 800b4c0 <ucdr_deserialize_bool+0x28>
 800b4a6:	68a2      	ldr	r2, [r4, #8]
 800b4a8:	6923      	ldr	r3, [r4, #16]
 800b4aa:	f812 1b01 	ldrb.w	r1, [r2], #1
 800b4ae:	3900      	subs	r1, #0
 800b4b0:	bf18      	it	ne
 800b4b2:	2101      	movne	r1, #1
 800b4b4:	7029      	strb	r1, [r5, #0]
 800b4b6:	3301      	adds	r3, #1
 800b4b8:	2101      	movs	r1, #1
 800b4ba:	60a2      	str	r2, [r4, #8]
 800b4bc:	6123      	str	r3, [r4, #16]
 800b4be:	7561      	strb	r1, [r4, #21]
 800b4c0:	7da0      	ldrb	r0, [r4, #22]
 800b4c2:	f080 0001 	eor.w	r0, r0, #1
 800b4c6:	bd38      	pop	{r3, r4, r5, pc}

0800b4c8 <ucdr_serialize_uint8_t>:
 800b4c8:	b538      	push	{r3, r4, r5, lr}
 800b4ca:	460d      	mov	r5, r1
 800b4cc:	2101      	movs	r1, #1
 800b4ce:	4604      	mov	r4, r0
 800b4d0:	f001 fa94 	bl	800c9fc <ucdr_check_final_buffer_behavior>
 800b4d4:	b148      	cbz	r0, 800b4ea <ucdr_serialize_uint8_t+0x22>
 800b4d6:	68a3      	ldr	r3, [r4, #8]
 800b4d8:	701d      	strb	r5, [r3, #0]
 800b4da:	68a2      	ldr	r2, [r4, #8]
 800b4dc:	6923      	ldr	r3, [r4, #16]
 800b4de:	2101      	movs	r1, #1
 800b4e0:	440a      	add	r2, r1
 800b4e2:	440b      	add	r3, r1
 800b4e4:	60a2      	str	r2, [r4, #8]
 800b4e6:	6123      	str	r3, [r4, #16]
 800b4e8:	7561      	strb	r1, [r4, #21]
 800b4ea:	7da0      	ldrb	r0, [r4, #22]
 800b4ec:	f080 0001 	eor.w	r0, r0, #1
 800b4f0:	bd38      	pop	{r3, r4, r5, pc}
 800b4f2:	bf00      	nop

0800b4f4 <ucdr_deserialize_uint8_t>:
 800b4f4:	b538      	push	{r3, r4, r5, lr}
 800b4f6:	460d      	mov	r5, r1
 800b4f8:	2101      	movs	r1, #1
 800b4fa:	4604      	mov	r4, r0
 800b4fc:	f001 fa7e 	bl	800c9fc <ucdr_check_final_buffer_behavior>
 800b500:	b150      	cbz	r0, 800b518 <ucdr_deserialize_uint8_t+0x24>
 800b502:	68a3      	ldr	r3, [r4, #8]
 800b504:	781b      	ldrb	r3, [r3, #0]
 800b506:	702b      	strb	r3, [r5, #0]
 800b508:	68a2      	ldr	r2, [r4, #8]
 800b50a:	6923      	ldr	r3, [r4, #16]
 800b50c:	2101      	movs	r1, #1
 800b50e:	440a      	add	r2, r1
 800b510:	440b      	add	r3, r1
 800b512:	60a2      	str	r2, [r4, #8]
 800b514:	6123      	str	r3, [r4, #16]
 800b516:	7561      	strb	r1, [r4, #21]
 800b518:	7da0      	ldrb	r0, [r4, #22]
 800b51a:	f080 0001 	eor.w	r0, r0, #1
 800b51e:	bd38      	pop	{r3, r4, r5, pc}

0800b520 <ucdr_serialize_uint16_t>:
 800b520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b524:	b082      	sub	sp, #8
 800b526:	460b      	mov	r3, r1
 800b528:	2102      	movs	r1, #2
 800b52a:	4604      	mov	r4, r0
 800b52c:	f8ad 3006 	strh.w	r3, [sp, #6]
 800b530:	f001 fab8 	bl	800caa4 <ucdr_buffer_alignment>
 800b534:	4601      	mov	r1, r0
 800b536:	4620      	mov	r0, r4
 800b538:	7d67      	ldrb	r7, [r4, #21]
 800b53a:	f001 faf7 	bl	800cb2c <ucdr_advance_buffer>
 800b53e:	2102      	movs	r1, #2
 800b540:	4620      	mov	r0, r4
 800b542:	f001 fa4f 	bl	800c9e4 <ucdr_check_buffer_available_for>
 800b546:	bb78      	cbnz	r0, 800b5a8 <ucdr_serialize_uint16_t+0x88>
 800b548:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b54c:	42ab      	cmp	r3, r5
 800b54e:	d926      	bls.n	800b59e <ucdr_serialize_uint16_t+0x7e>
 800b550:	1b5e      	subs	r6, r3, r5
 800b552:	60a3      	str	r3, [r4, #8]
 800b554:	6923      	ldr	r3, [r4, #16]
 800b556:	f1c6 0802 	rsb	r8, r6, #2
 800b55a:	4433      	add	r3, r6
 800b55c:	6123      	str	r3, [r4, #16]
 800b55e:	4641      	mov	r1, r8
 800b560:	4620      	mov	r0, r4
 800b562:	f001 fa4b 	bl	800c9fc <ucdr_check_final_buffer_behavior>
 800b566:	2800      	cmp	r0, #0
 800b568:	d03b      	beq.n	800b5e2 <ucdr_serialize_uint16_t+0xc2>
 800b56a:	7d23      	ldrb	r3, [r4, #20]
 800b56c:	2b01      	cmp	r3, #1
 800b56e:	d04a      	beq.n	800b606 <ucdr_serialize_uint16_t+0xe6>
 800b570:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b574:	702b      	strb	r3, [r5, #0]
 800b576:	2e00      	cmp	r6, #0
 800b578:	d040      	beq.n	800b5fc <ucdr_serialize_uint16_t+0xdc>
 800b57a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b57e:	706b      	strb	r3, [r5, #1]
 800b580:	6923      	ldr	r3, [r4, #16]
 800b582:	68a2      	ldr	r2, [r4, #8]
 800b584:	7da0      	ldrb	r0, [r4, #22]
 800b586:	3302      	adds	r3, #2
 800b588:	1b9e      	subs	r6, r3, r6
 800b58a:	4442      	add	r2, r8
 800b58c:	2302      	movs	r3, #2
 800b58e:	f080 0001 	eor.w	r0, r0, #1
 800b592:	60a2      	str	r2, [r4, #8]
 800b594:	6126      	str	r6, [r4, #16]
 800b596:	7563      	strb	r3, [r4, #21]
 800b598:	b002      	add	sp, #8
 800b59a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b59e:	2102      	movs	r1, #2
 800b5a0:	4620      	mov	r0, r4
 800b5a2:	f001 fa2b 	bl	800c9fc <ucdr_check_final_buffer_behavior>
 800b5a6:	b190      	cbz	r0, 800b5ce <ucdr_serialize_uint16_t+0xae>
 800b5a8:	7d23      	ldrb	r3, [r4, #20]
 800b5aa:	2b01      	cmp	r3, #1
 800b5ac:	68a3      	ldr	r3, [r4, #8]
 800b5ae:	d014      	beq.n	800b5da <ucdr_serialize_uint16_t+0xba>
 800b5b0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b5b4:	701a      	strb	r2, [r3, #0]
 800b5b6:	68a3      	ldr	r3, [r4, #8]
 800b5b8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b5bc:	705a      	strb	r2, [r3, #1]
 800b5be:	68a2      	ldr	r2, [r4, #8]
 800b5c0:	6923      	ldr	r3, [r4, #16]
 800b5c2:	3202      	adds	r2, #2
 800b5c4:	3302      	adds	r3, #2
 800b5c6:	2102      	movs	r1, #2
 800b5c8:	60a2      	str	r2, [r4, #8]
 800b5ca:	6123      	str	r3, [r4, #16]
 800b5cc:	7561      	strb	r1, [r4, #21]
 800b5ce:	7da0      	ldrb	r0, [r4, #22]
 800b5d0:	f080 0001 	eor.w	r0, r0, #1
 800b5d4:	b002      	add	sp, #8
 800b5d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5da:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b5de:	801a      	strh	r2, [r3, #0]
 800b5e0:	e7ed      	b.n	800b5be <ucdr_serialize_uint16_t+0x9e>
 800b5e2:	68a2      	ldr	r2, [r4, #8]
 800b5e4:	6923      	ldr	r3, [r4, #16]
 800b5e6:	7da0      	ldrb	r0, [r4, #22]
 800b5e8:	7567      	strb	r7, [r4, #21]
 800b5ea:	1b92      	subs	r2, r2, r6
 800b5ec:	1b9b      	subs	r3, r3, r6
 800b5ee:	f080 0001 	eor.w	r0, r0, #1
 800b5f2:	60a2      	str	r2, [r4, #8]
 800b5f4:	6123      	str	r3, [r4, #16]
 800b5f6:	b002      	add	sp, #8
 800b5f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5fc:	68a3      	ldr	r3, [r4, #8]
 800b5fe:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b602:	701a      	strb	r2, [r3, #0]
 800b604:	e7bc      	b.n	800b580 <ucdr_serialize_uint16_t+0x60>
 800b606:	4628      	mov	r0, r5
 800b608:	f10d 0506 	add.w	r5, sp, #6
 800b60c:	4629      	mov	r1, r5
 800b60e:	4632      	mov	r2, r6
 800b610:	f00e fbe1 	bl	8019dd6 <memcpy>
 800b614:	68a0      	ldr	r0, [r4, #8]
 800b616:	4642      	mov	r2, r8
 800b618:	19a9      	adds	r1, r5, r6
 800b61a:	f00e fbdc 	bl	8019dd6 <memcpy>
 800b61e:	e7af      	b.n	800b580 <ucdr_serialize_uint16_t+0x60>

0800b620 <ucdr_serialize_endian_uint16_t>:
 800b620:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b624:	b083      	sub	sp, #12
 800b626:	460d      	mov	r5, r1
 800b628:	2102      	movs	r1, #2
 800b62a:	4604      	mov	r4, r0
 800b62c:	f8ad 2006 	strh.w	r2, [sp, #6]
 800b630:	f001 fa38 	bl	800caa4 <ucdr_buffer_alignment>
 800b634:	4601      	mov	r1, r0
 800b636:	4620      	mov	r0, r4
 800b638:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b63c:	f001 fa76 	bl	800cb2c <ucdr_advance_buffer>
 800b640:	2102      	movs	r1, #2
 800b642:	4620      	mov	r0, r4
 800b644:	f001 f9ce 	bl	800c9e4 <ucdr_check_buffer_available_for>
 800b648:	bb70      	cbnz	r0, 800b6a8 <ucdr_serialize_endian_uint16_t+0x88>
 800b64a:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b64e:	42be      	cmp	r6, r7
 800b650:	d925      	bls.n	800b69e <ucdr_serialize_endian_uint16_t+0x7e>
 800b652:	6923      	ldr	r3, [r4, #16]
 800b654:	60a6      	str	r6, [r4, #8]
 800b656:	1bf6      	subs	r6, r6, r7
 800b658:	4433      	add	r3, r6
 800b65a:	f1c6 0902 	rsb	r9, r6, #2
 800b65e:	6123      	str	r3, [r4, #16]
 800b660:	4649      	mov	r1, r9
 800b662:	4620      	mov	r0, r4
 800b664:	f001 f9ca 	bl	800c9fc <ucdr_check_final_buffer_behavior>
 800b668:	2800      	cmp	r0, #0
 800b66a:	d039      	beq.n	800b6e0 <ucdr_serialize_endian_uint16_t+0xc0>
 800b66c:	2d01      	cmp	r5, #1
 800b66e:	d04a      	beq.n	800b706 <ucdr_serialize_endian_uint16_t+0xe6>
 800b670:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b674:	703b      	strb	r3, [r7, #0]
 800b676:	2e00      	cmp	r6, #0
 800b678:	d040      	beq.n	800b6fc <ucdr_serialize_endian_uint16_t+0xdc>
 800b67a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b67e:	707b      	strb	r3, [r7, #1]
 800b680:	6923      	ldr	r3, [r4, #16]
 800b682:	68a2      	ldr	r2, [r4, #8]
 800b684:	7da0      	ldrb	r0, [r4, #22]
 800b686:	3302      	adds	r3, #2
 800b688:	444a      	add	r2, r9
 800b68a:	1b9b      	subs	r3, r3, r6
 800b68c:	2102      	movs	r1, #2
 800b68e:	f080 0001 	eor.w	r0, r0, #1
 800b692:	60a2      	str	r2, [r4, #8]
 800b694:	6123      	str	r3, [r4, #16]
 800b696:	7561      	strb	r1, [r4, #21]
 800b698:	b003      	add	sp, #12
 800b69a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b69e:	2102      	movs	r1, #2
 800b6a0:	4620      	mov	r0, r4
 800b6a2:	f001 f9ab 	bl	800c9fc <ucdr_check_final_buffer_behavior>
 800b6a6:	b188      	cbz	r0, 800b6cc <ucdr_serialize_endian_uint16_t+0xac>
 800b6a8:	2d01      	cmp	r5, #1
 800b6aa:	68a3      	ldr	r3, [r4, #8]
 800b6ac:	d014      	beq.n	800b6d8 <ucdr_serialize_endian_uint16_t+0xb8>
 800b6ae:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b6b2:	701a      	strb	r2, [r3, #0]
 800b6b4:	68a3      	ldr	r3, [r4, #8]
 800b6b6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b6ba:	705a      	strb	r2, [r3, #1]
 800b6bc:	68a2      	ldr	r2, [r4, #8]
 800b6be:	6923      	ldr	r3, [r4, #16]
 800b6c0:	3202      	adds	r2, #2
 800b6c2:	3302      	adds	r3, #2
 800b6c4:	2102      	movs	r1, #2
 800b6c6:	60a2      	str	r2, [r4, #8]
 800b6c8:	6123      	str	r3, [r4, #16]
 800b6ca:	7561      	strb	r1, [r4, #21]
 800b6cc:	7da0      	ldrb	r0, [r4, #22]
 800b6ce:	f080 0001 	eor.w	r0, r0, #1
 800b6d2:	b003      	add	sp, #12
 800b6d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b6d8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b6dc:	801a      	strh	r2, [r3, #0]
 800b6de:	e7ed      	b.n	800b6bc <ucdr_serialize_endian_uint16_t+0x9c>
 800b6e0:	68a2      	ldr	r2, [r4, #8]
 800b6e2:	6923      	ldr	r3, [r4, #16]
 800b6e4:	7da0      	ldrb	r0, [r4, #22]
 800b6e6:	f884 8015 	strb.w	r8, [r4, #21]
 800b6ea:	1b92      	subs	r2, r2, r6
 800b6ec:	1b9b      	subs	r3, r3, r6
 800b6ee:	f080 0001 	eor.w	r0, r0, #1
 800b6f2:	60a2      	str	r2, [r4, #8]
 800b6f4:	6123      	str	r3, [r4, #16]
 800b6f6:	b003      	add	sp, #12
 800b6f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b6fc:	68a3      	ldr	r3, [r4, #8]
 800b6fe:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b702:	701a      	strb	r2, [r3, #0]
 800b704:	e7bc      	b.n	800b680 <ucdr_serialize_endian_uint16_t+0x60>
 800b706:	f10d 0506 	add.w	r5, sp, #6
 800b70a:	4629      	mov	r1, r5
 800b70c:	4632      	mov	r2, r6
 800b70e:	4638      	mov	r0, r7
 800b710:	f00e fb61 	bl	8019dd6 <memcpy>
 800b714:	68a0      	ldr	r0, [r4, #8]
 800b716:	464a      	mov	r2, r9
 800b718:	19a9      	adds	r1, r5, r6
 800b71a:	f00e fb5c 	bl	8019dd6 <memcpy>
 800b71e:	e7af      	b.n	800b680 <ucdr_serialize_endian_uint16_t+0x60>

0800b720 <ucdr_deserialize_uint16_t>:
 800b720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b724:	460d      	mov	r5, r1
 800b726:	2102      	movs	r1, #2
 800b728:	4604      	mov	r4, r0
 800b72a:	f001 f9bb 	bl	800caa4 <ucdr_buffer_alignment>
 800b72e:	4601      	mov	r1, r0
 800b730:	4620      	mov	r0, r4
 800b732:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b736:	f001 f9f9 	bl	800cb2c <ucdr_advance_buffer>
 800b73a:	2102      	movs	r1, #2
 800b73c:	4620      	mov	r0, r4
 800b73e:	f001 f951 	bl	800c9e4 <ucdr_check_buffer_available_for>
 800b742:	bb60      	cbnz	r0, 800b79e <ucdr_deserialize_uint16_t+0x7e>
 800b744:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b748:	42be      	cmp	r6, r7
 800b74a:	d923      	bls.n	800b794 <ucdr_deserialize_uint16_t+0x74>
 800b74c:	6923      	ldr	r3, [r4, #16]
 800b74e:	60a6      	str	r6, [r4, #8]
 800b750:	1bf6      	subs	r6, r6, r7
 800b752:	4433      	add	r3, r6
 800b754:	f1c6 0902 	rsb	r9, r6, #2
 800b758:	6123      	str	r3, [r4, #16]
 800b75a:	4649      	mov	r1, r9
 800b75c:	4620      	mov	r0, r4
 800b75e:	f001 f94d 	bl	800c9fc <ucdr_check_final_buffer_behavior>
 800b762:	2800      	cmp	r0, #0
 800b764:	d034      	beq.n	800b7d0 <ucdr_deserialize_uint16_t+0xb0>
 800b766:	7d23      	ldrb	r3, [r4, #20]
 800b768:	2b01      	cmp	r3, #1
 800b76a:	d042      	beq.n	800b7f2 <ucdr_deserialize_uint16_t+0xd2>
 800b76c:	787b      	ldrb	r3, [r7, #1]
 800b76e:	702b      	strb	r3, [r5, #0]
 800b770:	2e00      	cmp	r6, #0
 800b772:	d03a      	beq.n	800b7ea <ucdr_deserialize_uint16_t+0xca>
 800b774:	783b      	ldrb	r3, [r7, #0]
 800b776:	706b      	strb	r3, [r5, #1]
 800b778:	6923      	ldr	r3, [r4, #16]
 800b77a:	68a2      	ldr	r2, [r4, #8]
 800b77c:	7da0      	ldrb	r0, [r4, #22]
 800b77e:	2102      	movs	r1, #2
 800b780:	3302      	adds	r3, #2
 800b782:	444a      	add	r2, r9
 800b784:	1b9b      	subs	r3, r3, r6
 800b786:	7561      	strb	r1, [r4, #21]
 800b788:	60a2      	str	r2, [r4, #8]
 800b78a:	6123      	str	r3, [r4, #16]
 800b78c:	f080 0001 	eor.w	r0, r0, #1
 800b790:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b794:	2102      	movs	r1, #2
 800b796:	4620      	mov	r0, r4
 800b798:	f001 f930 	bl	800c9fc <ucdr_check_final_buffer_behavior>
 800b79c:	b180      	cbz	r0, 800b7c0 <ucdr_deserialize_uint16_t+0xa0>
 800b79e:	7d23      	ldrb	r3, [r4, #20]
 800b7a0:	2b01      	cmp	r3, #1
 800b7a2:	68a3      	ldr	r3, [r4, #8]
 800b7a4:	d011      	beq.n	800b7ca <ucdr_deserialize_uint16_t+0xaa>
 800b7a6:	785b      	ldrb	r3, [r3, #1]
 800b7a8:	702b      	strb	r3, [r5, #0]
 800b7aa:	68a3      	ldr	r3, [r4, #8]
 800b7ac:	781b      	ldrb	r3, [r3, #0]
 800b7ae:	706b      	strb	r3, [r5, #1]
 800b7b0:	68a2      	ldr	r2, [r4, #8]
 800b7b2:	6923      	ldr	r3, [r4, #16]
 800b7b4:	3202      	adds	r2, #2
 800b7b6:	3302      	adds	r3, #2
 800b7b8:	2102      	movs	r1, #2
 800b7ba:	60a2      	str	r2, [r4, #8]
 800b7bc:	6123      	str	r3, [r4, #16]
 800b7be:	7561      	strb	r1, [r4, #21]
 800b7c0:	7da0      	ldrb	r0, [r4, #22]
 800b7c2:	f080 0001 	eor.w	r0, r0, #1
 800b7c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7ca:	881b      	ldrh	r3, [r3, #0]
 800b7cc:	802b      	strh	r3, [r5, #0]
 800b7ce:	e7ef      	b.n	800b7b0 <ucdr_deserialize_uint16_t+0x90>
 800b7d0:	68a2      	ldr	r2, [r4, #8]
 800b7d2:	6923      	ldr	r3, [r4, #16]
 800b7d4:	7da0      	ldrb	r0, [r4, #22]
 800b7d6:	f884 8015 	strb.w	r8, [r4, #21]
 800b7da:	1b92      	subs	r2, r2, r6
 800b7dc:	1b9b      	subs	r3, r3, r6
 800b7de:	60a2      	str	r2, [r4, #8]
 800b7e0:	6123      	str	r3, [r4, #16]
 800b7e2:	f080 0001 	eor.w	r0, r0, #1
 800b7e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7ea:	68a3      	ldr	r3, [r4, #8]
 800b7ec:	781b      	ldrb	r3, [r3, #0]
 800b7ee:	706b      	strb	r3, [r5, #1]
 800b7f0:	e7c2      	b.n	800b778 <ucdr_deserialize_uint16_t+0x58>
 800b7f2:	4639      	mov	r1, r7
 800b7f4:	4632      	mov	r2, r6
 800b7f6:	4628      	mov	r0, r5
 800b7f8:	f00e faed 	bl	8019dd6 <memcpy>
 800b7fc:	68a1      	ldr	r1, [r4, #8]
 800b7fe:	464a      	mov	r2, r9
 800b800:	19a8      	adds	r0, r5, r6
 800b802:	f00e fae8 	bl	8019dd6 <memcpy>
 800b806:	e7b7      	b.n	800b778 <ucdr_deserialize_uint16_t+0x58>

0800b808 <ucdr_deserialize_endian_uint16_t>:
 800b808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b80c:	460e      	mov	r6, r1
 800b80e:	2102      	movs	r1, #2
 800b810:	4604      	mov	r4, r0
 800b812:	4615      	mov	r5, r2
 800b814:	f001 f946 	bl	800caa4 <ucdr_buffer_alignment>
 800b818:	4601      	mov	r1, r0
 800b81a:	4620      	mov	r0, r4
 800b81c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b820:	f001 f984 	bl	800cb2c <ucdr_advance_buffer>
 800b824:	2102      	movs	r1, #2
 800b826:	4620      	mov	r0, r4
 800b828:	f001 f8dc 	bl	800c9e4 <ucdr_check_buffer_available_for>
 800b82c:	bb70      	cbnz	r0, 800b88c <ucdr_deserialize_endian_uint16_t+0x84>
 800b82e:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800b832:	4547      	cmp	r7, r8
 800b834:	d925      	bls.n	800b882 <ucdr_deserialize_endian_uint16_t+0x7a>
 800b836:	6923      	ldr	r3, [r4, #16]
 800b838:	60a7      	str	r7, [r4, #8]
 800b83a:	eba7 0708 	sub.w	r7, r7, r8
 800b83e:	443b      	add	r3, r7
 800b840:	f1c7 0a02 	rsb	sl, r7, #2
 800b844:	6123      	str	r3, [r4, #16]
 800b846:	4651      	mov	r1, sl
 800b848:	4620      	mov	r0, r4
 800b84a:	f001 f8d7 	bl	800c9fc <ucdr_check_final_buffer_behavior>
 800b84e:	2800      	cmp	r0, #0
 800b850:	d034      	beq.n	800b8bc <ucdr_deserialize_endian_uint16_t+0xb4>
 800b852:	2e01      	cmp	r6, #1
 800b854:	d043      	beq.n	800b8de <ucdr_deserialize_endian_uint16_t+0xd6>
 800b856:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b85a:	702b      	strb	r3, [r5, #0]
 800b85c:	2f00      	cmp	r7, #0
 800b85e:	d03a      	beq.n	800b8d6 <ucdr_deserialize_endian_uint16_t+0xce>
 800b860:	f898 3000 	ldrb.w	r3, [r8]
 800b864:	706b      	strb	r3, [r5, #1]
 800b866:	6923      	ldr	r3, [r4, #16]
 800b868:	68a2      	ldr	r2, [r4, #8]
 800b86a:	7da0      	ldrb	r0, [r4, #22]
 800b86c:	2102      	movs	r1, #2
 800b86e:	3302      	adds	r3, #2
 800b870:	4452      	add	r2, sl
 800b872:	1bdb      	subs	r3, r3, r7
 800b874:	7561      	strb	r1, [r4, #21]
 800b876:	60a2      	str	r2, [r4, #8]
 800b878:	6123      	str	r3, [r4, #16]
 800b87a:	f080 0001 	eor.w	r0, r0, #1
 800b87e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b882:	2102      	movs	r1, #2
 800b884:	4620      	mov	r0, r4
 800b886:	f001 f8b9 	bl	800c9fc <ucdr_check_final_buffer_behavior>
 800b88a:	b178      	cbz	r0, 800b8ac <ucdr_deserialize_endian_uint16_t+0xa4>
 800b88c:	2e01      	cmp	r6, #1
 800b88e:	68a3      	ldr	r3, [r4, #8]
 800b890:	d011      	beq.n	800b8b6 <ucdr_deserialize_endian_uint16_t+0xae>
 800b892:	785b      	ldrb	r3, [r3, #1]
 800b894:	702b      	strb	r3, [r5, #0]
 800b896:	68a3      	ldr	r3, [r4, #8]
 800b898:	781b      	ldrb	r3, [r3, #0]
 800b89a:	706b      	strb	r3, [r5, #1]
 800b89c:	68a2      	ldr	r2, [r4, #8]
 800b89e:	6923      	ldr	r3, [r4, #16]
 800b8a0:	3202      	adds	r2, #2
 800b8a2:	3302      	adds	r3, #2
 800b8a4:	2102      	movs	r1, #2
 800b8a6:	60a2      	str	r2, [r4, #8]
 800b8a8:	6123      	str	r3, [r4, #16]
 800b8aa:	7561      	strb	r1, [r4, #21]
 800b8ac:	7da0      	ldrb	r0, [r4, #22]
 800b8ae:	f080 0001 	eor.w	r0, r0, #1
 800b8b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8b6:	881b      	ldrh	r3, [r3, #0]
 800b8b8:	802b      	strh	r3, [r5, #0]
 800b8ba:	e7ef      	b.n	800b89c <ucdr_deserialize_endian_uint16_t+0x94>
 800b8bc:	68a2      	ldr	r2, [r4, #8]
 800b8be:	6923      	ldr	r3, [r4, #16]
 800b8c0:	7da0      	ldrb	r0, [r4, #22]
 800b8c2:	f884 9015 	strb.w	r9, [r4, #21]
 800b8c6:	1bd2      	subs	r2, r2, r7
 800b8c8:	1bdb      	subs	r3, r3, r7
 800b8ca:	60a2      	str	r2, [r4, #8]
 800b8cc:	6123      	str	r3, [r4, #16]
 800b8ce:	f080 0001 	eor.w	r0, r0, #1
 800b8d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8d6:	68a3      	ldr	r3, [r4, #8]
 800b8d8:	781b      	ldrb	r3, [r3, #0]
 800b8da:	706b      	strb	r3, [r5, #1]
 800b8dc:	e7c3      	b.n	800b866 <ucdr_deserialize_endian_uint16_t+0x5e>
 800b8de:	4641      	mov	r1, r8
 800b8e0:	463a      	mov	r2, r7
 800b8e2:	4628      	mov	r0, r5
 800b8e4:	f00e fa77 	bl	8019dd6 <memcpy>
 800b8e8:	68a1      	ldr	r1, [r4, #8]
 800b8ea:	4652      	mov	r2, sl
 800b8ec:	19e8      	adds	r0, r5, r7
 800b8ee:	f00e fa72 	bl	8019dd6 <memcpy>
 800b8f2:	e7b8      	b.n	800b866 <ucdr_deserialize_endian_uint16_t+0x5e>

0800b8f4 <ucdr_serialize_uint32_t>:
 800b8f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8f8:	b082      	sub	sp, #8
 800b8fa:	4604      	mov	r4, r0
 800b8fc:	9101      	str	r1, [sp, #4]
 800b8fe:	2104      	movs	r1, #4
 800b900:	f001 f8d0 	bl	800caa4 <ucdr_buffer_alignment>
 800b904:	4601      	mov	r1, r0
 800b906:	4620      	mov	r0, r4
 800b908:	7d67      	ldrb	r7, [r4, #21]
 800b90a:	f001 f90f 	bl	800cb2c <ucdr_advance_buffer>
 800b90e:	2104      	movs	r1, #4
 800b910:	4620      	mov	r0, r4
 800b912:	f001 f867 	bl	800c9e4 <ucdr_check_buffer_available_for>
 800b916:	2800      	cmp	r0, #0
 800b918:	d139      	bne.n	800b98e <ucdr_serialize_uint32_t+0x9a>
 800b91a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b91e:	42ab      	cmp	r3, r5
 800b920:	d930      	bls.n	800b984 <ucdr_serialize_uint32_t+0x90>
 800b922:	1b5e      	subs	r6, r3, r5
 800b924:	60a3      	str	r3, [r4, #8]
 800b926:	6923      	ldr	r3, [r4, #16]
 800b928:	f1c6 0804 	rsb	r8, r6, #4
 800b92c:	4433      	add	r3, r6
 800b92e:	6123      	str	r3, [r4, #16]
 800b930:	4641      	mov	r1, r8
 800b932:	4620      	mov	r0, r4
 800b934:	f001 f862 	bl	800c9fc <ucdr_check_final_buffer_behavior>
 800b938:	2800      	cmp	r0, #0
 800b93a:	d04c      	beq.n	800b9d6 <ucdr_serialize_uint32_t+0xe2>
 800b93c:	7d23      	ldrb	r3, [r4, #20]
 800b93e:	2b01      	cmp	r3, #1
 800b940:	d063      	beq.n	800ba0a <ucdr_serialize_uint32_t+0x116>
 800b942:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b946:	702b      	strb	r3, [r5, #0]
 800b948:	2e00      	cmp	r6, #0
 800b94a:	d051      	beq.n	800b9f0 <ucdr_serialize_uint32_t+0xfc>
 800b94c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b950:	706b      	strb	r3, [r5, #1]
 800b952:	2e01      	cmp	r6, #1
 800b954:	d050      	beq.n	800b9f8 <ucdr_serialize_uint32_t+0x104>
 800b956:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b95a:	70ab      	strb	r3, [r5, #2]
 800b95c:	2e02      	cmp	r6, #2
 800b95e:	d04f      	beq.n	800ba00 <ucdr_serialize_uint32_t+0x10c>
 800b960:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b964:	70eb      	strb	r3, [r5, #3]
 800b966:	6923      	ldr	r3, [r4, #16]
 800b968:	68a2      	ldr	r2, [r4, #8]
 800b96a:	7da0      	ldrb	r0, [r4, #22]
 800b96c:	3304      	adds	r3, #4
 800b96e:	1b9e      	subs	r6, r3, r6
 800b970:	4442      	add	r2, r8
 800b972:	2304      	movs	r3, #4
 800b974:	f080 0001 	eor.w	r0, r0, #1
 800b978:	60a2      	str	r2, [r4, #8]
 800b97a:	6126      	str	r6, [r4, #16]
 800b97c:	7563      	strb	r3, [r4, #21]
 800b97e:	b002      	add	sp, #8
 800b980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b984:	2104      	movs	r1, #4
 800b986:	4620      	mov	r0, r4
 800b988:	f001 f838 	bl	800c9fc <ucdr_check_final_buffer_behavior>
 800b98c:	b1d0      	cbz	r0, 800b9c4 <ucdr_serialize_uint32_t+0xd0>
 800b98e:	7d23      	ldrb	r3, [r4, #20]
 800b990:	2b01      	cmp	r3, #1
 800b992:	68a3      	ldr	r3, [r4, #8]
 800b994:	d01c      	beq.n	800b9d0 <ucdr_serialize_uint32_t+0xdc>
 800b996:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b99a:	701a      	strb	r2, [r3, #0]
 800b99c:	68a3      	ldr	r3, [r4, #8]
 800b99e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b9a2:	705a      	strb	r2, [r3, #1]
 800b9a4:	68a3      	ldr	r3, [r4, #8]
 800b9a6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b9aa:	709a      	strb	r2, [r3, #2]
 800b9ac:	68a3      	ldr	r3, [r4, #8]
 800b9ae:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b9b2:	70da      	strb	r2, [r3, #3]
 800b9b4:	68a2      	ldr	r2, [r4, #8]
 800b9b6:	6923      	ldr	r3, [r4, #16]
 800b9b8:	3204      	adds	r2, #4
 800b9ba:	3304      	adds	r3, #4
 800b9bc:	2104      	movs	r1, #4
 800b9be:	60a2      	str	r2, [r4, #8]
 800b9c0:	6123      	str	r3, [r4, #16]
 800b9c2:	7561      	strb	r1, [r4, #21]
 800b9c4:	7da0      	ldrb	r0, [r4, #22]
 800b9c6:	f080 0001 	eor.w	r0, r0, #1
 800b9ca:	b002      	add	sp, #8
 800b9cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9d0:	9a01      	ldr	r2, [sp, #4]
 800b9d2:	601a      	str	r2, [r3, #0]
 800b9d4:	e7ee      	b.n	800b9b4 <ucdr_serialize_uint32_t+0xc0>
 800b9d6:	68a2      	ldr	r2, [r4, #8]
 800b9d8:	6923      	ldr	r3, [r4, #16]
 800b9da:	7da0      	ldrb	r0, [r4, #22]
 800b9dc:	7567      	strb	r7, [r4, #21]
 800b9de:	1b92      	subs	r2, r2, r6
 800b9e0:	1b9b      	subs	r3, r3, r6
 800b9e2:	f080 0001 	eor.w	r0, r0, #1
 800b9e6:	60a2      	str	r2, [r4, #8]
 800b9e8:	6123      	str	r3, [r4, #16]
 800b9ea:	b002      	add	sp, #8
 800b9ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9f0:	68a3      	ldr	r3, [r4, #8]
 800b9f2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b9f6:	701a      	strb	r2, [r3, #0]
 800b9f8:	68a3      	ldr	r3, [r4, #8]
 800b9fa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b9fe:	701a      	strb	r2, [r3, #0]
 800ba00:	68a3      	ldr	r3, [r4, #8]
 800ba02:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ba06:	701a      	strb	r2, [r3, #0]
 800ba08:	e7ad      	b.n	800b966 <ucdr_serialize_uint32_t+0x72>
 800ba0a:	4628      	mov	r0, r5
 800ba0c:	ad01      	add	r5, sp, #4
 800ba0e:	4629      	mov	r1, r5
 800ba10:	4632      	mov	r2, r6
 800ba12:	f00e f9e0 	bl	8019dd6 <memcpy>
 800ba16:	68a0      	ldr	r0, [r4, #8]
 800ba18:	4642      	mov	r2, r8
 800ba1a:	19a9      	adds	r1, r5, r6
 800ba1c:	f00e f9db 	bl	8019dd6 <memcpy>
 800ba20:	e7a1      	b.n	800b966 <ucdr_serialize_uint32_t+0x72>
 800ba22:	bf00      	nop

0800ba24 <ucdr_serialize_endian_uint32_t>:
 800ba24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ba28:	b083      	sub	sp, #12
 800ba2a:	460d      	mov	r5, r1
 800ba2c:	2104      	movs	r1, #4
 800ba2e:	4604      	mov	r4, r0
 800ba30:	9201      	str	r2, [sp, #4]
 800ba32:	f001 f837 	bl	800caa4 <ucdr_buffer_alignment>
 800ba36:	4601      	mov	r1, r0
 800ba38:	4620      	mov	r0, r4
 800ba3a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ba3e:	f001 f875 	bl	800cb2c <ucdr_advance_buffer>
 800ba42:	2104      	movs	r1, #4
 800ba44:	4620      	mov	r0, r4
 800ba46:	f000 ffcd 	bl	800c9e4 <ucdr_check_buffer_available_for>
 800ba4a:	2800      	cmp	r0, #0
 800ba4c:	d138      	bne.n	800bac0 <ucdr_serialize_endian_uint32_t+0x9c>
 800ba4e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800ba52:	42b7      	cmp	r7, r6
 800ba54:	d92f      	bls.n	800bab6 <ucdr_serialize_endian_uint32_t+0x92>
 800ba56:	6923      	ldr	r3, [r4, #16]
 800ba58:	60a7      	str	r7, [r4, #8]
 800ba5a:	1bbf      	subs	r7, r7, r6
 800ba5c:	443b      	add	r3, r7
 800ba5e:	f1c7 0904 	rsb	r9, r7, #4
 800ba62:	6123      	str	r3, [r4, #16]
 800ba64:	4649      	mov	r1, r9
 800ba66:	4620      	mov	r0, r4
 800ba68:	f000 ffc8 	bl	800c9fc <ucdr_check_final_buffer_behavior>
 800ba6c:	2800      	cmp	r0, #0
 800ba6e:	d04a      	beq.n	800bb06 <ucdr_serialize_endian_uint32_t+0xe2>
 800ba70:	2d01      	cmp	r5, #1
 800ba72:	d063      	beq.n	800bb3c <ucdr_serialize_endian_uint32_t+0x118>
 800ba74:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ba78:	7033      	strb	r3, [r6, #0]
 800ba7a:	2f00      	cmp	r7, #0
 800ba7c:	d051      	beq.n	800bb22 <ucdr_serialize_endian_uint32_t+0xfe>
 800ba7e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ba82:	7073      	strb	r3, [r6, #1]
 800ba84:	2f01      	cmp	r7, #1
 800ba86:	d050      	beq.n	800bb2a <ucdr_serialize_endian_uint32_t+0x106>
 800ba88:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ba8c:	70b3      	strb	r3, [r6, #2]
 800ba8e:	2f02      	cmp	r7, #2
 800ba90:	d04f      	beq.n	800bb32 <ucdr_serialize_endian_uint32_t+0x10e>
 800ba92:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ba96:	70f3      	strb	r3, [r6, #3]
 800ba98:	6923      	ldr	r3, [r4, #16]
 800ba9a:	68a2      	ldr	r2, [r4, #8]
 800ba9c:	7da0      	ldrb	r0, [r4, #22]
 800ba9e:	3304      	adds	r3, #4
 800baa0:	444a      	add	r2, r9
 800baa2:	1bdb      	subs	r3, r3, r7
 800baa4:	2104      	movs	r1, #4
 800baa6:	f080 0001 	eor.w	r0, r0, #1
 800baaa:	60a2      	str	r2, [r4, #8]
 800baac:	6123      	str	r3, [r4, #16]
 800baae:	7561      	strb	r1, [r4, #21]
 800bab0:	b003      	add	sp, #12
 800bab2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bab6:	2104      	movs	r1, #4
 800bab8:	4620      	mov	r0, r4
 800baba:	f000 ff9f 	bl	800c9fc <ucdr_check_final_buffer_behavior>
 800babe:	b1c8      	cbz	r0, 800baf4 <ucdr_serialize_endian_uint32_t+0xd0>
 800bac0:	2d01      	cmp	r5, #1
 800bac2:	68a3      	ldr	r3, [r4, #8]
 800bac4:	d01c      	beq.n	800bb00 <ucdr_serialize_endian_uint32_t+0xdc>
 800bac6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800baca:	701a      	strb	r2, [r3, #0]
 800bacc:	68a3      	ldr	r3, [r4, #8]
 800bace:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bad2:	705a      	strb	r2, [r3, #1]
 800bad4:	68a3      	ldr	r3, [r4, #8]
 800bad6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bada:	709a      	strb	r2, [r3, #2]
 800badc:	68a3      	ldr	r3, [r4, #8]
 800bade:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bae2:	70da      	strb	r2, [r3, #3]
 800bae4:	68a2      	ldr	r2, [r4, #8]
 800bae6:	6923      	ldr	r3, [r4, #16]
 800bae8:	3204      	adds	r2, #4
 800baea:	3304      	adds	r3, #4
 800baec:	2104      	movs	r1, #4
 800baee:	60a2      	str	r2, [r4, #8]
 800baf0:	6123      	str	r3, [r4, #16]
 800baf2:	7561      	strb	r1, [r4, #21]
 800baf4:	7da0      	ldrb	r0, [r4, #22]
 800baf6:	f080 0001 	eor.w	r0, r0, #1
 800bafa:	b003      	add	sp, #12
 800bafc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb00:	9a01      	ldr	r2, [sp, #4]
 800bb02:	601a      	str	r2, [r3, #0]
 800bb04:	e7ee      	b.n	800bae4 <ucdr_serialize_endian_uint32_t+0xc0>
 800bb06:	68a2      	ldr	r2, [r4, #8]
 800bb08:	6923      	ldr	r3, [r4, #16]
 800bb0a:	7da0      	ldrb	r0, [r4, #22]
 800bb0c:	f884 8015 	strb.w	r8, [r4, #21]
 800bb10:	1bd2      	subs	r2, r2, r7
 800bb12:	1bdb      	subs	r3, r3, r7
 800bb14:	f080 0001 	eor.w	r0, r0, #1
 800bb18:	60a2      	str	r2, [r4, #8]
 800bb1a:	6123      	str	r3, [r4, #16]
 800bb1c:	b003      	add	sp, #12
 800bb1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb22:	68a3      	ldr	r3, [r4, #8]
 800bb24:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bb28:	701a      	strb	r2, [r3, #0]
 800bb2a:	68a3      	ldr	r3, [r4, #8]
 800bb2c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bb30:	701a      	strb	r2, [r3, #0]
 800bb32:	68a3      	ldr	r3, [r4, #8]
 800bb34:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bb38:	701a      	strb	r2, [r3, #0]
 800bb3a:	e7ad      	b.n	800ba98 <ucdr_serialize_endian_uint32_t+0x74>
 800bb3c:	ad01      	add	r5, sp, #4
 800bb3e:	4629      	mov	r1, r5
 800bb40:	463a      	mov	r2, r7
 800bb42:	4630      	mov	r0, r6
 800bb44:	f00e f947 	bl	8019dd6 <memcpy>
 800bb48:	68a0      	ldr	r0, [r4, #8]
 800bb4a:	464a      	mov	r2, r9
 800bb4c:	19e9      	adds	r1, r5, r7
 800bb4e:	f00e f942 	bl	8019dd6 <memcpy>
 800bb52:	e7a1      	b.n	800ba98 <ucdr_serialize_endian_uint32_t+0x74>

0800bb54 <ucdr_deserialize_uint32_t>:
 800bb54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb58:	460d      	mov	r5, r1
 800bb5a:	2104      	movs	r1, #4
 800bb5c:	4604      	mov	r4, r0
 800bb5e:	f000 ffa1 	bl	800caa4 <ucdr_buffer_alignment>
 800bb62:	4601      	mov	r1, r0
 800bb64:	4620      	mov	r0, r4
 800bb66:	f894 8015 	ldrb.w	r8, [r4, #21]
 800bb6a:	f000 ffdf 	bl	800cb2c <ucdr_advance_buffer>
 800bb6e:	2104      	movs	r1, #4
 800bb70:	4620      	mov	r0, r4
 800bb72:	f000 ff37 	bl	800c9e4 <ucdr_check_buffer_available_for>
 800bb76:	2800      	cmp	r0, #0
 800bb78:	d138      	bne.n	800bbec <ucdr_deserialize_uint32_t+0x98>
 800bb7a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800bb7e:	42b7      	cmp	r7, r6
 800bb80:	d92f      	bls.n	800bbe2 <ucdr_deserialize_uint32_t+0x8e>
 800bb82:	6923      	ldr	r3, [r4, #16]
 800bb84:	60a7      	str	r7, [r4, #8]
 800bb86:	1bbf      	subs	r7, r7, r6
 800bb88:	443b      	add	r3, r7
 800bb8a:	f1c7 0904 	rsb	r9, r7, #4
 800bb8e:	6123      	str	r3, [r4, #16]
 800bb90:	4649      	mov	r1, r9
 800bb92:	4620      	mov	r0, r4
 800bb94:	f000 ff32 	bl	800c9fc <ucdr_check_final_buffer_behavior>
 800bb98:	2800      	cmp	r0, #0
 800bb9a:	d046      	beq.n	800bc2a <ucdr_deserialize_uint32_t+0xd6>
 800bb9c:	7d23      	ldrb	r3, [r4, #20]
 800bb9e:	2b01      	cmp	r3, #1
 800bba0:	d05c      	beq.n	800bc5c <ucdr_deserialize_uint32_t+0x108>
 800bba2:	78f3      	ldrb	r3, [r6, #3]
 800bba4:	702b      	strb	r3, [r5, #0]
 800bba6:	2f00      	cmp	r7, #0
 800bba8:	d04c      	beq.n	800bc44 <ucdr_deserialize_uint32_t+0xf0>
 800bbaa:	78b3      	ldrb	r3, [r6, #2]
 800bbac:	706b      	strb	r3, [r5, #1]
 800bbae:	2f01      	cmp	r7, #1
 800bbb0:	f105 0302 	add.w	r3, r5, #2
 800bbb4:	d04a      	beq.n	800bc4c <ucdr_deserialize_uint32_t+0xf8>
 800bbb6:	7873      	ldrb	r3, [r6, #1]
 800bbb8:	70ab      	strb	r3, [r5, #2]
 800bbba:	2f02      	cmp	r7, #2
 800bbbc:	f105 0303 	add.w	r3, r5, #3
 800bbc0:	d048      	beq.n	800bc54 <ucdr_deserialize_uint32_t+0x100>
 800bbc2:	7833      	ldrb	r3, [r6, #0]
 800bbc4:	70eb      	strb	r3, [r5, #3]
 800bbc6:	6923      	ldr	r3, [r4, #16]
 800bbc8:	68a2      	ldr	r2, [r4, #8]
 800bbca:	7da0      	ldrb	r0, [r4, #22]
 800bbcc:	2104      	movs	r1, #4
 800bbce:	3304      	adds	r3, #4
 800bbd0:	444a      	add	r2, r9
 800bbd2:	1bdb      	subs	r3, r3, r7
 800bbd4:	7561      	strb	r1, [r4, #21]
 800bbd6:	60a2      	str	r2, [r4, #8]
 800bbd8:	6123      	str	r3, [r4, #16]
 800bbda:	f080 0001 	eor.w	r0, r0, #1
 800bbde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbe2:	2104      	movs	r1, #4
 800bbe4:	4620      	mov	r0, r4
 800bbe6:	f000 ff09 	bl	800c9fc <ucdr_check_final_buffer_behavior>
 800bbea:	b1b0      	cbz	r0, 800bc1a <ucdr_deserialize_uint32_t+0xc6>
 800bbec:	7d23      	ldrb	r3, [r4, #20]
 800bbee:	2b01      	cmp	r3, #1
 800bbf0:	68a3      	ldr	r3, [r4, #8]
 800bbf2:	d017      	beq.n	800bc24 <ucdr_deserialize_uint32_t+0xd0>
 800bbf4:	78db      	ldrb	r3, [r3, #3]
 800bbf6:	702b      	strb	r3, [r5, #0]
 800bbf8:	68a3      	ldr	r3, [r4, #8]
 800bbfa:	789b      	ldrb	r3, [r3, #2]
 800bbfc:	706b      	strb	r3, [r5, #1]
 800bbfe:	68a3      	ldr	r3, [r4, #8]
 800bc00:	785b      	ldrb	r3, [r3, #1]
 800bc02:	70ab      	strb	r3, [r5, #2]
 800bc04:	68a3      	ldr	r3, [r4, #8]
 800bc06:	781b      	ldrb	r3, [r3, #0]
 800bc08:	70eb      	strb	r3, [r5, #3]
 800bc0a:	68a2      	ldr	r2, [r4, #8]
 800bc0c:	6923      	ldr	r3, [r4, #16]
 800bc0e:	3204      	adds	r2, #4
 800bc10:	3304      	adds	r3, #4
 800bc12:	2104      	movs	r1, #4
 800bc14:	60a2      	str	r2, [r4, #8]
 800bc16:	6123      	str	r3, [r4, #16]
 800bc18:	7561      	strb	r1, [r4, #21]
 800bc1a:	7da0      	ldrb	r0, [r4, #22]
 800bc1c:	f080 0001 	eor.w	r0, r0, #1
 800bc20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	602b      	str	r3, [r5, #0]
 800bc28:	e7ef      	b.n	800bc0a <ucdr_deserialize_uint32_t+0xb6>
 800bc2a:	68a2      	ldr	r2, [r4, #8]
 800bc2c:	6923      	ldr	r3, [r4, #16]
 800bc2e:	7da0      	ldrb	r0, [r4, #22]
 800bc30:	f884 8015 	strb.w	r8, [r4, #21]
 800bc34:	1bd2      	subs	r2, r2, r7
 800bc36:	1bdb      	subs	r3, r3, r7
 800bc38:	60a2      	str	r2, [r4, #8]
 800bc3a:	6123      	str	r3, [r4, #16]
 800bc3c:	f080 0001 	eor.w	r0, r0, #1
 800bc40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc44:	68a3      	ldr	r3, [r4, #8]
 800bc46:	789b      	ldrb	r3, [r3, #2]
 800bc48:	706b      	strb	r3, [r5, #1]
 800bc4a:	1cab      	adds	r3, r5, #2
 800bc4c:	68a2      	ldr	r2, [r4, #8]
 800bc4e:	7852      	ldrb	r2, [r2, #1]
 800bc50:	f803 2b01 	strb.w	r2, [r3], #1
 800bc54:	68a2      	ldr	r2, [r4, #8]
 800bc56:	7812      	ldrb	r2, [r2, #0]
 800bc58:	701a      	strb	r2, [r3, #0]
 800bc5a:	e7b4      	b.n	800bbc6 <ucdr_deserialize_uint32_t+0x72>
 800bc5c:	4631      	mov	r1, r6
 800bc5e:	463a      	mov	r2, r7
 800bc60:	4628      	mov	r0, r5
 800bc62:	f00e f8b8 	bl	8019dd6 <memcpy>
 800bc66:	68a1      	ldr	r1, [r4, #8]
 800bc68:	464a      	mov	r2, r9
 800bc6a:	19e8      	adds	r0, r5, r7
 800bc6c:	f00e f8b3 	bl	8019dd6 <memcpy>
 800bc70:	e7a9      	b.n	800bbc6 <ucdr_deserialize_uint32_t+0x72>
 800bc72:	bf00      	nop

0800bc74 <ucdr_deserialize_endian_uint32_t>:
 800bc74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc78:	460e      	mov	r6, r1
 800bc7a:	2104      	movs	r1, #4
 800bc7c:	4604      	mov	r4, r0
 800bc7e:	4615      	mov	r5, r2
 800bc80:	f000 ff10 	bl	800caa4 <ucdr_buffer_alignment>
 800bc84:	4601      	mov	r1, r0
 800bc86:	4620      	mov	r0, r4
 800bc88:	f894 9015 	ldrb.w	r9, [r4, #21]
 800bc8c:	f000 ff4e 	bl	800cb2c <ucdr_advance_buffer>
 800bc90:	2104      	movs	r1, #4
 800bc92:	4620      	mov	r0, r4
 800bc94:	f000 fea6 	bl	800c9e4 <ucdr_check_buffer_available_for>
 800bc98:	2800      	cmp	r0, #0
 800bc9a:	d13c      	bne.n	800bd16 <ucdr_deserialize_endian_uint32_t+0xa2>
 800bc9c:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800bca0:	42bb      	cmp	r3, r7
 800bca2:	d933      	bls.n	800bd0c <ucdr_deserialize_endian_uint32_t+0x98>
 800bca4:	eba3 0807 	sub.w	r8, r3, r7
 800bca8:	60a3      	str	r3, [r4, #8]
 800bcaa:	6923      	ldr	r3, [r4, #16]
 800bcac:	f1c8 0a04 	rsb	sl, r8, #4
 800bcb0:	4443      	add	r3, r8
 800bcb2:	6123      	str	r3, [r4, #16]
 800bcb4:	4651      	mov	r1, sl
 800bcb6:	4620      	mov	r0, r4
 800bcb8:	f000 fea0 	bl	800c9fc <ucdr_check_final_buffer_behavior>
 800bcbc:	2800      	cmp	r0, #0
 800bcbe:	d048      	beq.n	800bd52 <ucdr_deserialize_endian_uint32_t+0xde>
 800bcc0:	2e01      	cmp	r6, #1
 800bcc2:	d061      	beq.n	800bd88 <ucdr_deserialize_endian_uint32_t+0x114>
 800bcc4:	78fb      	ldrb	r3, [r7, #3]
 800bcc6:	702b      	strb	r3, [r5, #0]
 800bcc8:	f1b8 0f00 	cmp.w	r8, #0
 800bccc:	d050      	beq.n	800bd70 <ucdr_deserialize_endian_uint32_t+0xfc>
 800bcce:	78bb      	ldrb	r3, [r7, #2]
 800bcd0:	706b      	strb	r3, [r5, #1]
 800bcd2:	f1b8 0f01 	cmp.w	r8, #1
 800bcd6:	f105 0302 	add.w	r3, r5, #2
 800bcda:	d04d      	beq.n	800bd78 <ucdr_deserialize_endian_uint32_t+0x104>
 800bcdc:	787b      	ldrb	r3, [r7, #1]
 800bcde:	70ab      	strb	r3, [r5, #2]
 800bce0:	f1b8 0f02 	cmp.w	r8, #2
 800bce4:	f105 0303 	add.w	r3, r5, #3
 800bce8:	d04a      	beq.n	800bd80 <ucdr_deserialize_endian_uint32_t+0x10c>
 800bcea:	783b      	ldrb	r3, [r7, #0]
 800bcec:	70eb      	strb	r3, [r5, #3]
 800bcee:	6923      	ldr	r3, [r4, #16]
 800bcf0:	68a2      	ldr	r2, [r4, #8]
 800bcf2:	7da0      	ldrb	r0, [r4, #22]
 800bcf4:	2104      	movs	r1, #4
 800bcf6:	3304      	adds	r3, #4
 800bcf8:	4452      	add	r2, sl
 800bcfa:	eba3 0308 	sub.w	r3, r3, r8
 800bcfe:	7561      	strb	r1, [r4, #21]
 800bd00:	60a2      	str	r2, [r4, #8]
 800bd02:	6123      	str	r3, [r4, #16]
 800bd04:	f080 0001 	eor.w	r0, r0, #1
 800bd08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd0c:	2104      	movs	r1, #4
 800bd0e:	4620      	mov	r0, r4
 800bd10:	f000 fe74 	bl	800c9fc <ucdr_check_final_buffer_behavior>
 800bd14:	b1a8      	cbz	r0, 800bd42 <ucdr_deserialize_endian_uint32_t+0xce>
 800bd16:	2e01      	cmp	r6, #1
 800bd18:	68a3      	ldr	r3, [r4, #8]
 800bd1a:	d017      	beq.n	800bd4c <ucdr_deserialize_endian_uint32_t+0xd8>
 800bd1c:	78db      	ldrb	r3, [r3, #3]
 800bd1e:	702b      	strb	r3, [r5, #0]
 800bd20:	68a3      	ldr	r3, [r4, #8]
 800bd22:	789b      	ldrb	r3, [r3, #2]
 800bd24:	706b      	strb	r3, [r5, #1]
 800bd26:	68a3      	ldr	r3, [r4, #8]
 800bd28:	785b      	ldrb	r3, [r3, #1]
 800bd2a:	70ab      	strb	r3, [r5, #2]
 800bd2c:	68a3      	ldr	r3, [r4, #8]
 800bd2e:	781b      	ldrb	r3, [r3, #0]
 800bd30:	70eb      	strb	r3, [r5, #3]
 800bd32:	68a2      	ldr	r2, [r4, #8]
 800bd34:	6923      	ldr	r3, [r4, #16]
 800bd36:	3204      	adds	r2, #4
 800bd38:	3304      	adds	r3, #4
 800bd3a:	2104      	movs	r1, #4
 800bd3c:	60a2      	str	r2, [r4, #8]
 800bd3e:	6123      	str	r3, [r4, #16]
 800bd40:	7561      	strb	r1, [r4, #21]
 800bd42:	7da0      	ldrb	r0, [r4, #22]
 800bd44:	f080 0001 	eor.w	r0, r0, #1
 800bd48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	602b      	str	r3, [r5, #0]
 800bd50:	e7ef      	b.n	800bd32 <ucdr_deserialize_endian_uint32_t+0xbe>
 800bd52:	68a2      	ldr	r2, [r4, #8]
 800bd54:	6923      	ldr	r3, [r4, #16]
 800bd56:	7da0      	ldrb	r0, [r4, #22]
 800bd58:	f884 9015 	strb.w	r9, [r4, #21]
 800bd5c:	eba2 0208 	sub.w	r2, r2, r8
 800bd60:	eba3 0308 	sub.w	r3, r3, r8
 800bd64:	60a2      	str	r2, [r4, #8]
 800bd66:	6123      	str	r3, [r4, #16]
 800bd68:	f080 0001 	eor.w	r0, r0, #1
 800bd6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd70:	68a3      	ldr	r3, [r4, #8]
 800bd72:	789b      	ldrb	r3, [r3, #2]
 800bd74:	706b      	strb	r3, [r5, #1]
 800bd76:	1cab      	adds	r3, r5, #2
 800bd78:	68a2      	ldr	r2, [r4, #8]
 800bd7a:	7852      	ldrb	r2, [r2, #1]
 800bd7c:	f803 2b01 	strb.w	r2, [r3], #1
 800bd80:	68a2      	ldr	r2, [r4, #8]
 800bd82:	7812      	ldrb	r2, [r2, #0]
 800bd84:	701a      	strb	r2, [r3, #0]
 800bd86:	e7b2      	b.n	800bcee <ucdr_deserialize_endian_uint32_t+0x7a>
 800bd88:	4639      	mov	r1, r7
 800bd8a:	4642      	mov	r2, r8
 800bd8c:	4628      	mov	r0, r5
 800bd8e:	f00e f822 	bl	8019dd6 <memcpy>
 800bd92:	68a1      	ldr	r1, [r4, #8]
 800bd94:	4652      	mov	r2, sl
 800bd96:	eb05 0008 	add.w	r0, r5, r8
 800bd9a:	f00e f81c 	bl	8019dd6 <memcpy>
 800bd9e:	e7a6      	b.n	800bcee <ucdr_deserialize_endian_uint32_t+0x7a>

0800bda0 <ucdr_serialize_uint64_t>:
 800bda0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bda4:	2108      	movs	r1, #8
 800bda6:	b082      	sub	sp, #8
 800bda8:	4604      	mov	r4, r0
 800bdaa:	e9cd 2300 	strd	r2, r3, [sp]
 800bdae:	f000 fe79 	bl	800caa4 <ucdr_buffer_alignment>
 800bdb2:	4601      	mov	r1, r0
 800bdb4:	4620      	mov	r0, r4
 800bdb6:	7d67      	ldrb	r7, [r4, #21]
 800bdb8:	f000 feb8 	bl	800cb2c <ucdr_advance_buffer>
 800bdbc:	2108      	movs	r1, #8
 800bdbe:	4620      	mov	r0, r4
 800bdc0:	f000 fe10 	bl	800c9e4 <ucdr_check_buffer_available_for>
 800bdc4:	2800      	cmp	r0, #0
 800bdc6:	d14e      	bne.n	800be66 <ucdr_serialize_uint64_t+0xc6>
 800bdc8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800bdcc:	42ab      	cmp	r3, r5
 800bdce:	d945      	bls.n	800be5c <ucdr_serialize_uint64_t+0xbc>
 800bdd0:	1b5e      	subs	r6, r3, r5
 800bdd2:	60a3      	str	r3, [r4, #8]
 800bdd4:	6923      	ldr	r3, [r4, #16]
 800bdd6:	f1c6 0808 	rsb	r8, r6, #8
 800bdda:	4433      	add	r3, r6
 800bddc:	6123      	str	r3, [r4, #16]
 800bdde:	4641      	mov	r1, r8
 800bde0:	4620      	mov	r0, r4
 800bde2:	f000 fe0b 	bl	800c9fc <ucdr_check_final_buffer_behavior>
 800bde6:	2800      	cmp	r0, #0
 800bde8:	d074      	beq.n	800bed4 <ucdr_serialize_uint64_t+0x134>
 800bdea:	7d23      	ldrb	r3, [r4, #20]
 800bdec:	2b01      	cmp	r3, #1
 800bdee:	f000 809b 	beq.w	800bf28 <ucdr_serialize_uint64_t+0x188>
 800bdf2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bdf6:	702b      	strb	r3, [r5, #0]
 800bdf8:	2e00      	cmp	r6, #0
 800bdfa:	d078      	beq.n	800beee <ucdr_serialize_uint64_t+0x14e>
 800bdfc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800be00:	706b      	strb	r3, [r5, #1]
 800be02:	2e01      	cmp	r6, #1
 800be04:	d077      	beq.n	800bef6 <ucdr_serialize_uint64_t+0x156>
 800be06:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800be0a:	70ab      	strb	r3, [r5, #2]
 800be0c:	2e02      	cmp	r6, #2
 800be0e:	d076      	beq.n	800befe <ucdr_serialize_uint64_t+0x15e>
 800be10:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800be14:	70eb      	strb	r3, [r5, #3]
 800be16:	2e03      	cmp	r6, #3
 800be18:	d075      	beq.n	800bf06 <ucdr_serialize_uint64_t+0x166>
 800be1a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800be1e:	712b      	strb	r3, [r5, #4]
 800be20:	2e04      	cmp	r6, #4
 800be22:	d074      	beq.n	800bf0e <ucdr_serialize_uint64_t+0x16e>
 800be24:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800be28:	716b      	strb	r3, [r5, #5]
 800be2a:	2e05      	cmp	r6, #5
 800be2c:	d073      	beq.n	800bf16 <ucdr_serialize_uint64_t+0x176>
 800be2e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800be32:	71ab      	strb	r3, [r5, #6]
 800be34:	2e06      	cmp	r6, #6
 800be36:	d072      	beq.n	800bf1e <ucdr_serialize_uint64_t+0x17e>
 800be38:	f89d 3000 	ldrb.w	r3, [sp]
 800be3c:	71eb      	strb	r3, [r5, #7]
 800be3e:	6923      	ldr	r3, [r4, #16]
 800be40:	68a2      	ldr	r2, [r4, #8]
 800be42:	7da0      	ldrb	r0, [r4, #22]
 800be44:	3308      	adds	r3, #8
 800be46:	1b9e      	subs	r6, r3, r6
 800be48:	4442      	add	r2, r8
 800be4a:	2308      	movs	r3, #8
 800be4c:	f080 0001 	eor.w	r0, r0, #1
 800be50:	60a2      	str	r2, [r4, #8]
 800be52:	6126      	str	r6, [r4, #16]
 800be54:	7563      	strb	r3, [r4, #21]
 800be56:	b002      	add	sp, #8
 800be58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be5c:	2108      	movs	r1, #8
 800be5e:	4620      	mov	r0, r4
 800be60:	f000 fdcc 	bl	800c9fc <ucdr_check_final_buffer_behavior>
 800be64:	b350      	cbz	r0, 800bebc <ucdr_serialize_uint64_t+0x11c>
 800be66:	7d23      	ldrb	r3, [r4, #20]
 800be68:	2b01      	cmp	r3, #1
 800be6a:	d02d      	beq.n	800bec8 <ucdr_serialize_uint64_t+0x128>
 800be6c:	68a3      	ldr	r3, [r4, #8]
 800be6e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800be72:	701a      	strb	r2, [r3, #0]
 800be74:	68a3      	ldr	r3, [r4, #8]
 800be76:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800be7a:	705a      	strb	r2, [r3, #1]
 800be7c:	68a3      	ldr	r3, [r4, #8]
 800be7e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800be82:	709a      	strb	r2, [r3, #2]
 800be84:	68a3      	ldr	r3, [r4, #8]
 800be86:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800be8a:	70da      	strb	r2, [r3, #3]
 800be8c:	68a3      	ldr	r3, [r4, #8]
 800be8e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800be92:	711a      	strb	r2, [r3, #4]
 800be94:	68a3      	ldr	r3, [r4, #8]
 800be96:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800be9a:	715a      	strb	r2, [r3, #5]
 800be9c:	68a3      	ldr	r3, [r4, #8]
 800be9e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800bea2:	719a      	strb	r2, [r3, #6]
 800bea4:	68a3      	ldr	r3, [r4, #8]
 800bea6:	f89d 2000 	ldrb.w	r2, [sp]
 800beaa:	71da      	strb	r2, [r3, #7]
 800beac:	68a2      	ldr	r2, [r4, #8]
 800beae:	6923      	ldr	r3, [r4, #16]
 800beb0:	3208      	adds	r2, #8
 800beb2:	3308      	adds	r3, #8
 800beb4:	2108      	movs	r1, #8
 800beb6:	60a2      	str	r2, [r4, #8]
 800beb8:	6123      	str	r3, [r4, #16]
 800beba:	7561      	strb	r1, [r4, #21]
 800bebc:	7da0      	ldrb	r0, [r4, #22]
 800bebe:	f080 0001 	eor.w	r0, r0, #1
 800bec2:	b002      	add	sp, #8
 800bec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bec8:	466b      	mov	r3, sp
 800beca:	cb03      	ldmia	r3!, {r0, r1}
 800becc:	68a3      	ldr	r3, [r4, #8]
 800bece:	6018      	str	r0, [r3, #0]
 800bed0:	6059      	str	r1, [r3, #4]
 800bed2:	e7eb      	b.n	800beac <ucdr_serialize_uint64_t+0x10c>
 800bed4:	68a2      	ldr	r2, [r4, #8]
 800bed6:	6923      	ldr	r3, [r4, #16]
 800bed8:	7da0      	ldrb	r0, [r4, #22]
 800beda:	7567      	strb	r7, [r4, #21]
 800bedc:	1b92      	subs	r2, r2, r6
 800bede:	1b9b      	subs	r3, r3, r6
 800bee0:	f080 0001 	eor.w	r0, r0, #1
 800bee4:	60a2      	str	r2, [r4, #8]
 800bee6:	6123      	str	r3, [r4, #16]
 800bee8:	b002      	add	sp, #8
 800beea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800beee:	68a3      	ldr	r3, [r4, #8]
 800bef0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bef4:	701a      	strb	r2, [r3, #0]
 800bef6:	68a3      	ldr	r3, [r4, #8]
 800bef8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800befc:	701a      	strb	r2, [r3, #0]
 800befe:	68a3      	ldr	r3, [r4, #8]
 800bf00:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bf04:	701a      	strb	r2, [r3, #0]
 800bf06:	68a3      	ldr	r3, [r4, #8]
 800bf08:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800bf0c:	701a      	strb	r2, [r3, #0]
 800bf0e:	68a3      	ldr	r3, [r4, #8]
 800bf10:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800bf14:	701a      	strb	r2, [r3, #0]
 800bf16:	68a3      	ldr	r3, [r4, #8]
 800bf18:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800bf1c:	701a      	strb	r2, [r3, #0]
 800bf1e:	68a3      	ldr	r3, [r4, #8]
 800bf20:	f89d 2000 	ldrb.w	r2, [sp]
 800bf24:	701a      	strb	r2, [r3, #0]
 800bf26:	e78a      	b.n	800be3e <ucdr_serialize_uint64_t+0x9e>
 800bf28:	4628      	mov	r0, r5
 800bf2a:	466d      	mov	r5, sp
 800bf2c:	4629      	mov	r1, r5
 800bf2e:	4632      	mov	r2, r6
 800bf30:	f00d ff51 	bl	8019dd6 <memcpy>
 800bf34:	68a0      	ldr	r0, [r4, #8]
 800bf36:	4642      	mov	r2, r8
 800bf38:	19a9      	adds	r1, r5, r6
 800bf3a:	f00d ff4c 	bl	8019dd6 <memcpy>
 800bf3e:	e77e      	b.n	800be3e <ucdr_serialize_uint64_t+0x9e>

0800bf40 <ucdr_serialize_int16_t>:
 800bf40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf44:	b082      	sub	sp, #8
 800bf46:	460b      	mov	r3, r1
 800bf48:	2102      	movs	r1, #2
 800bf4a:	4604      	mov	r4, r0
 800bf4c:	f8ad 3006 	strh.w	r3, [sp, #6]
 800bf50:	f000 fda8 	bl	800caa4 <ucdr_buffer_alignment>
 800bf54:	4601      	mov	r1, r0
 800bf56:	4620      	mov	r0, r4
 800bf58:	7d67      	ldrb	r7, [r4, #21]
 800bf5a:	f000 fde7 	bl	800cb2c <ucdr_advance_buffer>
 800bf5e:	2102      	movs	r1, #2
 800bf60:	4620      	mov	r0, r4
 800bf62:	f000 fd3f 	bl	800c9e4 <ucdr_check_buffer_available_for>
 800bf66:	bb78      	cbnz	r0, 800bfc8 <ucdr_serialize_int16_t+0x88>
 800bf68:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800bf6c:	42ab      	cmp	r3, r5
 800bf6e:	d926      	bls.n	800bfbe <ucdr_serialize_int16_t+0x7e>
 800bf70:	1b5e      	subs	r6, r3, r5
 800bf72:	60a3      	str	r3, [r4, #8]
 800bf74:	6923      	ldr	r3, [r4, #16]
 800bf76:	f1c6 0802 	rsb	r8, r6, #2
 800bf7a:	4433      	add	r3, r6
 800bf7c:	6123      	str	r3, [r4, #16]
 800bf7e:	4641      	mov	r1, r8
 800bf80:	4620      	mov	r0, r4
 800bf82:	f000 fd3b 	bl	800c9fc <ucdr_check_final_buffer_behavior>
 800bf86:	2800      	cmp	r0, #0
 800bf88:	d03b      	beq.n	800c002 <ucdr_serialize_int16_t+0xc2>
 800bf8a:	7d23      	ldrb	r3, [r4, #20]
 800bf8c:	2b01      	cmp	r3, #1
 800bf8e:	d04a      	beq.n	800c026 <ucdr_serialize_int16_t+0xe6>
 800bf90:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bf94:	702b      	strb	r3, [r5, #0]
 800bf96:	2e00      	cmp	r6, #0
 800bf98:	d040      	beq.n	800c01c <ucdr_serialize_int16_t+0xdc>
 800bf9a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bf9e:	706b      	strb	r3, [r5, #1]
 800bfa0:	6923      	ldr	r3, [r4, #16]
 800bfa2:	68a2      	ldr	r2, [r4, #8]
 800bfa4:	7da0      	ldrb	r0, [r4, #22]
 800bfa6:	3302      	adds	r3, #2
 800bfa8:	1b9e      	subs	r6, r3, r6
 800bfaa:	4442      	add	r2, r8
 800bfac:	2302      	movs	r3, #2
 800bfae:	f080 0001 	eor.w	r0, r0, #1
 800bfb2:	60a2      	str	r2, [r4, #8]
 800bfb4:	6126      	str	r6, [r4, #16]
 800bfb6:	7563      	strb	r3, [r4, #21]
 800bfb8:	b002      	add	sp, #8
 800bfba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfbe:	2102      	movs	r1, #2
 800bfc0:	4620      	mov	r0, r4
 800bfc2:	f000 fd1b 	bl	800c9fc <ucdr_check_final_buffer_behavior>
 800bfc6:	b190      	cbz	r0, 800bfee <ucdr_serialize_int16_t+0xae>
 800bfc8:	7d23      	ldrb	r3, [r4, #20]
 800bfca:	2b01      	cmp	r3, #1
 800bfcc:	68a3      	ldr	r3, [r4, #8]
 800bfce:	d014      	beq.n	800bffa <ucdr_serialize_int16_t+0xba>
 800bfd0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bfd4:	701a      	strb	r2, [r3, #0]
 800bfd6:	68a3      	ldr	r3, [r4, #8]
 800bfd8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bfdc:	705a      	strb	r2, [r3, #1]
 800bfde:	68a2      	ldr	r2, [r4, #8]
 800bfe0:	6923      	ldr	r3, [r4, #16]
 800bfe2:	3202      	adds	r2, #2
 800bfe4:	3302      	adds	r3, #2
 800bfe6:	2102      	movs	r1, #2
 800bfe8:	60a2      	str	r2, [r4, #8]
 800bfea:	6123      	str	r3, [r4, #16]
 800bfec:	7561      	strb	r1, [r4, #21]
 800bfee:	7da0      	ldrb	r0, [r4, #22]
 800bff0:	f080 0001 	eor.w	r0, r0, #1
 800bff4:	b002      	add	sp, #8
 800bff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bffa:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800bffe:	801a      	strh	r2, [r3, #0]
 800c000:	e7ed      	b.n	800bfde <ucdr_serialize_int16_t+0x9e>
 800c002:	68a2      	ldr	r2, [r4, #8]
 800c004:	6923      	ldr	r3, [r4, #16]
 800c006:	7da0      	ldrb	r0, [r4, #22]
 800c008:	7567      	strb	r7, [r4, #21]
 800c00a:	1b92      	subs	r2, r2, r6
 800c00c:	1b9b      	subs	r3, r3, r6
 800c00e:	f080 0001 	eor.w	r0, r0, #1
 800c012:	60a2      	str	r2, [r4, #8]
 800c014:	6123      	str	r3, [r4, #16]
 800c016:	b002      	add	sp, #8
 800c018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c01c:	68a3      	ldr	r3, [r4, #8]
 800c01e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c022:	701a      	strb	r2, [r3, #0]
 800c024:	e7bc      	b.n	800bfa0 <ucdr_serialize_int16_t+0x60>
 800c026:	4628      	mov	r0, r5
 800c028:	f10d 0506 	add.w	r5, sp, #6
 800c02c:	4629      	mov	r1, r5
 800c02e:	4632      	mov	r2, r6
 800c030:	f00d fed1 	bl	8019dd6 <memcpy>
 800c034:	68a0      	ldr	r0, [r4, #8]
 800c036:	4642      	mov	r2, r8
 800c038:	19a9      	adds	r1, r5, r6
 800c03a:	f00d fecc 	bl	8019dd6 <memcpy>
 800c03e:	e7af      	b.n	800bfa0 <ucdr_serialize_int16_t+0x60>

0800c040 <ucdr_deserialize_int16_t>:
 800c040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c044:	460d      	mov	r5, r1
 800c046:	2102      	movs	r1, #2
 800c048:	4604      	mov	r4, r0
 800c04a:	f000 fd2b 	bl	800caa4 <ucdr_buffer_alignment>
 800c04e:	4601      	mov	r1, r0
 800c050:	4620      	mov	r0, r4
 800c052:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c056:	f000 fd69 	bl	800cb2c <ucdr_advance_buffer>
 800c05a:	2102      	movs	r1, #2
 800c05c:	4620      	mov	r0, r4
 800c05e:	f000 fcc1 	bl	800c9e4 <ucdr_check_buffer_available_for>
 800c062:	bb60      	cbnz	r0, 800c0be <ucdr_deserialize_int16_t+0x7e>
 800c064:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800c068:	42be      	cmp	r6, r7
 800c06a:	d923      	bls.n	800c0b4 <ucdr_deserialize_int16_t+0x74>
 800c06c:	6923      	ldr	r3, [r4, #16]
 800c06e:	60a6      	str	r6, [r4, #8]
 800c070:	1bf6      	subs	r6, r6, r7
 800c072:	4433      	add	r3, r6
 800c074:	f1c6 0902 	rsb	r9, r6, #2
 800c078:	6123      	str	r3, [r4, #16]
 800c07a:	4649      	mov	r1, r9
 800c07c:	4620      	mov	r0, r4
 800c07e:	f000 fcbd 	bl	800c9fc <ucdr_check_final_buffer_behavior>
 800c082:	2800      	cmp	r0, #0
 800c084:	d034      	beq.n	800c0f0 <ucdr_deserialize_int16_t+0xb0>
 800c086:	7d23      	ldrb	r3, [r4, #20]
 800c088:	2b01      	cmp	r3, #1
 800c08a:	d042      	beq.n	800c112 <ucdr_deserialize_int16_t+0xd2>
 800c08c:	787b      	ldrb	r3, [r7, #1]
 800c08e:	702b      	strb	r3, [r5, #0]
 800c090:	2e00      	cmp	r6, #0
 800c092:	d03a      	beq.n	800c10a <ucdr_deserialize_int16_t+0xca>
 800c094:	783b      	ldrb	r3, [r7, #0]
 800c096:	706b      	strb	r3, [r5, #1]
 800c098:	6923      	ldr	r3, [r4, #16]
 800c09a:	68a2      	ldr	r2, [r4, #8]
 800c09c:	7da0      	ldrb	r0, [r4, #22]
 800c09e:	2102      	movs	r1, #2
 800c0a0:	3302      	adds	r3, #2
 800c0a2:	444a      	add	r2, r9
 800c0a4:	1b9b      	subs	r3, r3, r6
 800c0a6:	7561      	strb	r1, [r4, #21]
 800c0a8:	60a2      	str	r2, [r4, #8]
 800c0aa:	6123      	str	r3, [r4, #16]
 800c0ac:	f080 0001 	eor.w	r0, r0, #1
 800c0b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0b4:	2102      	movs	r1, #2
 800c0b6:	4620      	mov	r0, r4
 800c0b8:	f000 fca0 	bl	800c9fc <ucdr_check_final_buffer_behavior>
 800c0bc:	b180      	cbz	r0, 800c0e0 <ucdr_deserialize_int16_t+0xa0>
 800c0be:	7d23      	ldrb	r3, [r4, #20]
 800c0c0:	2b01      	cmp	r3, #1
 800c0c2:	68a3      	ldr	r3, [r4, #8]
 800c0c4:	d011      	beq.n	800c0ea <ucdr_deserialize_int16_t+0xaa>
 800c0c6:	785b      	ldrb	r3, [r3, #1]
 800c0c8:	702b      	strb	r3, [r5, #0]
 800c0ca:	68a3      	ldr	r3, [r4, #8]
 800c0cc:	781b      	ldrb	r3, [r3, #0]
 800c0ce:	706b      	strb	r3, [r5, #1]
 800c0d0:	68a2      	ldr	r2, [r4, #8]
 800c0d2:	6923      	ldr	r3, [r4, #16]
 800c0d4:	3202      	adds	r2, #2
 800c0d6:	3302      	adds	r3, #2
 800c0d8:	2102      	movs	r1, #2
 800c0da:	60a2      	str	r2, [r4, #8]
 800c0dc:	6123      	str	r3, [r4, #16]
 800c0de:	7561      	strb	r1, [r4, #21]
 800c0e0:	7da0      	ldrb	r0, [r4, #22]
 800c0e2:	f080 0001 	eor.w	r0, r0, #1
 800c0e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0ea:	881b      	ldrh	r3, [r3, #0]
 800c0ec:	802b      	strh	r3, [r5, #0]
 800c0ee:	e7ef      	b.n	800c0d0 <ucdr_deserialize_int16_t+0x90>
 800c0f0:	68a2      	ldr	r2, [r4, #8]
 800c0f2:	6923      	ldr	r3, [r4, #16]
 800c0f4:	7da0      	ldrb	r0, [r4, #22]
 800c0f6:	f884 8015 	strb.w	r8, [r4, #21]
 800c0fa:	1b92      	subs	r2, r2, r6
 800c0fc:	1b9b      	subs	r3, r3, r6
 800c0fe:	60a2      	str	r2, [r4, #8]
 800c100:	6123      	str	r3, [r4, #16]
 800c102:	f080 0001 	eor.w	r0, r0, #1
 800c106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c10a:	68a3      	ldr	r3, [r4, #8]
 800c10c:	781b      	ldrb	r3, [r3, #0]
 800c10e:	706b      	strb	r3, [r5, #1]
 800c110:	e7c2      	b.n	800c098 <ucdr_deserialize_int16_t+0x58>
 800c112:	4639      	mov	r1, r7
 800c114:	4632      	mov	r2, r6
 800c116:	4628      	mov	r0, r5
 800c118:	f00d fe5d 	bl	8019dd6 <memcpy>
 800c11c:	68a1      	ldr	r1, [r4, #8]
 800c11e:	464a      	mov	r2, r9
 800c120:	19a8      	adds	r0, r5, r6
 800c122:	f00d fe58 	bl	8019dd6 <memcpy>
 800c126:	e7b7      	b.n	800c098 <ucdr_deserialize_int16_t+0x58>

0800c128 <ucdr_serialize_int32_t>:
 800c128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c12c:	b082      	sub	sp, #8
 800c12e:	4604      	mov	r4, r0
 800c130:	9101      	str	r1, [sp, #4]
 800c132:	2104      	movs	r1, #4
 800c134:	f000 fcb6 	bl	800caa4 <ucdr_buffer_alignment>
 800c138:	4601      	mov	r1, r0
 800c13a:	4620      	mov	r0, r4
 800c13c:	7d67      	ldrb	r7, [r4, #21]
 800c13e:	f000 fcf5 	bl	800cb2c <ucdr_advance_buffer>
 800c142:	2104      	movs	r1, #4
 800c144:	4620      	mov	r0, r4
 800c146:	f000 fc4d 	bl	800c9e4 <ucdr_check_buffer_available_for>
 800c14a:	2800      	cmp	r0, #0
 800c14c:	d139      	bne.n	800c1c2 <ucdr_serialize_int32_t+0x9a>
 800c14e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c152:	42ab      	cmp	r3, r5
 800c154:	d930      	bls.n	800c1b8 <ucdr_serialize_int32_t+0x90>
 800c156:	1b5e      	subs	r6, r3, r5
 800c158:	60a3      	str	r3, [r4, #8]
 800c15a:	6923      	ldr	r3, [r4, #16]
 800c15c:	f1c6 0804 	rsb	r8, r6, #4
 800c160:	4433      	add	r3, r6
 800c162:	6123      	str	r3, [r4, #16]
 800c164:	4641      	mov	r1, r8
 800c166:	4620      	mov	r0, r4
 800c168:	f000 fc48 	bl	800c9fc <ucdr_check_final_buffer_behavior>
 800c16c:	2800      	cmp	r0, #0
 800c16e:	d04c      	beq.n	800c20a <ucdr_serialize_int32_t+0xe2>
 800c170:	7d23      	ldrb	r3, [r4, #20]
 800c172:	2b01      	cmp	r3, #1
 800c174:	d063      	beq.n	800c23e <ucdr_serialize_int32_t+0x116>
 800c176:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c17a:	702b      	strb	r3, [r5, #0]
 800c17c:	2e00      	cmp	r6, #0
 800c17e:	d051      	beq.n	800c224 <ucdr_serialize_int32_t+0xfc>
 800c180:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c184:	706b      	strb	r3, [r5, #1]
 800c186:	2e01      	cmp	r6, #1
 800c188:	d050      	beq.n	800c22c <ucdr_serialize_int32_t+0x104>
 800c18a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c18e:	70ab      	strb	r3, [r5, #2]
 800c190:	2e02      	cmp	r6, #2
 800c192:	d04f      	beq.n	800c234 <ucdr_serialize_int32_t+0x10c>
 800c194:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c198:	70eb      	strb	r3, [r5, #3]
 800c19a:	6923      	ldr	r3, [r4, #16]
 800c19c:	68a2      	ldr	r2, [r4, #8]
 800c19e:	7da0      	ldrb	r0, [r4, #22]
 800c1a0:	3304      	adds	r3, #4
 800c1a2:	1b9e      	subs	r6, r3, r6
 800c1a4:	4442      	add	r2, r8
 800c1a6:	2304      	movs	r3, #4
 800c1a8:	f080 0001 	eor.w	r0, r0, #1
 800c1ac:	60a2      	str	r2, [r4, #8]
 800c1ae:	6126      	str	r6, [r4, #16]
 800c1b0:	7563      	strb	r3, [r4, #21]
 800c1b2:	b002      	add	sp, #8
 800c1b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1b8:	2104      	movs	r1, #4
 800c1ba:	4620      	mov	r0, r4
 800c1bc:	f000 fc1e 	bl	800c9fc <ucdr_check_final_buffer_behavior>
 800c1c0:	b1d0      	cbz	r0, 800c1f8 <ucdr_serialize_int32_t+0xd0>
 800c1c2:	7d23      	ldrb	r3, [r4, #20]
 800c1c4:	2b01      	cmp	r3, #1
 800c1c6:	68a3      	ldr	r3, [r4, #8]
 800c1c8:	d01c      	beq.n	800c204 <ucdr_serialize_int32_t+0xdc>
 800c1ca:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c1ce:	701a      	strb	r2, [r3, #0]
 800c1d0:	68a3      	ldr	r3, [r4, #8]
 800c1d2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c1d6:	705a      	strb	r2, [r3, #1]
 800c1d8:	68a3      	ldr	r3, [r4, #8]
 800c1da:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c1de:	709a      	strb	r2, [r3, #2]
 800c1e0:	68a3      	ldr	r3, [r4, #8]
 800c1e2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c1e6:	70da      	strb	r2, [r3, #3]
 800c1e8:	68a2      	ldr	r2, [r4, #8]
 800c1ea:	6923      	ldr	r3, [r4, #16]
 800c1ec:	3204      	adds	r2, #4
 800c1ee:	3304      	adds	r3, #4
 800c1f0:	2104      	movs	r1, #4
 800c1f2:	60a2      	str	r2, [r4, #8]
 800c1f4:	6123      	str	r3, [r4, #16]
 800c1f6:	7561      	strb	r1, [r4, #21]
 800c1f8:	7da0      	ldrb	r0, [r4, #22]
 800c1fa:	f080 0001 	eor.w	r0, r0, #1
 800c1fe:	b002      	add	sp, #8
 800c200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c204:	9a01      	ldr	r2, [sp, #4]
 800c206:	601a      	str	r2, [r3, #0]
 800c208:	e7ee      	b.n	800c1e8 <ucdr_serialize_int32_t+0xc0>
 800c20a:	68a2      	ldr	r2, [r4, #8]
 800c20c:	6923      	ldr	r3, [r4, #16]
 800c20e:	7da0      	ldrb	r0, [r4, #22]
 800c210:	7567      	strb	r7, [r4, #21]
 800c212:	1b92      	subs	r2, r2, r6
 800c214:	1b9b      	subs	r3, r3, r6
 800c216:	f080 0001 	eor.w	r0, r0, #1
 800c21a:	60a2      	str	r2, [r4, #8]
 800c21c:	6123      	str	r3, [r4, #16]
 800c21e:	b002      	add	sp, #8
 800c220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c224:	68a3      	ldr	r3, [r4, #8]
 800c226:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c22a:	701a      	strb	r2, [r3, #0]
 800c22c:	68a3      	ldr	r3, [r4, #8]
 800c22e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c232:	701a      	strb	r2, [r3, #0]
 800c234:	68a3      	ldr	r3, [r4, #8]
 800c236:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c23a:	701a      	strb	r2, [r3, #0]
 800c23c:	e7ad      	b.n	800c19a <ucdr_serialize_int32_t+0x72>
 800c23e:	4628      	mov	r0, r5
 800c240:	ad01      	add	r5, sp, #4
 800c242:	4629      	mov	r1, r5
 800c244:	4632      	mov	r2, r6
 800c246:	f00d fdc6 	bl	8019dd6 <memcpy>
 800c24a:	68a0      	ldr	r0, [r4, #8]
 800c24c:	4642      	mov	r2, r8
 800c24e:	19a9      	adds	r1, r5, r6
 800c250:	f00d fdc1 	bl	8019dd6 <memcpy>
 800c254:	e7a1      	b.n	800c19a <ucdr_serialize_int32_t+0x72>
 800c256:	bf00      	nop

0800c258 <ucdr_deserialize_int32_t>:
 800c258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c25c:	460d      	mov	r5, r1
 800c25e:	2104      	movs	r1, #4
 800c260:	4604      	mov	r4, r0
 800c262:	f000 fc1f 	bl	800caa4 <ucdr_buffer_alignment>
 800c266:	4601      	mov	r1, r0
 800c268:	4620      	mov	r0, r4
 800c26a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c26e:	f000 fc5d 	bl	800cb2c <ucdr_advance_buffer>
 800c272:	2104      	movs	r1, #4
 800c274:	4620      	mov	r0, r4
 800c276:	f000 fbb5 	bl	800c9e4 <ucdr_check_buffer_available_for>
 800c27a:	2800      	cmp	r0, #0
 800c27c:	d138      	bne.n	800c2f0 <ucdr_deserialize_int32_t+0x98>
 800c27e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800c282:	42b7      	cmp	r7, r6
 800c284:	d92f      	bls.n	800c2e6 <ucdr_deserialize_int32_t+0x8e>
 800c286:	6923      	ldr	r3, [r4, #16]
 800c288:	60a7      	str	r7, [r4, #8]
 800c28a:	1bbf      	subs	r7, r7, r6
 800c28c:	443b      	add	r3, r7
 800c28e:	f1c7 0904 	rsb	r9, r7, #4
 800c292:	6123      	str	r3, [r4, #16]
 800c294:	4649      	mov	r1, r9
 800c296:	4620      	mov	r0, r4
 800c298:	f000 fbb0 	bl	800c9fc <ucdr_check_final_buffer_behavior>
 800c29c:	2800      	cmp	r0, #0
 800c29e:	d046      	beq.n	800c32e <ucdr_deserialize_int32_t+0xd6>
 800c2a0:	7d23      	ldrb	r3, [r4, #20]
 800c2a2:	2b01      	cmp	r3, #1
 800c2a4:	d05c      	beq.n	800c360 <ucdr_deserialize_int32_t+0x108>
 800c2a6:	78f3      	ldrb	r3, [r6, #3]
 800c2a8:	702b      	strb	r3, [r5, #0]
 800c2aa:	2f00      	cmp	r7, #0
 800c2ac:	d04c      	beq.n	800c348 <ucdr_deserialize_int32_t+0xf0>
 800c2ae:	78b3      	ldrb	r3, [r6, #2]
 800c2b0:	706b      	strb	r3, [r5, #1]
 800c2b2:	2f01      	cmp	r7, #1
 800c2b4:	f105 0302 	add.w	r3, r5, #2
 800c2b8:	d04a      	beq.n	800c350 <ucdr_deserialize_int32_t+0xf8>
 800c2ba:	7873      	ldrb	r3, [r6, #1]
 800c2bc:	70ab      	strb	r3, [r5, #2]
 800c2be:	2f02      	cmp	r7, #2
 800c2c0:	f105 0303 	add.w	r3, r5, #3
 800c2c4:	d048      	beq.n	800c358 <ucdr_deserialize_int32_t+0x100>
 800c2c6:	7833      	ldrb	r3, [r6, #0]
 800c2c8:	70eb      	strb	r3, [r5, #3]
 800c2ca:	6923      	ldr	r3, [r4, #16]
 800c2cc:	68a2      	ldr	r2, [r4, #8]
 800c2ce:	7da0      	ldrb	r0, [r4, #22]
 800c2d0:	2104      	movs	r1, #4
 800c2d2:	3304      	adds	r3, #4
 800c2d4:	444a      	add	r2, r9
 800c2d6:	1bdb      	subs	r3, r3, r7
 800c2d8:	7561      	strb	r1, [r4, #21]
 800c2da:	60a2      	str	r2, [r4, #8]
 800c2dc:	6123      	str	r3, [r4, #16]
 800c2de:	f080 0001 	eor.w	r0, r0, #1
 800c2e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2e6:	2104      	movs	r1, #4
 800c2e8:	4620      	mov	r0, r4
 800c2ea:	f000 fb87 	bl	800c9fc <ucdr_check_final_buffer_behavior>
 800c2ee:	b1b0      	cbz	r0, 800c31e <ucdr_deserialize_int32_t+0xc6>
 800c2f0:	7d23      	ldrb	r3, [r4, #20]
 800c2f2:	2b01      	cmp	r3, #1
 800c2f4:	68a3      	ldr	r3, [r4, #8]
 800c2f6:	d017      	beq.n	800c328 <ucdr_deserialize_int32_t+0xd0>
 800c2f8:	78db      	ldrb	r3, [r3, #3]
 800c2fa:	702b      	strb	r3, [r5, #0]
 800c2fc:	68a3      	ldr	r3, [r4, #8]
 800c2fe:	789b      	ldrb	r3, [r3, #2]
 800c300:	706b      	strb	r3, [r5, #1]
 800c302:	68a3      	ldr	r3, [r4, #8]
 800c304:	785b      	ldrb	r3, [r3, #1]
 800c306:	70ab      	strb	r3, [r5, #2]
 800c308:	68a3      	ldr	r3, [r4, #8]
 800c30a:	781b      	ldrb	r3, [r3, #0]
 800c30c:	70eb      	strb	r3, [r5, #3]
 800c30e:	68a2      	ldr	r2, [r4, #8]
 800c310:	6923      	ldr	r3, [r4, #16]
 800c312:	3204      	adds	r2, #4
 800c314:	3304      	adds	r3, #4
 800c316:	2104      	movs	r1, #4
 800c318:	60a2      	str	r2, [r4, #8]
 800c31a:	6123      	str	r3, [r4, #16]
 800c31c:	7561      	strb	r1, [r4, #21]
 800c31e:	7da0      	ldrb	r0, [r4, #22]
 800c320:	f080 0001 	eor.w	r0, r0, #1
 800c324:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	602b      	str	r3, [r5, #0]
 800c32c:	e7ef      	b.n	800c30e <ucdr_deserialize_int32_t+0xb6>
 800c32e:	68a2      	ldr	r2, [r4, #8]
 800c330:	6923      	ldr	r3, [r4, #16]
 800c332:	7da0      	ldrb	r0, [r4, #22]
 800c334:	f884 8015 	strb.w	r8, [r4, #21]
 800c338:	1bd2      	subs	r2, r2, r7
 800c33a:	1bdb      	subs	r3, r3, r7
 800c33c:	60a2      	str	r2, [r4, #8]
 800c33e:	6123      	str	r3, [r4, #16]
 800c340:	f080 0001 	eor.w	r0, r0, #1
 800c344:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c348:	68a3      	ldr	r3, [r4, #8]
 800c34a:	789b      	ldrb	r3, [r3, #2]
 800c34c:	706b      	strb	r3, [r5, #1]
 800c34e:	1cab      	adds	r3, r5, #2
 800c350:	68a2      	ldr	r2, [r4, #8]
 800c352:	7852      	ldrb	r2, [r2, #1]
 800c354:	f803 2b01 	strb.w	r2, [r3], #1
 800c358:	68a2      	ldr	r2, [r4, #8]
 800c35a:	7812      	ldrb	r2, [r2, #0]
 800c35c:	701a      	strb	r2, [r3, #0]
 800c35e:	e7b4      	b.n	800c2ca <ucdr_deserialize_int32_t+0x72>
 800c360:	4631      	mov	r1, r6
 800c362:	463a      	mov	r2, r7
 800c364:	4628      	mov	r0, r5
 800c366:	f00d fd36 	bl	8019dd6 <memcpy>
 800c36a:	68a1      	ldr	r1, [r4, #8]
 800c36c:	464a      	mov	r2, r9
 800c36e:	19e8      	adds	r0, r5, r7
 800c370:	f00d fd31 	bl	8019dd6 <memcpy>
 800c374:	e7a9      	b.n	800c2ca <ucdr_deserialize_int32_t+0x72>
 800c376:	bf00      	nop

0800c378 <ucdr_serialize_double>:
 800c378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c37c:	2108      	movs	r1, #8
 800c37e:	b082      	sub	sp, #8
 800c380:	4604      	mov	r4, r0
 800c382:	ed8d 0b00 	vstr	d0, [sp]
 800c386:	f000 fb8d 	bl	800caa4 <ucdr_buffer_alignment>
 800c38a:	4601      	mov	r1, r0
 800c38c:	4620      	mov	r0, r4
 800c38e:	7d67      	ldrb	r7, [r4, #21]
 800c390:	f000 fbcc 	bl	800cb2c <ucdr_advance_buffer>
 800c394:	2108      	movs	r1, #8
 800c396:	4620      	mov	r0, r4
 800c398:	f000 fb24 	bl	800c9e4 <ucdr_check_buffer_available_for>
 800c39c:	2800      	cmp	r0, #0
 800c39e:	d14e      	bne.n	800c43e <ucdr_serialize_double+0xc6>
 800c3a0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c3a4:	42ab      	cmp	r3, r5
 800c3a6:	d945      	bls.n	800c434 <ucdr_serialize_double+0xbc>
 800c3a8:	1b5e      	subs	r6, r3, r5
 800c3aa:	60a3      	str	r3, [r4, #8]
 800c3ac:	6923      	ldr	r3, [r4, #16]
 800c3ae:	f1c6 0808 	rsb	r8, r6, #8
 800c3b2:	4433      	add	r3, r6
 800c3b4:	6123      	str	r3, [r4, #16]
 800c3b6:	4641      	mov	r1, r8
 800c3b8:	4620      	mov	r0, r4
 800c3ba:	f000 fb1f 	bl	800c9fc <ucdr_check_final_buffer_behavior>
 800c3be:	2800      	cmp	r0, #0
 800c3c0:	d074      	beq.n	800c4ac <ucdr_serialize_double+0x134>
 800c3c2:	7d23      	ldrb	r3, [r4, #20]
 800c3c4:	2b01      	cmp	r3, #1
 800c3c6:	f000 809b 	beq.w	800c500 <ucdr_serialize_double+0x188>
 800c3ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c3ce:	702b      	strb	r3, [r5, #0]
 800c3d0:	2e00      	cmp	r6, #0
 800c3d2:	d078      	beq.n	800c4c6 <ucdr_serialize_double+0x14e>
 800c3d4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c3d8:	706b      	strb	r3, [r5, #1]
 800c3da:	2e01      	cmp	r6, #1
 800c3dc:	d077      	beq.n	800c4ce <ucdr_serialize_double+0x156>
 800c3de:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c3e2:	70ab      	strb	r3, [r5, #2]
 800c3e4:	2e02      	cmp	r6, #2
 800c3e6:	d076      	beq.n	800c4d6 <ucdr_serialize_double+0x15e>
 800c3e8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c3ec:	70eb      	strb	r3, [r5, #3]
 800c3ee:	2e03      	cmp	r6, #3
 800c3f0:	d075      	beq.n	800c4de <ucdr_serialize_double+0x166>
 800c3f2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800c3f6:	712b      	strb	r3, [r5, #4]
 800c3f8:	2e04      	cmp	r6, #4
 800c3fa:	d074      	beq.n	800c4e6 <ucdr_serialize_double+0x16e>
 800c3fc:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800c400:	716b      	strb	r3, [r5, #5]
 800c402:	2e05      	cmp	r6, #5
 800c404:	d073      	beq.n	800c4ee <ucdr_serialize_double+0x176>
 800c406:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800c40a:	71ab      	strb	r3, [r5, #6]
 800c40c:	2e06      	cmp	r6, #6
 800c40e:	d072      	beq.n	800c4f6 <ucdr_serialize_double+0x17e>
 800c410:	f89d 3000 	ldrb.w	r3, [sp]
 800c414:	71eb      	strb	r3, [r5, #7]
 800c416:	6923      	ldr	r3, [r4, #16]
 800c418:	68a2      	ldr	r2, [r4, #8]
 800c41a:	7da0      	ldrb	r0, [r4, #22]
 800c41c:	3308      	adds	r3, #8
 800c41e:	1b9e      	subs	r6, r3, r6
 800c420:	4442      	add	r2, r8
 800c422:	2308      	movs	r3, #8
 800c424:	f080 0001 	eor.w	r0, r0, #1
 800c428:	60a2      	str	r2, [r4, #8]
 800c42a:	6126      	str	r6, [r4, #16]
 800c42c:	7563      	strb	r3, [r4, #21]
 800c42e:	b002      	add	sp, #8
 800c430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c434:	2108      	movs	r1, #8
 800c436:	4620      	mov	r0, r4
 800c438:	f000 fae0 	bl	800c9fc <ucdr_check_final_buffer_behavior>
 800c43c:	b350      	cbz	r0, 800c494 <ucdr_serialize_double+0x11c>
 800c43e:	7d23      	ldrb	r3, [r4, #20]
 800c440:	2b01      	cmp	r3, #1
 800c442:	d02d      	beq.n	800c4a0 <ucdr_serialize_double+0x128>
 800c444:	68a3      	ldr	r3, [r4, #8]
 800c446:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c44a:	701a      	strb	r2, [r3, #0]
 800c44c:	68a3      	ldr	r3, [r4, #8]
 800c44e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c452:	705a      	strb	r2, [r3, #1]
 800c454:	68a3      	ldr	r3, [r4, #8]
 800c456:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c45a:	709a      	strb	r2, [r3, #2]
 800c45c:	68a3      	ldr	r3, [r4, #8]
 800c45e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c462:	70da      	strb	r2, [r3, #3]
 800c464:	68a3      	ldr	r3, [r4, #8]
 800c466:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c46a:	711a      	strb	r2, [r3, #4]
 800c46c:	68a3      	ldr	r3, [r4, #8]
 800c46e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c472:	715a      	strb	r2, [r3, #5]
 800c474:	68a3      	ldr	r3, [r4, #8]
 800c476:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c47a:	719a      	strb	r2, [r3, #6]
 800c47c:	68a3      	ldr	r3, [r4, #8]
 800c47e:	f89d 2000 	ldrb.w	r2, [sp]
 800c482:	71da      	strb	r2, [r3, #7]
 800c484:	68a2      	ldr	r2, [r4, #8]
 800c486:	6923      	ldr	r3, [r4, #16]
 800c488:	3208      	adds	r2, #8
 800c48a:	3308      	adds	r3, #8
 800c48c:	2108      	movs	r1, #8
 800c48e:	60a2      	str	r2, [r4, #8]
 800c490:	6123      	str	r3, [r4, #16]
 800c492:	7561      	strb	r1, [r4, #21]
 800c494:	7da0      	ldrb	r0, [r4, #22]
 800c496:	f080 0001 	eor.w	r0, r0, #1
 800c49a:	b002      	add	sp, #8
 800c49c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4a0:	466b      	mov	r3, sp
 800c4a2:	cb03      	ldmia	r3!, {r0, r1}
 800c4a4:	68a3      	ldr	r3, [r4, #8]
 800c4a6:	6018      	str	r0, [r3, #0]
 800c4a8:	6059      	str	r1, [r3, #4]
 800c4aa:	e7eb      	b.n	800c484 <ucdr_serialize_double+0x10c>
 800c4ac:	68a2      	ldr	r2, [r4, #8]
 800c4ae:	6923      	ldr	r3, [r4, #16]
 800c4b0:	7da0      	ldrb	r0, [r4, #22]
 800c4b2:	7567      	strb	r7, [r4, #21]
 800c4b4:	1b92      	subs	r2, r2, r6
 800c4b6:	1b9b      	subs	r3, r3, r6
 800c4b8:	f080 0001 	eor.w	r0, r0, #1
 800c4bc:	60a2      	str	r2, [r4, #8]
 800c4be:	6123      	str	r3, [r4, #16]
 800c4c0:	b002      	add	sp, #8
 800c4c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4c6:	68a3      	ldr	r3, [r4, #8]
 800c4c8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c4cc:	701a      	strb	r2, [r3, #0]
 800c4ce:	68a3      	ldr	r3, [r4, #8]
 800c4d0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c4d4:	701a      	strb	r2, [r3, #0]
 800c4d6:	68a3      	ldr	r3, [r4, #8]
 800c4d8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c4dc:	701a      	strb	r2, [r3, #0]
 800c4de:	68a3      	ldr	r3, [r4, #8]
 800c4e0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c4e4:	701a      	strb	r2, [r3, #0]
 800c4e6:	68a3      	ldr	r3, [r4, #8]
 800c4e8:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c4ec:	701a      	strb	r2, [r3, #0]
 800c4ee:	68a3      	ldr	r3, [r4, #8]
 800c4f0:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c4f4:	701a      	strb	r2, [r3, #0]
 800c4f6:	68a3      	ldr	r3, [r4, #8]
 800c4f8:	f89d 2000 	ldrb.w	r2, [sp]
 800c4fc:	701a      	strb	r2, [r3, #0]
 800c4fe:	e78a      	b.n	800c416 <ucdr_serialize_double+0x9e>
 800c500:	4628      	mov	r0, r5
 800c502:	466d      	mov	r5, sp
 800c504:	4629      	mov	r1, r5
 800c506:	4632      	mov	r2, r6
 800c508:	f00d fc65 	bl	8019dd6 <memcpy>
 800c50c:	68a0      	ldr	r0, [r4, #8]
 800c50e:	4642      	mov	r2, r8
 800c510:	19a9      	adds	r1, r5, r6
 800c512:	f00d fc60 	bl	8019dd6 <memcpy>
 800c516:	e77e      	b.n	800c416 <ucdr_serialize_double+0x9e>

0800c518 <ucdr_serialize_endian_double>:
 800c518:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c51c:	460e      	mov	r6, r1
 800c51e:	b083      	sub	sp, #12
 800c520:	2108      	movs	r1, #8
 800c522:	4604      	mov	r4, r0
 800c524:	ed8d 0b00 	vstr	d0, [sp]
 800c528:	f000 fabc 	bl	800caa4 <ucdr_buffer_alignment>
 800c52c:	4601      	mov	r1, r0
 800c52e:	4620      	mov	r0, r4
 800c530:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c534:	f000 fafa 	bl	800cb2c <ucdr_advance_buffer>
 800c538:	2108      	movs	r1, #8
 800c53a:	4620      	mov	r0, r4
 800c53c:	f000 fa52 	bl	800c9e4 <ucdr_check_buffer_available_for>
 800c540:	2800      	cmp	r0, #0
 800c542:	d14d      	bne.n	800c5e0 <ucdr_serialize_endian_double+0xc8>
 800c544:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 800c548:	42bd      	cmp	r5, r7
 800c54a:	d944      	bls.n	800c5d6 <ucdr_serialize_endian_double+0xbe>
 800c54c:	6923      	ldr	r3, [r4, #16]
 800c54e:	60a5      	str	r5, [r4, #8]
 800c550:	1bed      	subs	r5, r5, r7
 800c552:	442b      	add	r3, r5
 800c554:	f1c5 0908 	rsb	r9, r5, #8
 800c558:	6123      	str	r3, [r4, #16]
 800c55a:	4649      	mov	r1, r9
 800c55c:	4620      	mov	r0, r4
 800c55e:	f000 fa4d 	bl	800c9fc <ucdr_check_final_buffer_behavior>
 800c562:	2800      	cmp	r0, #0
 800c564:	d072      	beq.n	800c64c <ucdr_serialize_endian_double+0x134>
 800c566:	2e01      	cmp	r6, #1
 800c568:	f000 809b 	beq.w	800c6a2 <ucdr_serialize_endian_double+0x18a>
 800c56c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c570:	703b      	strb	r3, [r7, #0]
 800c572:	2d00      	cmp	r5, #0
 800c574:	d078      	beq.n	800c668 <ucdr_serialize_endian_double+0x150>
 800c576:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c57a:	707b      	strb	r3, [r7, #1]
 800c57c:	2d01      	cmp	r5, #1
 800c57e:	d077      	beq.n	800c670 <ucdr_serialize_endian_double+0x158>
 800c580:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c584:	70bb      	strb	r3, [r7, #2]
 800c586:	2d02      	cmp	r5, #2
 800c588:	d076      	beq.n	800c678 <ucdr_serialize_endian_double+0x160>
 800c58a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c58e:	70fb      	strb	r3, [r7, #3]
 800c590:	2d03      	cmp	r5, #3
 800c592:	d075      	beq.n	800c680 <ucdr_serialize_endian_double+0x168>
 800c594:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800c598:	713b      	strb	r3, [r7, #4]
 800c59a:	2d04      	cmp	r5, #4
 800c59c:	d074      	beq.n	800c688 <ucdr_serialize_endian_double+0x170>
 800c59e:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800c5a2:	717b      	strb	r3, [r7, #5]
 800c5a4:	2d05      	cmp	r5, #5
 800c5a6:	d073      	beq.n	800c690 <ucdr_serialize_endian_double+0x178>
 800c5a8:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800c5ac:	71bb      	strb	r3, [r7, #6]
 800c5ae:	2d06      	cmp	r5, #6
 800c5b0:	d072      	beq.n	800c698 <ucdr_serialize_endian_double+0x180>
 800c5b2:	f89d 3000 	ldrb.w	r3, [sp]
 800c5b6:	71fb      	strb	r3, [r7, #7]
 800c5b8:	6923      	ldr	r3, [r4, #16]
 800c5ba:	68a2      	ldr	r2, [r4, #8]
 800c5bc:	7da0      	ldrb	r0, [r4, #22]
 800c5be:	3308      	adds	r3, #8
 800c5c0:	1b5d      	subs	r5, r3, r5
 800c5c2:	444a      	add	r2, r9
 800c5c4:	2308      	movs	r3, #8
 800c5c6:	f080 0001 	eor.w	r0, r0, #1
 800c5ca:	60a2      	str	r2, [r4, #8]
 800c5cc:	6125      	str	r5, [r4, #16]
 800c5ce:	7563      	strb	r3, [r4, #21]
 800c5d0:	b003      	add	sp, #12
 800c5d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c5d6:	2108      	movs	r1, #8
 800c5d8:	4620      	mov	r0, r4
 800c5da:	f000 fa0f 	bl	800c9fc <ucdr_check_final_buffer_behavior>
 800c5de:	b348      	cbz	r0, 800c634 <ucdr_serialize_endian_double+0x11c>
 800c5e0:	2e01      	cmp	r6, #1
 800c5e2:	d02d      	beq.n	800c640 <ucdr_serialize_endian_double+0x128>
 800c5e4:	68a3      	ldr	r3, [r4, #8]
 800c5e6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c5ea:	701a      	strb	r2, [r3, #0]
 800c5ec:	68a3      	ldr	r3, [r4, #8]
 800c5ee:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c5f2:	705a      	strb	r2, [r3, #1]
 800c5f4:	68a3      	ldr	r3, [r4, #8]
 800c5f6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c5fa:	709a      	strb	r2, [r3, #2]
 800c5fc:	68a3      	ldr	r3, [r4, #8]
 800c5fe:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c602:	70da      	strb	r2, [r3, #3]
 800c604:	68a3      	ldr	r3, [r4, #8]
 800c606:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c60a:	711a      	strb	r2, [r3, #4]
 800c60c:	68a3      	ldr	r3, [r4, #8]
 800c60e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c612:	715a      	strb	r2, [r3, #5]
 800c614:	68a3      	ldr	r3, [r4, #8]
 800c616:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c61a:	719a      	strb	r2, [r3, #6]
 800c61c:	68a3      	ldr	r3, [r4, #8]
 800c61e:	f89d 2000 	ldrb.w	r2, [sp]
 800c622:	71da      	strb	r2, [r3, #7]
 800c624:	68a2      	ldr	r2, [r4, #8]
 800c626:	6923      	ldr	r3, [r4, #16]
 800c628:	3208      	adds	r2, #8
 800c62a:	3308      	adds	r3, #8
 800c62c:	2108      	movs	r1, #8
 800c62e:	60a2      	str	r2, [r4, #8]
 800c630:	6123      	str	r3, [r4, #16]
 800c632:	7561      	strb	r1, [r4, #21]
 800c634:	7da0      	ldrb	r0, [r4, #22]
 800c636:	f080 0001 	eor.w	r0, r0, #1
 800c63a:	b003      	add	sp, #12
 800c63c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c640:	466b      	mov	r3, sp
 800c642:	cb03      	ldmia	r3!, {r0, r1}
 800c644:	68a3      	ldr	r3, [r4, #8]
 800c646:	6018      	str	r0, [r3, #0]
 800c648:	6059      	str	r1, [r3, #4]
 800c64a:	e7eb      	b.n	800c624 <ucdr_serialize_endian_double+0x10c>
 800c64c:	68a2      	ldr	r2, [r4, #8]
 800c64e:	6923      	ldr	r3, [r4, #16]
 800c650:	7da0      	ldrb	r0, [r4, #22]
 800c652:	f884 8015 	strb.w	r8, [r4, #21]
 800c656:	1b52      	subs	r2, r2, r5
 800c658:	1b5b      	subs	r3, r3, r5
 800c65a:	f080 0001 	eor.w	r0, r0, #1
 800c65e:	60a2      	str	r2, [r4, #8]
 800c660:	6123      	str	r3, [r4, #16]
 800c662:	b003      	add	sp, #12
 800c664:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c668:	68a3      	ldr	r3, [r4, #8]
 800c66a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c66e:	701a      	strb	r2, [r3, #0]
 800c670:	68a3      	ldr	r3, [r4, #8]
 800c672:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c676:	701a      	strb	r2, [r3, #0]
 800c678:	68a3      	ldr	r3, [r4, #8]
 800c67a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c67e:	701a      	strb	r2, [r3, #0]
 800c680:	68a3      	ldr	r3, [r4, #8]
 800c682:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c686:	701a      	strb	r2, [r3, #0]
 800c688:	68a3      	ldr	r3, [r4, #8]
 800c68a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c68e:	701a      	strb	r2, [r3, #0]
 800c690:	68a3      	ldr	r3, [r4, #8]
 800c692:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c696:	701a      	strb	r2, [r3, #0]
 800c698:	68a3      	ldr	r3, [r4, #8]
 800c69a:	f89d 2000 	ldrb.w	r2, [sp]
 800c69e:	701a      	strb	r2, [r3, #0]
 800c6a0:	e78a      	b.n	800c5b8 <ucdr_serialize_endian_double+0xa0>
 800c6a2:	466e      	mov	r6, sp
 800c6a4:	4631      	mov	r1, r6
 800c6a6:	462a      	mov	r2, r5
 800c6a8:	4638      	mov	r0, r7
 800c6aa:	f00d fb94 	bl	8019dd6 <memcpy>
 800c6ae:	68a0      	ldr	r0, [r4, #8]
 800c6b0:	464a      	mov	r2, r9
 800c6b2:	1971      	adds	r1, r6, r5
 800c6b4:	f00d fb8f 	bl	8019dd6 <memcpy>
 800c6b8:	e77e      	b.n	800c5b8 <ucdr_serialize_endian_double+0xa0>
 800c6ba:	bf00      	nop

0800c6bc <ucdr_deserialize_double>:
 800c6bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6c0:	460d      	mov	r5, r1
 800c6c2:	2108      	movs	r1, #8
 800c6c4:	4604      	mov	r4, r0
 800c6c6:	f000 f9ed 	bl	800caa4 <ucdr_buffer_alignment>
 800c6ca:	4601      	mov	r1, r0
 800c6cc:	4620      	mov	r0, r4
 800c6ce:	f894 9015 	ldrb.w	r9, [r4, #21]
 800c6d2:	f000 fa2b 	bl	800cb2c <ucdr_advance_buffer>
 800c6d6:	2108      	movs	r1, #8
 800c6d8:	4620      	mov	r0, r4
 800c6da:	f000 f983 	bl	800c9e4 <ucdr_check_buffer_available_for>
 800c6de:	2800      	cmp	r0, #0
 800c6e0:	d151      	bne.n	800c786 <ucdr_deserialize_double+0xca>
 800c6e2:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800c6e6:	42be      	cmp	r6, r7
 800c6e8:	d948      	bls.n	800c77c <ucdr_deserialize_double+0xc0>
 800c6ea:	6923      	ldr	r3, [r4, #16]
 800c6ec:	60a6      	str	r6, [r4, #8]
 800c6ee:	1bf6      	subs	r6, r6, r7
 800c6f0:	4433      	add	r3, r6
 800c6f2:	f1c6 0808 	rsb	r8, r6, #8
 800c6f6:	6123      	str	r3, [r4, #16]
 800c6f8:	4641      	mov	r1, r8
 800c6fa:	4620      	mov	r0, r4
 800c6fc:	f000 f97e 	bl	800c9fc <ucdr_check_final_buffer_behavior>
 800c700:	2800      	cmp	r0, #0
 800c702:	d06d      	beq.n	800c7e0 <ucdr_deserialize_double+0x124>
 800c704:	7d23      	ldrb	r3, [r4, #20]
 800c706:	2b01      	cmp	r3, #1
 800c708:	f000 8093 	beq.w	800c832 <ucdr_deserialize_double+0x176>
 800c70c:	79fb      	ldrb	r3, [r7, #7]
 800c70e:	702b      	strb	r3, [r5, #0]
 800c710:	2e00      	cmp	r6, #0
 800c712:	d072      	beq.n	800c7fa <ucdr_deserialize_double+0x13e>
 800c714:	79bb      	ldrb	r3, [r7, #6]
 800c716:	706b      	strb	r3, [r5, #1]
 800c718:	2e01      	cmp	r6, #1
 800c71a:	f105 0302 	add.w	r3, r5, #2
 800c71e:	d070      	beq.n	800c802 <ucdr_deserialize_double+0x146>
 800c720:	797b      	ldrb	r3, [r7, #5]
 800c722:	70ab      	strb	r3, [r5, #2]
 800c724:	2e02      	cmp	r6, #2
 800c726:	f105 0303 	add.w	r3, r5, #3
 800c72a:	d06e      	beq.n	800c80a <ucdr_deserialize_double+0x14e>
 800c72c:	793b      	ldrb	r3, [r7, #4]
 800c72e:	70eb      	strb	r3, [r5, #3]
 800c730:	2e03      	cmp	r6, #3
 800c732:	f105 0304 	add.w	r3, r5, #4
 800c736:	d06c      	beq.n	800c812 <ucdr_deserialize_double+0x156>
 800c738:	78fb      	ldrb	r3, [r7, #3]
 800c73a:	712b      	strb	r3, [r5, #4]
 800c73c:	2e04      	cmp	r6, #4
 800c73e:	f105 0305 	add.w	r3, r5, #5
 800c742:	d06a      	beq.n	800c81a <ucdr_deserialize_double+0x15e>
 800c744:	78bb      	ldrb	r3, [r7, #2]
 800c746:	716b      	strb	r3, [r5, #5]
 800c748:	2e05      	cmp	r6, #5
 800c74a:	f105 0306 	add.w	r3, r5, #6
 800c74e:	d068      	beq.n	800c822 <ucdr_deserialize_double+0x166>
 800c750:	787b      	ldrb	r3, [r7, #1]
 800c752:	71ab      	strb	r3, [r5, #6]
 800c754:	2e06      	cmp	r6, #6
 800c756:	f105 0307 	add.w	r3, r5, #7
 800c75a:	d066      	beq.n	800c82a <ucdr_deserialize_double+0x16e>
 800c75c:	783b      	ldrb	r3, [r7, #0]
 800c75e:	71eb      	strb	r3, [r5, #7]
 800c760:	6923      	ldr	r3, [r4, #16]
 800c762:	68a2      	ldr	r2, [r4, #8]
 800c764:	7da0      	ldrb	r0, [r4, #22]
 800c766:	3308      	adds	r3, #8
 800c768:	1b9e      	subs	r6, r3, r6
 800c76a:	2308      	movs	r3, #8
 800c76c:	4442      	add	r2, r8
 800c76e:	7563      	strb	r3, [r4, #21]
 800c770:	60a2      	str	r2, [r4, #8]
 800c772:	6126      	str	r6, [r4, #16]
 800c774:	f080 0001 	eor.w	r0, r0, #1
 800c778:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c77c:	2108      	movs	r1, #8
 800c77e:	4620      	mov	r0, r4
 800c780:	f000 f93c 	bl	800c9fc <ucdr_check_final_buffer_behavior>
 800c784:	b310      	cbz	r0, 800c7cc <ucdr_deserialize_double+0x110>
 800c786:	7d23      	ldrb	r3, [r4, #20]
 800c788:	2b01      	cmp	r3, #1
 800c78a:	68a3      	ldr	r3, [r4, #8]
 800c78c:	d023      	beq.n	800c7d6 <ucdr_deserialize_double+0x11a>
 800c78e:	79db      	ldrb	r3, [r3, #7]
 800c790:	702b      	strb	r3, [r5, #0]
 800c792:	68a3      	ldr	r3, [r4, #8]
 800c794:	799b      	ldrb	r3, [r3, #6]
 800c796:	706b      	strb	r3, [r5, #1]
 800c798:	68a3      	ldr	r3, [r4, #8]
 800c79a:	795b      	ldrb	r3, [r3, #5]
 800c79c:	70ab      	strb	r3, [r5, #2]
 800c79e:	68a3      	ldr	r3, [r4, #8]
 800c7a0:	791b      	ldrb	r3, [r3, #4]
 800c7a2:	70eb      	strb	r3, [r5, #3]
 800c7a4:	68a3      	ldr	r3, [r4, #8]
 800c7a6:	78db      	ldrb	r3, [r3, #3]
 800c7a8:	712b      	strb	r3, [r5, #4]
 800c7aa:	68a3      	ldr	r3, [r4, #8]
 800c7ac:	789b      	ldrb	r3, [r3, #2]
 800c7ae:	716b      	strb	r3, [r5, #5]
 800c7b0:	68a3      	ldr	r3, [r4, #8]
 800c7b2:	785b      	ldrb	r3, [r3, #1]
 800c7b4:	71ab      	strb	r3, [r5, #6]
 800c7b6:	68a3      	ldr	r3, [r4, #8]
 800c7b8:	781b      	ldrb	r3, [r3, #0]
 800c7ba:	71eb      	strb	r3, [r5, #7]
 800c7bc:	68a2      	ldr	r2, [r4, #8]
 800c7be:	6923      	ldr	r3, [r4, #16]
 800c7c0:	3208      	adds	r2, #8
 800c7c2:	3308      	adds	r3, #8
 800c7c4:	2108      	movs	r1, #8
 800c7c6:	60a2      	str	r2, [r4, #8]
 800c7c8:	6123      	str	r3, [r4, #16]
 800c7ca:	7561      	strb	r1, [r4, #21]
 800c7cc:	7da0      	ldrb	r0, [r4, #22]
 800c7ce:	f080 0001 	eor.w	r0, r0, #1
 800c7d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7d6:	681a      	ldr	r2, [r3, #0]
 800c7d8:	685b      	ldr	r3, [r3, #4]
 800c7da:	606b      	str	r3, [r5, #4]
 800c7dc:	602a      	str	r2, [r5, #0]
 800c7de:	e7ed      	b.n	800c7bc <ucdr_deserialize_double+0x100>
 800c7e0:	68a2      	ldr	r2, [r4, #8]
 800c7e2:	6923      	ldr	r3, [r4, #16]
 800c7e4:	7da0      	ldrb	r0, [r4, #22]
 800c7e6:	f884 9015 	strb.w	r9, [r4, #21]
 800c7ea:	1b92      	subs	r2, r2, r6
 800c7ec:	1b9b      	subs	r3, r3, r6
 800c7ee:	60a2      	str	r2, [r4, #8]
 800c7f0:	6123      	str	r3, [r4, #16]
 800c7f2:	f080 0001 	eor.w	r0, r0, #1
 800c7f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7fa:	68a3      	ldr	r3, [r4, #8]
 800c7fc:	799b      	ldrb	r3, [r3, #6]
 800c7fe:	706b      	strb	r3, [r5, #1]
 800c800:	1cab      	adds	r3, r5, #2
 800c802:	68a2      	ldr	r2, [r4, #8]
 800c804:	7952      	ldrb	r2, [r2, #5]
 800c806:	f803 2b01 	strb.w	r2, [r3], #1
 800c80a:	68a2      	ldr	r2, [r4, #8]
 800c80c:	7912      	ldrb	r2, [r2, #4]
 800c80e:	f803 2b01 	strb.w	r2, [r3], #1
 800c812:	68a2      	ldr	r2, [r4, #8]
 800c814:	78d2      	ldrb	r2, [r2, #3]
 800c816:	f803 2b01 	strb.w	r2, [r3], #1
 800c81a:	68a2      	ldr	r2, [r4, #8]
 800c81c:	7892      	ldrb	r2, [r2, #2]
 800c81e:	f803 2b01 	strb.w	r2, [r3], #1
 800c822:	68a2      	ldr	r2, [r4, #8]
 800c824:	7852      	ldrb	r2, [r2, #1]
 800c826:	f803 2b01 	strb.w	r2, [r3], #1
 800c82a:	68a2      	ldr	r2, [r4, #8]
 800c82c:	7812      	ldrb	r2, [r2, #0]
 800c82e:	701a      	strb	r2, [r3, #0]
 800c830:	e796      	b.n	800c760 <ucdr_deserialize_double+0xa4>
 800c832:	4639      	mov	r1, r7
 800c834:	4632      	mov	r2, r6
 800c836:	4628      	mov	r0, r5
 800c838:	f00d facd 	bl	8019dd6 <memcpy>
 800c83c:	68a1      	ldr	r1, [r4, #8]
 800c83e:	4642      	mov	r2, r8
 800c840:	19a8      	adds	r0, r5, r6
 800c842:	f00d fac8 	bl	8019dd6 <memcpy>
 800c846:	e78b      	b.n	800c760 <ucdr_deserialize_double+0xa4>

0800c848 <ucdr_deserialize_endian_double>:
 800c848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c84c:	460f      	mov	r7, r1
 800c84e:	2108      	movs	r1, #8
 800c850:	4604      	mov	r4, r0
 800c852:	4615      	mov	r5, r2
 800c854:	f000 f926 	bl	800caa4 <ucdr_buffer_alignment>
 800c858:	4601      	mov	r1, r0
 800c85a:	4620      	mov	r0, r4
 800c85c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800c860:	f000 f964 	bl	800cb2c <ucdr_advance_buffer>
 800c864:	2108      	movs	r1, #8
 800c866:	4620      	mov	r0, r4
 800c868:	f000 f8bc 	bl	800c9e4 <ucdr_check_buffer_available_for>
 800c86c:	2800      	cmp	r0, #0
 800c86e:	d159      	bne.n	800c924 <ucdr_deserialize_endian_double+0xdc>
 800c870:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 800c874:	4546      	cmp	r6, r8
 800c876:	d950      	bls.n	800c91a <ucdr_deserialize_endian_double+0xd2>
 800c878:	6923      	ldr	r3, [r4, #16]
 800c87a:	60a6      	str	r6, [r4, #8]
 800c87c:	eba6 0608 	sub.w	r6, r6, r8
 800c880:	4433      	add	r3, r6
 800c882:	f1c6 0a08 	rsb	sl, r6, #8
 800c886:	6123      	str	r3, [r4, #16]
 800c888:	4651      	mov	r1, sl
 800c88a:	4620      	mov	r0, r4
 800c88c:	f000 f8b6 	bl	800c9fc <ucdr_check_final_buffer_behavior>
 800c890:	2800      	cmp	r0, #0
 800c892:	d073      	beq.n	800c97c <ucdr_deserialize_endian_double+0x134>
 800c894:	2f01      	cmp	r7, #1
 800c896:	f000 809a 	beq.w	800c9ce <ucdr_deserialize_endian_double+0x186>
 800c89a:	f898 3007 	ldrb.w	r3, [r8, #7]
 800c89e:	702b      	strb	r3, [r5, #0]
 800c8a0:	2e00      	cmp	r6, #0
 800c8a2:	d078      	beq.n	800c996 <ucdr_deserialize_endian_double+0x14e>
 800c8a4:	f898 3006 	ldrb.w	r3, [r8, #6]
 800c8a8:	706b      	strb	r3, [r5, #1]
 800c8aa:	2e01      	cmp	r6, #1
 800c8ac:	f105 0302 	add.w	r3, r5, #2
 800c8b0:	d075      	beq.n	800c99e <ucdr_deserialize_endian_double+0x156>
 800c8b2:	f898 3005 	ldrb.w	r3, [r8, #5]
 800c8b6:	70ab      	strb	r3, [r5, #2]
 800c8b8:	2e02      	cmp	r6, #2
 800c8ba:	f105 0303 	add.w	r3, r5, #3
 800c8be:	d072      	beq.n	800c9a6 <ucdr_deserialize_endian_double+0x15e>
 800c8c0:	f898 3004 	ldrb.w	r3, [r8, #4]
 800c8c4:	70eb      	strb	r3, [r5, #3]
 800c8c6:	2e03      	cmp	r6, #3
 800c8c8:	f105 0304 	add.w	r3, r5, #4
 800c8cc:	d06f      	beq.n	800c9ae <ucdr_deserialize_endian_double+0x166>
 800c8ce:	f898 3003 	ldrb.w	r3, [r8, #3]
 800c8d2:	712b      	strb	r3, [r5, #4]
 800c8d4:	2e04      	cmp	r6, #4
 800c8d6:	f105 0305 	add.w	r3, r5, #5
 800c8da:	d06c      	beq.n	800c9b6 <ucdr_deserialize_endian_double+0x16e>
 800c8dc:	f898 3002 	ldrb.w	r3, [r8, #2]
 800c8e0:	716b      	strb	r3, [r5, #5]
 800c8e2:	2e05      	cmp	r6, #5
 800c8e4:	f105 0306 	add.w	r3, r5, #6
 800c8e8:	d069      	beq.n	800c9be <ucdr_deserialize_endian_double+0x176>
 800c8ea:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c8ee:	71ab      	strb	r3, [r5, #6]
 800c8f0:	2e06      	cmp	r6, #6
 800c8f2:	f105 0307 	add.w	r3, r5, #7
 800c8f6:	d066      	beq.n	800c9c6 <ucdr_deserialize_endian_double+0x17e>
 800c8f8:	f898 3000 	ldrb.w	r3, [r8]
 800c8fc:	71eb      	strb	r3, [r5, #7]
 800c8fe:	6923      	ldr	r3, [r4, #16]
 800c900:	68a2      	ldr	r2, [r4, #8]
 800c902:	7da0      	ldrb	r0, [r4, #22]
 800c904:	3308      	adds	r3, #8
 800c906:	1b9e      	subs	r6, r3, r6
 800c908:	2308      	movs	r3, #8
 800c90a:	4452      	add	r2, sl
 800c90c:	7563      	strb	r3, [r4, #21]
 800c90e:	60a2      	str	r2, [r4, #8]
 800c910:	6126      	str	r6, [r4, #16]
 800c912:	f080 0001 	eor.w	r0, r0, #1
 800c916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c91a:	2108      	movs	r1, #8
 800c91c:	4620      	mov	r0, r4
 800c91e:	f000 f86d 	bl	800c9fc <ucdr_check_final_buffer_behavior>
 800c922:	b308      	cbz	r0, 800c968 <ucdr_deserialize_endian_double+0x120>
 800c924:	2f01      	cmp	r7, #1
 800c926:	68a3      	ldr	r3, [r4, #8]
 800c928:	d023      	beq.n	800c972 <ucdr_deserialize_endian_double+0x12a>
 800c92a:	79db      	ldrb	r3, [r3, #7]
 800c92c:	702b      	strb	r3, [r5, #0]
 800c92e:	68a3      	ldr	r3, [r4, #8]
 800c930:	799b      	ldrb	r3, [r3, #6]
 800c932:	706b      	strb	r3, [r5, #1]
 800c934:	68a3      	ldr	r3, [r4, #8]
 800c936:	795b      	ldrb	r3, [r3, #5]
 800c938:	70ab      	strb	r3, [r5, #2]
 800c93a:	68a3      	ldr	r3, [r4, #8]
 800c93c:	791b      	ldrb	r3, [r3, #4]
 800c93e:	70eb      	strb	r3, [r5, #3]
 800c940:	68a3      	ldr	r3, [r4, #8]
 800c942:	78db      	ldrb	r3, [r3, #3]
 800c944:	712b      	strb	r3, [r5, #4]
 800c946:	68a3      	ldr	r3, [r4, #8]
 800c948:	789b      	ldrb	r3, [r3, #2]
 800c94a:	716b      	strb	r3, [r5, #5]
 800c94c:	68a3      	ldr	r3, [r4, #8]
 800c94e:	785b      	ldrb	r3, [r3, #1]
 800c950:	71ab      	strb	r3, [r5, #6]
 800c952:	68a3      	ldr	r3, [r4, #8]
 800c954:	781b      	ldrb	r3, [r3, #0]
 800c956:	71eb      	strb	r3, [r5, #7]
 800c958:	68a2      	ldr	r2, [r4, #8]
 800c95a:	6923      	ldr	r3, [r4, #16]
 800c95c:	3208      	adds	r2, #8
 800c95e:	3308      	adds	r3, #8
 800c960:	2108      	movs	r1, #8
 800c962:	60a2      	str	r2, [r4, #8]
 800c964:	6123      	str	r3, [r4, #16]
 800c966:	7561      	strb	r1, [r4, #21]
 800c968:	7da0      	ldrb	r0, [r4, #22]
 800c96a:	f080 0001 	eor.w	r0, r0, #1
 800c96e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c972:	681a      	ldr	r2, [r3, #0]
 800c974:	685b      	ldr	r3, [r3, #4]
 800c976:	606b      	str	r3, [r5, #4]
 800c978:	602a      	str	r2, [r5, #0]
 800c97a:	e7ed      	b.n	800c958 <ucdr_deserialize_endian_double+0x110>
 800c97c:	68a2      	ldr	r2, [r4, #8]
 800c97e:	6923      	ldr	r3, [r4, #16]
 800c980:	7da0      	ldrb	r0, [r4, #22]
 800c982:	f884 9015 	strb.w	r9, [r4, #21]
 800c986:	1b92      	subs	r2, r2, r6
 800c988:	1b9b      	subs	r3, r3, r6
 800c98a:	60a2      	str	r2, [r4, #8]
 800c98c:	6123      	str	r3, [r4, #16]
 800c98e:	f080 0001 	eor.w	r0, r0, #1
 800c992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c996:	68a3      	ldr	r3, [r4, #8]
 800c998:	799b      	ldrb	r3, [r3, #6]
 800c99a:	706b      	strb	r3, [r5, #1]
 800c99c:	1cab      	adds	r3, r5, #2
 800c99e:	68a2      	ldr	r2, [r4, #8]
 800c9a0:	7952      	ldrb	r2, [r2, #5]
 800c9a2:	f803 2b01 	strb.w	r2, [r3], #1
 800c9a6:	68a2      	ldr	r2, [r4, #8]
 800c9a8:	7912      	ldrb	r2, [r2, #4]
 800c9aa:	f803 2b01 	strb.w	r2, [r3], #1
 800c9ae:	68a2      	ldr	r2, [r4, #8]
 800c9b0:	78d2      	ldrb	r2, [r2, #3]
 800c9b2:	f803 2b01 	strb.w	r2, [r3], #1
 800c9b6:	68a2      	ldr	r2, [r4, #8]
 800c9b8:	7892      	ldrb	r2, [r2, #2]
 800c9ba:	f803 2b01 	strb.w	r2, [r3], #1
 800c9be:	68a2      	ldr	r2, [r4, #8]
 800c9c0:	7852      	ldrb	r2, [r2, #1]
 800c9c2:	f803 2b01 	strb.w	r2, [r3], #1
 800c9c6:	68a2      	ldr	r2, [r4, #8]
 800c9c8:	7812      	ldrb	r2, [r2, #0]
 800c9ca:	701a      	strb	r2, [r3, #0]
 800c9cc:	e797      	b.n	800c8fe <ucdr_deserialize_endian_double+0xb6>
 800c9ce:	4641      	mov	r1, r8
 800c9d0:	4632      	mov	r2, r6
 800c9d2:	4628      	mov	r0, r5
 800c9d4:	f00d f9ff 	bl	8019dd6 <memcpy>
 800c9d8:	68a1      	ldr	r1, [r4, #8]
 800c9da:	4652      	mov	r2, sl
 800c9dc:	19a8      	adds	r0, r5, r6
 800c9de:	f00d f9fa 	bl	8019dd6 <memcpy>
 800c9e2:	e78c      	b.n	800c8fe <ucdr_deserialize_endian_double+0xb6>

0800c9e4 <ucdr_check_buffer_available_for>:
 800c9e4:	7d83      	ldrb	r3, [r0, #22]
 800c9e6:	b93b      	cbnz	r3, 800c9f8 <ucdr_check_buffer_available_for+0x14>
 800c9e8:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800c9ec:	4419      	add	r1, r3
 800c9ee:	4288      	cmp	r0, r1
 800c9f0:	bf34      	ite	cc
 800c9f2:	2000      	movcc	r0, #0
 800c9f4:	2001      	movcs	r0, #1
 800c9f6:	4770      	bx	lr
 800c9f8:	2000      	movs	r0, #0
 800c9fa:	4770      	bx	lr

0800c9fc <ucdr_check_final_buffer_behavior>:
 800c9fc:	7d83      	ldrb	r3, [r0, #22]
 800c9fe:	b943      	cbnz	r3, 800ca12 <ucdr_check_final_buffer_behavior+0x16>
 800ca00:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800ca04:	4291      	cmp	r1, r2
 800ca06:	b510      	push	{r4, lr}
 800ca08:	4604      	mov	r4, r0
 800ca0a:	d205      	bcs.n	800ca18 <ucdr_check_final_buffer_behavior+0x1c>
 800ca0c:	2301      	movs	r3, #1
 800ca0e:	4618      	mov	r0, r3
 800ca10:	bd10      	pop	{r4, pc}
 800ca12:	2300      	movs	r3, #0
 800ca14:	4618      	mov	r0, r3
 800ca16:	4770      	bx	lr
 800ca18:	6982      	ldr	r2, [r0, #24]
 800ca1a:	b13a      	cbz	r2, 800ca2c <ucdr_check_final_buffer_behavior+0x30>
 800ca1c:	69c1      	ldr	r1, [r0, #28]
 800ca1e:	4790      	blx	r2
 800ca20:	f080 0301 	eor.w	r3, r0, #1
 800ca24:	b2db      	uxtb	r3, r3
 800ca26:	75a0      	strb	r0, [r4, #22]
 800ca28:	4618      	mov	r0, r3
 800ca2a:	bd10      	pop	{r4, pc}
 800ca2c:	2001      	movs	r0, #1
 800ca2e:	75a0      	strb	r0, [r4, #22]
 800ca30:	e7fa      	b.n	800ca28 <ucdr_check_final_buffer_behavior+0x2c>
 800ca32:	bf00      	nop

0800ca34 <ucdr_set_on_full_buffer_callback>:
 800ca34:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800ca38:	4770      	bx	lr
 800ca3a:	bf00      	nop

0800ca3c <ucdr_init_buffer_origin_offset_endian>:
 800ca3c:	b410      	push	{r4}
 800ca3e:	9c01      	ldr	r4, [sp, #4]
 800ca40:	6001      	str	r1, [r0, #0]
 800ca42:	440a      	add	r2, r1
 800ca44:	6042      	str	r2, [r0, #4]
 800ca46:	190a      	adds	r2, r1, r4
 800ca48:	441c      	add	r4, r3
 800ca4a:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800ca4e:	6082      	str	r2, [r0, #8]
 800ca50:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800ca54:	7503      	strb	r3, [r0, #20]
 800ca56:	2200      	movs	r2, #0
 800ca58:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800ca5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca60:	7542      	strb	r2, [r0, #21]
 800ca62:	7582      	strb	r2, [r0, #22]
 800ca64:	4770      	bx	lr
 800ca66:	bf00      	nop

0800ca68 <ucdr_init_buffer_origin_offset>:
 800ca68:	b510      	push	{r4, lr}
 800ca6a:	b082      	sub	sp, #8
 800ca6c:	9c04      	ldr	r4, [sp, #16]
 800ca6e:	9400      	str	r4, [sp, #0]
 800ca70:	2401      	movs	r4, #1
 800ca72:	9401      	str	r4, [sp, #4]
 800ca74:	f7ff ffe2 	bl	800ca3c <ucdr_init_buffer_origin_offset_endian>
 800ca78:	b002      	add	sp, #8
 800ca7a:	bd10      	pop	{r4, pc}

0800ca7c <ucdr_init_buffer_origin>:
 800ca7c:	b510      	push	{r4, lr}
 800ca7e:	b082      	sub	sp, #8
 800ca80:	2400      	movs	r4, #0
 800ca82:	9400      	str	r4, [sp, #0]
 800ca84:	f7ff fff0 	bl	800ca68 <ucdr_init_buffer_origin_offset>
 800ca88:	b002      	add	sp, #8
 800ca8a:	bd10      	pop	{r4, pc}

0800ca8c <ucdr_init_buffer>:
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	f7ff bff5 	b.w	800ca7c <ucdr_init_buffer_origin>
 800ca92:	bf00      	nop

0800ca94 <ucdr_alignment>:
 800ca94:	fbb0 f3f1 	udiv	r3, r0, r1
 800ca98:	fb03 0011 	mls	r0, r3, r1, r0
 800ca9c:	1a08      	subs	r0, r1, r0
 800ca9e:	3901      	subs	r1, #1
 800caa0:	4008      	ands	r0, r1
 800caa2:	4770      	bx	lr

0800caa4 <ucdr_buffer_alignment>:
 800caa4:	7d43      	ldrb	r3, [r0, #21]
 800caa6:	428b      	cmp	r3, r1
 800caa8:	d208      	bcs.n	800cabc <ucdr_buffer_alignment+0x18>
 800caaa:	6900      	ldr	r0, [r0, #16]
 800caac:	fbb0 f3f1 	udiv	r3, r0, r1
 800cab0:	fb01 0013 	mls	r0, r1, r3, r0
 800cab4:	1a08      	subs	r0, r1, r0
 800cab6:	3901      	subs	r1, #1
 800cab8:	4008      	ands	r0, r1
 800caba:	4770      	bx	lr
 800cabc:	2000      	movs	r0, #0
 800cabe:	4770      	bx	lr

0800cac0 <ucdr_align_to>:
 800cac0:	b538      	push	{r3, r4, r5, lr}
 800cac2:	4604      	mov	r4, r0
 800cac4:	460d      	mov	r5, r1
 800cac6:	f7ff ffed 	bl	800caa4 <ucdr_buffer_alignment>
 800caca:	68a3      	ldr	r3, [r4, #8]
 800cacc:	6921      	ldr	r1, [r4, #16]
 800cace:	7565      	strb	r5, [r4, #21]
 800cad0:	181a      	adds	r2, r3, r0
 800cad2:	6863      	ldr	r3, [r4, #4]
 800cad4:	4293      	cmp	r3, r2
 800cad6:	4408      	add	r0, r1
 800cad8:	bf28      	it	cs
 800cada:	4613      	movcs	r3, r2
 800cadc:	6120      	str	r0, [r4, #16]
 800cade:	60a3      	str	r3, [r4, #8]
 800cae0:	bd38      	pop	{r3, r4, r5, pc}
 800cae2:	bf00      	nop

0800cae4 <ucdr_buffer_length>:
 800cae4:	6882      	ldr	r2, [r0, #8]
 800cae6:	6800      	ldr	r0, [r0, #0]
 800cae8:	1a10      	subs	r0, r2, r0
 800caea:	4770      	bx	lr

0800caec <ucdr_buffer_remaining>:
 800caec:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800caf0:	1a10      	subs	r0, r2, r0
 800caf2:	4770      	bx	lr

0800caf4 <ucdr_check_final_buffer_behavior_array>:
 800caf4:	b538      	push	{r3, r4, r5, lr}
 800caf6:	7d83      	ldrb	r3, [r0, #22]
 800caf8:	b963      	cbnz	r3, 800cb14 <ucdr_check_final_buffer_behavior_array+0x20>
 800cafa:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800cafe:	429a      	cmp	r2, r3
 800cb00:	4604      	mov	r4, r0
 800cb02:	460d      	mov	r5, r1
 800cb04:	d308      	bcc.n	800cb18 <ucdr_check_final_buffer_behavior_array+0x24>
 800cb06:	b139      	cbz	r1, 800cb18 <ucdr_check_final_buffer_behavior_array+0x24>
 800cb08:	6983      	ldr	r3, [r0, #24]
 800cb0a:	b163      	cbz	r3, 800cb26 <ucdr_check_final_buffer_behavior_array+0x32>
 800cb0c:	69c1      	ldr	r1, [r0, #28]
 800cb0e:	4798      	blx	r3
 800cb10:	75a0      	strb	r0, [r4, #22]
 800cb12:	b108      	cbz	r0, 800cb18 <ucdr_check_final_buffer_behavior_array+0x24>
 800cb14:	2000      	movs	r0, #0
 800cb16:	bd38      	pop	{r3, r4, r5, pc}
 800cb18:	4620      	mov	r0, r4
 800cb1a:	f7ff ffe7 	bl	800caec <ucdr_buffer_remaining>
 800cb1e:	42a8      	cmp	r0, r5
 800cb20:	bf28      	it	cs
 800cb22:	4628      	movcs	r0, r5
 800cb24:	bd38      	pop	{r3, r4, r5, pc}
 800cb26:	2301      	movs	r3, #1
 800cb28:	7583      	strb	r3, [r0, #22]
 800cb2a:	e7f3      	b.n	800cb14 <ucdr_check_final_buffer_behavior_array+0x20>

0800cb2c <ucdr_advance_buffer>:
 800cb2c:	b538      	push	{r3, r4, r5, lr}
 800cb2e:	4604      	mov	r4, r0
 800cb30:	460d      	mov	r5, r1
 800cb32:	f7ff ff57 	bl	800c9e4 <ucdr_check_buffer_available_for>
 800cb36:	b178      	cbz	r0, 800cb58 <ucdr_advance_buffer+0x2c>
 800cb38:	6923      	ldr	r3, [r4, #16]
 800cb3a:	68a2      	ldr	r2, [r4, #8]
 800cb3c:	442b      	add	r3, r5
 800cb3e:	6123      	str	r3, [r4, #16]
 800cb40:	2301      	movs	r3, #1
 800cb42:	442a      	add	r2, r5
 800cb44:	7563      	strb	r3, [r4, #21]
 800cb46:	60a2      	str	r2, [r4, #8]
 800cb48:	bd38      	pop	{r3, r4, r5, pc}
 800cb4a:	68a2      	ldr	r2, [r4, #8]
 800cb4c:	6923      	ldr	r3, [r4, #16]
 800cb4e:	4402      	add	r2, r0
 800cb50:	4403      	add	r3, r0
 800cb52:	1a2d      	subs	r5, r5, r0
 800cb54:	60a2      	str	r2, [r4, #8]
 800cb56:	6123      	str	r3, [r4, #16]
 800cb58:	4629      	mov	r1, r5
 800cb5a:	2201      	movs	r2, #1
 800cb5c:	4620      	mov	r0, r4
 800cb5e:	f7ff ffc9 	bl	800caf4 <ucdr_check_final_buffer_behavior_array>
 800cb62:	2800      	cmp	r0, #0
 800cb64:	d1f1      	bne.n	800cb4a <ucdr_advance_buffer+0x1e>
 800cb66:	2301      	movs	r3, #1
 800cb68:	7563      	strb	r3, [r4, #21]
 800cb6a:	bd38      	pop	{r3, r4, r5, pc}

0800cb6c <rcl_get_zero_initialized_init_options>:
 800cb6c:	2000      	movs	r0, #0
 800cb6e:	4770      	bx	lr

0800cb70 <rcl_init_options_init>:
 800cb70:	b084      	sub	sp, #16
 800cb72:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb74:	b097      	sub	sp, #92	@ 0x5c
 800cb76:	ae1d      	add	r6, sp, #116	@ 0x74
 800cb78:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800cb7c:	2800      	cmp	r0, #0
 800cb7e:	d058      	beq.n	800cc32 <rcl_init_options_init+0xc2>
 800cb80:	6803      	ldr	r3, [r0, #0]
 800cb82:	4605      	mov	r5, r0
 800cb84:	b133      	cbz	r3, 800cb94 <rcl_init_options_init+0x24>
 800cb86:	2464      	movs	r4, #100	@ 0x64
 800cb88:	4620      	mov	r0, r4
 800cb8a:	b017      	add	sp, #92	@ 0x5c
 800cb8c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800cb90:	b004      	add	sp, #16
 800cb92:	4770      	bx	lr
 800cb94:	4630      	mov	r0, r6
 800cb96:	f001 f99d 	bl	800ded4 <rcutils_allocator_is_valid>
 800cb9a:	2800      	cmp	r0, #0
 800cb9c:	d049      	beq.n	800cc32 <rcl_init_options_init+0xc2>
 800cb9e:	46b4      	mov	ip, r6
 800cba0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cba4:	ac11      	add	r4, sp, #68	@ 0x44
 800cba6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cba8:	f8dc 3000 	ldr.w	r3, [ip]
 800cbac:	6023      	str	r3, [r4, #0]
 800cbae:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800cbb0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cbb2:	2050      	movs	r0, #80	@ 0x50
 800cbb4:	4798      	blx	r3
 800cbb6:	4604      	mov	r4, r0
 800cbb8:	6028      	str	r0, [r5, #0]
 800cbba:	2800      	cmp	r0, #0
 800cbbc:	d03b      	beq.n	800cc36 <rcl_init_options_init+0xc6>
 800cbbe:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800cbc2:	4686      	mov	lr, r0
 800cbc4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cbc8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cbcc:	f8dc 3000 	ldr.w	r3, [ip]
 800cbd0:	f8ce 3000 	str.w	r3, [lr]
 800cbd4:	a802      	add	r0, sp, #8
 800cbd6:	f001 fa0f 	bl	800dff8 <rmw_get_zero_initialized_init_options>
 800cbda:	f10d 0e08 	add.w	lr, sp, #8
 800cbde:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cbe2:	f104 0c18 	add.w	ip, r4, #24
 800cbe6:	682f      	ldr	r7, [r5, #0]
 800cbe8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cbec:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cbf0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cbf4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cbf8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cbfc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800cc00:	ac20      	add	r4, sp, #128	@ 0x80
 800cc02:	e88c 0003 	stmia.w	ip, {r0, r1}
 800cc06:	e894 0003 	ldmia.w	r4, {r0, r1}
 800cc0a:	e88d 0003 	stmia.w	sp, {r0, r1}
 800cc0e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800cc12:	f107 0018 	add.w	r0, r7, #24
 800cc16:	f001 fa1d 	bl	800e054 <rmw_init_options_init>
 800cc1a:	4604      	mov	r4, r0
 800cc1c:	2800      	cmp	r0, #0
 800cc1e:	d0b3      	beq.n	800cb88 <rcl_init_options_init+0x18>
 800cc20:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800cc22:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800cc24:	6828      	ldr	r0, [r5, #0]
 800cc26:	4798      	blx	r3
 800cc28:	4620      	mov	r0, r4
 800cc2a:	f007 f8c3 	bl	8013db4 <rcl_convert_rmw_ret_to_rcl_ret>
 800cc2e:	4604      	mov	r4, r0
 800cc30:	e7aa      	b.n	800cb88 <rcl_init_options_init+0x18>
 800cc32:	240b      	movs	r4, #11
 800cc34:	e7a8      	b.n	800cb88 <rcl_init_options_init+0x18>
 800cc36:	240a      	movs	r4, #10
 800cc38:	e7a6      	b.n	800cb88 <rcl_init_options_init+0x18>
 800cc3a:	bf00      	nop

0800cc3c <rcl_init_options_fini>:
 800cc3c:	b530      	push	{r4, r5, lr}
 800cc3e:	b087      	sub	sp, #28
 800cc40:	b1f0      	cbz	r0, 800cc80 <rcl_init_options_fini+0x44>
 800cc42:	6803      	ldr	r3, [r0, #0]
 800cc44:	4604      	mov	r4, r0
 800cc46:	b1db      	cbz	r3, 800cc80 <rcl_init_options_fini+0x44>
 800cc48:	469c      	mov	ip, r3
 800cc4a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cc4e:	f10d 0e04 	add.w	lr, sp, #4
 800cc52:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cc56:	f8dc 3000 	ldr.w	r3, [ip]
 800cc5a:	f8ce 3000 	str.w	r3, [lr]
 800cc5e:	a801      	add	r0, sp, #4
 800cc60:	f001 f938 	bl	800ded4 <rcutils_allocator_is_valid>
 800cc64:	b160      	cbz	r0, 800cc80 <rcl_init_options_fini+0x44>
 800cc66:	6820      	ldr	r0, [r4, #0]
 800cc68:	3018      	adds	r0, #24
 800cc6a:	f001 faa3 	bl	800e1b4 <rmw_init_options_fini>
 800cc6e:	4605      	mov	r5, r0
 800cc70:	b950      	cbnz	r0, 800cc88 <rcl_init_options_fini+0x4c>
 800cc72:	6820      	ldr	r0, [r4, #0]
 800cc74:	9b02      	ldr	r3, [sp, #8]
 800cc76:	9905      	ldr	r1, [sp, #20]
 800cc78:	4798      	blx	r3
 800cc7a:	4628      	mov	r0, r5
 800cc7c:	b007      	add	sp, #28
 800cc7e:	bd30      	pop	{r4, r5, pc}
 800cc80:	250b      	movs	r5, #11
 800cc82:	4628      	mov	r0, r5
 800cc84:	b007      	add	sp, #28
 800cc86:	bd30      	pop	{r4, r5, pc}
 800cc88:	f007 f894 	bl	8013db4 <rcl_convert_rmw_ret_to_rcl_ret>
 800cc8c:	4605      	mov	r5, r0
 800cc8e:	e7f8      	b.n	800cc82 <rcl_init_options_fini+0x46>

0800cc90 <rcl_init_options_copy>:
 800cc90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc94:	b094      	sub	sp, #80	@ 0x50
 800cc96:	2800      	cmp	r0, #0
 800cc98:	d058      	beq.n	800cd4c <rcl_init_options_copy+0xbc>
 800cc9a:	4604      	mov	r4, r0
 800cc9c:	6800      	ldr	r0, [r0, #0]
 800cc9e:	2800      	cmp	r0, #0
 800cca0:	d054      	beq.n	800cd4c <rcl_init_options_copy+0xbc>
 800cca2:	460e      	mov	r6, r1
 800cca4:	f001 f916 	bl	800ded4 <rcutils_allocator_is_valid>
 800cca8:	2800      	cmp	r0, #0
 800ccaa:	d04f      	beq.n	800cd4c <rcl_init_options_copy+0xbc>
 800ccac:	2e00      	cmp	r6, #0
 800ccae:	d04d      	beq.n	800cd4c <rcl_init_options_copy+0xbc>
 800ccb0:	6833      	ldr	r3, [r6, #0]
 800ccb2:	b123      	cbz	r3, 800ccbe <rcl_init_options_copy+0x2e>
 800ccb4:	2464      	movs	r4, #100	@ 0x64
 800ccb6:	4620      	mov	r0, r4
 800ccb8:	b014      	add	sp, #80	@ 0x50
 800ccba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccbe:	6827      	ldr	r7, [r4, #0]
 800ccc0:	46bc      	mov	ip, r7
 800ccc2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ccc6:	ad0f      	add	r5, sp, #60	@ 0x3c
 800ccc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ccca:	f8dc 3000 	ldr.w	r3, [ip]
 800ccce:	f8d7 8000 	ldr.w	r8, [r7]
 800ccd2:	602b      	str	r3, [r5, #0]
 800ccd4:	4619      	mov	r1, r3
 800ccd6:	2050      	movs	r0, #80	@ 0x50
 800ccd8:	47c0      	blx	r8
 800ccda:	4605      	mov	r5, r0
 800ccdc:	6030      	str	r0, [r6, #0]
 800ccde:	b3d0      	cbz	r0, 800cd56 <rcl_init_options_copy+0xc6>
 800cce0:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800cce4:	4686      	mov	lr, r0
 800cce6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ccea:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ccee:	f8dc 3000 	ldr.w	r3, [ip]
 800ccf2:	f8ce 3000 	str.w	r3, [lr]
 800ccf6:	4668      	mov	r0, sp
 800ccf8:	f001 f97e 	bl	800dff8 <rmw_get_zero_initialized_init_options>
 800ccfc:	46ee      	mov	lr, sp
 800ccfe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cd02:	f105 0c18 	add.w	ip, r5, #24
 800cd06:	6824      	ldr	r4, [r4, #0]
 800cd08:	6835      	ldr	r5, [r6, #0]
 800cd0a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cd0e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cd12:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cd16:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cd1a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cd1e:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800cd22:	e88c 0003 	stmia.w	ip, {r0, r1}
 800cd26:	f104 0018 	add.w	r0, r4, #24
 800cd2a:	f105 0118 	add.w	r1, r5, #24
 800cd2e:	f001 f9f9 	bl	800e124 <rmw_init_options_copy>
 800cd32:	4604      	mov	r4, r0
 800cd34:	2800      	cmp	r0, #0
 800cd36:	d0be      	beq.n	800ccb6 <rcl_init_options_copy+0x26>
 800cd38:	f001 f8da 	bl	800def0 <rcutils_get_error_string>
 800cd3c:	f001 f8f0 	bl	800df20 <rcutils_reset_error>
 800cd40:	4630      	mov	r0, r6
 800cd42:	f7ff ff7b 	bl	800cc3c <rcl_init_options_fini>
 800cd46:	b140      	cbz	r0, 800cd5a <rcl_init_options_copy+0xca>
 800cd48:	4604      	mov	r4, r0
 800cd4a:	e7b4      	b.n	800ccb6 <rcl_init_options_copy+0x26>
 800cd4c:	240b      	movs	r4, #11
 800cd4e:	4620      	mov	r0, r4
 800cd50:	b014      	add	sp, #80	@ 0x50
 800cd52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd56:	240a      	movs	r4, #10
 800cd58:	e7ad      	b.n	800ccb6 <rcl_init_options_copy+0x26>
 800cd5a:	4620      	mov	r0, r4
 800cd5c:	b014      	add	sp, #80	@ 0x50
 800cd5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd62:	f007 b827 	b.w	8013db4 <rcl_convert_rmw_ret_to_rcl_ret>
 800cd66:	bf00      	nop

0800cd68 <rcl_init_options_set_domain_id>:
 800cd68:	b120      	cbz	r0, 800cd74 <rcl_init_options_set_domain_id+0xc>
 800cd6a:	6803      	ldr	r3, [r0, #0]
 800cd6c:	b113      	cbz	r3, 800cd74 <rcl_init_options_set_domain_id+0xc>
 800cd6e:	6259      	str	r1, [r3, #36]	@ 0x24
 800cd70:	2000      	movs	r0, #0
 800cd72:	4770      	bx	lr
 800cd74:	200b      	movs	r0, #11
 800cd76:	4770      	bx	lr

0800cd78 <rcl_get_zero_initialized_publisher>:
 800cd78:	4b01      	ldr	r3, [pc, #4]	@ (800cd80 <rcl_get_zero_initialized_publisher+0x8>)
 800cd7a:	6818      	ldr	r0, [r3, #0]
 800cd7c:	4770      	bx	lr
 800cd7e:	bf00      	nop
 800cd80:	0801bbd8 	.word	0x0801bbd8

0800cd84 <rcl_publisher_init>:
 800cd84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd88:	b088      	sub	sp, #32
 800cd8a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800cd8c:	2d00      	cmp	r5, #0
 800cd8e:	d069      	beq.n	800ce64 <rcl_publisher_init+0xe0>
 800cd90:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800cd94:	4604      	mov	r4, r0
 800cd96:	4648      	mov	r0, r9
 800cd98:	460e      	mov	r6, r1
 800cd9a:	4690      	mov	r8, r2
 800cd9c:	461f      	mov	r7, r3
 800cd9e:	f001 f899 	bl	800ded4 <rcutils_allocator_is_valid>
 800cda2:	2800      	cmp	r0, #0
 800cda4:	d05e      	beq.n	800ce64 <rcl_publisher_init+0xe0>
 800cda6:	2c00      	cmp	r4, #0
 800cda8:	d05c      	beq.n	800ce64 <rcl_publisher_init+0xe0>
 800cdaa:	f8d4 a000 	ldr.w	sl, [r4]
 800cdae:	f1ba 0f00 	cmp.w	sl, #0
 800cdb2:	d004      	beq.n	800cdbe <rcl_publisher_init+0x3a>
 800cdb4:	2764      	movs	r7, #100	@ 0x64
 800cdb6:	4638      	mov	r0, r7
 800cdb8:	b008      	add	sp, #32
 800cdba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdbe:	4630      	mov	r0, r6
 800cdc0:	f007 faf2 	bl	80143a8 <rcl_node_is_valid>
 800cdc4:	2800      	cmp	r0, #0
 800cdc6:	d052      	beq.n	800ce6e <rcl_publisher_init+0xea>
 800cdc8:	f1b8 0f00 	cmp.w	r8, #0
 800cdcc:	d04a      	beq.n	800ce64 <rcl_publisher_init+0xe0>
 800cdce:	2f00      	cmp	r7, #0
 800cdd0:	d048      	beq.n	800ce64 <rcl_publisher_init+0xe0>
 800cdd2:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800cdd6:	aa07      	add	r2, sp, #28
 800cdd8:	9205      	str	r2, [sp, #20]
 800cdda:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800cdde:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cde2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800cde6:	f8cd a01c 	str.w	sl, [sp, #28]
 800cdea:	4639      	mov	r1, r7
 800cdec:	e899 000c 	ldmia.w	r9, {r2, r3}
 800cdf0:	4630      	mov	r0, r6
 800cdf2:	f007 fb2d 	bl	8014450 <rcl_node_resolve_name>
 800cdf6:	4607      	mov	r7, r0
 800cdf8:	2800      	cmp	r0, #0
 800cdfa:	d14f      	bne.n	800ce9c <rcl_publisher_init+0x118>
 800cdfc:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800cdfe:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800ce00:	20c8      	movs	r0, #200	@ 0xc8
 800ce02:	4798      	blx	r3
 800ce04:	6020      	str	r0, [r4, #0]
 800ce06:	2800      	cmp	r0, #0
 800ce08:	d04e      	beq.n	800cea8 <rcl_publisher_init+0x124>
 800ce0a:	4630      	mov	r0, r6
 800ce0c:	f007 faee 	bl	80143ec <rcl_node_get_rmw_handle>
 800ce10:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800ce14:	9300      	str	r3, [sp, #0]
 800ce16:	9a07      	ldr	r2, [sp, #28]
 800ce18:	6827      	ldr	r7, [r4, #0]
 800ce1a:	462b      	mov	r3, r5
 800ce1c:	4641      	mov	r1, r8
 800ce1e:	f001 fcf1 	bl	800e804 <rmw_create_publisher>
 800ce22:	6823      	ldr	r3, [r4, #0]
 800ce24:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800ce28:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800ce2c:	b370      	cbz	r0, 800ce8c <rcl_publisher_init+0x108>
 800ce2e:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800ce32:	f001 fdc5 	bl	800e9c0 <rmw_publisher_get_actual_qos>
 800ce36:	6823      	ldr	r3, [r4, #0]
 800ce38:	4607      	mov	r7, r0
 800ce3a:	b9d0      	cbnz	r0, 800ce72 <rcl_publisher_init+0xee>
 800ce3c:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800ce40:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800ce44:	4629      	mov	r1, r5
 800ce46:	2270      	movs	r2, #112	@ 0x70
 800ce48:	4618      	mov	r0, r3
 800ce4a:	f00c ffc4 	bl	8019dd6 <memcpy>
 800ce4e:	6832      	ldr	r2, [r6, #0]
 800ce50:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800ce54:	9807      	ldr	r0, [sp, #28]
 800ce56:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800ce58:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800ce5a:	4798      	blx	r3
 800ce5c:	4638      	mov	r0, r7
 800ce5e:	b008      	add	sp, #32
 800ce60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce64:	270b      	movs	r7, #11
 800ce66:	4638      	mov	r0, r7
 800ce68:	b008      	add	sp, #32
 800ce6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce6e:	27c8      	movs	r7, #200	@ 0xc8
 800ce70:	e7a1      	b.n	800cdb6 <rcl_publisher_init+0x32>
 800ce72:	b18b      	cbz	r3, 800ce98 <rcl_publisher_init+0x114>
 800ce74:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800ce78:	b142      	cbz	r2, 800ce8c <rcl_publisher_init+0x108>
 800ce7a:	4630      	mov	r0, r6
 800ce7c:	f007 fab6 	bl	80143ec <rcl_node_get_rmw_handle>
 800ce80:	6823      	ldr	r3, [r4, #0]
 800ce82:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800ce86:	f001 fdab 	bl	800e9e0 <rmw_destroy_publisher>
 800ce8a:	6823      	ldr	r3, [r4, #0]
 800ce8c:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800ce8e:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800ce90:	4618      	mov	r0, r3
 800ce92:	4790      	blx	r2
 800ce94:	2300      	movs	r3, #0
 800ce96:	6023      	str	r3, [r4, #0]
 800ce98:	2701      	movs	r7, #1
 800ce9a:	e7db      	b.n	800ce54 <rcl_publisher_init+0xd0>
 800ce9c:	2867      	cmp	r0, #103	@ 0x67
 800ce9e:	d0d9      	beq.n	800ce54 <rcl_publisher_init+0xd0>
 800cea0:	2869      	cmp	r0, #105	@ 0x69
 800cea2:	d003      	beq.n	800ceac <rcl_publisher_init+0x128>
 800cea4:	280a      	cmp	r0, #10
 800cea6:	d1f7      	bne.n	800ce98 <rcl_publisher_init+0x114>
 800cea8:	270a      	movs	r7, #10
 800ceaa:	e7d3      	b.n	800ce54 <rcl_publisher_init+0xd0>
 800ceac:	2767      	movs	r7, #103	@ 0x67
 800ceae:	e7d1      	b.n	800ce54 <rcl_publisher_init+0xd0>

0800ceb0 <rcl_publisher_get_default_options>:
 800ceb0:	b570      	push	{r4, r5, r6, lr}
 800ceb2:	4d14      	ldr	r5, [pc, #80]	@ (800cf04 <rcl_publisher_get_default_options+0x54>)
 800ceb4:	4914      	ldr	r1, [pc, #80]	@ (800cf08 <rcl_publisher_get_default_options+0x58>)
 800ceb6:	b088      	sub	sp, #32
 800ceb8:	4604      	mov	r4, r0
 800ceba:	2250      	movs	r2, #80	@ 0x50
 800cebc:	4628      	mov	r0, r5
 800cebe:	f00c ff8a 	bl	8019dd6 <memcpy>
 800cec2:	a802      	add	r0, sp, #8
 800cec4:	f000 fff8 	bl	800deb8 <rcutils_get_default_allocator>
 800cec8:	f10d 0c08 	add.w	ip, sp, #8
 800cecc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ced0:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800ced4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ced8:	466e      	mov	r6, sp
 800ceda:	f8dc 3000 	ldr.w	r3, [ip]
 800cede:	f8ce 3000 	str.w	r3, [lr]
 800cee2:	4630      	mov	r0, r6
 800cee4:	f001 f898 	bl	800e018 <rmw_get_default_publisher_options>
 800cee8:	e896 0003 	ldmia.w	r6, {r0, r1}
 800ceec:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800cef0:	e883 0003 	stmia.w	r3, {r0, r1}
 800cef4:	2270      	movs	r2, #112	@ 0x70
 800cef6:	4629      	mov	r1, r5
 800cef8:	4620      	mov	r0, r4
 800cefa:	f00c ff6c 	bl	8019dd6 <memcpy>
 800cefe:	4620      	mov	r0, r4
 800cf00:	b008      	add	sp, #32
 800cf02:	bd70      	pop	{r4, r5, r6, pc}
 800cf04:	20006e58 	.word	0x20006e58
 800cf08:	0801bbe0 	.word	0x0801bbe0

0800cf0c <rcl_publish>:
 800cf0c:	b1f8      	cbz	r0, 800cf4e <rcl_publish+0x42>
 800cf0e:	6803      	ldr	r3, [r0, #0]
 800cf10:	b570      	push	{r4, r5, r6, lr}
 800cf12:	4604      	mov	r4, r0
 800cf14:	b1b3      	cbz	r3, 800cf44 <rcl_publish+0x38>
 800cf16:	4616      	mov	r6, r2
 800cf18:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800cf1c:	b192      	cbz	r2, 800cf44 <rcl_publish+0x38>
 800cf1e:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800cf22:	460d      	mov	r5, r1
 800cf24:	f006 ff64 	bl	8013df0 <rcl_context_is_valid>
 800cf28:	b160      	cbz	r0, 800cf44 <rcl_publish+0x38>
 800cf2a:	6823      	ldr	r3, [r4, #0]
 800cf2c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800cf30:	b140      	cbz	r0, 800cf44 <rcl_publish+0x38>
 800cf32:	b155      	cbz	r5, 800cf4a <rcl_publish+0x3e>
 800cf34:	4632      	mov	r2, r6
 800cf36:	4629      	mov	r1, r5
 800cf38:	f001 fc04 	bl	800e744 <rmw_publish>
 800cf3c:	3800      	subs	r0, #0
 800cf3e:	bf18      	it	ne
 800cf40:	2001      	movne	r0, #1
 800cf42:	bd70      	pop	{r4, r5, r6, pc}
 800cf44:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800cf48:	bd70      	pop	{r4, r5, r6, pc}
 800cf4a:	200b      	movs	r0, #11
 800cf4c:	bd70      	pop	{r4, r5, r6, pc}
 800cf4e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800cf52:	4770      	bx	lr

0800cf54 <rcl_publisher_is_valid>:
 800cf54:	b1a0      	cbz	r0, 800cf80 <rcl_publisher_is_valid+0x2c>
 800cf56:	6803      	ldr	r3, [r0, #0]
 800cf58:	b510      	push	{r4, lr}
 800cf5a:	4604      	mov	r4, r0
 800cf5c:	b173      	cbz	r3, 800cf7c <rcl_publisher_is_valid+0x28>
 800cf5e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800cf62:	b15a      	cbz	r2, 800cf7c <rcl_publisher_is_valid+0x28>
 800cf64:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800cf68:	f006 ff42 	bl	8013df0 <rcl_context_is_valid>
 800cf6c:	b130      	cbz	r0, 800cf7c <rcl_publisher_is_valid+0x28>
 800cf6e:	6823      	ldr	r3, [r4, #0]
 800cf70:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800cf74:	3800      	subs	r0, #0
 800cf76:	bf18      	it	ne
 800cf78:	2001      	movne	r0, #1
 800cf7a:	bd10      	pop	{r4, pc}
 800cf7c:	2000      	movs	r0, #0
 800cf7e:	bd10      	pop	{r4, pc}
 800cf80:	2000      	movs	r0, #0
 800cf82:	4770      	bx	lr

0800cf84 <rcl_publisher_is_valid_except_context>:
 800cf84:	b130      	cbz	r0, 800cf94 <rcl_publisher_is_valid_except_context+0x10>
 800cf86:	6800      	ldr	r0, [r0, #0]
 800cf88:	b120      	cbz	r0, 800cf94 <rcl_publisher_is_valid_except_context+0x10>
 800cf8a:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800cf8e:	3800      	subs	r0, #0
 800cf90:	bf18      	it	ne
 800cf92:	2001      	movne	r0, #1
 800cf94:	4770      	bx	lr
 800cf96:	bf00      	nop

0800cf98 <_rclc_check_for_new_data>:
 800cf98:	2800      	cmp	r0, #0
 800cf9a:	d046      	beq.n	800d02a <_rclc_check_for_new_data+0x92>
 800cf9c:	b510      	push	{r4, lr}
 800cf9e:	7802      	ldrb	r2, [r0, #0]
 800cfa0:	b084      	sub	sp, #16
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	2a0a      	cmp	r2, #10
 800cfa6:	d842      	bhi.n	800d02e <_rclc_check_for_new_data+0x96>
 800cfa8:	e8df f002 	tbb	[pc, r2]
 800cfac:	14181212 	.word	0x14181212
 800cfb0:	06060614 	.word	0x06060614
 800cfb4:	2e1a      	.short	0x2e1a
 800cfb6:	16          	.byte	0x16
 800cfb7:	00          	.byte	0x00
 800cfb8:	6a0a      	ldr	r2, [r1, #32]
 800cfba:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800cfbc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800cfc0:	2000      	movs	r0, #0
 800cfc2:	1a12      	subs	r2, r2, r0
 800cfc4:	bf18      	it	ne
 800cfc6:	2201      	movne	r2, #1
 800cfc8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800cfcc:	b004      	add	sp, #16
 800cfce:	bd10      	pop	{r4, pc}
 800cfd0:	680a      	ldr	r2, [r1, #0]
 800cfd2:	e7f2      	b.n	800cfba <_rclc_check_for_new_data+0x22>
 800cfd4:	698a      	ldr	r2, [r1, #24]
 800cfd6:	e7f0      	b.n	800cfba <_rclc_check_for_new_data+0x22>
 800cfd8:	688a      	ldr	r2, [r1, #8]
 800cfda:	e7ee      	b.n	800cfba <_rclc_check_for_new_data+0x22>
 800cfdc:	690a      	ldr	r2, [r1, #16]
 800cfde:	e7ec      	b.n	800cfba <_rclc_check_for_new_data+0x22>
 800cfe0:	685c      	ldr	r4, [r3, #4]
 800cfe2:	4608      	mov	r0, r1
 800cfe4:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800cfe8:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800cfec:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800cff0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800cff4:	9300      	str	r3, [sp, #0]
 800cff6:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800cffa:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800cffe:	f104 0110 	add.w	r1, r4, #16
 800d002:	f009 f8d5 	bl	80161b0 <rcl_action_client_wait_set_get_entities_ready>
 800d006:	e7e1      	b.n	800cfcc <_rclc_check_for_new_data+0x34>
 800d008:	685c      	ldr	r4, [r3, #4]
 800d00a:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800d00e:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800d012:	e9cd 3200 	strd	r3, r2, [sp]
 800d016:	4608      	mov	r0, r1
 800d018:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800d01c:	f104 0220 	add.w	r2, r4, #32
 800d020:	f104 0110 	add.w	r1, r4, #16
 800d024:	f009 fadc 	bl	80165e0 <rcl_action_server_wait_set_get_entities_ready>
 800d028:	e7d0      	b.n	800cfcc <_rclc_check_for_new_data+0x34>
 800d02a:	200b      	movs	r0, #11
 800d02c:	4770      	bx	lr
 800d02e:	2001      	movs	r0, #1
 800d030:	e7cc      	b.n	800cfcc <_rclc_check_for_new_data+0x34>
 800d032:	bf00      	nop

0800d034 <_rclc_take_new_data>:
 800d034:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d036:	b09b      	sub	sp, #108	@ 0x6c
 800d038:	2800      	cmp	r0, #0
 800d03a:	f000 8088 	beq.w	800d14e <_rclc_take_new_data+0x11a>
 800d03e:	7803      	ldrb	r3, [r0, #0]
 800d040:	4604      	mov	r4, r0
 800d042:	2b0a      	cmp	r3, #10
 800d044:	f200 8167 	bhi.w	800d316 <_rclc_take_new_data+0x2e2>
 800d048:	e8df f003 	tbb	[pc, r3]
 800d04c:	44152d2d 	.word	0x44152d2d
 800d050:	19191944 	.word	0x19191944
 800d054:	065a      	.short	0x065a
 800d056:	15          	.byte	0x15
 800d057:	00          	.byte	0x00
 800d058:	6840      	ldr	r0, [r0, #4]
 800d05a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	f040 80b2 	bne.w	800d1c8 <_rclc_take_new_data+0x194>
 800d064:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800d068:	2b00      	cmp	r3, #0
 800d06a:	f040 80e4 	bne.w	800d236 <_rclc_take_new_data+0x202>
 800d06e:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800d072:	2b00      	cmp	r3, #0
 800d074:	d16f      	bne.n	800d156 <_rclc_take_new_data+0x122>
 800d076:	2500      	movs	r5, #0
 800d078:	4628      	mov	r0, r5
 800d07a:	b01b      	add	sp, #108	@ 0x6c
 800d07c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d07e:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800d080:	6a0b      	ldr	r3, [r1, #32]
 800d082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d0f5      	beq.n	800d076 <_rclc_take_new_data+0x42>
 800d08a:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800d08e:	f104 0110 	add.w	r1, r4, #16
 800d092:	f007 fc39 	bl	8014908 <rcl_take_request>
 800d096:	4605      	mov	r5, r0
 800d098:	2800      	cmp	r0, #0
 800d09a:	d0ec      	beq.n	800d076 <_rclc_take_new_data+0x42>
 800d09c:	f240 2359 	movw	r3, #601	@ 0x259
 800d0a0:	4298      	cmp	r0, r3
 800d0a2:	d013      	beq.n	800d0cc <_rclc_take_new_data+0x98>
 800d0a4:	e029      	b.n	800d0fa <_rclc_take_new_data+0xc6>
 800d0a6:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800d0a8:	680b      	ldr	r3, [r1, #0]
 800d0aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d0e1      	beq.n	800d076 <_rclc_take_new_data+0x42>
 800d0b2:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	aa0a      	add	r2, sp, #40	@ 0x28
 800d0ba:	f007 fc87 	bl	80149cc <rcl_take>
 800d0be:	4605      	mov	r5, r0
 800d0c0:	2800      	cmp	r0, #0
 800d0c2:	d0d9      	beq.n	800d078 <_rclc_take_new_data+0x44>
 800d0c4:	f240 1391 	movw	r3, #401	@ 0x191
 800d0c8:	4298      	cmp	r0, r3
 800d0ca:	d116      	bne.n	800d0fa <_rclc_take_new_data+0xc6>
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800d0d2:	e7d1      	b.n	800d078 <_rclc_take_new_data+0x44>
 800d0d4:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800d0d6:	698b      	ldr	r3, [r1, #24]
 800d0d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d0ca      	beq.n	800d076 <_rclc_take_new_data+0x42>
 800d0e0:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800d0e4:	f104 0110 	add.w	r1, r4, #16
 800d0e8:	f006 fe12 	bl	8013d10 <rcl_take_response>
 800d0ec:	4605      	mov	r5, r0
 800d0ee:	2800      	cmp	r0, #0
 800d0f0:	d0c1      	beq.n	800d076 <_rclc_take_new_data+0x42>
 800d0f2:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800d0f6:	4298      	cmp	r0, r3
 800d0f8:	d0be      	beq.n	800d078 <_rclc_take_new_data+0x44>
 800d0fa:	f000 ff11 	bl	800df20 <rcutils_reset_error>
 800d0fe:	e7bb      	b.n	800d078 <_rclc_take_new_data+0x44>
 800d100:	6840      	ldr	r0, [r0, #4]
 800d102:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800d106:	2b00      	cmp	r3, #0
 800d108:	d17d      	bne.n	800d206 <_rclc_take_new_data+0x1d2>
 800d10a:	69c3      	ldr	r3, [r0, #28]
 800d10c:	b11b      	cbz	r3, 800d116 <_rclc_take_new_data+0xe2>
 800d10e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800d112:	2b00      	cmp	r3, #0
 800d114:	d144      	bne.n	800d1a0 <_rclc_take_new_data+0x16c>
 800d116:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	f040 80ac 	bne.w	800d278 <_rclc_take_new_data+0x244>
 800d120:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800d124:	2b00      	cmp	r3, #0
 800d126:	d0a6      	beq.n	800d076 <_rclc_take_new_data+0x42>
 800d128:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800d12a:	a90a      	add	r1, sp, #40	@ 0x28
 800d12c:	3010      	adds	r0, #16
 800d12e:	f008 ff17 	bl	8015f60 <rcl_action_take_result_response>
 800d132:	4605      	mov	r5, r0
 800d134:	2800      	cmp	r0, #0
 800d136:	d1e0      	bne.n	800d0fa <_rclc_take_new_data+0xc6>
 800d138:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d13c:	6860      	ldr	r0, [r4, #4]
 800d13e:	f009 fb73 	bl	8016828 <rclc_action_find_handle_by_result_request_sequence_number>
 800d142:	2800      	cmp	r0, #0
 800d144:	d098      	beq.n	800d078 <_rclc_take_new_data+0x44>
 800d146:	2301      	movs	r3, #1
 800d148:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800d14c:	e794      	b.n	800d078 <_rclc_take_new_data+0x44>
 800d14e:	250b      	movs	r5, #11
 800d150:	4628      	mov	r0, r5
 800d152:	b01b      	add	sp, #108	@ 0x6c
 800d154:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d156:	ae04      	add	r6, sp, #16
 800d158:	aa0a      	add	r2, sp, #40	@ 0x28
 800d15a:	3010      	adds	r0, #16
 800d15c:	4631      	mov	r1, r6
 800d15e:	f009 f973 	bl	8016448 <rcl_action_take_cancel_request>
 800d162:	4605      	mov	r5, r0
 800d164:	2800      	cmp	r0, #0
 800d166:	d1c8      	bne.n	800d0fa <_rclc_take_new_data+0xc6>
 800d168:	6860      	ldr	r0, [r4, #4]
 800d16a:	a90a      	add	r1, sp, #40	@ 0x28
 800d16c:	f009 fb1a 	bl	80167a4 <rclc_action_find_goal_handle_by_uuid>
 800d170:	4607      	mov	r7, r0
 800d172:	2800      	cmp	r0, #0
 800d174:	f000 80bb 	beq.w	800d2ee <_rclc_take_new_data+0x2ba>
 800d178:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800d17c:	2101      	movs	r1, #1
 800d17e:	f009 fa9b 	bl	80166b8 <rcl_action_transition_goal_state>
 800d182:	2803      	cmp	r0, #3
 800d184:	4684      	mov	ip, r0
 800d186:	f040 80a7 	bne.w	800d2d8 <_rclc_take_new_data+0x2a4>
 800d18a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d18c:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800d190:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d192:	e896 0003 	ldmia.w	r6, {r0, r1}
 800d196:	e884 0003 	stmia.w	r4, {r0, r1}
 800d19a:	f887 c008 	strb.w	ip, [r7, #8]
 800d19e:	e76b      	b.n	800d078 <_rclc_take_new_data+0x44>
 800d1a0:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800d1a2:	3010      	adds	r0, #16
 800d1a4:	f008 ff5c 	bl	8016060 <rcl_action_take_feedback>
 800d1a8:	4605      	mov	r5, r0
 800d1aa:	2800      	cmp	r0, #0
 800d1ac:	d1a5      	bne.n	800d0fa <_rclc_take_new_data+0xc6>
 800d1ae:	6860      	ldr	r0, [r4, #4]
 800d1b0:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800d1b2:	f009 faf7 	bl	80167a4 <rclc_action_find_goal_handle_by_uuid>
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	2800      	cmp	r0, #0
 800d1ba:	f000 80a3 	beq.w	800d304 <_rclc_take_new_data+0x2d0>
 800d1be:	2201      	movs	r2, #1
 800d1c0:	6860      	ldr	r0, [r4, #4]
 800d1c2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800d1c6:	e7a6      	b.n	800d116 <_rclc_take_new_data+0xe2>
 800d1c8:	f009 fac6 	bl	8016758 <rclc_action_take_goal_handle>
 800d1cc:	4606      	mov	r6, r0
 800d1ce:	6860      	ldr	r0, [r4, #4]
 800d1d0:	2e00      	cmp	r6, #0
 800d1d2:	f43f af47 	beq.w	800d064 <_rclc_take_new_data+0x30>
 800d1d6:	6070      	str	r0, [r6, #4]
 800d1d8:	69f2      	ldr	r2, [r6, #28]
 800d1da:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800d1de:	3010      	adds	r0, #16
 800d1e0:	f009 f87a 	bl	80162d8 <rcl_action_take_goal_request>
 800d1e4:	4605      	mov	r5, r0
 800d1e6:	2800      	cmp	r0, #0
 800d1e8:	f040 808e 	bne.w	800d308 <_rclc_take_new_data+0x2d4>
 800d1ec:	69f7      	ldr	r7, [r6, #28]
 800d1ee:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d1f0:	7235      	strb	r5, [r6, #8]
 800d1f2:	f8c6 0009 	str.w	r0, [r6, #9]
 800d1f6:	f8c6 100d 	str.w	r1, [r6, #13]
 800d1fa:	6860      	ldr	r0, [r4, #4]
 800d1fc:	f8c6 2011 	str.w	r2, [r6, #17]
 800d200:	f8c6 3015 	str.w	r3, [r6, #21]
 800d204:	e72e      	b.n	800d064 <_rclc_take_new_data+0x30>
 800d206:	aa04      	add	r2, sp, #16
 800d208:	a90a      	add	r1, sp, #40	@ 0x28
 800d20a:	3010      	adds	r0, #16
 800d20c:	f008 fe30 	bl	8015e70 <rcl_action_take_goal_response>
 800d210:	4605      	mov	r5, r0
 800d212:	2800      	cmp	r0, #0
 800d214:	f47f af71 	bne.w	800d0fa <_rclc_take_new_data+0xc6>
 800d218:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d21c:	6860      	ldr	r0, [r4, #4]
 800d21e:	f009 faf1 	bl	8016804 <rclc_action_find_handle_by_goal_request_sequence_number>
 800d222:	b130      	cbz	r0, 800d232 <_rclc_take_new_data+0x1fe>
 800d224:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800d228:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800d22c:	2201      	movs	r2, #1
 800d22e:	f880 2020 	strb.w	r2, [r0, #32]
 800d232:	6860      	ldr	r0, [r4, #4]
 800d234:	e769      	b.n	800d10a <_rclc_take_new_data+0xd6>
 800d236:	aa04      	add	r2, sp, #16
 800d238:	3010      	adds	r0, #16
 800d23a:	a90a      	add	r1, sp, #40	@ 0x28
 800d23c:	f009 f8c4 	bl	80163c8 <rcl_action_take_result_request>
 800d240:	4605      	mov	r5, r0
 800d242:	2800      	cmp	r0, #0
 800d244:	f47f af59 	bne.w	800d0fa <_rclc_take_new_data+0xc6>
 800d248:	6860      	ldr	r0, [r4, #4]
 800d24a:	a904      	add	r1, sp, #16
 800d24c:	f009 faaa 	bl	80167a4 <rclc_action_find_goal_handle_by_uuid>
 800d250:	4607      	mov	r7, r0
 800d252:	b160      	cbz	r0, 800d26e <_rclc_take_new_data+0x23a>
 800d254:	ad0a      	add	r5, sp, #40	@ 0x28
 800d256:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800d25a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d25c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d25e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d262:	f04f 0c02 	mov.w	ip, #2
 800d266:	e886 0003 	stmia.w	r6, {r0, r1}
 800d26a:	f887 c008 	strb.w	ip, [r7, #8]
 800d26e:	6860      	ldr	r0, [r4, #4]
 800d270:	2300      	movs	r3, #0
 800d272:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800d276:	e6fa      	b.n	800d06e <_rclc_take_new_data+0x3a>
 800d278:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800d27c:	a90a      	add	r1, sp, #40	@ 0x28
 800d27e:	3010      	adds	r0, #16
 800d280:	f008 feae 	bl	8015fe0 <rcl_action_take_cancel_response>
 800d284:	4605      	mov	r5, r0
 800d286:	2800      	cmp	r0, #0
 800d288:	f47f af37 	bne.w	800d0fa <_rclc_take_new_data+0xc6>
 800d28c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d290:	6860      	ldr	r0, [r4, #4]
 800d292:	f009 fadb 	bl	801684c <rclc_action_find_handle_by_cancel_request_sequence_number>
 800d296:	4606      	mov	r6, r0
 800d298:	6860      	ldr	r0, [r4, #4]
 800d29a:	2e00      	cmp	r6, #0
 800d29c:	f43f af40 	beq.w	800d120 <_rclc_take_new_data+0xec>
 800d2a0:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800d2a2:	2701      	movs	r7, #1
 800d2a4:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	f43f af3a 	beq.w	800d120 <_rclc_take_new_data+0xec>
 800d2ac:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d2ae:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800d2b2:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800d2b6:	f009 fa75 	bl	80167a4 <rclc_action_find_goal_handle_by_uuid>
 800d2ba:	b138      	cbz	r0, 800d2cc <_rclc_take_new_data+0x298>
 800d2bc:	6860      	ldr	r0, [r4, #4]
 800d2be:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800d2c0:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800d2c4:	3501      	adds	r5, #1
 800d2c6:	42ab      	cmp	r3, r5
 800d2c8:	d8f0      	bhi.n	800d2ac <_rclc_take_new_data+0x278>
 800d2ca:	e729      	b.n	800d120 <_rclc_take_new_data+0xec>
 800d2cc:	6860      	ldr	r0, [r4, #4]
 800d2ce:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800d2d0:	3501      	adds	r5, #1
 800d2d2:	42ab      	cmp	r3, r5
 800d2d4:	d8ea      	bhi.n	800d2ac <_rclc_take_new_data+0x278>
 800d2d6:	e723      	b.n	800d120 <_rclc_take_new_data+0xec>
 800d2d8:	ab06      	add	r3, sp, #24
 800d2da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d2dc:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d2e0:	2103      	movs	r1, #3
 800d2e2:	e896 000c 	ldmia.w	r6, {r2, r3}
 800d2e6:	6860      	ldr	r0, [r4, #4]
 800d2e8:	f009 fb26 	bl	8016938 <rclc_action_server_goal_cancel_reject>
 800d2ec:	e6c4      	b.n	800d078 <_rclc_take_new_data+0x44>
 800d2ee:	ab06      	add	r3, sp, #24
 800d2f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d2f2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d2f6:	2102      	movs	r1, #2
 800d2f8:	e896 000c 	ldmia.w	r6, {r2, r3}
 800d2fc:	6860      	ldr	r0, [r4, #4]
 800d2fe:	f009 fb1b 	bl	8016938 <rclc_action_server_goal_cancel_reject>
 800d302:	e6b9      	b.n	800d078 <_rclc_take_new_data+0x44>
 800d304:	6860      	ldr	r0, [r4, #4]
 800d306:	e706      	b.n	800d116 <_rclc_take_new_data+0xe2>
 800d308:	6860      	ldr	r0, [r4, #4]
 800d30a:	4631      	mov	r1, r6
 800d30c:	f009 fa34 	bl	8016778 <rclc_action_remove_used_goal_handle>
 800d310:	f000 fe06 	bl	800df20 <rcutils_reset_error>
 800d314:	e6b0      	b.n	800d078 <_rclc_take_new_data+0x44>
 800d316:	2501      	movs	r5, #1
 800d318:	e6ae      	b.n	800d078 <_rclc_take_new_data+0x44>
 800d31a:	bf00      	nop

0800d31c <_rclc_execute.part.0>:
 800d31c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d31e:	7803      	ldrb	r3, [r0, #0]
 800d320:	b087      	sub	sp, #28
 800d322:	4604      	mov	r4, r0
 800d324:	2b0a      	cmp	r3, #10
 800d326:	f200 8136 	bhi.w	800d596 <_rclc_execute.part.0+0x27a>
 800d32a:	e8df f003 	tbb	[pc, r3]
 800d32e:	435e      	.short	0x435e
 800d330:	06a1664f 	.word	0x06a1664f
 800d334:	6c1e0606 	.word	0x6c1e0606
 800d338:	59          	.byte	0x59
 800d339:	00          	.byte	0x00
 800d33a:	2b06      	cmp	r3, #6
 800d33c:	f000 8122 	beq.w	800d584 <_rclc_execute.part.0+0x268>
 800d340:	2b07      	cmp	r3, #7
 800d342:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d344:	f040 8118 	bne.w	800d578 <_rclc_execute.part.0+0x25c>
 800d348:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800d34c:	6880      	ldr	r0, [r0, #8]
 800d34e:	4798      	blx	r3
 800d350:	f104 0110 	add.w	r1, r4, #16
 800d354:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800d356:	6860      	ldr	r0, [r4, #4]
 800d358:	f007 fb16 	bl	8014988 <rcl_send_response>
 800d35c:	2800      	cmp	r0, #0
 800d35e:	d033      	beq.n	800d3c8 <_rclc_execute.part.0+0xac>
 800d360:	9005      	str	r0, [sp, #20]
 800d362:	f000 fddd 	bl	800df20 <rcutils_reset_error>
 800d366:	9805      	ldr	r0, [sp, #20]
 800d368:	e02e      	b.n	800d3c8 <_rclc_execute.part.0+0xac>
 800d36a:	6840      	ldr	r0, [r0, #4]
 800d36c:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800d370:	2b00      	cmp	r3, #0
 800d372:	f000 8086 	beq.w	800d482 <_rclc_execute.part.0+0x166>
 800d376:	2600      	movs	r6, #0
 800d378:	2701      	movs	r7, #1
 800d37a:	e004      	b.n	800d386 <_rclc_execute.part.0+0x6a>
 800d37c:	f009 f9c6 	bl	801670c <rclc_action_send_result_request>
 800d380:	b998      	cbnz	r0, 800d3aa <_rclc_execute.part.0+0x8e>
 800d382:	722f      	strb	r7, [r5, #8]
 800d384:	6860      	ldr	r0, [r4, #4]
 800d386:	f009 fa73 	bl	8016870 <rclc_action_find_first_handle_with_goal_response>
 800d38a:	4605      	mov	r5, r0
 800d38c:	2800      	cmp	r0, #0
 800d38e:	d077      	beq.n	800d480 <_rclc_execute.part.0+0x164>
 800d390:	6863      	ldr	r3, [r4, #4]
 800d392:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d394:	699b      	ldr	r3, [r3, #24]
 800d396:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800d39a:	f885 6020 	strb.w	r6, [r5, #32]
 800d39e:	4798      	blx	r3
 800d3a0:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800d3a4:	4628      	mov	r0, r5
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d1e8      	bne.n	800d37c <_rclc_execute.part.0+0x60>
 800d3aa:	6860      	ldr	r0, [r4, #4]
 800d3ac:	4629      	mov	r1, r5
 800d3ae:	f009 f9e3 	bl	8016778 <rclc_action_remove_used_goal_handle>
 800d3b2:	e7e7      	b.n	800d384 <_rclc_execute.part.0+0x68>
 800d3b4:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800d3b8:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800d3bc:	2d00      	cmp	r5, #0
 800d3be:	f000 80c9 	beq.w	800d554 <_rclc_execute.part.0+0x238>
 800d3c2:	6880      	ldr	r0, [r0, #8]
 800d3c4:	4798      	blx	r3
 800d3c6:	2000      	movs	r0, #0
 800d3c8:	b007      	add	sp, #28
 800d3ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3cc:	6840      	ldr	r0, [r0, #4]
 800d3ce:	f007 fe0d 	bl	8014fec <rcl_timer_call>
 800d3d2:	f240 3321 	movw	r3, #801	@ 0x321
 800d3d6:	4298      	cmp	r0, r3
 800d3d8:	d004      	beq.n	800d3e4 <_rclc_execute.part.0+0xc8>
 800d3da:	2800      	cmp	r0, #0
 800d3dc:	d0f4      	beq.n	800d3c8 <_rclc_execute.part.0+0xac>
 800d3de:	e7bf      	b.n	800d360 <_rclc_execute.part.0+0x44>
 800d3e0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d3e2:	4798      	blx	r3
 800d3e4:	2000      	movs	r0, #0
 800d3e6:	b007      	add	sp, #28
 800d3e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3ea:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800d3ee:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d3f0:	b925      	cbnz	r5, 800d3fc <_rclc_execute.part.0+0xe0>
 800d3f2:	4628      	mov	r0, r5
 800d3f4:	4798      	blx	r3
 800d3f6:	4628      	mov	r0, r5
 800d3f8:	e7e6      	b.n	800d3c8 <_rclc_execute.part.0+0xac>
 800d3fa:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d3fc:	68a0      	ldr	r0, [r4, #8]
 800d3fe:	4798      	blx	r3
 800d400:	2000      	movs	r0, #0
 800d402:	b007      	add	sp, #28
 800d404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d406:	6840      	ldr	r0, [r0, #4]
 800d408:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800d40c:	bb3b      	cbnz	r3, 800d45e <_rclc_execute.part.0+0x142>
 800d40e:	f890 3020 	ldrb.w	r3, [r0, #32]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d07b      	beq.n	800d50e <_rclc_execute.part.0+0x1f2>
 800d416:	f640 0634 	movw	r6, #2100	@ 0x834
 800d41a:	2701      	movs	r7, #1
 800d41c:	e007      	b.n	800d42e <_rclc_execute.part.0+0x112>
 800d41e:	4628      	mov	r0, r5
 800d420:	f009 fa3e 	bl	80168a0 <rclc_action_server_response_goal_request>
 800d424:	6860      	ldr	r0, [r4, #4]
 800d426:	4629      	mov	r1, r5
 800d428:	f009 f9a6 	bl	8016778 <rclc_action_remove_used_goal_handle>
 800d42c:	6860      	ldr	r0, [r4, #4]
 800d42e:	2100      	movs	r1, #0
 800d430:	f009 f9d0 	bl	80167d4 <rclc_action_find_first_handle_by_status>
 800d434:	4605      	mov	r5, r0
 800d436:	2800      	cmp	r0, #0
 800d438:	d066      	beq.n	800d508 <_rclc_execute.part.0+0x1ec>
 800d43a:	6863      	ldr	r3, [r4, #4]
 800d43c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d43e:	699b      	ldr	r3, [r3, #24]
 800d440:	4798      	blx	r3
 800d442:	42b0      	cmp	r0, r6
 800d444:	f04f 0100 	mov.w	r1, #0
 800d448:	d1e9      	bne.n	800d41e <_rclc_execute.part.0+0x102>
 800d44a:	2101      	movs	r1, #1
 800d44c:	4628      	mov	r0, r5
 800d44e:	f009 fa27 	bl	80168a0 <rclc_action_server_response_goal_request>
 800d452:	722f      	strb	r7, [r5, #8]
 800d454:	e7ea      	b.n	800d42c <_rclc_execute.part.0+0x110>
 800d456:	6848      	ldr	r0, [r1, #4]
 800d458:	f009 f98e 	bl	8016778 <rclc_action_remove_used_goal_handle>
 800d45c:	6860      	ldr	r0, [r4, #4]
 800d45e:	f009 f9c5 	bl	80167ec <rclc_action_find_first_terminated_handle>
 800d462:	4601      	mov	r1, r0
 800d464:	2800      	cmp	r0, #0
 800d466:	d1f6      	bne.n	800d456 <_rclc_execute.part.0+0x13a>
 800d468:	6860      	ldr	r0, [r4, #4]
 800d46a:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800d46e:	e7ce      	b.n	800d40e <_rclc_execute.part.0+0xf2>
 800d470:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d472:	6880      	ldr	r0, [r0, #8]
 800d474:	f104 0110 	add.w	r1, r4, #16
 800d478:	4798      	blx	r3
 800d47a:	2000      	movs	r0, #0
 800d47c:	b007      	add	sp, #28
 800d47e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d480:	6860      	ldr	r0, [r4, #4]
 800d482:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800d486:	b18b      	cbz	r3, 800d4ac <_rclc_execute.part.0+0x190>
 800d488:	68c5      	ldr	r5, [r0, #12]
 800d48a:	b32d      	cbz	r5, 800d4d8 <_rclc_execute.part.0+0x1bc>
 800d48c:	2600      	movs	r6, #0
 800d48e:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800d492:	b143      	cbz	r3, 800d4a6 <_rclc_execute.part.0+0x18a>
 800d494:	69c3      	ldr	r3, [r0, #28]
 800d496:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800d49a:	b123      	cbz	r3, 800d4a6 <_rclc_execute.part.0+0x18a>
 800d49c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800d49e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d4a0:	4628      	mov	r0, r5
 800d4a2:	4798      	blx	r3
 800d4a4:	6860      	ldr	r0, [r4, #4]
 800d4a6:	682d      	ldr	r5, [r5, #0]
 800d4a8:	2d00      	cmp	r5, #0
 800d4aa:	d1f0      	bne.n	800d48e <_rclc_execute.part.0+0x172>
 800d4ac:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800d4b0:	b193      	cbz	r3, 800d4d8 <_rclc_execute.part.0+0x1bc>
 800d4b2:	68c5      	ldr	r5, [r0, #12]
 800d4b4:	b185      	cbz	r5, 800d4d8 <_rclc_execute.part.0+0x1bc>
 800d4b6:	2600      	movs	r6, #0
 800d4b8:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800d4bc:	b14b      	cbz	r3, 800d4d2 <_rclc_execute.part.0+0x1b6>
 800d4be:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800d4c0:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800d4c4:	b12b      	cbz	r3, 800d4d2 <_rclc_execute.part.0+0x1b6>
 800d4c6:	4628      	mov	r0, r5
 800d4c8:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800d4cc:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d4ce:	4798      	blx	r3
 800d4d0:	6860      	ldr	r0, [r4, #4]
 800d4d2:	682d      	ldr	r5, [r5, #0]
 800d4d4:	2d00      	cmp	r5, #0
 800d4d6:	d1ef      	bne.n	800d4b8 <_rclc_execute.part.0+0x19c>
 800d4d8:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d081      	beq.n	800d3e4 <_rclc_execute.part.0+0xc8>
 800d4e0:	2700      	movs	r7, #0
 800d4e2:	e00b      	b.n	800d4fc <_rclc_execute.part.0+0x1e0>
 800d4e4:	6863      	ldr	r3, [r4, #4]
 800d4e6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d4e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800d4ea:	6a1e      	ldr	r6, [r3, #32]
 800d4ec:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800d4f0:	47b0      	blx	r6
 800d4f2:	6860      	ldr	r0, [r4, #4]
 800d4f4:	4629      	mov	r1, r5
 800d4f6:	f009 f93f 	bl	8016778 <rclc_action_remove_used_goal_handle>
 800d4fa:	6860      	ldr	r0, [r4, #4]
 800d4fc:	f009 f9c4 	bl	8016888 <rclc_action_find_first_handle_with_result_response>
 800d500:	4605      	mov	r5, r0
 800d502:	2800      	cmp	r0, #0
 800d504:	d1ee      	bne.n	800d4e4 <_rclc_execute.part.0+0x1c8>
 800d506:	e76d      	b.n	800d3e4 <_rclc_execute.part.0+0xc8>
 800d508:	6860      	ldr	r0, [r4, #4]
 800d50a:	f880 5020 	strb.w	r5, [r0, #32]
 800d50e:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800d512:	2b00      	cmp	r3, #0
 800d514:	f43f af66 	beq.w	800d3e4 <_rclc_execute.part.0+0xc8>
 800d518:	68c5      	ldr	r5, [r0, #12]
 800d51a:	b1b5      	cbz	r5, 800d54a <_rclc_execute.part.0+0x22e>
 800d51c:	2602      	movs	r6, #2
 800d51e:	e001      	b.n	800d524 <_rclc_execute.part.0+0x208>
 800d520:	682d      	ldr	r5, [r5, #0]
 800d522:	b195      	cbz	r5, 800d54a <_rclc_execute.part.0+0x22e>
 800d524:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800d528:	2b03      	cmp	r3, #3
 800d52a:	d1f9      	bne.n	800d520 <_rclc_execute.part.0+0x204>
 800d52c:	69c3      	ldr	r3, [r0, #28]
 800d52e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d530:	4628      	mov	r0, r5
 800d532:	4798      	blx	r3
 800d534:	4603      	mov	r3, r0
 800d536:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800d53a:	4628      	mov	r0, r5
 800d53c:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800d540:	b163      	cbz	r3, 800d55c <_rclc_execute.part.0+0x240>
 800d542:	f009 f9cd 	bl	80168e0 <rclc_action_server_goal_cancel_accept>
 800d546:	6860      	ldr	r0, [r4, #4]
 800d548:	e7ea      	b.n	800d520 <_rclc_execute.part.0+0x204>
 800d54a:	2300      	movs	r3, #0
 800d54c:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800d550:	4618      	mov	r0, r3
 800d552:	e739      	b.n	800d3c8 <_rclc_execute.part.0+0xac>
 800d554:	4628      	mov	r0, r5
 800d556:	4798      	blx	r3
 800d558:	4628      	mov	r0, r5
 800d55a:	e735      	b.n	800d3c8 <_rclc_execute.part.0+0xac>
 800d55c:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800d55e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d562:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800d566:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d56a:	6860      	ldr	r0, [r4, #4]
 800d56c:	2101      	movs	r1, #1
 800d56e:	f009 f9e3 	bl	8016938 <rclc_action_server_goal_cancel_reject>
 800d572:	722e      	strb	r6, [r5, #8]
 800d574:	6860      	ldr	r0, [r4, #4]
 800d576:	e7d3      	b.n	800d520 <_rclc_execute.part.0+0x204>
 800d578:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800d57a:	6880      	ldr	r0, [r0, #8]
 800d57c:	4798      	blx	r3
 800d57e:	f104 0110 	add.w	r1, r4, #16
 800d582:	e6e7      	b.n	800d354 <_rclc_execute.part.0+0x38>
 800d584:	f100 0110 	add.w	r1, r0, #16
 800d588:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d58a:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800d58c:	6880      	ldr	r0, [r0, #8]
 800d58e:	9105      	str	r1, [sp, #20]
 800d590:	4798      	blx	r3
 800d592:	9905      	ldr	r1, [sp, #20]
 800d594:	e6de      	b.n	800d354 <_rclc_execute.part.0+0x38>
 800d596:	2001      	movs	r0, #1
 800d598:	e716      	b.n	800d3c8 <_rclc_execute.part.0+0xac>
 800d59a:	bf00      	nop

0800d59c <rclc_executor_trigger_any>:
 800d59c:	2800      	cmp	r0, #0
 800d59e:	d03f      	beq.n	800d620 <rclc_executor_trigger_any+0x84>
 800d5a0:	2900      	cmp	r1, #0
 800d5a2:	d03e      	beq.n	800d622 <rclc_executor_trigger_any+0x86>
 800d5a4:	4603      	mov	r3, r0
 800d5a6:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	2800      	cmp	r0, #0
 800d5ae:	d037      	beq.n	800d620 <rclc_executor_trigger_any+0x84>
 800d5b0:	b430      	push	{r4, r5}
 800d5b2:	f893 c000 	ldrb.w	ip, [r3]
 800d5b6:	f1bc 0f08 	cmp.w	ip, #8
 800d5ba:	d11e      	bne.n	800d5fa <rclc_executor_trigger_any+0x5e>
 800d5bc:	685c      	ldr	r4, [r3, #4]
 800d5be:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800d5c0:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800d5c4:	d105      	bne.n	800d5d2 <rclc_executor_trigger_any+0x36>
 800d5c6:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800d5ca:	b910      	cbnz	r0, 800d5d2 <rclc_executor_trigger_any+0x36>
 800d5cc:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800d5d0:	b128      	cbz	r0, 800d5de <rclc_executor_trigger_any+0x42>
 800d5d2:	bc30      	pop	{r4, r5}
 800d5d4:	4770      	bx	lr
 800d5d6:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800d5da:	2800      	cmp	r0, #0
 800d5dc:	d1f9      	bne.n	800d5d2 <rclc_executor_trigger_any+0x36>
 800d5de:	3201      	adds	r2, #1
 800d5e0:	4291      	cmp	r1, r2
 800d5e2:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800d5e6:	d018      	beq.n	800d61a <rclc_executor_trigger_any+0x7e>
 800d5e8:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800d5ec:	2800      	cmp	r0, #0
 800d5ee:	d0f0      	beq.n	800d5d2 <rclc_executor_trigger_any+0x36>
 800d5f0:	f893 c000 	ldrb.w	ip, [r3]
 800d5f4:	f1bc 0f08 	cmp.w	ip, #8
 800d5f8:	d0e0      	beq.n	800d5bc <rclc_executor_trigger_any+0x20>
 800d5fa:	f1bc 0f09 	cmp.w	ip, #9
 800d5fe:	d1ea      	bne.n	800d5d6 <rclc_executor_trigger_any+0x3a>
 800d600:	685c      	ldr	r4, [r3, #4]
 800d602:	6a25      	ldr	r5, [r4, #32]
 800d604:	2d00      	cmp	r5, #0
 800d606:	d1e4      	bne.n	800d5d2 <rclc_executor_trigger_any+0x36>
 800d608:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800d60c:	2800      	cmp	r0, #0
 800d60e:	d1e0      	bne.n	800d5d2 <rclc_executor_trigger_any+0x36>
 800d610:	3201      	adds	r2, #1
 800d612:	4291      	cmp	r1, r2
 800d614:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800d618:	d1e6      	bne.n	800d5e8 <rclc_executor_trigger_any+0x4c>
 800d61a:	2000      	movs	r0, #0
 800d61c:	bc30      	pop	{r4, r5}
 800d61e:	4770      	bx	lr
 800d620:	4770      	bx	lr
 800d622:	4608      	mov	r0, r1
 800d624:	4770      	bx	lr
 800d626:	bf00      	nop

0800d628 <rclc_executor_get_zero_initialized_executor>:
 800d628:	b510      	push	{r4, lr}
 800d62a:	4903      	ldr	r1, [pc, #12]	@ (800d638 <rclc_executor_get_zero_initialized_executor+0x10>)
 800d62c:	4604      	mov	r4, r0
 800d62e:	2288      	movs	r2, #136	@ 0x88
 800d630:	f00c fbd1 	bl	8019dd6 <memcpy>
 800d634:	4620      	mov	r0, r4
 800d636:	bd10      	pop	{r4, pc}
 800d638:	0801bc30 	.word	0x0801bc30
 800d63c:	00000000 	.word	0x00000000

0800d640 <rclc_executor_init>:
 800d640:	2800      	cmp	r0, #0
 800d642:	d05f      	beq.n	800d704 <rclc_executor_init+0xc4>
 800d644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d648:	460c      	mov	r4, r1
 800d64a:	b0b0      	sub	sp, #192	@ 0xc0
 800d64c:	2900      	cmp	r1, #0
 800d64e:	d051      	beq.n	800d6f4 <rclc_executor_init+0xb4>
 800d650:	4605      	mov	r5, r0
 800d652:	4618      	mov	r0, r3
 800d654:	4616      	mov	r6, r2
 800d656:	461f      	mov	r7, r3
 800d658:	f000 fc3c 	bl	800ded4 <rcutils_allocator_is_valid>
 800d65c:	2800      	cmp	r0, #0
 800d65e:	d049      	beq.n	800d6f4 <rclc_executor_init+0xb4>
 800d660:	2e00      	cmp	r6, #0
 800d662:	d047      	beq.n	800d6f4 <rclc_executor_init+0xb4>
 800d664:	492c      	ldr	r1, [pc, #176]	@ (800d718 <rclc_executor_init+0xd8>)
 800d666:	2288      	movs	r2, #136	@ 0x88
 800d668:	a80e      	add	r0, sp, #56	@ 0x38
 800d66a:	f00c fbb4 	bl	8019dd6 <memcpy>
 800d66e:	a90e      	add	r1, sp, #56	@ 0x38
 800d670:	2288      	movs	r2, #136	@ 0x88
 800d672:	4628      	mov	r0, r5
 800d674:	f00c fbaf 	bl	8019dd6 <memcpy>
 800d678:	602c      	str	r4, [r5, #0]
 800d67a:	4668      	mov	r0, sp
 800d67c:	60ae      	str	r6, [r5, #8]
 800d67e:	466c      	mov	r4, sp
 800d680:	f007 fe26 	bl	80152d0 <rcl_get_zero_initialized_wait_set>
 800d684:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d686:	f105 0c14 	add.w	ip, r5, #20
 800d68a:	f8d7 8000 	ldr.w	r8, [r7]
 800d68e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d692:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d694:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d698:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d69a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d69e:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800d710 <rclc_executor_init+0xd0>
 800d6a2:	6823      	ldr	r3, [r4, #0]
 800d6a4:	f8cc 3000 	str.w	r3, [ip]
 800d6a8:	6939      	ldr	r1, [r7, #16]
 800d6aa:	612f      	str	r7, [r5, #16]
 800d6ac:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800d6b0:	01b0      	lsls	r0, r6, #6
 800d6b2:	47c0      	blx	r8
 800d6b4:	6068      	str	r0, [r5, #4]
 800d6b6:	b338      	cbz	r0, 800d708 <rclc_executor_init+0xc8>
 800d6b8:	2400      	movs	r4, #0
 800d6ba:	e000      	b.n	800d6be <rclc_executor_init+0x7e>
 800d6bc:	6868      	ldr	r0, [r5, #4]
 800d6be:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800d6c2:	4631      	mov	r1, r6
 800d6c4:	3401      	adds	r4, #1
 800d6c6:	f000 faa3 	bl	800dc10 <rclc_executor_handle_init>
 800d6ca:	42a6      	cmp	r6, r4
 800d6cc:	d1f6      	bne.n	800d6bc <rclc_executor_init+0x7c>
 800d6ce:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800d6d2:	f000 fa93 	bl	800dbfc <rclc_executor_handle_counters_zero_init>
 800d6d6:	4a11      	ldr	r2, [pc, #68]	@ (800d71c <rclc_executor_init+0xdc>)
 800d6d8:	686b      	ldr	r3, [r5, #4]
 800d6da:	2000      	movs	r0, #0
 800d6dc:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800d6e0:	b163      	cbz	r3, 800d6fc <rclc_executor_init+0xbc>
 800d6e2:	692b      	ldr	r3, [r5, #16]
 800d6e4:	b153      	cbz	r3, 800d6fc <rclc_executor_init+0xbc>
 800d6e6:	68ab      	ldr	r3, [r5, #8]
 800d6e8:	b143      	cbz	r3, 800d6fc <rclc_executor_init+0xbc>
 800d6ea:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800d6ee:	b030      	add	sp, #192	@ 0xc0
 800d6f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6f4:	200b      	movs	r0, #11
 800d6f6:	b030      	add	sp, #192	@ 0xc0
 800d6f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	b030      	add	sp, #192	@ 0xc0
 800d700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d704:	200b      	movs	r0, #11
 800d706:	4770      	bx	lr
 800d708:	200a      	movs	r0, #10
 800d70a:	e7f4      	b.n	800d6f6 <rclc_executor_init+0xb6>
 800d70c:	f3af 8000 	nop.w
 800d710:	3b9aca00 	.word	0x3b9aca00
 800d714:	00000000 	.word	0x00000000
 800d718:	0801bc30 	.word	0x0801bc30
 800d71c:	0800d59d 	.word	0x0800d59d

0800d720 <rclc_executor_add_timer>:
 800d720:	b300      	cbz	r0, 800d764 <rclc_executor_add_timer+0x44>
 800d722:	b1f9      	cbz	r1, 800d764 <rclc_executor_add_timer+0x44>
 800d724:	b538      	push	{r3, r4, r5, lr}
 800d726:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800d72a:	4293      	cmp	r3, r2
 800d72c:	4604      	mov	r4, r0
 800d72e:	d301      	bcc.n	800d734 <rclc_executor_add_timer+0x14>
 800d730:	2001      	movs	r0, #1
 800d732:	bd38      	pop	{r3, r4, r5, pc}
 800d734:	6840      	ldr	r0, [r0, #4]
 800d736:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800d73a:	019d      	lsls	r5, r3, #6
 800d73c:	6051      	str	r1, [r2, #4]
 800d73e:	2102      	movs	r1, #2
 800d740:	5341      	strh	r1, [r0, r5]
 800d742:	3301      	adds	r3, #1
 800d744:	2000      	movs	r0, #0
 800d746:	2101      	movs	r1, #1
 800d748:	f104 0514 	add.w	r5, r4, #20
 800d74c:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800d74e:	8711      	strh	r1, [r2, #56]	@ 0x38
 800d750:	4628      	mov	r0, r5
 800d752:	60e3      	str	r3, [r4, #12]
 800d754:	f007 fdd0 	bl	80152f8 <rcl_wait_set_is_valid>
 800d758:	b930      	cbnz	r0, 800d768 <rclc_executor_add_timer+0x48>
 800d75a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800d75c:	3301      	adds	r3, #1
 800d75e:	2000      	movs	r0, #0
 800d760:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800d762:	bd38      	pop	{r3, r4, r5, pc}
 800d764:	200b      	movs	r0, #11
 800d766:	4770      	bx	lr
 800d768:	4628      	mov	r0, r5
 800d76a:	f007 fdcb 	bl	8015304 <rcl_wait_set_fini>
 800d76e:	2800      	cmp	r0, #0
 800d770:	d0f3      	beq.n	800d75a <rclc_executor_add_timer+0x3a>
 800d772:	bd38      	pop	{r3, r4, r5, pc}

0800d774 <rclc_executor_add_service>:
 800d774:	b370      	cbz	r0, 800d7d4 <rclc_executor_add_service+0x60>
 800d776:	b369      	cbz	r1, 800d7d4 <rclc_executor_add_service+0x60>
 800d778:	b362      	cbz	r2, 800d7d4 <rclc_executor_add_service+0x60>
 800d77a:	b35b      	cbz	r3, 800d7d4 <rclc_executor_add_service+0x60>
 800d77c:	b538      	push	{r3, r4, r5, lr}
 800d77e:	4604      	mov	r4, r0
 800d780:	9804      	ldr	r0, [sp, #16]
 800d782:	b378      	cbz	r0, 800d7e4 <rclc_executor_add_service+0x70>
 800d784:	e9d4 5002 	ldrd	r5, r0, [r4, #8]
 800d788:	42a8      	cmp	r0, r5
 800d78a:	d301      	bcc.n	800d790 <rclc_executor_add_service+0x1c>
 800d78c:	2001      	movs	r0, #1
 800d78e:	bd38      	pop	{r3, r4, r5, pc}
 800d790:	6865      	ldr	r5, [r4, #4]
 800d792:	eb05 1c80 	add.w	ip, r5, r0, lsl #6
 800d796:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 800d79a:	f8cc 3028 	str.w	r3, [ip, #40]	@ 0x28
 800d79e:	9b04      	ldr	r3, [sp, #16]
 800d7a0:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800d7a4:	2305      	movs	r3, #5
 800d7a6:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800d7aa:	3001      	adds	r0, #1
 800d7ac:	f825 300e 	strh.w	r3, [r5, lr]
 800d7b0:	2201      	movs	r2, #1
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	f104 0514 	add.w	r5, r4, #20
 800d7b8:	f88c 2038 	strb.w	r2, [ip, #56]	@ 0x38
 800d7bc:	f8cc 302c 	str.w	r3, [ip, #44]	@ 0x2c
 800d7c0:	60e0      	str	r0, [r4, #12]
 800d7c2:	4628      	mov	r0, r5
 800d7c4:	f007 fd98 	bl	80152f8 <rcl_wait_set_is_valid>
 800d7c8:	b930      	cbnz	r0, 800d7d8 <rclc_executor_add_service+0x64>
 800d7ca:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800d7cc:	3301      	adds	r3, #1
 800d7ce:	2000      	movs	r0, #0
 800d7d0:	6563      	str	r3, [r4, #84]	@ 0x54
 800d7d2:	bd38      	pop	{r3, r4, r5, pc}
 800d7d4:	200b      	movs	r0, #11
 800d7d6:	4770      	bx	lr
 800d7d8:	4628      	mov	r0, r5
 800d7da:	f007 fd93 	bl	8015304 <rcl_wait_set_fini>
 800d7de:	2800      	cmp	r0, #0
 800d7e0:	d0f3      	beq.n	800d7ca <rclc_executor_add_service+0x56>
 800d7e2:	e7d4      	b.n	800d78e <rclc_executor_add_service+0x1a>
 800d7e4:	200b      	movs	r0, #11
 800d7e6:	bd38      	pop	{r3, r4, r5, pc}

0800d7e8 <rclc_executor_prepare>:
 800d7e8:	2800      	cmp	r0, #0
 800d7ea:	d044      	beq.n	800d876 <rclc_executor_prepare+0x8e>
 800d7ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7ee:	f100 0514 	add.w	r5, r0, #20
 800d7f2:	b09b      	sub	sp, #108	@ 0x6c
 800d7f4:	4604      	mov	r4, r0
 800d7f6:	4628      	mov	r0, r5
 800d7f8:	f007 fd7e 	bl	80152f8 <rcl_wait_set_is_valid>
 800d7fc:	b110      	cbz	r0, 800d804 <rclc_executor_prepare+0x1c>
 800d7fe:	2000      	movs	r0, #0
 800d800:	b01b      	add	sp, #108	@ 0x6c
 800d802:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d804:	4628      	mov	r0, r5
 800d806:	f007 fd7d 	bl	8015304 <rcl_wait_set_fini>
 800d80a:	2800      	cmp	r0, #0
 800d80c:	d130      	bne.n	800d870 <rclc_executor_prepare+0x88>
 800d80e:	a80c      	add	r0, sp, #48	@ 0x30
 800d810:	f007 fd5e 	bl	80152d0 <rcl_get_zero_initialized_wait_set>
 800d814:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800d818:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d81c:	46ae      	mov	lr, r5
 800d81e:	6927      	ldr	r7, [r4, #16]
 800d820:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d824:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d828:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d82c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d830:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d834:	f8dc 3000 	ldr.w	r3, [ip]
 800d838:	f8ce 3000 	str.w	r3, [lr]
 800d83c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d83e:	ae04      	add	r6, sp, #16
 800d840:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	6822      	ldr	r2, [r4, #0]
 800d846:	6033      	str	r3, [r6, #0]
 800d848:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d84a:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800d84c:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800d850:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800d854:	e9cd 2100 	strd	r2, r1, [sp]
 800d858:	4628      	mov	r0, r5
 800d85a:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800d85c:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800d85e:	f008 f84f 	bl	8015900 <rcl_wait_set_init>
 800d862:	2800      	cmp	r0, #0
 800d864:	d0cc      	beq.n	800d800 <rclc_executor_prepare+0x18>
 800d866:	900b      	str	r0, [sp, #44]	@ 0x2c
 800d868:	f000 fb5a 	bl	800df20 <rcutils_reset_error>
 800d86c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800d86e:	e7c7      	b.n	800d800 <rclc_executor_prepare+0x18>
 800d870:	f000 fb56 	bl	800df20 <rcutils_reset_error>
 800d874:	e7cb      	b.n	800d80e <rclc_executor_prepare+0x26>
 800d876:	200b      	movs	r0, #11
 800d878:	4770      	bx	lr
 800d87a:	bf00      	nop

0800d87c <rclc_executor_spin_some.part.0>:
 800d87c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d880:	f100 0614 	add.w	r6, r0, #20
 800d884:	b083      	sub	sp, #12
 800d886:	4691      	mov	r9, r2
 800d888:	4698      	mov	r8, r3
 800d88a:	4605      	mov	r5, r0
 800d88c:	f7ff ffac 	bl	800d7e8 <rclc_executor_prepare>
 800d890:	4630      	mov	r0, r6
 800d892:	f007 fe03 	bl	801549c <rcl_wait_set_clear>
 800d896:	4607      	mov	r7, r0
 800d898:	2800      	cmp	r0, #0
 800d89a:	f040 80ed 	bne.w	800da78 <rclc_executor_spin_some.part.0+0x1fc>
 800d89e:	68ab      	ldr	r3, [r5, #8]
 800d8a0:	4604      	mov	r4, r0
 800d8a2:	b303      	cbz	r3, 800d8e6 <rclc_executor_spin_some.part.0+0x6a>
 800d8a4:	6869      	ldr	r1, [r5, #4]
 800d8a6:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800d8aa:	01a2      	lsls	r2, r4, #6
 800d8ac:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800d8b0:	b1cb      	cbz	r3, 800d8e6 <rclc_executor_spin_some.part.0+0x6a>
 800d8b2:	5c8b      	ldrb	r3, [r1, r2]
 800d8b4:	2b0a      	cmp	r3, #10
 800d8b6:	f200 80d8 	bhi.w	800da6a <rclc_executor_spin_some.part.0+0x1ee>
 800d8ba:	e8df f003 	tbb	[pc, r3]
 800d8be:	9c9c      	.short	0x9c9c
 800d8c0:	068c8ca7 	.word	0x068c8ca7
 800d8c4:	bdc90606 	.word	0xbdc90606
 800d8c8:	b2          	.byte	0xb2
 800d8c9:	00          	.byte	0x00
 800d8ca:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d8ce:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d8d2:	4630      	mov	r0, r6
 800d8d4:	f008 f92a 	bl	8015b2c <rcl_wait_set_add_service>
 800d8d8:	2800      	cmp	r0, #0
 800d8da:	f040 8086 	bne.w	800d9ea <rclc_executor_spin_some.part.0+0x16e>
 800d8de:	68ab      	ldr	r3, [r5, #8]
 800d8e0:	3401      	adds	r4, #1
 800d8e2:	429c      	cmp	r4, r3
 800d8e4:	d3de      	bcc.n	800d8a4 <rclc_executor_spin_some.part.0+0x28>
 800d8e6:	4643      	mov	r3, r8
 800d8e8:	464a      	mov	r2, r9
 800d8ea:	4630      	mov	r0, r6
 800d8ec:	f008 f94c 	bl	8015b88 <rcl_wait>
 800d8f0:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	f000 80c7 	beq.w	800da88 <rclc_executor_spin_some.part.0+0x20c>
 800d8fa:	2b01      	cmp	r3, #1
 800d8fc:	f040 80b5 	bne.w	800da6a <rclc_executor_spin_some.part.0+0x1ee>
 800d900:	68ab      	ldr	r3, [r5, #8]
 800d902:	2b00      	cmp	r3, #0
 800d904:	f000 8159 	beq.w	800dbba <rclc_executor_spin_some.part.0+0x33e>
 800d908:	2400      	movs	r4, #0
 800d90a:	46a0      	mov	r8, r4
 800d90c:	f240 1991 	movw	r9, #401	@ 0x191
 800d910:	e00a      	b.n	800d928 <rclc_executor_spin_some.part.0+0xac>
 800d912:	f7ff fb41 	bl	800cf98 <_rclc_check_for_new_data>
 800d916:	4604      	mov	r4, r0
 800d918:	b110      	cbz	r0, 800d920 <rclc_executor_spin_some.part.0+0xa4>
 800d91a:	4548      	cmp	r0, r9
 800d91c:	f040 80b2 	bne.w	800da84 <rclc_executor_spin_some.part.0+0x208>
 800d920:	68ab      	ldr	r3, [r5, #8]
 800d922:	4598      	cmp	r8, r3
 800d924:	f080 8126 	bcs.w	800db74 <rclc_executor_spin_some.part.0+0x2f8>
 800d928:	686a      	ldr	r2, [r5, #4]
 800d92a:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800d92e:	4631      	mov	r1, r6
 800d930:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800d934:	f108 0801 	add.w	r8, r8, #1
 800d938:	f1bc 0f00 	cmp.w	ip, #0
 800d93c:	d1e9      	bne.n	800d912 <rclc_executor_spin_some.part.0+0x96>
 800d93e:	4619      	mov	r1, r3
 800d940:	4610      	mov	r0, r2
 800d942:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800d946:	4798      	blx	r3
 800d948:	2800      	cmp	r0, #0
 800d94a:	f000 809b 	beq.w	800da84 <rclc_executor_spin_some.part.0+0x208>
 800d94e:	68ab      	ldr	r3, [r5, #8]
 800d950:	2b00      	cmp	r3, #0
 800d952:	f000 8097 	beq.w	800da84 <rclc_executor_spin_some.part.0+0x208>
 800d956:	f04f 0800 	mov.w	r8, #0
 800d95a:	f240 1991 	movw	r9, #401	@ 0x191
 800d95e:	e009      	b.n	800d974 <rclc_executor_spin_some.part.0+0xf8>
 800d960:	f7ff fb68 	bl	800d034 <_rclc_take_new_data>
 800d964:	4604      	mov	r4, r0
 800d966:	b110      	cbz	r0, 800d96e <rclc_executor_spin_some.part.0+0xf2>
 800d968:	4548      	cmp	r0, r9
 800d96a:	f040 808b 	bne.w	800da84 <rclc_executor_spin_some.part.0+0x208>
 800d96e:	68ab      	ldr	r3, [r5, #8]
 800d970:	4598      	cmp	r8, r3
 800d972:	d209      	bcs.n	800d988 <rclc_executor_spin_some.part.0+0x10c>
 800d974:	6868      	ldr	r0, [r5, #4]
 800d976:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800d97a:	4631      	mov	r1, r6
 800d97c:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800d980:	f108 0801 	add.w	r8, r8, #1
 800d984:	2a00      	cmp	r2, #0
 800d986:	d1eb      	bne.n	800d960 <rclc_executor_spin_some.part.0+0xe4>
 800d988:	2600      	movs	r6, #0
 800d98a:	b97b      	cbnz	r3, 800d9ac <rclc_executor_spin_some.part.0+0x130>
 800d98c:	e07a      	b.n	800da84 <rclc_executor_spin_some.part.0+0x208>
 800d98e:	f812 200c 	ldrb.w	r2, [r2, ip]
 800d992:	2a08      	cmp	r2, #8
 800d994:	f000 80fd 	beq.w	800db92 <rclc_executor_spin_some.part.0+0x316>
 800d998:	2a09      	cmp	r2, #9
 800d99a:	f000 80ef 	beq.w	800db7c <rclc_executor_spin_some.part.0+0x300>
 800d99e:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800d9a2:	b98a      	cbnz	r2, 800d9c8 <rclc_executor_spin_some.part.0+0x14c>
 800d9a4:	3601      	adds	r6, #1
 800d9a6:	429e      	cmp	r6, r3
 800d9a8:	d262      	bcs.n	800da70 <rclc_executor_spin_some.part.0+0x1f4>
 800d9aa:	2400      	movs	r4, #0
 800d9ac:	686a      	ldr	r2, [r5, #4]
 800d9ae:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800d9b2:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800d9b6:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800d9ba:	2900      	cmp	r1, #0
 800d9bc:	d062      	beq.n	800da84 <rclc_executor_spin_some.part.0+0x208>
 800d9be:	7841      	ldrb	r1, [r0, #1]
 800d9c0:	2900      	cmp	r1, #0
 800d9c2:	d0e4      	beq.n	800d98e <rclc_executor_spin_some.part.0+0x112>
 800d9c4:	2901      	cmp	r1, #1
 800d9c6:	d1ed      	bne.n	800d9a4 <rclc_executor_spin_some.part.0+0x128>
 800d9c8:	f7ff fca8 	bl	800d31c <_rclc_execute.part.0>
 800d9cc:	2800      	cmp	r0, #0
 800d9ce:	f040 80b6 	bne.w	800db3e <rclc_executor_spin_some.part.0+0x2c2>
 800d9d2:	68ab      	ldr	r3, [r5, #8]
 800d9d4:	e7e6      	b.n	800d9a4 <rclc_executor_spin_some.part.0+0x128>
 800d9d6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d9da:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d9de:	4630      	mov	r0, r6
 800d9e0:	f008 f878 	bl	8015ad4 <rcl_wait_set_add_client>
 800d9e4:	2800      	cmp	r0, #0
 800d9e6:	f43f af7a 	beq.w	800d8de <rclc_executor_spin_some.part.0+0x62>
 800d9ea:	9001      	str	r0, [sp, #4]
 800d9ec:	f000 fa98 	bl	800df20 <rcutils_reset_error>
 800d9f0:	9801      	ldr	r0, [sp, #4]
 800d9f2:	4607      	mov	r7, r0
 800d9f4:	e03c      	b.n	800da70 <rclc_executor_spin_some.part.0+0x1f4>
 800d9f6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d9fa:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d9fe:	4630      	mov	r0, r6
 800da00:	f007 fd20 	bl	8015444 <rcl_wait_set_add_subscription>
 800da04:	2800      	cmp	r0, #0
 800da06:	f43f af6a 	beq.w	800d8de <rclc_executor_spin_some.part.0+0x62>
 800da0a:	e7ee      	b.n	800d9ea <rclc_executor_spin_some.part.0+0x16e>
 800da0c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800da10:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800da14:	4630      	mov	r0, r6
 800da16:	f008 f82d 	bl	8015a74 <rcl_wait_set_add_timer>
 800da1a:	2800      	cmp	r0, #0
 800da1c:	f43f af5f 	beq.w	800d8de <rclc_executor_spin_some.part.0+0x62>
 800da20:	e7e3      	b.n	800d9ea <rclc_executor_spin_some.part.0+0x16e>
 800da22:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800da26:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800da2a:	4630      	mov	r0, r6
 800da2c:	f007 fff6 	bl	8015a1c <rcl_wait_set_add_guard_condition>
 800da30:	2800      	cmp	r0, #0
 800da32:	f43f af54 	beq.w	800d8de <rclc_executor_spin_some.part.0+0x62>
 800da36:	e7d8      	b.n	800d9ea <rclc_executor_spin_some.part.0+0x16e>
 800da38:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800da3c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800da40:	3110      	adds	r1, #16
 800da42:	4630      	mov	r0, r6
 800da44:	f008 fd78 	bl	8016538 <rcl_action_wait_set_add_action_server>
 800da48:	2800      	cmp	r0, #0
 800da4a:	f43f af48 	beq.w	800d8de <rclc_executor_spin_some.part.0+0x62>
 800da4e:	e7cc      	b.n	800d9ea <rclc_executor_spin_some.part.0+0x16e>
 800da50:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800da54:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800da58:	3110      	adds	r1, #16
 800da5a:	2300      	movs	r3, #0
 800da5c:	4630      	mov	r0, r6
 800da5e:	f008 fb43 	bl	80160e8 <rcl_action_wait_set_add_action_client>
 800da62:	2800      	cmp	r0, #0
 800da64:	f43f af3b 	beq.w	800d8de <rclc_executor_spin_some.part.0+0x62>
 800da68:	e7bf      	b.n	800d9ea <rclc_executor_spin_some.part.0+0x16e>
 800da6a:	f000 fa59 	bl	800df20 <rcutils_reset_error>
 800da6e:	2701      	movs	r7, #1
 800da70:	4638      	mov	r0, r7
 800da72:	b003      	add	sp, #12
 800da74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da78:	f000 fa52 	bl	800df20 <rcutils_reset_error>
 800da7c:	4638      	mov	r0, r7
 800da7e:	b003      	add	sp, #12
 800da80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da84:	4627      	mov	r7, r4
 800da86:	e7f3      	b.n	800da70 <rclc_executor_spin_some.part.0+0x1f4>
 800da88:	68ab      	ldr	r3, [r5, #8]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	f000 8092 	beq.w	800dbb4 <rclc_executor_spin_some.part.0+0x338>
 800da90:	2400      	movs	r4, #0
 800da92:	46a0      	mov	r8, r4
 800da94:	f240 1991 	movw	r9, #401	@ 0x191
 800da98:	e008      	b.n	800daac <rclc_executor_spin_some.part.0+0x230>
 800da9a:	f7ff fa7d 	bl	800cf98 <_rclc_check_for_new_data>
 800da9e:	4604      	mov	r4, r0
 800daa0:	b108      	cbz	r0, 800daa6 <rclc_executor_spin_some.part.0+0x22a>
 800daa2:	4548      	cmp	r0, r9
 800daa4:	d1ee      	bne.n	800da84 <rclc_executor_spin_some.part.0+0x208>
 800daa6:	68ab      	ldr	r3, [r5, #8]
 800daa8:	4598      	cmp	r8, r3
 800daaa:	d265      	bcs.n	800db78 <rclc_executor_spin_some.part.0+0x2fc>
 800daac:	686a      	ldr	r2, [r5, #4]
 800daae:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800dab2:	4631      	mov	r1, r6
 800dab4:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800dab8:	f108 0801 	add.w	r8, r8, #1
 800dabc:	f1bc 0f00 	cmp.w	ip, #0
 800dac0:	d1eb      	bne.n	800da9a <rclc_executor_spin_some.part.0+0x21e>
 800dac2:	4619      	mov	r1, r3
 800dac4:	4610      	mov	r0, r2
 800dac6:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800daca:	4798      	blx	r3
 800dacc:	2800      	cmp	r0, #0
 800dace:	d0d9      	beq.n	800da84 <rclc_executor_spin_some.part.0+0x208>
 800dad0:	68ab      	ldr	r3, [r5, #8]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d0d6      	beq.n	800da84 <rclc_executor_spin_some.part.0+0x208>
 800dad6:	f04f 0800 	mov.w	r8, #0
 800dada:	f240 1991 	movw	r9, #401	@ 0x191
 800dade:	f240 2a59 	movw	sl, #601	@ 0x259
 800dae2:	e00e      	b.n	800db02 <rclc_executor_spin_some.part.0+0x286>
 800dae4:	f813 300b 	ldrb.w	r3, [r3, fp]
 800dae8:	2b08      	cmp	r3, #8
 800daea:	d033      	beq.n	800db54 <rclc_executor_spin_some.part.0+0x2d8>
 800daec:	2b09      	cmp	r3, #9
 800daee:	d028      	beq.n	800db42 <rclc_executor_spin_some.part.0+0x2c6>
 800daf0:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800daf4:	b9fb      	cbnz	r3, 800db36 <rclc_executor_spin_some.part.0+0x2ba>
 800daf6:	68ab      	ldr	r3, [r5, #8]
 800daf8:	f108 0801 	add.w	r8, r8, #1
 800dafc:	4598      	cmp	r8, r3
 800dafe:	d2b7      	bcs.n	800da70 <rclc_executor_spin_some.part.0+0x1f4>
 800db00:	2400      	movs	r4, #0
 800db02:	6868      	ldr	r0, [r5, #4]
 800db04:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800db08:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800db0c:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800db10:	2b00      	cmp	r3, #0
 800db12:	d0b7      	beq.n	800da84 <rclc_executor_spin_some.part.0+0x208>
 800db14:	4631      	mov	r1, r6
 800db16:	f7ff fa8d 	bl	800d034 <_rclc_take_new_data>
 800db1a:	b118      	cbz	r0, 800db24 <rclc_executor_spin_some.part.0+0x2a8>
 800db1c:	4548      	cmp	r0, r9
 800db1e:	d001      	beq.n	800db24 <rclc_executor_spin_some.part.0+0x2a8>
 800db20:	4550      	cmp	r0, sl
 800db22:	d10c      	bne.n	800db3e <rclc_executor_spin_some.part.0+0x2c2>
 800db24:	686b      	ldr	r3, [r5, #4]
 800db26:	eb13 000b 	adds.w	r0, r3, fp
 800db2a:	d021      	beq.n	800db70 <rclc_executor_spin_some.part.0+0x2f4>
 800db2c:	7842      	ldrb	r2, [r0, #1]
 800db2e:	2a00      	cmp	r2, #0
 800db30:	d0d8      	beq.n	800dae4 <rclc_executor_spin_some.part.0+0x268>
 800db32:	2a01      	cmp	r2, #1
 800db34:	d1df      	bne.n	800daf6 <rclc_executor_spin_some.part.0+0x27a>
 800db36:	f7ff fbf1 	bl	800d31c <_rclc_execute.part.0>
 800db3a:	2800      	cmp	r0, #0
 800db3c:	d0db      	beq.n	800daf6 <rclc_executor_spin_some.part.0+0x27a>
 800db3e:	4607      	mov	r7, r0
 800db40:	e796      	b.n	800da70 <rclc_executor_spin_some.part.0+0x1f4>
 800db42:	6843      	ldr	r3, [r0, #4]
 800db44:	6a1a      	ldr	r2, [r3, #32]
 800db46:	2a00      	cmp	r2, #0
 800db48:	d1f5      	bne.n	800db36 <rclc_executor_spin_some.part.0+0x2ba>
 800db4a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d0d1      	beq.n	800daf6 <rclc_executor_spin_some.part.0+0x27a>
 800db52:	e7f0      	b.n	800db36 <rclc_executor_spin_some.part.0+0x2ba>
 800db54:	6843      	ldr	r3, [r0, #4]
 800db56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800db58:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800db5c:	d1eb      	bne.n	800db36 <rclc_executor_spin_some.part.0+0x2ba>
 800db5e:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800db62:	2a00      	cmp	r2, #0
 800db64:	d1e7      	bne.n	800db36 <rclc_executor_spin_some.part.0+0x2ba>
 800db66:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d0c3      	beq.n	800daf6 <rclc_executor_spin_some.part.0+0x27a>
 800db6e:	e7e2      	b.n	800db36 <rclc_executor_spin_some.part.0+0x2ba>
 800db70:	270b      	movs	r7, #11
 800db72:	e77d      	b.n	800da70 <rclc_executor_spin_some.part.0+0x1f4>
 800db74:	686a      	ldr	r2, [r5, #4]
 800db76:	e6e2      	b.n	800d93e <rclc_executor_spin_some.part.0+0xc2>
 800db78:	686a      	ldr	r2, [r5, #4]
 800db7a:	e7a2      	b.n	800dac2 <rclc_executor_spin_some.part.0+0x246>
 800db7c:	6842      	ldr	r2, [r0, #4]
 800db7e:	6a11      	ldr	r1, [r2, #32]
 800db80:	2900      	cmp	r1, #0
 800db82:	f47f af21 	bne.w	800d9c8 <rclc_executor_spin_some.part.0+0x14c>
 800db86:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800db8a:	2a00      	cmp	r2, #0
 800db8c:	f43f af0a 	beq.w	800d9a4 <rclc_executor_spin_some.part.0+0x128>
 800db90:	e71a      	b.n	800d9c8 <rclc_executor_spin_some.part.0+0x14c>
 800db92:	6842      	ldr	r2, [r0, #4]
 800db94:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800db96:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800db9a:	f47f af15 	bne.w	800d9c8 <rclc_executor_spin_some.part.0+0x14c>
 800db9e:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800dba2:	2900      	cmp	r1, #0
 800dba4:	f47f af10 	bne.w	800d9c8 <rclc_executor_spin_some.part.0+0x14c>
 800dba8:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800dbac:	2a00      	cmp	r2, #0
 800dbae:	f43f aef9 	beq.w	800d9a4 <rclc_executor_spin_some.part.0+0x128>
 800dbb2:	e709      	b.n	800d9c8 <rclc_executor_spin_some.part.0+0x14c>
 800dbb4:	686a      	ldr	r2, [r5, #4]
 800dbb6:	461c      	mov	r4, r3
 800dbb8:	e783      	b.n	800dac2 <rclc_executor_spin_some.part.0+0x246>
 800dbba:	686a      	ldr	r2, [r5, #4]
 800dbbc:	461c      	mov	r4, r3
 800dbbe:	e6be      	b.n	800d93e <rclc_executor_spin_some.part.0+0xc2>

0800dbc0 <rclc_executor_spin>:
 800dbc0:	b1d0      	cbz	r0, 800dbf8 <rclc_executor_spin+0x38>
 800dbc2:	b510      	push	{r4, lr}
 800dbc4:	4604      	mov	r4, r0
 800dbc6:	b082      	sub	sp, #8
 800dbc8:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 800dbcc:	6820      	ldr	r0, [r4, #0]
 800dbce:	e9cd 2300 	strd	r2, r3, [sp]
 800dbd2:	f006 f90d 	bl	8013df0 <rcl_context_is_valid>
 800dbd6:	4601      	mov	r1, r0
 800dbd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dbdc:	4620      	mov	r0, r4
 800dbde:	b131      	cbz	r1, 800dbee <rclc_executor_spin+0x2e>
 800dbe0:	f7ff fe4c 	bl	800d87c <rclc_executor_spin_some.part.0>
 800dbe4:	f030 0302 	bics.w	r3, r0, #2
 800dbe8:	d0ee      	beq.n	800dbc8 <rclc_executor_spin+0x8>
 800dbea:	b002      	add	sp, #8
 800dbec:	bd10      	pop	{r4, pc}
 800dbee:	f000 f997 	bl	800df20 <rcutils_reset_error>
 800dbf2:	2001      	movs	r0, #1
 800dbf4:	b002      	add	sp, #8
 800dbf6:	bd10      	pop	{r4, pc}
 800dbf8:	200b      	movs	r0, #11
 800dbfa:	4770      	bx	lr

0800dbfc <rclc_executor_handle_counters_zero_init>:
 800dbfc:	b130      	cbz	r0, 800dc0c <rclc_executor_handle_counters_zero_init+0x10>
 800dbfe:	b508      	push	{r3, lr}
 800dc00:	2220      	movs	r2, #32
 800dc02:	2100      	movs	r1, #0
 800dc04:	f00c f81e 	bl	8019c44 <memset>
 800dc08:	2000      	movs	r0, #0
 800dc0a:	bd08      	pop	{r3, pc}
 800dc0c:	200b      	movs	r0, #11
 800dc0e:	4770      	bx	lr

0800dc10 <rclc_executor_handle_init>:
 800dc10:	b168      	cbz	r0, 800dc2e <rclc_executor_handle_init+0x1e>
 800dc12:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800dc38 <rclc_executor_handle_init+0x28>
 800dc16:	2300      	movs	r3, #0
 800dc18:	220b      	movs	r2, #11
 800dc1a:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800dc1e:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800dc22:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800dc26:	8002      	strh	r2, [r0, #0]
 800dc28:	8703      	strh	r3, [r0, #56]	@ 0x38
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	4770      	bx	lr
 800dc2e:	200b      	movs	r0, #11
 800dc30:	4770      	bx	lr
 800dc32:	bf00      	nop
 800dc34:	f3af 8000 	nop.w
	...

0800dc40 <rclc_support_init_with_options>:
 800dc40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dc44:	b083      	sub	sp, #12
 800dc46:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800dc48:	b340      	cbz	r0, 800dc9c <rclc_support_init_with_options+0x5c>
 800dc4a:	461d      	mov	r5, r3
 800dc4c:	b333      	cbz	r3, 800dc9c <rclc_support_init_with_options+0x5c>
 800dc4e:	b32e      	cbz	r6, 800dc9c <rclc_support_init_with_options+0x5c>
 800dc50:	46e9      	mov	r9, sp
 800dc52:	4604      	mov	r4, r0
 800dc54:	4648      	mov	r0, r9
 800dc56:	460f      	mov	r7, r1
 800dc58:	4690      	mov	r8, r2
 800dc5a:	f006 f8bf 	bl	8013ddc <rcl_get_zero_initialized_context>
 800dc5e:	e899 0003 	ldmia.w	r9, {r0, r1}
 800dc62:	462a      	mov	r2, r5
 800dc64:	e884 0003 	stmia.w	r4, {r0, r1}
 800dc68:	4623      	mov	r3, r4
 800dc6a:	4641      	mov	r1, r8
 800dc6c:	4638      	mov	r0, r7
 800dc6e:	f006 f925 	bl	8013ebc <rcl_init>
 800dc72:	4605      	mov	r5, r0
 800dc74:	b960      	cbnz	r0, 800dc90 <rclc_support_init_with_options+0x50>
 800dc76:	60a6      	str	r6, [r4, #8]
 800dc78:	4632      	mov	r2, r6
 800dc7a:	f104 010c 	add.w	r1, r4, #12
 800dc7e:	2003      	movs	r0, #3
 800dc80:	f006 ff24 	bl	8014acc <rcl_clock_init>
 800dc84:	4605      	mov	r5, r0
 800dc86:	b918      	cbnz	r0, 800dc90 <rclc_support_init_with_options+0x50>
 800dc88:	4628      	mov	r0, r5
 800dc8a:	b003      	add	sp, #12
 800dc8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc90:	f000 f946 	bl	800df20 <rcutils_reset_error>
 800dc94:	4628      	mov	r0, r5
 800dc96:	b003      	add	sp, #12
 800dc98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc9c:	250b      	movs	r5, #11
 800dc9e:	4628      	mov	r0, r5
 800dca0:	b003      	add	sp, #12
 800dca2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dca6:	bf00      	nop

0800dca8 <rclc_node_init_default>:
 800dca8:	b3b8      	cbz	r0, 800dd1a <rclc_node_init_default+0x72>
 800dcaa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dcae:	460d      	mov	r5, r1
 800dcb0:	b0a1      	sub	sp, #132	@ 0x84
 800dcb2:	b329      	cbz	r1, 800dd00 <rclc_node_init_default+0x58>
 800dcb4:	4616      	mov	r6, r2
 800dcb6:	b31a      	cbz	r2, 800dd00 <rclc_node_init_default+0x58>
 800dcb8:	461f      	mov	r7, r3
 800dcba:	b30b      	cbz	r3, 800dd00 <rclc_node_init_default+0x58>
 800dcbc:	f10d 0810 	add.w	r8, sp, #16
 800dcc0:	4604      	mov	r4, r0
 800dcc2:	4640      	mov	r0, r8
 800dcc4:	f006 fa20 	bl	8014108 <rcl_get_zero_initialized_node>
 800dcc8:	e898 0003 	ldmia.w	r8, {r0, r1}
 800dccc:	f10d 0918 	add.w	r9, sp, #24
 800dcd0:	e884 0003 	stmia.w	r4, {r0, r1}
 800dcd4:	4648      	mov	r0, r9
 800dcd6:	f006 fb8f 	bl	80143f8 <rcl_node_get_default_options>
 800dcda:	4640      	mov	r0, r8
 800dcdc:	f006 fa14 	bl	8014108 <rcl_get_zero_initialized_node>
 800dce0:	f8cd 9000 	str.w	r9, [sp]
 800dce4:	e898 0003 	ldmia.w	r8, {r0, r1}
 800dce8:	463b      	mov	r3, r7
 800dcea:	e884 0003 	stmia.w	r4, {r0, r1}
 800dcee:	4632      	mov	r2, r6
 800dcf0:	4629      	mov	r1, r5
 800dcf2:	4620      	mov	r0, r4
 800dcf4:	f006 fa12 	bl	801411c <rcl_node_init>
 800dcf8:	b930      	cbnz	r0, 800dd08 <rclc_node_init_default+0x60>
 800dcfa:	b021      	add	sp, #132	@ 0x84
 800dcfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd00:	200b      	movs	r0, #11
 800dd02:	b021      	add	sp, #132	@ 0x84
 800dd04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd08:	9003      	str	r0, [sp, #12]
 800dd0a:	f000 f909 	bl	800df20 <rcutils_reset_error>
 800dd0e:	f000 f907 	bl	800df20 <rcutils_reset_error>
 800dd12:	9803      	ldr	r0, [sp, #12]
 800dd14:	b021      	add	sp, #132	@ 0x84
 800dd16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd1a:	200b      	movs	r0, #11
 800dd1c:	4770      	bx	lr
 800dd1e:	bf00      	nop

0800dd20 <rclc_publisher_init_best_effort>:
 800dd20:	b368      	cbz	r0, 800dd7e <rclc_publisher_init_best_effort+0x5e>
 800dd22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd26:	460d      	mov	r5, r1
 800dd28:	b0a0      	sub	sp, #128	@ 0x80
 800dd2a:	b321      	cbz	r1, 800dd76 <rclc_publisher_init_best_effort+0x56>
 800dd2c:	4616      	mov	r6, r2
 800dd2e:	b312      	cbz	r2, 800dd76 <rclc_publisher_init_best_effort+0x56>
 800dd30:	461f      	mov	r7, r3
 800dd32:	b303      	cbz	r3, 800dd76 <rclc_publisher_init_best_effort+0x56>
 800dd34:	4604      	mov	r4, r0
 800dd36:	f7ff f81f 	bl	800cd78 <rcl_get_zero_initialized_publisher>
 800dd3a:	f10d 0810 	add.w	r8, sp, #16
 800dd3e:	6020      	str	r0, [r4, #0]
 800dd40:	4640      	mov	r0, r8
 800dd42:	f7ff f8b5 	bl	800ceb0 <rcl_publisher_get_default_options>
 800dd46:	490f      	ldr	r1, [pc, #60]	@ (800dd84 <rclc_publisher_init_best_effort+0x64>)
 800dd48:	2250      	movs	r2, #80	@ 0x50
 800dd4a:	4640      	mov	r0, r8
 800dd4c:	f00c f843 	bl	8019dd6 <memcpy>
 800dd50:	f8cd 8000 	str.w	r8, [sp]
 800dd54:	463b      	mov	r3, r7
 800dd56:	4632      	mov	r2, r6
 800dd58:	4629      	mov	r1, r5
 800dd5a:	4620      	mov	r0, r4
 800dd5c:	f7ff f812 	bl	800cd84 <rcl_publisher_init>
 800dd60:	b910      	cbnz	r0, 800dd68 <rclc_publisher_init_best_effort+0x48>
 800dd62:	b020      	add	sp, #128	@ 0x80
 800dd64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd68:	9003      	str	r0, [sp, #12]
 800dd6a:	f000 f8d9 	bl	800df20 <rcutils_reset_error>
 800dd6e:	9803      	ldr	r0, [sp, #12]
 800dd70:	b020      	add	sp, #128	@ 0x80
 800dd72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd76:	200b      	movs	r0, #11
 800dd78:	b020      	add	sp, #128	@ 0x80
 800dd7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd7e:	200b      	movs	r0, #11
 800dd80:	4770      	bx	lr
 800dd82:	bf00      	nop
 800dd84:	0801bcb8 	.word	0x0801bcb8

0800dd88 <rclc_service_init_default>:
 800dd88:	b368      	cbz	r0, 800dde6 <rclc_service_init_default+0x5e>
 800dd8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd8e:	460d      	mov	r5, r1
 800dd90:	b09e      	sub	sp, #120	@ 0x78
 800dd92:	b321      	cbz	r1, 800ddde <rclc_service_init_default+0x56>
 800dd94:	4616      	mov	r6, r2
 800dd96:	b312      	cbz	r2, 800ddde <rclc_service_init_default+0x56>
 800dd98:	461f      	mov	r7, r3
 800dd9a:	b303      	cbz	r3, 800ddde <rclc_service_init_default+0x56>
 800dd9c:	4604      	mov	r4, r0
 800dd9e:	f006 fcfb 	bl	8014798 <rcl_get_zero_initialized_service>
 800dda2:	f10d 0810 	add.w	r8, sp, #16
 800dda6:	6020      	str	r0, [r4, #0]
 800dda8:	4640      	mov	r0, r8
 800ddaa:	f006 fd83 	bl	80148b4 <rcl_service_get_default_options>
 800ddae:	490f      	ldr	r1, [pc, #60]	@ (800ddec <rclc_service_init_default+0x64>)
 800ddb0:	2250      	movs	r2, #80	@ 0x50
 800ddb2:	4640      	mov	r0, r8
 800ddb4:	f00c f80f 	bl	8019dd6 <memcpy>
 800ddb8:	f8cd 8000 	str.w	r8, [sp]
 800ddbc:	463b      	mov	r3, r7
 800ddbe:	4632      	mov	r2, r6
 800ddc0:	4629      	mov	r1, r5
 800ddc2:	4620      	mov	r0, r4
 800ddc4:	f006 fcee 	bl	80147a4 <rcl_service_init>
 800ddc8:	b910      	cbnz	r0, 800ddd0 <rclc_service_init_default+0x48>
 800ddca:	b01e      	add	sp, #120	@ 0x78
 800ddcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddd0:	9003      	str	r0, [sp, #12]
 800ddd2:	f000 f8a5 	bl	800df20 <rcutils_reset_error>
 800ddd6:	9803      	ldr	r0, [sp, #12]
 800ddd8:	b01e      	add	sp, #120	@ 0x78
 800ddda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddde:	200b      	movs	r0, #11
 800dde0:	b01e      	add	sp, #120	@ 0x78
 800dde2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dde6:	200b      	movs	r0, #11
 800dde8:	4770      	bx	lr
 800ddea:	bf00      	nop
 800ddec:	0801bd08 	.word	0x0801bd08

0800ddf0 <rclc_timer_init_default>:
 800ddf0:	b360      	cbz	r0, 800de4c <rclc_timer_init_default+0x5c>
 800ddf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddf6:	460e      	mov	r6, r1
 800ddf8:	b08a      	sub	sp, #40	@ 0x28
 800ddfa:	b319      	cbz	r1, 800de44 <rclc_timer_init_default+0x54>
 800ddfc:	4690      	mov	r8, r2
 800ddfe:	461f      	mov	r7, r3
 800de00:	4605      	mov	r5, r0
 800de02:	f007 f841 	bl	8014e88 <rcl_get_zero_initialized_timer>
 800de06:	68b4      	ldr	r4, [r6, #8]
 800de08:	6028      	str	r0, [r5, #0]
 800de0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800de0c:	f10d 0c0c 	add.w	ip, sp, #12
 800de10:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800de14:	6823      	ldr	r3, [r4, #0]
 800de16:	f8cc 3000 	str.w	r3, [ip]
 800de1a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800de1c:	9302      	str	r3, [sp, #8]
 800de1e:	e9cd 8700 	strd	r8, r7, [sp]
 800de22:	4628      	mov	r0, r5
 800de24:	4632      	mov	r2, r6
 800de26:	f106 010c 	add.w	r1, r6, #12
 800de2a:	f007 f835 	bl	8014e98 <rcl_timer_init>
 800de2e:	b910      	cbnz	r0, 800de36 <rclc_timer_init_default+0x46>
 800de30:	b00a      	add	sp, #40	@ 0x28
 800de32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de36:	9009      	str	r0, [sp, #36]	@ 0x24
 800de38:	f000 f872 	bl	800df20 <rcutils_reset_error>
 800de3c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800de3e:	b00a      	add	sp, #40	@ 0x28
 800de40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de44:	200b      	movs	r0, #11
 800de46:	b00a      	add	sp, #40	@ 0x28
 800de48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de4c:	200b      	movs	r0, #11
 800de4e:	4770      	bx	lr

0800de50 <__default_zero_allocate>:
 800de50:	f00b ba0e 	b.w	8019270 <calloc>

0800de54 <__default_reallocate>:
 800de54:	f00b bbac 	b.w	80195b0 <realloc>

0800de58 <__default_deallocate>:
 800de58:	f00b ba88 	b.w	801936c <free>

0800de5c <__default_allocate>:
 800de5c:	f00b ba7e 	b.w	801935c <malloc>

0800de60 <rcutils_get_zero_initialized_allocator>:
 800de60:	b510      	push	{r4, lr}
 800de62:	4c05      	ldr	r4, [pc, #20]	@ (800de78 <rcutils_get_zero_initialized_allocator+0x18>)
 800de64:	4686      	mov	lr, r0
 800de66:	4684      	mov	ip, r0
 800de68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800de6a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800de6e:	6823      	ldr	r3, [r4, #0]
 800de70:	f8cc 3000 	str.w	r3, [ip]
 800de74:	4670      	mov	r0, lr
 800de76:	bd10      	pop	{r4, pc}
 800de78:	0801bd58 	.word	0x0801bd58

0800de7c <rcutils_set_default_allocator>:
 800de7c:	b1a8      	cbz	r0, 800deaa <rcutils_set_default_allocator+0x2e>
 800de7e:	6802      	ldr	r2, [r0, #0]
 800de80:	b1a2      	cbz	r2, 800deac <rcutils_set_default_allocator+0x30>
 800de82:	6841      	ldr	r1, [r0, #4]
 800de84:	b1a1      	cbz	r1, 800deb0 <rcutils_set_default_allocator+0x34>
 800de86:	b410      	push	{r4}
 800de88:	68c4      	ldr	r4, [r0, #12]
 800de8a:	b164      	cbz	r4, 800dea6 <rcutils_set_default_allocator+0x2a>
 800de8c:	6880      	ldr	r0, [r0, #8]
 800de8e:	b138      	cbz	r0, 800dea0 <rcutils_set_default_allocator+0x24>
 800de90:	4b08      	ldr	r3, [pc, #32]	@ (800deb4 <rcutils_set_default_allocator+0x38>)
 800de92:	601a      	str	r2, [r3, #0]
 800de94:	2200      	movs	r2, #0
 800de96:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800de9a:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800de9e:	2001      	movs	r0, #1
 800dea0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dea4:	4770      	bx	lr
 800dea6:	4620      	mov	r0, r4
 800dea8:	e7fa      	b.n	800dea0 <rcutils_set_default_allocator+0x24>
 800deaa:	4770      	bx	lr
 800deac:	4610      	mov	r0, r2
 800deae:	4770      	bx	lr
 800deb0:	4608      	mov	r0, r1
 800deb2:	4770      	bx	lr
 800deb4:	200004fc 	.word	0x200004fc

0800deb8 <rcutils_get_default_allocator>:
 800deb8:	b510      	push	{r4, lr}
 800deba:	4c05      	ldr	r4, [pc, #20]	@ (800ded0 <rcutils_get_default_allocator+0x18>)
 800debc:	4686      	mov	lr, r0
 800debe:	4684      	mov	ip, r0
 800dec0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dec2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dec6:	6823      	ldr	r3, [r4, #0]
 800dec8:	f8cc 3000 	str.w	r3, [ip]
 800decc:	4670      	mov	r0, lr
 800dece:	bd10      	pop	{r4, pc}
 800ded0:	200004fc 	.word	0x200004fc

0800ded4 <rcutils_allocator_is_valid>:
 800ded4:	b158      	cbz	r0, 800deee <rcutils_allocator_is_valid+0x1a>
 800ded6:	6803      	ldr	r3, [r0, #0]
 800ded8:	b143      	cbz	r3, 800deec <rcutils_allocator_is_valid+0x18>
 800deda:	6843      	ldr	r3, [r0, #4]
 800dedc:	b133      	cbz	r3, 800deec <rcutils_allocator_is_valid+0x18>
 800dede:	68c3      	ldr	r3, [r0, #12]
 800dee0:	b123      	cbz	r3, 800deec <rcutils_allocator_is_valid+0x18>
 800dee2:	6880      	ldr	r0, [r0, #8]
 800dee4:	3800      	subs	r0, #0
 800dee6:	bf18      	it	ne
 800dee8:	2001      	movne	r0, #1
 800deea:	4770      	bx	lr
 800deec:	4618      	mov	r0, r3
 800deee:	4770      	bx	lr

0800def0 <rcutils_get_error_string>:
 800def0:	4b06      	ldr	r3, [pc, #24]	@ (800df0c <rcutils_get_error_string+0x1c>)
 800def2:	781b      	ldrb	r3, [r3, #0]
 800def4:	b13b      	cbz	r3, 800df06 <rcutils_get_error_string+0x16>
 800def6:	4b06      	ldr	r3, [pc, #24]	@ (800df10 <rcutils_get_error_string+0x20>)
 800def8:	781a      	ldrb	r2, [r3, #0]
 800defa:	b90a      	cbnz	r2, 800df00 <rcutils_get_error_string+0x10>
 800defc:	2201      	movs	r2, #1
 800defe:	701a      	strb	r2, [r3, #0]
 800df00:	4b04      	ldr	r3, [pc, #16]	@ (800df14 <rcutils_get_error_string+0x24>)
 800df02:	7818      	ldrb	r0, [r3, #0]
 800df04:	4770      	bx	lr
 800df06:	4b04      	ldr	r3, [pc, #16]	@ (800df18 <rcutils_get_error_string+0x28>)
 800df08:	7818      	ldrb	r0, [r3, #0]
 800df0a:	4770      	bx	lr
 800df0c:	20006ec8 	.word	0x20006ec8
 800df10:	20006ee1 	.word	0x20006ee1
 800df14:	20006ee0 	.word	0x20006ee0
 800df18:	0801b5e8 	.word	0x0801b5e8
 800df1c:	00000000 	.word	0x00000000

0800df20 <rcutils_reset_error>:
 800df20:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800df40 <rcutils_reset_error+0x20>
 800df24:	4a08      	ldr	r2, [pc, #32]	@ (800df48 <rcutils_reset_error+0x28>)
 800df26:	4809      	ldr	r0, [pc, #36]	@ (800df4c <rcutils_reset_error+0x2c>)
 800df28:	4909      	ldr	r1, [pc, #36]	@ (800df50 <rcutils_reset_error+0x30>)
 800df2a:	2300      	movs	r3, #0
 800df2c:	8013      	strh	r3, [r2, #0]
 800df2e:	ed82 7b02 	vstr	d7, [r2, #8]
 800df32:	4a08      	ldr	r2, [pc, #32]	@ (800df54 <rcutils_reset_error+0x34>)
 800df34:	7003      	strb	r3, [r0, #0]
 800df36:	700b      	strb	r3, [r1, #0]
 800df38:	7013      	strb	r3, [r2, #0]
 800df3a:	4770      	bx	lr
 800df3c:	f3af 8000 	nop.w
	...
 800df48:	20006ed0 	.word	0x20006ed0
 800df4c:	20006ee1 	.word	0x20006ee1
 800df50:	20006ee0 	.word	0x20006ee0
 800df54:	20006ec8 	.word	0x20006ec8

0800df58 <rcutils_system_time_now>:
 800df58:	b308      	cbz	r0, 800df9e <rcutils_system_time_now+0x46>
 800df5a:	b570      	push	{r4, r5, r6, lr}
 800df5c:	b084      	sub	sp, #16
 800df5e:	4604      	mov	r4, r0
 800df60:	4669      	mov	r1, sp
 800df62:	2001      	movs	r0, #1
 800df64:	f7f4 fc74 	bl	8002850 <clock_gettime>
 800df68:	e9dd 3500 	ldrd	r3, r5, [sp]
 800df6c:	2d00      	cmp	r5, #0
 800df6e:	db13      	blt.n	800df98 <rcutils_system_time_now+0x40>
 800df70:	9902      	ldr	r1, [sp, #8]
 800df72:	2900      	cmp	r1, #0
 800df74:	db0d      	blt.n	800df92 <rcutils_system_time_now+0x3a>
 800df76:	4e0b      	ldr	r6, [pc, #44]	@ (800dfa4 <rcutils_system_time_now+0x4c>)
 800df78:	fba3 3206 	umull	r3, r2, r3, r6
 800df7c:	185b      	adds	r3, r3, r1
 800df7e:	fb06 2205 	mla	r2, r6, r5, r2
 800df82:	f04f 0000 	mov.w	r0, #0
 800df86:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800df8a:	e9c4 3200 	strd	r3, r2, [r4]
 800df8e:	b004      	add	sp, #16
 800df90:	bd70      	pop	{r4, r5, r6, pc}
 800df92:	ea53 0205 	orrs.w	r2, r3, r5
 800df96:	d1ee      	bne.n	800df76 <rcutils_system_time_now+0x1e>
 800df98:	2002      	movs	r0, #2
 800df9a:	b004      	add	sp, #16
 800df9c:	bd70      	pop	{r4, r5, r6, pc}
 800df9e:	200b      	movs	r0, #11
 800dfa0:	4770      	bx	lr
 800dfa2:	bf00      	nop
 800dfa4:	3b9aca00 	.word	0x3b9aca00

0800dfa8 <rcutils_steady_time_now>:
 800dfa8:	b308      	cbz	r0, 800dfee <rcutils_steady_time_now+0x46>
 800dfaa:	b570      	push	{r4, r5, r6, lr}
 800dfac:	b084      	sub	sp, #16
 800dfae:	4604      	mov	r4, r0
 800dfb0:	4669      	mov	r1, sp
 800dfb2:	2000      	movs	r0, #0
 800dfb4:	f7f4 fc4c 	bl	8002850 <clock_gettime>
 800dfb8:	e9dd 3500 	ldrd	r3, r5, [sp]
 800dfbc:	2d00      	cmp	r5, #0
 800dfbe:	db13      	blt.n	800dfe8 <rcutils_steady_time_now+0x40>
 800dfc0:	9902      	ldr	r1, [sp, #8]
 800dfc2:	2900      	cmp	r1, #0
 800dfc4:	db0d      	blt.n	800dfe2 <rcutils_steady_time_now+0x3a>
 800dfc6:	4e0b      	ldr	r6, [pc, #44]	@ (800dff4 <rcutils_steady_time_now+0x4c>)
 800dfc8:	fba3 3206 	umull	r3, r2, r3, r6
 800dfcc:	185b      	adds	r3, r3, r1
 800dfce:	fb06 2205 	mla	r2, r6, r5, r2
 800dfd2:	f04f 0000 	mov.w	r0, #0
 800dfd6:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800dfda:	e9c4 3200 	strd	r3, r2, [r4]
 800dfde:	b004      	add	sp, #16
 800dfe0:	bd70      	pop	{r4, r5, r6, pc}
 800dfe2:	ea53 0205 	orrs.w	r2, r3, r5
 800dfe6:	d1ee      	bne.n	800dfc6 <rcutils_steady_time_now+0x1e>
 800dfe8:	2002      	movs	r0, #2
 800dfea:	b004      	add	sp, #16
 800dfec:	bd70      	pop	{r4, r5, r6, pc}
 800dfee:	200b      	movs	r0, #11
 800dff0:	4770      	bx	lr
 800dff2:	bf00      	nop
 800dff4:	3b9aca00 	.word	0x3b9aca00

0800dff8 <rmw_get_zero_initialized_init_options>:
 800dff8:	b510      	push	{r4, lr}
 800dffa:	2238      	movs	r2, #56	@ 0x38
 800dffc:	4604      	mov	r4, r0
 800dffe:	2100      	movs	r1, #0
 800e000:	f00b fe20 	bl	8019c44 <memset>
 800e004:	f104 0010 	add.w	r0, r4, #16
 800e008:	f000 f80a 	bl	800e020 <rmw_get_default_security_options>
 800e00c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e010:	60e3      	str	r3, [r4, #12]
 800e012:	4620      	mov	r0, r4
 800e014:	bd10      	pop	{r4, pc}
 800e016:	bf00      	nop

0800e018 <rmw_get_default_publisher_options>:
 800e018:	2200      	movs	r2, #0
 800e01a:	6002      	str	r2, [r0, #0]
 800e01c:	7102      	strb	r2, [r0, #4]
 800e01e:	4770      	bx	lr

0800e020 <rmw_get_default_security_options>:
 800e020:	2200      	movs	r2, #0
 800e022:	7002      	strb	r2, [r0, #0]
 800e024:	6042      	str	r2, [r0, #4]
 800e026:	4770      	bx	lr

0800e028 <rmw_uros_set_custom_transport>:
 800e028:	b470      	push	{r4, r5, r6}
 800e02a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800e02e:	b162      	cbz	r2, 800e04a <rmw_uros_set_custom_transport+0x22>
 800e030:	b15b      	cbz	r3, 800e04a <rmw_uros_set_custom_transport+0x22>
 800e032:	b155      	cbz	r5, 800e04a <rmw_uros_set_custom_transport+0x22>
 800e034:	b14e      	cbz	r6, 800e04a <rmw_uros_set_custom_transport+0x22>
 800e036:	4c06      	ldr	r4, [pc, #24]	@ (800e050 <rmw_uros_set_custom_transport+0x28>)
 800e038:	7020      	strb	r0, [r4, #0]
 800e03a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800e03e:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800e042:	6166      	str	r6, [r4, #20]
 800e044:	2000      	movs	r0, #0
 800e046:	bc70      	pop	{r4, r5, r6}
 800e048:	4770      	bx	lr
 800e04a:	200b      	movs	r0, #11
 800e04c:	bc70      	pop	{r4, r5, r6}
 800e04e:	4770      	bx	lr
 800e050:	20006ee4 	.word	0x20006ee4

0800e054 <rmw_init_options_init>:
 800e054:	b084      	sub	sp, #16
 800e056:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e058:	b083      	sub	sp, #12
 800e05a:	ad09      	add	r5, sp, #36	@ 0x24
 800e05c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800e060:	b130      	cbz	r0, 800e070 <rmw_init_options_init+0x1c>
 800e062:	4604      	mov	r4, r0
 800e064:	4628      	mov	r0, r5
 800e066:	f7ff ff35 	bl	800ded4 <rcutils_allocator_is_valid>
 800e06a:	b108      	cbz	r0, 800e070 <rmw_init_options_init+0x1c>
 800e06c:	68a6      	ldr	r6, [r4, #8]
 800e06e:	b12e      	cbz	r6, 800e07c <rmw_init_options_init+0x28>
 800e070:	200b      	movs	r0, #11
 800e072:	b003      	add	sp, #12
 800e074:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e078:	b004      	add	sp, #16
 800e07a:	4770      	bx	lr
 800e07c:	2200      	movs	r2, #0
 800e07e:	2300      	movs	r3, #0
 800e080:	e9c4 2300 	strd	r2, r3, [r4]
 800e084:	4b22      	ldr	r3, [pc, #136]	@ (800e110 <rmw_init_options_init+0xbc>)
 800e086:	f8df e098 	ldr.w	lr, [pc, #152]	@ 800e120 <rmw_init_options_init+0xcc>
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	60a3      	str	r3, [r4, #8]
 800e08e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e090:	f104 0c20 	add.w	ip, r4, #32
 800e094:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e098:	466f      	mov	r7, sp
 800e09a:	682b      	ldr	r3, [r5, #0]
 800e09c:	f8cc 3000 	str.w	r3, [ip]
 800e0a0:	4638      	mov	r0, r7
 800e0a2:	f8c4 e01c 	str.w	lr, [r4, #28]
 800e0a6:	60e6      	str	r6, [r4, #12]
 800e0a8:	f7ff ffba 	bl	800e020 <rmw_get_default_security_options>
 800e0ac:	e897 0003 	ldmia.w	r7, {r0, r1}
 800e0b0:	f104 0310 	add.w	r3, r4, #16
 800e0b4:	e883 0003 	stmia.w	r3, {r0, r1}
 800e0b8:	2203      	movs	r2, #3
 800e0ba:	4816      	ldr	r0, [pc, #88]	@ (800e114 <rmw_init_options_init+0xc0>)
 800e0bc:	4916      	ldr	r1, [pc, #88]	@ (800e118 <rmw_init_options_init+0xc4>)
 800e0be:	7626      	strb	r6, [r4, #24]
 800e0c0:	f000 ffbc 	bl	800f03c <rmw_uxrce_init_init_options_impl_memory>
 800e0c4:	4813      	ldr	r0, [pc, #76]	@ (800e114 <rmw_init_options_init+0xc0>)
 800e0c6:	f009 fa6b 	bl	80175a0 <get_memory>
 800e0ca:	b1f0      	cbz	r0, 800e10a <rmw_init_options_init+0xb6>
 800e0cc:	4a13      	ldr	r2, [pc, #76]	@ (800e11c <rmw_init_options_init+0xc8>)
 800e0ce:	6883      	ldr	r3, [r0, #8]
 800e0d0:	6851      	ldr	r1, [r2, #4]
 800e0d2:	7810      	ldrb	r0, [r2, #0]
 800e0d4:	6363      	str	r3, [r4, #52]	@ 0x34
 800e0d6:	7418      	strb	r0, [r3, #16]
 800e0d8:	6159      	str	r1, [r3, #20]
 800e0da:	68d1      	ldr	r1, [r2, #12]
 800e0dc:	61d9      	str	r1, [r3, #28]
 800e0de:	6911      	ldr	r1, [r2, #16]
 800e0e0:	6219      	str	r1, [r3, #32]
 800e0e2:	6951      	ldr	r1, [r2, #20]
 800e0e4:	6892      	ldr	r2, [r2, #8]
 800e0e6:	619a      	str	r2, [r3, #24]
 800e0e8:	6259      	str	r1, [r3, #36]	@ 0x24
 800e0ea:	f004 fc57 	bl	801299c <uxr_nanos>
 800e0ee:	f00b f9f3 	bl	80194d8 <srand>
 800e0f2:	f00b fa1f 	bl	8019534 <rand>
 800e0f6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e0f8:	6298      	str	r0, [r3, #40]	@ 0x28
 800e0fa:	2800      	cmp	r0, #0
 800e0fc:	d0f9      	beq.n	800e0f2 <rmw_init_options_init+0x9e>
 800e0fe:	2000      	movs	r0, #0
 800e100:	b003      	add	sp, #12
 800e102:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e106:	b004      	add	sp, #16
 800e108:	4770      	bx	lr
 800e10a:	2001      	movs	r0, #1
 800e10c:	e7b1      	b.n	800e072 <rmw_init_options_init+0x1e>
 800e10e:	bf00      	nop
 800e110:	0801c850 	.word	0x0801c850
 800e114:	2000ba04 	.word	0x2000ba04
 800e118:	200071d8 	.word	0x200071d8
 800e11c:	20006ee4 	.word	0x20006ee4
 800e120:	0801bd6c 	.word	0x0801bd6c

0800e124 <rmw_init_options_copy>:
 800e124:	b570      	push	{r4, r5, r6, lr}
 800e126:	b158      	cbz	r0, 800e140 <rmw_init_options_copy+0x1c>
 800e128:	460d      	mov	r5, r1
 800e12a:	b149      	cbz	r1, 800e140 <rmw_init_options_copy+0x1c>
 800e12c:	4604      	mov	r4, r0
 800e12e:	6880      	ldr	r0, [r0, #8]
 800e130:	b120      	cbz	r0, 800e13c <rmw_init_options_copy+0x18>
 800e132:	4b1e      	ldr	r3, [pc, #120]	@ (800e1ac <rmw_init_options_copy+0x88>)
 800e134:	6819      	ldr	r1, [r3, #0]
 800e136:	f7f2 f873 	bl	8000220 <strcmp>
 800e13a:	bb90      	cbnz	r0, 800e1a2 <rmw_init_options_copy+0x7e>
 800e13c:	68ab      	ldr	r3, [r5, #8]
 800e13e:	b113      	cbz	r3, 800e146 <rmw_init_options_copy+0x22>
 800e140:	250b      	movs	r5, #11
 800e142:	4628      	mov	r0, r5
 800e144:	bd70      	pop	{r4, r5, r6, pc}
 800e146:	4623      	mov	r3, r4
 800e148:	462a      	mov	r2, r5
 800e14a:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800e14e:	f8d3 c000 	ldr.w	ip, [r3]
 800e152:	6858      	ldr	r0, [r3, #4]
 800e154:	6899      	ldr	r1, [r3, #8]
 800e156:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800e15a:	f8c2 e00c 	str.w	lr, [r2, #12]
 800e15e:	3310      	adds	r3, #16
 800e160:	42b3      	cmp	r3, r6
 800e162:	f8c2 c000 	str.w	ip, [r2]
 800e166:	6050      	str	r0, [r2, #4]
 800e168:	6091      	str	r1, [r2, #8]
 800e16a:	f102 0210 	add.w	r2, r2, #16
 800e16e:	d1ee      	bne.n	800e14e <rmw_init_options_copy+0x2a>
 800e170:	6819      	ldr	r1, [r3, #0]
 800e172:	685b      	ldr	r3, [r3, #4]
 800e174:	480e      	ldr	r0, [pc, #56]	@ (800e1b0 <rmw_init_options_copy+0x8c>)
 800e176:	6053      	str	r3, [r2, #4]
 800e178:	6011      	str	r1, [r2, #0]
 800e17a:	f009 fa11 	bl	80175a0 <get_memory>
 800e17e:	b198      	cbz	r0, 800e1a8 <rmw_init_options_copy+0x84>
 800e180:	6883      	ldr	r3, [r0, #8]
 800e182:	636b      	str	r3, [r5, #52]	@ 0x34
 800e184:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800e186:	f102 0c10 	add.w	ip, r2, #16
 800e18a:	f103 0410 	add.w	r4, r3, #16
 800e18e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e192:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e194:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800e198:	2500      	movs	r5, #0
 800e19a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e19e:	4628      	mov	r0, r5
 800e1a0:	bd70      	pop	{r4, r5, r6, pc}
 800e1a2:	250c      	movs	r5, #12
 800e1a4:	4628      	mov	r0, r5
 800e1a6:	bd70      	pop	{r4, r5, r6, pc}
 800e1a8:	2501      	movs	r5, #1
 800e1aa:	e7ca      	b.n	800e142 <rmw_init_options_copy+0x1e>
 800e1ac:	0801c850 	.word	0x0801c850
 800e1b0:	2000ba04 	.word	0x2000ba04

0800e1b4 <rmw_init_options_fini>:
 800e1b4:	2800      	cmp	r0, #0
 800e1b6:	d03d      	beq.n	800e234 <rmw_init_options_fini+0x80>
 800e1b8:	b510      	push	{r4, lr}
 800e1ba:	4604      	mov	r4, r0
 800e1bc:	b08e      	sub	sp, #56	@ 0x38
 800e1be:	3020      	adds	r0, #32
 800e1c0:	f7ff fe88 	bl	800ded4 <rcutils_allocator_is_valid>
 800e1c4:	b360      	cbz	r0, 800e220 <rmw_init_options_fini+0x6c>
 800e1c6:	68a0      	ldr	r0, [r4, #8]
 800e1c8:	b120      	cbz	r0, 800e1d4 <rmw_init_options_fini+0x20>
 800e1ca:	4b1c      	ldr	r3, [pc, #112]	@ (800e23c <rmw_init_options_fini+0x88>)
 800e1cc:	6819      	ldr	r1, [r3, #0]
 800e1ce:	f7f2 f827 	bl	8000220 <strcmp>
 800e1d2:	bb68      	cbnz	r0, 800e230 <rmw_init_options_fini+0x7c>
 800e1d4:	4b1a      	ldr	r3, [pc, #104]	@ (800e240 <rmw_init_options_fini+0x8c>)
 800e1d6:	6819      	ldr	r1, [r3, #0]
 800e1d8:	b331      	cbz	r1, 800e228 <rmw_init_options_fini+0x74>
 800e1da:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800e1dc:	e001      	b.n	800e1e2 <rmw_init_options_fini+0x2e>
 800e1de:	6849      	ldr	r1, [r1, #4]
 800e1e0:	b311      	cbz	r1, 800e228 <rmw_init_options_fini+0x74>
 800e1e2:	688b      	ldr	r3, [r1, #8]
 800e1e4:	429a      	cmp	r2, r3
 800e1e6:	d1fa      	bne.n	800e1de <rmw_init_options_fini+0x2a>
 800e1e8:	4815      	ldr	r0, [pc, #84]	@ (800e240 <rmw_init_options_fini+0x8c>)
 800e1ea:	f009 f9e9 	bl	80175c0 <put_memory>
 800e1ee:	4668      	mov	r0, sp
 800e1f0:	f7ff ff02 	bl	800dff8 <rmw_get_zero_initialized_init_options>
 800e1f4:	46ee      	mov	lr, sp
 800e1f6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e1fa:	46a4      	mov	ip, r4
 800e1fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e200:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e204:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e208:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e20c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e210:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800e214:	e88c 0003 	stmia.w	ip, {r0, r1}
 800e218:	2300      	movs	r3, #0
 800e21a:	4618      	mov	r0, r3
 800e21c:	b00e      	add	sp, #56	@ 0x38
 800e21e:	bd10      	pop	{r4, pc}
 800e220:	230b      	movs	r3, #11
 800e222:	4618      	mov	r0, r3
 800e224:	b00e      	add	sp, #56	@ 0x38
 800e226:	bd10      	pop	{r4, pc}
 800e228:	2301      	movs	r3, #1
 800e22a:	4618      	mov	r0, r3
 800e22c:	b00e      	add	sp, #56	@ 0x38
 800e22e:	bd10      	pop	{r4, pc}
 800e230:	230c      	movs	r3, #12
 800e232:	e7f2      	b.n	800e21a <rmw_init_options_fini+0x66>
 800e234:	230b      	movs	r3, #11
 800e236:	4618      	mov	r0, r3
 800e238:	4770      	bx	lr
 800e23a:	bf00      	nop
 800e23c:	0801c850 	.word	0x0801c850
 800e240:	2000ba04 	.word	0x2000ba04

0800e244 <rmw_init>:
 800e244:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e248:	b083      	sub	sp, #12
 800e24a:	2800      	cmp	r0, #0
 800e24c:	f000 80d3 	beq.w	800e3f6 <rmw_init+0x1b2>
 800e250:	460e      	mov	r6, r1
 800e252:	2900      	cmp	r1, #0
 800e254:	f000 80cf 	beq.w	800e3f6 <rmw_init+0x1b2>
 800e258:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e25a:	4605      	mov	r5, r0
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	f000 80ca 	beq.w	800e3f6 <rmw_init+0x1b2>
 800e262:	4b78      	ldr	r3, [pc, #480]	@ (800e444 <rmw_init+0x200>)
 800e264:	6880      	ldr	r0, [r0, #8]
 800e266:	681f      	ldr	r7, [r3, #0]
 800e268:	b128      	cbz	r0, 800e276 <rmw_init+0x32>
 800e26a:	4639      	mov	r1, r7
 800e26c:	f7f1 ffd8 	bl	8000220 <strcmp>
 800e270:	2800      	cmp	r0, #0
 800e272:	f040 80ca 	bne.w	800e40a <rmw_init+0x1c6>
 800e276:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e27a:	4c73      	ldr	r4, [pc, #460]	@ (800e448 <rmw_init+0x204>)
 800e27c:	4973      	ldr	r1, [pc, #460]	@ (800e44c <rmw_init+0x208>)
 800e27e:	4874      	ldr	r0, [pc, #464]	@ (800e450 <rmw_init+0x20c>)
 800e280:	60b7      	str	r7, [r6, #8]
 800e282:	e9c6 2300 	strd	r2, r3, [r6]
 800e286:	68eb      	ldr	r3, [r5, #12]
 800e288:	64b3      	str	r3, [r6, #72]	@ 0x48
 800e28a:	2201      	movs	r2, #1
 800e28c:	f000 fe76 	bl	800ef7c <rmw_uxrce_init_session_memory>
 800e290:	4620      	mov	r0, r4
 800e292:	4970      	ldr	r1, [pc, #448]	@ (800e454 <rmw_init+0x210>)
 800e294:	2204      	movs	r2, #4
 800e296:	f000 feb1 	bl	800effc <rmw_uxrce_init_static_input_buffer_memory>
 800e29a:	f04f 0800 	mov.w	r8, #0
 800e29e:	486c      	ldr	r0, [pc, #432]	@ (800e450 <rmw_init+0x20c>)
 800e2a0:	f884 800d 	strb.w	r8, [r4, #13]
 800e2a4:	f009 f97c 	bl	80175a0 <get_memory>
 800e2a8:	2800      	cmp	r0, #0
 800e2aa:	f000 80a9 	beq.w	800e400 <rmw_init+0x1bc>
 800e2ae:	6884      	ldr	r4, [r0, #8]
 800e2b0:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800e2b2:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800e2b4:	f890 c010 	ldrb.w	ip, [r0, #16]
 800e2b8:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800e2bc:	9101      	str	r1, [sp, #4]
 800e2be:	6a00      	ldr	r0, [r0, #32]
 800e2c0:	9000      	str	r0, [sp, #0]
 800e2c2:	f104 0910 	add.w	r9, r4, #16
 800e2c6:	4661      	mov	r1, ip
 800e2c8:	4648      	mov	r0, r9
 800e2ca:	f002 fa9b 	bl	8010804 <uxr_set_custom_transport_callbacks>
 800e2ce:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800e2d2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800e2d6:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800e2da:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800e2de:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800e2e2:	495d      	ldr	r1, [pc, #372]	@ (800e458 <rmw_init+0x214>)
 800e2e4:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800e2e8:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800e2ec:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800e2f0:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800e2f4:	4859      	ldr	r0, [pc, #356]	@ (800e45c <rmw_init+0x218>)
 800e2f6:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800e2fa:	2201      	movs	r2, #1
 800e2fc:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800e2fe:	f000 fe1d 	bl	800ef3c <rmw_uxrce_init_node_memory>
 800e302:	4957      	ldr	r1, [pc, #348]	@ (800e460 <rmw_init+0x21c>)
 800e304:	4857      	ldr	r0, [pc, #348]	@ (800e464 <rmw_init+0x220>)
 800e306:	2205      	movs	r2, #5
 800e308:	f000 fdf8 	bl	800eefc <rmw_uxrce_init_subscription_memory>
 800e30c:	4956      	ldr	r1, [pc, #344]	@ (800e468 <rmw_init+0x224>)
 800e30e:	4857      	ldr	r0, [pc, #348]	@ (800e46c <rmw_init+0x228>)
 800e310:	220a      	movs	r2, #10
 800e312:	f000 fdd3 	bl	800eebc <rmw_uxrce_init_publisher_memory>
 800e316:	4956      	ldr	r1, [pc, #344]	@ (800e470 <rmw_init+0x22c>)
 800e318:	4856      	ldr	r0, [pc, #344]	@ (800e474 <rmw_init+0x230>)
 800e31a:	2202      	movs	r2, #2
 800e31c:	f000 fd8e 	bl	800ee3c <rmw_uxrce_init_service_memory>
 800e320:	4955      	ldr	r1, [pc, #340]	@ (800e478 <rmw_init+0x234>)
 800e322:	4856      	ldr	r0, [pc, #344]	@ (800e47c <rmw_init+0x238>)
 800e324:	2201      	movs	r2, #1
 800e326:	f000 fda9 	bl	800ee7c <rmw_uxrce_init_client_memory>
 800e32a:	4955      	ldr	r1, [pc, #340]	@ (800e480 <rmw_init+0x23c>)
 800e32c:	4855      	ldr	r0, [pc, #340]	@ (800e484 <rmw_init+0x240>)
 800e32e:	220f      	movs	r2, #15
 800e330:	f000 fe44 	bl	800efbc <rmw_uxrce_init_topic_memory>
 800e334:	4954      	ldr	r1, [pc, #336]	@ (800e488 <rmw_init+0x244>)
 800e336:	4855      	ldr	r0, [pc, #340]	@ (800e48c <rmw_init+0x248>)
 800e338:	2203      	movs	r2, #3
 800e33a:	f000 fe7f 	bl	800f03c <rmw_uxrce_init_init_options_impl_memory>
 800e33e:	4954      	ldr	r1, [pc, #336]	@ (800e490 <rmw_init+0x24c>)
 800e340:	4854      	ldr	r0, [pc, #336]	@ (800e494 <rmw_init+0x250>)
 800e342:	2204      	movs	r2, #4
 800e344:	f000 fe9a 	bl	800f07c <rmw_uxrce_init_wait_set_memory>
 800e348:	4953      	ldr	r1, [pc, #332]	@ (800e498 <rmw_init+0x254>)
 800e34a:	4854      	ldr	r0, [pc, #336]	@ (800e49c <rmw_init+0x258>)
 800e34c:	2204      	movs	r2, #4
 800e34e:	f000 feb5 	bl	800f0bc <rmw_uxrce_init_guard_condition_memory>
 800e352:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800e354:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800e356:	4642      	mov	r2, r8
 800e358:	f000 fd2a 	bl	800edb0 <rmw_uxrce_transport_init>
 800e35c:	4607      	mov	r7, r0
 800e35e:	2800      	cmp	r0, #0
 800e360:	d158      	bne.n	800e414 <rmw_init+0x1d0>
 800e362:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800e364:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800e368:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e36a:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800e36e:	4628      	mov	r0, r5
 800e370:	f002 fc7e 	bl	8010c70 <uxr_init_session>
 800e374:	494a      	ldr	r1, [pc, #296]	@ (800e4a0 <rmw_init+0x25c>)
 800e376:	4622      	mov	r2, r4
 800e378:	4628      	mov	r0, r5
 800e37a:	f002 fc9d 	bl	8010cb8 <uxr_set_topic_callback>
 800e37e:	4949      	ldr	r1, [pc, #292]	@ (800e4a4 <rmw_init+0x260>)
 800e380:	463a      	mov	r2, r7
 800e382:	4628      	mov	r0, r5
 800e384:	f002 fc94 	bl	8010cb0 <uxr_set_status_callback>
 800e388:	4947      	ldr	r1, [pc, #284]	@ (800e4a8 <rmw_init+0x264>)
 800e38a:	463a      	mov	r2, r7
 800e38c:	4628      	mov	r0, r5
 800e38e:	f002 fc97 	bl	8010cc0 <uxr_set_request_callback>
 800e392:	4946      	ldr	r1, [pc, #280]	@ (800e4ac <rmw_init+0x268>)
 800e394:	463a      	mov	r2, r7
 800e396:	4628      	mov	r0, r5
 800e398:	f002 fc96 	bl	8010cc8 <uxr_set_reply_callback>
 800e39c:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800e3a0:	2304      	movs	r3, #4
 800e3a2:	0092      	lsls	r2, r2, #2
 800e3a4:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800e3a8:	4628      	mov	r0, r5
 800e3aa:	f002 fccb 	bl	8010d44 <uxr_create_input_reliable_stream>
 800e3ae:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800e3b2:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800e3b6:	0092      	lsls	r2, r2, #2
 800e3b8:	2304      	movs	r3, #4
 800e3ba:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800e3be:	4628      	mov	r0, r5
 800e3c0:	f002 fc98 	bl	8010cf4 <uxr_create_output_reliable_stream>
 800e3c4:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800e3c8:	4628      	mov	r0, r5
 800e3ca:	f002 fcb5 	bl	8010d38 <uxr_create_input_best_effort_stream>
 800e3ce:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800e3d2:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800e3d6:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800e3da:	3114      	adds	r1, #20
 800e3dc:	4628      	mov	r0, r5
 800e3de:	f002 fc77 	bl	8010cd0 <uxr_create_output_best_effort_stream>
 800e3e2:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800e3e6:	4628      	mov	r0, r5
 800e3e8:	f003 fa6a 	bl	80118c0 <uxr_create_session>
 800e3ec:	b1f8      	cbz	r0, 800e42e <rmw_init+0x1ea>
 800e3ee:	4638      	mov	r0, r7
 800e3f0:	b003      	add	sp, #12
 800e3f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e3f6:	270b      	movs	r7, #11
 800e3f8:	4638      	mov	r0, r7
 800e3fa:	b003      	add	sp, #12
 800e3fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e400:	2701      	movs	r7, #1
 800e402:	4638      	mov	r0, r7
 800e404:	b003      	add	sp, #12
 800e406:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e40a:	270c      	movs	r7, #12
 800e40c:	4638      	mov	r0, r7
 800e40e:	b003      	add	sp, #12
 800e410:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e414:	4648      	mov	r0, r9
 800e416:	f002 fa37 	bl	8010888 <uxr_close_custom_transport>
 800e41a:	480d      	ldr	r0, [pc, #52]	@ (800e450 <rmw_init+0x20c>)
 800e41c:	4621      	mov	r1, r4
 800e41e:	f009 f8cf 	bl	80175c0 <put_memory>
 800e422:	4638      	mov	r0, r7
 800e424:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 800e428:	b003      	add	sp, #12
 800e42a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e42e:	4648      	mov	r0, r9
 800e430:	f002 fa2a 	bl	8010888 <uxr_close_custom_transport>
 800e434:	4806      	ldr	r0, [pc, #24]	@ (800e450 <rmw_init+0x20c>)
 800e436:	4621      	mov	r1, r4
 800e438:	f009 f8c2 	bl	80175c0 <put_memory>
 800e43c:	64f7      	str	r7, [r6, #76]	@ 0x4c
 800e43e:	2701      	movs	r7, #1
 800e440:	e7d5      	b.n	800e3ee <rmw_init+0x1aa>
 800e442:	bf00      	nop
 800e444:	0801c850 	.word	0x0801c850
 800e448:	2000ba54 	.word	0x2000ba54
 800e44c:	20007d00 	.word	0x20007d00
 800e450:	2000ba44 	.word	0x2000ba44
 800e454:	200092a8 	.word	0x200092a8
 800e458:	2000725c 	.word	0x2000725c
 800e45c:	2000ba14 	.word	0x2000ba14
 800e460:	2000b3a8 	.word	0x2000b3a8
 800e464:	2000ba64 	.word	0x2000ba64
 800e468:	20007300 	.word	0x20007300
 800e46c:	2000ba24 	.word	0x2000ba24
 800e470:	20007b70 	.word	0x20007b70
 800e474:	2000ba34 	.word	0x2000ba34
 800e478:	20007090 	.word	0x20007090
 800e47c:	2000707c 	.word	0x2000707c
 800e480:	2000b7e0 	.word	0x2000b7e0
 800e484:	2000ba74 	.word	0x2000ba74
 800e488:	200071d8 	.word	0x200071d8
 800e48c:	2000ba04 	.word	0x2000ba04
 800e490:	2000b984 	.word	0x2000b984
 800e494:	2000ba84 	.word	0x2000ba84
 800e498:	20007158 	.word	0x20007158
 800e49c:	2000b9f4 	.word	0x2000b9f4
 800e4a0:	080173d9 	.word	0x080173d9
 800e4a4:	080173d1 	.word	0x080173d1
 800e4a8:	08017471 	.word	0x08017471
 800e4ac:	0801750d 	.word	0x0801750d

0800e4b0 <rmw_context_fini>:
 800e4b0:	4b17      	ldr	r3, [pc, #92]	@ (800e510 <rmw_context_fini+0x60>)
 800e4b2:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800e4b4:	b570      	push	{r4, r5, r6, lr}
 800e4b6:	681c      	ldr	r4, [r3, #0]
 800e4b8:	4605      	mov	r5, r0
 800e4ba:	b334      	cbz	r4, 800e50a <rmw_context_fini+0x5a>
 800e4bc:	2600      	movs	r6, #0
 800e4be:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800e4c2:	6902      	ldr	r2, [r0, #16]
 800e4c4:	428a      	cmp	r2, r1
 800e4c6:	d018      	beq.n	800e4fa <rmw_context_fini+0x4a>
 800e4c8:	2c00      	cmp	r4, #0
 800e4ca:	d1f8      	bne.n	800e4be <rmw_context_fini+0xe>
 800e4cc:	b189      	cbz	r1, 800e4f2 <rmw_context_fini+0x42>
 800e4ce:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800e4d2:	789b      	ldrb	r3, [r3, #2]
 800e4d4:	2b01      	cmp	r3, #1
 800e4d6:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800e4da:	bf14      	ite	ne
 800e4dc:	210a      	movne	r1, #10
 800e4de:	2100      	moveq	r1, #0
 800e4e0:	f003 f9c6 	bl	8011870 <uxr_delete_session_retries>
 800e4e4:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800e4e6:	f000 fe09 	bl	800f0fc <rmw_uxrce_fini_session_memory>
 800e4ea:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800e4ec:	3010      	adds	r0, #16
 800e4ee:	f002 f9cb 	bl	8010888 <uxr_close_custom_transport>
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800e4f6:	4630      	mov	r0, r6
 800e4f8:	bd70      	pop	{r4, r5, r6, pc}
 800e4fa:	3018      	adds	r0, #24
 800e4fc:	f000 f89c 	bl	800e638 <rmw_destroy_node>
 800e500:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800e502:	4606      	mov	r6, r0
 800e504:	2c00      	cmp	r4, #0
 800e506:	d1da      	bne.n	800e4be <rmw_context_fini+0xe>
 800e508:	e7e0      	b.n	800e4cc <rmw_context_fini+0x1c>
 800e50a:	4626      	mov	r6, r4
 800e50c:	e7de      	b.n	800e4cc <rmw_context_fini+0x1c>
 800e50e:	bf00      	nop
 800e510:	2000ba14 	.word	0x2000ba14

0800e514 <create_node>:
 800e514:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e518:	b083      	sub	sp, #12
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d05f      	beq.n	800e5de <create_node+0xca>
 800e51e:	4606      	mov	r6, r0
 800e520:	4835      	ldr	r0, [pc, #212]	@ (800e5f8 <create_node+0xe4>)
 800e522:	460f      	mov	r7, r1
 800e524:	4690      	mov	r8, r2
 800e526:	461d      	mov	r5, r3
 800e528:	f009 f83a 	bl	80175a0 <get_memory>
 800e52c:	2800      	cmp	r0, #0
 800e52e:	d056      	beq.n	800e5de <create_node+0xca>
 800e530:	6884      	ldr	r4, [r0, #8]
 800e532:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800e534:	6123      	str	r3, [r4, #16]
 800e536:	f009 f89b 	bl	8017670 <rmw_get_implementation_identifier>
 800e53a:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800e53e:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800e542:	f8c4 9020 	str.w	r9, [r4, #32]
 800e546:	4630      	mov	r0, r6
 800e548:	f7f1 fe74 	bl	8000234 <strlen>
 800e54c:	1c42      	adds	r2, r0, #1
 800e54e:	2a3c      	cmp	r2, #60	@ 0x3c
 800e550:	f104 0518 	add.w	r5, r4, #24
 800e554:	d840      	bhi.n	800e5d8 <create_node+0xc4>
 800e556:	4648      	mov	r0, r9
 800e558:	4631      	mov	r1, r6
 800e55a:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800e55e:	f00b fc3a 	bl	8019dd6 <memcpy>
 800e562:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800e566:	4638      	mov	r0, r7
 800e568:	f7f1 fe64 	bl	8000234 <strlen>
 800e56c:	1c42      	adds	r2, r0, #1
 800e56e:	2a3c      	cmp	r2, #60	@ 0x3c
 800e570:	d832      	bhi.n	800e5d8 <create_node+0xc4>
 800e572:	4639      	mov	r1, r7
 800e574:	4648      	mov	r0, r9
 800e576:	f00b fc2e 	bl	8019dd6 <memcpy>
 800e57a:	6923      	ldr	r3, [r4, #16]
 800e57c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e580:	2101      	movs	r1, #1
 800e582:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800e586:	1842      	adds	r2, r0, r1
 800e588:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800e58c:	f002 f980 	bl	8010890 <uxr_object_id>
 800e590:	6160      	str	r0, [r4, #20]
 800e592:	783b      	ldrb	r3, [r7, #0]
 800e594:	2b2f      	cmp	r3, #47	@ 0x2f
 800e596:	d127      	bne.n	800e5e8 <create_node+0xd4>
 800e598:	787b      	ldrb	r3, [r7, #1]
 800e59a:	bb2b      	cbnz	r3, 800e5e8 <create_node+0xd4>
 800e59c:	4a17      	ldr	r2, [pc, #92]	@ (800e5fc <create_node+0xe8>)
 800e59e:	4818      	ldr	r0, [pc, #96]	@ (800e600 <create_node+0xec>)
 800e5a0:	4633      	mov	r3, r6
 800e5a2:	213c      	movs	r1, #60	@ 0x3c
 800e5a4:	f00b f9e0 	bl	8019968 <sniprintf>
 800e5a8:	6920      	ldr	r0, [r4, #16]
 800e5aa:	4915      	ldr	r1, [pc, #84]	@ (800e600 <create_node+0xec>)
 800e5ac:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800e5b0:	9100      	str	r1, [sp, #0]
 800e5b2:	2106      	movs	r1, #6
 800e5b4:	9101      	str	r1, [sp, #4]
 800e5b6:	6811      	ldr	r1, [r2, #0]
 800e5b8:	6962      	ldr	r2, [r4, #20]
 800e5ba:	fa1f f388 	uxth.w	r3, r8
 800e5be:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e5c2:	f001 ff5b 	bl	801047c <uxr_buffer_create_participant_bin>
 800e5c6:	4602      	mov	r2, r0
 800e5c8:	6920      	ldr	r0, [r4, #16]
 800e5ca:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800e5ce:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e5d2:	f000 ff0b 	bl	800f3ec <run_xrce_session>
 800e5d6:	b918      	cbnz	r0, 800e5e0 <create_node+0xcc>
 800e5d8:	4628      	mov	r0, r5
 800e5da:	f000 fd95 	bl	800f108 <rmw_uxrce_fini_node_memory>
 800e5de:	2500      	movs	r5, #0
 800e5e0:	4628      	mov	r0, r5
 800e5e2:	b003      	add	sp, #12
 800e5e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e5e8:	4a06      	ldr	r2, [pc, #24]	@ (800e604 <create_node+0xf0>)
 800e5ea:	9600      	str	r6, [sp, #0]
 800e5ec:	463b      	mov	r3, r7
 800e5ee:	213c      	movs	r1, #60	@ 0x3c
 800e5f0:	4803      	ldr	r0, [pc, #12]	@ (800e600 <create_node+0xec>)
 800e5f2:	f00b f9b9 	bl	8019968 <sniprintf>
 800e5f6:	e7d7      	b.n	800e5a8 <create_node+0x94>
 800e5f8:	2000ba14 	.word	0x2000ba14
 800e5fc:	0801bd88 	.word	0x0801bd88
 800e600:	20006f00 	.word	0x20006f00
 800e604:	0801bd70 	.word	0x0801bd70

0800e608 <rmw_create_node>:
 800e608:	b199      	cbz	r1, 800e632 <rmw_create_node+0x2a>
 800e60a:	780b      	ldrb	r3, [r1, #0]
 800e60c:	468c      	mov	ip, r1
 800e60e:	b183      	cbz	r3, 800e632 <rmw_create_node+0x2a>
 800e610:	b410      	push	{r4}
 800e612:	4614      	mov	r4, r2
 800e614:	b14a      	cbz	r2, 800e62a <rmw_create_node+0x22>
 800e616:	7813      	ldrb	r3, [r2, #0]
 800e618:	b13b      	cbz	r3, 800e62a <rmw_create_node+0x22>
 800e61a:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800e61c:	4603      	mov	r3, r0
 800e61e:	4621      	mov	r1, r4
 800e620:	4660      	mov	r0, ip
 800e622:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e626:	f7ff bf75 	b.w	800e514 <create_node>
 800e62a:	2000      	movs	r0, #0
 800e62c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e630:	4770      	bx	lr
 800e632:	2000      	movs	r0, #0
 800e634:	4770      	bx	lr
 800e636:	bf00      	nop

0800e638 <rmw_destroy_node>:
 800e638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e63a:	b328      	cbz	r0, 800e688 <rmw_destroy_node+0x50>
 800e63c:	4607      	mov	r7, r0
 800e63e:	6800      	ldr	r0, [r0, #0]
 800e640:	b120      	cbz	r0, 800e64c <rmw_destroy_node+0x14>
 800e642:	4b36      	ldr	r3, [pc, #216]	@ (800e71c <rmw_destroy_node+0xe4>)
 800e644:	6819      	ldr	r1, [r3, #0]
 800e646:	f7f1 fdeb 	bl	8000220 <strcmp>
 800e64a:	b9e8      	cbnz	r0, 800e688 <rmw_destroy_node+0x50>
 800e64c:	687d      	ldr	r5, [r7, #4]
 800e64e:	b1dd      	cbz	r5, 800e688 <rmw_destroy_node+0x50>
 800e650:	4b33      	ldr	r3, [pc, #204]	@ (800e720 <rmw_destroy_node+0xe8>)
 800e652:	681c      	ldr	r4, [r3, #0]
 800e654:	2c00      	cmp	r4, #0
 800e656:	d05f      	beq.n	800e718 <rmw_destroy_node+0xe0>
 800e658:	2600      	movs	r6, #0
 800e65a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e65e:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800e662:	429d      	cmp	r5, r3
 800e664:	d013      	beq.n	800e68e <rmw_destroy_node+0x56>
 800e666:	2c00      	cmp	r4, #0
 800e668:	d1f7      	bne.n	800e65a <rmw_destroy_node+0x22>
 800e66a:	4b2e      	ldr	r3, [pc, #184]	@ (800e724 <rmw_destroy_node+0xec>)
 800e66c:	681c      	ldr	r4, [r3, #0]
 800e66e:	b1c4      	cbz	r4, 800e6a2 <rmw_destroy_node+0x6a>
 800e670:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e674:	6a0b      	ldr	r3, [r1, #32]
 800e676:	429d      	cmp	r5, r3
 800e678:	d1f9      	bne.n	800e66e <rmw_destroy_node+0x36>
 800e67a:	317c      	adds	r1, #124	@ 0x7c
 800e67c:	4638      	mov	r0, r7
 800e67e:	f000 fb37 	bl	800ecf0 <rmw_destroy_subscription>
 800e682:	2801      	cmp	r0, #1
 800e684:	4606      	mov	r6, r0
 800e686:	d1f2      	bne.n	800e66e <rmw_destroy_node+0x36>
 800e688:	2601      	movs	r6, #1
 800e68a:	4630      	mov	r0, r6
 800e68c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e68e:	3184      	adds	r1, #132	@ 0x84
 800e690:	4638      	mov	r0, r7
 800e692:	f000 f9a5 	bl	800e9e0 <rmw_destroy_publisher>
 800e696:	2801      	cmp	r0, #1
 800e698:	4606      	mov	r6, r0
 800e69a:	d0f5      	beq.n	800e688 <rmw_destroy_node+0x50>
 800e69c:	2c00      	cmp	r4, #0
 800e69e:	d1dc      	bne.n	800e65a <rmw_destroy_node+0x22>
 800e6a0:	e7e3      	b.n	800e66a <rmw_destroy_node+0x32>
 800e6a2:	4b21      	ldr	r3, [pc, #132]	@ (800e728 <rmw_destroy_node+0xf0>)
 800e6a4:	681c      	ldr	r4, [r3, #0]
 800e6a6:	b16c      	cbz	r4, 800e6c4 <rmw_destroy_node+0x8c>
 800e6a8:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e6ac:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800e6ae:	429d      	cmp	r5, r3
 800e6b0:	d1f9      	bne.n	800e6a6 <rmw_destroy_node+0x6e>
 800e6b2:	317c      	adds	r1, #124	@ 0x7c
 800e6b4:	4638      	mov	r0, r7
 800e6b6:	f000 fab7 	bl	800ec28 <rmw_destroy_service>
 800e6ba:	2801      	cmp	r0, #1
 800e6bc:	4606      	mov	r6, r0
 800e6be:	d0e3      	beq.n	800e688 <rmw_destroy_node+0x50>
 800e6c0:	2c00      	cmp	r4, #0
 800e6c2:	d1f1      	bne.n	800e6a8 <rmw_destroy_node+0x70>
 800e6c4:	4b19      	ldr	r3, [pc, #100]	@ (800e72c <rmw_destroy_node+0xf4>)
 800e6c6:	681c      	ldr	r4, [r3, #0]
 800e6c8:	b16c      	cbz	r4, 800e6e6 <rmw_destroy_node+0xae>
 800e6ca:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e6ce:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800e6d0:	429d      	cmp	r5, r3
 800e6d2:	d1f9      	bne.n	800e6c8 <rmw_destroy_node+0x90>
 800e6d4:	317c      	adds	r1, #124	@ 0x7c
 800e6d6:	4638      	mov	r0, r7
 800e6d8:	f008 ff86 	bl	80175e8 <rmw_destroy_client>
 800e6dc:	2801      	cmp	r0, #1
 800e6de:	4606      	mov	r6, r0
 800e6e0:	d0d2      	beq.n	800e688 <rmw_destroy_node+0x50>
 800e6e2:	2c00      	cmp	r4, #0
 800e6e4:	d1f1      	bne.n	800e6ca <rmw_destroy_node+0x92>
 800e6e6:	6928      	ldr	r0, [r5, #16]
 800e6e8:	696a      	ldr	r2, [r5, #20]
 800e6ea:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e6ee:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e6f2:	6819      	ldr	r1, [r3, #0]
 800e6f4:	f001 fe76 	bl	80103e4 <uxr_buffer_delete_entity>
 800e6f8:	4602      	mov	r2, r0
 800e6fa:	6928      	ldr	r0, [r5, #16]
 800e6fc:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e700:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e704:	f000 fe72 	bl	800f3ec <run_xrce_session>
 800e708:	2800      	cmp	r0, #0
 800e70a:	bf08      	it	eq
 800e70c:	2602      	moveq	r6, #2
 800e70e:	4638      	mov	r0, r7
 800e710:	f000 fcfa 	bl	800f108 <rmw_uxrce_fini_node_memory>
 800e714:	4630      	mov	r0, r6
 800e716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e718:	4626      	mov	r6, r4
 800e71a:	e7a6      	b.n	800e66a <rmw_destroy_node+0x32>
 800e71c:	0801c850 	.word	0x0801c850
 800e720:	2000ba24 	.word	0x2000ba24
 800e724:	2000ba64 	.word	0x2000ba64
 800e728:	2000ba34 	.word	0x2000ba34
 800e72c:	2000707c 	.word	0x2000707c

0800e730 <rmw_node_get_graph_guard_condition>:
 800e730:	6843      	ldr	r3, [r0, #4]
 800e732:	6918      	ldr	r0, [r3, #16]
 800e734:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800e738:	4770      	bx	lr
 800e73a:	bf00      	nop

0800e73c <flush_session>:
 800e73c:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800e73e:	f002 bef9 	b.w	8011534 <uxr_run_session_until_confirm_delivery>
 800e742:	bf00      	nop

0800e744 <rmw_publish>:
 800e744:	2800      	cmp	r0, #0
 800e746:	d053      	beq.n	800e7f0 <rmw_publish+0xac>
 800e748:	b570      	push	{r4, r5, r6, lr}
 800e74a:	460d      	mov	r5, r1
 800e74c:	b08e      	sub	sp, #56	@ 0x38
 800e74e:	2900      	cmp	r1, #0
 800e750:	d04b      	beq.n	800e7ea <rmw_publish+0xa6>
 800e752:	4604      	mov	r4, r0
 800e754:	6800      	ldr	r0, [r0, #0]
 800e756:	f000 ff63 	bl	800f620 <is_uxrce_rmw_identifier_valid>
 800e75a:	2800      	cmp	r0, #0
 800e75c:	d045      	beq.n	800e7ea <rmw_publish+0xa6>
 800e75e:	6866      	ldr	r6, [r4, #4]
 800e760:	2e00      	cmp	r6, #0
 800e762:	d042      	beq.n	800e7ea <rmw_publish+0xa6>
 800e764:	69b4      	ldr	r4, [r6, #24]
 800e766:	4628      	mov	r0, r5
 800e768:	6923      	ldr	r3, [r4, #16]
 800e76a:	4798      	blx	r3
 800e76c:	69f3      	ldr	r3, [r6, #28]
 800e76e:	9005      	str	r0, [sp, #20]
 800e770:	b113      	cbz	r3, 800e778 <rmw_publish+0x34>
 800e772:	a805      	add	r0, sp, #20
 800e774:	4798      	blx	r3
 800e776:	9805      	ldr	r0, [sp, #20]
 800e778:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800e77c:	691b      	ldr	r3, [r3, #16]
 800e77e:	9000      	str	r0, [sp, #0]
 800e780:	6972      	ldr	r2, [r6, #20]
 800e782:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800e784:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800e788:	ab06      	add	r3, sp, #24
 800e78a:	f004 f9a7 	bl	8012adc <uxr_prepare_output_stream>
 800e78e:	b1d8      	cbz	r0, 800e7c8 <rmw_publish+0x84>
 800e790:	68a3      	ldr	r3, [r4, #8]
 800e792:	a906      	add	r1, sp, #24
 800e794:	4628      	mov	r0, r5
 800e796:	4798      	blx	r3
 800e798:	6a33      	ldr	r3, [r6, #32]
 800e79a:	4604      	mov	r4, r0
 800e79c:	b10b      	cbz	r3, 800e7a2 <rmw_publish+0x5e>
 800e79e:	a806      	add	r0, sp, #24
 800e7a0:	4798      	blx	r3
 800e7a2:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800e7a6:	2b01      	cmp	r3, #1
 800e7a8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800e7ac:	d022      	beq.n	800e7f4 <rmw_publish+0xb0>
 800e7ae:	6918      	ldr	r0, [r3, #16]
 800e7b0:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800e7b2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e7b6:	f002 febd 	bl	8011534 <uxr_run_session_until_confirm_delivery>
 800e7ba:	4020      	ands	r0, r4
 800e7bc:	b2c4      	uxtb	r4, r0
 800e7be:	f084 0001 	eor.w	r0, r4, #1
 800e7c2:	b2c0      	uxtb	r0, r0
 800e7c4:	b00e      	add	sp, #56	@ 0x38
 800e7c6:	bd70      	pop	{r4, r5, r6, pc}
 800e7c8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800e7cc:	6918      	ldr	r0, [r3, #16]
 800e7ce:	9b05      	ldr	r3, [sp, #20]
 800e7d0:	9300      	str	r3, [sp, #0]
 800e7d2:	4b0b      	ldr	r3, [pc, #44]	@ (800e800 <rmw_publish+0xbc>)
 800e7d4:	9301      	str	r3, [sp, #4]
 800e7d6:	9602      	str	r6, [sp, #8]
 800e7d8:	6972      	ldr	r2, [r6, #20]
 800e7da:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800e7dc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e7e0:	ab06      	add	r3, sp, #24
 800e7e2:	f004 f9ab 	bl	8012b3c <uxr_prepare_output_stream_fragmented>
 800e7e6:	2800      	cmp	r0, #0
 800e7e8:	d1d2      	bne.n	800e790 <rmw_publish+0x4c>
 800e7ea:	2001      	movs	r0, #1
 800e7ec:	b00e      	add	sp, #56	@ 0x38
 800e7ee:	bd70      	pop	{r4, r5, r6, pc}
 800e7f0:	2001      	movs	r0, #1
 800e7f2:	4770      	bx	lr
 800e7f4:	6918      	ldr	r0, [r3, #16]
 800e7f6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e7fa:	f002 fadb 	bl	8010db4 <uxr_flash_output_streams>
 800e7fe:	e7de      	b.n	800e7be <rmw_publish+0x7a>
 800e800:	0800e73d 	.word	0x0800e73d

0800e804 <rmw_create_publisher>:
 800e804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e808:	b087      	sub	sp, #28
 800e80a:	2800      	cmp	r0, #0
 800e80c:	f000 80cc 	beq.w	800e9a8 <rmw_create_publisher+0x1a4>
 800e810:	460e      	mov	r6, r1
 800e812:	2900      	cmp	r1, #0
 800e814:	f000 80c8 	beq.w	800e9a8 <rmw_create_publisher+0x1a4>
 800e818:	4604      	mov	r4, r0
 800e81a:	6800      	ldr	r0, [r0, #0]
 800e81c:	4615      	mov	r5, r2
 800e81e:	4698      	mov	r8, r3
 800e820:	f000 fefe 	bl	800f620 <is_uxrce_rmw_identifier_valid>
 800e824:	2800      	cmp	r0, #0
 800e826:	f000 80bf 	beq.w	800e9a8 <rmw_create_publisher+0x1a4>
 800e82a:	2d00      	cmp	r5, #0
 800e82c:	f000 80bc 	beq.w	800e9a8 <rmw_create_publisher+0x1a4>
 800e830:	782b      	ldrb	r3, [r5, #0]
 800e832:	2b00      	cmp	r3, #0
 800e834:	f000 80b8 	beq.w	800e9a8 <rmw_create_publisher+0x1a4>
 800e838:	f1b8 0f00 	cmp.w	r8, #0
 800e83c:	f000 80b4 	beq.w	800e9a8 <rmw_create_publisher+0x1a4>
 800e840:	485c      	ldr	r0, [pc, #368]	@ (800e9b4 <rmw_create_publisher+0x1b0>)
 800e842:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e846:	f008 feab 	bl	80175a0 <get_memory>
 800e84a:	2800      	cmp	r0, #0
 800e84c:	f000 80ac 	beq.w	800e9a8 <rmw_create_publisher+0x1a4>
 800e850:	6884      	ldr	r4, [r0, #8]
 800e852:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800e856:	f008 ff0b 	bl	8017670 <rmw_get_implementation_identifier>
 800e85a:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800e85e:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800e862:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800e866:	4628      	mov	r0, r5
 800e868:	f7f1 fce4 	bl	8000234 <strlen>
 800e86c:	3001      	adds	r0, #1
 800e86e:	283c      	cmp	r0, #60	@ 0x3c
 800e870:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800e874:	f200 8091 	bhi.w	800e99a <rmw_create_publisher+0x196>
 800e878:	4a4f      	ldr	r2, [pc, #316]	@ (800e9b8 <rmw_create_publisher+0x1b4>)
 800e87a:	462b      	mov	r3, r5
 800e87c:	213c      	movs	r1, #60	@ 0x3c
 800e87e:	4650      	mov	r0, sl
 800e880:	f00b f872 	bl	8019968 <sniprintf>
 800e884:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e888:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800e88a:	4641      	mov	r1, r8
 800e88c:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800e890:	2250      	movs	r2, #80	@ 0x50
 800e892:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800e896:	f00b fa9e 	bl	8019dd6 <memcpy>
 800e89a:	f898 3008 	ldrb.w	r3, [r8, #8]
 800e89e:	4947      	ldr	r1, [pc, #284]	@ (800e9bc <rmw_create_publisher+0x1b8>)
 800e8a0:	2b02      	cmp	r3, #2
 800e8a2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e8a6:	bf0c      	ite	eq
 800e8a8:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800e8ac:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800e8b0:	67a3      	str	r3, [r4, #120]	@ 0x78
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800e8b8:	4630      	mov	r0, r6
 800e8ba:	f000 febf 	bl	800f63c <get_message_typesupport_handle>
 800e8be:	2800      	cmp	r0, #0
 800e8c0:	d06b      	beq.n	800e99a <rmw_create_publisher+0x196>
 800e8c2:	6842      	ldr	r2, [r0, #4]
 800e8c4:	61a2      	str	r2, [r4, #24]
 800e8c6:	2a00      	cmp	r2, #0
 800e8c8:	d067      	beq.n	800e99a <rmw_create_publisher+0x196>
 800e8ca:	4629      	mov	r1, r5
 800e8cc:	4643      	mov	r3, r8
 800e8ce:	4648      	mov	r0, r9
 800e8d0:	f008 fed4 	bl	801767c <create_topic>
 800e8d4:	6260      	str	r0, [r4, #36]	@ 0x24
 800e8d6:	2800      	cmp	r0, #0
 800e8d8:	d063      	beq.n	800e9a2 <rmw_create_publisher+0x19e>
 800e8da:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e8de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e8e2:	2103      	movs	r1, #3
 800e8e4:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800e8e8:	1c42      	adds	r2, r0, #1
 800e8ea:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800e8ee:	f001 ffcf 	bl	8010890 <uxr_object_id>
 800e8f2:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800e8f6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e8fa:	6120      	str	r0, [r4, #16]
 800e8fc:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800e900:	6910      	ldr	r0, [r2, #16]
 800e902:	2506      	movs	r5, #6
 800e904:	9500      	str	r5, [sp, #0]
 800e906:	6819      	ldr	r1, [r3, #0]
 800e908:	6922      	ldr	r2, [r4, #16]
 800e90a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800e90e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e912:	f001 fe1b 	bl	801054c <uxr_buffer_create_publisher_bin>
 800e916:	4602      	mov	r2, r0
 800e918:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e91c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800e920:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e924:	f000 fd62 	bl	800f3ec <run_xrce_session>
 800e928:	b3b8      	cbz	r0, 800e99a <rmw_create_publisher+0x196>
 800e92a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e92e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e932:	2105      	movs	r1, #5
 800e934:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800e938:	1c42      	adds	r2, r0, #1
 800e93a:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800e93e:	f001 ffa7 	bl	8010890 <uxr_object_id>
 800e942:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800e946:	6160      	str	r0, [r4, #20]
 800e948:	691e      	ldr	r6, [r3, #16]
 800e94a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e94e:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800e952:	f10d 0a10 	add.w	sl, sp, #16
 800e956:	4641      	mov	r1, r8
 800e958:	4650      	mov	r0, sl
 800e95a:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800e95e:	f000 fd61 	bl	800f424 <convert_qos_profile>
 800e962:	9503      	str	r5, [sp, #12]
 800e964:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800e968:	9001      	str	r0, [sp, #4]
 800e96a:	f8ad 1008 	strh.w	r1, [sp, #8]
 800e96e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800e972:	9300      	str	r3, [sp, #0]
 800e974:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800e978:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800e97c:	f8d8 1000 	ldr.w	r1, [r8]
 800e980:	4630      	mov	r0, r6
 800e982:	f001 fe13 	bl	80105ac <uxr_buffer_create_datawriter_bin>
 800e986:	4602      	mov	r2, r0
 800e988:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e98c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800e990:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e994:	f000 fd2a 	bl	800f3ec <run_xrce_session>
 800e998:	b938      	cbnz	r0, 800e9aa <rmw_create_publisher+0x1a6>
 800e99a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800e99c:	b108      	cbz	r0, 800e9a2 <rmw_create_publisher+0x19e>
 800e99e:	f000 fc23 	bl	800f1e8 <rmw_uxrce_fini_topic_memory>
 800e9a2:	4638      	mov	r0, r7
 800e9a4:	f000 fbc8 	bl	800f138 <rmw_uxrce_fini_publisher_memory>
 800e9a8:	2700      	movs	r7, #0
 800e9aa:	4638      	mov	r0, r7
 800e9ac:	b007      	add	sp, #28
 800e9ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9b2:	bf00      	nop
 800e9b4:	2000ba24 	.word	0x2000ba24
 800e9b8:	0801bd88 	.word	0x0801bd88
 800e9bc:	0801b3c8 	.word	0x0801b3c8

0800e9c0 <rmw_publisher_get_actual_qos>:
 800e9c0:	b150      	cbz	r0, 800e9d8 <rmw_publisher_get_actual_qos+0x18>
 800e9c2:	b508      	push	{r3, lr}
 800e9c4:	460b      	mov	r3, r1
 800e9c6:	b149      	cbz	r1, 800e9dc <rmw_publisher_get_actual_qos+0x1c>
 800e9c8:	6841      	ldr	r1, [r0, #4]
 800e9ca:	2250      	movs	r2, #80	@ 0x50
 800e9cc:	3128      	adds	r1, #40	@ 0x28
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	f00b fa01 	bl	8019dd6 <memcpy>
 800e9d4:	2000      	movs	r0, #0
 800e9d6:	bd08      	pop	{r3, pc}
 800e9d8:	200b      	movs	r0, #11
 800e9da:	4770      	bx	lr
 800e9dc:	200b      	movs	r0, #11
 800e9de:	bd08      	pop	{r3, pc}

0800e9e0 <rmw_destroy_publisher>:
 800e9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9e2:	b128      	cbz	r0, 800e9f0 <rmw_destroy_publisher+0x10>
 800e9e4:	4604      	mov	r4, r0
 800e9e6:	6800      	ldr	r0, [r0, #0]
 800e9e8:	460d      	mov	r5, r1
 800e9ea:	f000 fe19 	bl	800f620 <is_uxrce_rmw_identifier_valid>
 800e9ee:	b910      	cbnz	r0, 800e9f6 <rmw_destroy_publisher+0x16>
 800e9f0:	2401      	movs	r4, #1
 800e9f2:	4620      	mov	r0, r4
 800e9f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9f6:	6863      	ldr	r3, [r4, #4]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d0f9      	beq.n	800e9f0 <rmw_destroy_publisher+0x10>
 800e9fc:	2d00      	cmp	r5, #0
 800e9fe:	d0f7      	beq.n	800e9f0 <rmw_destroy_publisher+0x10>
 800ea00:	6828      	ldr	r0, [r5, #0]
 800ea02:	f000 fe0d 	bl	800f620 <is_uxrce_rmw_identifier_valid>
 800ea06:	2800      	cmp	r0, #0
 800ea08:	d0f2      	beq.n	800e9f0 <rmw_destroy_publisher+0x10>
 800ea0a:	686c      	ldr	r4, [r5, #4]
 800ea0c:	2c00      	cmp	r4, #0
 800ea0e:	d0ef      	beq.n	800e9f0 <rmw_destroy_publisher+0x10>
 800ea10:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800ea12:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800ea16:	f008 fe81 	bl	801771c <destroy_topic>
 800ea1a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800ea1e:	6962      	ldr	r2, [r4, #20]
 800ea20:	6918      	ldr	r0, [r3, #16]
 800ea22:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ea26:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ea2a:	6819      	ldr	r1, [r3, #0]
 800ea2c:	f001 fcda 	bl	80103e4 <uxr_buffer_delete_entity>
 800ea30:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800ea34:	6922      	ldr	r2, [r4, #16]
 800ea36:	691b      	ldr	r3, [r3, #16]
 800ea38:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800ea3c:	4604      	mov	r4, r0
 800ea3e:	6809      	ldr	r1, [r1, #0]
 800ea40:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800ea44:	f001 fcce 	bl	80103e4 <uxr_buffer_delete_entity>
 800ea48:	693e      	ldr	r6, [r7, #16]
 800ea4a:	4622      	mov	r2, r4
 800ea4c:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800ea50:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800ea54:	4604      	mov	r4, r0
 800ea56:	4630      	mov	r0, r6
 800ea58:	f000 fcc8 	bl	800f3ec <run_xrce_session>
 800ea5c:	693e      	ldr	r6, [r7, #16]
 800ea5e:	4622      	mov	r2, r4
 800ea60:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800ea64:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800ea68:	4604      	mov	r4, r0
 800ea6a:	4630      	mov	r0, r6
 800ea6c:	f000 fcbe 	bl	800f3ec <run_xrce_session>
 800ea70:	b12c      	cbz	r4, 800ea7e <rmw_destroy_publisher+0x9e>
 800ea72:	b120      	cbz	r0, 800ea7e <rmw_destroy_publisher+0x9e>
 800ea74:	2400      	movs	r4, #0
 800ea76:	4628      	mov	r0, r5
 800ea78:	f000 fb5e 	bl	800f138 <rmw_uxrce_fini_publisher_memory>
 800ea7c:	e7b9      	b.n	800e9f2 <rmw_destroy_publisher+0x12>
 800ea7e:	2402      	movs	r4, #2
 800ea80:	e7f9      	b.n	800ea76 <rmw_destroy_publisher+0x96>
 800ea82:	bf00      	nop

0800ea84 <rmw_create_service>:
 800ea84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea88:	b091      	sub	sp, #68	@ 0x44
 800ea8a:	2800      	cmp	r0, #0
 800ea8c:	f000 80ba 	beq.w	800ec04 <rmw_create_service+0x180>
 800ea90:	4689      	mov	r9, r1
 800ea92:	2900      	cmp	r1, #0
 800ea94:	f000 80b6 	beq.w	800ec04 <rmw_create_service+0x180>
 800ea98:	4606      	mov	r6, r0
 800ea9a:	6800      	ldr	r0, [r0, #0]
 800ea9c:	4614      	mov	r4, r2
 800ea9e:	461d      	mov	r5, r3
 800eaa0:	f000 fdbe 	bl	800f620 <is_uxrce_rmw_identifier_valid>
 800eaa4:	2800      	cmp	r0, #0
 800eaa6:	f000 80ad 	beq.w	800ec04 <rmw_create_service+0x180>
 800eaaa:	2c00      	cmp	r4, #0
 800eaac:	f000 80aa 	beq.w	800ec04 <rmw_create_service+0x180>
 800eab0:	7823      	ldrb	r3, [r4, #0]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	f000 80a6 	beq.w	800ec04 <rmw_create_service+0x180>
 800eab8:	2d00      	cmp	r5, #0
 800eaba:	f000 80a3 	beq.w	800ec04 <rmw_create_service+0x180>
 800eabe:	4854      	ldr	r0, [pc, #336]	@ (800ec10 <rmw_create_service+0x18c>)
 800eac0:	f8d6 8004 	ldr.w	r8, [r6, #4]
 800eac4:	f008 fd6c 	bl	80175a0 <get_memory>
 800eac8:	4606      	mov	r6, r0
 800eaca:	2800      	cmp	r0, #0
 800eacc:	f000 809b 	beq.w	800ec06 <rmw_create_service+0x182>
 800ead0:	6887      	ldr	r7, [r0, #8]
 800ead2:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 800ead6:	f008 fdcb 	bl	8017670 <rmw_get_implementation_identifier>
 800eada:	f107 0a88 	add.w	sl, r7, #136	@ 0x88
 800eade:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800eae0:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 800eae4:	4620      	mov	r0, r4
 800eae6:	f7f1 fba5 	bl	8000234 <strlen>
 800eaea:	1c42      	adds	r2, r0, #1
 800eaec:	2a3c      	cmp	r2, #60	@ 0x3c
 800eaee:	f107 067c 	add.w	r6, r7, #124	@ 0x7c
 800eaf2:	f200 8084 	bhi.w	800ebfe <rmw_create_service+0x17a>
 800eaf6:	4621      	mov	r1, r4
 800eaf8:	4650      	mov	r0, sl
 800eafa:	f00b f96c 	bl	8019dd6 <memcpy>
 800eafe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800eb02:	4629      	mov	r1, r5
 800eb04:	f8c7 8078 	str.w	r8, [r7, #120]	@ 0x78
 800eb08:	677b      	str	r3, [r7, #116]	@ 0x74
 800eb0a:	2250      	movs	r2, #80	@ 0x50
 800eb0c:	f107 0020 	add.w	r0, r7, #32
 800eb10:	f00b f961 	bl	8019dd6 <memcpy>
 800eb14:	493f      	ldr	r1, [pc, #252]	@ (800ec14 <rmw_create_service+0x190>)
 800eb16:	4648      	mov	r0, r9
 800eb18:	f000 fd9c 	bl	800f654 <get_service_typesupport_handle>
 800eb1c:	2800      	cmp	r0, #0
 800eb1e:	d06e      	beq.n	800ebfe <rmw_create_service+0x17a>
 800eb20:	6843      	ldr	r3, [r0, #4]
 800eb22:	617b      	str	r3, [r7, #20]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d06a      	beq.n	800ebfe <rmw_create_service+0x17a>
 800eb28:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800eb2c:	f8df a0ec 	ldr.w	sl, [pc, #236]	@ 800ec1c <rmw_create_service+0x198>
 800eb30:	f8df 90ec 	ldr.w	r9, [pc, #236]	@ 800ec20 <rmw_create_service+0x19c>
 800eb34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800eb38:	2108      	movs	r1, #8
 800eb3a:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	@ 0x5a2
 800eb3e:	1c42      	adds	r2, r0, #1
 800eb40:	f8a3 25a2 	strh.w	r2, [r3, #1442]	@ 0x5a2
 800eb44:	f001 fea4 	bl	8010890 <uxr_object_id>
 800eb48:	2364      	movs	r3, #100	@ 0x64
 800eb4a:	6138      	str	r0, [r7, #16]
 800eb4c:	4652      	mov	r2, sl
 800eb4e:	6978      	ldr	r0, [r7, #20]
 800eb50:	4649      	mov	r1, r9
 800eb52:	f000 fcb3 	bl	800f4bc <generate_service_types>
 800eb56:	2800      	cmp	r0, #0
 800eb58:	d051      	beq.n	800ebfe <rmw_create_service+0x17a>
 800eb5a:	f8df b0c8 	ldr.w	fp, [pc, #200]	@ 800ec24 <rmw_create_service+0x1a0>
 800eb5e:	4a2e      	ldr	r2, [pc, #184]	@ (800ec18 <rmw_create_service+0x194>)
 800eb60:	233c      	movs	r3, #60	@ 0x3c
 800eb62:	4659      	mov	r1, fp
 800eb64:	4620      	mov	r0, r4
 800eb66:	f000 fc77 	bl	800f458 <generate_service_topics>
 800eb6a:	2800      	cmp	r0, #0
 800eb6c:	d047      	beq.n	800ebfe <rmw_create_service+0x17a>
 800eb6e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800eb72:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800eb76:	a80c      	add	r0, sp, #48	@ 0x30
 800eb78:	4629      	mov	r1, r5
 800eb7a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800eb7e:	f000 fc51 	bl	800f424 <convert_qos_profile>
 800eb82:	4a25      	ldr	r2, [pc, #148]	@ (800ec18 <rmw_create_service+0x194>)
 800eb84:	9400      	str	r4, [sp, #0]
 800eb86:	e9cd b203 	strd	fp, r2, [sp, #12]
 800eb8a:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 800eb8e:	a80c      	add	r0, sp, #48	@ 0x30
 800eb90:	c803      	ldmia	r0, {r0, r1}
 800eb92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb94:	9005      	str	r0, [sp, #20]
 800eb96:	9a08      	ldr	r2, [sp, #32]
 800eb98:	f8ad 1018 	strh.w	r1, [sp, #24]
 800eb9c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800eba0:	2306      	movs	r3, #6
 800eba2:	9307      	str	r3, [sp, #28]
 800eba4:	6811      	ldr	r1, [r2, #0]
 800eba6:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800ebaa:	693a      	ldr	r2, [r7, #16]
 800ebac:	f001 fd74 	bl	8010698 <uxr_buffer_create_replier_bin>
 800ebb0:	4602      	mov	r2, r0
 800ebb2:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800ebb6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800ebba:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800ebbe:	f000 fc15 	bl	800f3ec <run_xrce_session>
 800ebc2:	b1e0      	cbz	r0, 800ebfe <rmw_create_service+0x17a>
 800ebc4:	7a2b      	ldrb	r3, [r5, #8]
 800ebc6:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800ebca:	2200      	movs	r2, #0
 800ebcc:	2b02      	cmp	r3, #2
 800ebce:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800ebd2:	e9cd 120e 	strd	r1, r2, [sp, #56]	@ 0x38
 800ebd6:	bf0c      	ite	eq
 800ebd8:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	@ 0x37c
 800ebdc:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	@ 0x374
 800ebe0:	673a      	str	r2, [r7, #112]	@ 0x70
 800ebe2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ebe4:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800ebe8:	ab0e      	add	r3, sp, #56	@ 0x38
 800ebea:	9300      	str	r3, [sp, #0]
 800ebec:	6811      	ldr	r1, [r2, #0]
 800ebee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ebf0:	693a      	ldr	r2, [r7, #16]
 800ebf2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ebf6:	f001 fe7b 	bl	80108f0 <uxr_buffer_request_data>
 800ebfa:	8338      	strh	r0, [r7, #24]
 800ebfc:	e003      	b.n	800ec06 <rmw_create_service+0x182>
 800ebfe:	4630      	mov	r0, r6
 800ec00:	f000 fac6 	bl	800f190 <rmw_uxrce_fini_service_memory>
 800ec04:	2600      	movs	r6, #0
 800ec06:	4630      	mov	r0, r6
 800ec08:	b011      	add	sp, #68	@ 0x44
 800ec0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec0e:	bf00      	nop
 800ec10:	2000ba34 	.word	0x2000ba34
 800ec14:	0801b3c8 	.word	0x0801b3c8
 800ec18:	20006fdc 	.word	0x20006fdc
 800ec1c:	20007018 	.word	0x20007018
 800ec20:	20006f78 	.word	0x20006f78
 800ec24:	20006f3c 	.word	0x20006f3c

0800ec28 <rmw_destroy_service>:
 800ec28:	b570      	push	{r4, r5, r6, lr}
 800ec2a:	b128      	cbz	r0, 800ec38 <rmw_destroy_service+0x10>
 800ec2c:	4604      	mov	r4, r0
 800ec2e:	6800      	ldr	r0, [r0, #0]
 800ec30:	460d      	mov	r5, r1
 800ec32:	f000 fcf5 	bl	800f620 <is_uxrce_rmw_identifier_valid>
 800ec36:	b910      	cbnz	r0, 800ec3e <rmw_destroy_service+0x16>
 800ec38:	2401      	movs	r4, #1
 800ec3a:	4620      	mov	r0, r4
 800ec3c:	bd70      	pop	{r4, r5, r6, pc}
 800ec3e:	6863      	ldr	r3, [r4, #4]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d0f9      	beq.n	800ec38 <rmw_destroy_service+0x10>
 800ec44:	2d00      	cmp	r5, #0
 800ec46:	d0f7      	beq.n	800ec38 <rmw_destroy_service+0x10>
 800ec48:	6828      	ldr	r0, [r5, #0]
 800ec4a:	f000 fce9 	bl	800f620 <is_uxrce_rmw_identifier_valid>
 800ec4e:	2800      	cmp	r0, #0
 800ec50:	d0f2      	beq.n	800ec38 <rmw_destroy_service+0x10>
 800ec52:	686e      	ldr	r6, [r5, #4]
 800ec54:	2e00      	cmp	r6, #0
 800ec56:	d0ef      	beq.n	800ec38 <rmw_destroy_service+0x10>
 800ec58:	6864      	ldr	r4, [r4, #4]
 800ec5a:	6932      	ldr	r2, [r6, #16]
 800ec5c:	6920      	ldr	r0, [r4, #16]
 800ec5e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ec62:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ec66:	6819      	ldr	r1, [r3, #0]
 800ec68:	f001 fe7c 	bl	8010964 <uxr_buffer_cancel_data>
 800ec6c:	4602      	mov	r2, r0
 800ec6e:	6920      	ldr	r0, [r4, #16]
 800ec70:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ec74:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ec78:	f000 fbb8 	bl	800f3ec <run_xrce_session>
 800ec7c:	6920      	ldr	r0, [r4, #16]
 800ec7e:	6932      	ldr	r2, [r6, #16]
 800ec80:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ec84:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ec88:	6819      	ldr	r1, [r3, #0]
 800ec8a:	f001 fbab 	bl	80103e4 <uxr_buffer_delete_entity>
 800ec8e:	4602      	mov	r2, r0
 800ec90:	6920      	ldr	r0, [r4, #16]
 800ec92:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ec96:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ec9a:	f000 fba7 	bl	800f3ec <run_xrce_session>
 800ec9e:	2800      	cmp	r0, #0
 800eca0:	4628      	mov	r0, r5
 800eca2:	bf14      	ite	ne
 800eca4:	2400      	movne	r4, #0
 800eca6:	2402      	moveq	r4, #2
 800eca8:	f000 fa72 	bl	800f190 <rmw_uxrce_fini_service_memory>
 800ecac:	e7c5      	b.n	800ec3a <rmw_destroy_service+0x12>
 800ecae:	bf00      	nop

0800ecb0 <rmw_service_response_publisher_get_actual_qos>:
 800ecb0:	b150      	cbz	r0, 800ecc8 <rmw_service_response_publisher_get_actual_qos+0x18>
 800ecb2:	b508      	push	{r3, lr}
 800ecb4:	460b      	mov	r3, r1
 800ecb6:	b149      	cbz	r1, 800eccc <rmw_service_response_publisher_get_actual_qos+0x1c>
 800ecb8:	6841      	ldr	r1, [r0, #4]
 800ecba:	2250      	movs	r2, #80	@ 0x50
 800ecbc:	3120      	adds	r1, #32
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	f00b f889 	bl	8019dd6 <memcpy>
 800ecc4:	2000      	movs	r0, #0
 800ecc6:	bd08      	pop	{r3, pc}
 800ecc8:	200b      	movs	r0, #11
 800ecca:	4770      	bx	lr
 800eccc:	200b      	movs	r0, #11
 800ecce:	bd08      	pop	{r3, pc}

0800ecd0 <rmw_service_request_subscription_get_actual_qos>:
 800ecd0:	b150      	cbz	r0, 800ece8 <rmw_service_request_subscription_get_actual_qos+0x18>
 800ecd2:	b508      	push	{r3, lr}
 800ecd4:	460b      	mov	r3, r1
 800ecd6:	b149      	cbz	r1, 800ecec <rmw_service_request_subscription_get_actual_qos+0x1c>
 800ecd8:	6841      	ldr	r1, [r0, #4]
 800ecda:	2250      	movs	r2, #80	@ 0x50
 800ecdc:	3120      	adds	r1, #32
 800ecde:	4618      	mov	r0, r3
 800ece0:	f00b f879 	bl	8019dd6 <memcpy>
 800ece4:	2000      	movs	r0, #0
 800ece6:	bd08      	pop	{r3, pc}
 800ece8:	200b      	movs	r0, #11
 800ecea:	4770      	bx	lr
 800ecec:	200b      	movs	r0, #11
 800ecee:	bd08      	pop	{r3, pc}

0800ecf0 <rmw_destroy_subscription>:
 800ecf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecf2:	b128      	cbz	r0, 800ed00 <rmw_destroy_subscription+0x10>
 800ecf4:	4604      	mov	r4, r0
 800ecf6:	6800      	ldr	r0, [r0, #0]
 800ecf8:	460d      	mov	r5, r1
 800ecfa:	f000 fc91 	bl	800f620 <is_uxrce_rmw_identifier_valid>
 800ecfe:	b910      	cbnz	r0, 800ed06 <rmw_destroy_subscription+0x16>
 800ed00:	2401      	movs	r4, #1
 800ed02:	4620      	mov	r0, r4
 800ed04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed06:	6863      	ldr	r3, [r4, #4]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d0f9      	beq.n	800ed00 <rmw_destroy_subscription+0x10>
 800ed0c:	2d00      	cmp	r5, #0
 800ed0e:	d0f7      	beq.n	800ed00 <rmw_destroy_subscription+0x10>
 800ed10:	6828      	ldr	r0, [r5, #0]
 800ed12:	f000 fc85 	bl	800f620 <is_uxrce_rmw_identifier_valid>
 800ed16:	2800      	cmp	r0, #0
 800ed18:	d0f2      	beq.n	800ed00 <rmw_destroy_subscription+0x10>
 800ed1a:	686c      	ldr	r4, [r5, #4]
 800ed1c:	2c00      	cmp	r4, #0
 800ed1e:	d0ef      	beq.n	800ed00 <rmw_destroy_subscription+0x10>
 800ed20:	6a26      	ldr	r6, [r4, #32]
 800ed22:	6962      	ldr	r2, [r4, #20]
 800ed24:	6930      	ldr	r0, [r6, #16]
 800ed26:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ed2a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ed2e:	6819      	ldr	r1, [r3, #0]
 800ed30:	f001 fe18 	bl	8010964 <uxr_buffer_cancel_data>
 800ed34:	4602      	mov	r2, r0
 800ed36:	6930      	ldr	r0, [r6, #16]
 800ed38:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ed3c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ed40:	f000 fb54 	bl	800f3ec <run_xrce_session>
 800ed44:	69e0      	ldr	r0, [r4, #28]
 800ed46:	f008 fce9 	bl	801771c <destroy_topic>
 800ed4a:	6a23      	ldr	r3, [r4, #32]
 800ed4c:	6962      	ldr	r2, [r4, #20]
 800ed4e:	6918      	ldr	r0, [r3, #16]
 800ed50:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ed54:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ed58:	6819      	ldr	r1, [r3, #0]
 800ed5a:	f001 fb43 	bl	80103e4 <uxr_buffer_delete_entity>
 800ed5e:	6a23      	ldr	r3, [r4, #32]
 800ed60:	6922      	ldr	r2, [r4, #16]
 800ed62:	691b      	ldr	r3, [r3, #16]
 800ed64:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800ed68:	4604      	mov	r4, r0
 800ed6a:	6809      	ldr	r1, [r1, #0]
 800ed6c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800ed70:	f001 fb38 	bl	80103e4 <uxr_buffer_delete_entity>
 800ed74:	6937      	ldr	r7, [r6, #16]
 800ed76:	4622      	mov	r2, r4
 800ed78:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800ed7c:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800ed80:	4604      	mov	r4, r0
 800ed82:	4638      	mov	r0, r7
 800ed84:	f000 fb32 	bl	800f3ec <run_xrce_session>
 800ed88:	6936      	ldr	r6, [r6, #16]
 800ed8a:	4622      	mov	r2, r4
 800ed8c:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800ed90:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800ed94:	4604      	mov	r4, r0
 800ed96:	4630      	mov	r0, r6
 800ed98:	f000 fb28 	bl	800f3ec <run_xrce_session>
 800ed9c:	b12c      	cbz	r4, 800edaa <rmw_destroy_subscription+0xba>
 800ed9e:	b120      	cbz	r0, 800edaa <rmw_destroy_subscription+0xba>
 800eda0:	2400      	movs	r4, #0
 800eda2:	4628      	mov	r0, r5
 800eda4:	f000 f9de 	bl	800f164 <rmw_uxrce_fini_subscription_memory>
 800eda8:	e7ab      	b.n	800ed02 <rmw_destroy_subscription+0x12>
 800edaa:	2402      	movs	r4, #2
 800edac:	e7f9      	b.n	800eda2 <rmw_destroy_subscription+0xb2>
 800edae:	bf00      	nop

0800edb0 <rmw_uxrce_transport_init>:
 800edb0:	b508      	push	{r3, lr}
 800edb2:	b108      	cbz	r0, 800edb8 <rmw_uxrce_transport_init+0x8>
 800edb4:	f100 0210 	add.w	r2, r0, #16
 800edb8:	b139      	cbz	r1, 800edca <rmw_uxrce_transport_init+0x1a>
 800edba:	6949      	ldr	r1, [r1, #20]
 800edbc:	4610      	mov	r0, r2
 800edbe:	f001 fd2f 	bl	8010820 <uxr_init_custom_transport>
 800edc2:	f080 0001 	eor.w	r0, r0, #1
 800edc6:	b2c0      	uxtb	r0, r0
 800edc8:	bd08      	pop	{r3, pc}
 800edca:	4b04      	ldr	r3, [pc, #16]	@ (800eddc <rmw_uxrce_transport_init+0x2c>)
 800edcc:	4610      	mov	r0, r2
 800edce:	6859      	ldr	r1, [r3, #4]
 800edd0:	f001 fd26 	bl	8010820 <uxr_init_custom_transport>
 800edd4:	f080 0001 	eor.w	r0, r0, #1
 800edd8:	b2c0      	uxtb	r0, r0
 800edda:	bd08      	pop	{r3, pc}
 800eddc:	20006ee4 	.word	0x20006ee4

0800ede0 <rmw_uros_epoch_millis>:
 800ede0:	4b05      	ldr	r3, [pc, #20]	@ (800edf8 <rmw_uros_epoch_millis+0x18>)
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	b123      	cbz	r3, 800edf0 <rmw_uros_epoch_millis+0x10>
 800ede6:	6898      	ldr	r0, [r3, #8]
 800ede8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800edec:	f001 bfc6 	b.w	8010d7c <uxr_epoch_millis>
 800edf0:	2000      	movs	r0, #0
 800edf2:	2100      	movs	r1, #0
 800edf4:	4770      	bx	lr
 800edf6:	bf00      	nop
 800edf8:	2000ba44 	.word	0x2000ba44

0800edfc <rmw_uros_epoch_nanos>:
 800edfc:	4b05      	ldr	r3, [pc, #20]	@ (800ee14 <rmw_uros_epoch_nanos+0x18>)
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	b123      	cbz	r3, 800ee0c <rmw_uros_epoch_nanos+0x10>
 800ee02:	6898      	ldr	r0, [r3, #8]
 800ee04:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ee08:	f001 bfca 	b.w	8010da0 <uxr_epoch_nanos>
 800ee0c:	2000      	movs	r0, #0
 800ee0e:	2100      	movs	r1, #0
 800ee10:	4770      	bx	lr
 800ee12:	bf00      	nop
 800ee14:	2000ba44 	.word	0x2000ba44

0800ee18 <rmw_uros_sync_session>:
 800ee18:	b508      	push	{r3, lr}
 800ee1a:	4b07      	ldr	r3, [pc, #28]	@ (800ee38 <rmw_uros_sync_session+0x20>)
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	b14b      	cbz	r3, 800ee34 <rmw_uros_sync_session+0x1c>
 800ee20:	4601      	mov	r1, r0
 800ee22:	6898      	ldr	r0, [r3, #8]
 800ee24:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ee28:	f002 fbfe 	bl	8011628 <uxr_sync_session>
 800ee2c:	f080 0001 	eor.w	r0, r0, #1
 800ee30:	b2c0      	uxtb	r0, r0
 800ee32:	bd08      	pop	{r3, pc}
 800ee34:	2001      	movs	r0, #1
 800ee36:	bd08      	pop	{r3, pc}
 800ee38:	2000ba44 	.word	0x2000ba44

0800ee3c <rmw_uxrce_init_service_memory>:
 800ee3c:	b1e2      	cbz	r2, 800ee78 <rmw_uxrce_init_service_memory+0x3c>
 800ee3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee42:	7b05      	ldrb	r5, [r0, #12]
 800ee44:	4606      	mov	r6, r0
 800ee46:	b9ad      	cbnz	r5, 800ee74 <rmw_uxrce_init_service_memory+0x38>
 800ee48:	23c8      	movs	r3, #200	@ 0xc8
 800ee4a:	e9c0 5500 	strd	r5, r5, [r0]
 800ee4e:	6083      	str	r3, [r0, #8]
 800ee50:	f240 1301 	movw	r3, #257	@ 0x101
 800ee54:	4617      	mov	r7, r2
 800ee56:	8183      	strh	r3, [r0, #12]
 800ee58:	460c      	mov	r4, r1
 800ee5a:	46a8      	mov	r8, r5
 800ee5c:	4621      	mov	r1, r4
 800ee5e:	4630      	mov	r0, r6
 800ee60:	3501      	adds	r5, #1
 800ee62:	f008 fbad 	bl	80175c0 <put_memory>
 800ee66:	42af      	cmp	r7, r5
 800ee68:	60a4      	str	r4, [r4, #8]
 800ee6a:	f884 800c 	strb.w	r8, [r4, #12]
 800ee6e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800ee72:	d1f3      	bne.n	800ee5c <rmw_uxrce_init_service_memory+0x20>
 800ee74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee78:	4770      	bx	lr
 800ee7a:	bf00      	nop

0800ee7c <rmw_uxrce_init_client_memory>:
 800ee7c:	b1e2      	cbz	r2, 800eeb8 <rmw_uxrce_init_client_memory+0x3c>
 800ee7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee82:	7b05      	ldrb	r5, [r0, #12]
 800ee84:	4606      	mov	r6, r0
 800ee86:	b9ad      	cbnz	r5, 800eeb4 <rmw_uxrce_init_client_memory+0x38>
 800ee88:	23c8      	movs	r3, #200	@ 0xc8
 800ee8a:	e9c0 5500 	strd	r5, r5, [r0]
 800ee8e:	6083      	str	r3, [r0, #8]
 800ee90:	f240 1301 	movw	r3, #257	@ 0x101
 800ee94:	4617      	mov	r7, r2
 800ee96:	8183      	strh	r3, [r0, #12]
 800ee98:	460c      	mov	r4, r1
 800ee9a:	46a8      	mov	r8, r5
 800ee9c:	4621      	mov	r1, r4
 800ee9e:	4630      	mov	r0, r6
 800eea0:	3501      	adds	r5, #1
 800eea2:	f008 fb8d 	bl	80175c0 <put_memory>
 800eea6:	42af      	cmp	r7, r5
 800eea8:	60a4      	str	r4, [r4, #8]
 800eeaa:	f884 800c 	strb.w	r8, [r4, #12]
 800eeae:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800eeb2:	d1f3      	bne.n	800ee9c <rmw_uxrce_init_client_memory+0x20>
 800eeb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eeb8:	4770      	bx	lr
 800eeba:	bf00      	nop

0800eebc <rmw_uxrce_init_publisher_memory>:
 800eebc:	b1e2      	cbz	r2, 800eef8 <rmw_uxrce_init_publisher_memory+0x3c>
 800eebe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eec2:	7b05      	ldrb	r5, [r0, #12]
 800eec4:	4606      	mov	r6, r0
 800eec6:	b9ad      	cbnz	r5, 800eef4 <rmw_uxrce_init_publisher_memory+0x38>
 800eec8:	23d8      	movs	r3, #216	@ 0xd8
 800eeca:	e9c0 5500 	strd	r5, r5, [r0]
 800eece:	6083      	str	r3, [r0, #8]
 800eed0:	f240 1301 	movw	r3, #257	@ 0x101
 800eed4:	4617      	mov	r7, r2
 800eed6:	8183      	strh	r3, [r0, #12]
 800eed8:	460c      	mov	r4, r1
 800eeda:	46a8      	mov	r8, r5
 800eedc:	4621      	mov	r1, r4
 800eede:	4630      	mov	r0, r6
 800eee0:	3501      	adds	r5, #1
 800eee2:	f008 fb6d 	bl	80175c0 <put_memory>
 800eee6:	42af      	cmp	r7, r5
 800eee8:	60a4      	str	r4, [r4, #8]
 800eeea:	f884 800c 	strb.w	r8, [r4, #12]
 800eeee:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800eef2:	d1f3      	bne.n	800eedc <rmw_uxrce_init_publisher_memory+0x20>
 800eef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eef8:	4770      	bx	lr
 800eefa:	bf00      	nop

0800eefc <rmw_uxrce_init_subscription_memory>:
 800eefc:	b1e2      	cbz	r2, 800ef38 <rmw_uxrce_init_subscription_memory+0x3c>
 800eefe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef02:	7b05      	ldrb	r5, [r0, #12]
 800ef04:	4606      	mov	r6, r0
 800ef06:	b9ad      	cbnz	r5, 800ef34 <rmw_uxrce_init_subscription_memory+0x38>
 800ef08:	23d8      	movs	r3, #216	@ 0xd8
 800ef0a:	e9c0 5500 	strd	r5, r5, [r0]
 800ef0e:	6083      	str	r3, [r0, #8]
 800ef10:	f240 1301 	movw	r3, #257	@ 0x101
 800ef14:	4617      	mov	r7, r2
 800ef16:	8183      	strh	r3, [r0, #12]
 800ef18:	460c      	mov	r4, r1
 800ef1a:	46a8      	mov	r8, r5
 800ef1c:	4621      	mov	r1, r4
 800ef1e:	4630      	mov	r0, r6
 800ef20:	3501      	adds	r5, #1
 800ef22:	f008 fb4d 	bl	80175c0 <put_memory>
 800ef26:	42af      	cmp	r7, r5
 800ef28:	60a4      	str	r4, [r4, #8]
 800ef2a:	f884 800c 	strb.w	r8, [r4, #12]
 800ef2e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800ef32:	d1f3      	bne.n	800ef1c <rmw_uxrce_init_subscription_memory+0x20>
 800ef34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef38:	4770      	bx	lr
 800ef3a:	bf00      	nop

0800ef3c <rmw_uxrce_init_node_memory>:
 800ef3c:	b1e2      	cbz	r2, 800ef78 <rmw_uxrce_init_node_memory+0x3c>
 800ef3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef42:	7b05      	ldrb	r5, [r0, #12]
 800ef44:	4606      	mov	r6, r0
 800ef46:	b9ad      	cbnz	r5, 800ef74 <rmw_uxrce_init_node_memory+0x38>
 800ef48:	23a4      	movs	r3, #164	@ 0xa4
 800ef4a:	e9c0 5500 	strd	r5, r5, [r0]
 800ef4e:	6083      	str	r3, [r0, #8]
 800ef50:	f240 1301 	movw	r3, #257	@ 0x101
 800ef54:	4617      	mov	r7, r2
 800ef56:	8183      	strh	r3, [r0, #12]
 800ef58:	460c      	mov	r4, r1
 800ef5a:	46a8      	mov	r8, r5
 800ef5c:	4621      	mov	r1, r4
 800ef5e:	4630      	mov	r0, r6
 800ef60:	3501      	adds	r5, #1
 800ef62:	f008 fb2d 	bl	80175c0 <put_memory>
 800ef66:	42af      	cmp	r7, r5
 800ef68:	60a4      	str	r4, [r4, #8]
 800ef6a:	f884 800c 	strb.w	r8, [r4, #12]
 800ef6e:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800ef72:	d1f3      	bne.n	800ef5c <rmw_uxrce_init_node_memory+0x20>
 800ef74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef78:	4770      	bx	lr
 800ef7a:	bf00      	nop

0800ef7c <rmw_uxrce_init_session_memory>:
 800ef7c:	b1ea      	cbz	r2, 800efba <rmw_uxrce_init_session_memory+0x3e>
 800ef7e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef82:	7b05      	ldrb	r5, [r0, #12]
 800ef84:	4606      	mov	r6, r0
 800ef86:	b9b5      	cbnz	r5, 800efb6 <rmw_uxrce_init_session_memory+0x3a>
 800ef88:	e9c0 5500 	strd	r5, r5, [r0]
 800ef8c:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800ef90:	f240 1301 	movw	r3, #257	@ 0x101
 800ef94:	4617      	mov	r7, r2
 800ef96:	f8c0 8008 	str.w	r8, [r0, #8]
 800ef9a:	460c      	mov	r4, r1
 800ef9c:	8183      	strh	r3, [r0, #12]
 800ef9e:	46a9      	mov	r9, r5
 800efa0:	4621      	mov	r1, r4
 800efa2:	4630      	mov	r0, r6
 800efa4:	3501      	adds	r5, #1
 800efa6:	f008 fb0b 	bl	80175c0 <put_memory>
 800efaa:	42af      	cmp	r7, r5
 800efac:	60a4      	str	r4, [r4, #8]
 800efae:	f884 900c 	strb.w	r9, [r4, #12]
 800efb2:	4444      	add	r4, r8
 800efb4:	d1f4      	bne.n	800efa0 <rmw_uxrce_init_session_memory+0x24>
 800efb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800efba:	4770      	bx	lr

0800efbc <rmw_uxrce_init_topic_memory>:
 800efbc:	b1e2      	cbz	r2, 800eff8 <rmw_uxrce_init_topic_memory+0x3c>
 800efbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efc2:	7b05      	ldrb	r5, [r0, #12]
 800efc4:	4606      	mov	r6, r0
 800efc6:	b9ad      	cbnz	r5, 800eff4 <rmw_uxrce_init_topic_memory+0x38>
 800efc8:	231c      	movs	r3, #28
 800efca:	e9c0 5500 	strd	r5, r5, [r0]
 800efce:	6083      	str	r3, [r0, #8]
 800efd0:	f240 1301 	movw	r3, #257	@ 0x101
 800efd4:	4617      	mov	r7, r2
 800efd6:	8183      	strh	r3, [r0, #12]
 800efd8:	460c      	mov	r4, r1
 800efda:	46a8      	mov	r8, r5
 800efdc:	4621      	mov	r1, r4
 800efde:	4630      	mov	r0, r6
 800efe0:	3501      	adds	r5, #1
 800efe2:	f008 faed 	bl	80175c0 <put_memory>
 800efe6:	42af      	cmp	r7, r5
 800efe8:	60a4      	str	r4, [r4, #8]
 800efea:	f884 800c 	strb.w	r8, [r4, #12]
 800efee:	f104 041c 	add.w	r4, r4, #28
 800eff2:	d1f3      	bne.n	800efdc <rmw_uxrce_init_topic_memory+0x20>
 800eff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eff8:	4770      	bx	lr
 800effa:	bf00      	nop

0800effc <rmw_uxrce_init_static_input_buffer_memory>:
 800effc:	b1ea      	cbz	r2, 800f03a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800effe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f002:	7b05      	ldrb	r5, [r0, #12]
 800f004:	4606      	mov	r6, r0
 800f006:	b9b5      	cbnz	r5, 800f036 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800f008:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800f00c:	e9c0 5500 	strd	r5, r5, [r0]
 800f010:	6083      	str	r3, [r0, #8]
 800f012:	f240 1301 	movw	r3, #257	@ 0x101
 800f016:	4617      	mov	r7, r2
 800f018:	8183      	strh	r3, [r0, #12]
 800f01a:	460c      	mov	r4, r1
 800f01c:	46a8      	mov	r8, r5
 800f01e:	4621      	mov	r1, r4
 800f020:	4630      	mov	r0, r6
 800f022:	3501      	adds	r5, #1
 800f024:	f008 facc 	bl	80175c0 <put_memory>
 800f028:	42af      	cmp	r7, r5
 800f02a:	60a4      	str	r4, [r4, #8]
 800f02c:	f884 800c 	strb.w	r8, [r4, #12]
 800f030:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800f034:	d1f3      	bne.n	800f01e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800f036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f03a:	4770      	bx	lr

0800f03c <rmw_uxrce_init_init_options_impl_memory>:
 800f03c:	b1e2      	cbz	r2, 800f078 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800f03e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f042:	7b05      	ldrb	r5, [r0, #12]
 800f044:	4606      	mov	r6, r0
 800f046:	b9ad      	cbnz	r5, 800f074 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800f048:	232c      	movs	r3, #44	@ 0x2c
 800f04a:	e9c0 5500 	strd	r5, r5, [r0]
 800f04e:	6083      	str	r3, [r0, #8]
 800f050:	f240 1301 	movw	r3, #257	@ 0x101
 800f054:	4617      	mov	r7, r2
 800f056:	8183      	strh	r3, [r0, #12]
 800f058:	460c      	mov	r4, r1
 800f05a:	46a8      	mov	r8, r5
 800f05c:	4621      	mov	r1, r4
 800f05e:	4630      	mov	r0, r6
 800f060:	3501      	adds	r5, #1
 800f062:	f008 faad 	bl	80175c0 <put_memory>
 800f066:	42af      	cmp	r7, r5
 800f068:	60a4      	str	r4, [r4, #8]
 800f06a:	f884 800c 	strb.w	r8, [r4, #12]
 800f06e:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800f072:	d1f3      	bne.n	800f05c <rmw_uxrce_init_init_options_impl_memory+0x20>
 800f074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f078:	4770      	bx	lr
 800f07a:	bf00      	nop

0800f07c <rmw_uxrce_init_wait_set_memory>:
 800f07c:	b1e2      	cbz	r2, 800f0b8 <rmw_uxrce_init_wait_set_memory+0x3c>
 800f07e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f082:	7b05      	ldrb	r5, [r0, #12]
 800f084:	4606      	mov	r6, r0
 800f086:	b9ad      	cbnz	r5, 800f0b4 <rmw_uxrce_init_wait_set_memory+0x38>
 800f088:	231c      	movs	r3, #28
 800f08a:	e9c0 5500 	strd	r5, r5, [r0]
 800f08e:	6083      	str	r3, [r0, #8]
 800f090:	f240 1301 	movw	r3, #257	@ 0x101
 800f094:	4617      	mov	r7, r2
 800f096:	8183      	strh	r3, [r0, #12]
 800f098:	460c      	mov	r4, r1
 800f09a:	46a8      	mov	r8, r5
 800f09c:	4621      	mov	r1, r4
 800f09e:	4630      	mov	r0, r6
 800f0a0:	3501      	adds	r5, #1
 800f0a2:	f008 fa8d 	bl	80175c0 <put_memory>
 800f0a6:	42af      	cmp	r7, r5
 800f0a8:	60a4      	str	r4, [r4, #8]
 800f0aa:	f884 800c 	strb.w	r8, [r4, #12]
 800f0ae:	f104 041c 	add.w	r4, r4, #28
 800f0b2:	d1f3      	bne.n	800f09c <rmw_uxrce_init_wait_set_memory+0x20>
 800f0b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0b8:	4770      	bx	lr
 800f0ba:	bf00      	nop

0800f0bc <rmw_uxrce_init_guard_condition_memory>:
 800f0bc:	b1e2      	cbz	r2, 800f0f8 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800f0be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0c2:	7b05      	ldrb	r5, [r0, #12]
 800f0c4:	4606      	mov	r6, r0
 800f0c6:	b9ad      	cbnz	r5, 800f0f4 <rmw_uxrce_init_guard_condition_memory+0x38>
 800f0c8:	2320      	movs	r3, #32
 800f0ca:	e9c0 5500 	strd	r5, r5, [r0]
 800f0ce:	6083      	str	r3, [r0, #8]
 800f0d0:	f240 1301 	movw	r3, #257	@ 0x101
 800f0d4:	4617      	mov	r7, r2
 800f0d6:	8183      	strh	r3, [r0, #12]
 800f0d8:	460c      	mov	r4, r1
 800f0da:	46a8      	mov	r8, r5
 800f0dc:	4621      	mov	r1, r4
 800f0de:	4630      	mov	r0, r6
 800f0e0:	3501      	adds	r5, #1
 800f0e2:	f008 fa6d 	bl	80175c0 <put_memory>
 800f0e6:	42af      	cmp	r7, r5
 800f0e8:	60a4      	str	r4, [r4, #8]
 800f0ea:	f884 800c 	strb.w	r8, [r4, #12]
 800f0ee:	f104 0420 	add.w	r4, r4, #32
 800f0f2:	d1f3      	bne.n	800f0dc <rmw_uxrce_init_guard_condition_memory+0x20>
 800f0f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0f8:	4770      	bx	lr
 800f0fa:	bf00      	nop

0800f0fc <rmw_uxrce_fini_session_memory>:
 800f0fc:	4601      	mov	r1, r0
 800f0fe:	4801      	ldr	r0, [pc, #4]	@ (800f104 <rmw_uxrce_fini_session_memory+0x8>)
 800f100:	f008 ba5e 	b.w	80175c0 <put_memory>
 800f104:	2000ba44 	.word	0x2000ba44

0800f108 <rmw_uxrce_fini_node_memory>:
 800f108:	b538      	push	{r3, r4, r5, lr}
 800f10a:	4604      	mov	r4, r0
 800f10c:	6800      	ldr	r0, [r0, #0]
 800f10e:	b128      	cbz	r0, 800f11c <rmw_uxrce_fini_node_memory+0x14>
 800f110:	4b07      	ldr	r3, [pc, #28]	@ (800f130 <rmw_uxrce_fini_node_memory+0x28>)
 800f112:	6819      	ldr	r1, [r3, #0]
 800f114:	f7f1 f884 	bl	8000220 <strcmp>
 800f118:	b940      	cbnz	r0, 800f12c <rmw_uxrce_fini_node_memory+0x24>
 800f11a:	6020      	str	r0, [r4, #0]
 800f11c:	6861      	ldr	r1, [r4, #4]
 800f11e:	b129      	cbz	r1, 800f12c <rmw_uxrce_fini_node_memory+0x24>
 800f120:	2500      	movs	r5, #0
 800f122:	4804      	ldr	r0, [pc, #16]	@ (800f134 <rmw_uxrce_fini_node_memory+0x2c>)
 800f124:	610d      	str	r5, [r1, #16]
 800f126:	f008 fa4b 	bl	80175c0 <put_memory>
 800f12a:	6065      	str	r5, [r4, #4]
 800f12c:	bd38      	pop	{r3, r4, r5, pc}
 800f12e:	bf00      	nop
 800f130:	0801c850 	.word	0x0801c850
 800f134:	2000ba14 	.word	0x2000ba14

0800f138 <rmw_uxrce_fini_publisher_memory>:
 800f138:	b510      	push	{r4, lr}
 800f13a:	4604      	mov	r4, r0
 800f13c:	6800      	ldr	r0, [r0, #0]
 800f13e:	b128      	cbz	r0, 800f14c <rmw_uxrce_fini_publisher_memory+0x14>
 800f140:	4b06      	ldr	r3, [pc, #24]	@ (800f15c <rmw_uxrce_fini_publisher_memory+0x24>)
 800f142:	6819      	ldr	r1, [r3, #0]
 800f144:	f7f1 f86c 	bl	8000220 <strcmp>
 800f148:	b938      	cbnz	r0, 800f15a <rmw_uxrce_fini_publisher_memory+0x22>
 800f14a:	6020      	str	r0, [r4, #0]
 800f14c:	6861      	ldr	r1, [r4, #4]
 800f14e:	b121      	cbz	r1, 800f15a <rmw_uxrce_fini_publisher_memory+0x22>
 800f150:	4803      	ldr	r0, [pc, #12]	@ (800f160 <rmw_uxrce_fini_publisher_memory+0x28>)
 800f152:	f008 fa35 	bl	80175c0 <put_memory>
 800f156:	2300      	movs	r3, #0
 800f158:	6063      	str	r3, [r4, #4]
 800f15a:	bd10      	pop	{r4, pc}
 800f15c:	0801c850 	.word	0x0801c850
 800f160:	2000ba24 	.word	0x2000ba24

0800f164 <rmw_uxrce_fini_subscription_memory>:
 800f164:	b510      	push	{r4, lr}
 800f166:	4604      	mov	r4, r0
 800f168:	6800      	ldr	r0, [r0, #0]
 800f16a:	b128      	cbz	r0, 800f178 <rmw_uxrce_fini_subscription_memory+0x14>
 800f16c:	4b06      	ldr	r3, [pc, #24]	@ (800f188 <rmw_uxrce_fini_subscription_memory+0x24>)
 800f16e:	6819      	ldr	r1, [r3, #0]
 800f170:	f7f1 f856 	bl	8000220 <strcmp>
 800f174:	b938      	cbnz	r0, 800f186 <rmw_uxrce_fini_subscription_memory+0x22>
 800f176:	6020      	str	r0, [r4, #0]
 800f178:	6861      	ldr	r1, [r4, #4]
 800f17a:	b121      	cbz	r1, 800f186 <rmw_uxrce_fini_subscription_memory+0x22>
 800f17c:	4803      	ldr	r0, [pc, #12]	@ (800f18c <rmw_uxrce_fini_subscription_memory+0x28>)
 800f17e:	f008 fa1f 	bl	80175c0 <put_memory>
 800f182:	2300      	movs	r3, #0
 800f184:	6063      	str	r3, [r4, #4]
 800f186:	bd10      	pop	{r4, pc}
 800f188:	0801c850 	.word	0x0801c850
 800f18c:	2000ba64 	.word	0x2000ba64

0800f190 <rmw_uxrce_fini_service_memory>:
 800f190:	b510      	push	{r4, lr}
 800f192:	4604      	mov	r4, r0
 800f194:	6800      	ldr	r0, [r0, #0]
 800f196:	b128      	cbz	r0, 800f1a4 <rmw_uxrce_fini_service_memory+0x14>
 800f198:	4b06      	ldr	r3, [pc, #24]	@ (800f1b4 <rmw_uxrce_fini_service_memory+0x24>)
 800f19a:	6819      	ldr	r1, [r3, #0]
 800f19c:	f7f1 f840 	bl	8000220 <strcmp>
 800f1a0:	b938      	cbnz	r0, 800f1b2 <rmw_uxrce_fini_service_memory+0x22>
 800f1a2:	6020      	str	r0, [r4, #0]
 800f1a4:	6861      	ldr	r1, [r4, #4]
 800f1a6:	b121      	cbz	r1, 800f1b2 <rmw_uxrce_fini_service_memory+0x22>
 800f1a8:	4803      	ldr	r0, [pc, #12]	@ (800f1b8 <rmw_uxrce_fini_service_memory+0x28>)
 800f1aa:	f008 fa09 	bl	80175c0 <put_memory>
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	6063      	str	r3, [r4, #4]
 800f1b2:	bd10      	pop	{r4, pc}
 800f1b4:	0801c850 	.word	0x0801c850
 800f1b8:	2000ba34 	.word	0x2000ba34

0800f1bc <rmw_uxrce_fini_client_memory>:
 800f1bc:	b510      	push	{r4, lr}
 800f1be:	4604      	mov	r4, r0
 800f1c0:	6800      	ldr	r0, [r0, #0]
 800f1c2:	b128      	cbz	r0, 800f1d0 <rmw_uxrce_fini_client_memory+0x14>
 800f1c4:	4b06      	ldr	r3, [pc, #24]	@ (800f1e0 <rmw_uxrce_fini_client_memory+0x24>)
 800f1c6:	6819      	ldr	r1, [r3, #0]
 800f1c8:	f7f1 f82a 	bl	8000220 <strcmp>
 800f1cc:	b938      	cbnz	r0, 800f1de <rmw_uxrce_fini_client_memory+0x22>
 800f1ce:	6020      	str	r0, [r4, #0]
 800f1d0:	6861      	ldr	r1, [r4, #4]
 800f1d2:	b121      	cbz	r1, 800f1de <rmw_uxrce_fini_client_memory+0x22>
 800f1d4:	4803      	ldr	r0, [pc, #12]	@ (800f1e4 <rmw_uxrce_fini_client_memory+0x28>)
 800f1d6:	f008 f9f3 	bl	80175c0 <put_memory>
 800f1da:	2300      	movs	r3, #0
 800f1dc:	6063      	str	r3, [r4, #4]
 800f1de:	bd10      	pop	{r4, pc}
 800f1e0:	0801c850 	.word	0x0801c850
 800f1e4:	2000707c 	.word	0x2000707c

0800f1e8 <rmw_uxrce_fini_topic_memory>:
 800f1e8:	b510      	push	{r4, lr}
 800f1ea:	4604      	mov	r4, r0
 800f1ec:	4621      	mov	r1, r4
 800f1ee:	4803      	ldr	r0, [pc, #12]	@ (800f1fc <rmw_uxrce_fini_topic_memory+0x14>)
 800f1f0:	f008 f9e6 	bl	80175c0 <put_memory>
 800f1f4:	2300      	movs	r3, #0
 800f1f6:	61a3      	str	r3, [r4, #24]
 800f1f8:	bd10      	pop	{r4, pc}
 800f1fa:	bf00      	nop
 800f1fc:	2000ba74 	.word	0x2000ba74

0800f200 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800f200:	b082      	sub	sp, #8
 800f202:	b530      	push	{r4, r5, lr}
 800f204:	4925      	ldr	r1, [pc, #148]	@ (800f29c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800f206:	680d      	ldr	r5, [r1, #0]
 800f208:	ac03      	add	r4, sp, #12
 800f20a:	e884 000c 	stmia.w	r4, {r2, r3}
 800f20e:	461c      	mov	r4, r3
 800f210:	2d00      	cmp	r5, #0
 800f212:	d041      	beq.n	800f298 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800f214:	462b      	mov	r3, r5
 800f216:	2100      	movs	r1, #0
 800f218:	689a      	ldr	r2, [r3, #8]
 800f21a:	685b      	ldr	r3, [r3, #4]
 800f21c:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800f220:	4290      	cmp	r0, r2
 800f222:	bf08      	it	eq
 800f224:	3101      	addeq	r1, #1
 800f226:	2b00      	cmp	r3, #0
 800f228:	d1f6      	bne.n	800f218 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800f22a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800f22e:	2b02      	cmp	r3, #2
 800f230:	d029      	beq.n	800f286 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800f232:	d907      	bls.n	800f244 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800f234:	2b03      	cmp	r3, #3
 800f236:	d005      	beq.n	800f244 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800f238:	2100      	movs	r1, #0
 800f23a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f23e:	4608      	mov	r0, r1
 800f240:	b002      	add	sp, #8
 800f242:	4770      	bx	lr
 800f244:	b314      	cbz	r4, 800f28c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800f246:	428c      	cmp	r4, r1
 800f248:	d820      	bhi.n	800f28c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800f24a:	2d00      	cmp	r5, #0
 800f24c:	d0f4      	beq.n	800f238 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800f24e:	2100      	movs	r1, #0
 800f250:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800f254:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800f258:	e002      	b.n	800f260 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800f25a:	686d      	ldr	r5, [r5, #4]
 800f25c:	2d00      	cmp	r5, #0
 800f25e:	d0ec      	beq.n	800f23a <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800f260:	68ab      	ldr	r3, [r5, #8]
 800f262:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800f266:	4290      	cmp	r0, r2
 800f268:	d1f7      	bne.n	800f25a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800f26a:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800f26e:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800f272:	4562      	cmp	r2, ip
 800f274:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800f278:	eb73 0e04 	sbcs.w	lr, r3, r4
 800f27c:	daed      	bge.n	800f25a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800f27e:	4694      	mov	ip, r2
 800f280:	461c      	mov	r4, r3
 800f282:	4629      	mov	r1, r5
 800f284:	e7e9      	b.n	800f25a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800f286:	b10c      	cbz	r4, 800f28c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800f288:	428c      	cmp	r4, r1
 800f28a:	d9d5      	bls.n	800f238 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800f28c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f290:	4802      	ldr	r0, [pc, #8]	@ (800f29c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800f292:	b002      	add	sp, #8
 800f294:	f008 b984 	b.w	80175a0 <get_memory>
 800f298:	4629      	mov	r1, r5
 800f29a:	e7c6      	b.n	800f22a <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800f29c:	2000ba54 	.word	0x2000ba54

0800f2a0 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800f2a0:	4b11      	ldr	r3, [pc, #68]	@ (800f2e8 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	b530      	push	{r4, r5, lr}
 800f2a6:	b1e3      	cbz	r3, 800f2e2 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800f2a8:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800f2ac:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800f2b0:	2400      	movs	r4, #0
 800f2b2:	e001      	b.n	800f2b8 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800f2b4:	685b      	ldr	r3, [r3, #4]
 800f2b6:	b193      	cbz	r3, 800f2de <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800f2b8:	689a      	ldr	r2, [r3, #8]
 800f2ba:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800f2be:	4288      	cmp	r0, r1
 800f2c0:	d1f8      	bne.n	800f2b4 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800f2c2:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800f2c6:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800f2ca:	4571      	cmp	r1, lr
 800f2cc:	eb72 050c 	sbcs.w	r5, r2, ip
 800f2d0:	daf0      	bge.n	800f2b4 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800f2d2:	461c      	mov	r4, r3
 800f2d4:	685b      	ldr	r3, [r3, #4]
 800f2d6:	468e      	mov	lr, r1
 800f2d8:	4694      	mov	ip, r2
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d1ec      	bne.n	800f2b8 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800f2de:	4620      	mov	r0, r4
 800f2e0:	bd30      	pop	{r4, r5, pc}
 800f2e2:	461c      	mov	r4, r3
 800f2e4:	4620      	mov	r0, r4
 800f2e6:	bd30      	pop	{r4, r5, pc}
 800f2e8:	2000ba54 	.word	0x2000ba54
 800f2ec:	00000000 	.word	0x00000000

0800f2f0 <rmw_uxrce_clean_expired_static_input_buffer>:
 800f2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2f4:	4b3c      	ldr	r3, [pc, #240]	@ (800f3e8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800f2f6:	ed2d 8b06 	vpush	{d8-d10}
 800f2fa:	681f      	ldr	r7, [r3, #0]
 800f2fc:	b08d      	sub	sp, #52	@ 0x34
 800f2fe:	f7ff fd7d 	bl	800edfc <rmw_uros_epoch_nanos>
 800f302:	2f00      	cmp	r7, #0
 800f304:	d05d      	beq.n	800f3c2 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800f306:	46b8      	mov	r8, r7
 800f308:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800f3d0 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800f30c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800f310:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800f314:	2b04      	cmp	r3, #4
 800f316:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800f3d8 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800f31a:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800f3e0 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800f31e:	4681      	mov	r9, r0
 800f320:	468a      	mov	sl, r1
 800f322:	ac04      	add	r4, sp, #16
 800f324:	d03f      	beq.n	800f3a6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800f326:	2b05      	cmp	r3, #5
 800f328:	d044      	beq.n	800f3b4 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800f32a:	2b03      	cmp	r3, #3
 800f32c:	d03b      	beq.n	800f3a6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800f32e:	ed8d 8b04 	vstr	d8, [sp, #16]
 800f332:	ed8d ab06 	vstr	d10, [sp, #24]
 800f336:	ed8d 8b08 	vstr	d8, [sp, #32]
 800f33a:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800f33e:	ab08      	add	r3, sp, #32
 800f340:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f342:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800f346:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f34a:	f007 fe75 	bl	8017038 <rmw_time_equal>
 800f34e:	b118      	cbz	r0, 800f358 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800f350:	ed8d 9b04 	vstr	d9, [sp, #16]
 800f354:	ed8d 8b06 	vstr	d8, [sp, #24]
 800f358:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f35c:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800f360:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800f364:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800f368:	f007 feba 	bl	80170e0 <rmw_time_total_nsec>
 800f36c:	1830      	adds	r0, r6, r0
 800f36e:	eb47 0101 	adc.w	r1, r7, r1
 800f372:	4548      	cmp	r0, r9
 800f374:	eb71 030a 	sbcs.w	r3, r1, sl
 800f378:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800f37c:	db05      	blt.n	800f38a <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800f37e:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800f382:	4591      	cmp	r9, r2
 800f384:	eb7a 0303 	sbcs.w	r3, sl, r3
 800f388:	da03      	bge.n	800f392 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800f38a:	4817      	ldr	r0, [pc, #92]	@ (800f3e8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800f38c:	4641      	mov	r1, r8
 800f38e:	f008 f917 	bl	80175c0 <put_memory>
 800f392:	f1bb 0f00 	cmp.w	fp, #0
 800f396:	d014      	beq.n	800f3c2 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800f398:	46d8      	mov	r8, fp
 800f39a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800f39e:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800f3a2:	2b04      	cmp	r3, #4
 800f3a4:	d1bf      	bne.n	800f326 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800f3a6:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800f3aa:	3340      	adds	r3, #64	@ 0x40
 800f3ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f3ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f3b2:	e7c0      	b.n	800f336 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800f3b4:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800f3b8:	3348      	adds	r3, #72	@ 0x48
 800f3ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f3bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f3c0:	e7b9      	b.n	800f336 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800f3c2:	b00d      	add	sp, #52	@ 0x34
 800f3c4:	ecbd 8b06 	vpop	{d8-d10}
 800f3c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3cc:	f3af 8000 	nop.w
	...
 800f3d8:	00000001 	.word	0x00000001
 800f3dc:	00000000 	.word	0x00000000
 800f3e0:	0000001e 	.word	0x0000001e
 800f3e4:	00000000 	.word	0x00000000
 800f3e8:	2000ba54 	.word	0x2000ba54

0800f3ec <run_xrce_session>:
 800f3ec:	b510      	push	{r4, lr}
 800f3ee:	788c      	ldrb	r4, [r1, #2]
 800f3f0:	b086      	sub	sp, #24
 800f3f2:	2c01      	cmp	r4, #1
 800f3f4:	f8ad 200e 	strh.w	r2, [sp, #14]
 800f3f8:	d00c      	beq.n	800f414 <run_xrce_session+0x28>
 800f3fa:	4619      	mov	r1, r3
 800f3fc:	2301      	movs	r3, #1
 800f3fe:	9300      	str	r3, [sp, #0]
 800f400:	f10d 020e 	add.w	r2, sp, #14
 800f404:	f10d 0317 	add.w	r3, sp, #23
 800f408:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f40c:	f002 f8b8 	bl	8011580 <uxr_run_session_until_all_status>
 800f410:	b006      	add	sp, #24
 800f412:	bd10      	pop	{r4, pc}
 800f414:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f418:	f001 fccc 	bl	8010db4 <uxr_flash_output_streams>
 800f41c:	4620      	mov	r0, r4
 800f41e:	b006      	add	sp, #24
 800f420:	bd10      	pop	{r4, pc}
 800f422:	bf00      	nop

0800f424 <convert_qos_profile>:
 800f424:	7a4a      	ldrb	r2, [r1, #9]
 800f426:	f891 c008 	ldrb.w	ip, [r1, #8]
 800f42a:	2a02      	cmp	r2, #2
 800f42c:	bf18      	it	ne
 800f42e:	2200      	movne	r2, #0
 800f430:	7002      	strb	r2, [r0, #0]
 800f432:	780a      	ldrb	r2, [r1, #0]
 800f434:	8889      	ldrh	r1, [r1, #4]
 800f436:	8081      	strh	r1, [r0, #4]
 800f438:	f1ac 0c02 	sub.w	ip, ip, #2
 800f43c:	f1a2 0202 	sub.w	r2, r2, #2
 800f440:	fabc fc8c 	clz	ip, ip
 800f444:	fab2 f282 	clz	r2, r2
 800f448:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800f44c:	0952      	lsrs	r2, r2, #5
 800f44e:	f880 c001 	strb.w	ip, [r0, #1]
 800f452:	7082      	strb	r2, [r0, #2]
 800f454:	4770      	bx	lr
 800f456:	bf00      	nop

0800f458 <generate_service_topics>:
 800f458:	b570      	push	{r4, r5, r6, lr}
 800f45a:	b082      	sub	sp, #8
 800f45c:	461c      	mov	r4, r3
 800f45e:	4b12      	ldr	r3, [pc, #72]	@ (800f4a8 <generate_service_topics+0x50>)
 800f460:	9301      	str	r3, [sp, #4]
 800f462:	4605      	mov	r5, r0
 800f464:	4b11      	ldr	r3, [pc, #68]	@ (800f4ac <generate_service_topics+0x54>)
 800f466:	9000      	str	r0, [sp, #0]
 800f468:	4616      	mov	r6, r2
 800f46a:	4608      	mov	r0, r1
 800f46c:	4a10      	ldr	r2, [pc, #64]	@ (800f4b0 <generate_service_topics+0x58>)
 800f46e:	4621      	mov	r1, r4
 800f470:	f00a fa7a 	bl	8019968 <sniprintf>
 800f474:	4b0f      	ldr	r3, [pc, #60]	@ (800f4b4 <generate_service_topics+0x5c>)
 800f476:	9301      	str	r3, [sp, #4]
 800f478:	4601      	mov	r1, r0
 800f47a:	9500      	str	r5, [sp, #0]
 800f47c:	4b0e      	ldr	r3, [pc, #56]	@ (800f4b8 <generate_service_topics+0x60>)
 800f47e:	4a0c      	ldr	r2, [pc, #48]	@ (800f4b0 <generate_service_topics+0x58>)
 800f480:	460d      	mov	r5, r1
 800f482:	4630      	mov	r0, r6
 800f484:	4621      	mov	r1, r4
 800f486:	f00a fa6f 	bl	8019968 <sniprintf>
 800f48a:	2d00      	cmp	r5, #0
 800f48c:	db01      	blt.n	800f492 <generate_service_topics+0x3a>
 800f48e:	42ac      	cmp	r4, r5
 800f490:	dc02      	bgt.n	800f498 <generate_service_topics+0x40>
 800f492:	2000      	movs	r0, #0
 800f494:	b002      	add	sp, #8
 800f496:	bd70      	pop	{r4, r5, r6, pc}
 800f498:	2800      	cmp	r0, #0
 800f49a:	dbfa      	blt.n	800f492 <generate_service_topics+0x3a>
 800f49c:	4284      	cmp	r4, r0
 800f49e:	bfd4      	ite	le
 800f4a0:	2000      	movle	r0, #0
 800f4a2:	2001      	movgt	r0, #1
 800f4a4:	b002      	add	sp, #8
 800f4a6:	bd70      	pop	{r4, r5, r6, pc}
 800f4a8:	0801bdac 	.word	0x0801bdac
 800f4ac:	0801bda8 	.word	0x0801bda8
 800f4b0:	0801bd84 	.word	0x0801bd84
 800f4b4:	0801bda0 	.word	0x0801bda0
 800f4b8:	0801bd9c 	.word	0x0801bd9c

0800f4bc <generate_service_types>:
 800f4bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f4c0:	4605      	mov	r5, r0
 800f4c2:	b086      	sub	sp, #24
 800f4c4:	6880      	ldr	r0, [r0, #8]
 800f4c6:	460c      	mov	r4, r1
 800f4c8:	4617      	mov	r7, r2
 800f4ca:	461e      	mov	r6, r3
 800f4cc:	4780      	blx	r0
 800f4ce:	68eb      	ldr	r3, [r5, #12]
 800f4d0:	4680      	mov	r8, r0
 800f4d2:	4798      	blx	r3
 800f4d4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800f4d8:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800f4dc:	2300      	movs	r3, #0
 800f4de:	7023      	strb	r3, [r4, #0]
 800f4e0:	6813      	ldr	r3, [r2, #0]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d042      	beq.n	800f56c <generate_service_types+0xb0>
 800f4e6:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800f580 <generate_service_types+0xc4>
 800f4ea:	4641      	mov	r1, r8
 800f4ec:	4620      	mov	r0, r4
 800f4ee:	4c22      	ldr	r4, [pc, #136]	@ (800f578 <generate_service_types+0xbc>)
 800f4f0:	9405      	str	r4, [sp, #20]
 800f4f2:	6852      	ldr	r2, [r2, #4]
 800f4f4:	f8df a090 	ldr.w	sl, [pc, #144]	@ 800f588 <generate_service_types+0xcc>
 800f4f8:	9204      	str	r2, [sp, #16]
 800f4fa:	9100      	str	r1, [sp, #0]
 800f4fc:	e9cd 4802 	strd	r4, r8, [sp, #8]
 800f500:	4a1e      	ldr	r2, [pc, #120]	@ (800f57c <generate_service_types+0xc0>)
 800f502:	f8cd a004 	str.w	sl, [sp, #4]
 800f506:	4631      	mov	r1, r6
 800f508:	f00a fa2e 	bl	8019968 <sniprintf>
 800f50c:	2800      	cmp	r0, #0
 800f50e:	db1f      	blt.n	800f550 <generate_service_types+0x94>
 800f510:	2300      	movs	r3, #0
 800f512:	703b      	strb	r3, [r7, #0]
 800f514:	f8d9 3000 	ldr.w	r3, [r9]
 800f518:	42b0      	cmp	r0, r6
 800f51a:	bfac      	ite	ge
 800f51c:	2500      	movge	r5, #0
 800f51e:	2501      	movlt	r5, #1
 800f520:	b1eb      	cbz	r3, 800f55e <generate_service_types+0xa2>
 800f522:	4a17      	ldr	r2, [pc, #92]	@ (800f580 <generate_service_types+0xc4>)
 800f524:	9405      	str	r4, [sp, #20]
 800f526:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f52a:	9200      	str	r2, [sp, #0]
 800f52c:	e9cd 8103 	strd	r8, r1, [sp, #12]
 800f530:	e9cd a401 	strd	sl, r4, [sp, #4]
 800f534:	4a11      	ldr	r2, [pc, #68]	@ (800f57c <generate_service_types+0xc0>)
 800f536:	4638      	mov	r0, r7
 800f538:	4631      	mov	r1, r6
 800f53a:	f00a fa15 	bl	8019968 <sniprintf>
 800f53e:	2800      	cmp	r0, #0
 800f540:	db10      	blt.n	800f564 <generate_service_types+0xa8>
 800f542:	42b0      	cmp	r0, r6
 800f544:	bfb4      	ite	lt
 800f546:	4628      	movlt	r0, r5
 800f548:	2000      	movge	r0, #0
 800f54a:	b006      	add	sp, #24
 800f54c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f550:	2300      	movs	r3, #0
 800f552:	703b      	strb	r3, [r7, #0]
 800f554:	f8d9 3000 	ldr.w	r3, [r9]
 800f558:	2500      	movs	r5, #0
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d1e1      	bne.n	800f522 <generate_service_types+0x66>
 800f55e:	4b09      	ldr	r3, [pc, #36]	@ (800f584 <generate_service_types+0xc8>)
 800f560:	461a      	mov	r2, r3
 800f562:	e7df      	b.n	800f524 <generate_service_types+0x68>
 800f564:	2000      	movs	r0, #0
 800f566:	b006      	add	sp, #24
 800f568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f56c:	4b05      	ldr	r3, [pc, #20]	@ (800f584 <generate_service_types+0xc8>)
 800f56e:	f8df 8010 	ldr.w	r8, [pc, #16]	@ 800f580 <generate_service_types+0xc4>
 800f572:	4619      	mov	r1, r3
 800f574:	e7ba      	b.n	800f4ec <generate_service_types+0x30>
 800f576:	bf00      	nop
 800f578:	0801bd8c 	.word	0x0801bd8c
 800f57c:	0801bd7c 	.word	0x0801bd7c
 800f580:	0801bd78 	.word	0x0801bd78
 800f584:	0801c8dc 	.word	0x0801c8dc
 800f588:	0801bd90 	.word	0x0801bd90

0800f58c <generate_type_name>:
 800f58c:	b530      	push	{r4, r5, lr}
 800f58e:	2300      	movs	r3, #0
 800f590:	700b      	strb	r3, [r1, #0]
 800f592:	6803      	ldr	r3, [r0, #0]
 800f594:	b087      	sub	sp, #28
 800f596:	4614      	mov	r4, r2
 800f598:	b1d3      	cbz	r3, 800f5d0 <generate_type_name+0x44>
 800f59a:	4a0f      	ldr	r2, [pc, #60]	@ (800f5d8 <generate_type_name+0x4c>)
 800f59c:	4615      	mov	r5, r2
 800f59e:	9203      	str	r2, [sp, #12]
 800f5a0:	9500      	str	r5, [sp, #0]
 800f5a2:	6842      	ldr	r2, [r0, #4]
 800f5a4:	480d      	ldr	r0, [pc, #52]	@ (800f5dc <generate_type_name+0x50>)
 800f5a6:	9001      	str	r0, [sp, #4]
 800f5a8:	4608      	mov	r0, r1
 800f5aa:	490d      	ldr	r1, [pc, #52]	@ (800f5e0 <generate_type_name+0x54>)
 800f5ac:	9204      	str	r2, [sp, #16]
 800f5ae:	9105      	str	r1, [sp, #20]
 800f5b0:	9102      	str	r1, [sp, #8]
 800f5b2:	4a0c      	ldr	r2, [pc, #48]	@ (800f5e4 <generate_type_name+0x58>)
 800f5b4:	4621      	mov	r1, r4
 800f5b6:	f00a f9d7 	bl	8019968 <sniprintf>
 800f5ba:	2800      	cmp	r0, #0
 800f5bc:	db05      	blt.n	800f5ca <generate_type_name+0x3e>
 800f5be:	4284      	cmp	r4, r0
 800f5c0:	bfd4      	ite	le
 800f5c2:	2000      	movle	r0, #0
 800f5c4:	2001      	movgt	r0, #1
 800f5c6:	b007      	add	sp, #28
 800f5c8:	bd30      	pop	{r4, r5, pc}
 800f5ca:	2000      	movs	r0, #0
 800f5cc:	b007      	add	sp, #28
 800f5ce:	bd30      	pop	{r4, r5, pc}
 800f5d0:	4b05      	ldr	r3, [pc, #20]	@ (800f5e8 <generate_type_name+0x5c>)
 800f5d2:	4a01      	ldr	r2, [pc, #4]	@ (800f5d8 <generate_type_name+0x4c>)
 800f5d4:	461d      	mov	r5, r3
 800f5d6:	e7e2      	b.n	800f59e <generate_type_name+0x12>
 800f5d8:	0801bd78 	.word	0x0801bd78
 800f5dc:	0801bd90 	.word	0x0801bd90
 800f5e0:	0801bd8c 	.word	0x0801bd8c
 800f5e4:	0801bd7c 	.word	0x0801bd7c
 800f5e8:	0801c8dc 	.word	0x0801c8dc

0800f5ec <generate_topic_name>:
 800f5ec:	b510      	push	{r4, lr}
 800f5ee:	b082      	sub	sp, #8
 800f5f0:	4614      	mov	r4, r2
 800f5f2:	9000      	str	r0, [sp, #0]
 800f5f4:	4b08      	ldr	r3, [pc, #32]	@ (800f618 <generate_topic_name+0x2c>)
 800f5f6:	4a09      	ldr	r2, [pc, #36]	@ (800f61c <generate_topic_name+0x30>)
 800f5f8:	4608      	mov	r0, r1
 800f5fa:	4621      	mov	r1, r4
 800f5fc:	f00a f9b4 	bl	8019968 <sniprintf>
 800f600:	2800      	cmp	r0, #0
 800f602:	db05      	blt.n	800f610 <generate_topic_name+0x24>
 800f604:	4284      	cmp	r4, r0
 800f606:	bfd4      	ite	le
 800f608:	2000      	movle	r0, #0
 800f60a:	2001      	movgt	r0, #1
 800f60c:	b002      	add	sp, #8
 800f60e:	bd10      	pop	{r4, pc}
 800f610:	2000      	movs	r0, #0
 800f612:	b002      	add	sp, #8
 800f614:	bd10      	pop	{r4, pc}
 800f616:	bf00      	nop
 800f618:	0801bdb4 	.word	0x0801bdb4
 800f61c:	0801bd94 	.word	0x0801bd94

0800f620 <is_uxrce_rmw_identifier_valid>:
 800f620:	b510      	push	{r4, lr}
 800f622:	4604      	mov	r4, r0
 800f624:	b140      	cbz	r0, 800f638 <is_uxrce_rmw_identifier_valid+0x18>
 800f626:	f008 f823 	bl	8017670 <rmw_get_implementation_identifier>
 800f62a:	4601      	mov	r1, r0
 800f62c:	4620      	mov	r0, r4
 800f62e:	f7f0 fdf7 	bl	8000220 <strcmp>
 800f632:	fab0 f080 	clz	r0, r0
 800f636:	0940      	lsrs	r0, r0, #5
 800f638:	bd10      	pop	{r4, pc}
 800f63a:	bf00      	nop

0800f63c <get_message_typesupport_handle>:
 800f63c:	6883      	ldr	r3, [r0, #8]
 800f63e:	4718      	bx	r3

0800f640 <get_message_typesupport_handle_function>:
 800f640:	b510      	push	{r4, lr}
 800f642:	4604      	mov	r4, r0
 800f644:	6800      	ldr	r0, [r0, #0]
 800f646:	f7f0 fdeb 	bl	8000220 <strcmp>
 800f64a:	2800      	cmp	r0, #0
 800f64c:	bf0c      	ite	eq
 800f64e:	4620      	moveq	r0, r4
 800f650:	2000      	movne	r0, #0
 800f652:	bd10      	pop	{r4, pc}

0800f654 <get_service_typesupport_handle>:
 800f654:	6883      	ldr	r3, [r0, #8]
 800f656:	4718      	bx	r3

0800f658 <get_service_typesupport_handle_function>:
 800f658:	b510      	push	{r4, lr}
 800f65a:	4604      	mov	r4, r0
 800f65c:	6800      	ldr	r0, [r0, #0]
 800f65e:	f7f0 fddf 	bl	8000220 <strcmp>
 800f662:	2800      	cmp	r0, #0
 800f664:	bf0c      	ite	eq
 800f666:	4620      	moveq	r0, r4
 800f668:	2000      	movne	r0, #0
 800f66a:	bd10      	pop	{r4, pc}

0800f66c <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800f66c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f670:	6805      	ldr	r5, [r0, #0]
 800f672:	4604      	mov	r4, r0
 800f674:	4628      	mov	r0, r5
 800f676:	460e      	mov	r6, r1
 800f678:	f7f0 fdd2 	bl	8000220 <strcmp>
 800f67c:	b1c8      	cbz	r0, 800f6b2 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800f67e:	4b11      	ldr	r3, [pc, #68]	@ (800f6c4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	429d      	cmp	r5, r3
 800f684:	d112      	bne.n	800f6ac <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800f686:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800f68a:	f8d8 4000 	ldr.w	r4, [r8]
 800f68e:	b16c      	cbz	r4, 800f6ac <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800f690:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800f694:	2700      	movs	r7, #0
 800f696:	3d04      	subs	r5, #4
 800f698:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800f69c:	4631      	mov	r1, r6
 800f69e:	f7f0 fdbf 	bl	8000220 <strcmp>
 800f6a2:	00bb      	lsls	r3, r7, #2
 800f6a4:	b140      	cbz	r0, 800f6b8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800f6a6:	3701      	adds	r7, #1
 800f6a8:	42bc      	cmp	r4, r7
 800f6aa:	d1f5      	bne.n	800f698 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800f6ac:	2000      	movs	r0, #0
 800f6ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6b2:	4620      	mov	r0, r4
 800f6b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6b8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f6bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f6c0:	58d3      	ldr	r3, [r2, r3]
 800f6c2:	4718      	bx	r3
 800f6c4:	20000510 	.word	0x20000510

0800f6c8 <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 800f6c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6cc:	6805      	ldr	r5, [r0, #0]
 800f6ce:	4604      	mov	r4, r0
 800f6d0:	4628      	mov	r0, r5
 800f6d2:	460e      	mov	r6, r1
 800f6d4:	f7f0 fda4 	bl	8000220 <strcmp>
 800f6d8:	b1c8      	cbz	r0, 800f70e <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 800f6da:	4b11      	ldr	r3, [pc, #68]	@ (800f720 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	429d      	cmp	r5, r3
 800f6e0:	d112      	bne.n	800f708 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 800f6e2:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800f6e6:	f8d8 4000 	ldr.w	r4, [r8]
 800f6ea:	b16c      	cbz	r4, 800f708 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 800f6ec:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800f6f0:	2700      	movs	r7, #0
 800f6f2:	3d04      	subs	r5, #4
 800f6f4:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800f6f8:	4631      	mov	r1, r6
 800f6fa:	f7f0 fd91 	bl	8000220 <strcmp>
 800f6fe:	00bb      	lsls	r3, r7, #2
 800f700:	b140      	cbz	r0, 800f714 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 800f702:	3701      	adds	r7, #1
 800f704:	42bc      	cmp	r4, r7
 800f706:	d1f5      	bne.n	800f6f4 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 800f708:	2000      	movs	r0, #0
 800f70a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f70e:	4620      	mov	r0, r4
 800f710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f714:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f718:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f71c:	58d3      	ldr	r3, [r2, r3]
 800f71e:	4718      	bx	r3
 800f720:	20000510 	.word	0x20000510

0800f724 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800f724:	4b04      	ldr	r3, [pc, #16]	@ (800f738 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800f726:	681a      	ldr	r2, [r3, #0]
 800f728:	b10a      	cbz	r2, 800f72e <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xa>
 800f72a:	4803      	ldr	r0, [pc, #12]	@ (800f738 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800f72c:	4770      	bx	lr
 800f72e:	4a03      	ldr	r2, [pc, #12]	@ (800f73c <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x18>)
 800f730:	4801      	ldr	r0, [pc, #4]	@ (800f738 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800f732:	6812      	ldr	r2, [r2, #0]
 800f734:	601a      	str	r2, [r3, #0]
 800f736:	4770      	bx	lr
 800f738:	20000520 	.word	0x20000520
 800f73c:	20000510 	.word	0x20000510

0800f740 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800f740:	4a02      	ldr	r2, [pc, #8]	@ (800f74c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xc>)
 800f742:	4b03      	ldr	r3, [pc, #12]	@ (800f750 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x10>)
 800f744:	6812      	ldr	r2, [r2, #0]
 800f746:	601a      	str	r2, [r3, #0]
 800f748:	4770      	bx	lr
 800f74a:	bf00      	nop
 800f74c:	20000510 	.word	0x20000510
 800f750:	20000520 	.word	0x20000520

0800f754 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__orientation_covariance>:
 800f754:	2009      	movs	r0, #9
 800f756:	4770      	bx	lr

0800f758 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__orientation_covariance>:
 800f758:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800f75c:	4770      	bx	lr
 800f75e:	bf00      	nop

0800f760 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__orientation_covariance>:
 800f760:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800f764:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f768:	e9c2 0100 	strd	r0, r1, [r2]
 800f76c:	4770      	bx	lr
 800f76e:	bf00      	nop

0800f770 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__orientation_covariance>:
 800f770:	e9d2 2300 	ldrd	r2, r3, [r2]
 800f774:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800f778:	e9c1 2300 	strd	r2, r3, [r1]
 800f77c:	4770      	bx	lr
 800f77e:	bf00      	nop

0800f780 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_init_function>:
 800f780:	f008 bb2a 	b.w	8017dd8 <sensor_msgs__msg__Imu__init>

0800f784 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_fini_function>:
 800f784:	f008 bb7e 	b.w	8017e84 <sensor_msgs__msg__Imu__fini>

0800f788 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__angular_velocity_covariance>:
 800f788:	2009      	movs	r0, #9
 800f78a:	4770      	bx	lr

0800f78c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__linear_acceleration_covariance>:
 800f78c:	2009      	movs	r0, #9
 800f78e:	4770      	bx	lr

0800f790 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__orientation_covariance>:
 800f790:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800f794:	4770      	bx	lr
 800f796:	bf00      	nop

0800f798 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__linear_acceleration_covariance>:
 800f798:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800f79c:	4770      	bx	lr
 800f79e:	bf00      	nop

0800f7a0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__linear_acceleration_covariance>:
 800f7a0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800f7a4:	4770      	bx	lr
 800f7a6:	bf00      	nop

0800f7a8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__angular_velocity_covariance>:
 800f7a8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800f7ac:	4770      	bx	lr
 800f7ae:	bf00      	nop

0800f7b0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__angular_velocity_covariance>:
 800f7b0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800f7b4:	4770      	bx	lr
 800f7b6:	bf00      	nop

0800f7b8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__linear_acceleration_covariance>:
 800f7b8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800f7bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f7c0:	e9c2 0100 	strd	r0, r1, [r2]
 800f7c4:	4770      	bx	lr
 800f7c6:	bf00      	nop

0800f7c8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__linear_acceleration_covariance>:
 800f7c8:	e9d2 2300 	ldrd	r2, r3, [r2]
 800f7cc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800f7d0:	e9c1 2300 	strd	r2, r3, [r1]
 800f7d4:	4770      	bx	lr
 800f7d6:	bf00      	nop

0800f7d8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__angular_velocity_covariance>:
 800f7d8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800f7dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f7e0:	e9c2 0100 	strd	r0, r1, [r2]
 800f7e4:	4770      	bx	lr
 800f7e6:	bf00      	nop

0800f7e8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__angular_velocity_covariance>:
 800f7e8:	e9d2 2300 	ldrd	r2, r3, [r2]
 800f7ec:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800f7f0:	e9c1 2300 	strd	r2, r3, [r1]
 800f7f4:	4770      	bx	lr
 800f7f6:	bf00      	nop

0800f7f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800f7f8:	b510      	push	{r4, lr}
 800f7fa:	f000 f921 	bl	800fa40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 800f7fe:	4c0b      	ldr	r4, [pc, #44]	@ (800f82c <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x34>)
 800f800:	60e0      	str	r0, [r4, #12]
 800f802:	f000 fab3 	bl	800fd6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800f806:	64a0      	str	r0, [r4, #72]	@ 0x48
 800f808:	f7fb fb0e 	bl	800ae28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800f80c:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 800f810:	f7fb fb0a 	bl	800ae28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800f814:	4b06      	ldr	r3, [pc, #24]	@ (800f830 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800f816:	f8c4 0138 	str.w	r0, [r4, #312]	@ 0x138
 800f81a:	681a      	ldr	r2, [r3, #0]
 800f81c:	b10a      	cbz	r2, 800f822 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x2a>
 800f81e:	4804      	ldr	r0, [pc, #16]	@ (800f830 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800f820:	bd10      	pop	{r4, pc}
 800f822:	4a04      	ldr	r2, [pc, #16]	@ (800f834 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x3c>)
 800f824:	4802      	ldr	r0, [pc, #8]	@ (800f830 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800f826:	6812      	ldr	r2, [r2, #0]
 800f828:	601a      	str	r2, [r3, #0]
 800f82a:	bd10      	pop	{r4, pc}
 800f82c:	2000052c 	.word	0x2000052c
 800f830:	200006d0 	.word	0x200006d0
 800f834:	20000514 	.word	0x20000514

0800f838 <get_serialized_size_sensor_msgs__msg__Imu.part.0>:
 800f838:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 800f83c:	4680      	mov	r8, r0
 800f83e:	460f      	mov	r7, r1
 800f840:	f000 f95a 	bl	800faf8 <get_serialized_size_std_msgs__msg__Header>
 800f844:	183c      	adds	r4, r7, r0
 800f846:	4621      	mov	r1, r4
 800f848:	f108 0018 	add.w	r0, r8, #24
 800f84c:	f000 fa9c 	bl	800fd88 <get_serialized_size_geometry_msgs__msg__Quaternion>
 800f850:	4404      	add	r4, r0
 800f852:	2108      	movs	r1, #8
 800f854:	4620      	mov	r0, r4
 800f856:	f7fd f91d 	bl	800ca94 <ucdr_alignment>
 800f85a:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 800f85e:	4425      	add	r5, r4
 800f860:	4629      	mov	r1, r5
 800f862:	f108 0080 	add.w	r0, r8, #128	@ 0x80
 800f866:	f7fb fb53 	bl	800af10 <get_serialized_size_geometry_msgs__msg__Vector3>
 800f86a:	4405      	add	r5, r0
 800f86c:	2108      	movs	r1, #8
 800f86e:	4628      	mov	r0, r5
 800f870:	f7fd f910 	bl	800ca94 <ucdr_alignment>
 800f874:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 800f878:	4425      	add	r5, r4
 800f87a:	4629      	mov	r1, r5
 800f87c:	f108 00e0 	add.w	r0, r8, #224	@ 0xe0
 800f880:	f7fb fb46 	bl	800af10 <get_serialized_size_geometry_msgs__msg__Vector3>
 800f884:	4405      	add	r5, r0
 800f886:	2108      	movs	r1, #8
 800f888:	4628      	mov	r0, r5
 800f88a:	f7fd f903 	bl	800ca94 <ucdr_alignment>
 800f88e:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 800f892:	4438      	add	r0, r7
 800f894:	4428      	add	r0, r5
 800f896:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 800f89a:	bf00      	nop

0800f89c <get_serialized_size_sensor_msgs__msg__Imu>:
 800f89c:	b108      	cbz	r0, 800f8a2 <get_serialized_size_sensor_msgs__msg__Imu+0x6>
 800f89e:	f7ff bfcb 	b.w	800f838 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 800f8a2:	4770      	bx	lr

0800f8a4 <_Imu__get_serialized_size>:
 800f8a4:	b110      	cbz	r0, 800f8ac <_Imu__get_serialized_size+0x8>
 800f8a6:	2100      	movs	r1, #0
 800f8a8:	f7ff bfc6 	b.w	800f838 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 800f8ac:	4770      	bx	lr
 800f8ae:	bf00      	nop

0800f8b0 <_Imu__cdr_deserialize>:
 800f8b0:	b538      	push	{r3, r4, r5, lr}
 800f8b2:	460c      	mov	r4, r1
 800f8b4:	b399      	cbz	r1, 800f91e <_Imu__cdr_deserialize+0x6e>
 800f8b6:	4605      	mov	r5, r0
 800f8b8:	f000 f9a0 	bl	800fbfc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800f8bc:	6843      	ldr	r3, [r0, #4]
 800f8be:	4621      	mov	r1, r4
 800f8c0:	68db      	ldr	r3, [r3, #12]
 800f8c2:	4628      	mov	r0, r5
 800f8c4:	4798      	blx	r3
 800f8c6:	f000 fb13 	bl	800fef0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800f8ca:	6843      	ldr	r3, [r0, #4]
 800f8cc:	f104 0118 	add.w	r1, r4, #24
 800f8d0:	68db      	ldr	r3, [r3, #12]
 800f8d2:	4628      	mov	r0, r5
 800f8d4:	4798      	blx	r3
 800f8d6:	2209      	movs	r2, #9
 800f8d8:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 800f8dc:	4628      	mov	r0, r5
 800f8de:	f000 fcd3 	bl	8010288 <ucdr_deserialize_array_double>
 800f8e2:	f7fb fba1 	bl	800b028 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800f8e6:	6843      	ldr	r3, [r0, #4]
 800f8e8:	f104 0180 	add.w	r1, r4, #128	@ 0x80
 800f8ec:	68db      	ldr	r3, [r3, #12]
 800f8ee:	4628      	mov	r0, r5
 800f8f0:	4798      	blx	r3
 800f8f2:	2209      	movs	r2, #9
 800f8f4:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 800f8f8:	4628      	mov	r0, r5
 800f8fa:	f000 fcc5 	bl	8010288 <ucdr_deserialize_array_double>
 800f8fe:	f7fb fb93 	bl	800b028 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800f902:	6843      	ldr	r3, [r0, #4]
 800f904:	f104 01e0 	add.w	r1, r4, #224	@ 0xe0
 800f908:	68db      	ldr	r3, [r3, #12]
 800f90a:	4628      	mov	r0, r5
 800f90c:	4798      	blx	r3
 800f90e:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 800f912:	4628      	mov	r0, r5
 800f914:	2209      	movs	r2, #9
 800f916:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f91a:	f000 bcb5 	b.w	8010288 <ucdr_deserialize_array_double>
 800f91e:	4608      	mov	r0, r1
 800f920:	bd38      	pop	{r3, r4, r5, pc}
 800f922:	bf00      	nop

0800f924 <_Imu__cdr_serialize>:
 800f924:	2800      	cmp	r0, #0
 800f926:	d035      	beq.n	800f994 <_Imu__cdr_serialize+0x70>
 800f928:	b538      	push	{r3, r4, r5, lr}
 800f92a:	460d      	mov	r5, r1
 800f92c:	4604      	mov	r4, r0
 800f92e:	f000 f965 	bl	800fbfc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800f932:	6843      	ldr	r3, [r0, #4]
 800f934:	4629      	mov	r1, r5
 800f936:	689b      	ldr	r3, [r3, #8]
 800f938:	4620      	mov	r0, r4
 800f93a:	4798      	blx	r3
 800f93c:	f000 fad8 	bl	800fef0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800f940:	6843      	ldr	r3, [r0, #4]
 800f942:	4629      	mov	r1, r5
 800f944:	689b      	ldr	r3, [r3, #8]
 800f946:	f104 0018 	add.w	r0, r4, #24
 800f94a:	4798      	blx	r3
 800f94c:	2209      	movs	r2, #9
 800f94e:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 800f952:	4628      	mov	r0, r5
 800f954:	f000 fc44 	bl	80101e0 <ucdr_serialize_array_double>
 800f958:	f7fb fb66 	bl	800b028 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800f95c:	6843      	ldr	r3, [r0, #4]
 800f95e:	4629      	mov	r1, r5
 800f960:	689b      	ldr	r3, [r3, #8]
 800f962:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 800f966:	4798      	blx	r3
 800f968:	2209      	movs	r2, #9
 800f96a:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 800f96e:	4628      	mov	r0, r5
 800f970:	f000 fc36 	bl	80101e0 <ucdr_serialize_array_double>
 800f974:	f7fb fb58 	bl	800b028 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800f978:	6843      	ldr	r3, [r0, #4]
 800f97a:	4629      	mov	r1, r5
 800f97c:	689b      	ldr	r3, [r3, #8]
 800f97e:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 800f982:	4798      	blx	r3
 800f984:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 800f988:	4628      	mov	r0, r5
 800f98a:	2209      	movs	r2, #9
 800f98c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f990:	f000 bc26 	b.w	80101e0 <ucdr_serialize_array_double>
 800f994:	4770      	bx	lr
 800f996:	bf00      	nop

0800f998 <max_serialized_size_sensor_msgs__msg__Imu>:
 800f998:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 800f99c:	2301      	movs	r3, #1
 800f99e:	7003      	strb	r3, [r0, #0]
 800f9a0:	4680      	mov	r8, r0
 800f9a2:	460f      	mov	r7, r1
 800f9a4:	f000 f920 	bl	800fbe8 <max_serialized_size_std_msgs__msg__Header>
 800f9a8:	183c      	adds	r4, r7, r0
 800f9aa:	4621      	mov	r1, r4
 800f9ac:	4640      	mov	r0, r8
 800f9ae:	f000 fa7d 	bl	800feac <max_serialized_size_geometry_msgs__msg__Quaternion>
 800f9b2:	4404      	add	r4, r0
 800f9b4:	2108      	movs	r1, #8
 800f9b6:	4620      	mov	r0, r4
 800f9b8:	f7fd f86c 	bl	800ca94 <ucdr_alignment>
 800f9bc:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 800f9c0:	4425      	add	r5, r4
 800f9c2:	4629      	mov	r1, r5
 800f9c4:	4640      	mov	r0, r8
 800f9c6:	f7fb fb13 	bl	800aff0 <max_serialized_size_geometry_msgs__msg__Vector3>
 800f9ca:	4405      	add	r5, r0
 800f9cc:	2108      	movs	r1, #8
 800f9ce:	4628      	mov	r0, r5
 800f9d0:	f7fd f860 	bl	800ca94 <ucdr_alignment>
 800f9d4:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 800f9d8:	4425      	add	r5, r4
 800f9da:	4629      	mov	r1, r5
 800f9dc:	4640      	mov	r0, r8
 800f9de:	f7fb fb07 	bl	800aff0 <max_serialized_size_geometry_msgs__msg__Vector3>
 800f9e2:	4405      	add	r5, r0
 800f9e4:	2108      	movs	r1, #8
 800f9e6:	4628      	mov	r0, r5
 800f9e8:	f7fd f854 	bl	800ca94 <ucdr_alignment>
 800f9ec:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 800f9f0:	4438      	add	r0, r7
 800f9f2:	4428      	add	r0, r5
 800f9f4:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}

0800f9f8 <_Imu__max_serialized_size>:
 800f9f8:	b500      	push	{lr}
 800f9fa:	b083      	sub	sp, #12
 800f9fc:	2100      	movs	r1, #0
 800f9fe:	f10d 0007 	add.w	r0, sp, #7
 800fa02:	f7ff ffc9 	bl	800f998 <max_serialized_size_sensor_msgs__msg__Imu>
 800fa06:	b003      	add	sp, #12
 800fa08:	f85d fb04 	ldr.w	pc, [sp], #4

0800fa0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800fa0c:	4800      	ldr	r0, [pc, #0]	@ (800fa10 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x4>)
 800fa0e:	4770      	bx	lr
 800fa10:	200006dc 	.word	0x200006dc

0800fa14 <std_msgs__msg__Bool__rosidl_typesupport_introspection_c__Bool_init_function>:
 800fa14:	f008 ba4a 	b.w	8017eac <std_msgs__msg__Bool__init>

0800fa18 <std_msgs__msg__Bool__rosidl_typesupport_introspection_c__Bool_fini_function>:
 800fa18:	f008 ba4c 	b.w	8017eb4 <std_msgs__msg__Bool__fini>

0800fa1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool>:
 800fa1c:	4b04      	ldr	r3, [pc, #16]	@ (800fa30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool+0x14>)
 800fa1e:	681a      	ldr	r2, [r3, #0]
 800fa20:	b10a      	cbz	r2, 800fa26 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool+0xa>
 800fa22:	4803      	ldr	r0, [pc, #12]	@ (800fa30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool+0x14>)
 800fa24:	4770      	bx	lr
 800fa26:	4a03      	ldr	r2, [pc, #12]	@ (800fa34 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool+0x18>)
 800fa28:	4801      	ldr	r0, [pc, #4]	@ (800fa30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool+0x14>)
 800fa2a:	6812      	ldr	r2, [r2, #0]
 800fa2c:	601a      	str	r2, [r3, #0]
 800fa2e:	4770      	bx	lr
 800fa30:	20000740 	.word	0x20000740
 800fa34:	20000514 	.word	0x20000514

0800fa38 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 800fa38:	f008 ba3e 	b.w	8017eb8 <std_msgs__msg__Header__init>

0800fa3c <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 800fa3c:	f008 ba60 	b.w	8017f00 <std_msgs__msg__Header__fini>

0800fa40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800fa40:	b508      	push	{r3, lr}
 800fa42:	f000 f8e3 	bl	800fc0c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800fa46:	4b06      	ldr	r3, [pc, #24]	@ (800fa60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800fa48:	4906      	ldr	r1, [pc, #24]	@ (800fa64 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 800fa4a:	681a      	ldr	r2, [r3, #0]
 800fa4c:	60c8      	str	r0, [r1, #12]
 800fa4e:	b10a      	cbz	r2, 800fa54 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 800fa50:	4803      	ldr	r0, [pc, #12]	@ (800fa60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800fa52:	bd08      	pop	{r3, pc}
 800fa54:	4a04      	ldr	r2, [pc, #16]	@ (800fa68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 800fa56:	4802      	ldr	r0, [pc, #8]	@ (800fa60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800fa58:	6812      	ldr	r2, [r2, #0]
 800fa5a:	601a      	str	r2, [r3, #0]
 800fa5c:	bd08      	pop	{r3, pc}
 800fa5e:	bf00      	nop
 800fa60:	200007c4 	.word	0x200007c4
 800fa64:	2000074c 	.word	0x2000074c
 800fa68:	20000514 	.word	0x20000514

0800fa6c <_Bool__max_serialized_size>:
 800fa6c:	b508      	push	{r3, lr}
 800fa6e:	2101      	movs	r1, #1
 800fa70:	2000      	movs	r0, #0
 800fa72:	f7fd f80f 	bl	800ca94 <ucdr_alignment>
 800fa76:	3001      	adds	r0, #1
 800fa78:	bd08      	pop	{r3, pc}
 800fa7a:	bf00      	nop

0800fa7c <_Bool__cdr_deserialize>:
 800fa7c:	b109      	cbz	r1, 800fa82 <_Bool__cdr_deserialize+0x6>
 800fa7e:	f7fb bd0b 	b.w	800b498 <ucdr_deserialize_bool>
 800fa82:	4608      	mov	r0, r1
 800fa84:	4770      	bx	lr
 800fa86:	bf00      	nop

0800fa88 <get_serialized_size_std_msgs__msg__Bool>:
 800fa88:	b138      	cbz	r0, 800fa9a <get_serialized_size_std_msgs__msg__Bool+0x12>
 800fa8a:	b508      	push	{r3, lr}
 800fa8c:	460b      	mov	r3, r1
 800fa8e:	4618      	mov	r0, r3
 800fa90:	2101      	movs	r1, #1
 800fa92:	f7fc ffff 	bl	800ca94 <ucdr_alignment>
 800fa96:	3001      	adds	r0, #1
 800fa98:	bd08      	pop	{r3, pc}
 800fa9a:	4770      	bx	lr

0800fa9c <_Bool__cdr_serialize>:
 800fa9c:	460a      	mov	r2, r1
 800fa9e:	b118      	cbz	r0, 800faa8 <_Bool__cdr_serialize+0xc>
 800faa0:	7801      	ldrb	r1, [r0, #0]
 800faa2:	4610      	mov	r0, r2
 800faa4:	f7fb bce2 	b.w	800b46c <ucdr_serialize_bool>
 800faa8:	4770      	bx	lr
 800faaa:	bf00      	nop

0800faac <_Bool__get_serialized_size>:
 800faac:	b130      	cbz	r0, 800fabc <_Bool__get_serialized_size+0x10>
 800faae:	b508      	push	{r3, lr}
 800fab0:	2101      	movs	r1, #1
 800fab2:	2000      	movs	r0, #0
 800fab4:	f7fc ffee 	bl	800ca94 <ucdr_alignment>
 800fab8:	3001      	adds	r0, #1
 800faba:	bd08      	pop	{r3, pc}
 800fabc:	4770      	bx	lr
 800fabe:	bf00      	nop

0800fac0 <max_serialized_size_std_msgs__msg__Bool>:
 800fac0:	b508      	push	{r3, lr}
 800fac2:	460b      	mov	r3, r1
 800fac4:	2101      	movs	r1, #1
 800fac6:	7001      	strb	r1, [r0, #0]
 800fac8:	4618      	mov	r0, r3
 800faca:	f7fc ffe3 	bl	800ca94 <ucdr_alignment>
 800face:	3001      	adds	r0, #1
 800fad0:	bd08      	pop	{r3, pc}
 800fad2:	bf00      	nop

0800fad4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Bool>:
 800fad4:	4800      	ldr	r0, [pc, #0]	@ (800fad8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Bool+0x4>)
 800fad6:	4770      	bx	lr
 800fad8:	200007d0 	.word	0x200007d0

0800fadc <_Header__max_serialized_size>:
 800fadc:	b500      	push	{lr}
 800fade:	b083      	sub	sp, #12
 800fae0:	2301      	movs	r3, #1
 800fae2:	2100      	movs	r1, #0
 800fae4:	f10d 0007 	add.w	r0, sp, #7
 800fae8:	f88d 3007 	strb.w	r3, [sp, #7]
 800faec:	f000 f8ec 	bl	800fcc8 <max_serialized_size_builtin_interfaces__msg__Time>
 800faf0:	b003      	add	sp, #12
 800faf2:	f85d fb04 	ldr.w	pc, [sp], #4
 800faf6:	bf00      	nop

0800faf8 <get_serialized_size_std_msgs__msg__Header>:
 800faf8:	b570      	push	{r4, r5, r6, lr}
 800fafa:	4605      	mov	r5, r0
 800fafc:	b168      	cbz	r0, 800fb1a <get_serialized_size_std_msgs__msg__Header+0x22>
 800fafe:	460c      	mov	r4, r1
 800fb00:	f000 f892 	bl	800fc28 <get_serialized_size_builtin_interfaces__msg__Time>
 800fb04:	1826      	adds	r6, r4, r0
 800fb06:	2104      	movs	r1, #4
 800fb08:	4630      	mov	r0, r6
 800fb0a:	f7fc ffc3 	bl	800ca94 <ucdr_alignment>
 800fb0e:	68e9      	ldr	r1, [r5, #12]
 800fb10:	f1c4 0405 	rsb	r4, r4, #5
 800fb14:	440c      	add	r4, r1
 800fb16:	4404      	add	r4, r0
 800fb18:	19a0      	adds	r0, r4, r6
 800fb1a:	bd70      	pop	{r4, r5, r6, pc}

0800fb1c <_Header__cdr_deserialize>:
 800fb1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb1e:	460c      	mov	r4, r1
 800fb20:	b083      	sub	sp, #12
 800fb22:	b1e1      	cbz	r1, 800fb5e <_Header__cdr_deserialize+0x42>
 800fb24:	4606      	mov	r6, r0
 800fb26:	f000 f8e3 	bl	800fcf0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800fb2a:	6843      	ldr	r3, [r0, #4]
 800fb2c:	4621      	mov	r1, r4
 800fb2e:	68db      	ldr	r3, [r3, #12]
 800fb30:	4630      	mov	r0, r6
 800fb32:	4798      	blx	r3
 800fb34:	6927      	ldr	r7, [r4, #16]
 800fb36:	68a1      	ldr	r1, [r4, #8]
 800fb38:	ab01      	add	r3, sp, #4
 800fb3a:	463a      	mov	r2, r7
 800fb3c:	4630      	mov	r0, r6
 800fb3e:	f000 fc0b 	bl	8010358 <ucdr_deserialize_sequence_char>
 800fb42:	9b01      	ldr	r3, [sp, #4]
 800fb44:	4605      	mov	r5, r0
 800fb46:	b920      	cbnz	r0, 800fb52 <_Header__cdr_deserialize+0x36>
 800fb48:	429f      	cmp	r7, r3
 800fb4a:	d30c      	bcc.n	800fb66 <_Header__cdr_deserialize+0x4a>
 800fb4c:	4628      	mov	r0, r5
 800fb4e:	b003      	add	sp, #12
 800fb50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb52:	b103      	cbz	r3, 800fb56 <_Header__cdr_deserialize+0x3a>
 800fb54:	3b01      	subs	r3, #1
 800fb56:	4628      	mov	r0, r5
 800fb58:	60e3      	str	r3, [r4, #12]
 800fb5a:	b003      	add	sp, #12
 800fb5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb5e:	460d      	mov	r5, r1
 800fb60:	4628      	mov	r0, r5
 800fb62:	b003      	add	sp, #12
 800fb64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb66:	2101      	movs	r1, #1
 800fb68:	75b0      	strb	r0, [r6, #22]
 800fb6a:	7571      	strb	r1, [r6, #21]
 800fb6c:	4630      	mov	r0, r6
 800fb6e:	60e5      	str	r5, [r4, #12]
 800fb70:	f7fc ffa6 	bl	800cac0 <ucdr_align_to>
 800fb74:	4630      	mov	r0, r6
 800fb76:	9901      	ldr	r1, [sp, #4]
 800fb78:	f7fc ffd8 	bl	800cb2c <ucdr_advance_buffer>
 800fb7c:	4628      	mov	r0, r5
 800fb7e:	b003      	add	sp, #12
 800fb80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb82:	bf00      	nop

0800fb84 <_Header__cdr_serialize>:
 800fb84:	b1f8      	cbz	r0, 800fbc6 <_Header__cdr_serialize+0x42>
 800fb86:	b570      	push	{r4, r5, r6, lr}
 800fb88:	4604      	mov	r4, r0
 800fb8a:	460d      	mov	r5, r1
 800fb8c:	f000 f8b0 	bl	800fcf0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800fb90:	6843      	ldr	r3, [r0, #4]
 800fb92:	4629      	mov	r1, r5
 800fb94:	689b      	ldr	r3, [r3, #8]
 800fb96:	4620      	mov	r0, r4
 800fb98:	4798      	blx	r3
 800fb9a:	68a6      	ldr	r6, [r4, #8]
 800fb9c:	b156      	cbz	r6, 800fbb4 <_Header__cdr_serialize+0x30>
 800fb9e:	4630      	mov	r0, r6
 800fba0:	f7f0 fb48 	bl	8000234 <strlen>
 800fba4:	4631      	mov	r1, r6
 800fba6:	60e0      	str	r0, [r4, #12]
 800fba8:	1c42      	adds	r2, r0, #1
 800fbaa:	4628      	mov	r0, r5
 800fbac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fbb0:	f000 bbc0 	b.w	8010334 <ucdr_serialize_sequence_char>
 800fbb4:	4630      	mov	r0, r6
 800fbb6:	60e0      	str	r0, [r4, #12]
 800fbb8:	4632      	mov	r2, r6
 800fbba:	4631      	mov	r1, r6
 800fbbc:	4628      	mov	r0, r5
 800fbbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fbc2:	f000 bbb7 	b.w	8010334 <ucdr_serialize_sequence_char>
 800fbc6:	4770      	bx	lr

0800fbc8 <_Header__get_serialized_size>:
 800fbc8:	b538      	push	{r3, r4, r5, lr}
 800fbca:	4604      	mov	r4, r0
 800fbcc:	b150      	cbz	r0, 800fbe4 <_Header__get_serialized_size+0x1c>
 800fbce:	2100      	movs	r1, #0
 800fbd0:	f000 f82a 	bl	800fc28 <get_serialized_size_builtin_interfaces__msg__Time>
 800fbd4:	2104      	movs	r1, #4
 800fbd6:	4605      	mov	r5, r0
 800fbd8:	f7fc ff5c 	bl	800ca94 <ucdr_alignment>
 800fbdc:	68e2      	ldr	r2, [r4, #12]
 800fbde:	3205      	adds	r2, #5
 800fbe0:	1953      	adds	r3, r2, r5
 800fbe2:	4418      	add	r0, r3
 800fbe4:	bd38      	pop	{r3, r4, r5, pc}
 800fbe6:	bf00      	nop

0800fbe8 <max_serialized_size_std_msgs__msg__Header>:
 800fbe8:	b510      	push	{r4, lr}
 800fbea:	2301      	movs	r3, #1
 800fbec:	4604      	mov	r4, r0
 800fbee:	7003      	strb	r3, [r0, #0]
 800fbf0:	f000 f86a 	bl	800fcc8 <max_serialized_size_builtin_interfaces__msg__Time>
 800fbf4:	2300      	movs	r3, #0
 800fbf6:	7023      	strb	r3, [r4, #0]
 800fbf8:	bd10      	pop	{r4, pc}
 800fbfa:	bf00      	nop

0800fbfc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800fbfc:	4800      	ldr	r0, [pc, #0]	@ (800fc00 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 800fbfe:	4770      	bx	lr
 800fc00:	200007f8 	.word	0x200007f8

0800fc04 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 800fc04:	f008 b988 	b.w	8017f18 <builtin_interfaces__msg__Time__init>

0800fc08 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 800fc08:	f008 b98a 	b.w	8017f20 <builtin_interfaces__msg__Time__fini>

0800fc0c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800fc0c:	4b04      	ldr	r3, [pc, #16]	@ (800fc20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800fc0e:	681a      	ldr	r2, [r3, #0]
 800fc10:	b10a      	cbz	r2, 800fc16 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 800fc12:	4803      	ldr	r0, [pc, #12]	@ (800fc20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800fc14:	4770      	bx	lr
 800fc16:	4a03      	ldr	r2, [pc, #12]	@ (800fc24 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 800fc18:	4801      	ldr	r0, [pc, #4]	@ (800fc20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800fc1a:	6812      	ldr	r2, [r2, #0]
 800fc1c:	601a      	str	r2, [r3, #0]
 800fc1e:	4770      	bx	lr
 800fc20:	20000898 	.word	0x20000898
 800fc24:	20000514 	.word	0x20000514

0800fc28 <get_serialized_size_builtin_interfaces__msg__Time>:
 800fc28:	b180      	cbz	r0, 800fc4c <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 800fc2a:	b538      	push	{r3, r4, r5, lr}
 800fc2c:	460d      	mov	r5, r1
 800fc2e:	4628      	mov	r0, r5
 800fc30:	2104      	movs	r1, #4
 800fc32:	f7fc ff2f 	bl	800ca94 <ucdr_alignment>
 800fc36:	1d2b      	adds	r3, r5, #4
 800fc38:	181c      	adds	r4, r3, r0
 800fc3a:	2104      	movs	r1, #4
 800fc3c:	4620      	mov	r0, r4
 800fc3e:	f7fc ff29 	bl	800ca94 <ucdr_alignment>
 800fc42:	f1c5 0504 	rsb	r5, r5, #4
 800fc46:	4428      	add	r0, r5
 800fc48:	4420      	add	r0, r4
 800fc4a:	bd38      	pop	{r3, r4, r5, pc}
 800fc4c:	4770      	bx	lr
 800fc4e:	bf00      	nop

0800fc50 <_Time__cdr_deserialize>:
 800fc50:	b538      	push	{r3, r4, r5, lr}
 800fc52:	460c      	mov	r4, r1
 800fc54:	b141      	cbz	r1, 800fc68 <_Time__cdr_deserialize+0x18>
 800fc56:	4605      	mov	r5, r0
 800fc58:	f7fc fafe 	bl	800c258 <ucdr_deserialize_int32_t>
 800fc5c:	1d21      	adds	r1, r4, #4
 800fc5e:	4628      	mov	r0, r5
 800fc60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc64:	f7fb bf76 	b.w	800bb54 <ucdr_deserialize_uint32_t>
 800fc68:	4608      	mov	r0, r1
 800fc6a:	bd38      	pop	{r3, r4, r5, pc}

0800fc6c <_Time__cdr_serialize>:
 800fc6c:	b160      	cbz	r0, 800fc88 <_Time__cdr_serialize+0x1c>
 800fc6e:	b538      	push	{r3, r4, r5, lr}
 800fc70:	460d      	mov	r5, r1
 800fc72:	4604      	mov	r4, r0
 800fc74:	6801      	ldr	r1, [r0, #0]
 800fc76:	4628      	mov	r0, r5
 800fc78:	f7fc fa56 	bl	800c128 <ucdr_serialize_int32_t>
 800fc7c:	6861      	ldr	r1, [r4, #4]
 800fc7e:	4628      	mov	r0, r5
 800fc80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc84:	f7fb be36 	b.w	800b8f4 <ucdr_serialize_uint32_t>
 800fc88:	4770      	bx	lr
 800fc8a:	bf00      	nop

0800fc8c <_Time__get_serialized_size>:
 800fc8c:	b160      	cbz	r0, 800fca8 <_Time__get_serialized_size+0x1c>
 800fc8e:	b510      	push	{r4, lr}
 800fc90:	2104      	movs	r1, #4
 800fc92:	2000      	movs	r0, #0
 800fc94:	f7fc fefe 	bl	800ca94 <ucdr_alignment>
 800fc98:	1d04      	adds	r4, r0, #4
 800fc9a:	2104      	movs	r1, #4
 800fc9c:	4620      	mov	r0, r4
 800fc9e:	f7fc fef9 	bl	800ca94 <ucdr_alignment>
 800fca2:	3004      	adds	r0, #4
 800fca4:	4420      	add	r0, r4
 800fca6:	bd10      	pop	{r4, pc}
 800fca8:	4770      	bx	lr
 800fcaa:	bf00      	nop

0800fcac <_Time__max_serialized_size>:
 800fcac:	b510      	push	{r4, lr}
 800fcae:	2104      	movs	r1, #4
 800fcb0:	2000      	movs	r0, #0
 800fcb2:	f7fc feef 	bl	800ca94 <ucdr_alignment>
 800fcb6:	1d04      	adds	r4, r0, #4
 800fcb8:	2104      	movs	r1, #4
 800fcba:	4620      	mov	r0, r4
 800fcbc:	f7fc feea 	bl	800ca94 <ucdr_alignment>
 800fcc0:	3004      	adds	r0, #4
 800fcc2:	4420      	add	r0, r4
 800fcc4:	bd10      	pop	{r4, pc}
 800fcc6:	bf00      	nop

0800fcc8 <max_serialized_size_builtin_interfaces__msg__Time>:
 800fcc8:	b538      	push	{r3, r4, r5, lr}
 800fcca:	460c      	mov	r4, r1
 800fccc:	2301      	movs	r3, #1
 800fcce:	7003      	strb	r3, [r0, #0]
 800fcd0:	2104      	movs	r1, #4
 800fcd2:	4620      	mov	r0, r4
 800fcd4:	f7fc fede 	bl	800ca94 <ucdr_alignment>
 800fcd8:	1d25      	adds	r5, r4, #4
 800fcda:	4405      	add	r5, r0
 800fcdc:	2104      	movs	r1, #4
 800fcde:	4628      	mov	r0, r5
 800fce0:	f7fc fed8 	bl	800ca94 <ucdr_alignment>
 800fce4:	f1c4 0404 	rsb	r4, r4, #4
 800fce8:	4420      	add	r0, r4
 800fcea:	4428      	add	r0, r5
 800fcec:	bd38      	pop	{r3, r4, r5, pc}
 800fcee:	bf00      	nop

0800fcf0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800fcf0:	4800      	ldr	r0, [pc, #0]	@ (800fcf4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 800fcf2:	4770      	bx	lr
 800fcf4:	200008a4 	.word	0x200008a4

0800fcf8 <geometry_msgs__msg__Twist__init>:
 800fcf8:	b570      	push	{r4, r5, r6, lr}
 800fcfa:	4605      	mov	r5, r0
 800fcfc:	b1a8      	cbz	r0, 800fd2a <geometry_msgs__msg__Twist__init+0x32>
 800fcfe:	f000 f82b 	bl	800fd58 <geometry_msgs__msg__Vector3__init>
 800fd02:	4604      	mov	r4, r0
 800fd04:	b140      	cbz	r0, 800fd18 <geometry_msgs__msg__Twist__init+0x20>
 800fd06:	f105 0618 	add.w	r6, r5, #24
 800fd0a:	4630      	mov	r0, r6
 800fd0c:	f000 f824 	bl	800fd58 <geometry_msgs__msg__Vector3__init>
 800fd10:	4604      	mov	r4, r0
 800fd12:	b168      	cbz	r0, 800fd30 <geometry_msgs__msg__Twist__init+0x38>
 800fd14:	4620      	mov	r0, r4
 800fd16:	bd70      	pop	{r4, r5, r6, pc}
 800fd18:	4628      	mov	r0, r5
 800fd1a:	f000 f821 	bl	800fd60 <geometry_msgs__msg__Vector3__fini>
 800fd1e:	f105 0018 	add.w	r0, r5, #24
 800fd22:	f000 f81d 	bl	800fd60 <geometry_msgs__msg__Vector3__fini>
 800fd26:	4620      	mov	r0, r4
 800fd28:	bd70      	pop	{r4, r5, r6, pc}
 800fd2a:	4604      	mov	r4, r0
 800fd2c:	4620      	mov	r0, r4
 800fd2e:	bd70      	pop	{r4, r5, r6, pc}
 800fd30:	4628      	mov	r0, r5
 800fd32:	f000 f815 	bl	800fd60 <geometry_msgs__msg__Vector3__fini>
 800fd36:	4630      	mov	r0, r6
 800fd38:	f000 f812 	bl	800fd60 <geometry_msgs__msg__Vector3__fini>
 800fd3c:	e7ea      	b.n	800fd14 <geometry_msgs__msg__Twist__init+0x1c>
 800fd3e:	bf00      	nop

0800fd40 <geometry_msgs__msg__Twist__fini>:
 800fd40:	b148      	cbz	r0, 800fd56 <geometry_msgs__msg__Twist__fini+0x16>
 800fd42:	b510      	push	{r4, lr}
 800fd44:	4604      	mov	r4, r0
 800fd46:	f000 f80b 	bl	800fd60 <geometry_msgs__msg__Vector3__fini>
 800fd4a:	f104 0018 	add.w	r0, r4, #24
 800fd4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd52:	f000 b805 	b.w	800fd60 <geometry_msgs__msg__Vector3__fini>
 800fd56:	4770      	bx	lr

0800fd58 <geometry_msgs__msg__Vector3__init>:
 800fd58:	3800      	subs	r0, #0
 800fd5a:	bf18      	it	ne
 800fd5c:	2001      	movne	r0, #1
 800fd5e:	4770      	bx	lr

0800fd60 <geometry_msgs__msg__Vector3__fini>:
 800fd60:	4770      	bx	lr
 800fd62:	bf00      	nop

0800fd64 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_init_function>:
 800fd64:	f008 b8e0 	b.w	8017f28 <geometry_msgs__msg__Quaternion__init>

0800fd68 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_fini_function>:
 800fd68:	f008 b8f2 	b.w	8017f50 <geometry_msgs__msg__Quaternion__fini>

0800fd6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 800fd6c:	4b04      	ldr	r3, [pc, #16]	@ (800fd80 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800fd6e:	681a      	ldr	r2, [r3, #0]
 800fd70:	b10a      	cbz	r2, 800fd76 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0xa>
 800fd72:	4803      	ldr	r0, [pc, #12]	@ (800fd80 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800fd74:	4770      	bx	lr
 800fd76:	4a03      	ldr	r2, [pc, #12]	@ (800fd84 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x18>)
 800fd78:	4801      	ldr	r0, [pc, #4]	@ (800fd80 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800fd7a:	6812      	ldr	r2, [r2, #0]
 800fd7c:	601a      	str	r2, [r3, #0]
 800fd7e:	4770      	bx	lr
 800fd80:	200009bc 	.word	0x200009bc
 800fd84:	20000514 	.word	0x20000514

0800fd88 <get_serialized_size_geometry_msgs__msg__Quaternion>:
 800fd88:	b1f0      	cbz	r0, 800fdc8 <get_serialized_size_geometry_msgs__msg__Quaternion+0x40>
 800fd8a:	b570      	push	{r4, r5, r6, lr}
 800fd8c:	460d      	mov	r5, r1
 800fd8e:	4628      	mov	r0, r5
 800fd90:	2108      	movs	r1, #8
 800fd92:	f7fc fe7f 	bl	800ca94 <ucdr_alignment>
 800fd96:	f105 0308 	add.w	r3, r5, #8
 800fd9a:	181e      	adds	r6, r3, r0
 800fd9c:	2108      	movs	r1, #8
 800fd9e:	4630      	mov	r0, r6
 800fda0:	f7fc fe78 	bl	800ca94 <ucdr_alignment>
 800fda4:	f100 0408 	add.w	r4, r0, #8
 800fda8:	4434      	add	r4, r6
 800fdaa:	2108      	movs	r1, #8
 800fdac:	4620      	mov	r0, r4
 800fdae:	f7fc fe71 	bl	800ca94 <ucdr_alignment>
 800fdb2:	3008      	adds	r0, #8
 800fdb4:	4404      	add	r4, r0
 800fdb6:	2108      	movs	r1, #8
 800fdb8:	4620      	mov	r0, r4
 800fdba:	f7fc fe6b 	bl	800ca94 <ucdr_alignment>
 800fdbe:	f1c5 0508 	rsb	r5, r5, #8
 800fdc2:	4428      	add	r0, r5
 800fdc4:	4420      	add	r0, r4
 800fdc6:	bd70      	pop	{r4, r5, r6, pc}
 800fdc8:	4770      	bx	lr
 800fdca:	bf00      	nop

0800fdcc <_Quaternion__cdr_deserialize>:
 800fdcc:	b538      	push	{r3, r4, r5, lr}
 800fdce:	460c      	mov	r4, r1
 800fdd0:	b199      	cbz	r1, 800fdfa <_Quaternion__cdr_deserialize+0x2e>
 800fdd2:	4605      	mov	r5, r0
 800fdd4:	f7fc fc72 	bl	800c6bc <ucdr_deserialize_double>
 800fdd8:	f104 0108 	add.w	r1, r4, #8
 800fddc:	4628      	mov	r0, r5
 800fdde:	f7fc fc6d 	bl	800c6bc <ucdr_deserialize_double>
 800fde2:	f104 0110 	add.w	r1, r4, #16
 800fde6:	4628      	mov	r0, r5
 800fde8:	f7fc fc68 	bl	800c6bc <ucdr_deserialize_double>
 800fdec:	f104 0118 	add.w	r1, r4, #24
 800fdf0:	4628      	mov	r0, r5
 800fdf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fdf6:	f7fc bc61 	b.w	800c6bc <ucdr_deserialize_double>
 800fdfa:	4608      	mov	r0, r1
 800fdfc:	bd38      	pop	{r3, r4, r5, pc}
 800fdfe:	bf00      	nop

0800fe00 <_Quaternion__cdr_serialize>:
 800fe00:	b1c0      	cbz	r0, 800fe34 <_Quaternion__cdr_serialize+0x34>
 800fe02:	b538      	push	{r3, r4, r5, lr}
 800fe04:	ed90 0b00 	vldr	d0, [r0]
 800fe08:	460d      	mov	r5, r1
 800fe0a:	4604      	mov	r4, r0
 800fe0c:	4608      	mov	r0, r1
 800fe0e:	f7fc fab3 	bl	800c378 <ucdr_serialize_double>
 800fe12:	ed94 0b02 	vldr	d0, [r4, #8]
 800fe16:	4628      	mov	r0, r5
 800fe18:	f7fc faae 	bl	800c378 <ucdr_serialize_double>
 800fe1c:	ed94 0b04 	vldr	d0, [r4, #16]
 800fe20:	4628      	mov	r0, r5
 800fe22:	f7fc faa9 	bl	800c378 <ucdr_serialize_double>
 800fe26:	ed94 0b06 	vldr	d0, [r4, #24]
 800fe2a:	4628      	mov	r0, r5
 800fe2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fe30:	f7fc baa2 	b.w	800c378 <ucdr_serialize_double>
 800fe34:	4770      	bx	lr
 800fe36:	bf00      	nop

0800fe38 <_Quaternion__get_serialized_size>:
 800fe38:	b1d0      	cbz	r0, 800fe70 <_Quaternion__get_serialized_size+0x38>
 800fe3a:	b538      	push	{r3, r4, r5, lr}
 800fe3c:	2108      	movs	r1, #8
 800fe3e:	2000      	movs	r0, #0
 800fe40:	f7fc fe28 	bl	800ca94 <ucdr_alignment>
 800fe44:	f100 0508 	add.w	r5, r0, #8
 800fe48:	2108      	movs	r1, #8
 800fe4a:	4628      	mov	r0, r5
 800fe4c:	f7fc fe22 	bl	800ca94 <ucdr_alignment>
 800fe50:	f100 0408 	add.w	r4, r0, #8
 800fe54:	442c      	add	r4, r5
 800fe56:	2108      	movs	r1, #8
 800fe58:	4620      	mov	r0, r4
 800fe5a:	f7fc fe1b 	bl	800ca94 <ucdr_alignment>
 800fe5e:	3008      	adds	r0, #8
 800fe60:	4404      	add	r4, r0
 800fe62:	2108      	movs	r1, #8
 800fe64:	4620      	mov	r0, r4
 800fe66:	f7fc fe15 	bl	800ca94 <ucdr_alignment>
 800fe6a:	3008      	adds	r0, #8
 800fe6c:	4420      	add	r0, r4
 800fe6e:	bd38      	pop	{r3, r4, r5, pc}
 800fe70:	4770      	bx	lr
 800fe72:	bf00      	nop

0800fe74 <_Quaternion__max_serialized_size>:
 800fe74:	b538      	push	{r3, r4, r5, lr}
 800fe76:	2108      	movs	r1, #8
 800fe78:	2000      	movs	r0, #0
 800fe7a:	f7fc fe0b 	bl	800ca94 <ucdr_alignment>
 800fe7e:	f100 0508 	add.w	r5, r0, #8
 800fe82:	2108      	movs	r1, #8
 800fe84:	4628      	mov	r0, r5
 800fe86:	f7fc fe05 	bl	800ca94 <ucdr_alignment>
 800fe8a:	f100 0408 	add.w	r4, r0, #8
 800fe8e:	442c      	add	r4, r5
 800fe90:	2108      	movs	r1, #8
 800fe92:	4620      	mov	r0, r4
 800fe94:	f7fc fdfe 	bl	800ca94 <ucdr_alignment>
 800fe98:	3008      	adds	r0, #8
 800fe9a:	4404      	add	r4, r0
 800fe9c:	2108      	movs	r1, #8
 800fe9e:	4620      	mov	r0, r4
 800fea0:	f7fc fdf8 	bl	800ca94 <ucdr_alignment>
 800fea4:	3008      	adds	r0, #8
 800fea6:	4420      	add	r0, r4
 800fea8:	bd38      	pop	{r3, r4, r5, pc}
 800feaa:	bf00      	nop

0800feac <max_serialized_size_geometry_msgs__msg__Quaternion>:
 800feac:	b570      	push	{r4, r5, r6, lr}
 800feae:	2301      	movs	r3, #1
 800feb0:	460c      	mov	r4, r1
 800feb2:	7003      	strb	r3, [r0, #0]
 800feb4:	2108      	movs	r1, #8
 800feb6:	4620      	mov	r0, r4
 800feb8:	f7fc fdec 	bl	800ca94 <ucdr_alignment>
 800febc:	f104 0508 	add.w	r5, r4, #8
 800fec0:	1946      	adds	r6, r0, r5
 800fec2:	2108      	movs	r1, #8
 800fec4:	4630      	mov	r0, r6
 800fec6:	f7fc fde5 	bl	800ca94 <ucdr_alignment>
 800feca:	f100 0508 	add.w	r5, r0, #8
 800fece:	4435      	add	r5, r6
 800fed0:	2108      	movs	r1, #8
 800fed2:	4628      	mov	r0, r5
 800fed4:	f7fc fdde 	bl	800ca94 <ucdr_alignment>
 800fed8:	3008      	adds	r0, #8
 800feda:	4405      	add	r5, r0
 800fedc:	2108      	movs	r1, #8
 800fede:	4628      	mov	r0, r5
 800fee0:	f7fc fdd8 	bl	800ca94 <ucdr_alignment>
 800fee4:	f1c4 0408 	rsb	r4, r4, #8
 800fee8:	4420      	add	r0, r4
 800feea:	4428      	add	r0, r5
 800feec:	bd70      	pop	{r4, r5, r6, pc}
 800feee:	bf00      	nop

0800fef0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 800fef0:	4800      	ldr	r0, [pc, #0]	@ (800fef4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x4>)
 800fef2:	4770      	bx	lr
 800fef4:	200009c8 	.word	0x200009c8

0800fef8 <imu_interfaces__srv__ImuCalibration_Request__init>:
 800fef8:	b538      	push	{r3, r4, r5, lr}
 800fefa:	4604      	mov	r4, r0
 800fefc:	b128      	cbz	r0, 800ff0a <imu_interfaces__srv__ImuCalibration_Request__init+0x12>
 800fefe:	f007 ff6b 	bl	8017dd8 <sensor_msgs__msg__Imu__init>
 800ff02:	4605      	mov	r5, r0
 800ff04:	b120      	cbz	r0, 800ff10 <imu_interfaces__srv__ImuCalibration_Request__init+0x18>
 800ff06:	4628      	mov	r0, r5
 800ff08:	bd38      	pop	{r3, r4, r5, pc}
 800ff0a:	4605      	mov	r5, r0
 800ff0c:	4628      	mov	r0, r5
 800ff0e:	bd38      	pop	{r3, r4, r5, pc}
 800ff10:	4620      	mov	r0, r4
 800ff12:	f007 ffb7 	bl	8017e84 <sensor_msgs__msg__Imu__fini>
 800ff16:	4628      	mov	r0, r5
 800ff18:	bd38      	pop	{r3, r4, r5, pc}
 800ff1a:	bf00      	nop

0800ff1c <imu_interfaces__srv__ImuCalibration_Request__fini>:
 800ff1c:	b108      	cbz	r0, 800ff22 <imu_interfaces__srv__ImuCalibration_Request__fini+0x6>
 800ff1e:	f007 bfb1 	b.w	8017e84 <sensor_msgs__msg__Imu__fini>
 800ff22:	4770      	bx	lr

0800ff24 <imu_interfaces__srv__ImuCalibration_Response__init>:
 800ff24:	3800      	subs	r0, #0
 800ff26:	bf18      	it	ne
 800ff28:	2001      	movne	r0, #1
 800ff2a:	4770      	bx	lr

0800ff2c <imu_interfaces__srv__ImuCalibration_Response__fini>:
 800ff2c:	4770      	bx	lr
 800ff2e:	bf00      	nop

0800ff30 <imu_interfaces__srv__ImuStatus_Request__init>:
 800ff30:	b538      	push	{r3, r4, r5, lr}
 800ff32:	4604      	mov	r4, r0
 800ff34:	b128      	cbz	r0, 800ff42 <imu_interfaces__srv__ImuStatus_Request__init+0x12>
 800ff36:	f007 ffb9 	bl	8017eac <std_msgs__msg__Bool__init>
 800ff3a:	4605      	mov	r5, r0
 800ff3c:	b120      	cbz	r0, 800ff48 <imu_interfaces__srv__ImuStatus_Request__init+0x18>
 800ff3e:	4628      	mov	r0, r5
 800ff40:	bd38      	pop	{r3, r4, r5, pc}
 800ff42:	4605      	mov	r5, r0
 800ff44:	4628      	mov	r0, r5
 800ff46:	bd38      	pop	{r3, r4, r5, pc}
 800ff48:	4620      	mov	r0, r4
 800ff4a:	f007 ffb3 	bl	8017eb4 <std_msgs__msg__Bool__fini>
 800ff4e:	4628      	mov	r0, r5
 800ff50:	bd38      	pop	{r3, r4, r5, pc}
 800ff52:	bf00      	nop

0800ff54 <imu_interfaces__srv__ImuStatus_Request__fini>:
 800ff54:	b108      	cbz	r0, 800ff5a <imu_interfaces__srv__ImuStatus_Request__fini+0x6>
 800ff56:	f007 bfad 	b.w	8017eb4 <std_msgs__msg__Bool__fini>
 800ff5a:	4770      	bx	lr

0800ff5c <imu_interfaces__srv__ImuStatus_Response__init>:
 800ff5c:	b538      	push	{r3, r4, r5, lr}
 800ff5e:	4604      	mov	r4, r0
 800ff60:	b128      	cbz	r0, 800ff6e <imu_interfaces__srv__ImuStatus_Response__init+0x12>
 800ff62:	f007 ffa3 	bl	8017eac <std_msgs__msg__Bool__init>
 800ff66:	4605      	mov	r5, r0
 800ff68:	b120      	cbz	r0, 800ff74 <imu_interfaces__srv__ImuStatus_Response__init+0x18>
 800ff6a:	4628      	mov	r0, r5
 800ff6c:	bd38      	pop	{r3, r4, r5, pc}
 800ff6e:	4605      	mov	r5, r0
 800ff70:	4628      	mov	r0, r5
 800ff72:	bd38      	pop	{r3, r4, r5, pc}
 800ff74:	4620      	mov	r0, r4
 800ff76:	f007 ff9d 	bl	8017eb4 <std_msgs__msg__Bool__fini>
 800ff7a:	4628      	mov	r0, r5
 800ff7c:	bd38      	pop	{r3, r4, r5, pc}
 800ff7e:	bf00      	nop

0800ff80 <imu_interfaces__srv__ImuStatus_Response__fini>:
 800ff80:	b108      	cbz	r0, 800ff86 <imu_interfaces__srv__ImuStatus_Response__fini+0x6>
 800ff82:	f007 bf97 	b.w	8017eb4 <std_msgs__msg__Bool__fini>
 800ff86:	4770      	bx	lr

0800ff88 <ucdr_serialize_endian_array_char>:
 800ff88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff8c:	4619      	mov	r1, r3
 800ff8e:	461f      	mov	r7, r3
 800ff90:	4605      	mov	r5, r0
 800ff92:	4690      	mov	r8, r2
 800ff94:	f7fc fd26 	bl	800c9e4 <ucdr_check_buffer_available_for>
 800ff98:	b9e0      	cbnz	r0, 800ffd4 <ucdr_serialize_endian_array_char+0x4c>
 800ff9a:	463e      	mov	r6, r7
 800ff9c:	e009      	b.n	800ffb2 <ucdr_serialize_endian_array_char+0x2a>
 800ff9e:	68a8      	ldr	r0, [r5, #8]
 800ffa0:	f009 ff19 	bl	8019dd6 <memcpy>
 800ffa4:	68ab      	ldr	r3, [r5, #8]
 800ffa6:	6928      	ldr	r0, [r5, #16]
 800ffa8:	4423      	add	r3, r4
 800ffaa:	4420      	add	r0, r4
 800ffac:	1b36      	subs	r6, r6, r4
 800ffae:	60ab      	str	r3, [r5, #8]
 800ffb0:	6128      	str	r0, [r5, #16]
 800ffb2:	4631      	mov	r1, r6
 800ffb4:	2201      	movs	r2, #1
 800ffb6:	4628      	mov	r0, r5
 800ffb8:	f7fc fd9c 	bl	800caf4 <ucdr_check_final_buffer_behavior_array>
 800ffbc:	1bb9      	subs	r1, r7, r6
 800ffbe:	4441      	add	r1, r8
 800ffc0:	4604      	mov	r4, r0
 800ffc2:	4602      	mov	r2, r0
 800ffc4:	2800      	cmp	r0, #0
 800ffc6:	d1ea      	bne.n	800ff9e <ucdr_serialize_endian_array_char+0x16>
 800ffc8:	2301      	movs	r3, #1
 800ffca:	7da8      	ldrb	r0, [r5, #22]
 800ffcc:	756b      	strb	r3, [r5, #21]
 800ffce:	4058      	eors	r0, r3
 800ffd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffd4:	463a      	mov	r2, r7
 800ffd6:	68a8      	ldr	r0, [r5, #8]
 800ffd8:	4641      	mov	r1, r8
 800ffda:	f009 fefc 	bl	8019dd6 <memcpy>
 800ffde:	68aa      	ldr	r2, [r5, #8]
 800ffe0:	692b      	ldr	r3, [r5, #16]
 800ffe2:	443a      	add	r2, r7
 800ffe4:	443b      	add	r3, r7
 800ffe6:	60aa      	str	r2, [r5, #8]
 800ffe8:	612b      	str	r3, [r5, #16]
 800ffea:	e7ed      	b.n	800ffc8 <ucdr_serialize_endian_array_char+0x40>

0800ffec <ucdr_deserialize_endian_array_char>:
 800ffec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fff0:	4619      	mov	r1, r3
 800fff2:	461f      	mov	r7, r3
 800fff4:	4605      	mov	r5, r0
 800fff6:	4690      	mov	r8, r2
 800fff8:	f7fc fcf4 	bl	800c9e4 <ucdr_check_buffer_available_for>
 800fffc:	b9e0      	cbnz	r0, 8010038 <ucdr_deserialize_endian_array_char+0x4c>
 800fffe:	463e      	mov	r6, r7
 8010000:	e009      	b.n	8010016 <ucdr_deserialize_endian_array_char+0x2a>
 8010002:	68a9      	ldr	r1, [r5, #8]
 8010004:	f009 fee7 	bl	8019dd6 <memcpy>
 8010008:	68ab      	ldr	r3, [r5, #8]
 801000a:	6928      	ldr	r0, [r5, #16]
 801000c:	4423      	add	r3, r4
 801000e:	4420      	add	r0, r4
 8010010:	1b36      	subs	r6, r6, r4
 8010012:	60ab      	str	r3, [r5, #8]
 8010014:	6128      	str	r0, [r5, #16]
 8010016:	2201      	movs	r2, #1
 8010018:	4631      	mov	r1, r6
 801001a:	4628      	mov	r0, r5
 801001c:	f7fc fd6a 	bl	800caf4 <ucdr_check_final_buffer_behavior_array>
 8010020:	4604      	mov	r4, r0
 8010022:	1bb8      	subs	r0, r7, r6
 8010024:	4440      	add	r0, r8
 8010026:	4622      	mov	r2, r4
 8010028:	2c00      	cmp	r4, #0
 801002a:	d1ea      	bne.n	8010002 <ucdr_deserialize_endian_array_char+0x16>
 801002c:	2301      	movs	r3, #1
 801002e:	7da8      	ldrb	r0, [r5, #22]
 8010030:	756b      	strb	r3, [r5, #21]
 8010032:	4058      	eors	r0, r3
 8010034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010038:	463a      	mov	r2, r7
 801003a:	68a9      	ldr	r1, [r5, #8]
 801003c:	4640      	mov	r0, r8
 801003e:	f009 feca 	bl	8019dd6 <memcpy>
 8010042:	68aa      	ldr	r2, [r5, #8]
 8010044:	692b      	ldr	r3, [r5, #16]
 8010046:	443a      	add	r2, r7
 8010048:	443b      	add	r3, r7
 801004a:	60aa      	str	r2, [r5, #8]
 801004c:	612b      	str	r3, [r5, #16]
 801004e:	e7ed      	b.n	801002c <ucdr_deserialize_endian_array_char+0x40>

08010050 <ucdr_serialize_array_uint8_t>:
 8010050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010054:	4688      	mov	r8, r1
 8010056:	4611      	mov	r1, r2
 8010058:	4617      	mov	r7, r2
 801005a:	4605      	mov	r5, r0
 801005c:	f7fc fcc2 	bl	800c9e4 <ucdr_check_buffer_available_for>
 8010060:	b9e0      	cbnz	r0, 801009c <ucdr_serialize_array_uint8_t+0x4c>
 8010062:	463e      	mov	r6, r7
 8010064:	e009      	b.n	801007a <ucdr_serialize_array_uint8_t+0x2a>
 8010066:	68a8      	ldr	r0, [r5, #8]
 8010068:	f009 feb5 	bl	8019dd6 <memcpy>
 801006c:	68aa      	ldr	r2, [r5, #8]
 801006e:	692b      	ldr	r3, [r5, #16]
 8010070:	4422      	add	r2, r4
 8010072:	4423      	add	r3, r4
 8010074:	1b36      	subs	r6, r6, r4
 8010076:	60aa      	str	r2, [r5, #8]
 8010078:	612b      	str	r3, [r5, #16]
 801007a:	4631      	mov	r1, r6
 801007c:	2201      	movs	r2, #1
 801007e:	4628      	mov	r0, r5
 8010080:	f7fc fd38 	bl	800caf4 <ucdr_check_final_buffer_behavior_array>
 8010084:	1bb9      	subs	r1, r7, r6
 8010086:	4441      	add	r1, r8
 8010088:	4604      	mov	r4, r0
 801008a:	4602      	mov	r2, r0
 801008c:	2800      	cmp	r0, #0
 801008e:	d1ea      	bne.n	8010066 <ucdr_serialize_array_uint8_t+0x16>
 8010090:	2301      	movs	r3, #1
 8010092:	7da8      	ldrb	r0, [r5, #22]
 8010094:	756b      	strb	r3, [r5, #21]
 8010096:	4058      	eors	r0, r3
 8010098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801009c:	463a      	mov	r2, r7
 801009e:	68a8      	ldr	r0, [r5, #8]
 80100a0:	4641      	mov	r1, r8
 80100a2:	f009 fe98 	bl	8019dd6 <memcpy>
 80100a6:	68aa      	ldr	r2, [r5, #8]
 80100a8:	692b      	ldr	r3, [r5, #16]
 80100aa:	443a      	add	r2, r7
 80100ac:	443b      	add	r3, r7
 80100ae:	60aa      	str	r2, [r5, #8]
 80100b0:	612b      	str	r3, [r5, #16]
 80100b2:	e7ed      	b.n	8010090 <ucdr_serialize_array_uint8_t+0x40>

080100b4 <ucdr_serialize_endian_array_uint8_t>:
 80100b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100b8:	4619      	mov	r1, r3
 80100ba:	461f      	mov	r7, r3
 80100bc:	4605      	mov	r5, r0
 80100be:	4690      	mov	r8, r2
 80100c0:	f7fc fc90 	bl	800c9e4 <ucdr_check_buffer_available_for>
 80100c4:	b9e0      	cbnz	r0, 8010100 <ucdr_serialize_endian_array_uint8_t+0x4c>
 80100c6:	463e      	mov	r6, r7
 80100c8:	e009      	b.n	80100de <ucdr_serialize_endian_array_uint8_t+0x2a>
 80100ca:	68a8      	ldr	r0, [r5, #8]
 80100cc:	f009 fe83 	bl	8019dd6 <memcpy>
 80100d0:	68ab      	ldr	r3, [r5, #8]
 80100d2:	6928      	ldr	r0, [r5, #16]
 80100d4:	4423      	add	r3, r4
 80100d6:	4420      	add	r0, r4
 80100d8:	1b36      	subs	r6, r6, r4
 80100da:	60ab      	str	r3, [r5, #8]
 80100dc:	6128      	str	r0, [r5, #16]
 80100de:	4631      	mov	r1, r6
 80100e0:	2201      	movs	r2, #1
 80100e2:	4628      	mov	r0, r5
 80100e4:	f7fc fd06 	bl	800caf4 <ucdr_check_final_buffer_behavior_array>
 80100e8:	1bb9      	subs	r1, r7, r6
 80100ea:	4441      	add	r1, r8
 80100ec:	4604      	mov	r4, r0
 80100ee:	4602      	mov	r2, r0
 80100f0:	2800      	cmp	r0, #0
 80100f2:	d1ea      	bne.n	80100ca <ucdr_serialize_endian_array_uint8_t+0x16>
 80100f4:	2301      	movs	r3, #1
 80100f6:	7da8      	ldrb	r0, [r5, #22]
 80100f8:	756b      	strb	r3, [r5, #21]
 80100fa:	4058      	eors	r0, r3
 80100fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010100:	463a      	mov	r2, r7
 8010102:	68a8      	ldr	r0, [r5, #8]
 8010104:	4641      	mov	r1, r8
 8010106:	f009 fe66 	bl	8019dd6 <memcpy>
 801010a:	68aa      	ldr	r2, [r5, #8]
 801010c:	692b      	ldr	r3, [r5, #16]
 801010e:	443a      	add	r2, r7
 8010110:	443b      	add	r3, r7
 8010112:	60aa      	str	r2, [r5, #8]
 8010114:	612b      	str	r3, [r5, #16]
 8010116:	e7ed      	b.n	80100f4 <ucdr_serialize_endian_array_uint8_t+0x40>

08010118 <ucdr_deserialize_array_uint8_t>:
 8010118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801011c:	4688      	mov	r8, r1
 801011e:	4611      	mov	r1, r2
 8010120:	4617      	mov	r7, r2
 8010122:	4605      	mov	r5, r0
 8010124:	f7fc fc5e 	bl	800c9e4 <ucdr_check_buffer_available_for>
 8010128:	b9e0      	cbnz	r0, 8010164 <ucdr_deserialize_array_uint8_t+0x4c>
 801012a:	463e      	mov	r6, r7
 801012c:	e009      	b.n	8010142 <ucdr_deserialize_array_uint8_t+0x2a>
 801012e:	68a9      	ldr	r1, [r5, #8]
 8010130:	f009 fe51 	bl	8019dd6 <memcpy>
 8010134:	68aa      	ldr	r2, [r5, #8]
 8010136:	692b      	ldr	r3, [r5, #16]
 8010138:	4422      	add	r2, r4
 801013a:	4423      	add	r3, r4
 801013c:	1b36      	subs	r6, r6, r4
 801013e:	60aa      	str	r2, [r5, #8]
 8010140:	612b      	str	r3, [r5, #16]
 8010142:	2201      	movs	r2, #1
 8010144:	4631      	mov	r1, r6
 8010146:	4628      	mov	r0, r5
 8010148:	f7fc fcd4 	bl	800caf4 <ucdr_check_final_buffer_behavior_array>
 801014c:	4604      	mov	r4, r0
 801014e:	1bb8      	subs	r0, r7, r6
 8010150:	4440      	add	r0, r8
 8010152:	4622      	mov	r2, r4
 8010154:	2c00      	cmp	r4, #0
 8010156:	d1ea      	bne.n	801012e <ucdr_deserialize_array_uint8_t+0x16>
 8010158:	2301      	movs	r3, #1
 801015a:	7da8      	ldrb	r0, [r5, #22]
 801015c:	756b      	strb	r3, [r5, #21]
 801015e:	4058      	eors	r0, r3
 8010160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010164:	463a      	mov	r2, r7
 8010166:	68a9      	ldr	r1, [r5, #8]
 8010168:	4640      	mov	r0, r8
 801016a:	f009 fe34 	bl	8019dd6 <memcpy>
 801016e:	68aa      	ldr	r2, [r5, #8]
 8010170:	692b      	ldr	r3, [r5, #16]
 8010172:	443a      	add	r2, r7
 8010174:	443b      	add	r3, r7
 8010176:	60aa      	str	r2, [r5, #8]
 8010178:	612b      	str	r3, [r5, #16]
 801017a:	e7ed      	b.n	8010158 <ucdr_deserialize_array_uint8_t+0x40>

0801017c <ucdr_deserialize_endian_array_uint8_t>:
 801017c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010180:	4619      	mov	r1, r3
 8010182:	461f      	mov	r7, r3
 8010184:	4605      	mov	r5, r0
 8010186:	4690      	mov	r8, r2
 8010188:	f7fc fc2c 	bl	800c9e4 <ucdr_check_buffer_available_for>
 801018c:	b9e0      	cbnz	r0, 80101c8 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 801018e:	463e      	mov	r6, r7
 8010190:	e009      	b.n	80101a6 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8010192:	68a9      	ldr	r1, [r5, #8]
 8010194:	f009 fe1f 	bl	8019dd6 <memcpy>
 8010198:	68ab      	ldr	r3, [r5, #8]
 801019a:	6928      	ldr	r0, [r5, #16]
 801019c:	4423      	add	r3, r4
 801019e:	4420      	add	r0, r4
 80101a0:	1b36      	subs	r6, r6, r4
 80101a2:	60ab      	str	r3, [r5, #8]
 80101a4:	6128      	str	r0, [r5, #16]
 80101a6:	2201      	movs	r2, #1
 80101a8:	4631      	mov	r1, r6
 80101aa:	4628      	mov	r0, r5
 80101ac:	f7fc fca2 	bl	800caf4 <ucdr_check_final_buffer_behavior_array>
 80101b0:	4604      	mov	r4, r0
 80101b2:	1bb8      	subs	r0, r7, r6
 80101b4:	4440      	add	r0, r8
 80101b6:	4622      	mov	r2, r4
 80101b8:	2c00      	cmp	r4, #0
 80101ba:	d1ea      	bne.n	8010192 <ucdr_deserialize_endian_array_uint8_t+0x16>
 80101bc:	2301      	movs	r3, #1
 80101be:	7da8      	ldrb	r0, [r5, #22]
 80101c0:	756b      	strb	r3, [r5, #21]
 80101c2:	4058      	eors	r0, r3
 80101c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101c8:	463a      	mov	r2, r7
 80101ca:	68a9      	ldr	r1, [r5, #8]
 80101cc:	4640      	mov	r0, r8
 80101ce:	f009 fe02 	bl	8019dd6 <memcpy>
 80101d2:	68aa      	ldr	r2, [r5, #8]
 80101d4:	692b      	ldr	r3, [r5, #16]
 80101d6:	443a      	add	r2, r7
 80101d8:	443b      	add	r3, r7
 80101da:	60aa      	str	r2, [r5, #8]
 80101dc:	612b      	str	r3, [r5, #16]
 80101de:	e7ed      	b.n	80101bc <ucdr_deserialize_endian_array_uint8_t+0x40>

080101e0 <ucdr_serialize_array_double>:
 80101e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101e4:	460e      	mov	r6, r1
 80101e6:	2108      	movs	r1, #8
 80101e8:	4604      	mov	r4, r0
 80101ea:	4617      	mov	r7, r2
 80101ec:	f7fc fc5a 	bl	800caa4 <ucdr_buffer_alignment>
 80101f0:	4601      	mov	r1, r0
 80101f2:	4620      	mov	r0, r4
 80101f4:	7d65      	ldrb	r5, [r4, #21]
 80101f6:	f7fc fc99 	bl	800cb2c <ucdr_advance_buffer>
 80101fa:	7d21      	ldrb	r1, [r4, #20]
 80101fc:	7565      	strb	r5, [r4, #21]
 80101fe:	2901      	cmp	r1, #1
 8010200:	d010      	beq.n	8010224 <ucdr_serialize_array_double+0x44>
 8010202:	b157      	cbz	r7, 801021a <ucdr_serialize_array_double+0x3a>
 8010204:	2500      	movs	r5, #0
 8010206:	e000      	b.n	801020a <ucdr_serialize_array_double+0x2a>
 8010208:	7d21      	ldrb	r1, [r4, #20]
 801020a:	ecb6 0b02 	vldmia	r6!, {d0}
 801020e:	4620      	mov	r0, r4
 8010210:	3501      	adds	r5, #1
 8010212:	f7fc f981 	bl	800c518 <ucdr_serialize_endian_double>
 8010216:	42af      	cmp	r7, r5
 8010218:	d1f6      	bne.n	8010208 <ucdr_serialize_array_double+0x28>
 801021a:	7da0      	ldrb	r0, [r4, #22]
 801021c:	f080 0001 	eor.w	r0, r0, #1
 8010220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010224:	00ff      	lsls	r7, r7, #3
 8010226:	4639      	mov	r1, r7
 8010228:	4620      	mov	r0, r4
 801022a:	f7fc fbdb 	bl	800c9e4 <ucdr_check_buffer_available_for>
 801022e:	b9f8      	cbnz	r0, 8010270 <ucdr_serialize_array_double+0x90>
 8010230:	46b8      	mov	r8, r7
 8010232:	e00a      	b.n	801024a <ucdr_serialize_array_double+0x6a>
 8010234:	68a0      	ldr	r0, [r4, #8]
 8010236:	f009 fdce 	bl	8019dd6 <memcpy>
 801023a:	68a2      	ldr	r2, [r4, #8]
 801023c:	6923      	ldr	r3, [r4, #16]
 801023e:	442a      	add	r2, r5
 8010240:	442b      	add	r3, r5
 8010242:	eba8 0805 	sub.w	r8, r8, r5
 8010246:	60a2      	str	r2, [r4, #8]
 8010248:	6123      	str	r3, [r4, #16]
 801024a:	4641      	mov	r1, r8
 801024c:	2208      	movs	r2, #8
 801024e:	4620      	mov	r0, r4
 8010250:	f7fc fc50 	bl	800caf4 <ucdr_check_final_buffer_behavior_array>
 8010254:	eba7 0108 	sub.w	r1, r7, r8
 8010258:	4431      	add	r1, r6
 801025a:	4605      	mov	r5, r0
 801025c:	4602      	mov	r2, r0
 801025e:	2800      	cmp	r0, #0
 8010260:	d1e8      	bne.n	8010234 <ucdr_serialize_array_double+0x54>
 8010262:	7da0      	ldrb	r0, [r4, #22]
 8010264:	2308      	movs	r3, #8
 8010266:	7563      	strb	r3, [r4, #21]
 8010268:	f080 0001 	eor.w	r0, r0, #1
 801026c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010270:	463a      	mov	r2, r7
 8010272:	68a0      	ldr	r0, [r4, #8]
 8010274:	4631      	mov	r1, r6
 8010276:	f009 fdae 	bl	8019dd6 <memcpy>
 801027a:	68a2      	ldr	r2, [r4, #8]
 801027c:	6923      	ldr	r3, [r4, #16]
 801027e:	443a      	add	r2, r7
 8010280:	441f      	add	r7, r3
 8010282:	60a2      	str	r2, [r4, #8]
 8010284:	6127      	str	r7, [r4, #16]
 8010286:	e7ec      	b.n	8010262 <ucdr_serialize_array_double+0x82>

08010288 <ucdr_deserialize_array_double>:
 8010288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801028c:	460e      	mov	r6, r1
 801028e:	2108      	movs	r1, #8
 8010290:	4604      	mov	r4, r0
 8010292:	4617      	mov	r7, r2
 8010294:	f7fc fc06 	bl	800caa4 <ucdr_buffer_alignment>
 8010298:	4601      	mov	r1, r0
 801029a:	4620      	mov	r0, r4
 801029c:	7d65      	ldrb	r5, [r4, #21]
 801029e:	f7fc fc45 	bl	800cb2c <ucdr_advance_buffer>
 80102a2:	7d21      	ldrb	r1, [r4, #20]
 80102a4:	7565      	strb	r5, [r4, #21]
 80102a6:	2901      	cmp	r1, #1
 80102a8:	d011      	beq.n	80102ce <ucdr_deserialize_array_double+0x46>
 80102aa:	b15f      	cbz	r7, 80102c4 <ucdr_deserialize_array_double+0x3c>
 80102ac:	2500      	movs	r5, #0
 80102ae:	e000      	b.n	80102b2 <ucdr_deserialize_array_double+0x2a>
 80102b0:	7d21      	ldrb	r1, [r4, #20]
 80102b2:	4632      	mov	r2, r6
 80102b4:	4620      	mov	r0, r4
 80102b6:	3501      	adds	r5, #1
 80102b8:	f7fc fac6 	bl	800c848 <ucdr_deserialize_endian_double>
 80102bc:	42af      	cmp	r7, r5
 80102be:	f106 0608 	add.w	r6, r6, #8
 80102c2:	d1f5      	bne.n	80102b0 <ucdr_deserialize_array_double+0x28>
 80102c4:	7da0      	ldrb	r0, [r4, #22]
 80102c6:	f080 0001 	eor.w	r0, r0, #1
 80102ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102ce:	00ff      	lsls	r7, r7, #3
 80102d0:	4639      	mov	r1, r7
 80102d2:	4620      	mov	r0, r4
 80102d4:	f7fc fb86 	bl	800c9e4 <ucdr_check_buffer_available_for>
 80102d8:	b9f8      	cbnz	r0, 801031a <ucdr_deserialize_array_double+0x92>
 80102da:	46b8      	mov	r8, r7
 80102dc:	e00a      	b.n	80102f4 <ucdr_deserialize_array_double+0x6c>
 80102de:	68a1      	ldr	r1, [r4, #8]
 80102e0:	f009 fd79 	bl	8019dd6 <memcpy>
 80102e4:	68a2      	ldr	r2, [r4, #8]
 80102e6:	6923      	ldr	r3, [r4, #16]
 80102e8:	442a      	add	r2, r5
 80102ea:	442b      	add	r3, r5
 80102ec:	eba8 0805 	sub.w	r8, r8, r5
 80102f0:	60a2      	str	r2, [r4, #8]
 80102f2:	6123      	str	r3, [r4, #16]
 80102f4:	2208      	movs	r2, #8
 80102f6:	4641      	mov	r1, r8
 80102f8:	4620      	mov	r0, r4
 80102fa:	f7fc fbfb 	bl	800caf4 <ucdr_check_final_buffer_behavior_array>
 80102fe:	4605      	mov	r5, r0
 8010300:	eba7 0008 	sub.w	r0, r7, r8
 8010304:	4430      	add	r0, r6
 8010306:	462a      	mov	r2, r5
 8010308:	2d00      	cmp	r5, #0
 801030a:	d1e8      	bne.n	80102de <ucdr_deserialize_array_double+0x56>
 801030c:	7da0      	ldrb	r0, [r4, #22]
 801030e:	2308      	movs	r3, #8
 8010310:	7563      	strb	r3, [r4, #21]
 8010312:	f080 0001 	eor.w	r0, r0, #1
 8010316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801031a:	463a      	mov	r2, r7
 801031c:	68a1      	ldr	r1, [r4, #8]
 801031e:	4630      	mov	r0, r6
 8010320:	f009 fd59 	bl	8019dd6 <memcpy>
 8010324:	68a2      	ldr	r2, [r4, #8]
 8010326:	6923      	ldr	r3, [r4, #16]
 8010328:	443a      	add	r2, r7
 801032a:	441f      	add	r7, r3
 801032c:	60a2      	str	r2, [r4, #8]
 801032e:	6127      	str	r7, [r4, #16]
 8010330:	e7ec      	b.n	801030c <ucdr_deserialize_array_double+0x84>
 8010332:	bf00      	nop

08010334 <ucdr_serialize_sequence_char>:
 8010334:	b570      	push	{r4, r5, r6, lr}
 8010336:	4615      	mov	r5, r2
 8010338:	460e      	mov	r6, r1
 801033a:	7d01      	ldrb	r1, [r0, #20]
 801033c:	4604      	mov	r4, r0
 801033e:	f7fb fb71 	bl	800ba24 <ucdr_serialize_endian_uint32_t>
 8010342:	b90d      	cbnz	r5, 8010348 <ucdr_serialize_sequence_char+0x14>
 8010344:	2001      	movs	r0, #1
 8010346:	bd70      	pop	{r4, r5, r6, pc}
 8010348:	7d21      	ldrb	r1, [r4, #20]
 801034a:	462b      	mov	r3, r5
 801034c:	4632      	mov	r2, r6
 801034e:	4620      	mov	r0, r4
 8010350:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010354:	f7ff be18 	b.w	800ff88 <ucdr_serialize_endian_array_char>

08010358 <ucdr_deserialize_sequence_char>:
 8010358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801035c:	461d      	mov	r5, r3
 801035e:	4616      	mov	r6, r2
 8010360:	460f      	mov	r7, r1
 8010362:	461a      	mov	r2, r3
 8010364:	7d01      	ldrb	r1, [r0, #20]
 8010366:	4604      	mov	r4, r0
 8010368:	f7fb fc84 	bl	800bc74 <ucdr_deserialize_endian_uint32_t>
 801036c:	682b      	ldr	r3, [r5, #0]
 801036e:	429e      	cmp	r6, r3
 8010370:	bf3c      	itt	cc
 8010372:	2201      	movcc	r2, #1
 8010374:	75a2      	strbcc	r2, [r4, #22]
 8010376:	b913      	cbnz	r3, 801037e <ucdr_deserialize_sequence_char+0x26>
 8010378:	2001      	movs	r0, #1
 801037a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801037e:	7d21      	ldrb	r1, [r4, #20]
 8010380:	463a      	mov	r2, r7
 8010382:	4620      	mov	r0, r4
 8010384:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010388:	f7ff be30 	b.w	800ffec <ucdr_deserialize_endian_array_char>

0801038c <ucdr_serialize_sequence_uint8_t>:
 801038c:	b570      	push	{r4, r5, r6, lr}
 801038e:	4615      	mov	r5, r2
 8010390:	460e      	mov	r6, r1
 8010392:	7d01      	ldrb	r1, [r0, #20]
 8010394:	4604      	mov	r4, r0
 8010396:	f7fb fb45 	bl	800ba24 <ucdr_serialize_endian_uint32_t>
 801039a:	b90d      	cbnz	r5, 80103a0 <ucdr_serialize_sequence_uint8_t+0x14>
 801039c:	2001      	movs	r0, #1
 801039e:	bd70      	pop	{r4, r5, r6, pc}
 80103a0:	7d21      	ldrb	r1, [r4, #20]
 80103a2:	462b      	mov	r3, r5
 80103a4:	4632      	mov	r2, r6
 80103a6:	4620      	mov	r0, r4
 80103a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80103ac:	f7ff be82 	b.w	80100b4 <ucdr_serialize_endian_array_uint8_t>

080103b0 <ucdr_deserialize_sequence_uint8_t>:
 80103b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103b4:	461d      	mov	r5, r3
 80103b6:	4616      	mov	r6, r2
 80103b8:	460f      	mov	r7, r1
 80103ba:	461a      	mov	r2, r3
 80103bc:	7d01      	ldrb	r1, [r0, #20]
 80103be:	4604      	mov	r4, r0
 80103c0:	f7fb fc58 	bl	800bc74 <ucdr_deserialize_endian_uint32_t>
 80103c4:	682b      	ldr	r3, [r5, #0]
 80103c6:	429e      	cmp	r6, r3
 80103c8:	bf3c      	itt	cc
 80103ca:	2201      	movcc	r2, #1
 80103cc:	75a2      	strbcc	r2, [r4, #22]
 80103ce:	b913      	cbnz	r3, 80103d6 <ucdr_deserialize_sequence_uint8_t+0x26>
 80103d0:	2001      	movs	r0, #1
 80103d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103d6:	7d21      	ldrb	r1, [r4, #20]
 80103d8:	463a      	mov	r2, r7
 80103da:	4620      	mov	r0, r4
 80103dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80103e0:	f7ff becc 	b.w	801017c <ucdr_deserialize_endian_array_uint8_t>

080103e4 <uxr_buffer_delete_entity>:
 80103e4:	b510      	push	{r4, lr}
 80103e6:	2300      	movs	r3, #0
 80103e8:	b08e      	sub	sp, #56	@ 0x38
 80103ea:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80103ee:	2303      	movs	r3, #3
 80103f0:	9300      	str	r3, [sp, #0]
 80103f2:	2204      	movs	r2, #4
 80103f4:	ab06      	add	r3, sp, #24
 80103f6:	4604      	mov	r4, r0
 80103f8:	9103      	str	r1, [sp, #12]
 80103fa:	f001 fb3f 	bl	8011a7c <uxr_prepare_stream_to_write_submessage>
 80103fe:	b918      	cbnz	r0, 8010408 <uxr_buffer_delete_entity+0x24>
 8010400:	4604      	mov	r4, r0
 8010402:	4620      	mov	r0, r4
 8010404:	b00e      	add	sp, #56	@ 0x38
 8010406:	bd10      	pop	{r4, pc}
 8010408:	9902      	ldr	r1, [sp, #8]
 801040a:	aa05      	add	r2, sp, #20
 801040c:	4620      	mov	r0, r4
 801040e:	f001 fc6b 	bl	8011ce8 <uxr_init_base_object_request>
 8010412:	a905      	add	r1, sp, #20
 8010414:	4604      	mov	r4, r0
 8010416:	a806      	add	r0, sp, #24
 8010418:	f003 fa96 	bl	8013948 <uxr_serialize_DELETE_Payload>
 801041c:	4620      	mov	r0, r4
 801041e:	b00e      	add	sp, #56	@ 0x38
 8010420:	bd10      	pop	{r4, pc}
 8010422:	bf00      	nop

08010424 <uxr_common_create_entity>:
 8010424:	b510      	push	{r4, lr}
 8010426:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801042a:	b08c      	sub	sp, #48	@ 0x30
 801042c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8010430:	f1bc 0f01 	cmp.w	ip, #1
 8010434:	bf0c      	ite	eq
 8010436:	f003 0201 	andeq.w	r2, r3, #1
 801043a:	2200      	movne	r2, #0
 801043c:	330e      	adds	r3, #14
 801043e:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 8010442:	9101      	str	r1, [sp, #4]
 8010444:	441a      	add	r2, r3
 8010446:	2301      	movs	r3, #1
 8010448:	9300      	str	r3, [sp, #0]
 801044a:	9903      	ldr	r1, [sp, #12]
 801044c:	ab04      	add	r3, sp, #16
 801044e:	b292      	uxth	r2, r2
 8010450:	4604      	mov	r4, r0
 8010452:	f001 fb13 	bl	8011a7c <uxr_prepare_stream_to_write_submessage>
 8010456:	b918      	cbnz	r0, 8010460 <uxr_common_create_entity+0x3c>
 8010458:	4604      	mov	r4, r0
 801045a:	4620      	mov	r0, r4
 801045c:	b00c      	add	sp, #48	@ 0x30
 801045e:	bd10      	pop	{r4, pc}
 8010460:	9902      	ldr	r1, [sp, #8]
 8010462:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010464:	4620      	mov	r0, r4
 8010466:	f001 fc3f 	bl	8011ce8 <uxr_init_base_object_request>
 801046a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801046c:	4604      	mov	r4, r0
 801046e:	a804      	add	r0, sp, #16
 8010470:	f003 f9c6 	bl	8013800 <uxr_serialize_CREATE_Payload>
 8010474:	4620      	mov	r0, r4
 8010476:	b00c      	add	sp, #48	@ 0x30
 8010478:	bd10      	pop	{r4, pc}
 801047a:	bf00      	nop

0801047c <uxr_buffer_create_participant_bin>:
 801047c:	b570      	push	{r4, r5, r6, lr}
 801047e:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 8010482:	ac11      	add	r4, sp, #68	@ 0x44
 8010484:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 8010488:	2303      	movs	r3, #3
 801048a:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801048e:	7223      	strb	r3, [r4, #8]
 8010490:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 8010492:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 8010496:	2201      	movs	r2, #1
 8010498:	2100      	movs	r1, #0
 801049a:	4605      	mov	r5, r0
 801049c:	7122      	strb	r2, [r4, #4]
 801049e:	f88d 1014 	strb.w	r1, [sp, #20]
 80104a2:	b1cb      	cbz	r3, 80104d8 <uxr_buffer_create_participant_bin+0x5c>
 80104a4:	f88d 201c 	strb.w	r2, [sp, #28]
 80104a8:	9308      	str	r3, [sp, #32]
 80104aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80104ae:	a915      	add	r1, sp, #84	@ 0x54
 80104b0:	a809      	add	r0, sp, #36	@ 0x24
 80104b2:	f7fc faeb 	bl	800ca8c <ucdr_init_buffer>
 80104b6:	a905      	add	r1, sp, #20
 80104b8:	a809      	add	r0, sp, #36	@ 0x24
 80104ba:	f002 fe3b 	bl	8013134 <uxr_serialize_OBJK_DomainParticipant_Binary>
 80104be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80104c0:	9600      	str	r6, [sp, #0]
 80104c2:	9401      	str	r4, [sp, #4]
 80104c4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80104c8:	60e3      	str	r3, [r4, #12]
 80104ca:	4628      	mov	r0, r5
 80104cc:	b29b      	uxth	r3, r3
 80104ce:	f7ff ffa9 	bl	8010424 <uxr_common_create_entity>
 80104d2:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 80104d6:	bd70      	pop	{r4, r5, r6, pc}
 80104d8:	f88d 301c 	strb.w	r3, [sp, #28]
 80104dc:	e7e5      	b.n	80104aa <uxr_buffer_create_participant_bin+0x2e>
 80104de:	bf00      	nop

080104e0 <uxr_buffer_create_topic_bin>:
 80104e0:	b570      	push	{r4, r5, r6, lr}
 80104e2:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 80104e6:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80104ea:	9105      	str	r1, [sp, #20]
 80104ec:	4605      	mov	r5, r0
 80104ee:	a997      	add	r1, sp, #604	@ 0x25c
 80104f0:	4618      	mov	r0, r3
 80104f2:	2302      	movs	r3, #2
 80104f4:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 80104f8:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 80104fc:	f000 f9ea 	bl	80108d4 <uxr_object_id_to_raw>
 8010500:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 8010502:	9306      	str	r3, [sp, #24]
 8010504:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 8010506:	930a      	str	r3, [sp, #40]	@ 0x28
 8010508:	2303      	movs	r3, #3
 801050a:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801050e:	2301      	movs	r3, #1
 8010510:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010514:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8010518:	a917      	add	r1, sp, #92	@ 0x5c
 801051a:	2300      	movs	r3, #0
 801051c:	a80b      	add	r0, sp, #44	@ 0x2c
 801051e:	f88d 301c 	strb.w	r3, [sp, #28]
 8010522:	f7fc fab3 	bl	800ca8c <ucdr_init_buffer>
 8010526:	a906      	add	r1, sp, #24
 8010528:	a80b      	add	r0, sp, #44	@ 0x2c
 801052a:	f002 fe25 	bl	8013178 <uxr_serialize_OBJK_Topic_Binary>
 801052e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010530:	9316      	str	r3, [sp, #88]	@ 0x58
 8010532:	ac13      	add	r4, sp, #76	@ 0x4c
 8010534:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010538:	9600      	str	r6, [sp, #0]
 801053a:	9401      	str	r4, [sp, #4]
 801053c:	b29b      	uxth	r3, r3
 801053e:	4628      	mov	r0, r5
 8010540:	f7ff ff70 	bl	8010424 <uxr_common_create_entity>
 8010544:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 8010548:	bd70      	pop	{r4, r5, r6, pc}
 801054a:	bf00      	nop

0801054c <uxr_buffer_create_publisher_bin>:
 801054c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801054e:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 8010552:	4605      	mov	r5, r0
 8010554:	9105      	str	r1, [sp, #20]
 8010556:	4618      	mov	r0, r3
 8010558:	2603      	movs	r6, #3
 801055a:	a992      	add	r1, sp, #584	@ 0x248
 801055c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010560:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 8010564:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 8010568:	f000 f9b4 	bl	80108d4 <uxr_object_id_to_raw>
 801056c:	2300      	movs	r3, #0
 801056e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010572:	a912      	add	r1, sp, #72	@ 0x48
 8010574:	a806      	add	r0, sp, #24
 8010576:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 801057a:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 801057e:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 8010582:	f7fc fa83 	bl	800ca8c <ucdr_init_buffer>
 8010586:	a993      	add	r1, sp, #588	@ 0x24c
 8010588:	a806      	add	r0, sp, #24
 801058a:	f002 fea9 	bl	80132e0 <uxr_serialize_OBJK_Publisher_Binary>
 801058e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010590:	9311      	str	r3, [sp, #68]	@ 0x44
 8010592:	ac0e      	add	r4, sp, #56	@ 0x38
 8010594:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010598:	9700      	str	r7, [sp, #0]
 801059a:	9401      	str	r4, [sp, #4]
 801059c:	b29b      	uxth	r3, r3
 801059e:	4628      	mov	r0, r5
 80105a0:	f7ff ff40 	bl	8010424 <uxr_common_create_entity>
 80105a4:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 80105a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80105aa:	bf00      	nop

080105ac <uxr_buffer_create_datawriter_bin>:
 80105ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105b0:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80105b4:	ac1d      	add	r4, sp, #116	@ 0x74
 80105b6:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80105ba:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 80105be:	9105      	str	r1, [sp, #20]
 80105c0:	4606      	mov	r6, r0
 80105c2:	a9a1      	add	r1, sp, #644	@ 0x284
 80105c4:	4618      	mov	r0, r3
 80105c6:	2305      	movs	r3, #5
 80105c8:	7123      	strb	r3, [r4, #4]
 80105ca:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 80105ce:	2703      	movs	r7, #3
 80105d0:	f000 f980 	bl	80108d4 <uxr_object_id_to_raw>
 80105d4:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 80105d6:	7227      	strb	r7, [r4, #8]
 80105d8:	a90e      	add	r1, sp, #56	@ 0x38
 80105da:	f000 f97b 	bl	80108d4 <uxr_object_id_to_raw>
 80105de:	2300      	movs	r3, #0
 80105e0:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 80105e4:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 80105e8:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 80105ec:	3d00      	subs	r5, #0
 80105ee:	bf18      	it	ne
 80105f0:	2501      	movne	r5, #1
 80105f2:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 80105f6:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 80105fa:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 80105fe:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010602:	2301      	movs	r3, #1
 8010604:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8010608:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 801060c:	bb8a      	cbnz	r2, 8010672 <uxr_buffer_create_datawriter_bin+0xc6>
 801060e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010612:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8010616:	f04f 0c13 	mov.w	ip, #19
 801061a:	250b      	movs	r5, #11
 801061c:	2221      	movs	r2, #33	@ 0x21
 801061e:	2111      	movs	r1, #17
 8010620:	2009      	movs	r0, #9
 8010622:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 8010626:	b923      	cbnz	r3, 8010632 <uxr_buffer_create_datawriter_bin+0x86>
 8010628:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 801062c:	4672      	mov	r2, lr
 801062e:	4661      	mov	r1, ip
 8010630:	4628      	mov	r0, r5
 8010632:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 8010636:	2b01      	cmp	r3, #1
 8010638:	d025      	beq.n	8010686 <uxr_buffer_create_datawriter_bin+0xda>
 801063a:	2b03      	cmp	r3, #3
 801063c:	d029      	beq.n	8010692 <uxr_buffer_create_datawriter_bin+0xe6>
 801063e:	b32b      	cbz	r3, 801068c <uxr_buffer_create_datawriter_bin+0xe0>
 8010640:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010644:	a921      	add	r1, sp, #132	@ 0x84
 8010646:	a806      	add	r0, sp, #24
 8010648:	f7fc fa20 	bl	800ca8c <ucdr_init_buffer>
 801064c:	a90e      	add	r1, sp, #56	@ 0x38
 801064e:	a806      	add	r0, sp, #24
 8010650:	f002 febc 	bl	80133cc <uxr_serialize_OBJK_DataWriter_Binary>
 8010654:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010656:	f8cd 8000 	str.w	r8, [sp]
 801065a:	9401      	str	r4, [sp, #4]
 801065c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010660:	60e3      	str	r3, [r4, #12]
 8010662:	4630      	mov	r0, r6
 8010664:	b29b      	uxth	r3, r3
 8010666:	f7ff fedd 	bl	8010424 <uxr_common_create_entity>
 801066a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 801066e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010672:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 8010676:	f04f 0c12 	mov.w	ip, #18
 801067a:	250a      	movs	r5, #10
 801067c:	2220      	movs	r2, #32
 801067e:	2110      	movs	r1, #16
 8010680:	2008      	movs	r0, #8
 8010682:	2702      	movs	r7, #2
 8010684:	e7cd      	b.n	8010622 <uxr_buffer_create_datawriter_bin+0x76>
 8010686:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 801068a:	e7d9      	b.n	8010640 <uxr_buffer_create_datawriter_bin+0x94>
 801068c:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8010690:	e7d6      	b.n	8010640 <uxr_buffer_create_datawriter_bin+0x94>
 8010692:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8010696:	e7d3      	b.n	8010640 <uxr_buffer_create_datawriter_bin+0x94>

08010698 <uxr_buffer_create_replier_bin>:
 8010698:	b570      	push	{r4, r5, r6, lr}
 801069a:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 801069e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80106a2:	9105      	str	r1, [sp, #20]
 80106a4:	4605      	mov	r5, r0
 80106a6:	a999      	add	r1, sp, #612	@ 0x264
 80106a8:	4618      	mov	r0, r3
 80106aa:	2308      	movs	r3, #8
 80106ac:	f89d 6294 	ldrb.w	r6, [sp, #660]	@ 0x294
 80106b0:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
 80106b4:	f000 f90e 	bl	80108d4 <uxr_object_id_to_raw>
 80106b8:	9b9e      	ldr	r3, [sp, #632]	@ 0x278
 80106ba:	9306      	str	r3, [sp, #24]
 80106bc:	9b9f      	ldr	r3, [sp, #636]	@ 0x27c
 80106be:	9307      	str	r3, [sp, #28]
 80106c0:	9ba0      	ldr	r3, [sp, #640]	@ 0x280
 80106c2:	9308      	str	r3, [sp, #32]
 80106c4:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 80106c6:	930c      	str	r3, [sp, #48]	@ 0x30
 80106c8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80106ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80106cc:	2301      	movs	r3, #1
 80106ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80106d2:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 80106d6:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 80106da:	a919      	add	r1, sp, #100	@ 0x64
 80106dc:	2303      	movs	r3, #3
 80106de:	a80d      	add	r0, sp, #52	@ 0x34
 80106e0:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
 80106e4:	f7fc f9d2 	bl	800ca8c <ucdr_init_buffer>
 80106e8:	a906      	add	r1, sp, #24
 80106ea:	a80d      	add	r0, sp, #52	@ 0x34
 80106ec:	f002 fe9a 	bl	8013424 <uxr_serialize_OBJK_Replier_Binary>
 80106f0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80106f2:	9318      	str	r3, [sp, #96]	@ 0x60
 80106f4:	ac15      	add	r4, sp, #84	@ 0x54
 80106f6:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80106fa:	9600      	str	r6, [sp, #0]
 80106fc:	9401      	str	r4, [sp, #4]
 80106fe:	b29b      	uxth	r3, r3
 8010700:	4628      	mov	r0, r5
 8010702:	f7ff fe8f 	bl	8010424 <uxr_common_create_entity>
 8010706:	f50d 7d1a 	add.w	sp, sp, #616	@ 0x268
 801070a:	bd70      	pop	{r4, r5, r6, pc}

0801070c <get_custom_error>:
 801070c:	4b01      	ldr	r3, [pc, #4]	@ (8010714 <get_custom_error+0x8>)
 801070e:	7818      	ldrb	r0, [r3, #0]
 8010710:	4770      	bx	lr
 8010712:	bf00      	nop
 8010714:	2000ba94 	.word	0x2000ba94

08010718 <recv_custom_msg>:
 8010718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801071c:	4693      	mov	fp, r2
 801071e:	b089      	sub	sp, #36	@ 0x24
 8010720:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8010724:	9305      	str	r3, [sp, #20]
 8010726:	468a      	mov	sl, r1
 8010728:	2100      	movs	r1, #0
 801072a:	4604      	mov	r4, r0
 801072c:	f88d 101e 	strb.w	r1, [sp, #30]
 8010730:	b322      	cbz	r2, 801077c <recv_custom_msg+0x64>
 8010732:	f200 2902 	addw	r9, r0, #514	@ 0x202
 8010736:	f10d 081f 	add.w	r8, sp, #31
 801073a:	af05      	add	r7, sp, #20
 801073c:	f10d 061e 	add.w	r6, sp, #30
 8010740:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8010744:	e002      	b.n	801074c <recv_custom_msg+0x34>
 8010746:	9b05      	ldr	r3, [sp, #20]
 8010748:	2b00      	cmp	r3, #0
 801074a:	dd0f      	ble.n	801076c <recv_custom_msg+0x54>
 801074c:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8010750:	4623      	mov	r3, r4
 8010752:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8010756:	e9cd 5600 	strd	r5, r6, [sp]
 801075a:	4622      	mov	r2, r4
 801075c:	4648      	mov	r0, r9
 801075e:	f001 fcf1 	bl	8012144 <uxr_read_framed_msg>
 8010762:	2800      	cmp	r0, #0
 8010764:	d0ef      	beq.n	8010746 <recv_custom_msg+0x2e>
 8010766:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801076a:	b1b3      	cbz	r3, 801079a <recv_custom_msg+0x82>
 801076c:	4b0f      	ldr	r3, [pc, #60]	@ (80107ac <recv_custom_msg+0x94>)
 801076e:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8010772:	701a      	strb	r2, [r3, #0]
 8010774:	2000      	movs	r0, #0
 8010776:	b009      	add	sp, #36	@ 0x24
 8010778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801077c:	f10d 021f 	add.w	r2, sp, #31
 8010780:	9200      	str	r2, [sp, #0]
 8010782:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8010786:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801078a:	4601      	mov	r1, r0
 801078c:	47a8      	blx	r5
 801078e:	2800      	cmp	r0, #0
 8010790:	d0ec      	beq.n	801076c <recv_custom_msg+0x54>
 8010792:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8010796:	2b00      	cmp	r3, #0
 8010798:	d1e8      	bne.n	801076c <recv_custom_msg+0x54>
 801079a:	f8cb 0000 	str.w	r0, [fp]
 801079e:	2001      	movs	r0, #1
 80107a0:	f8ca 4000 	str.w	r4, [sl]
 80107a4:	b009      	add	sp, #36	@ 0x24
 80107a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107aa:	bf00      	nop
 80107ac:	2000ba94 	.word	0x2000ba94

080107b0 <send_custom_msg>:
 80107b0:	b530      	push	{r4, r5, lr}
 80107b2:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 80107b6:	b087      	sub	sp, #28
 80107b8:	4615      	mov	r5, r2
 80107ba:	b974      	cbnz	r4, 80107da <send_custom_msg+0x2a>
 80107bc:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 80107c0:	f10d 0317 	add.w	r3, sp, #23
 80107c4:	47a0      	blx	r4
 80107c6:	b108      	cbz	r0, 80107cc <send_custom_msg+0x1c>
 80107c8:	42a8      	cmp	r0, r5
 80107ca:	d015      	beq.n	80107f8 <send_custom_msg+0x48>
 80107cc:	4b0c      	ldr	r3, [pc, #48]	@ (8010800 <send_custom_msg+0x50>)
 80107ce:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80107d2:	701a      	strb	r2, [r3, #0]
 80107d4:	2000      	movs	r0, #0
 80107d6:	b007      	add	sp, #28
 80107d8:	bd30      	pop	{r4, r5, pc}
 80107da:	460b      	mov	r3, r1
 80107dc:	2200      	movs	r2, #0
 80107de:	f10d 0117 	add.w	r1, sp, #23
 80107e2:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80107e6:	4602      	mov	r2, r0
 80107e8:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 80107ec:	9500      	str	r5, [sp, #0]
 80107ee:	f200 2002 	addw	r0, r0, #514	@ 0x202
 80107f2:	f001 faaf 	bl	8011d54 <uxr_write_framed_msg>
 80107f6:	e7e6      	b.n	80107c6 <send_custom_msg+0x16>
 80107f8:	2001      	movs	r0, #1
 80107fa:	b007      	add	sp, #28
 80107fc:	bd30      	pop	{r4, r5, pc}
 80107fe:	bf00      	nop
 8010800:	2000ba94 	.word	0x2000ba94

08010804 <uxr_set_custom_transport_callbacks>:
 8010804:	b410      	push	{r4}
 8010806:	9c01      	ldr	r4, [sp, #4]
 8010808:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 801080c:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8010810:	9b02      	ldr	r3, [sp, #8]
 8010812:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8010816:	f85d 4b04 	ldr.w	r4, [sp], #4
 801081a:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 801081e:	4770      	bx	lr

08010820 <uxr_init_custom_transport>:
 8010820:	b538      	push	{r3, r4, r5, lr}
 8010822:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 8010826:	b303      	cbz	r3, 801086a <uxr_init_custom_transport+0x4a>
 8010828:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 801082c:	4604      	mov	r4, r0
 801082e:	b1e2      	cbz	r2, 801086a <uxr_init_custom_transport+0x4a>
 8010830:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8010834:	b1ca      	cbz	r2, 801086a <uxr_init_custom_transport+0x4a>
 8010836:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 801083a:	b1b2      	cbz	r2, 801086a <uxr_init_custom_transport+0x4a>
 801083c:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8010840:	4798      	blx	r3
 8010842:	4605      	mov	r5, r0
 8010844:	b188      	cbz	r0, 801086a <uxr_init_custom_transport+0x4a>
 8010846:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 801084a:	b98b      	cbnz	r3, 8010870 <uxr_init_custom_transport+0x50>
 801084c:	490b      	ldr	r1, [pc, #44]	@ (801087c <uxr_init_custom_transport+0x5c>)
 801084e:	4b0c      	ldr	r3, [pc, #48]	@ (8010880 <uxr_init_custom_transport+0x60>)
 8010850:	4a0c      	ldr	r2, [pc, #48]	@ (8010884 <uxr_init_custom_transport+0x64>)
 8010852:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 8010856:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801085a:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 801085e:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8010862:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8010866:	4628      	mov	r0, r5
 8010868:	bd38      	pop	{r3, r4, r5, pc}
 801086a:	2500      	movs	r5, #0
 801086c:	4628      	mov	r0, r5
 801086e:	bd38      	pop	{r3, r4, r5, pc}
 8010870:	2100      	movs	r1, #0
 8010872:	f204 2002 	addw	r0, r4, #514	@ 0x202
 8010876:	f001 fa67 	bl	8011d48 <uxr_init_framing_io>
 801087a:	e7e7      	b.n	801084c <uxr_init_custom_transport+0x2c>
 801087c:	080107b1 	.word	0x080107b1
 8010880:	08010719 	.word	0x08010719
 8010884:	0801070d 	.word	0x0801070d

08010888 <uxr_close_custom_transport>:
 8010888:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 801088c:	4718      	bx	r3
 801088e:	bf00      	nop

08010890 <uxr_object_id>:
 8010890:	b082      	sub	sp, #8
 8010892:	2300      	movs	r3, #0
 8010894:	f88d 1006 	strb.w	r1, [sp, #6]
 8010898:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801089c:	f360 030f 	bfi	r3, r0, #0, #16
 80108a0:	f362 431f 	bfi	r3, r2, #16, #16
 80108a4:	4618      	mov	r0, r3
 80108a6:	b002      	add	sp, #8
 80108a8:	4770      	bx	lr
 80108aa:	bf00      	nop

080108ac <uxr_object_id_from_raw>:
 80108ac:	7843      	ldrb	r3, [r0, #1]
 80108ae:	7801      	ldrb	r1, [r0, #0]
 80108b0:	b082      	sub	sp, #8
 80108b2:	f003 020f 	and.w	r2, r3, #15
 80108b6:	f88d 2006 	strb.w	r2, [sp, #6]
 80108ba:	091b      	lsrs	r3, r3, #4
 80108bc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80108c0:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80108c4:	2000      	movs	r0, #0
 80108c6:	f363 000f 	bfi	r0, r3, #0, #16
 80108ca:	f362 401f 	bfi	r0, r2, #16, #16
 80108ce:	b002      	add	sp, #8
 80108d0:	4770      	bx	lr
 80108d2:	bf00      	nop

080108d4 <uxr_object_id_to_raw>:
 80108d4:	4602      	mov	r2, r0
 80108d6:	f3c0 4303 	ubfx	r3, r0, #16, #4
 80108da:	b082      	sub	sp, #8
 80108dc:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 80108e0:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 80108e4:	f881 c000 	strb.w	ip, [r1]
 80108e8:	7048      	strb	r0, [r1, #1]
 80108ea:	b002      	add	sp, #8
 80108ec:	4770      	bx	lr
 80108ee:	bf00      	nop

080108f0 <uxr_buffer_request_data>:
 80108f0:	b530      	push	{r4, r5, lr}
 80108f2:	b095      	sub	sp, #84	@ 0x54
 80108f4:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80108f8:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 80108fa:	9303      	str	r3, [sp, #12]
 80108fc:	2200      	movs	r2, #0
 80108fe:	2d00      	cmp	r5, #0
 8010900:	bf14      	ite	ne
 8010902:	2101      	movne	r1, #1
 8010904:	4611      	moveq	r1, r2
 8010906:	4604      	mov	r4, r0
 8010908:	f88d 301c 	strb.w	r3, [sp, #28]
 801090c:	f88d 201d 	strb.w	r2, [sp, #29]
 8010910:	f88d 201e 	strb.w	r2, [sp, #30]
 8010914:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8010918:	d021      	beq.n	801095e <uxr_buffer_request_data+0x6e>
 801091a:	682a      	ldr	r2, [r5, #0]
 801091c:	686b      	ldr	r3, [r5, #4]
 801091e:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 8010922:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8010926:	2210      	movs	r2, #16
 8010928:	2308      	movs	r3, #8
 801092a:	2100      	movs	r1, #0
 801092c:	e9cd 3100 	strd	r3, r1, [sp]
 8010930:	4620      	mov	r0, r4
 8010932:	9905      	ldr	r1, [sp, #20]
 8010934:	ab0c      	add	r3, sp, #48	@ 0x30
 8010936:	f001 f8a1 	bl	8011a7c <uxr_prepare_stream_to_write_submessage>
 801093a:	b918      	cbnz	r0, 8010944 <uxr_buffer_request_data+0x54>
 801093c:	4604      	mov	r4, r0
 801093e:	4620      	mov	r0, r4
 8010940:	b015      	add	sp, #84	@ 0x54
 8010942:	bd30      	pop	{r4, r5, pc}
 8010944:	9904      	ldr	r1, [sp, #16]
 8010946:	aa06      	add	r2, sp, #24
 8010948:	4620      	mov	r0, r4
 801094a:	f001 f9cd 	bl	8011ce8 <uxr_init_base_object_request>
 801094e:	a906      	add	r1, sp, #24
 8010950:	4604      	mov	r4, r0
 8010952:	a80c      	add	r0, sp, #48	@ 0x30
 8010954:	f003 f8a2 	bl	8013a9c <uxr_serialize_READ_DATA_Payload>
 8010958:	4620      	mov	r0, r4
 801095a:	b015      	add	sp, #84	@ 0x54
 801095c:	bd30      	pop	{r4, r5, pc}
 801095e:	2208      	movs	r2, #8
 8010960:	e7e2      	b.n	8010928 <uxr_buffer_request_data+0x38>
 8010962:	bf00      	nop

08010964 <uxr_buffer_cancel_data>:
 8010964:	b510      	push	{r4, lr}
 8010966:	b094      	sub	sp, #80	@ 0x50
 8010968:	2300      	movs	r3, #0
 801096a:	9202      	str	r2, [sp, #8]
 801096c:	9205      	str	r2, [sp, #20]
 801096e:	9301      	str	r3, [sp, #4]
 8010970:	2201      	movs	r2, #1
 8010972:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010976:	f88d 301e 	strb.w	r3, [sp, #30]
 801097a:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 801097e:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8010982:	2308      	movs	r3, #8
 8010984:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8010988:	9300      	str	r3, [sp, #0]
 801098a:	2210      	movs	r2, #16
 801098c:	ab0c      	add	r3, sp, #48	@ 0x30
 801098e:	4604      	mov	r4, r0
 8010990:	9103      	str	r1, [sp, #12]
 8010992:	f001 f873 	bl	8011a7c <uxr_prepare_stream_to_write_submessage>
 8010996:	b918      	cbnz	r0, 80109a0 <uxr_buffer_cancel_data+0x3c>
 8010998:	4604      	mov	r4, r0
 801099a:	4620      	mov	r0, r4
 801099c:	b014      	add	sp, #80	@ 0x50
 801099e:	bd10      	pop	{r4, pc}
 80109a0:	9905      	ldr	r1, [sp, #20]
 80109a2:	aa06      	add	r2, sp, #24
 80109a4:	4620      	mov	r0, r4
 80109a6:	f001 f99f 	bl	8011ce8 <uxr_init_base_object_request>
 80109aa:	a906      	add	r1, sp, #24
 80109ac:	4604      	mov	r4, r0
 80109ae:	a80c      	add	r0, sp, #48	@ 0x30
 80109b0:	f003 f874 	bl	8013a9c <uxr_serialize_READ_DATA_Payload>
 80109b4:	4620      	mov	r0, r4
 80109b6:	b014      	add	sp, #80	@ 0x50
 80109b8:	bd10      	pop	{r4, pc}
 80109ba:	bf00      	nop

080109bc <read_submessage_format>:
 80109bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80109c0:	b095      	sub	sp, #84	@ 0x54
 80109c2:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 80109c6:	b113      	cbz	r3, 80109ce <read_submessage_format+0x12>
 80109c8:	b015      	add	sp, #84	@ 0x54
 80109ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80109ce:	460c      	mov	r4, r1
 80109d0:	4615      	mov	r5, r2
 80109d2:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80109d6:	4607      	mov	r7, r0
 80109d8:	981c      	ldr	r0, [sp, #112]	@ 0x70
 80109da:	9004      	str	r0, [sp, #16]
 80109dc:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80109de:	9005      	str	r0, [sp, #20]
 80109e0:	1a52      	subs	r2, r2, r1
 80109e2:	a80c      	add	r0, sp, #48	@ 0x30
 80109e4:	4699      	mov	r9, r3
 80109e6:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 80109ea:	f7fc f84f 	bl	800ca8c <ucdr_init_buffer>
 80109ee:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80109f2:	a80c      	add	r0, sp, #48	@ 0x30
 80109f4:	f7fc f81e 	bl	800ca34 <ucdr_set_on_full_buffer_callback>
 80109f8:	69e2      	ldr	r2, [r4, #28]
 80109fa:	b19a      	cbz	r2, 8010a24 <read_submessage_format+0x68>
 80109fc:	f1b8 0f07 	cmp.w	r8, #7
 8010a00:	f882 9014 	strb.w	r9, [r2, #20]
 8010a04:	d040      	beq.n	8010a88 <read_submessage_format+0xcc>
 8010a06:	f1b8 0f08 	cmp.w	r8, #8
 8010a0a:	d02e      	beq.n	8010a6a <read_submessage_format+0xae>
 8010a0c:	f1b8 0f06 	cmp.w	r8, #6
 8010a10:	d011      	beq.n	8010a36 <read_submessage_format+0x7a>
 8010a12:	2301      	movs	r3, #1
 8010a14:	7513      	strb	r3, [r2, #20]
 8010a16:	4629      	mov	r1, r5
 8010a18:	4620      	mov	r0, r4
 8010a1a:	f7fc f887 	bl	800cb2c <ucdr_advance_buffer>
 8010a1e:	b015      	add	sp, #84	@ 0x54
 8010a20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010a24:	f1b8 0f07 	cmp.w	r8, #7
 8010a28:	d02e      	beq.n	8010a88 <read_submessage_format+0xcc>
 8010a2a:	f1b8 0f08 	cmp.w	r8, #8
 8010a2e:	d01c      	beq.n	8010a6a <read_submessage_format+0xae>
 8010a30:	f1b8 0f06 	cmp.w	r8, #6
 8010a34:	d1ef      	bne.n	8010a16 <read_submessage_format+0x5a>
 8010a36:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 8010a3a:	f1b8 0f00 	cmp.w	r8, #0
 8010a3e:	d011      	beq.n	8010a64 <read_submessage_format+0xa8>
 8010a40:	ab0c      	add	r3, sp, #48	@ 0x30
 8010a42:	e9cd 3500 	strd	r3, r5, [sp]
 8010a46:	2306      	movs	r3, #6
 8010a48:	f88d 3016 	strb.w	r3, [sp, #22]
 8010a4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010a50:	9302      	str	r3, [sp, #8]
 8010a52:	4632      	mov	r2, r6
 8010a54:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8010a58:	4638      	mov	r0, r7
 8010a5a:	47c0      	blx	r8
 8010a5c:	2301      	movs	r3, #1
 8010a5e:	69e2      	ldr	r2, [r4, #28]
 8010a60:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8010a64:	2a00      	cmp	r2, #0
 8010a66:	d1d4      	bne.n	8010a12 <read_submessage_format+0x56>
 8010a68:	e7d5      	b.n	8010a16 <read_submessage_format+0x5a>
 8010a6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d0f8      	beq.n	8010a64 <read_submessage_format+0xa8>
 8010a72:	a906      	add	r1, sp, #24
 8010a74:	a80c      	add	r0, sp, #48	@ 0x30
 8010a76:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8010a7a:	f003 f8e3 	bl	8013c44 <uxr_deserialize_SampleIdentity>
 8010a7e:	b9a0      	cbnz	r0, 8010aaa <read_submessage_format+0xee>
 8010a80:	69e2      	ldr	r2, [r4, #28]
 8010a82:	2a00      	cmp	r2, #0
 8010a84:	d1c5      	bne.n	8010a12 <read_submessage_format+0x56>
 8010a86:	e7c6      	b.n	8010a16 <read_submessage_format+0x5a>
 8010a88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010a8c:	b13b      	cbz	r3, 8010a9e <read_submessage_format+0xe2>
 8010a8e:	a906      	add	r1, sp, #24
 8010a90:	a80c      	add	r0, sp, #48	@ 0x30
 8010a92:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8010a96:	f002 fd9b 	bl	80135d0 <uxr_deserialize_BaseObjectRequest>
 8010a9a:	bb60      	cbnz	r0, 8010af6 <read_submessage_format+0x13a>
 8010a9c:	69e2      	ldr	r2, [r4, #28]
 8010a9e:	68a3      	ldr	r3, [r4, #8]
 8010aa0:	442b      	add	r3, r5
 8010aa2:	60a3      	str	r3, [r4, #8]
 8010aa4:	2a00      	cmp	r2, #0
 8010aa6:	d1b4      	bne.n	8010a12 <read_submessage_format+0x56>
 8010aa8:	e7b5      	b.n	8010a16 <read_submessage_format+0x5a>
 8010aaa:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8010aae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010ab0:	1a52      	subs	r2, r2, r1
 8010ab2:	eba8 0803 	sub.w	r8, r8, r3
 8010ab6:	a80c      	add	r0, sp, #48	@ 0x30
 8010ab8:	f7fb ffe8 	bl	800ca8c <ucdr_init_buffer>
 8010abc:	44a8      	add	r8, r5
 8010abe:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8010ac2:	a80c      	add	r0, sp, #48	@ 0x30
 8010ac4:	f7fb ffb6 	bl	800ca34 <ucdr_set_on_full_buffer_callback>
 8010ac8:	fa1f f888 	uxth.w	r8, r8
 8010acc:	ab0c      	add	r3, sp, #48	@ 0x30
 8010ace:	9300      	str	r3, [sp, #0]
 8010ad0:	f8cd 8004 	str.w	r8, [sp, #4]
 8010ad4:	2108      	movs	r1, #8
 8010ad6:	f88d 1016 	strb.w	r1, [sp, #22]
 8010ada:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8010ade:	9102      	str	r1, [sp, #8]
 8010ae0:	ab06      	add	r3, sp, #24
 8010ae2:	4632      	mov	r2, r6
 8010ae4:	9905      	ldr	r1, [sp, #20]
 8010ae6:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 8010aea:	4638      	mov	r0, r7
 8010aec:	47b0      	blx	r6
 8010aee:	2301      	movs	r3, #1
 8010af0:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8010af4:	e7c4      	b.n	8010a80 <read_submessage_format+0xc4>
 8010af6:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8010afa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010afc:	1a52      	subs	r2, r2, r1
 8010afe:	a80c      	add	r0, sp, #48	@ 0x30
 8010b00:	eba8 0803 	sub.w	r8, r8, r3
 8010b04:	f7fb ffc2 	bl	800ca8c <ucdr_init_buffer>
 8010b08:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8010b0c:	a80c      	add	r0, sp, #48	@ 0x30
 8010b0e:	f7fb ff91 	bl	800ca34 <ucdr_set_on_full_buffer_callback>
 8010b12:	ab0c      	add	r3, sp, #48	@ 0x30
 8010b14:	9300      	str	r3, [sp, #0]
 8010b16:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8010b1a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8010b1e:	44a8      	add	r8, r5
 8010b20:	fa1f f888 	uxth.w	r8, r8
 8010b24:	f8cd 8004 	str.w	r8, [sp, #4]
 8010b28:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8010b2c:	2107      	movs	r1, #7
 8010b2e:	f88d 1016 	strb.w	r1, [sp, #22]
 8010b32:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8010b36:	9102      	str	r1, [sp, #8]
 8010b38:	4632      	mov	r2, r6
 8010b3a:	b29b      	uxth	r3, r3
 8010b3c:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 8010b40:	9905      	ldr	r1, [sp, #20]
 8010b42:	4638      	mov	r0, r7
 8010b44:	47b0      	blx	r6
 8010b46:	2301      	movs	r3, #1
 8010b48:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8010b4c:	e7a6      	b.n	8010a9c <read_submessage_format+0xe0>
 8010b4e:	bf00      	nop

08010b50 <on_get_fragmentation_info>:
 8010b50:	b500      	push	{lr}
 8010b52:	b08b      	sub	sp, #44	@ 0x2c
 8010b54:	4601      	mov	r1, r0
 8010b56:	2204      	movs	r2, #4
 8010b58:	a802      	add	r0, sp, #8
 8010b5a:	f7fb ff97 	bl	800ca8c <ucdr_init_buffer>
 8010b5e:	f10d 0305 	add.w	r3, sp, #5
 8010b62:	f10d 0206 	add.w	r2, sp, #6
 8010b66:	a901      	add	r1, sp, #4
 8010b68:	a802      	add	r0, sp, #8
 8010b6a:	f001 fed1 	bl	8012910 <uxr_read_submessage_header>
 8010b6e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010b72:	2b0d      	cmp	r3, #13
 8010b74:	d003      	beq.n	8010b7e <on_get_fragmentation_info+0x2e>
 8010b76:	2000      	movs	r0, #0
 8010b78:	b00b      	add	sp, #44	@ 0x2c
 8010b7a:	f85d fb04 	ldr.w	pc, [sp], #4
 8010b7e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010b82:	f013 0f02 	tst.w	r3, #2
 8010b86:	bf14      	ite	ne
 8010b88:	2002      	movne	r0, #2
 8010b8a:	2001      	moveq	r0, #1
 8010b8c:	b00b      	add	sp, #44	@ 0x2c
 8010b8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010b92:	bf00      	nop

08010b94 <read_submessage_get_info>:
 8010b94:	b570      	push	{r4, r5, r6, lr}
 8010b96:	2500      	movs	r5, #0
 8010b98:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8010b9c:	4604      	mov	r4, r0
 8010b9e:	f44f 7224 	mov.w	r2, #656	@ 0x290
 8010ba2:	460e      	mov	r6, r1
 8010ba4:	a810      	add	r0, sp, #64	@ 0x40
 8010ba6:	4629      	mov	r1, r5
 8010ba8:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8010bac:	f009 f84a 	bl	8019c44 <memset>
 8010bb0:	a903      	add	r1, sp, #12
 8010bb2:	4630      	mov	r0, r6
 8010bb4:	f002 feb4 	bl	8013920 <uxr_deserialize_GET_INFO_Payload>
 8010bb8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8010bbc:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010bc0:	4620      	mov	r0, r4
 8010bc2:	f001 f889 	bl	8011cd8 <uxr_session_header_offset>
 8010bc6:	462b      	mov	r3, r5
 8010bc8:	9000      	str	r0, [sp, #0]
 8010bca:	220c      	movs	r2, #12
 8010bcc:	a905      	add	r1, sp, #20
 8010bce:	a808      	add	r0, sp, #32
 8010bd0:	f7fb ff4a 	bl	800ca68 <ucdr_init_buffer_origin_offset>
 8010bd4:	a910      	add	r1, sp, #64	@ 0x40
 8010bd6:	a808      	add	r0, sp, #32
 8010bd8:	f002 ff14 	bl	8013a04 <uxr_serialize_INFO_Payload>
 8010bdc:	9b08      	ldr	r3, [sp, #32]
 8010bde:	462a      	mov	r2, r5
 8010be0:	4629      	mov	r1, r5
 8010be2:	4620      	mov	r0, r4
 8010be4:	f001 f822 	bl	8011c2c <uxr_stamp_session_header>
 8010be8:	a808      	add	r0, sp, #32
 8010bea:	f7fb ff7b 	bl	800cae4 <ucdr_buffer_length>
 8010bee:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010bf0:	4602      	mov	r2, r0
 8010bf2:	a905      	add	r1, sp, #20
 8010bf4:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010bf8:	47a0      	blx	r4
 8010bfa:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 8010bfe:	bd70      	pop	{r4, r5, r6, pc}

08010c00 <write_submessage_acknack.isra.0>:
 8010c00:	b570      	push	{r4, r5, r6, lr}
 8010c02:	b092      	sub	sp, #72	@ 0x48
 8010c04:	4605      	mov	r5, r0
 8010c06:	460e      	mov	r6, r1
 8010c08:	4614      	mov	r4, r2
 8010c0a:	f001 f865 	bl	8011cd8 <uxr_session_header_offset>
 8010c0e:	a905      	add	r1, sp, #20
 8010c10:	9000      	str	r0, [sp, #0]
 8010c12:	2300      	movs	r3, #0
 8010c14:	a80a      	add	r0, sp, #40	@ 0x28
 8010c16:	2211      	movs	r2, #17
 8010c18:	f7fb ff26 	bl	800ca68 <ucdr_init_buffer_origin_offset>
 8010c1c:	2218      	movs	r2, #24
 8010c1e:	fb02 5404 	mla	r4, r2, r4, r5
 8010c22:	2300      	movs	r3, #0
 8010c24:	2205      	movs	r2, #5
 8010c26:	3450      	adds	r4, #80	@ 0x50
 8010c28:	210a      	movs	r1, #10
 8010c2a:	a80a      	add	r0, sp, #40	@ 0x28
 8010c2c:	f001 fe56 	bl	80128dc <uxr_buffer_submessage_header>
 8010c30:	a903      	add	r1, sp, #12
 8010c32:	4620      	mov	r0, r4
 8010c34:	f007 fb48 	bl	80182c8 <uxr_compute_acknack>
 8010c38:	ba40      	rev16	r0, r0
 8010c3a:	f8ad 000e 	strh.w	r0, [sp, #14]
 8010c3e:	a903      	add	r1, sp, #12
 8010c40:	a80a      	add	r0, sp, #40	@ 0x28
 8010c42:	f88d 6010 	strb.w	r6, [sp, #16]
 8010c46:	f002 ff4d 	bl	8013ae4 <uxr_serialize_ACKNACK_Payload>
 8010c4a:	2200      	movs	r2, #0
 8010c4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010c4e:	4611      	mov	r1, r2
 8010c50:	4628      	mov	r0, r5
 8010c52:	f000 ffeb 	bl	8011c2c <uxr_stamp_session_header>
 8010c56:	a80a      	add	r0, sp, #40	@ 0x28
 8010c58:	f7fb ff44 	bl	800cae4 <ucdr_buffer_length>
 8010c5c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8010c5e:	4602      	mov	r2, r0
 8010c60:	a905      	add	r1, sp, #20
 8010c62:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010c66:	47a0      	blx	r4
 8010c68:	b012      	add	sp, #72	@ 0x48
 8010c6a:	bd70      	pop	{r4, r5, r6, pc}
 8010c6c:	0000      	movs	r0, r0
	...

08010c70 <uxr_init_session>:
 8010c70:	b510      	push	{r4, lr}
 8010c72:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8010ca8 <uxr_init_session+0x38>
 8010c76:	2300      	movs	r3, #0
 8010c78:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 8010c7c:	4604      	mov	r4, r0
 8010c7e:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 8010c82:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 8010c86:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 8010c8a:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 8010c8e:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 8010c92:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 8010c96:	2181      	movs	r1, #129	@ 0x81
 8010c98:	f000 ff34 	bl	8011b04 <uxr_init_session_info>
 8010c9c:	f104 0008 	add.w	r0, r4, #8
 8010ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ca4:	f001 bd36 	b.w	8012714 <uxr_init_stream_storage>
	...

08010cb0 <uxr_set_status_callback>:
 8010cb0:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 8010cb4:	4770      	bx	lr
 8010cb6:	bf00      	nop

08010cb8 <uxr_set_topic_callback>:
 8010cb8:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 8010cbc:	4770      	bx	lr
 8010cbe:	bf00      	nop

08010cc0 <uxr_set_request_callback>:
 8010cc0:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 8010cc4:	4770      	bx	lr
 8010cc6:	bf00      	nop

08010cc8 <uxr_set_reply_callback>:
 8010cc8:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 8010ccc:	4770      	bx	lr
 8010cce:	bf00      	nop

08010cd0 <uxr_create_output_best_effort_stream>:
 8010cd0:	b510      	push	{r4, lr}
 8010cd2:	b084      	sub	sp, #16
 8010cd4:	e9cd 2100 	strd	r2, r1, [sp]
 8010cd8:	4604      	mov	r4, r0
 8010cda:	f000 fffd 	bl	8011cd8 <uxr_session_header_offset>
 8010cde:	e9dd 2100 	ldrd	r2, r1, [sp]
 8010ce2:	4603      	mov	r3, r0
 8010ce4:	f104 0008 	add.w	r0, r4, #8
 8010ce8:	b004      	add	sp, #16
 8010cea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010cee:	f001 bd5b 	b.w	80127a8 <uxr_add_output_best_effort_buffer>
 8010cf2:	bf00      	nop

08010cf4 <uxr_create_output_reliable_stream>:
 8010cf4:	b510      	push	{r4, lr}
 8010cf6:	b088      	sub	sp, #32
 8010cf8:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8010cfc:	4604      	mov	r4, r0
 8010cfe:	9303      	str	r3, [sp, #12]
 8010d00:	f000 ffea 	bl	8011cd8 <uxr_session_header_offset>
 8010d04:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8010d08:	9000      	str	r0, [sp, #0]
 8010d0a:	9905      	ldr	r1, [sp, #20]
 8010d0c:	f104 0008 	add.w	r0, r4, #8
 8010d10:	f001 fd5e 	bl	80127d0 <uxr_add_output_reliable_buffer>
 8010d14:	2200      	movs	r2, #0
 8010d16:	b2c3      	uxtb	r3, r0
 8010d18:	f363 0207 	bfi	r2, r3, #0, #8
 8010d1c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010d20:	f363 220f 	bfi	r2, r3, #8, #8
 8010d24:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010d28:	f363 4217 	bfi	r2, r3, #16, #8
 8010d2c:	0e03      	lsrs	r3, r0, #24
 8010d2e:	f363 621f 	bfi	r2, r3, #24, #8
 8010d32:	4610      	mov	r0, r2
 8010d34:	b008      	add	sp, #32
 8010d36:	bd10      	pop	{r4, pc}

08010d38 <uxr_create_input_best_effort_stream>:
 8010d38:	b082      	sub	sp, #8
 8010d3a:	3008      	adds	r0, #8
 8010d3c:	b002      	add	sp, #8
 8010d3e:	f001 bd61 	b.w	8012804 <uxr_add_input_best_effort_buffer>
 8010d42:	bf00      	nop

08010d44 <uxr_create_input_reliable_stream>:
 8010d44:	b510      	push	{r4, lr}
 8010d46:	b084      	sub	sp, #16
 8010d48:	4c0b      	ldr	r4, [pc, #44]	@ (8010d78 <uxr_create_input_reliable_stream+0x34>)
 8010d4a:	9400      	str	r4, [sp, #0]
 8010d4c:	3008      	adds	r0, #8
 8010d4e:	f001 fd6f 	bl	8012830 <uxr_add_input_reliable_buffer>
 8010d52:	2200      	movs	r2, #0
 8010d54:	b2c3      	uxtb	r3, r0
 8010d56:	f363 0207 	bfi	r2, r3, #0, #8
 8010d5a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010d5e:	f363 220f 	bfi	r2, r3, #8, #8
 8010d62:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010d66:	f363 4217 	bfi	r2, r3, #16, #8
 8010d6a:	0e03      	lsrs	r3, r0, #24
 8010d6c:	f363 621f 	bfi	r2, r3, #24, #8
 8010d70:	4610      	mov	r0, r2
 8010d72:	b004      	add	sp, #16
 8010d74:	bd10      	pop	{r4, pc}
 8010d76:	bf00      	nop
 8010d78:	08010b51 	.word	0x08010b51

08010d7c <uxr_epoch_millis>:
 8010d7c:	b510      	push	{r4, lr}
 8010d7e:	4604      	mov	r4, r0
 8010d80:	f001 fe0c 	bl	801299c <uxr_nanos>
 8010d84:	e9d4 3426 	ldrd	r3, r4, [r4, #152]	@ 0x98
 8010d88:	1ac0      	subs	r0, r0, r3
 8010d8a:	4a04      	ldr	r2, [pc, #16]	@ (8010d9c <uxr_epoch_millis+0x20>)
 8010d8c:	f04f 0300 	mov.w	r3, #0
 8010d90:	eb61 0104 	sbc.w	r1, r1, r4
 8010d94:	f7ef ff68 	bl	8000c68 <__aeabi_ldivmod>
 8010d98:	bd10      	pop	{r4, pc}
 8010d9a:	bf00      	nop
 8010d9c:	000f4240 	.word	0x000f4240

08010da0 <uxr_epoch_nanos>:
 8010da0:	b510      	push	{r4, lr}
 8010da2:	4604      	mov	r4, r0
 8010da4:	f001 fdfa 	bl	801299c <uxr_nanos>
 8010da8:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 8010dac:	1ac0      	subs	r0, r0, r3
 8010dae:	eb61 0102 	sbc.w	r1, r1, r2
 8010db2:	bd10      	pop	{r4, pc}

08010db4 <uxr_flash_output_streams>:
 8010db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010db8:	7e03      	ldrb	r3, [r0, #24]
 8010dba:	b084      	sub	sp, #16
 8010dbc:	4604      	mov	r4, r0
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d035      	beq.n	8010e2e <uxr_flash_output_streams+0x7a>
 8010dc2:	f04f 0900 	mov.w	r9, #0
 8010dc6:	4648      	mov	r0, r9
 8010dc8:	f10d 0802 	add.w	r8, sp, #2
 8010dcc:	af03      	add	r7, sp, #12
 8010dce:	ae02      	add	r6, sp, #8
 8010dd0:	e006      	b.n	8010de0 <uxr_flash_output_streams+0x2c>
 8010dd2:	7e23      	ldrb	r3, [r4, #24]
 8010dd4:	f109 0901 	add.w	r9, r9, #1
 8010dd8:	fa5f f089 	uxtb.w	r0, r9
 8010ddc:	4283      	cmp	r3, r0
 8010dde:	d926      	bls.n	8010e2e <uxr_flash_output_streams+0x7a>
 8010de0:	2201      	movs	r2, #1
 8010de2:	4611      	mov	r1, r2
 8010de4:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8010de8:	f001 fc40 	bl	801266c <uxr_stream_id>
 8010dec:	3508      	adds	r5, #8
 8010dee:	4684      	mov	ip, r0
 8010df0:	4643      	mov	r3, r8
 8010df2:	463a      	mov	r2, r7
 8010df4:	4631      	mov	r1, r6
 8010df6:	4628      	mov	r0, r5
 8010df8:	f8cd c004 	str.w	ip, [sp, #4]
 8010dfc:	f007 faea 	bl	80183d4 <uxr_prepare_best_effort_buffer_to_send>
 8010e00:	2800      	cmp	r0, #0
 8010e02:	d0e6      	beq.n	8010dd2 <uxr_flash_output_streams+0x1e>
 8010e04:	9b02      	ldr	r3, [sp, #8]
 8010e06:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010e0a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010e0e:	4620      	mov	r0, r4
 8010e10:	f000 ff0c 	bl	8011c2c <uxr_stamp_session_header>
 8010e14:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010e16:	9a03      	ldr	r2, [sp, #12]
 8010e18:	685d      	ldr	r5, [r3, #4]
 8010e1a:	6818      	ldr	r0, [r3, #0]
 8010e1c:	9902      	ldr	r1, [sp, #8]
 8010e1e:	47a8      	blx	r5
 8010e20:	f109 0901 	add.w	r9, r9, #1
 8010e24:	7e23      	ldrb	r3, [r4, #24]
 8010e26:	fa5f f089 	uxtb.w	r0, r9
 8010e2a:	4283      	cmp	r3, r0
 8010e2c:	d8d8      	bhi.n	8010de0 <uxr_flash_output_streams+0x2c>
 8010e2e:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8010e32:	b38b      	cbz	r3, 8010e98 <uxr_flash_output_streams+0xe4>
 8010e34:	f04f 0900 	mov.w	r9, #0
 8010e38:	f10d 0802 	add.w	r8, sp, #2
 8010e3c:	af03      	add	r7, sp, #12
 8010e3e:	ae02      	add	r6, sp, #8
 8010e40:	4648      	mov	r0, r9
 8010e42:	2201      	movs	r2, #1
 8010e44:	2102      	movs	r1, #2
 8010e46:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8010e4a:	f001 fc0f 	bl	801266c <uxr_stream_id>
 8010e4e:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8010e52:	3520      	adds	r5, #32
 8010e54:	9001      	str	r0, [sp, #4]
 8010e56:	e00d      	b.n	8010e74 <uxr_flash_output_streams+0xc0>
 8010e58:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010e5c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010e60:	9b02      	ldr	r3, [sp, #8]
 8010e62:	f000 fee3 	bl	8011c2c <uxr_stamp_session_header>
 8010e66:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010e68:	9a03      	ldr	r2, [sp, #12]
 8010e6a:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8010e6e:	9902      	ldr	r1, [sp, #8]
 8010e70:	6818      	ldr	r0, [r3, #0]
 8010e72:	47d0      	blx	sl
 8010e74:	4643      	mov	r3, r8
 8010e76:	463a      	mov	r2, r7
 8010e78:	4631      	mov	r1, r6
 8010e7a:	4628      	mov	r0, r5
 8010e7c:	f007 fcc8 	bl	8018810 <uxr_prepare_next_reliable_buffer_to_send>
 8010e80:	4603      	mov	r3, r0
 8010e82:	4620      	mov	r0, r4
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d1e7      	bne.n	8010e58 <uxr_flash_output_streams+0xa4>
 8010e88:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8010e8c:	f109 0901 	add.w	r9, r9, #1
 8010e90:	fa5f f089 	uxtb.w	r0, r9
 8010e94:	4283      	cmp	r3, r0
 8010e96:	d8d4      	bhi.n	8010e42 <uxr_flash_output_streams+0x8e>
 8010e98:	b004      	add	sp, #16
 8010e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e9e:	bf00      	nop

08010ea0 <read_submessage_info>:
 8010ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ea4:	460d      	mov	r5, r1
 8010ea6:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8010eaa:	4669      	mov	r1, sp
 8010eac:	4607      	mov	r7, r0
 8010eae:	4628      	mov	r0, r5
 8010eb0:	f002 fc44 	bl	801373c <uxr_deserialize_BaseObjectReply>
 8010eb4:	a902      	add	r1, sp, #8
 8010eb6:	4604      	mov	r4, r0
 8010eb8:	4628      	mov	r0, r5
 8010eba:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8010ebe:	f7fa faeb 	bl	800b498 <ucdr_deserialize_bool>
 8010ec2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8010ec6:	4004      	ands	r4, r0
 8010ec8:	b2e4      	uxtb	r4, r4
 8010eca:	b95b      	cbnz	r3, 8010ee4 <read_submessage_info+0x44>
 8010ecc:	a987      	add	r1, sp, #540	@ 0x21c
 8010ece:	4628      	mov	r0, r5
 8010ed0:	f7fa fae2 	bl	800b498 <ucdr_deserialize_bool>
 8010ed4:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8010ed8:	4606      	mov	r6, r0
 8010eda:	b94b      	cbnz	r3, 8010ef0 <read_submessage_info+0x50>
 8010edc:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8010ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ee4:	a903      	add	r1, sp, #12
 8010ee6:	4628      	mov	r0, r5
 8010ee8:	f002 fad0 	bl	801348c <uxr_deserialize_ObjectVariant>
 8010eec:	4004      	ands	r4, r0
 8010eee:	e7ed      	b.n	8010ecc <read_submessage_info+0x2c>
 8010ef0:	a988      	add	r1, sp, #544	@ 0x220
 8010ef2:	4628      	mov	r0, r5
 8010ef4:	f7fa fafe 	bl	800b4f4 <ucdr_deserialize_uint8_t>
 8010ef8:	4234      	tst	r4, r6
 8010efa:	d0ef      	beq.n	8010edc <read_submessage_info+0x3c>
 8010efc:	2800      	cmp	r0, #0
 8010efe:	d0ed      	beq.n	8010edc <read_submessage_info+0x3c>
 8010f00:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8010f04:	2b0d      	cmp	r3, #13
 8010f06:	d1e9      	bne.n	8010edc <read_submessage_info+0x3c>
 8010f08:	a98a      	add	r1, sp, #552	@ 0x228
 8010f0a:	4628      	mov	r0, r5
 8010f0c:	f7fb f898 	bl	800c040 <ucdr_deserialize_int16_t>
 8010f10:	b140      	cbz	r0, 8010f24 <read_submessage_info+0x84>
 8010f12:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	dd07      	ble.n	8010f2a <read_submessage_info+0x8a>
 8010f1a:	f1b8 0f00 	cmp.w	r8, #0
 8010f1e:	bf14      	ite	ne
 8010f20:	2001      	movne	r0, #1
 8010f22:	2002      	moveq	r0, #2
 8010f24:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 8010f28:	e7d8      	b.n	8010edc <read_submessage_info+0x3c>
 8010f2a:	2000      	movs	r0, #0
 8010f2c:	e7fa      	b.n	8010f24 <read_submessage_info+0x84>
 8010f2e:	bf00      	nop

08010f30 <read_submessage_list>:
 8010f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f34:	b097      	sub	sp, #92	@ 0x5c
 8010f36:	4ec1      	ldr	r6, [pc, #772]	@ (801123c <read_submessage_list+0x30c>)
 8010f38:	9209      	str	r2, [sp, #36]	@ 0x24
 8010f3a:	4604      	mov	r4, r0
 8010f3c:	460d      	mov	r5, r1
 8010f3e:	f04f 0801 	mov.w	r8, #1
 8010f42:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8010f46:	aa0c      	add	r2, sp, #48	@ 0x30
 8010f48:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8010f4c:	4628      	mov	r0, r5
 8010f4e:	f001 fcdf 	bl	8012910 <uxr_read_submessage_header>
 8010f52:	2800      	cmp	r0, #0
 8010f54:	f000 813e 	beq.w	80111d4 <read_submessage_list+0x2a4>
 8010f58:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8010f5c:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8010f60:	3b02      	subs	r3, #2
 8010f62:	2b0d      	cmp	r3, #13
 8010f64:	d8ed      	bhi.n	8010f42 <read_submessage_list+0x12>
 8010f66:	a101      	add	r1, pc, #4	@ (adr r1, 8010f6c <read_submessage_list+0x3c>)
 8010f68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010f6c:	080111cb 	.word	0x080111cb
 8010f70:	08010f43 	.word	0x08010f43
 8010f74:	080111bb 	.word	0x080111bb
 8010f78:	08011159 	.word	0x08011159
 8010f7c:	0801114f 	.word	0x0801114f
 8010f80:	08010f43 	.word	0x08010f43
 8010f84:	08010f43 	.word	0x08010f43
 8010f88:	080110af 	.word	0x080110af
 8010f8c:	0801103f 	.word	0x0801103f
 8010f90:	08010fff 	.word	0x08010fff
 8010f94:	08010f43 	.word	0x08010f43
 8010f98:	08010f43 	.word	0x08010f43
 8010f9c:	08010f43 	.word	0x08010f43
 8010fa0:	08010fa5 	.word	0x08010fa5
 8010fa4:	a910      	add	r1, sp, #64	@ 0x40
 8010fa6:	4628      	mov	r0, r5
 8010fa8:	f002 fdfa 	bl	8013ba0 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8010fac:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 8010fb0:	f1b9 0f00 	cmp.w	r9, #0
 8010fb4:	f000 8116 	beq.w	80111e4 <read_submessage_list+0x2b4>
 8010fb8:	f001 fcf0 	bl	801299c <uxr_nanos>
 8010fbc:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8010fbe:	4602      	mov	r2, r0
 8010fc0:	460b      	mov	r3, r1
 8010fc2:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8010fc4:	2100      	movs	r1, #0
 8010fc6:	468c      	mov	ip, r1
 8010fc8:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8010fcc:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 8010fd0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8010fd2:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8010fd4:	468c      	mov	ip, r1
 8010fd6:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8010fda:	46e2      	mov	sl, ip
 8010fdc:	46bc      	mov	ip, r7
 8010fde:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 8010fe2:	fbc0 7106 	smlal	r7, r1, r0, r6
 8010fe6:	e9cd ca02 	strd	ip, sl, [sp, #8]
 8010fea:	e9cd 7100 	strd	r7, r1, [sp]
 8010fee:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8010ff2:	9106      	str	r1, [sp, #24]
 8010ff4:	4620      	mov	r0, r4
 8010ff6:	47c8      	blx	r9
 8010ff8:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 8010ffc:	e7a1      	b.n	8010f42 <read_submessage_list+0x12>
 8010ffe:	a910      	add	r1, sp, #64	@ 0x40
 8011000:	4628      	mov	r0, r5
 8011002:	f002 fdad 	bl	8013b60 <uxr_deserialize_HEARTBEAT_Payload>
 8011006:	2100      	movs	r1, #0
 8011008:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 801100c:	f001 fb58 	bl	80126c0 <uxr_stream_id_from_raw>
 8011010:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8011014:	900f      	str	r0, [sp, #60]	@ 0x3c
 8011016:	4639      	mov	r1, r7
 8011018:	f104 0008 	add.w	r0, r4, #8
 801101c:	f001 fc3e 	bl	801289c <uxr_get_input_reliable_stream>
 8011020:	2800      	cmp	r0, #0
 8011022:	d08e      	beq.n	8010f42 <read_submessage_list+0x12>
 8011024:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8011028:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 801102c:	f007 f940 	bl	80182b0 <uxr_process_heartbeat>
 8011030:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8011034:	463a      	mov	r2, r7
 8011036:	4620      	mov	r0, r4
 8011038:	f7ff fde2 	bl	8010c00 <write_submessage_acknack.isra.0>
 801103c:	e781      	b.n	8010f42 <read_submessage_list+0x12>
 801103e:	a910      	add	r1, sp, #64	@ 0x40
 8011040:	4628      	mov	r0, r5
 8011042:	f002 fd65 	bl	8013b10 <uxr_deserialize_ACKNACK_Payload>
 8011046:	2100      	movs	r1, #0
 8011048:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 801104c:	f001 fb38 	bl	80126c0 <uxr_stream_id_from_raw>
 8011050:	900d      	str	r0, [sp, #52]	@ 0x34
 8011052:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8011056:	f104 0008 	add.w	r0, r4, #8
 801105a:	f001 fc0b 	bl	8012874 <uxr_get_output_reliable_stream>
 801105e:	4607      	mov	r7, r0
 8011060:	2800      	cmp	r0, #0
 8011062:	f43f af6e 	beq.w	8010f42 <read_submessage_list+0x12>
 8011066:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 801106a:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 801106e:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8011072:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8011076:	b289      	uxth	r1, r1
 8011078:	f007 fc74 	bl	8018964 <uxr_process_acknack>
 801107c:	4638      	mov	r0, r7
 801107e:	f007 fc31 	bl	80188e4 <uxr_begin_output_nack_buffer_it>
 8011082:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8011086:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 801108a:	e006      	b.n	801109a <read_submessage_list+0x16a>
 801108c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801108e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011090:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8011094:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011096:	6818      	ldr	r0, [r3, #0]
 8011098:	47c8      	blx	r9
 801109a:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 801109e:	aa0f      	add	r2, sp, #60	@ 0x3c
 80110a0:	4651      	mov	r1, sl
 80110a2:	4638      	mov	r0, r7
 80110a4:	f007 fc20 	bl	80188e8 <uxr_next_reliable_nack_buffer_to_send>
 80110a8:	2800      	cmp	r0, #0
 80110aa:	d1ef      	bne.n	801108c <read_submessage_list+0x15c>
 80110ac:	e749      	b.n	8010f42 <read_submessage_list+0x12>
 80110ae:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 80110b2:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 80110b6:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 80110ba:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 80110be:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 80110c2:	4651      	mov	r1, sl
 80110c4:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80110c8:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 80110cc:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 80110d0:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 80110d4:	4628      	mov	r0, r5
 80110d6:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 80110da:	f002 fa79 	bl	80135d0 <uxr_deserialize_BaseObjectRequest>
 80110de:	4650      	mov	r0, sl
 80110e0:	a90f      	add	r1, sp, #60	@ 0x3c
 80110e2:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 80110e6:	f000 fe1d 	bl	8011d24 <uxr_parse_base_object_request>
 80110ea:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 80110ee:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80110f0:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 80110f4:	9110      	str	r1, [sp, #64]	@ 0x40
 80110f6:	3f04      	subs	r7, #4
 80110f8:	f009 090e 	and.w	r9, r9, #14
 80110fc:	b2bf      	uxth	r7, r7
 80110fe:	f1bb 0f00 	cmp.w	fp, #0
 8011102:	d006      	beq.n	8011112 <read_submessage_list+0x1e2>
 8011104:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8011108:	9300      	str	r3, [sp, #0]
 801110a:	4652      	mov	r2, sl
 801110c:	2300      	movs	r3, #0
 801110e:	4620      	mov	r0, r4
 8011110:	47d8      	blx	fp
 8011112:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8011114:	b16a      	cbz	r2, 8011132 <read_submessage_list+0x202>
 8011116:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8011118:	2100      	movs	r1, #0
 801111a:	3802      	subs	r0, #2
 801111c:	e002      	b.n	8011124 <read_submessage_list+0x1f4>
 801111e:	3101      	adds	r1, #1
 8011120:	4291      	cmp	r1, r2
 8011122:	d006      	beq.n	8011132 <read_submessage_list+0x202>
 8011124:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8011128:	4553      	cmp	r3, sl
 801112a:	d1f8      	bne.n	801111e <read_submessage_list+0x1ee>
 801112c:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801112e:	2200      	movs	r2, #0
 8011130:	545a      	strb	r2, [r3, r1]
 8011132:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8011136:	9102      	str	r1, [sp, #8]
 8011138:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801113a:	9101      	str	r1, [sp, #4]
 801113c:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801113e:	9100      	str	r1, [sp, #0]
 8011140:	464b      	mov	r3, r9
 8011142:	463a      	mov	r2, r7
 8011144:	4629      	mov	r1, r5
 8011146:	4620      	mov	r0, r4
 8011148:	f7ff fc38 	bl	80109bc <read_submessage_format>
 801114c:	e6f9      	b.n	8010f42 <read_submessage_list+0x12>
 801114e:	4629      	mov	r1, r5
 8011150:	4620      	mov	r0, r4
 8011152:	f7ff fea5 	bl	8010ea0 <read_submessage_info>
 8011156:	e6f4      	b.n	8010f42 <read_submessage_list+0x12>
 8011158:	2a00      	cmp	r2, #0
 801115a:	d03e      	beq.n	80111da <read_submessage_list+0x2aa>
 801115c:	a910      	add	r1, sp, #64	@ 0x40
 801115e:	4628      	mov	r0, r5
 8011160:	f002 fc32 	bl	80139c8 <uxr_deserialize_STATUS_Payload>
 8011164:	a90e      	add	r1, sp, #56	@ 0x38
 8011166:	aa0d      	add	r2, sp, #52	@ 0x34
 8011168:	a810      	add	r0, sp, #64	@ 0x40
 801116a:	f000 fddb 	bl	8011d24 <uxr_parse_base_object_request>
 801116e:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 8011172:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011174:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 8011178:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 801117c:	910f      	str	r1, [sp, #60]	@ 0x3c
 801117e:	f1ba 0f00 	cmp.w	sl, #0
 8011182:	d006      	beq.n	8011192 <read_submessage_list+0x262>
 8011184:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8011188:	9300      	str	r3, [sp, #0]
 801118a:	463a      	mov	r2, r7
 801118c:	464b      	mov	r3, r9
 801118e:	4620      	mov	r0, r4
 8011190:	47d0      	blx	sl
 8011192:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8011194:	2a00      	cmp	r2, #0
 8011196:	f43f aed4 	beq.w	8010f42 <read_submessage_list+0x12>
 801119a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 801119c:	2100      	movs	r1, #0
 801119e:	3802      	subs	r0, #2
 80111a0:	e003      	b.n	80111aa <read_submessage_list+0x27a>
 80111a2:	3101      	adds	r1, #1
 80111a4:	4291      	cmp	r1, r2
 80111a6:	f43f aecc 	beq.w	8010f42 <read_submessage_list+0x12>
 80111aa:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 80111ae:	42bb      	cmp	r3, r7
 80111b0:	d1f7      	bne.n	80111a2 <read_submessage_list+0x272>
 80111b2:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80111b4:	f803 9001 	strb.w	r9, [r3, r1]
 80111b8:	e6c3      	b.n	8010f42 <read_submessage_list+0x12>
 80111ba:	2a00      	cmp	r2, #0
 80111bc:	f47f aec1 	bne.w	8010f42 <read_submessage_list+0x12>
 80111c0:	4629      	mov	r1, r5
 80111c2:	4620      	mov	r0, r4
 80111c4:	f000 fcf4 	bl	8011bb0 <uxr_read_create_session_status>
 80111c8:	e6bb      	b.n	8010f42 <read_submessage_list+0x12>
 80111ca:	4629      	mov	r1, r5
 80111cc:	4620      	mov	r0, r4
 80111ce:	f7ff fce1 	bl	8010b94 <read_submessage_get_info>
 80111d2:	e6b6      	b.n	8010f42 <read_submessage_list+0x12>
 80111d4:	b017      	add	sp, #92	@ 0x5c
 80111d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111da:	4629      	mov	r1, r5
 80111dc:	4620      	mov	r0, r4
 80111de:	f000 fcf3 	bl	8011bc8 <uxr_read_delete_session_status>
 80111e2:	e6ae      	b.n	8010f42 <read_submessage_list+0x12>
 80111e4:	f001 fbda 	bl	801299c <uxr_nanos>
 80111e8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80111ea:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80111ec:	464f      	mov	r7, r9
 80111ee:	fbc3 2706 	smlal	r2, r7, r3, r6
 80111f2:	1812      	adds	r2, r2, r0
 80111f4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80111f6:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80111f8:	eb47 0101 	adc.w	r1, r7, r1
 80111fc:	464f      	mov	r7, r9
 80111fe:	fbc3 0706 	smlal	r0, r7, r3, r6
 8011202:	463b      	mov	r3, r7
 8011204:	4684      	mov	ip, r0
 8011206:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 801120a:	fbc7 0906 	smlal	r0, r9, r7, r6
 801120e:	eb1c 0c00 	adds.w	ip, ip, r0
 8011212:	464f      	mov	r7, r9
 8011214:	eb43 0307 	adc.w	r3, r3, r7
 8011218:	ebb2 0c0c 	subs.w	ip, r2, ip
 801121c:	eb61 0303 	sbc.w	r3, r1, r3
 8011220:	0fda      	lsrs	r2, r3, #31
 8011222:	eb12 020c 	adds.w	r2, r2, ip
 8011226:	f143 0300 	adc.w	r3, r3, #0
 801122a:	0852      	lsrs	r2, r2, #1
 801122c:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 8011230:	105b      	asrs	r3, r3, #1
 8011232:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 8011236:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 801123a:	e6dd      	b.n	8010ff8 <read_submessage_list+0xc8>
 801123c:	3b9aca00 	.word	0x3b9aca00

08011240 <listen_message_reliably>:
 8011240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011244:	1e0b      	subs	r3, r1, #0
 8011246:	b09d      	sub	sp, #116	@ 0x74
 8011248:	bfb8      	it	lt
 801124a:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 801124e:	4680      	mov	r8, r0
 8011250:	9305      	str	r3, [sp, #20]
 8011252:	f001 fb89 	bl	8012968 <uxr_millis>
 8011256:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 801125a:	4681      	mov	r9, r0
 801125c:	2a00      	cmp	r2, #0
 801125e:	f000 80a1 	beq.w	80113a4 <listen_message_reliably+0x164>
 8011262:	2600      	movs	r6, #0
 8011264:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011268:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 801126c:	9303      	str	r3, [sp, #12]
 801126e:	4630      	mov	r0, r6
 8011270:	460f      	mov	r7, r1
 8011272:	e00f      	b.n	8011294 <listen_message_reliably+0x54>
 8011274:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8011278:	9903      	ldr	r1, [sp, #12]
 801127a:	455a      	cmp	r2, fp
 801127c:	f106 0601 	add.w	r6, r6, #1
 8011280:	eb73 0101 	sbcs.w	r1, r3, r1
 8011284:	b2f0      	uxtb	r0, r6
 8011286:	da01      	bge.n	801128c <listen_message_reliably+0x4c>
 8011288:	4693      	mov	fp, r2
 801128a:	9303      	str	r3, [sp, #12]
 801128c:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8011290:	4283      	cmp	r3, r0
 8011292:	d960      	bls.n	8011356 <listen_message_reliably+0x116>
 8011294:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8011298:	2102      	movs	r1, #2
 801129a:	2201      	movs	r2, #1
 801129c:	f001 f9e6 	bl	801266c <uxr_stream_id>
 80112a0:	00e4      	lsls	r4, r4, #3
 80112a2:	f104 0520 	add.w	r5, r4, #32
 80112a6:	4445      	add	r5, r8
 80112a8:	4601      	mov	r1, r0
 80112aa:	463b      	mov	r3, r7
 80112ac:	464a      	mov	r2, r9
 80112ae:	4628      	mov	r0, r5
 80112b0:	9109      	str	r1, [sp, #36]	@ 0x24
 80112b2:	f007 faed 	bl	8018890 <uxr_update_output_stream_heartbeat_timestamp>
 80112b6:	eb08 0304 	add.w	r3, r8, r4
 80112ba:	2800      	cmp	r0, #0
 80112bc:	d0da      	beq.n	8011274 <listen_message_reliably+0x34>
 80112be:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80112c2:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 80112c6:	9304      	str	r3, [sp, #16]
 80112c8:	4640      	mov	r0, r8
 80112ca:	f000 fd05 	bl	8011cd8 <uxr_session_header_offset>
 80112ce:	3501      	adds	r5, #1
 80112d0:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 80112d4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80112d8:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 80112dc:	2300      	movs	r3, #0
 80112de:	2211      	movs	r2, #17
 80112e0:	9000      	str	r0, [sp, #0]
 80112e2:	a90c      	add	r1, sp, #48	@ 0x30
 80112e4:	4650      	mov	r0, sl
 80112e6:	f7fb fbbf 	bl	800ca68 <ucdr_init_buffer_origin_offset>
 80112ea:	2300      	movs	r3, #0
 80112ec:	2205      	movs	r2, #5
 80112ee:	210b      	movs	r1, #11
 80112f0:	4650      	mov	r0, sl
 80112f2:	f001 faf3 	bl	80128dc <uxr_buffer_submessage_header>
 80112f6:	8968      	ldrh	r0, [r5, #10]
 80112f8:	2101      	movs	r1, #1
 80112fa:	f007 fb8b 	bl	8018a14 <uxr_seq_num_add>
 80112fe:	892b      	ldrh	r3, [r5, #8]
 8011300:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8011304:	4602      	mov	r2, r0
 8011306:	9b04      	ldr	r3, [sp, #16]
 8011308:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 801130c:	a90a      	add	r1, sp, #40	@ 0x28
 801130e:	4650      	mov	r0, sl
 8011310:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8011314:	f002 fc10 	bl	8013b38 <uxr_serialize_HEARTBEAT_Payload>
 8011318:	2200      	movs	r2, #0
 801131a:	4611      	mov	r1, r2
 801131c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801131e:	4640      	mov	r0, r8
 8011320:	f000 fc84 	bl	8011c2c <uxr_stamp_session_header>
 8011324:	4650      	mov	r0, sl
 8011326:	f7fb fbdd 	bl	800cae4 <ucdr_buffer_length>
 801132a:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 801132e:	4602      	mov	r2, r0
 8011330:	a90c      	add	r1, sp, #48	@ 0x30
 8011332:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011336:	4444      	add	r4, r8
 8011338:	47a8      	blx	r5
 801133a:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 801133e:	9903      	ldr	r1, [sp, #12]
 8011340:	455a      	cmp	r2, fp
 8011342:	f106 0601 	add.w	r6, r6, #1
 8011346:	eb73 0101 	sbcs.w	r1, r3, r1
 801134a:	b2f0      	uxtb	r0, r6
 801134c:	db9c      	blt.n	8011288 <listen_message_reliably+0x48>
 801134e:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8011352:	4283      	cmp	r3, r0
 8011354:	d89e      	bhi.n	8011294 <listen_message_reliably+0x54>
 8011356:	9a03      	ldr	r2, [sp, #12]
 8011358:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801135c:	429a      	cmp	r2, r3
 801135e:	bf08      	it	eq
 8011360:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 8011364:	d01e      	beq.n	80113a4 <listen_message_reliably+0x164>
 8011366:	ebab 0309 	sub.w	r3, fp, r9
 801136a:	9905      	ldr	r1, [sp, #20]
 801136c:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 8011370:	2b00      	cmp	r3, #0
 8011372:	bf08      	it	eq
 8011374:	2301      	moveq	r3, #1
 8011376:	4299      	cmp	r1, r3
 8011378:	bfa8      	it	ge
 801137a:	4619      	movge	r1, r3
 801137c:	6894      	ldr	r4, [r2, #8]
 801137e:	6810      	ldr	r0, [r2, #0]
 8011380:	4689      	mov	r9, r1
 8011382:	460b      	mov	r3, r1
 8011384:	aa08      	add	r2, sp, #32
 8011386:	a907      	add	r1, sp, #28
 8011388:	47a0      	blx	r4
 801138a:	b968      	cbnz	r0, 80113a8 <listen_message_reliably+0x168>
 801138c:	9b05      	ldr	r3, [sp, #20]
 801138e:	eba3 0309 	sub.w	r3, r3, r9
 8011392:	2b00      	cmp	r3, #0
 8011394:	9305      	str	r3, [sp, #20]
 8011396:	f73f af5c 	bgt.w	8011252 <listen_message_reliably+0x12>
 801139a:	4604      	mov	r4, r0
 801139c:	4620      	mov	r0, r4
 801139e:	b01d      	add	sp, #116	@ 0x74
 80113a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113a4:	9b05      	ldr	r3, [sp, #20]
 80113a6:	e7e0      	b.n	801136a <listen_message_reliably+0x12a>
 80113a8:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80113ac:	4604      	mov	r4, r0
 80113ae:	a80c      	add	r0, sp, #48	@ 0x30
 80113b0:	f7fb fb6c 	bl	800ca8c <ucdr_init_buffer>
 80113b4:	2500      	movs	r5, #0
 80113b6:	f10d 031a 	add.w	r3, sp, #26
 80113ba:	aa06      	add	r2, sp, #24
 80113bc:	a90c      	add	r1, sp, #48	@ 0x30
 80113be:	4640      	mov	r0, r8
 80113c0:	f88d 5018 	strb.w	r5, [sp, #24]
 80113c4:	f000 fc46 	bl	8011c54 <uxr_read_session_header>
 80113c8:	b918      	cbnz	r0, 80113d2 <listen_message_reliably+0x192>
 80113ca:	4620      	mov	r0, r4
 80113cc:	b01d      	add	sp, #116	@ 0x74
 80113ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113d2:	4629      	mov	r1, r5
 80113d4:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80113d8:	f001 f972 	bl	80126c0 <uxr_stream_id_from_raw>
 80113dc:	f3c0 4507 	ubfx	r5, r0, #16, #8
 80113e0:	2d01      	cmp	r5, #1
 80113e2:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 80113e6:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 80113ea:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80113ee:	d04b      	beq.n	8011488 <listen_message_reliably+0x248>
 80113f0:	2d02      	cmp	r5, #2
 80113f2:	d00f      	beq.n	8011414 <listen_message_reliably+0x1d4>
 80113f4:	2d00      	cmp	r5, #0
 80113f6:	d1e8      	bne.n	80113ca <listen_message_reliably+0x18a>
 80113f8:	4629      	mov	r1, r5
 80113fa:	4628      	mov	r0, r5
 80113fc:	f001 f960 	bl	80126c0 <uxr_stream_id_from_raw>
 8011400:	a90c      	add	r1, sp, #48	@ 0x30
 8011402:	4602      	mov	r2, r0
 8011404:	4640      	mov	r0, r8
 8011406:	920a      	str	r2, [sp, #40]	@ 0x28
 8011408:	f7ff fd92 	bl	8010f30 <read_submessage_list>
 801140c:	4620      	mov	r0, r4
 801140e:	b01d      	add	sp, #116	@ 0x74
 8011410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011414:	4631      	mov	r1, r6
 8011416:	f108 0008 	add.w	r0, r8, #8
 801141a:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 801141e:	f001 fa3d 	bl	801289c <uxr_get_input_reliable_stream>
 8011422:	4607      	mov	r7, r0
 8011424:	b338      	cbz	r0, 8011476 <listen_message_reliably+0x236>
 8011426:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011428:	9203      	str	r2, [sp, #12]
 801142a:	a80c      	add	r0, sp, #48	@ 0x30
 801142c:	f7fb fb5e 	bl	800caec <ucdr_buffer_remaining>
 8011430:	4603      	mov	r3, r0
 8011432:	f10d 0019 	add.w	r0, sp, #25
 8011436:	9000      	str	r0, [sp, #0]
 8011438:	9a03      	ldr	r2, [sp, #12]
 801143a:	4651      	mov	r1, sl
 801143c:	4638      	mov	r0, r7
 801143e:	f006 fe3d 	bl	80180bc <uxr_receive_reliable_message>
 8011442:	b1c0      	cbz	r0, 8011476 <listen_message_reliably+0x236>
 8011444:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8011448:	b393      	cbz	r3, 80114b0 <listen_message_reliably+0x270>
 801144a:	ad14      	add	r5, sp, #80	@ 0x50
 801144c:	f04f 0a02 	mov.w	sl, #2
 8011450:	e00a      	b.n	8011468 <listen_message_reliably+0x228>
 8011452:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 8011456:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 801145a:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 801145e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011460:	4629      	mov	r1, r5
 8011462:	4640      	mov	r0, r8
 8011464:	f7ff fd64 	bl	8010f30 <read_submessage_list>
 8011468:	2204      	movs	r2, #4
 801146a:	4629      	mov	r1, r5
 801146c:	4638      	mov	r0, r7
 801146e:	f006 fea5 	bl	80181bc <uxr_next_input_reliable_buffer_available>
 8011472:	2800      	cmp	r0, #0
 8011474:	d1ed      	bne.n	8011452 <listen_message_reliably+0x212>
 8011476:	4640      	mov	r0, r8
 8011478:	4632      	mov	r2, r6
 801147a:	4649      	mov	r1, r9
 801147c:	f7ff fbc0 	bl	8010c00 <write_submessage_acknack.isra.0>
 8011480:	4620      	mov	r0, r4
 8011482:	b01d      	add	sp, #116	@ 0x74
 8011484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011488:	4631      	mov	r1, r6
 801148a:	f108 0008 	add.w	r0, r8, #8
 801148e:	f001 f9fb 	bl	8012888 <uxr_get_input_best_effort_stream>
 8011492:	2800      	cmp	r0, #0
 8011494:	d099      	beq.n	80113ca <listen_message_reliably+0x18a>
 8011496:	4651      	mov	r1, sl
 8011498:	f006 fd7c 	bl	8017f94 <uxr_receive_best_effort_message>
 801149c:	2800      	cmp	r0, #0
 801149e:	d094      	beq.n	80113ca <listen_message_reliably+0x18a>
 80114a0:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 80114a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80114a6:	a90c      	add	r1, sp, #48	@ 0x30
 80114a8:	4640      	mov	r0, r8
 80114aa:	f7ff fd41 	bl	8010f30 <read_submessage_list>
 80114ae:	e78c      	b.n	80113ca <listen_message_reliably+0x18a>
 80114b0:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 80114b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80114b6:	a90c      	add	r1, sp, #48	@ 0x30
 80114b8:	4640      	mov	r0, r8
 80114ba:	f7ff fd39 	bl	8010f30 <read_submessage_list>
 80114be:	e7c4      	b.n	801144a <listen_message_reliably+0x20a>

080114c0 <uxr_run_session_timeout>:
 80114c0:	b570      	push	{r4, r5, r6, lr}
 80114c2:	4604      	mov	r4, r0
 80114c4:	460d      	mov	r5, r1
 80114c6:	f001 fa4f 	bl	8012968 <uxr_millis>
 80114ca:	4606      	mov	r6, r0
 80114cc:	4620      	mov	r0, r4
 80114ce:	f7ff fc71 	bl	8010db4 <uxr_flash_output_streams>
 80114d2:	4629      	mov	r1, r5
 80114d4:	4620      	mov	r0, r4
 80114d6:	f7ff feb3 	bl	8011240 <listen_message_reliably>
 80114da:	f001 fa45 	bl	8012968 <uxr_millis>
 80114de:	1b83      	subs	r3, r0, r6
 80114e0:	1ae9      	subs	r1, r5, r3
 80114e2:	2900      	cmp	r1, #0
 80114e4:	dcf6      	bgt.n	80114d4 <uxr_run_session_timeout+0x14>
 80114e6:	f104 0008 	add.w	r0, r4, #8
 80114ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80114ee:	f001 b9df 	b.w	80128b0 <uxr_output_streams_confirmed>
 80114f2:	bf00      	nop

080114f4 <uxr_run_session_until_data>:
 80114f4:	b570      	push	{r4, r5, r6, lr}
 80114f6:	4604      	mov	r4, r0
 80114f8:	460d      	mov	r5, r1
 80114fa:	f001 fa35 	bl	8012968 <uxr_millis>
 80114fe:	4606      	mov	r6, r0
 8011500:	4620      	mov	r0, r4
 8011502:	f7ff fc57 	bl	8010db4 <uxr_flash_output_streams>
 8011506:	2300      	movs	r3, #0
 8011508:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 801150c:	4629      	mov	r1, r5
 801150e:	e005      	b.n	801151c <uxr_run_session_until_data+0x28>
 8011510:	f001 fa2a 	bl	8012968 <uxr_millis>
 8011514:	1b83      	subs	r3, r0, r6
 8011516:	1ae9      	subs	r1, r5, r3
 8011518:	2900      	cmp	r1, #0
 801151a:	dd07      	ble.n	801152c <uxr_run_session_until_data+0x38>
 801151c:	4620      	mov	r0, r4
 801151e:	f7ff fe8f 	bl	8011240 <listen_message_reliably>
 8011522:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8011526:	2800      	cmp	r0, #0
 8011528:	d0f2      	beq.n	8011510 <uxr_run_session_until_data+0x1c>
 801152a:	bd70      	pop	{r4, r5, r6, pc}
 801152c:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8011530:	bd70      	pop	{r4, r5, r6, pc}
 8011532:	bf00      	nop

08011534 <uxr_run_session_until_confirm_delivery>:
 8011534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011538:	4606      	mov	r6, r0
 801153a:	460d      	mov	r5, r1
 801153c:	f001 fa14 	bl	8012968 <uxr_millis>
 8011540:	4607      	mov	r7, r0
 8011542:	4630      	mov	r0, r6
 8011544:	f7ff fc36 	bl	8010db4 <uxr_flash_output_streams>
 8011548:	2d00      	cmp	r5, #0
 801154a:	f106 0808 	add.w	r8, r6, #8
 801154e:	bfa8      	it	ge
 8011550:	462c      	movge	r4, r5
 8011552:	da07      	bge.n	8011564 <uxr_run_session_until_confirm_delivery+0x30>
 8011554:	e00e      	b.n	8011574 <uxr_run_session_until_confirm_delivery+0x40>
 8011556:	f7ff fe73 	bl	8011240 <listen_message_reliably>
 801155a:	f001 fa05 	bl	8012968 <uxr_millis>
 801155e:	1bc3      	subs	r3, r0, r7
 8011560:	1aec      	subs	r4, r5, r3
 8011562:	d407      	bmi.n	8011574 <uxr_run_session_until_confirm_delivery+0x40>
 8011564:	4640      	mov	r0, r8
 8011566:	f001 f9a3 	bl	80128b0 <uxr_output_streams_confirmed>
 801156a:	4603      	mov	r3, r0
 801156c:	4621      	mov	r1, r4
 801156e:	4630      	mov	r0, r6
 8011570:	2b00      	cmp	r3, #0
 8011572:	d0f0      	beq.n	8011556 <uxr_run_session_until_confirm_delivery+0x22>
 8011574:	4640      	mov	r0, r8
 8011576:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801157a:	f001 b999 	b.w	80128b0 <uxr_output_streams_confirmed>
 801157e:	bf00      	nop

08011580 <uxr_run_session_until_all_status>:
 8011580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011584:	9c08      	ldr	r4, [sp, #32]
 8011586:	4606      	mov	r6, r0
 8011588:	460f      	mov	r7, r1
 801158a:	4691      	mov	r9, r2
 801158c:	461d      	mov	r5, r3
 801158e:	f7ff fc11 	bl	8010db4 <uxr_flash_output_streams>
 8011592:	b124      	cbz	r4, 801159e <uxr_run_session_until_all_status+0x1e>
 8011594:	4622      	mov	r2, r4
 8011596:	21ff      	movs	r1, #255	@ 0xff
 8011598:	4628      	mov	r0, r5
 801159a:	f008 fb53 	bl	8019c44 <memset>
 801159e:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 80115a2:	67f4      	str	r4, [r6, #124]	@ 0x7c
 80115a4:	f001 f9e0 	bl	8012968 <uxr_millis>
 80115a8:	3d01      	subs	r5, #1
 80115aa:	f1a9 0902 	sub.w	r9, r9, #2
 80115ae:	4680      	mov	r8, r0
 80115b0:	4639      	mov	r1, r7
 80115b2:	4630      	mov	r0, r6
 80115b4:	f7ff fe44 	bl	8011240 <listen_message_reliably>
 80115b8:	f001 f9d6 	bl	8012968 <uxr_millis>
 80115bc:	eba0 0008 	sub.w	r0, r0, r8
 80115c0:	1a39      	subs	r1, r7, r0
 80115c2:	b344      	cbz	r4, 8011616 <uxr_run_session_until_all_status+0x96>
 80115c4:	4628      	mov	r0, r5
 80115c6:	46ac      	mov	ip, r5
 80115c8:	2301      	movs	r3, #1
 80115ca:	e002      	b.n	80115d2 <uxr_run_session_until_all_status+0x52>
 80115cc:	42a3      	cmp	r3, r4
 80115ce:	d20d      	bcs.n	80115ec <uxr_run_session_until_all_status+0x6c>
 80115d0:	3301      	adds	r3, #1
 80115d2:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 80115d6:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80115da:	d1f7      	bne.n	80115cc <uxr_run_session_until_all_status+0x4c>
 80115dc:	42a3      	cmp	r3, r4
 80115de:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 80115e2:	d213      	bcs.n	801160c <uxr_run_session_until_all_status+0x8c>
 80115e4:	2a00      	cmp	r2, #0
 80115e6:	d0f3      	beq.n	80115d0 <uxr_run_session_until_all_status+0x50>
 80115e8:	2900      	cmp	r1, #0
 80115ea:	dce2      	bgt.n	80115b2 <uxr_run_session_until_all_status+0x32>
 80115ec:	2300      	movs	r3, #0
 80115ee:	67f3      	str	r3, [r6, #124]	@ 0x7c
 80115f0:	442c      	add	r4, r5
 80115f2:	e001      	b.n	80115f8 <uxr_run_session_until_all_status+0x78>
 80115f4:	2b01      	cmp	r3, #1
 80115f6:	d812      	bhi.n	801161e <uxr_run_session_until_all_status+0x9e>
 80115f8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80115fc:	4284      	cmp	r4, r0
 80115fe:	d1f9      	bne.n	80115f4 <uxr_run_session_until_all_status+0x74>
 8011600:	2b01      	cmp	r3, #1
 8011602:	bf8c      	ite	hi
 8011604:	2000      	movhi	r0, #0
 8011606:	2001      	movls	r0, #1
 8011608:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801160c:	2900      	cmp	r1, #0
 801160e:	dded      	ble.n	80115ec <uxr_run_session_until_all_status+0x6c>
 8011610:	2a00      	cmp	r2, #0
 8011612:	d1ce      	bne.n	80115b2 <uxr_run_session_until_all_status+0x32>
 8011614:	e7ea      	b.n	80115ec <uxr_run_session_until_all_status+0x6c>
 8011616:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8011618:	2001      	movs	r0, #1
 801161a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801161e:	2000      	movs	r0, #0
 8011620:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011624:	0000      	movs	r0, r0
	...

08011628 <uxr_sync_session>:
 8011628:	b5f0      	push	{r4, r5, r6, r7, lr}
 801162a:	b093      	sub	sp, #76	@ 0x4c
 801162c:	4604      	mov	r4, r0
 801162e:	460d      	mov	r5, r1
 8011630:	f000 fb52 	bl	8011cd8 <uxr_session_header_offset>
 8011634:	2214      	movs	r2, #20
 8011636:	eb0d 0102 	add.w	r1, sp, r2
 801163a:	9000      	str	r0, [sp, #0]
 801163c:	2300      	movs	r3, #0
 801163e:	a80a      	add	r0, sp, #40	@ 0x28
 8011640:	f7fb fa12 	bl	800ca68 <ucdr_init_buffer_origin_offset>
 8011644:	2300      	movs	r3, #0
 8011646:	2208      	movs	r2, #8
 8011648:	210e      	movs	r1, #14
 801164a:	a80a      	add	r0, sp, #40	@ 0x28
 801164c:	f001 f946 	bl	80128dc <uxr_buffer_submessage_header>
 8011650:	f001 f9a4 	bl	801299c <uxr_nanos>
 8011654:	a31c      	add	r3, pc, #112	@ (adr r3, 80116c8 <uxr_sync_session+0xa0>)
 8011656:	e9d3 2300 	ldrd	r2, r3, [r3]
 801165a:	460e      	mov	r6, r1
 801165c:	4607      	mov	r7, r0
 801165e:	f7ef fb03 	bl	8000c68 <__aeabi_ldivmod>
 8011662:	4631      	mov	r1, r6
 8011664:	9003      	str	r0, [sp, #12]
 8011666:	a318      	add	r3, pc, #96	@ (adr r3, 80116c8 <uxr_sync_session+0xa0>)
 8011668:	e9d3 2300 	ldrd	r2, r3, [r3]
 801166c:	4638      	mov	r0, r7
 801166e:	f7ef fafb 	bl	8000c68 <__aeabi_ldivmod>
 8011672:	a903      	add	r1, sp, #12
 8011674:	a80a      	add	r0, sp, #40	@ 0x28
 8011676:	9204      	str	r2, [sp, #16]
 8011678:	f002 fa84 	bl	8013b84 <uxr_serialize_TIMESTAMP_Payload>
 801167c:	2200      	movs	r2, #0
 801167e:	4611      	mov	r1, r2
 8011680:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011682:	4620      	mov	r0, r4
 8011684:	f000 fad2 	bl	8011c2c <uxr_stamp_session_header>
 8011688:	a80a      	add	r0, sp, #40	@ 0x28
 801168a:	f7fb fa2b 	bl	800cae4 <ucdr_buffer_length>
 801168e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011690:	4602      	mov	r2, r0
 8011692:	a905      	add	r1, sp, #20
 8011694:	e9d3 0600 	ldrd	r0, r6, [r3]
 8011698:	47b0      	blx	r6
 801169a:	f001 f965 	bl	8012968 <uxr_millis>
 801169e:	2300      	movs	r3, #0
 80116a0:	4606      	mov	r6, r0
 80116a2:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 80116a6:	4629      	mov	r1, r5
 80116a8:	e000      	b.n	80116ac <uxr_sync_session+0x84>
 80116aa:	b950      	cbnz	r0, 80116c2 <uxr_sync_session+0x9a>
 80116ac:	4620      	mov	r0, r4
 80116ae:	f7ff fdc7 	bl	8011240 <listen_message_reliably>
 80116b2:	f001 f959 	bl	8012968 <uxr_millis>
 80116b6:	1b83      	subs	r3, r0, r6
 80116b8:	1ae9      	subs	r1, r5, r3
 80116ba:	2900      	cmp	r1, #0
 80116bc:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 80116c0:	dcf3      	bgt.n	80116aa <uxr_sync_session+0x82>
 80116c2:	b013      	add	sp, #76	@ 0x4c
 80116c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80116c6:	bf00      	nop
 80116c8:	3b9aca00 	.word	0x3b9aca00
 80116cc:	00000000 	.word	0x00000000

080116d0 <wait_session_status>:
 80116d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116d4:	4604      	mov	r4, r0
 80116d6:	b09d      	sub	sp, #116	@ 0x74
 80116d8:	20ff      	movs	r0, #255	@ 0xff
 80116da:	7160      	strb	r0, [r4, #5]
 80116dc:	9303      	str	r3, [sp, #12]
 80116de:	2b00      	cmp	r3, #0
 80116e0:	f000 80b6 	beq.w	8011850 <wait_session_status+0x180>
 80116e4:	468a      	mov	sl, r1
 80116e6:	4691      	mov	r9, r2
 80116e8:	f04f 0b00 	mov.w	fp, #0
 80116ec:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80116ee:	464a      	mov	r2, r9
 80116f0:	e9d3 0500 	ldrd	r0, r5, [r3]
 80116f4:	4651      	mov	r1, sl
 80116f6:	47a8      	blx	r5
 80116f8:	f001 f936 	bl	8012968 <uxr_millis>
 80116fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011700:	4605      	mov	r5, r0
 8011702:	e009      	b.n	8011718 <wait_session_status+0x48>
 8011704:	f001 f930 	bl	8012968 <uxr_millis>
 8011708:	1b40      	subs	r0, r0, r5
 801170a:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801170e:	2b00      	cmp	r3, #0
 8011710:	dd40      	ble.n	8011794 <wait_session_status+0xc4>
 8011712:	7960      	ldrb	r0, [r4, #5]
 8011714:	28ff      	cmp	r0, #255	@ 0xff
 8011716:	d145      	bne.n	80117a4 <wait_session_status+0xd4>
 8011718:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801171a:	a908      	add	r1, sp, #32
 801171c:	6896      	ldr	r6, [r2, #8]
 801171e:	6810      	ldr	r0, [r2, #0]
 8011720:	aa09      	add	r2, sp, #36	@ 0x24
 8011722:	47b0      	blx	r6
 8011724:	2800      	cmp	r0, #0
 8011726:	d0ed      	beq.n	8011704 <wait_session_status+0x34>
 8011728:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 801172c:	a80c      	add	r0, sp, #48	@ 0x30
 801172e:	f7fb f9ad 	bl	800ca8c <ucdr_init_buffer>
 8011732:	2600      	movs	r6, #0
 8011734:	f10d 031e 	add.w	r3, sp, #30
 8011738:	aa07      	add	r2, sp, #28
 801173a:	a90c      	add	r1, sp, #48	@ 0x30
 801173c:	4620      	mov	r0, r4
 801173e:	f88d 601c 	strb.w	r6, [sp, #28]
 8011742:	f000 fa87 	bl	8011c54 <uxr_read_session_header>
 8011746:	2800      	cmp	r0, #0
 8011748:	d0dc      	beq.n	8011704 <wait_session_status+0x34>
 801174a:	4631      	mov	r1, r6
 801174c:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8011750:	f000 ffb6 	bl	80126c0 <uxr_stream_id_from_raw>
 8011754:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8011758:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801175c:	9302      	str	r3, [sp, #8]
 801175e:	2f01      	cmp	r7, #1
 8011760:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 8011764:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8011768:	d05c      	beq.n	8011824 <wait_session_status+0x154>
 801176a:	2f02      	cmp	r7, #2
 801176c:	d020      	beq.n	80117b0 <wait_session_status+0xe0>
 801176e:	2f00      	cmp	r7, #0
 8011770:	d1c8      	bne.n	8011704 <wait_session_status+0x34>
 8011772:	4639      	mov	r1, r7
 8011774:	4638      	mov	r0, r7
 8011776:	f000 ffa3 	bl	80126c0 <uxr_stream_id_from_raw>
 801177a:	a90c      	add	r1, sp, #48	@ 0x30
 801177c:	4602      	mov	r2, r0
 801177e:	900b      	str	r0, [sp, #44]	@ 0x2c
 8011780:	4620      	mov	r0, r4
 8011782:	f7ff fbd5 	bl	8010f30 <read_submessage_list>
 8011786:	f001 f8ef 	bl	8012968 <uxr_millis>
 801178a:	1b40      	subs	r0, r0, r5
 801178c:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8011790:	2b00      	cmp	r3, #0
 8011792:	dcbe      	bgt.n	8011712 <wait_session_status+0x42>
 8011794:	9b03      	ldr	r3, [sp, #12]
 8011796:	7960      	ldrb	r0, [r4, #5]
 8011798:	f10b 0b01 	add.w	fp, fp, #1
 801179c:	455b      	cmp	r3, fp
 801179e:	d001      	beq.n	80117a4 <wait_session_status+0xd4>
 80117a0:	28ff      	cmp	r0, #255	@ 0xff
 80117a2:	d0a3      	beq.n	80116ec <wait_session_status+0x1c>
 80117a4:	38ff      	subs	r0, #255	@ 0xff
 80117a6:	bf18      	it	ne
 80117a8:	2001      	movne	r0, #1
 80117aa:	b01d      	add	sp, #116	@ 0x74
 80117ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117b0:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 80117b4:	9304      	str	r3, [sp, #16]
 80117b6:	4631      	mov	r1, r6
 80117b8:	f104 0008 	add.w	r0, r4, #8
 80117bc:	f001 f86e 	bl	801289c <uxr_get_input_reliable_stream>
 80117c0:	4680      	mov	r8, r0
 80117c2:	b348      	cbz	r0, 8011818 <wait_session_status+0x148>
 80117c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80117c6:	9205      	str	r2, [sp, #20]
 80117c8:	a80c      	add	r0, sp, #48	@ 0x30
 80117ca:	f7fb f98f 	bl	800caec <ucdr_buffer_remaining>
 80117ce:	4603      	mov	r3, r0
 80117d0:	f10d 001d 	add.w	r0, sp, #29
 80117d4:	9000      	str	r0, [sp, #0]
 80117d6:	9a05      	ldr	r2, [sp, #20]
 80117d8:	9902      	ldr	r1, [sp, #8]
 80117da:	4640      	mov	r0, r8
 80117dc:	f006 fc6e 	bl	80180bc <uxr_receive_reliable_message>
 80117e0:	b1d0      	cbz	r0, 8011818 <wait_session_status+0x148>
 80117e2:	f89d 301d 	ldrb.w	r3, [sp, #29]
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d03a      	beq.n	8011860 <wait_session_status+0x190>
 80117ea:	9f04      	ldr	r7, [sp, #16]
 80117ec:	e00a      	b.n	8011804 <wait_session_status+0x134>
 80117ee:	f04f 0302 	mov.w	r3, #2
 80117f2:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 80117f6:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 80117fa:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 80117fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011800:	f7ff fb96 	bl	8010f30 <read_submessage_list>
 8011804:	a914      	add	r1, sp, #80	@ 0x50
 8011806:	2204      	movs	r2, #4
 8011808:	4640      	mov	r0, r8
 801180a:	f006 fcd7 	bl	80181bc <uxr_next_input_reliable_buffer_available>
 801180e:	4603      	mov	r3, r0
 8011810:	a914      	add	r1, sp, #80	@ 0x50
 8011812:	4620      	mov	r0, r4
 8011814:	2b00      	cmp	r3, #0
 8011816:	d1ea      	bne.n	80117ee <wait_session_status+0x11e>
 8011818:	9904      	ldr	r1, [sp, #16]
 801181a:	4632      	mov	r2, r6
 801181c:	4620      	mov	r0, r4
 801181e:	f7ff f9ef 	bl	8010c00 <write_submessage_acknack.isra.0>
 8011822:	e76f      	b.n	8011704 <wait_session_status+0x34>
 8011824:	4631      	mov	r1, r6
 8011826:	f104 0008 	add.w	r0, r4, #8
 801182a:	f001 f82d 	bl	8012888 <uxr_get_input_best_effort_stream>
 801182e:	2800      	cmp	r0, #0
 8011830:	f43f af68 	beq.w	8011704 <wait_session_status+0x34>
 8011834:	9902      	ldr	r1, [sp, #8]
 8011836:	f006 fbad 	bl	8017f94 <uxr_receive_best_effort_message>
 801183a:	2800      	cmp	r0, #0
 801183c:	f43f af62 	beq.w	8011704 <wait_session_status+0x34>
 8011840:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8011844:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011846:	a90c      	add	r1, sp, #48	@ 0x30
 8011848:	4620      	mov	r0, r4
 801184a:	f7ff fb71 	bl	8010f30 <read_submessage_list>
 801184e:	e759      	b.n	8011704 <wait_session_status+0x34>
 8011850:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011852:	e9d3 0400 	ldrd	r0, r4, [r3]
 8011856:	47a0      	blx	r4
 8011858:	2001      	movs	r0, #1
 801185a:	b01d      	add	sp, #116	@ 0x74
 801185c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011860:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8011864:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011866:	a90c      	add	r1, sp, #48	@ 0x30
 8011868:	4620      	mov	r0, r4
 801186a:	f7ff fb61 	bl	8010f30 <read_submessage_list>
 801186e:	e7bc      	b.n	80117ea <wait_session_status+0x11a>

08011870 <uxr_delete_session_retries>:
 8011870:	b530      	push	{r4, r5, lr}
 8011872:	b08f      	sub	sp, #60	@ 0x3c
 8011874:	4604      	mov	r4, r0
 8011876:	460d      	mov	r5, r1
 8011878:	f000 fa2e 	bl	8011cd8 <uxr_session_header_offset>
 801187c:	2300      	movs	r3, #0
 801187e:	2210      	movs	r2, #16
 8011880:	9000      	str	r0, [sp, #0]
 8011882:	a902      	add	r1, sp, #8
 8011884:	a806      	add	r0, sp, #24
 8011886:	f7fb f8ef 	bl	800ca68 <ucdr_init_buffer_origin_offset>
 801188a:	a906      	add	r1, sp, #24
 801188c:	4620      	mov	r0, r4
 801188e:	f000 f973 	bl	8011b78 <uxr_buffer_delete_session>
 8011892:	2200      	movs	r2, #0
 8011894:	4611      	mov	r1, r2
 8011896:	9b06      	ldr	r3, [sp, #24]
 8011898:	4620      	mov	r0, r4
 801189a:	f000 f9c7 	bl	8011c2c <uxr_stamp_session_header>
 801189e:	a806      	add	r0, sp, #24
 80118a0:	f7fb f920 	bl	800cae4 <ucdr_buffer_length>
 80118a4:	462b      	mov	r3, r5
 80118a6:	4602      	mov	r2, r0
 80118a8:	a902      	add	r1, sp, #8
 80118aa:	4620      	mov	r0, r4
 80118ac:	f7ff ff10 	bl	80116d0 <wait_session_status>
 80118b0:	b118      	cbz	r0, 80118ba <uxr_delete_session_retries+0x4a>
 80118b2:	7960      	ldrb	r0, [r4, #5]
 80118b4:	fab0 f080 	clz	r0, r0
 80118b8:	0940      	lsrs	r0, r0, #5
 80118ba:	b00f      	add	sp, #60	@ 0x3c
 80118bc:	bd30      	pop	{r4, r5, pc}
 80118be:	bf00      	nop

080118c0 <uxr_create_session>:
 80118c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118c4:	f100 0b08 	add.w	fp, r0, #8
 80118c8:	b0ab      	sub	sp, #172	@ 0xac
 80118ca:	4604      	mov	r4, r0
 80118cc:	4658      	mov	r0, fp
 80118ce:	f000 ff2b 	bl	8012728 <uxr_reset_stream_storage>
 80118d2:	4620      	mov	r0, r4
 80118d4:	f000 fa00 	bl	8011cd8 <uxr_session_header_offset>
 80118d8:	2300      	movs	r3, #0
 80118da:	9000      	str	r0, [sp, #0]
 80118dc:	221c      	movs	r2, #28
 80118de:	a90b      	add	r1, sp, #44	@ 0x2c
 80118e0:	a812      	add	r0, sp, #72	@ 0x48
 80118e2:	f7fb f8c1 	bl	800ca68 <ucdr_init_buffer_origin_offset>
 80118e6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80118e8:	8a1a      	ldrh	r2, [r3, #16]
 80118ea:	3a04      	subs	r2, #4
 80118ec:	b292      	uxth	r2, r2
 80118ee:	a912      	add	r1, sp, #72	@ 0x48
 80118f0:	4620      	mov	r0, r4
 80118f2:	f000 f917 	bl	8011b24 <uxr_buffer_create_session>
 80118f6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80118f8:	4620      	mov	r0, r4
 80118fa:	f000 f983 	bl	8011c04 <uxr_stamp_create_session_header>
 80118fe:	a812      	add	r0, sp, #72	@ 0x48
 8011900:	f7fb f8f0 	bl	800cae4 <ucdr_buffer_length>
 8011904:	23ff      	movs	r3, #255	@ 0xff
 8011906:	7163      	strb	r3, [r4, #5]
 8011908:	230a      	movs	r3, #10
 801190a:	46da      	mov	sl, fp
 801190c:	9303      	str	r3, [sp, #12]
 801190e:	4683      	mov	fp, r0
 8011910:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011912:	465a      	mov	r2, fp
 8011914:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011918:	a90b      	add	r1, sp, #44	@ 0x2c
 801191a:	47a8      	blx	r5
 801191c:	f001 f824 	bl	8012968 <uxr_millis>
 8011920:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011924:	4605      	mov	r5, r0
 8011926:	e009      	b.n	801193c <uxr_create_session+0x7c>
 8011928:	f001 f81e 	bl	8012968 <uxr_millis>
 801192c:	1b40      	subs	r0, r0, r5
 801192e:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8011932:	2b00      	cmp	r3, #0
 8011934:	7962      	ldrb	r2, [r4, #5]
 8011936:	dd38      	ble.n	80119aa <uxr_create_session+0xea>
 8011938:	2aff      	cmp	r2, #255	@ 0xff
 801193a:	d13c      	bne.n	80119b6 <uxr_create_session+0xf6>
 801193c:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801193e:	a907      	add	r1, sp, #28
 8011940:	6896      	ldr	r6, [r2, #8]
 8011942:	6810      	ldr	r0, [r2, #0]
 8011944:	aa08      	add	r2, sp, #32
 8011946:	47b0      	blx	r6
 8011948:	2800      	cmp	r0, #0
 801194a:	d0ed      	beq.n	8011928 <uxr_create_session+0x68>
 801194c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8011950:	a81a      	add	r0, sp, #104	@ 0x68
 8011952:	f7fb f89b 	bl	800ca8c <ucdr_init_buffer>
 8011956:	2600      	movs	r6, #0
 8011958:	f10d 031a 	add.w	r3, sp, #26
 801195c:	aa06      	add	r2, sp, #24
 801195e:	a91a      	add	r1, sp, #104	@ 0x68
 8011960:	4620      	mov	r0, r4
 8011962:	f88d 6018 	strb.w	r6, [sp, #24]
 8011966:	f000 f975 	bl	8011c54 <uxr_read_session_header>
 801196a:	2800      	cmp	r0, #0
 801196c:	d0dc      	beq.n	8011928 <uxr_create_session+0x68>
 801196e:	4631      	mov	r1, r6
 8011970:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8011974:	f000 fea4 	bl	80126c0 <uxr_stream_id_from_raw>
 8011978:	f3c0 4607 	ubfx	r6, r0, #16, #8
 801197c:	2e01      	cmp	r6, #1
 801197e:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8011982:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 8011986:	f3c0 2707 	ubfx	r7, r0, #8, #8
 801198a:	d053      	beq.n	8011a34 <uxr_create_session+0x174>
 801198c:	2e02      	cmp	r6, #2
 801198e:	d018      	beq.n	80119c2 <uxr_create_session+0x102>
 8011990:	2e00      	cmp	r6, #0
 8011992:	d1c9      	bne.n	8011928 <uxr_create_session+0x68>
 8011994:	4631      	mov	r1, r6
 8011996:	4630      	mov	r0, r6
 8011998:	f000 fe92 	bl	80126c0 <uxr_stream_id_from_raw>
 801199c:	a91a      	add	r1, sp, #104	@ 0x68
 801199e:	4602      	mov	r2, r0
 80119a0:	900a      	str	r0, [sp, #40]	@ 0x28
 80119a2:	4620      	mov	r0, r4
 80119a4:	f7ff fac4 	bl	8010f30 <read_submessage_list>
 80119a8:	e7be      	b.n	8011928 <uxr_create_session+0x68>
 80119aa:	9b03      	ldr	r3, [sp, #12]
 80119ac:	3b01      	subs	r3, #1
 80119ae:	9303      	str	r3, [sp, #12]
 80119b0:	d001      	beq.n	80119b6 <uxr_create_session+0xf6>
 80119b2:	2aff      	cmp	r2, #255	@ 0xff
 80119b4:	d0ac      	beq.n	8011910 <uxr_create_session+0x50>
 80119b6:	2a00      	cmp	r2, #0
 80119b8:	d051      	beq.n	8011a5e <uxr_create_session+0x19e>
 80119ba:	2000      	movs	r0, #0
 80119bc:	b02b      	add	sp, #172	@ 0xac
 80119be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119c2:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80119c6:	9304      	str	r3, [sp, #16]
 80119c8:	4639      	mov	r1, r7
 80119ca:	4650      	mov	r0, sl
 80119cc:	f000 ff66 	bl	801289c <uxr_get_input_reliable_stream>
 80119d0:	4680      	mov	r8, r0
 80119d2:	b348      	cbz	r0, 8011a28 <uxr_create_session+0x168>
 80119d4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80119d6:	9205      	str	r2, [sp, #20]
 80119d8:	a81a      	add	r0, sp, #104	@ 0x68
 80119da:	f7fb f887 	bl	800caec <ucdr_buffer_remaining>
 80119de:	4603      	mov	r3, r0
 80119e0:	f10d 0019 	add.w	r0, sp, #25
 80119e4:	9000      	str	r0, [sp, #0]
 80119e6:	9a05      	ldr	r2, [sp, #20]
 80119e8:	4649      	mov	r1, r9
 80119ea:	4640      	mov	r0, r8
 80119ec:	f006 fb66 	bl	80180bc <uxr_receive_reliable_message>
 80119f0:	b1d0      	cbz	r0, 8011a28 <uxr_create_session+0x168>
 80119f2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d038      	beq.n	8011a6c <uxr_create_session+0x1ac>
 80119fa:	9e04      	ldr	r6, [sp, #16]
 80119fc:	e00a      	b.n	8011a14 <uxr_create_session+0x154>
 80119fe:	f04f 0302 	mov.w	r3, #2
 8011a02:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 8011a06:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 8011a0a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011a0e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011a10:	f7ff fa8e 	bl	8010f30 <read_submessage_list>
 8011a14:	a922      	add	r1, sp, #136	@ 0x88
 8011a16:	2204      	movs	r2, #4
 8011a18:	4640      	mov	r0, r8
 8011a1a:	f006 fbcf 	bl	80181bc <uxr_next_input_reliable_buffer_available>
 8011a1e:	4603      	mov	r3, r0
 8011a20:	a922      	add	r1, sp, #136	@ 0x88
 8011a22:	4620      	mov	r0, r4
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d1ea      	bne.n	80119fe <uxr_create_session+0x13e>
 8011a28:	9904      	ldr	r1, [sp, #16]
 8011a2a:	463a      	mov	r2, r7
 8011a2c:	4620      	mov	r0, r4
 8011a2e:	f7ff f8e7 	bl	8010c00 <write_submessage_acknack.isra.0>
 8011a32:	e779      	b.n	8011928 <uxr_create_session+0x68>
 8011a34:	4639      	mov	r1, r7
 8011a36:	4650      	mov	r0, sl
 8011a38:	f000 ff26 	bl	8012888 <uxr_get_input_best_effort_stream>
 8011a3c:	2800      	cmp	r0, #0
 8011a3e:	f43f af73 	beq.w	8011928 <uxr_create_session+0x68>
 8011a42:	4649      	mov	r1, r9
 8011a44:	f006 faa6 	bl	8017f94 <uxr_receive_best_effort_message>
 8011a48:	2800      	cmp	r0, #0
 8011a4a:	f43f af6d 	beq.w	8011928 <uxr_create_session+0x68>
 8011a4e:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8011a52:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011a54:	a91a      	add	r1, sp, #104	@ 0x68
 8011a56:	4620      	mov	r0, r4
 8011a58:	f7ff fa6a 	bl	8010f30 <read_submessage_list>
 8011a5c:	e764      	b.n	8011928 <uxr_create_session+0x68>
 8011a5e:	4650      	mov	r0, sl
 8011a60:	f000 fe62 	bl	8012728 <uxr_reset_stream_storage>
 8011a64:	2001      	movs	r0, #1
 8011a66:	b02b      	add	sp, #172	@ 0xac
 8011a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a6c:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8011a70:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011a72:	a91a      	add	r1, sp, #104	@ 0x68
 8011a74:	4620      	mov	r0, r4
 8011a76:	f7ff fa5b 	bl	8010f30 <read_submessage_list>
 8011a7a:	e7be      	b.n	80119fa <uxr_create_session+0x13a>

08011a7c <uxr_prepare_stream_to_write_submessage>:
 8011a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a80:	b082      	sub	sp, #8
 8011a82:	4682      	mov	sl, r0
 8011a84:	4610      	mov	r0, r2
 8011a86:	4615      	mov	r5, r2
 8011a88:	461e      	mov	r6, r3
 8011a8a:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 8011a8e:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 8011a92:	9101      	str	r1, [sp, #4]
 8011a94:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8011a98:	f000 ff60 	bl	801295c <uxr_submessage_padding>
 8011a9c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011aa0:	f105 0904 	add.w	r9, r5, #4
 8011aa4:	2b01      	cmp	r3, #1
 8011aa6:	4481      	add	r9, r0
 8011aa8:	d01d      	beq.n	8011ae6 <uxr_prepare_stream_to_write_submessage+0x6a>
 8011aaa:	2b02      	cmp	r3, #2
 8011aac:	d116      	bne.n	8011adc <uxr_prepare_stream_to_write_submessage+0x60>
 8011aae:	4621      	mov	r1, r4
 8011ab0:	f10a 0008 	add.w	r0, sl, #8
 8011ab4:	f000 fede 	bl	8012874 <uxr_get_output_reliable_stream>
 8011ab8:	4604      	mov	r4, r0
 8011aba:	b158      	cbz	r0, 8011ad4 <uxr_prepare_stream_to_write_submessage+0x58>
 8011abc:	4649      	mov	r1, r9
 8011abe:	4632      	mov	r2, r6
 8011ac0:	f006 fd38 	bl	8018534 <uxr_prepare_reliable_buffer_to_write>
 8011ac4:	4604      	mov	r4, r0
 8011ac6:	b12c      	cbz	r4, 8011ad4 <uxr_prepare_stream_to_write_submessage+0x58>
 8011ac8:	4643      	mov	r3, r8
 8011aca:	b2aa      	uxth	r2, r5
 8011acc:	4639      	mov	r1, r7
 8011ace:	4630      	mov	r0, r6
 8011ad0:	f000 ff04 	bl	80128dc <uxr_buffer_submessage_header>
 8011ad4:	4620      	mov	r0, r4
 8011ad6:	b002      	add	sp, #8
 8011ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011adc:	2400      	movs	r4, #0
 8011ade:	4620      	mov	r0, r4
 8011ae0:	b002      	add	sp, #8
 8011ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ae6:	4621      	mov	r1, r4
 8011ae8:	f10a 0008 	add.w	r0, sl, #8
 8011aec:	f000 feba 	bl	8012864 <uxr_get_output_best_effort_stream>
 8011af0:	4604      	mov	r4, r0
 8011af2:	2800      	cmp	r0, #0
 8011af4:	d0ee      	beq.n	8011ad4 <uxr_prepare_stream_to_write_submessage+0x58>
 8011af6:	4649      	mov	r1, r9
 8011af8:	4632      	mov	r2, r6
 8011afa:	f006 fc4b 	bl	8018394 <uxr_prepare_best_effort_buffer_to_write>
 8011afe:	4604      	mov	r4, r0
 8011b00:	e7e1      	b.n	8011ac6 <uxr_prepare_stream_to_write_submessage+0x4a>
 8011b02:	bf00      	nop

08011b04 <uxr_init_session_info>:
 8011b04:	0e13      	lsrs	r3, r2, #24
 8011b06:	7043      	strb	r3, [r0, #1]
 8011b08:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8011b0c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8011b10:	7001      	strb	r1, [r0, #0]
 8011b12:	70c3      	strb	r3, [r0, #3]
 8011b14:	2109      	movs	r1, #9
 8011b16:	23ff      	movs	r3, #255	@ 0xff
 8011b18:	f880 c002 	strb.w	ip, [r0, #2]
 8011b1c:	7102      	strb	r2, [r0, #4]
 8011b1e:	80c1      	strh	r1, [r0, #6]
 8011b20:	7143      	strb	r3, [r0, #5]
 8011b22:	4770      	bx	lr

08011b24 <uxr_buffer_create_session>:
 8011b24:	b530      	push	{r4, r5, lr}
 8011b26:	b089      	sub	sp, #36	@ 0x24
 8011b28:	2300      	movs	r3, #0
 8011b2a:	4d12      	ldr	r5, [pc, #72]	@ (8011b74 <uxr_buffer_create_session+0x50>)
 8011b2c:	9307      	str	r3, [sp, #28]
 8011b2e:	f8ad 201c 	strh.w	r2, [sp, #28]
 8011b32:	2201      	movs	r2, #1
 8011b34:	9301      	str	r3, [sp, #4]
 8011b36:	80c2      	strh	r2, [r0, #6]
 8011b38:	f88d 2004 	strb.w	r2, [sp, #4]
 8011b3c:	682a      	ldr	r2, [r5, #0]
 8011b3e:	9200      	str	r2, [sp, #0]
 8011b40:	88aa      	ldrh	r2, [r5, #4]
 8011b42:	f8ad 2006 	strh.w	r2, [sp, #6]
 8011b46:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8011b4a:	9202      	str	r2, [sp, #8]
 8011b4c:	460c      	mov	r4, r1
 8011b4e:	7802      	ldrb	r2, [r0, #0]
 8011b50:	9303      	str	r3, [sp, #12]
 8011b52:	4619      	mov	r1, r3
 8011b54:	f88d 200c 	strb.w	r2, [sp, #12]
 8011b58:	4620      	mov	r0, r4
 8011b5a:	2210      	movs	r2, #16
 8011b5c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8011b60:	9306      	str	r3, [sp, #24]
 8011b62:	f000 febb 	bl	80128dc <uxr_buffer_submessage_header>
 8011b66:	4669      	mov	r1, sp
 8011b68:	4620      	mov	r0, r4
 8011b6a:	f001 fe47 	bl	80137fc <uxr_serialize_CREATE_CLIENT_Payload>
 8011b6e:	b009      	add	sp, #36	@ 0x24
 8011b70:	bd30      	pop	{r4, r5, pc}
 8011b72:	bf00      	nop
 8011b74:	0801b250 	.word	0x0801b250

08011b78 <uxr_buffer_delete_session>:
 8011b78:	b510      	push	{r4, lr}
 8011b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8011bac <uxr_buffer_delete_session+0x34>)
 8011b7c:	b082      	sub	sp, #8
 8011b7e:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 8011b82:	f8ad c006 	strh.w	ip, [sp, #6]
 8011b86:	460c      	mov	r4, r1
 8011b88:	2202      	movs	r2, #2
 8011b8a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011b8e:	80c2      	strh	r2, [r0, #6]
 8011b90:	f8ad 3004 	strh.w	r3, [sp, #4]
 8011b94:	2204      	movs	r2, #4
 8011b96:	2300      	movs	r3, #0
 8011b98:	2103      	movs	r1, #3
 8011b9a:	4620      	mov	r0, r4
 8011b9c:	f000 fe9e 	bl	80128dc <uxr_buffer_submessage_header>
 8011ba0:	a901      	add	r1, sp, #4
 8011ba2:	4620      	mov	r0, r4
 8011ba4:	f001 fed0 	bl	8013948 <uxr_serialize_DELETE_Payload>
 8011ba8:	b002      	add	sp, #8
 8011baa:	bd10      	pop	{r4, pc}
 8011bac:	0801b250 	.word	0x0801b250

08011bb0 <uxr_read_create_session_status>:
 8011bb0:	b510      	push	{r4, lr}
 8011bb2:	b088      	sub	sp, #32
 8011bb4:	4604      	mov	r4, r0
 8011bb6:	4608      	mov	r0, r1
 8011bb8:	a901      	add	r1, sp, #4
 8011bba:	f001 fed5 	bl	8013968 <uxr_deserialize_STATUS_AGENT_Payload>
 8011bbe:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011bc2:	7163      	strb	r3, [r4, #5]
 8011bc4:	b008      	add	sp, #32
 8011bc6:	bd10      	pop	{r4, pc}

08011bc8 <uxr_read_delete_session_status>:
 8011bc8:	b510      	push	{r4, lr}
 8011bca:	4604      	mov	r4, r0
 8011bcc:	b084      	sub	sp, #16
 8011bce:	4608      	mov	r0, r1
 8011bd0:	a902      	add	r1, sp, #8
 8011bd2:	f001 fef9 	bl	80139c8 <uxr_deserialize_STATUS_Payload>
 8011bd6:	88e3      	ldrh	r3, [r4, #6]
 8011bd8:	2b02      	cmp	r3, #2
 8011bda:	d001      	beq.n	8011be0 <uxr_read_delete_session_status+0x18>
 8011bdc:	b004      	add	sp, #16
 8011bde:	bd10      	pop	{r4, pc}
 8011be0:	f10d 000a 	add.w	r0, sp, #10
 8011be4:	f7fe fe62 	bl	80108ac <uxr_object_id_from_raw>
 8011be8:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8011bec:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8011bf0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011bf4:	b29b      	uxth	r3, r3
 8011bf6:	2b02      	cmp	r3, #2
 8011bf8:	bf04      	itt	eq
 8011bfa:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 8011bfe:	7163      	strbeq	r3, [r4, #5]
 8011c00:	b004      	add	sp, #16
 8011c02:	bd10      	pop	{r4, pc}

08011c04 <uxr_stamp_create_session_header>:
 8011c04:	b510      	push	{r4, lr}
 8011c06:	2208      	movs	r2, #8
 8011c08:	b08a      	sub	sp, #40	@ 0x28
 8011c0a:	4604      	mov	r4, r0
 8011c0c:	eb0d 0002 	add.w	r0, sp, r2
 8011c10:	f7fa ff3c 	bl	800ca8c <ucdr_init_buffer>
 8011c14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c18:	9400      	str	r4, [sp, #0]
 8011c1a:	2300      	movs	r3, #0
 8011c1c:	461a      	mov	r2, r3
 8011c1e:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8011c22:	a802      	add	r0, sp, #8
 8011c24:	f001 f854 	bl	8012cd0 <uxr_serialize_message_header>
 8011c28:	b00a      	add	sp, #40	@ 0x28
 8011c2a:	bd10      	pop	{r4, pc}

08011c2c <uxr_stamp_session_header>:
 8011c2c:	b530      	push	{r4, r5, lr}
 8011c2e:	b08d      	sub	sp, #52	@ 0x34
 8011c30:	4604      	mov	r4, r0
 8011c32:	460d      	mov	r5, r1
 8011c34:	9203      	str	r2, [sp, #12]
 8011c36:	4619      	mov	r1, r3
 8011c38:	a804      	add	r0, sp, #16
 8011c3a:	2208      	movs	r2, #8
 8011c3c:	f7fa ff26 	bl	800ca8c <ucdr_init_buffer>
 8011c40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c44:	9b03      	ldr	r3, [sp, #12]
 8011c46:	9400      	str	r4, [sp, #0]
 8011c48:	462a      	mov	r2, r5
 8011c4a:	a804      	add	r0, sp, #16
 8011c4c:	f001 f840 	bl	8012cd0 <uxr_serialize_message_header>
 8011c50:	b00d      	add	sp, #52	@ 0x34
 8011c52:	bd30      	pop	{r4, r5, pc}

08011c54 <uxr_read_session_header>:
 8011c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c58:	4607      	mov	r7, r0
 8011c5a:	b084      	sub	sp, #16
 8011c5c:	4608      	mov	r0, r1
 8011c5e:	460c      	mov	r4, r1
 8011c60:	4615      	mov	r5, r2
 8011c62:	461e      	mov	r6, r3
 8011c64:	f7fa ff42 	bl	800caec <ucdr_buffer_remaining>
 8011c68:	2808      	cmp	r0, #8
 8011c6a:	d803      	bhi.n	8011c74 <uxr_read_session_header+0x20>
 8011c6c:	2000      	movs	r0, #0
 8011c6e:	b004      	add	sp, #16
 8011c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c74:	f10d 080c 	add.w	r8, sp, #12
 8011c78:	4633      	mov	r3, r6
 8011c7a:	462a      	mov	r2, r5
 8011c7c:	f8cd 8000 	str.w	r8, [sp]
 8011c80:	4620      	mov	r0, r4
 8011c82:	f10d 010b 	add.w	r1, sp, #11
 8011c86:	f001 f841 	bl	8012d0c <uxr_deserialize_message_header>
 8011c8a:	783a      	ldrb	r2, [r7, #0]
 8011c8c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8011c90:	4293      	cmp	r3, r2
 8011c92:	d1eb      	bne.n	8011c6c <uxr_read_session_header+0x18>
 8011c94:	061b      	lsls	r3, r3, #24
 8011c96:	d41c      	bmi.n	8011cd2 <uxr_read_session_header+0x7e>
 8011c98:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8011c9c:	787b      	ldrb	r3, [r7, #1]
 8011c9e:	429a      	cmp	r2, r3
 8011ca0:	d003      	beq.n	8011caa <uxr_read_session_header+0x56>
 8011ca2:	2001      	movs	r0, #1
 8011ca4:	f080 0001 	eor.w	r0, r0, #1
 8011ca8:	e7e1      	b.n	8011c6e <uxr_read_session_header+0x1a>
 8011caa:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8011cae:	78bb      	ldrb	r3, [r7, #2]
 8011cb0:	429a      	cmp	r2, r3
 8011cb2:	f107 0102 	add.w	r1, r7, #2
 8011cb6:	d1f4      	bne.n	8011ca2 <uxr_read_session_header+0x4e>
 8011cb8:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8011cbc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011cc0:	429a      	cmp	r2, r3
 8011cc2:	d1ee      	bne.n	8011ca2 <uxr_read_session_header+0x4e>
 8011cc4:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8011cc8:	784b      	ldrb	r3, [r1, #1]
 8011cca:	429a      	cmp	r2, r3
 8011ccc:	d1e9      	bne.n	8011ca2 <uxr_read_session_header+0x4e>
 8011cce:	2000      	movs	r0, #0
 8011cd0:	e7e8      	b.n	8011ca4 <uxr_read_session_header+0x50>
 8011cd2:	2001      	movs	r0, #1
 8011cd4:	e7cb      	b.n	8011c6e <uxr_read_session_header+0x1a>
 8011cd6:	bf00      	nop

08011cd8 <uxr_session_header_offset>:
 8011cd8:	f990 3000 	ldrsb.w	r3, [r0]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	bfac      	ite	ge
 8011ce0:	2008      	movge	r0, #8
 8011ce2:	2004      	movlt	r0, #4
 8011ce4:	4770      	bx	lr
 8011ce6:	bf00      	nop

08011ce8 <uxr_init_base_object_request>:
 8011ce8:	b510      	push	{r4, lr}
 8011cea:	88c3      	ldrh	r3, [r0, #6]
 8011cec:	b082      	sub	sp, #8
 8011cee:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8011cf2:	9101      	str	r1, [sp, #4]
 8011cf4:	f1a3 010a 	sub.w	r1, r3, #10
 8011cf8:	b289      	uxth	r1, r1
 8011cfa:	42a1      	cmp	r1, r4
 8011cfc:	d80e      	bhi.n	8011d1c <uxr_init_base_object_request+0x34>
 8011cfe:	3301      	adds	r3, #1
 8011d00:	b29c      	uxth	r4, r3
 8011d02:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8011d06:	b2db      	uxtb	r3, r3
 8011d08:	80c4      	strh	r4, [r0, #6]
 8011d0a:	9801      	ldr	r0, [sp, #4]
 8011d0c:	7011      	strb	r1, [r2, #0]
 8011d0e:	7053      	strb	r3, [r2, #1]
 8011d10:	1c91      	adds	r1, r2, #2
 8011d12:	f7fe fddf 	bl	80108d4 <uxr_object_id_to_raw>
 8011d16:	4620      	mov	r0, r4
 8011d18:	b002      	add	sp, #8
 8011d1a:	bd10      	pop	{r4, pc}
 8011d1c:	230a      	movs	r3, #10
 8011d1e:	2100      	movs	r1, #0
 8011d20:	461c      	mov	r4, r3
 8011d22:	e7f1      	b.n	8011d08 <uxr_init_base_object_request+0x20>

08011d24 <uxr_parse_base_object_request>:
 8011d24:	b570      	push	{r4, r5, r6, lr}
 8011d26:	4604      	mov	r4, r0
 8011d28:	3002      	adds	r0, #2
 8011d2a:	460d      	mov	r5, r1
 8011d2c:	4616      	mov	r6, r2
 8011d2e:	f7fe fdbd 	bl	80108ac <uxr_object_id_from_raw>
 8011d32:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8011d36:	8028      	strh	r0, [r5, #0]
 8011d38:	806b      	strh	r3, [r5, #2]
 8011d3a:	7822      	ldrb	r2, [r4, #0]
 8011d3c:	7863      	ldrb	r3, [r4, #1]
 8011d3e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011d42:	8033      	strh	r3, [r6, #0]
 8011d44:	bd70      	pop	{r4, r5, r6, pc}
 8011d46:	bf00      	nop

08011d48 <uxr_init_framing_io>:
 8011d48:	2300      	movs	r3, #0
 8011d4a:	7041      	strb	r1, [r0, #1]
 8011d4c:	7003      	strb	r3, [r0, #0]
 8011d4e:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8011d50:	4770      	bx	lr
 8011d52:	bf00      	nop

08011d54 <uxr_write_framed_msg>:
 8011d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d58:	4617      	mov	r7, r2
 8011d5a:	7842      	ldrb	r2, [r0, #1]
 8011d5c:	b083      	sub	sp, #12
 8011d5e:	460e      	mov	r6, r1
 8011d60:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8011d64:	469a      	mov	sl, r3
 8011d66:	2901      	cmp	r1, #1
 8011d68:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 8011d6c:	4604      	mov	r4, r0
 8011d6e:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8011d72:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8011d76:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8011d7a:	f240 8137 	bls.w	8011fec <uxr_write_framed_msg+0x298>
 8011d7e:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8011d82:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8011d86:	2901      	cmp	r1, #1
 8011d88:	f04f 0202 	mov.w	r2, #2
 8011d8c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011d90:	f240 808f 	bls.w	8011eb2 <uxr_write_framed_msg+0x15e>
 8011d94:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011d96:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8011d9a:	b2dd      	uxtb	r5, r3
 8011d9c:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8011da0:	2203      	movs	r2, #3
 8011da2:	2901      	cmp	r1, #1
 8011da4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011da8:	f240 809a 	bls.w	8011ee0 <uxr_write_framed_msg+0x18c>
 8011dac:	18a1      	adds	r1, r4, r2
 8011dae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011db0:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 8011db4:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8011db8:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8011dbc:	3201      	adds	r2, #1
 8011dbe:	2801      	cmp	r0, #1
 8011dc0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011dc4:	f240 80a0 	bls.w	8011f08 <uxr_write_framed_msg+0x1b4>
 8011dc8:	18a0      	adds	r0, r4, r2
 8011dca:	3201      	adds	r2, #1
 8011dcc:	b2d2      	uxtb	r2, r2
 8011dce:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8011dd2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	f000 80a9 	beq.w	8011f2e <uxr_write_framed_msg+0x1da>
 8011ddc:	f04f 0900 	mov.w	r9, #0
 8011de0:	46c8      	mov	r8, r9
 8011de2:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8011de6:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8011dea:	2901      	cmp	r1, #1
 8011dec:	f240 80c3 	bls.w	8011f76 <uxr_write_framed_msg+0x222>
 8011df0:	2a29      	cmp	r2, #41	@ 0x29
 8011df2:	f200 809f 	bhi.w	8011f34 <uxr_write_framed_msg+0x1e0>
 8011df6:	18a1      	adds	r1, r4, r2
 8011df8:	3201      	adds	r2, #1
 8011dfa:	b2d2      	uxtb	r2, r2
 8011dfc:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8011e00:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011e04:	ea89 0303 	eor.w	r3, r9, r3
 8011e08:	498c      	ldr	r1, [pc, #560]	@ (801203c <uxr_write_framed_msg+0x2e8>)
 8011e0a:	b2db      	uxtb	r3, r3
 8011e0c:	f108 0801 	add.w	r8, r8, #1
 8011e10:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011e14:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8011e18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011e1a:	4543      	cmp	r3, r8
 8011e1c:	d8e1      	bhi.n	8011de2 <uxr_write_framed_msg+0x8e>
 8011e1e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8011e22:	fa5f f889 	uxtb.w	r8, r9
 8011e26:	9301      	str	r3, [sp, #4]
 8011e28:	f04f 0900 	mov.w	r9, #0
 8011e2c:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 8011e30:	fa5f f18a 	uxtb.w	r1, sl
 8011e34:	2901      	cmp	r1, #1
 8011e36:	d921      	bls.n	8011e7c <uxr_write_framed_msg+0x128>
 8011e38:	2a29      	cmp	r2, #41	@ 0x29
 8011e3a:	f240 80af 	bls.w	8011f9c <uxr_write_framed_msg+0x248>
 8011e3e:	2500      	movs	r5, #0
 8011e40:	e000      	b.n	8011e44 <uxr_write_framed_msg+0xf0>
 8011e42:	b160      	cbz	r0, 8011e5e <uxr_write_framed_msg+0x10a>
 8011e44:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8011e48:	1b52      	subs	r2, r2, r5
 8011e4a:	465b      	mov	r3, fp
 8011e4c:	4421      	add	r1, r4
 8011e4e:	4638      	mov	r0, r7
 8011e50:	47b0      	blx	r6
 8011e52:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8011e56:	4405      	add	r5, r0
 8011e58:	4295      	cmp	r5, r2
 8011e5a:	d3f2      	bcc.n	8011e42 <uxr_write_framed_msg+0xee>
 8011e5c:	d003      	beq.n	8011e66 <uxr_write_framed_msg+0x112>
 8011e5e:	2000      	movs	r0, #0
 8011e60:	b003      	add	sp, #12
 8011e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e66:	fa5f f18a 	uxtb.w	r1, sl
 8011e6a:	f04f 0300 	mov.w	r3, #0
 8011e6e:	2901      	cmp	r1, #1
 8011e70:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8011e74:	f04f 0200 	mov.w	r2, #0
 8011e78:	f200 8090 	bhi.w	8011f9c <uxr_write_framed_msg+0x248>
 8011e7c:	1c51      	adds	r1, r2, #1
 8011e7e:	b2c9      	uxtb	r1, r1
 8011e80:	2929      	cmp	r1, #41	@ 0x29
 8011e82:	d8dc      	bhi.n	8011e3e <uxr_write_framed_msg+0xea>
 8011e84:	18a5      	adds	r5, r4, r2
 8011e86:	4421      	add	r1, r4
 8011e88:	3202      	adds	r2, #2
 8011e8a:	f088 0820 	eor.w	r8, r8, #32
 8011e8e:	4648      	mov	r0, r9
 8011e90:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8011e94:	b2d2      	uxtb	r2, r2
 8011e96:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 8011e9a:	f04f 0901 	mov.w	r9, #1
 8011e9e:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8011ea2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011ea6:	2800      	cmp	r0, #0
 8011ea8:	f040 8085 	bne.w	8011fb6 <uxr_write_framed_msg+0x262>
 8011eac:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011eb0:	e7bc      	b.n	8011e2c <uxr_write_framed_msg+0xd8>
 8011eb2:	4611      	mov	r1, r2
 8011eb4:	f04f 0c03 	mov.w	ip, #3
 8011eb8:	2204      	movs	r2, #4
 8011eba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011ebc:	4421      	add	r1, r4
 8011ebe:	b2dd      	uxtb	r5, r3
 8011ec0:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8011ec4:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 8011ec8:	44a4      	add	ip, r4
 8011eca:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8011ece:	f080 0020 	eor.w	r0, r0, #32
 8011ed2:	2901      	cmp	r1, #1
 8011ed4:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8011ed8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011edc:	f63f af66 	bhi.w	8011dac <uxr_write_framed_msg+0x58>
 8011ee0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011ee2:	18a0      	adds	r0, r4, r2
 8011ee4:	f085 0520 	eor.w	r5, r5, #32
 8011ee8:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8011eec:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8011ef0:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 8011ef4:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8011ef8:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8011efc:	3202      	adds	r2, #2
 8011efe:	2801      	cmp	r0, #1
 8011f00:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011f04:	f63f af60 	bhi.w	8011dc8 <uxr_write_framed_msg+0x74>
 8011f08:	1c50      	adds	r0, r2, #1
 8011f0a:	18a5      	adds	r5, r4, r2
 8011f0c:	fa54 f080 	uxtab	r0, r4, r0
 8011f10:	3202      	adds	r2, #2
 8011f12:	f081 0120 	eor.w	r1, r1, #32
 8011f16:	b2d2      	uxtb	r2, r2
 8011f18:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8011f1c:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8011f20:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8011f24:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	f47f af57 	bne.w	8011ddc <uxr_write_framed_msg+0x88>
 8011f2e:	9301      	str	r3, [sp, #4]
 8011f30:	4698      	mov	r8, r3
 8011f32:	e779      	b.n	8011e28 <uxr_write_framed_msg+0xd4>
 8011f34:	2500      	movs	r5, #0
 8011f36:	e001      	b.n	8011f3c <uxr_write_framed_msg+0x1e8>
 8011f38:	2800      	cmp	r0, #0
 8011f3a:	d090      	beq.n	8011e5e <uxr_write_framed_msg+0x10a>
 8011f3c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8011f40:	1b52      	subs	r2, r2, r5
 8011f42:	465b      	mov	r3, fp
 8011f44:	4421      	add	r1, r4
 8011f46:	4638      	mov	r0, r7
 8011f48:	47b0      	blx	r6
 8011f4a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8011f4e:	4405      	add	r5, r0
 8011f50:	4295      	cmp	r5, r2
 8011f52:	d3f1      	bcc.n	8011f38 <uxr_write_framed_msg+0x1e4>
 8011f54:	d183      	bne.n	8011e5e <uxr_write_framed_msg+0x10a>
 8011f56:	f04f 0300 	mov.w	r3, #0
 8011f5a:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8011f5e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011f60:	4543      	cmp	r3, r8
 8011f62:	d964      	bls.n	801202e <uxr_write_framed_msg+0x2da>
 8011f64:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8011f68:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8011f6c:	2901      	cmp	r1, #1
 8011f6e:	f04f 0200 	mov.w	r2, #0
 8011f72:	f63f af3d 	bhi.w	8011df0 <uxr_write_framed_msg+0x9c>
 8011f76:	1c51      	adds	r1, r2, #1
 8011f78:	b2c9      	uxtb	r1, r1
 8011f7a:	2929      	cmp	r1, #41	@ 0x29
 8011f7c:	d8da      	bhi.n	8011f34 <uxr_write_framed_msg+0x1e0>
 8011f7e:	18a0      	adds	r0, r4, r2
 8011f80:	4421      	add	r1, r4
 8011f82:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 8011f86:	3202      	adds	r2, #2
 8011f88:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 8011f8c:	b2d2      	uxtb	r2, r2
 8011f8e:	f083 0020 	eor.w	r0, r3, #32
 8011f92:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8011f96:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011f9a:	e733      	b.n	8011e04 <uxr_write_framed_msg+0xb0>
 8011f9c:	18a1      	adds	r1, r4, r2
 8011f9e:	3201      	adds	r2, #1
 8011fa0:	4648      	mov	r0, r9
 8011fa2:	b2d2      	uxtb	r2, r2
 8011fa4:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8011fa8:	f04f 0901 	mov.w	r9, #1
 8011fac:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011fb0:	2800      	cmp	r0, #0
 8011fb2:	f43f af7b 	beq.w	8011eac <uxr_write_framed_msg+0x158>
 8011fb6:	2500      	movs	r5, #0
 8011fb8:	e002      	b.n	8011fc0 <uxr_write_framed_msg+0x26c>
 8011fba:	2800      	cmp	r0, #0
 8011fbc:	f43f af4f 	beq.w	8011e5e <uxr_write_framed_msg+0x10a>
 8011fc0:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8011fc4:	1b52      	subs	r2, r2, r5
 8011fc6:	465b      	mov	r3, fp
 8011fc8:	4421      	add	r1, r4
 8011fca:	4638      	mov	r0, r7
 8011fcc:	47b0      	blx	r6
 8011fce:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8011fd2:	4405      	add	r5, r0
 8011fd4:	4295      	cmp	r5, r2
 8011fd6:	d3f0      	bcc.n	8011fba <uxr_write_framed_msg+0x266>
 8011fd8:	f47f af41 	bne.w	8011e5e <uxr_write_framed_msg+0x10a>
 8011fdc:	2300      	movs	r3, #0
 8011fde:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8011fe2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011fe4:	b298      	uxth	r0, r3
 8011fe6:	b003      	add	sp, #12
 8011fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fec:	217d      	movs	r1, #125	@ 0x7d
 8011fee:	f082 0220 	eor.w	r2, r2, #32
 8011ff2:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8011ff6:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8011ffa:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8011ffe:	2901      	cmp	r1, #1
 8012000:	f04f 0203 	mov.w	r2, #3
 8012004:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012008:	d804      	bhi.n	8012014 <uxr_write_framed_msg+0x2c0>
 801200a:	4611      	mov	r1, r2
 801200c:	f04f 0c04 	mov.w	ip, #4
 8012010:	2205      	movs	r2, #5
 8012012:	e752      	b.n	8011eba <uxr_write_framed_msg+0x166>
 8012014:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012016:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 801201a:	b2dd      	uxtb	r5, r3
 801201c:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8012020:	2204      	movs	r2, #4
 8012022:	2901      	cmp	r1, #1
 8012024:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012028:	f63f aec0 	bhi.w	8011dac <uxr_write_framed_msg+0x58>
 801202c:	e758      	b.n	8011ee0 <uxr_write_framed_msg+0x18c>
 801202e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8012032:	fa5f f889 	uxtb.w	r8, r9
 8012036:	9301      	str	r3, [sp, #4]
 8012038:	2200      	movs	r2, #0
 801203a:	e6f5      	b.n	8011e28 <uxr_write_framed_msg+0xd4>
 801203c:	0801c09c 	.word	0x0801c09c

08012040 <uxr_framing_read_transport>:
 8012040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012044:	4604      	mov	r4, r0
 8012046:	b083      	sub	sp, #12
 8012048:	461f      	mov	r7, r3
 801204a:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 801204e:	4689      	mov	r9, r1
 8012050:	4692      	mov	sl, r2
 8012052:	f000 fc89 	bl	8012968 <uxr_millis>
 8012056:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801205a:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 801205e:	42b3      	cmp	r3, r6
 8012060:	4680      	mov	r8, r0
 8012062:	d061      	beq.n	8012128 <uxr_framing_read_transport+0xe8>
 8012064:	d81c      	bhi.n	80120a0 <uxr_framing_read_transport+0x60>
 8012066:	1e75      	subs	r5, r6, #1
 8012068:	1aed      	subs	r5, r5, r3
 801206a:	b2ed      	uxtb	r5, r5
 801206c:	2600      	movs	r6, #0
 801206e:	455d      	cmp	r5, fp
 8012070:	d81f      	bhi.n	80120b2 <uxr_framing_read_transport+0x72>
 8012072:	19ab      	adds	r3, r5, r6
 8012074:	455b      	cmp	r3, fp
 8012076:	bf84      	itt	hi
 8012078:	ebab 0605 	subhi.w	r6, fp, r5
 801207c:	b2f6      	uxtbhi	r6, r6
 801207e:	b9ed      	cbnz	r5, 80120bc <uxr_framing_read_transport+0x7c>
 8012080:	f04f 0b00 	mov.w	fp, #0
 8012084:	f000 fc70 	bl	8012968 <uxr_millis>
 8012088:	683b      	ldr	r3, [r7, #0]
 801208a:	eba0 0808 	sub.w	r8, r0, r8
 801208e:	eba3 0308 	sub.w	r3, r3, r8
 8012092:	4658      	mov	r0, fp
 8012094:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012098:	603b      	str	r3, [r7, #0]
 801209a:	b003      	add	sp, #12
 801209c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120a0:	2e00      	cmp	r6, #0
 80120a2:	d049      	beq.n	8012138 <uxr_framing_read_transport+0xf8>
 80120a4:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 80120a8:	b2ed      	uxtb	r5, r5
 80120aa:	3e01      	subs	r6, #1
 80120ac:	455d      	cmp	r5, fp
 80120ae:	b2f6      	uxtb	r6, r6
 80120b0:	d9df      	bls.n	8012072 <uxr_framing_read_transport+0x32>
 80120b2:	fa5f f58b 	uxtb.w	r5, fp
 80120b6:	2600      	movs	r6, #0
 80120b8:	2d00      	cmp	r5, #0
 80120ba:	d0e1      	beq.n	8012080 <uxr_framing_read_transport+0x40>
 80120bc:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80120c0:	3102      	adds	r1, #2
 80120c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80120c4:	9300      	str	r3, [sp, #0]
 80120c6:	683b      	ldr	r3, [r7, #0]
 80120c8:	4421      	add	r1, r4
 80120ca:	462a      	mov	r2, r5
 80120cc:	4650      	mov	r0, sl
 80120ce:	47c8      	blx	r9
 80120d0:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80120d4:	4a1a      	ldr	r2, [pc, #104]	@ (8012140 <uxr_framing_read_transport+0x100>)
 80120d6:	4403      	add	r3, r0
 80120d8:	0859      	lsrs	r1, r3, #1
 80120da:	fba2 2101 	umull	r2, r1, r2, r1
 80120de:	0889      	lsrs	r1, r1, #2
 80120e0:	222a      	movs	r2, #42	@ 0x2a
 80120e2:	fb02 3111 	mls	r1, r2, r1, r3
 80120e6:	4683      	mov	fp, r0
 80120e8:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 80120ec:	2800      	cmp	r0, #0
 80120ee:	d0c7      	beq.n	8012080 <uxr_framing_read_transport+0x40>
 80120f0:	42a8      	cmp	r0, r5
 80120f2:	d1c7      	bne.n	8012084 <uxr_framing_read_transport+0x44>
 80120f4:	2e00      	cmp	r6, #0
 80120f6:	d0c5      	beq.n	8012084 <uxr_framing_read_transport+0x44>
 80120f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80120fa:	9300      	str	r3, [sp, #0]
 80120fc:	3102      	adds	r1, #2
 80120fe:	4632      	mov	r2, r6
 8012100:	4421      	add	r1, r4
 8012102:	2300      	movs	r3, #0
 8012104:	4650      	mov	r0, sl
 8012106:	47c8      	blx	r9
 8012108:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801210c:	4a0c      	ldr	r2, [pc, #48]	@ (8012140 <uxr_framing_read_transport+0x100>)
 801210e:	180b      	adds	r3, r1, r0
 8012110:	0859      	lsrs	r1, r3, #1
 8012112:	fba2 1201 	umull	r1, r2, r2, r1
 8012116:	0892      	lsrs	r2, r2, #2
 8012118:	212a      	movs	r1, #42	@ 0x2a
 801211a:	fb01 3312 	mls	r3, r1, r2, r3
 801211e:	eb00 0b05 	add.w	fp, r0, r5
 8012122:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8012126:	e7ad      	b.n	8012084 <uxr_framing_read_transport+0x44>
 8012128:	2600      	movs	r6, #0
 801212a:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 801212e:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 8012130:	d9bf      	bls.n	80120b2 <uxr_framing_read_transport+0x72>
 8012132:	2102      	movs	r1, #2
 8012134:	2529      	movs	r5, #41	@ 0x29
 8012136:	e7c4      	b.n	80120c2 <uxr_framing_read_transport+0x82>
 8012138:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 801213c:	b2ed      	uxtb	r5, r5
 801213e:	e796      	b.n	801206e <uxr_framing_read_transport+0x2e>
 8012140:	30c30c31 	.word	0x30c30c31

08012144 <uxr_read_framed_msg>:
 8012144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012148:	461e      	mov	r6, r3
 801214a:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 801214e:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8012152:	429d      	cmp	r5, r3
 8012154:	b083      	sub	sp, #12
 8012156:	4604      	mov	r4, r0
 8012158:	4688      	mov	r8, r1
 801215a:	4691      	mov	r9, r2
 801215c:	f000 8188 	beq.w	8012470 <uxr_read_framed_msg+0x32c>
 8012160:	7823      	ldrb	r3, [r4, #0]
 8012162:	4dc1      	ldr	r5, [pc, #772]	@ (8012468 <uxr_read_framed_msg+0x324>)
 8012164:	4fc1      	ldr	r7, [pc, #772]	@ (801246c <uxr_read_framed_msg+0x328>)
 8012166:	2b07      	cmp	r3, #7
 8012168:	d8fd      	bhi.n	8012166 <uxr_read_framed_msg+0x22>
 801216a:	e8df f013 	tbh	[pc, r3, lsl #1]
 801216e:	0115      	.short	0x0115
 8012170:	00d600f6 	.word	0x00d600f6
 8012174:	009000b9 	.word	0x009000b9
 8012178:	0030004d 	.word	0x0030004d
 801217c:	0008      	.short	0x0008
 801217e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012182:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012186:	4299      	cmp	r1, r3
 8012188:	f000 814a 	beq.w	8012420 <uxr_read_framed_msg+0x2dc>
 801218c:	18e2      	adds	r2, r4, r3
 801218e:	7892      	ldrb	r2, [r2, #2]
 8012190:	2a7d      	cmp	r2, #125	@ 0x7d
 8012192:	f000 8199 	beq.w	80124c8 <uxr_read_framed_msg+0x384>
 8012196:	3301      	adds	r3, #1
 8012198:	0858      	lsrs	r0, r3, #1
 801219a:	fba5 1000 	umull	r1, r0, r5, r0
 801219e:	0880      	lsrs	r0, r0, #2
 80121a0:	212a      	movs	r1, #42	@ 0x2a
 80121a2:	fb01 3310 	mls	r3, r1, r0, r3
 80121a6:	2a7e      	cmp	r2, #126	@ 0x7e
 80121a8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80121ac:	f000 8252 	beq.w	8012654 <uxr_read_framed_msg+0x510>
 80121b0:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 80121b2:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 80121b4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80121b8:	b29b      	uxth	r3, r3
 80121ba:	2200      	movs	r2, #0
 80121bc:	4299      	cmp	r1, r3
 80121be:	86a3      	strh	r3, [r4, #52]	@ 0x34
 80121c0:	7022      	strb	r2, [r4, #0]
 80121c2:	f000 8179 	beq.w	80124b8 <uxr_read_framed_msg+0x374>
 80121c6:	2000      	movs	r0, #0
 80121c8:	b003      	add	sp, #12
 80121ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121ce:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80121d2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80121d6:	4299      	cmp	r1, r3
 80121d8:	f000 8131 	beq.w	801243e <uxr_read_framed_msg+0x2fa>
 80121dc:	18e2      	adds	r2, r4, r3
 80121de:	7890      	ldrb	r0, [r2, #2]
 80121e0:	287d      	cmp	r0, #125	@ 0x7d
 80121e2:	f000 8190 	beq.w	8012506 <uxr_read_framed_msg+0x3c2>
 80121e6:	3301      	adds	r3, #1
 80121e8:	085a      	lsrs	r2, r3, #1
 80121ea:	fba5 1202 	umull	r1, r2, r5, r2
 80121ee:	0892      	lsrs	r2, r2, #2
 80121f0:	212a      	movs	r1, #42	@ 0x2a
 80121f2:	fb01 3312 	mls	r3, r1, r2, r3
 80121f6:	287e      	cmp	r0, #126	@ 0x7e
 80121f8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80121fc:	f000 821a 	beq.w	8012634 <uxr_read_framed_msg+0x4f0>
 8012200:	2307      	movs	r3, #7
 8012202:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8012204:	7023      	strb	r3, [r4, #0]
 8012206:	e7ae      	b.n	8012166 <uxr_read_framed_msg+0x22>
 8012208:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801220a:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801220e:	459e      	cmp	lr, r3
 8012210:	d938      	bls.n	8012284 <uxr_read_framed_msg+0x140>
 8012212:	ee07 8a90 	vmov	s15, r8
 8012216:	212a      	movs	r1, #42	@ 0x2a
 8012218:	e020      	b.n	801225c <uxr_read_framed_msg+0x118>
 801221a:	f89b c002 	ldrb.w	ip, [fp, #2]
 801221e:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8012222:	f000 80d4 	beq.w	80123ce <uxr_read_framed_msg+0x28a>
 8012226:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 801222a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801222e:	f000 8219 	beq.w	8012664 <uxr_read_framed_msg+0x520>
 8012232:	f806 c003 	strb.w	ip, [r6, r3]
 8012236:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 801223a:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801223c:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8012240:	ea8a 000c 	eor.w	r0, sl, ip
 8012244:	b2c0      	uxtb	r0, r0
 8012246:	3301      	adds	r3, #1
 8012248:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 801224c:	b29b      	uxth	r3, r3
 801224e:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 8012252:	4573      	cmp	r3, lr
 8012254:	8663      	strh	r3, [r4, #50]	@ 0x32
 8012256:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8012258:	f080 8120 	bcs.w	801249c <uxr_read_framed_msg+0x358>
 801225c:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 8012260:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8012264:	f100 0c01 	add.w	ip, r0, #1
 8012268:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801226c:	fba5 8202 	umull	r8, r2, r5, r2
 8012270:	0892      	lsrs	r2, r2, #2
 8012272:	4582      	cmp	sl, r0
 8012274:	eb04 0b00 	add.w	fp, r4, r0
 8012278:	fb01 c212 	mls	r2, r1, r2, ip
 801227c:	d1cd      	bne.n	801221a <uxr_read_framed_msg+0xd6>
 801227e:	ee17 8a90 	vmov	r8, s15
 8012282:	459e      	cmp	lr, r3
 8012284:	f040 8111 	bne.w	80124aa <uxr_read_framed_msg+0x366>
 8012288:	2306      	movs	r3, #6
 801228a:	7023      	strb	r3, [r4, #0]
 801228c:	e76b      	b.n	8012166 <uxr_read_framed_msg+0x22>
 801228e:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8012292:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012296:	4298      	cmp	r0, r3
 8012298:	f000 80c2 	beq.w	8012420 <uxr_read_framed_msg+0x2dc>
 801229c:	18e2      	adds	r2, r4, r3
 801229e:	7891      	ldrb	r1, [r2, #2]
 80122a0:	297d      	cmp	r1, #125	@ 0x7d
 80122a2:	f000 814c 	beq.w	801253e <uxr_read_framed_msg+0x3fa>
 80122a6:	3301      	adds	r3, #1
 80122a8:	085a      	lsrs	r2, r3, #1
 80122aa:	fba5 0202 	umull	r0, r2, r5, r2
 80122ae:	0892      	lsrs	r2, r2, #2
 80122b0:	202a      	movs	r0, #42	@ 0x2a
 80122b2:	fb00 3312 	mls	r3, r0, r2, r3
 80122b6:	297e      	cmp	r1, #126	@ 0x7e
 80122b8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80122bc:	f000 81ca 	beq.w	8012654 <uxr_read_framed_msg+0x510>
 80122c0:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 80122c2:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80122c6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80122c8:	b29b      	uxth	r3, r3
 80122ca:	2000      	movs	r0, #0
 80122cc:	428b      	cmp	r3, r1
 80122ce:	8623      	strh	r3, [r4, #48]	@ 0x30
 80122d0:	8660      	strh	r0, [r4, #50]	@ 0x32
 80122d2:	86e0      	strh	r0, [r4, #54]	@ 0x36
 80122d4:	f240 80df 	bls.w	8012496 <uxr_read_framed_msg+0x352>
 80122d8:	7020      	strb	r0, [r4, #0]
 80122da:	b003      	add	sp, #12
 80122dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122e0:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80122e4:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80122e8:	4299      	cmp	r1, r3
 80122ea:	f000 80a8 	beq.w	801243e <uxr_read_framed_msg+0x2fa>
 80122ee:	18e2      	adds	r2, r4, r3
 80122f0:	7890      	ldrb	r0, [r2, #2]
 80122f2:	287d      	cmp	r0, #125	@ 0x7d
 80122f4:	f000 8164 	beq.w	80125c0 <uxr_read_framed_msg+0x47c>
 80122f8:	3301      	adds	r3, #1
 80122fa:	085a      	lsrs	r2, r3, #1
 80122fc:	fba5 1202 	umull	r1, r2, r5, r2
 8012300:	0892      	lsrs	r2, r2, #2
 8012302:	212a      	movs	r1, #42	@ 0x2a
 8012304:	fb01 3312 	mls	r3, r1, r2, r3
 8012308:	287e      	cmp	r0, #126	@ 0x7e
 801230a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801230e:	f000 8191 	beq.w	8012634 <uxr_read_framed_msg+0x4f0>
 8012312:	2304      	movs	r3, #4
 8012314:	8620      	strh	r0, [r4, #48]	@ 0x30
 8012316:	7023      	strb	r3, [r4, #0]
 8012318:	e725      	b.n	8012166 <uxr_read_framed_msg+0x22>
 801231a:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801231e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8012322:	4290      	cmp	r0, r2
 8012324:	f000 80b3 	beq.w	801248e <uxr_read_framed_msg+0x34a>
 8012328:	18a3      	adds	r3, r4, r2
 801232a:	7899      	ldrb	r1, [r3, #2]
 801232c:	297d      	cmp	r1, #125	@ 0x7d
 801232e:	f000 8164 	beq.w	80125fa <uxr_read_framed_msg+0x4b6>
 8012332:	3201      	adds	r2, #1
 8012334:	0850      	lsrs	r0, r2, #1
 8012336:	fba5 3000 	umull	r3, r0, r5, r0
 801233a:	0880      	lsrs	r0, r0, #2
 801233c:	232a      	movs	r3, #42	@ 0x2a
 801233e:	fb03 2210 	mls	r2, r3, r0, r2
 8012342:	297e      	cmp	r1, #126	@ 0x7e
 8012344:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012348:	f000 8188 	beq.w	801265c <uxr_read_framed_msg+0x518>
 801234c:	7863      	ldrb	r3, [r4, #1]
 801234e:	428b      	cmp	r3, r1
 8012350:	bf0c      	ite	eq
 8012352:	2303      	moveq	r3, #3
 8012354:	2300      	movne	r3, #0
 8012356:	7023      	strb	r3, [r4, #0]
 8012358:	e705      	b.n	8012166 <uxr_read_framed_msg+0x22>
 801235a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801235e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012362:	2200      	movs	r2, #0
 8012364:	4299      	cmp	r1, r3
 8012366:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 801236a:	d06c      	beq.n	8012446 <uxr_read_framed_msg+0x302>
 801236c:	18e2      	adds	r2, r4, r3
 801236e:	7890      	ldrb	r0, [r2, #2]
 8012370:	287d      	cmp	r0, #125	@ 0x7d
 8012372:	f000 8101 	beq.w	8012578 <uxr_read_framed_msg+0x434>
 8012376:	3301      	adds	r3, #1
 8012378:	085a      	lsrs	r2, r3, #1
 801237a:	fba5 1202 	umull	r1, r2, r5, r2
 801237e:	0892      	lsrs	r2, r2, #2
 8012380:	212a      	movs	r1, #42	@ 0x2a
 8012382:	fb01 3312 	mls	r3, r1, r2, r3
 8012386:	287e      	cmp	r0, #126	@ 0x7e
 8012388:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 801238c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012390:	d059      	beq.n	8012446 <uxr_read_framed_msg+0x302>
 8012392:	2302      	movs	r3, #2
 8012394:	7023      	strb	r3, [r4, #0]
 8012396:	e6e6      	b.n	8012166 <uxr_read_framed_msg+0x22>
 8012398:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 801239c:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80123a0:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 80123a4:	1c51      	adds	r1, r2, #1
 80123a6:	084b      	lsrs	r3, r1, #1
 80123a8:	fba5 c303 	umull	ip, r3, r5, r3
 80123ac:	089b      	lsrs	r3, r3, #2
 80123ae:	fb0e 1313 	mls	r3, lr, r3, r1
 80123b2:	4592      	cmp	sl, r2
 80123b4:	eb04 0002 	add.w	r0, r4, r2
 80123b8:	b2da      	uxtb	r2, r3
 80123ba:	f43f af04 	beq.w	80121c6 <uxr_read_framed_msg+0x82>
 80123be:	7883      	ldrb	r3, [r0, #2]
 80123c0:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80123c4:	2b7e      	cmp	r3, #126	@ 0x7e
 80123c6:	d1ed      	bne.n	80123a4 <uxr_read_framed_msg+0x260>
 80123c8:	2301      	movs	r3, #1
 80123ca:	7023      	strb	r3, [r4, #0]
 80123cc:	e6cb      	b.n	8012166 <uxr_read_framed_msg+0x22>
 80123ce:	f100 0c01 	add.w	ip, r0, #1
 80123d2:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80123d6:	fba5 8202 	umull	r8, r2, r5, r2
 80123da:	0892      	lsrs	r2, r2, #2
 80123dc:	fb01 c212 	mls	r2, r1, r2, ip
 80123e0:	eb04 0c02 	add.w	ip, r4, r2
 80123e4:	b2d2      	uxtb	r2, r2
 80123e6:	4592      	cmp	sl, r2
 80123e8:	f100 0002 	add.w	r0, r0, #2
 80123ec:	f43f af47 	beq.w	801227e <uxr_read_framed_msg+0x13a>
 80123f0:	0842      	lsrs	r2, r0, #1
 80123f2:	f89c a002 	ldrb.w	sl, [ip, #2]
 80123f6:	fba5 8202 	umull	r8, r2, r5, r2
 80123fa:	0892      	lsrs	r2, r2, #2
 80123fc:	fb01 0012 	mls	r0, r1, r2, r0
 8012400:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 8012404:	f08a 0c20 	eor.w	ip, sl, #32
 8012408:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 801240c:	f47f af11 	bne.w	8012232 <uxr_read_framed_msg+0xee>
 8012410:	459e      	cmp	lr, r3
 8012412:	ee17 8a90 	vmov	r8, s15
 8012416:	f43f af37 	beq.w	8012288 <uxr_read_framed_msg+0x144>
 801241a:	2301      	movs	r3, #1
 801241c:	7023      	strb	r3, [r4, #0]
 801241e:	e6a2      	b.n	8012166 <uxr_read_framed_msg+0x22>
 8012420:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012422:	9300      	str	r3, [sp, #0]
 8012424:	2301      	movs	r3, #1
 8012426:	9301      	str	r3, [sp, #4]
 8012428:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801242a:	464a      	mov	r2, r9
 801242c:	4641      	mov	r1, r8
 801242e:	4620      	mov	r0, r4
 8012430:	f7ff fe06 	bl	8012040 <uxr_framing_read_transport>
 8012434:	2800      	cmp	r0, #0
 8012436:	f43f aec6 	beq.w	80121c6 <uxr_read_framed_msg+0x82>
 801243a:	7823      	ldrb	r3, [r4, #0]
 801243c:	e693      	b.n	8012166 <uxr_read_framed_msg+0x22>
 801243e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012440:	9300      	str	r3, [sp, #0]
 8012442:	2302      	movs	r3, #2
 8012444:	e7ef      	b.n	8012426 <uxr_read_framed_msg+0x2e2>
 8012446:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012448:	9300      	str	r3, [sp, #0]
 801244a:	2304      	movs	r3, #4
 801244c:	9301      	str	r3, [sp, #4]
 801244e:	464a      	mov	r2, r9
 8012450:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012452:	4641      	mov	r1, r8
 8012454:	4620      	mov	r0, r4
 8012456:	f7ff fdf3 	bl	8012040 <uxr_framing_read_transport>
 801245a:	2800      	cmp	r0, #0
 801245c:	d1ed      	bne.n	801243a <uxr_read_framed_msg+0x2f6>
 801245e:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8012462:	2b7e      	cmp	r3, #126	@ 0x7e
 8012464:	d0e9      	beq.n	801243a <uxr_read_framed_msg+0x2f6>
 8012466:	e6ae      	b.n	80121c6 <uxr_read_framed_msg+0x82>
 8012468:	30c30c31 	.word	0x30c30c31
 801246c:	0801c09c 	.word	0x0801c09c
 8012470:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012472:	9300      	str	r3, [sp, #0]
 8012474:	2305      	movs	r3, #5
 8012476:	9301      	str	r3, [sp, #4]
 8012478:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801247a:	f7ff fde1 	bl	8012040 <uxr_framing_read_transport>
 801247e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8012482:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8012486:	429a      	cmp	r2, r3
 8012488:	f43f ae9d 	beq.w	80121c6 <uxr_read_framed_msg+0x82>
 801248c:	e668      	b.n	8012160 <uxr_read_framed_msg+0x1c>
 801248e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012490:	9300      	str	r3, [sp, #0]
 8012492:	2303      	movs	r3, #3
 8012494:	e7c7      	b.n	8012426 <uxr_read_framed_msg+0x2e2>
 8012496:	2305      	movs	r3, #5
 8012498:	7023      	strb	r3, [r4, #0]
 801249a:	e664      	b.n	8012166 <uxr_read_framed_msg+0x22>
 801249c:	ee17 8a90 	vmov	r8, s15
 80124a0:	f43f aef2 	beq.w	8012288 <uxr_read_framed_msg+0x144>
 80124a4:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 80124a8:	d08e      	beq.n	80123c8 <uxr_read_framed_msg+0x284>
 80124aa:	ebae 0303 	sub.w	r3, lr, r3
 80124ae:	3302      	adds	r3, #2
 80124b0:	9301      	str	r3, [sp, #4]
 80124b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80124b4:	9300      	str	r3, [sp, #0]
 80124b6:	e7b7      	b.n	8012428 <uxr_read_framed_msg+0x2e4>
 80124b8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80124ba:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80124be:	7013      	strb	r3, [r2, #0]
 80124c0:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 80124c2:	b003      	add	sp, #12
 80124c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124c8:	f103 0c01 	add.w	ip, r3, #1
 80124cc:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80124d0:	fba5 0202 	umull	r0, r2, r5, r2
 80124d4:	0892      	lsrs	r2, r2, #2
 80124d6:	202a      	movs	r0, #42	@ 0x2a
 80124d8:	fb00 c212 	mls	r2, r0, r2, ip
 80124dc:	fa5f fc82 	uxtb.w	ip, r2
 80124e0:	4561      	cmp	r1, ip
 80124e2:	d09d      	beq.n	8012420 <uxr_read_framed_msg+0x2dc>
 80124e4:	3302      	adds	r3, #2
 80124e6:	4422      	add	r2, r4
 80124e8:	0859      	lsrs	r1, r3, #1
 80124ea:	7892      	ldrb	r2, [r2, #2]
 80124ec:	fba5 c101 	umull	ip, r1, r5, r1
 80124f0:	0889      	lsrs	r1, r1, #2
 80124f2:	fb00 3311 	mls	r3, r0, r1, r3
 80124f6:	2a7e      	cmp	r2, #126	@ 0x7e
 80124f8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80124fc:	f000 80aa 	beq.w	8012654 <uxr_read_framed_msg+0x510>
 8012500:	f082 0220 	eor.w	r2, r2, #32
 8012504:	e654      	b.n	80121b0 <uxr_read_framed_msg+0x6c>
 8012506:	1c58      	adds	r0, r3, #1
 8012508:	0842      	lsrs	r2, r0, #1
 801250a:	fba5 c202 	umull	ip, r2, r5, r2
 801250e:	0892      	lsrs	r2, r2, #2
 8012510:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8012514:	fb0c 0212 	mls	r2, ip, r2, r0
 8012518:	b2d0      	uxtb	r0, r2
 801251a:	4281      	cmp	r1, r0
 801251c:	d08f      	beq.n	801243e <uxr_read_framed_msg+0x2fa>
 801251e:	4422      	add	r2, r4
 8012520:	3302      	adds	r3, #2
 8012522:	7890      	ldrb	r0, [r2, #2]
 8012524:	085a      	lsrs	r2, r3, #1
 8012526:	fba5 1202 	umull	r1, r2, r5, r2
 801252a:	0892      	lsrs	r2, r2, #2
 801252c:	fb0c 3312 	mls	r3, ip, r2, r3
 8012530:	287e      	cmp	r0, #126	@ 0x7e
 8012532:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012536:	d07d      	beq.n	8012634 <uxr_read_framed_msg+0x4f0>
 8012538:	f080 0020 	eor.w	r0, r0, #32
 801253c:	e660      	b.n	8012200 <uxr_read_framed_msg+0xbc>
 801253e:	1c59      	adds	r1, r3, #1
 8012540:	084a      	lsrs	r2, r1, #1
 8012542:	fba5 c202 	umull	ip, r2, r5, r2
 8012546:	0892      	lsrs	r2, r2, #2
 8012548:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801254c:	fb0c 1212 	mls	r2, ip, r2, r1
 8012550:	b2d1      	uxtb	r1, r2
 8012552:	4288      	cmp	r0, r1
 8012554:	f43f af64 	beq.w	8012420 <uxr_read_framed_msg+0x2dc>
 8012558:	4422      	add	r2, r4
 801255a:	3302      	adds	r3, #2
 801255c:	7891      	ldrb	r1, [r2, #2]
 801255e:	085a      	lsrs	r2, r3, #1
 8012560:	fba5 0202 	umull	r0, r2, r5, r2
 8012564:	0892      	lsrs	r2, r2, #2
 8012566:	fb0c 3312 	mls	r3, ip, r2, r3
 801256a:	297e      	cmp	r1, #126	@ 0x7e
 801256c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012570:	d070      	beq.n	8012654 <uxr_read_framed_msg+0x510>
 8012572:	f081 0120 	eor.w	r1, r1, #32
 8012576:	e6a3      	b.n	80122c0 <uxr_read_framed_msg+0x17c>
 8012578:	f103 0c01 	add.w	ip, r3, #1
 801257c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8012580:	fba5 0202 	umull	r0, r2, r5, r2
 8012584:	0892      	lsrs	r2, r2, #2
 8012586:	202a      	movs	r0, #42	@ 0x2a
 8012588:	fb00 c212 	mls	r2, r0, r2, ip
 801258c:	fa5f fc82 	uxtb.w	ip, r2
 8012590:	4561      	cmp	r1, ip
 8012592:	f43f af58 	beq.w	8012446 <uxr_read_framed_msg+0x302>
 8012596:	4422      	add	r2, r4
 8012598:	3302      	adds	r3, #2
 801259a:	7891      	ldrb	r1, [r2, #2]
 801259c:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80125a0:	085a      	lsrs	r2, r3, #1
 80125a2:	fba5 c202 	umull	ip, r2, r5, r2
 80125a6:	0892      	lsrs	r2, r2, #2
 80125a8:	fb00 3312 	mls	r3, r0, r2, r3
 80125ac:	297e      	cmp	r1, #126	@ 0x7e
 80125ae:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80125b2:	f43f af48 	beq.w	8012446 <uxr_read_framed_msg+0x302>
 80125b6:	f081 0120 	eor.w	r1, r1, #32
 80125ba:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80125be:	e6e8      	b.n	8012392 <uxr_read_framed_msg+0x24e>
 80125c0:	1c58      	adds	r0, r3, #1
 80125c2:	0842      	lsrs	r2, r0, #1
 80125c4:	fba5 c202 	umull	ip, r2, r5, r2
 80125c8:	0892      	lsrs	r2, r2, #2
 80125ca:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80125ce:	fb0c 0212 	mls	r2, ip, r2, r0
 80125d2:	b2d0      	uxtb	r0, r2
 80125d4:	4281      	cmp	r1, r0
 80125d6:	f43f af32 	beq.w	801243e <uxr_read_framed_msg+0x2fa>
 80125da:	4422      	add	r2, r4
 80125dc:	3302      	adds	r3, #2
 80125de:	7890      	ldrb	r0, [r2, #2]
 80125e0:	085a      	lsrs	r2, r3, #1
 80125e2:	fba5 1202 	umull	r1, r2, r5, r2
 80125e6:	0892      	lsrs	r2, r2, #2
 80125e8:	fb0c 3312 	mls	r3, ip, r2, r3
 80125ec:	287e      	cmp	r0, #126	@ 0x7e
 80125ee:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80125f2:	d01f      	beq.n	8012634 <uxr_read_framed_msg+0x4f0>
 80125f4:	f080 0020 	eor.w	r0, r0, #32
 80125f8:	e68b      	b.n	8012312 <uxr_read_framed_msg+0x1ce>
 80125fa:	1c51      	adds	r1, r2, #1
 80125fc:	084b      	lsrs	r3, r1, #1
 80125fe:	fba5 c303 	umull	ip, r3, r5, r3
 8012602:	089b      	lsrs	r3, r3, #2
 8012604:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8012608:	fb0c 1313 	mls	r3, ip, r3, r1
 801260c:	b2d9      	uxtb	r1, r3
 801260e:	4288      	cmp	r0, r1
 8012610:	f43f af3d 	beq.w	801248e <uxr_read_framed_msg+0x34a>
 8012614:	3202      	adds	r2, #2
 8012616:	4423      	add	r3, r4
 8012618:	0850      	lsrs	r0, r2, #1
 801261a:	789b      	ldrb	r3, [r3, #2]
 801261c:	fba5 1000 	umull	r1, r0, r5, r0
 8012620:	0880      	lsrs	r0, r0, #2
 8012622:	fb0c 2210 	mls	r2, ip, r0, r2
 8012626:	2b7e      	cmp	r3, #126	@ 0x7e
 8012628:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801262c:	d016      	beq.n	801265c <uxr_read_framed_msg+0x518>
 801262e:	f083 0120 	eor.w	r1, r3, #32
 8012632:	e68b      	b.n	801234c <uxr_read_framed_msg+0x208>
 8012634:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012636:	9300      	str	r3, [sp, #0]
 8012638:	2302      	movs	r3, #2
 801263a:	9301      	str	r3, [sp, #4]
 801263c:	464a      	mov	r2, r9
 801263e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012640:	4641      	mov	r1, r8
 8012642:	4620      	mov	r0, r4
 8012644:	f7ff fcfc 	bl	8012040 <uxr_framing_read_transport>
 8012648:	2800      	cmp	r0, #0
 801264a:	f47f aef6 	bne.w	801243a <uxr_read_framed_msg+0x2f6>
 801264e:	2301      	movs	r3, #1
 8012650:	7023      	strb	r3, [r4, #0]
 8012652:	e588      	b.n	8012166 <uxr_read_framed_msg+0x22>
 8012654:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012656:	9300      	str	r3, [sp, #0]
 8012658:	2301      	movs	r3, #1
 801265a:	e7ee      	b.n	801263a <uxr_read_framed_msg+0x4f6>
 801265c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801265e:	9300      	str	r3, [sp, #0]
 8012660:	2303      	movs	r3, #3
 8012662:	e7ea      	b.n	801263a <uxr_read_framed_msg+0x4f6>
 8012664:	ee17 8a90 	vmov	r8, s15
 8012668:	e6ae      	b.n	80123c8 <uxr_read_framed_msg+0x284>
 801266a:	bf00      	nop

0801266c <uxr_stream_id>:
 801266c:	2901      	cmp	r1, #1
 801266e:	b082      	sub	sp, #8
 8012670:	d01d      	beq.n	80126ae <uxr_stream_id+0x42>
 8012672:	2902      	cmp	r1, #2
 8012674:	f04f 0c00 	mov.w	ip, #0
 8012678:	d01e      	beq.n	80126b8 <uxr_stream_id+0x4c>
 801267a:	2300      	movs	r3, #0
 801267c:	f36c 0307 	bfi	r3, ip, #0, #8
 8012680:	f360 230f 	bfi	r3, r0, #8, #8
 8012684:	f361 4317 	bfi	r3, r1, #16, #8
 8012688:	f362 631f 	bfi	r3, r2, #24, #8
 801268c:	b2da      	uxtb	r2, r3
 801268e:	2000      	movs	r0, #0
 8012690:	f362 0007 	bfi	r0, r2, #0, #8
 8012694:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8012698:	f362 200f 	bfi	r0, r2, #8, #8
 801269c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80126a0:	f362 4017 	bfi	r0, r2, #16, #8
 80126a4:	0e1b      	lsrs	r3, r3, #24
 80126a6:	f363 601f 	bfi	r0, r3, #24, #8
 80126aa:	b002      	add	sp, #8
 80126ac:	4770      	bx	lr
 80126ae:	f100 0c01 	add.w	ip, r0, #1
 80126b2:	fa5f fc8c 	uxtb.w	ip, ip
 80126b6:	e7e0      	b.n	801267a <uxr_stream_id+0xe>
 80126b8:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 80126bc:	e7dd      	b.n	801267a <uxr_stream_id+0xe>
 80126be:	bf00      	nop

080126c0 <uxr_stream_id_from_raw>:
 80126c0:	b082      	sub	sp, #8
 80126c2:	b130      	cbz	r0, 80126d2 <uxr_stream_id_from_raw+0x12>
 80126c4:	0603      	lsls	r3, r0, #24
 80126c6:	d420      	bmi.n	801270a <uxr_stream_id_from_raw+0x4a>
 80126c8:	1e42      	subs	r2, r0, #1
 80126ca:	b2d2      	uxtb	r2, r2
 80126cc:	f04f 0c01 	mov.w	ip, #1
 80126d0:	e001      	b.n	80126d6 <uxr_stream_id_from_raw+0x16>
 80126d2:	4684      	mov	ip, r0
 80126d4:	4602      	mov	r2, r0
 80126d6:	2300      	movs	r3, #0
 80126d8:	f360 0307 	bfi	r3, r0, #0, #8
 80126dc:	f362 230f 	bfi	r3, r2, #8, #8
 80126e0:	f36c 4317 	bfi	r3, ip, #16, #8
 80126e4:	f361 631f 	bfi	r3, r1, #24, #8
 80126e8:	b2da      	uxtb	r2, r3
 80126ea:	2000      	movs	r0, #0
 80126ec:	f362 0007 	bfi	r0, r2, #0, #8
 80126f0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80126f4:	f362 200f 	bfi	r0, r2, #8, #8
 80126f8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80126fc:	f362 4017 	bfi	r0, r2, #16, #8
 8012700:	0e1b      	lsrs	r3, r3, #24
 8012702:	f363 601f 	bfi	r0, r3, #24, #8
 8012706:	b002      	add	sp, #8
 8012708:	4770      	bx	lr
 801270a:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 801270e:	f04f 0c02 	mov.w	ip, #2
 8012712:	e7e0      	b.n	80126d6 <uxr_stream_id_from_raw+0x16>

08012714 <uxr_init_stream_storage>:
 8012714:	2300      	movs	r3, #0
 8012716:	7403      	strb	r3, [r0, #16]
 8012718:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 801271c:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8012720:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8012724:	4770      	bx	lr
 8012726:	bf00      	nop

08012728 <uxr_reset_stream_storage>:
 8012728:	b570      	push	{r4, r5, r6, lr}
 801272a:	7c03      	ldrb	r3, [r0, #16]
 801272c:	4604      	mov	r4, r0
 801272e:	b153      	cbz	r3, 8012746 <uxr_reset_stream_storage+0x1e>
 8012730:	4606      	mov	r6, r0
 8012732:	2500      	movs	r5, #0
 8012734:	4630      	mov	r0, r6
 8012736:	f005 fe27 	bl	8018388 <uxr_reset_output_best_effort_stream>
 801273a:	7c23      	ldrb	r3, [r4, #16]
 801273c:	3501      	adds	r5, #1
 801273e:	42ab      	cmp	r3, r5
 8012740:	f106 0610 	add.w	r6, r6, #16
 8012744:	d8f6      	bhi.n	8012734 <uxr_reset_stream_storage+0xc>
 8012746:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801274a:	b163      	cbz	r3, 8012766 <uxr_reset_stream_storage+0x3e>
 801274c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012750:	2500      	movs	r5, #0
 8012752:	4630      	mov	r0, r6
 8012754:	f005 fc1a 	bl	8017f8c <uxr_reset_input_best_effort_stream>
 8012758:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801275c:	3501      	adds	r5, #1
 801275e:	42ab      	cmp	r3, r5
 8012760:	f106 0602 	add.w	r6, r6, #2
 8012764:	d8f5      	bhi.n	8012752 <uxr_reset_stream_storage+0x2a>
 8012766:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 801276a:	b163      	cbz	r3, 8012786 <uxr_reset_stream_storage+0x5e>
 801276c:	f104 0618 	add.w	r6, r4, #24
 8012770:	2500      	movs	r5, #0
 8012772:	4630      	mov	r0, r6
 8012774:	f005 feb4 	bl	80184e0 <uxr_reset_output_reliable_stream>
 8012778:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 801277c:	3501      	adds	r5, #1
 801277e:	42ab      	cmp	r3, r5
 8012780:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 8012784:	d8f5      	bhi.n	8012772 <uxr_reset_stream_storage+0x4a>
 8012786:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 801278a:	b163      	cbz	r3, 80127a6 <uxr_reset_stream_storage+0x7e>
 801278c:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8012790:	2500      	movs	r5, #0
 8012792:	4630      	mov	r0, r6
 8012794:	f005 fc6e 	bl	8018074 <uxr_reset_input_reliable_stream>
 8012798:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 801279c:	3501      	adds	r5, #1
 801279e:	42ab      	cmp	r3, r5
 80127a0:	f106 0618 	add.w	r6, r6, #24
 80127a4:	d8f5      	bhi.n	8012792 <uxr_reset_stream_storage+0x6a>
 80127a6:	bd70      	pop	{r4, r5, r6, pc}

080127a8 <uxr_add_output_best_effort_buffer>:
 80127a8:	b510      	push	{r4, lr}
 80127aa:	7c04      	ldrb	r4, [r0, #16]
 80127ac:	f104 0c01 	add.w	ip, r4, #1
 80127b0:	b082      	sub	sp, #8
 80127b2:	f880 c010 	strb.w	ip, [r0, #16]
 80127b6:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 80127ba:	f005 fddb 	bl	8018374 <uxr_init_output_best_effort_stream>
 80127be:	2201      	movs	r2, #1
 80127c0:	4611      	mov	r1, r2
 80127c2:	4620      	mov	r0, r4
 80127c4:	b002      	add	sp, #8
 80127c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80127ca:	f7ff bf4f 	b.w	801266c <uxr_stream_id>
 80127ce:	bf00      	nop

080127d0 <uxr_add_output_reliable_buffer>:
 80127d0:	b510      	push	{r4, lr}
 80127d2:	b084      	sub	sp, #16
 80127d4:	4684      	mov	ip, r0
 80127d6:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80127da:	9000      	str	r0, [sp, #0]
 80127dc:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 80127e0:	2028      	movs	r0, #40	@ 0x28
 80127e2:	fb00 c004 	mla	r0, r0, r4, ip
 80127e6:	f104 0e01 	add.w	lr, r4, #1
 80127ea:	3018      	adds	r0, #24
 80127ec:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 80127f0:	f005 fe3e 	bl	8018470 <uxr_init_output_reliable_stream>
 80127f4:	2201      	movs	r2, #1
 80127f6:	2102      	movs	r1, #2
 80127f8:	4620      	mov	r0, r4
 80127fa:	b004      	add	sp, #16
 80127fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012800:	f7ff bf34 	b.w	801266c <uxr_stream_id>

08012804 <uxr_add_input_best_effort_buffer>:
 8012804:	b510      	push	{r4, lr}
 8012806:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 801280a:	4603      	mov	r3, r0
 801280c:	1c62      	adds	r2, r4, #1
 801280e:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 8012812:	b082      	sub	sp, #8
 8012814:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8012818:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801281c:	f005 fbb2 	bl	8017f84 <uxr_init_input_best_effort_stream>
 8012820:	2200      	movs	r2, #0
 8012822:	2101      	movs	r1, #1
 8012824:	4620      	mov	r0, r4
 8012826:	b002      	add	sp, #8
 8012828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801282c:	f7ff bf1e 	b.w	801266c <uxr_stream_id>

08012830 <uxr_add_input_reliable_buffer>:
 8012830:	b510      	push	{r4, lr}
 8012832:	b084      	sub	sp, #16
 8012834:	4684      	mov	ip, r0
 8012836:	9806      	ldr	r0, [sp, #24]
 8012838:	9000      	str	r0, [sp, #0]
 801283a:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 801283e:	2018      	movs	r0, #24
 8012840:	fb00 c004 	mla	r0, r0, r4, ip
 8012844:	f104 0e01 	add.w	lr, r4, #1
 8012848:	3048      	adds	r0, #72	@ 0x48
 801284a:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 801284e:	f005 fbe5 	bl	801801c <uxr_init_input_reliable_stream>
 8012852:	2200      	movs	r2, #0
 8012854:	2102      	movs	r1, #2
 8012856:	4620      	mov	r0, r4
 8012858:	b004      	add	sp, #16
 801285a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801285e:	f7ff bf05 	b.w	801266c <uxr_stream_id>
 8012862:	bf00      	nop

08012864 <uxr_get_output_best_effort_stream>:
 8012864:	7c03      	ldrb	r3, [r0, #16]
 8012866:	428b      	cmp	r3, r1
 8012868:	bf8c      	ite	hi
 801286a:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 801286e:	2000      	movls	r0, #0
 8012870:	4770      	bx	lr
 8012872:	bf00      	nop

08012874 <uxr_get_output_reliable_stream>:
 8012874:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8012878:	428b      	cmp	r3, r1
 801287a:	bf83      	ittte	hi
 801287c:	2328      	movhi	r3, #40	@ 0x28
 801287e:	fb03 0001 	mlahi	r0, r3, r1, r0
 8012882:	3018      	addhi	r0, #24
 8012884:	2000      	movls	r0, #0
 8012886:	4770      	bx	lr

08012888 <uxr_get_input_best_effort_stream>:
 8012888:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 801288c:	428b      	cmp	r3, r1
 801288e:	bf86      	itte	hi
 8012890:	3121      	addhi	r1, #33	@ 0x21
 8012892:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 8012896:	2000      	movls	r0, #0
 8012898:	4770      	bx	lr
 801289a:	bf00      	nop

0801289c <uxr_get_input_reliable_stream>:
 801289c:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 80128a0:	428b      	cmp	r3, r1
 80128a2:	bf83      	ittte	hi
 80128a4:	2318      	movhi	r3, #24
 80128a6:	fb03 0001 	mlahi	r0, r3, r1, r0
 80128aa:	3048      	addhi	r0, #72	@ 0x48
 80128ac:	2000      	movls	r0, #0
 80128ae:	4770      	bx	lr

080128b0 <uxr_output_streams_confirmed>:
 80128b0:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80128b4:	b183      	cbz	r3, 80128d8 <uxr_output_streams_confirmed+0x28>
 80128b6:	b570      	push	{r4, r5, r6, lr}
 80128b8:	4606      	mov	r6, r0
 80128ba:	f100 0518 	add.w	r5, r0, #24
 80128be:	2400      	movs	r4, #0
 80128c0:	e001      	b.n	80128c6 <uxr_output_streams_confirmed+0x16>
 80128c2:	3528      	adds	r5, #40	@ 0x28
 80128c4:	b138      	cbz	r0, 80128d6 <uxr_output_streams_confirmed+0x26>
 80128c6:	4628      	mov	r0, r5
 80128c8:	f006 f87a 	bl	80189c0 <uxr_is_output_up_to_date>
 80128cc:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 80128d0:	3401      	adds	r4, #1
 80128d2:	42a3      	cmp	r3, r4
 80128d4:	d8f5      	bhi.n	80128c2 <uxr_output_streams_confirmed+0x12>
 80128d6:	bd70      	pop	{r4, r5, r6, pc}
 80128d8:	2001      	movs	r0, #1
 80128da:	4770      	bx	lr

080128dc <uxr_buffer_submessage_header>:
 80128dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128de:	4604      	mov	r4, r0
 80128e0:	460e      	mov	r6, r1
 80128e2:	2104      	movs	r1, #4
 80128e4:	4615      	mov	r5, r2
 80128e6:	461f      	mov	r7, r3
 80128e8:	f7fa f8ea 	bl	800cac0 <ucdr_align_to>
 80128ec:	2301      	movs	r3, #1
 80128ee:	ea47 0203 	orr.w	r2, r7, r3
 80128f2:	4631      	mov	r1, r6
 80128f4:	7523      	strb	r3, [r4, #20]
 80128f6:	4620      	mov	r0, r4
 80128f8:	462b      	mov	r3, r5
 80128fa:	f000 fa27 	bl	8012d4c <uxr_serialize_submessage_header>
 80128fe:	4620      	mov	r0, r4
 8012900:	f7fa f8f4 	bl	800caec <ucdr_buffer_remaining>
 8012904:	42a8      	cmp	r0, r5
 8012906:	bf34      	ite	cc
 8012908:	2000      	movcc	r0, #0
 801290a:	2001      	movcs	r0, #1
 801290c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801290e:	bf00      	nop

08012910 <uxr_read_submessage_header>:
 8012910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012914:	4604      	mov	r4, r0
 8012916:	460d      	mov	r5, r1
 8012918:	2104      	movs	r1, #4
 801291a:	4616      	mov	r6, r2
 801291c:	4698      	mov	r8, r3
 801291e:	f7fa f8cf 	bl	800cac0 <ucdr_align_to>
 8012922:	4620      	mov	r0, r4
 8012924:	f7fa f8e2 	bl	800caec <ucdr_buffer_remaining>
 8012928:	2803      	cmp	r0, #3
 801292a:	bf8c      	ite	hi
 801292c:	2701      	movhi	r7, #1
 801292e:	2700      	movls	r7, #0
 8012930:	d802      	bhi.n	8012938 <uxr_read_submessage_header+0x28>
 8012932:	4638      	mov	r0, r7
 8012934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012938:	4633      	mov	r3, r6
 801293a:	4642      	mov	r2, r8
 801293c:	4620      	mov	r0, r4
 801293e:	4629      	mov	r1, r5
 8012940:	f000 fa18 	bl	8012d74 <uxr_deserialize_submessage_header>
 8012944:	f898 3000 	ldrb.w	r3, [r8]
 8012948:	f003 0201 	and.w	r2, r3, #1
 801294c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8012950:	f888 3000 	strb.w	r3, [r8]
 8012954:	7522      	strb	r2, [r4, #20]
 8012956:	4638      	mov	r0, r7
 8012958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801295c <uxr_submessage_padding>:
 801295c:	f010 0003 	ands.w	r0, r0, #3
 8012960:	bf18      	it	ne
 8012962:	f1c0 0004 	rsbne	r0, r0, #4
 8012966:	4770      	bx	lr

08012968 <uxr_millis>:
 8012968:	b510      	push	{r4, lr}
 801296a:	b084      	sub	sp, #16
 801296c:	4669      	mov	r1, sp
 801296e:	2001      	movs	r0, #1
 8012970:	f7ef ff6e 	bl	8002850 <clock_gettime>
 8012974:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8012978:	4906      	ldr	r1, [pc, #24]	@ (8012994 <uxr_millis+0x2c>)
 801297a:	fba0 0301 	umull	r0, r3, r0, r1
 801297e:	1900      	adds	r0, r0, r4
 8012980:	fb01 3102 	mla	r1, r1, r2, r3
 8012984:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8012988:	4a03      	ldr	r2, [pc, #12]	@ (8012998 <uxr_millis+0x30>)
 801298a:	2300      	movs	r3, #0
 801298c:	f7ee f96c 	bl	8000c68 <__aeabi_ldivmod>
 8012990:	b004      	add	sp, #16
 8012992:	bd10      	pop	{r4, pc}
 8012994:	3b9aca00 	.word	0x3b9aca00
 8012998:	000f4240 	.word	0x000f4240

0801299c <uxr_nanos>:
 801299c:	b510      	push	{r4, lr}
 801299e:	b084      	sub	sp, #16
 80129a0:	4669      	mov	r1, sp
 80129a2:	2001      	movs	r0, #1
 80129a4:	f7ef ff54 	bl	8002850 <clock_gettime>
 80129a8:	4a06      	ldr	r2, [pc, #24]	@ (80129c4 <uxr_nanos+0x28>)
 80129aa:	9800      	ldr	r0, [sp, #0]
 80129ac:	9902      	ldr	r1, [sp, #8]
 80129ae:	9c01      	ldr	r4, [sp, #4]
 80129b0:	fba0 0302 	umull	r0, r3, r0, r2
 80129b4:	1840      	adds	r0, r0, r1
 80129b6:	fb02 3304 	mla	r3, r2, r4, r3
 80129ba:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 80129be:	b004      	add	sp, #16
 80129c0:	bd10      	pop	{r4, pc}
 80129c2:	bf00      	nop
 80129c4:	3b9aca00 	.word	0x3b9aca00

080129c8 <on_full_output_buffer_fragmented>:
 80129c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129cc:	460c      	mov	r4, r1
 80129ce:	b08a      	sub	sp, #40	@ 0x28
 80129d0:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 80129d4:	4606      	mov	r6, r0
 80129d6:	f104 0008 	add.w	r0, r4, #8
 80129da:	f7ff ff4b 	bl	8012874 <uxr_get_output_reliable_stream>
 80129de:	4605      	mov	r5, r0
 80129e0:	f005 fff8 	bl	80189d4 <get_available_free_slots>
 80129e4:	b968      	cbnz	r0, 8012a02 <on_full_output_buffer_fragmented+0x3a>
 80129e6:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 80129ea:	4620      	mov	r0, r4
 80129ec:	4798      	blx	r3
 80129ee:	b918      	cbnz	r0, 80129f8 <on_full_output_buffer_fragmented+0x30>
 80129f0:	2001      	movs	r0, #1
 80129f2:	b00a      	add	sp, #40	@ 0x28
 80129f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129f8:	4628      	mov	r0, r5
 80129fa:	f005 ffeb 	bl	80189d4 <get_available_free_slots>
 80129fe:	2800      	cmp	r0, #0
 8012a00:	d0f6      	beq.n	80129f0 <on_full_output_buffer_fragmented+0x28>
 8012a02:	8929      	ldrh	r1, [r5, #8]
 8012a04:	89eb      	ldrh	r3, [r5, #14]
 8012a06:	7b28      	ldrb	r0, [r5, #12]
 8012a08:	686a      	ldr	r2, [r5, #4]
 8012a0a:	fbb2 f8f1 	udiv	r8, r2, r1
 8012a0e:	fbb3 f2f1 	udiv	r2, r3, r1
 8012a12:	fb01 3112 	mls	r1, r1, r2, r3
 8012a16:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 8012a1a:	b289      	uxth	r1, r1
 8012a1c:	fb08 f101 	mul.w	r1, r8, r1
 8012a20:	30fc      	adds	r0, #252	@ 0xfc
 8012a22:	f1a8 0804 	sub.w	r8, r8, #4
 8012a26:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8012a2a:	4440      	add	r0, r8
 8012a2c:	b287      	uxth	r7, r0
 8012a2e:	1bdb      	subs	r3, r3, r7
 8012a30:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8012a34:	682b      	ldr	r3, [r5, #0]
 8012a36:	3104      	adds	r1, #4
 8012a38:	4419      	add	r1, r3
 8012a3a:	4642      	mov	r2, r8
 8012a3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012a40:	9300      	str	r3, [sp, #0]
 8012a42:	a802      	add	r0, sp, #8
 8012a44:	2300      	movs	r3, #0
 8012a46:	f7fa f80f 	bl	800ca68 <ucdr_init_buffer_origin_offset>
 8012a4a:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8012a4e:	f102 0308 	add.w	r3, r2, #8
 8012a52:	4543      	cmp	r3, r8
 8012a54:	d928      	bls.n	8012aa8 <on_full_output_buffer_fragmented+0xe0>
 8012a56:	463a      	mov	r2, r7
 8012a58:	2300      	movs	r3, #0
 8012a5a:	210d      	movs	r1, #13
 8012a5c:	a802      	add	r0, sp, #8
 8012a5e:	f7ff ff3d 	bl	80128dc <uxr_buffer_submessage_header>
 8012a62:	8929      	ldrh	r1, [r5, #8]
 8012a64:	89eb      	ldrh	r3, [r5, #14]
 8012a66:	fbb3 f2f1 	udiv	r2, r3, r1
 8012a6a:	fb01 3312 	mls	r3, r1, r2, r3
 8012a6e:	b29b      	uxth	r3, r3
 8012a70:	686a      	ldr	r2, [r5, #4]
 8012a72:	fbb2 f2f1 	udiv	r2, r2, r1
 8012a76:	fb02 f303 	mul.w	r3, r2, r3
 8012a7a:	682a      	ldr	r2, [r5, #0]
 8012a7c:	f842 8003 	str.w	r8, [r2, r3]
 8012a80:	89e8      	ldrh	r0, [r5, #14]
 8012a82:	2101      	movs	r1, #1
 8012a84:	f005 ffc6 	bl	8018a14 <uxr_seq_num_add>
 8012a88:	9904      	ldr	r1, [sp, #16]
 8012a8a:	9a03      	ldr	r2, [sp, #12]
 8012a8c:	81e8      	strh	r0, [r5, #14]
 8012a8e:	1a52      	subs	r2, r2, r1
 8012a90:	4630      	mov	r0, r6
 8012a92:	f7f9 fffb 	bl	800ca8c <ucdr_init_buffer>
 8012a96:	4630      	mov	r0, r6
 8012a98:	490f      	ldr	r1, [pc, #60]	@ (8012ad8 <on_full_output_buffer_fragmented+0x110>)
 8012a9a:	4622      	mov	r2, r4
 8012a9c:	f7f9 ffca 	bl	800ca34 <ucdr_set_on_full_buffer_callback>
 8012aa0:	2000      	movs	r0, #0
 8012aa2:	b00a      	add	sp, #40	@ 0x28
 8012aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012aa8:	b292      	uxth	r2, r2
 8012aaa:	2302      	movs	r3, #2
 8012aac:	210d      	movs	r1, #13
 8012aae:	a802      	add	r0, sp, #8
 8012ab0:	f7ff ff14 	bl	80128dc <uxr_buffer_submessage_header>
 8012ab4:	8928      	ldrh	r0, [r5, #8]
 8012ab6:	89eb      	ldrh	r3, [r5, #14]
 8012ab8:	fbb3 f1f0 	udiv	r1, r3, r0
 8012abc:	fb00 3311 	mls	r3, r0, r1, r3
 8012ac0:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8012ac4:	6869      	ldr	r1, [r5, #4]
 8012ac6:	fbb1 f1f0 	udiv	r1, r1, r0
 8012aca:	b29b      	uxth	r3, r3
 8012acc:	fb01 f303 	mul.w	r3, r1, r3
 8012ad0:	6829      	ldr	r1, [r5, #0]
 8012ad2:	3208      	adds	r2, #8
 8012ad4:	50ca      	str	r2, [r1, r3]
 8012ad6:	e7d3      	b.n	8012a80 <on_full_output_buffer_fragmented+0xb8>
 8012ad8:	080129c9 	.word	0x080129c9

08012adc <uxr_prepare_output_stream>:
 8012adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ade:	b087      	sub	sp, #28
 8012ae0:	2707      	movs	r7, #7
 8012ae2:	9202      	str	r2, [sp, #8]
 8012ae4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8012ae6:	9103      	str	r1, [sp, #12]
 8012ae8:	2500      	movs	r5, #0
 8012aea:	3204      	adds	r2, #4
 8012aec:	e9cd 7500 	strd	r7, r5, [sp]
 8012af0:	461c      	mov	r4, r3
 8012af2:	4606      	mov	r6, r0
 8012af4:	f7fe ffc2 	bl	8011a7c <uxr_prepare_stream_to_write_submessage>
 8012af8:	f080 0201 	eor.w	r2, r0, #1
 8012afc:	b2d2      	uxtb	r2, r2
 8012afe:	75a2      	strb	r2, [r4, #22]
 8012b00:	b112      	cbz	r2, 8012b08 <uxr_prepare_output_stream+0x2c>
 8012b02:	4628      	mov	r0, r5
 8012b04:	b007      	add	sp, #28
 8012b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b08:	aa05      	add	r2, sp, #20
 8012b0a:	9902      	ldr	r1, [sp, #8]
 8012b0c:	4630      	mov	r0, r6
 8012b0e:	f7ff f8eb 	bl	8011ce8 <uxr_init_base_object_request>
 8012b12:	a905      	add	r1, sp, #20
 8012b14:	4605      	mov	r5, r0
 8012b16:	4620      	mov	r0, r4
 8012b18:	f000 ffd4 	bl	8013ac4 <uxr_serialize_WRITE_DATA_Payload_Data>
 8012b1c:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8012b20:	69a6      	ldr	r6, [r4, #24]
 8012b22:	69e7      	ldr	r7, [r4, #28]
 8012b24:	1a52      	subs	r2, r2, r1
 8012b26:	4620      	mov	r0, r4
 8012b28:	f7f9 ffb0 	bl	800ca8c <ucdr_init_buffer>
 8012b2c:	4620      	mov	r0, r4
 8012b2e:	463a      	mov	r2, r7
 8012b30:	4631      	mov	r1, r6
 8012b32:	f7f9 ff7f 	bl	800ca34 <ucdr_set_on_full_buffer_callback>
 8012b36:	4628      	mov	r0, r5
 8012b38:	b007      	add	sp, #28
 8012b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012b3c <uxr_prepare_output_stream_fragmented>:
 8012b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b40:	b091      	sub	sp, #68	@ 0x44
 8012b42:	4605      	mov	r5, r0
 8012b44:	9105      	str	r1, [sp, #20]
 8012b46:	3008      	adds	r0, #8
 8012b48:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8012b4c:	461e      	mov	r6, r3
 8012b4e:	9204      	str	r2, [sp, #16]
 8012b50:	f7ff fe90 	bl	8012874 <uxr_get_output_reliable_stream>
 8012b54:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8012b58:	2b01      	cmp	r3, #1
 8012b5a:	f000 8091 	beq.w	8012c80 <uxr_prepare_output_stream_fragmented+0x144>
 8012b5e:	4604      	mov	r4, r0
 8012b60:	2800      	cmp	r0, #0
 8012b62:	f000 808d 	beq.w	8012c80 <uxr_prepare_output_stream_fragmented+0x144>
 8012b66:	f005 ff35 	bl	80189d4 <get_available_free_slots>
 8012b6a:	2800      	cmp	r0, #0
 8012b6c:	f000 8083 	beq.w	8012c76 <uxr_prepare_output_stream_fragmented+0x13a>
 8012b70:	8922      	ldrh	r2, [r4, #8]
 8012b72:	89e7      	ldrh	r7, [r4, #14]
 8012b74:	fbb7 f9f2 	udiv	r9, r7, r2
 8012b78:	fb02 7919 	mls	r9, r2, r9, r7
 8012b7c:	fa1f f989 	uxth.w	r9, r9
 8012b80:	6863      	ldr	r3, [r4, #4]
 8012b82:	fbb3 f2f2 	udiv	r2, r3, r2
 8012b86:	6823      	ldr	r3, [r4, #0]
 8012b88:	9203      	str	r2, [sp, #12]
 8012b8a:	fb02 f909 	mul.w	r9, r2, r9
 8012b8e:	f109 0904 	add.w	r9, r9, #4
 8012b92:	4499      	add	r9, r3
 8012b94:	7b23      	ldrb	r3, [r4, #12]
 8012b96:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8012b9a:	4543      	cmp	r3, r8
 8012b9c:	f1a2 0b04 	sub.w	fp, r2, #4
 8012ba0:	d37a      	bcc.n	8012c98 <uxr_prepare_output_stream_fragmented+0x15c>
 8012ba2:	f1ab 0a04 	sub.w	sl, fp, #4
 8012ba6:	ebaa 0a03 	sub.w	sl, sl, r3
 8012baa:	465a      	mov	r2, fp
 8012bac:	2300      	movs	r3, #0
 8012bae:	4649      	mov	r1, r9
 8012bb0:	a808      	add	r0, sp, #32
 8012bb2:	f8cd 8000 	str.w	r8, [sp]
 8012bb6:	f7f9 ff57 	bl	800ca68 <ucdr_init_buffer_origin_offset>
 8012bba:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8012bbc:	fa1f fa8a 	uxth.w	sl, sl
 8012bc0:	4652      	mov	r2, sl
 8012bc2:	f103 0a08 	add.w	sl, r3, #8
 8012bc6:	45da      	cmp	sl, fp
 8012bc8:	bf34      	ite	cc
 8012bca:	2302      	movcc	r3, #2
 8012bcc:	2300      	movcs	r3, #0
 8012bce:	210d      	movs	r1, #13
 8012bd0:	a808      	add	r0, sp, #32
 8012bd2:	f7ff fe83 	bl	80128dc <uxr_buffer_submessage_header>
 8012bd6:	8921      	ldrh	r1, [r4, #8]
 8012bd8:	fbb7 f2f1 	udiv	r2, r7, r1
 8012bdc:	fb01 7212 	mls	r2, r1, r2, r7
 8012be0:	b292      	uxth	r2, r2
 8012be2:	6863      	ldr	r3, [r4, #4]
 8012be4:	fbb3 f3f1 	udiv	r3, r3, r1
 8012be8:	fb02 f303 	mul.w	r3, r2, r3
 8012bec:	6822      	ldr	r2, [r4, #0]
 8012bee:	4638      	mov	r0, r7
 8012bf0:	f842 b003 	str.w	fp, [r2, r3]
 8012bf4:	2101      	movs	r1, #1
 8012bf6:	f005 ff0d 	bl	8018a14 <uxr_seq_num_add>
 8012bfa:	9b03      	ldr	r3, [sp, #12]
 8012bfc:	f108 0104 	add.w	r1, r8, #4
 8012c00:	f1a3 0208 	sub.w	r2, r3, #8
 8012c04:	eba2 0208 	sub.w	r2, r2, r8
 8012c08:	4449      	add	r1, r9
 8012c0a:	4607      	mov	r7, r0
 8012c0c:	4630      	mov	r0, r6
 8012c0e:	f7f9 ff3d 	bl	800ca8c <ucdr_init_buffer>
 8012c12:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8012c14:	81e7      	strh	r7, [r4, #14]
 8012c16:	1d1a      	adds	r2, r3, #4
 8012c18:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8012c1c:	bf28      	it	cs
 8012c1e:	2200      	movcs	r2, #0
 8012c20:	2300      	movs	r3, #0
 8012c22:	b292      	uxth	r2, r2
 8012c24:	2107      	movs	r1, #7
 8012c26:	4630      	mov	r0, r6
 8012c28:	f7ff fe58 	bl	80128dc <uxr_buffer_submessage_header>
 8012c2c:	9904      	ldr	r1, [sp, #16]
 8012c2e:	aa07      	add	r2, sp, #28
 8012c30:	4628      	mov	r0, r5
 8012c32:	f7ff f859 	bl	8011ce8 <uxr_init_base_object_request>
 8012c36:	4604      	mov	r4, r0
 8012c38:	b318      	cbz	r0, 8012c82 <uxr_prepare_output_stream_fragmented+0x146>
 8012c3a:	a907      	add	r1, sp, #28
 8012c3c:	4630      	mov	r0, r6
 8012c3e:	f000 ff41 	bl	8013ac4 <uxr_serialize_WRITE_DATA_Payload_Data>
 8012c42:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8012c46:	4630      	mov	r0, r6
 8012c48:	1a52      	subs	r2, r2, r1
 8012c4a:	f7f9 ff1f 	bl	800ca8c <ucdr_init_buffer>
 8012c4e:	9b05      	ldr	r3, [sp, #20]
 8012c50:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8012c54:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8012c56:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 8012c5a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8012c5c:	491b      	ldr	r1, [pc, #108]	@ (8012ccc <uxr_prepare_output_stream_fragmented+0x190>)
 8012c5e:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 8012c62:	4630      	mov	r0, r6
 8012c64:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8012c68:	462a      	mov	r2, r5
 8012c6a:	f7f9 fee3 	bl	800ca34 <ucdr_set_on_full_buffer_callback>
 8012c6e:	4620      	mov	r0, r4
 8012c70:	b011      	add	sp, #68	@ 0x44
 8012c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c76:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8012c78:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8012c7a:	4628      	mov	r0, r5
 8012c7c:	4798      	blx	r3
 8012c7e:	b920      	cbnz	r0, 8012c8a <uxr_prepare_output_stream_fragmented+0x14e>
 8012c80:	2400      	movs	r4, #0
 8012c82:	4620      	mov	r0, r4
 8012c84:	b011      	add	sp, #68	@ 0x44
 8012c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c8a:	4620      	mov	r0, r4
 8012c8c:	f005 fea2 	bl	80189d4 <get_available_free_slots>
 8012c90:	2800      	cmp	r0, #0
 8012c92:	f47f af6d 	bne.w	8012b70 <uxr_prepare_output_stream_fragmented+0x34>
 8012c96:	e7f3      	b.n	8012c80 <uxr_prepare_output_stream_fragmented+0x144>
 8012c98:	4638      	mov	r0, r7
 8012c9a:	2101      	movs	r1, #1
 8012c9c:	f005 feba 	bl	8018a14 <uxr_seq_num_add>
 8012ca0:	8921      	ldrh	r1, [r4, #8]
 8012ca2:	fbb0 f2f1 	udiv	r2, r0, r1
 8012ca6:	fb01 0912 	mls	r9, r1, r2, r0
 8012caa:	fa1f f289 	uxth.w	r2, r9
 8012cae:	6863      	ldr	r3, [r4, #4]
 8012cb0:	fbb3 f9f1 	udiv	r9, r3, r1
 8012cb4:	6823      	ldr	r3, [r4, #0]
 8012cb6:	fb02 f909 	mul.w	r9, r2, r9
 8012cba:	f109 0904 	add.w	r9, r9, #4
 8012cbe:	4499      	add	r9, r3
 8012cc0:	4607      	mov	r7, r0
 8012cc2:	7b23      	ldrb	r3, [r4, #12]
 8012cc4:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8012cc8:	e76b      	b.n	8012ba2 <uxr_prepare_output_stream_fragmented+0x66>
 8012cca:	bf00      	nop
 8012ccc:	080129c9 	.word	0x080129c9

08012cd0 <uxr_serialize_message_header>:
 8012cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012cd2:	b083      	sub	sp, #12
 8012cd4:	4616      	mov	r6, r2
 8012cd6:	4604      	mov	r4, r0
 8012cd8:	9301      	str	r3, [sp, #4]
 8012cda:	460d      	mov	r5, r1
 8012cdc:	9f08      	ldr	r7, [sp, #32]
 8012cde:	f7f8 fbf3 	bl	800b4c8 <ucdr_serialize_uint8_t>
 8012ce2:	4631      	mov	r1, r6
 8012ce4:	4620      	mov	r0, r4
 8012ce6:	f7f8 fbef 	bl	800b4c8 <ucdr_serialize_uint8_t>
 8012cea:	9a01      	ldr	r2, [sp, #4]
 8012cec:	2101      	movs	r1, #1
 8012cee:	4620      	mov	r0, r4
 8012cf0:	f7f8 fc96 	bl	800b620 <ucdr_serialize_endian_uint16_t>
 8012cf4:	062b      	lsls	r3, r5, #24
 8012cf6:	d501      	bpl.n	8012cfc <uxr_serialize_message_header+0x2c>
 8012cf8:	b003      	add	sp, #12
 8012cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012cfc:	2204      	movs	r2, #4
 8012cfe:	4639      	mov	r1, r7
 8012d00:	4620      	mov	r0, r4
 8012d02:	b003      	add	sp, #12
 8012d04:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012d08:	f7fd b9a2 	b.w	8010050 <ucdr_serialize_array_uint8_t>

08012d0c <uxr_deserialize_message_header>:
 8012d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012d0e:	b083      	sub	sp, #12
 8012d10:	4616      	mov	r6, r2
 8012d12:	4604      	mov	r4, r0
 8012d14:	9301      	str	r3, [sp, #4]
 8012d16:	460d      	mov	r5, r1
 8012d18:	9f08      	ldr	r7, [sp, #32]
 8012d1a:	f7f8 fbeb 	bl	800b4f4 <ucdr_deserialize_uint8_t>
 8012d1e:	4631      	mov	r1, r6
 8012d20:	4620      	mov	r0, r4
 8012d22:	f7f8 fbe7 	bl	800b4f4 <ucdr_deserialize_uint8_t>
 8012d26:	9a01      	ldr	r2, [sp, #4]
 8012d28:	2101      	movs	r1, #1
 8012d2a:	4620      	mov	r0, r4
 8012d2c:	f7f8 fd6c 	bl	800b808 <ucdr_deserialize_endian_uint16_t>
 8012d30:	f995 3000 	ldrsb.w	r3, [r5]
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	da01      	bge.n	8012d3c <uxr_deserialize_message_header+0x30>
 8012d38:	b003      	add	sp, #12
 8012d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d3c:	2204      	movs	r2, #4
 8012d3e:	4639      	mov	r1, r7
 8012d40:	4620      	mov	r0, r4
 8012d42:	b003      	add	sp, #12
 8012d44:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012d48:	f7fd b9e6 	b.w	8010118 <ucdr_deserialize_array_uint8_t>

08012d4c <uxr_serialize_submessage_header>:
 8012d4c:	b530      	push	{r4, r5, lr}
 8012d4e:	b083      	sub	sp, #12
 8012d50:	4615      	mov	r5, r2
 8012d52:	4604      	mov	r4, r0
 8012d54:	9301      	str	r3, [sp, #4]
 8012d56:	f7f8 fbb7 	bl	800b4c8 <ucdr_serialize_uint8_t>
 8012d5a:	4629      	mov	r1, r5
 8012d5c:	4620      	mov	r0, r4
 8012d5e:	f7f8 fbb3 	bl	800b4c8 <ucdr_serialize_uint8_t>
 8012d62:	9a01      	ldr	r2, [sp, #4]
 8012d64:	2101      	movs	r1, #1
 8012d66:	4620      	mov	r0, r4
 8012d68:	b003      	add	sp, #12
 8012d6a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012d6e:	f7f8 bc57 	b.w	800b620 <ucdr_serialize_endian_uint16_t>
 8012d72:	bf00      	nop

08012d74 <uxr_deserialize_submessage_header>:
 8012d74:	b530      	push	{r4, r5, lr}
 8012d76:	b083      	sub	sp, #12
 8012d78:	4615      	mov	r5, r2
 8012d7a:	4604      	mov	r4, r0
 8012d7c:	9301      	str	r3, [sp, #4]
 8012d7e:	f7f8 fbb9 	bl	800b4f4 <ucdr_deserialize_uint8_t>
 8012d82:	4629      	mov	r1, r5
 8012d84:	4620      	mov	r0, r4
 8012d86:	f7f8 fbb5 	bl	800b4f4 <ucdr_deserialize_uint8_t>
 8012d8a:	9a01      	ldr	r2, [sp, #4]
 8012d8c:	2101      	movs	r1, #1
 8012d8e:	4620      	mov	r0, r4
 8012d90:	b003      	add	sp, #12
 8012d92:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012d96:	f7f8 bd37 	b.w	800b808 <ucdr_deserialize_endian_uint16_t>
 8012d9a:	bf00      	nop

08012d9c <uxr_serialize_CLIENT_Representation>:
 8012d9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012da0:	2204      	movs	r2, #4
 8012da2:	460e      	mov	r6, r1
 8012da4:	4605      	mov	r5, r0
 8012da6:	f7fd f953 	bl	8010050 <ucdr_serialize_array_uint8_t>
 8012daa:	2202      	movs	r2, #2
 8012dac:	4607      	mov	r7, r0
 8012dae:	1d31      	adds	r1, r6, #4
 8012db0:	4628      	mov	r0, r5
 8012db2:	f7fd f94d 	bl	8010050 <ucdr_serialize_array_uint8_t>
 8012db6:	4038      	ands	r0, r7
 8012db8:	2202      	movs	r2, #2
 8012dba:	1db1      	adds	r1, r6, #6
 8012dbc:	b2c7      	uxtb	r7, r0
 8012dbe:	4628      	mov	r0, r5
 8012dc0:	f7fd f946 	bl	8010050 <ucdr_serialize_array_uint8_t>
 8012dc4:	2204      	movs	r2, #4
 8012dc6:	4007      	ands	r7, r0
 8012dc8:	f106 0108 	add.w	r1, r6, #8
 8012dcc:	4628      	mov	r0, r5
 8012dce:	f7fd f93f 	bl	8010050 <ucdr_serialize_array_uint8_t>
 8012dd2:	7b31      	ldrb	r1, [r6, #12]
 8012dd4:	4007      	ands	r7, r0
 8012dd6:	4628      	mov	r0, r5
 8012dd8:	f7f8 fb76 	bl	800b4c8 <ucdr_serialize_uint8_t>
 8012ddc:	7b71      	ldrb	r1, [r6, #13]
 8012dde:	4007      	ands	r7, r0
 8012de0:	4628      	mov	r0, r5
 8012de2:	f7f8 fb43 	bl	800b46c <ucdr_serialize_bool>
 8012de6:	7b73      	ldrb	r3, [r6, #13]
 8012de8:	ea07 0800 	and.w	r8, r7, r0
 8012dec:	b93b      	cbnz	r3, 8012dfe <uxr_serialize_CLIENT_Representation+0x62>
 8012dee:	8bb1      	ldrh	r1, [r6, #28]
 8012df0:	4628      	mov	r0, r5
 8012df2:	f7f8 fb95 	bl	800b520 <ucdr_serialize_uint16_t>
 8012df6:	ea08 0000 	and.w	r0, r8, r0
 8012dfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012dfe:	6931      	ldr	r1, [r6, #16]
 8012e00:	4628      	mov	r0, r5
 8012e02:	f7f8 fd77 	bl	800b8f4 <ucdr_serialize_uint32_t>
 8012e06:	6933      	ldr	r3, [r6, #16]
 8012e08:	b1e3      	cbz	r3, 8012e44 <uxr_serialize_CLIENT_Representation+0xa8>
 8012e0a:	b1c0      	cbz	r0, 8012e3e <uxr_serialize_CLIENT_Representation+0xa2>
 8012e0c:	4637      	mov	r7, r6
 8012e0e:	f04f 0900 	mov.w	r9, #0
 8012e12:	e001      	b.n	8012e18 <uxr_serialize_CLIENT_Representation+0x7c>
 8012e14:	3708      	adds	r7, #8
 8012e16:	b194      	cbz	r4, 8012e3e <uxr_serialize_CLIENT_Representation+0xa2>
 8012e18:	6979      	ldr	r1, [r7, #20]
 8012e1a:	4628      	mov	r0, r5
 8012e1c:	f005 f89a 	bl	8017f54 <ucdr_serialize_string>
 8012e20:	69b9      	ldr	r1, [r7, #24]
 8012e22:	4604      	mov	r4, r0
 8012e24:	4628      	mov	r0, r5
 8012e26:	f005 f895 	bl	8017f54 <ucdr_serialize_string>
 8012e2a:	6933      	ldr	r3, [r6, #16]
 8012e2c:	f109 0901 	add.w	r9, r9, #1
 8012e30:	4004      	ands	r4, r0
 8012e32:	4599      	cmp	r9, r3
 8012e34:	b2e4      	uxtb	r4, r4
 8012e36:	d3ed      	bcc.n	8012e14 <uxr_serialize_CLIENT_Representation+0x78>
 8012e38:	ea08 0804 	and.w	r8, r8, r4
 8012e3c:	e7d7      	b.n	8012dee <uxr_serialize_CLIENT_Representation+0x52>
 8012e3e:	f04f 0800 	mov.w	r8, #0
 8012e42:	e7d4      	b.n	8012dee <uxr_serialize_CLIENT_Representation+0x52>
 8012e44:	ea08 0800 	and.w	r8, r8, r0
 8012e48:	e7d1      	b.n	8012dee <uxr_serialize_CLIENT_Representation+0x52>
 8012e4a:	bf00      	nop

08012e4c <uxr_deserialize_CLIENT_Representation>:
 8012e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012e50:	2204      	movs	r2, #4
 8012e52:	460c      	mov	r4, r1
 8012e54:	4605      	mov	r5, r0
 8012e56:	f7fd f95f 	bl	8010118 <ucdr_deserialize_array_uint8_t>
 8012e5a:	2202      	movs	r2, #2
 8012e5c:	4607      	mov	r7, r0
 8012e5e:	1d21      	adds	r1, r4, #4
 8012e60:	4628      	mov	r0, r5
 8012e62:	f7fd f959 	bl	8010118 <ucdr_deserialize_array_uint8_t>
 8012e66:	4038      	ands	r0, r7
 8012e68:	2202      	movs	r2, #2
 8012e6a:	1da1      	adds	r1, r4, #6
 8012e6c:	b2c6      	uxtb	r6, r0
 8012e6e:	4628      	mov	r0, r5
 8012e70:	f7fd f952 	bl	8010118 <ucdr_deserialize_array_uint8_t>
 8012e74:	2204      	movs	r2, #4
 8012e76:	4006      	ands	r6, r0
 8012e78:	f104 0108 	add.w	r1, r4, #8
 8012e7c:	4628      	mov	r0, r5
 8012e7e:	f7fd f94b 	bl	8010118 <ucdr_deserialize_array_uint8_t>
 8012e82:	f104 010c 	add.w	r1, r4, #12
 8012e86:	4006      	ands	r6, r0
 8012e88:	4628      	mov	r0, r5
 8012e8a:	f7f8 fb33 	bl	800b4f4 <ucdr_deserialize_uint8_t>
 8012e8e:	f104 010d 	add.w	r1, r4, #13
 8012e92:	ea06 0700 	and.w	r7, r6, r0
 8012e96:	4628      	mov	r0, r5
 8012e98:	f7f8 fafe 	bl	800b498 <ucdr_deserialize_bool>
 8012e9c:	7b63      	ldrb	r3, [r4, #13]
 8012e9e:	4007      	ands	r7, r0
 8012ea0:	b93b      	cbnz	r3, 8012eb2 <uxr_deserialize_CLIENT_Representation+0x66>
 8012ea2:	f104 011c 	add.w	r1, r4, #28
 8012ea6:	4628      	mov	r0, r5
 8012ea8:	f7f8 fc3a 	bl	800b720 <ucdr_deserialize_uint16_t>
 8012eac:	4038      	ands	r0, r7
 8012eae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012eb2:	f104 0110 	add.w	r1, r4, #16
 8012eb6:	4628      	mov	r0, r5
 8012eb8:	f7f8 fe4c 	bl	800bb54 <ucdr_deserialize_uint32_t>
 8012ebc:	6923      	ldr	r3, [r4, #16]
 8012ebe:	2b01      	cmp	r3, #1
 8012ec0:	d903      	bls.n	8012eca <uxr_deserialize_CLIENT_Representation+0x7e>
 8012ec2:	2301      	movs	r3, #1
 8012ec4:	75ab      	strb	r3, [r5, #22]
 8012ec6:	2700      	movs	r7, #0
 8012ec8:	e7eb      	b.n	8012ea2 <uxr_deserialize_CLIENT_Representation+0x56>
 8012eca:	b30b      	cbz	r3, 8012f10 <uxr_deserialize_CLIENT_Representation+0xc4>
 8012ecc:	2800      	cmp	r0, #0
 8012ece:	d0fa      	beq.n	8012ec6 <uxr_deserialize_CLIENT_Representation+0x7a>
 8012ed0:	46a0      	mov	r8, r4
 8012ed2:	f04f 0900 	mov.w	r9, #0
 8012ed6:	e001      	b.n	8012edc <uxr_deserialize_CLIENT_Representation+0x90>
 8012ed8:	2e00      	cmp	r6, #0
 8012eda:	d0f4      	beq.n	8012ec6 <uxr_deserialize_CLIENT_Representation+0x7a>
 8012edc:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8012ee0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012ee4:	4628      	mov	r0, r5
 8012ee6:	f005 f845 	bl	8017f74 <ucdr_deserialize_string>
 8012eea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012eee:	4606      	mov	r6, r0
 8012ef0:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8012ef4:	4628      	mov	r0, r5
 8012ef6:	f005 f83d 	bl	8017f74 <ucdr_deserialize_string>
 8012efa:	6923      	ldr	r3, [r4, #16]
 8012efc:	f109 0901 	add.w	r9, r9, #1
 8012f00:	4006      	ands	r6, r0
 8012f02:	4599      	cmp	r9, r3
 8012f04:	f108 0808 	add.w	r8, r8, #8
 8012f08:	b2f6      	uxtb	r6, r6
 8012f0a:	d3e5      	bcc.n	8012ed8 <uxr_deserialize_CLIENT_Representation+0x8c>
 8012f0c:	4037      	ands	r7, r6
 8012f0e:	e7c8      	b.n	8012ea2 <uxr_deserialize_CLIENT_Representation+0x56>
 8012f10:	4007      	ands	r7, r0
 8012f12:	e7c6      	b.n	8012ea2 <uxr_deserialize_CLIENT_Representation+0x56>

08012f14 <uxr_serialize_AGENT_Representation>:
 8012f14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f18:	2204      	movs	r2, #4
 8012f1a:	460f      	mov	r7, r1
 8012f1c:	4605      	mov	r5, r0
 8012f1e:	f7fd f897 	bl	8010050 <ucdr_serialize_array_uint8_t>
 8012f22:	2202      	movs	r2, #2
 8012f24:	4604      	mov	r4, r0
 8012f26:	1d39      	adds	r1, r7, #4
 8012f28:	4628      	mov	r0, r5
 8012f2a:	f7fd f891 	bl	8010050 <ucdr_serialize_array_uint8_t>
 8012f2e:	4020      	ands	r0, r4
 8012f30:	2202      	movs	r2, #2
 8012f32:	1db9      	adds	r1, r7, #6
 8012f34:	b2c4      	uxtb	r4, r0
 8012f36:	4628      	mov	r0, r5
 8012f38:	f7fd f88a 	bl	8010050 <ucdr_serialize_array_uint8_t>
 8012f3c:	7a39      	ldrb	r1, [r7, #8]
 8012f3e:	4004      	ands	r4, r0
 8012f40:	4628      	mov	r0, r5
 8012f42:	f7f8 fa93 	bl	800b46c <ucdr_serialize_bool>
 8012f46:	7a3b      	ldrb	r3, [r7, #8]
 8012f48:	ea00 0804 	and.w	r8, r0, r4
 8012f4c:	b913      	cbnz	r3, 8012f54 <uxr_serialize_AGENT_Representation+0x40>
 8012f4e:	4640      	mov	r0, r8
 8012f50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f54:	68f9      	ldr	r1, [r7, #12]
 8012f56:	4628      	mov	r0, r5
 8012f58:	f7f8 fccc 	bl	800b8f4 <ucdr_serialize_uint32_t>
 8012f5c:	68fb      	ldr	r3, [r7, #12]
 8012f5e:	b303      	cbz	r3, 8012fa2 <uxr_serialize_AGENT_Representation+0x8e>
 8012f60:	b1d0      	cbz	r0, 8012f98 <uxr_serialize_AGENT_Representation+0x84>
 8012f62:	463e      	mov	r6, r7
 8012f64:	f04f 0900 	mov.w	r9, #0
 8012f68:	e001      	b.n	8012f6e <uxr_serialize_AGENT_Representation+0x5a>
 8012f6a:	3608      	adds	r6, #8
 8012f6c:	b1a4      	cbz	r4, 8012f98 <uxr_serialize_AGENT_Representation+0x84>
 8012f6e:	6931      	ldr	r1, [r6, #16]
 8012f70:	4628      	mov	r0, r5
 8012f72:	f004 ffef 	bl	8017f54 <ucdr_serialize_string>
 8012f76:	6971      	ldr	r1, [r6, #20]
 8012f78:	4604      	mov	r4, r0
 8012f7a:	4628      	mov	r0, r5
 8012f7c:	f004 ffea 	bl	8017f54 <ucdr_serialize_string>
 8012f80:	68fb      	ldr	r3, [r7, #12]
 8012f82:	f109 0901 	add.w	r9, r9, #1
 8012f86:	4004      	ands	r4, r0
 8012f88:	4599      	cmp	r9, r3
 8012f8a:	b2e4      	uxtb	r4, r4
 8012f8c:	d3ed      	bcc.n	8012f6a <uxr_serialize_AGENT_Representation+0x56>
 8012f8e:	ea08 0804 	and.w	r8, r8, r4
 8012f92:	4640      	mov	r0, r8
 8012f94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f98:	f04f 0800 	mov.w	r8, #0
 8012f9c:	4640      	mov	r0, r8
 8012f9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012fa2:	ea08 0800 	and.w	r8, r8, r0
 8012fa6:	e7d2      	b.n	8012f4e <uxr_serialize_AGENT_Representation+0x3a>

08012fa8 <uxr_serialize_DATAWRITER_Representation>:
 8012fa8:	b570      	push	{r4, r5, r6, lr}
 8012faa:	460d      	mov	r5, r1
 8012fac:	7809      	ldrb	r1, [r1, #0]
 8012fae:	4606      	mov	r6, r0
 8012fb0:	f7f8 fa8a 	bl	800b4c8 <ucdr_serialize_uint8_t>
 8012fb4:	4604      	mov	r4, r0
 8012fb6:	b130      	cbz	r0, 8012fc6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8012fb8:	782b      	ldrb	r3, [r5, #0]
 8012fba:	2b02      	cmp	r3, #2
 8012fbc:	d00c      	beq.n	8012fd8 <uxr_serialize_DATAWRITER_Representation+0x30>
 8012fbe:	2b03      	cmp	r3, #3
 8012fc0:	d010      	beq.n	8012fe4 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8012fc2:	2b01      	cmp	r3, #1
 8012fc4:	d008      	beq.n	8012fd8 <uxr_serialize_DATAWRITER_Representation+0x30>
 8012fc6:	2202      	movs	r2, #2
 8012fc8:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8012fcc:	4630      	mov	r0, r6
 8012fce:	f7fd f83f 	bl	8010050 <ucdr_serialize_array_uint8_t>
 8012fd2:	4020      	ands	r0, r4
 8012fd4:	b2c0      	uxtb	r0, r0
 8012fd6:	bd70      	pop	{r4, r5, r6, pc}
 8012fd8:	6869      	ldr	r1, [r5, #4]
 8012fda:	4630      	mov	r0, r6
 8012fdc:	f004 ffba 	bl	8017f54 <ucdr_serialize_string>
 8012fe0:	4604      	mov	r4, r0
 8012fe2:	e7f0      	b.n	8012fc6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8012fe4:	4629      	mov	r1, r5
 8012fe6:	4630      	mov	r0, r6
 8012fe8:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8012fec:	3104      	adds	r1, #4
 8012fee:	f7fd f9cd 	bl	801038c <ucdr_serialize_sequence_uint8_t>
 8012ff2:	4604      	mov	r4, r0
 8012ff4:	e7e7      	b.n	8012fc6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8012ff6:	bf00      	nop

08012ff8 <uxr_serialize_ObjectVariant.part.0>:
 8012ff8:	b570      	push	{r4, r5, r6, lr}
 8012ffa:	780b      	ldrb	r3, [r1, #0]
 8012ffc:	3b01      	subs	r3, #1
 8012ffe:	460c      	mov	r4, r1
 8013000:	4605      	mov	r5, r0
 8013002:	2b0d      	cmp	r3, #13
 8013004:	d854      	bhi.n	80130b0 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8013006:	e8df f003 	tbb	[pc, r3]
 801300a:	0730      	.short	0x0730
 801300c:	07071b1b 	.word	0x07071b1b
 8013010:	0c530707 	.word	0x0c530707
 8013014:	494e0c0c 	.word	0x494e0c0c
 8013018:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801301c:	3104      	adds	r1, #4
 801301e:	f7ff bfc3 	b.w	8012fa8 <uxr_serialize_DATAWRITER_Representation>
 8013022:	7909      	ldrb	r1, [r1, #4]
 8013024:	f7f8 fa50 	bl	800b4c8 <ucdr_serialize_uint8_t>
 8013028:	b1e8      	cbz	r0, 8013066 <uxr_serialize_ObjectVariant.part.0+0x6e>
 801302a:	7923      	ldrb	r3, [r4, #4]
 801302c:	2b01      	cmp	r3, #1
 801302e:	d001      	beq.n	8013034 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8013030:	2b02      	cmp	r3, #2
 8013032:	d13d      	bne.n	80130b0 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8013034:	68a1      	ldr	r1, [r4, #8]
 8013036:	4628      	mov	r0, r5
 8013038:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801303c:	f004 bf8a 	b.w	8017f54 <ucdr_serialize_string>
 8013040:	7909      	ldrb	r1, [r1, #4]
 8013042:	f7f8 fa41 	bl	800b4c8 <ucdr_serialize_uint8_t>
 8013046:	4606      	mov	r6, r0
 8013048:	b120      	cbz	r0, 8013054 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801304a:	7923      	ldrb	r3, [r4, #4]
 801304c:	2b02      	cmp	r3, #2
 801304e:	d039      	beq.n	80130c4 <uxr_serialize_ObjectVariant.part.0+0xcc>
 8013050:	2b03      	cmp	r3, #3
 8013052:	d02f      	beq.n	80130b4 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8013054:	2202      	movs	r2, #2
 8013056:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 801305a:	4628      	mov	r0, r5
 801305c:	f7fc fff8 	bl	8010050 <ucdr_serialize_array_uint8_t>
 8013060:	4030      	ands	r0, r6
 8013062:	b2c0      	uxtb	r0, r0
 8013064:	bd70      	pop	{r4, r5, r6, pc}
 8013066:	2000      	movs	r0, #0
 8013068:	bd70      	pop	{r4, r5, r6, pc}
 801306a:	7909      	ldrb	r1, [r1, #4]
 801306c:	f7f8 fa2c 	bl	800b4c8 <ucdr_serialize_uint8_t>
 8013070:	4606      	mov	r6, r0
 8013072:	b158      	cbz	r0, 801308c <uxr_serialize_ObjectVariant.part.0+0x94>
 8013074:	7923      	ldrb	r3, [r4, #4]
 8013076:	2b02      	cmp	r3, #2
 8013078:	d003      	beq.n	8013082 <uxr_serialize_ObjectVariant.part.0+0x8a>
 801307a:	2b03      	cmp	r3, #3
 801307c:	d028      	beq.n	80130d0 <uxr_serialize_ObjectVariant.part.0+0xd8>
 801307e:	2b01      	cmp	r3, #1
 8013080:	d104      	bne.n	801308c <uxr_serialize_ObjectVariant.part.0+0x94>
 8013082:	68a1      	ldr	r1, [r4, #8]
 8013084:	4628      	mov	r0, r5
 8013086:	f004 ff65 	bl	8017f54 <ucdr_serialize_string>
 801308a:	4606      	mov	r6, r0
 801308c:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8013090:	4628      	mov	r0, r5
 8013092:	f7f8 ff55 	bl	800bf40 <ucdr_serialize_int16_t>
 8013096:	4030      	ands	r0, r6
 8013098:	b2c0      	uxtb	r0, r0
 801309a:	bd70      	pop	{r4, r5, r6, pc}
 801309c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80130a0:	3104      	adds	r1, #4
 80130a2:	f7ff be7b 	b.w	8012d9c <uxr_serialize_CLIENT_Representation>
 80130a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80130aa:	3104      	adds	r1, #4
 80130ac:	f7ff bf32 	b.w	8012f14 <uxr_serialize_AGENT_Representation>
 80130b0:	2001      	movs	r0, #1
 80130b2:	bd70      	pop	{r4, r5, r6, pc}
 80130b4:	68a2      	ldr	r2, [r4, #8]
 80130b6:	f104 010c 	add.w	r1, r4, #12
 80130ba:	4628      	mov	r0, r5
 80130bc:	f7fd f966 	bl	801038c <ucdr_serialize_sequence_uint8_t>
 80130c0:	4606      	mov	r6, r0
 80130c2:	e7c7      	b.n	8013054 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80130c4:	68a1      	ldr	r1, [r4, #8]
 80130c6:	4628      	mov	r0, r5
 80130c8:	f004 ff44 	bl	8017f54 <ucdr_serialize_string>
 80130cc:	4606      	mov	r6, r0
 80130ce:	e7c1      	b.n	8013054 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80130d0:	68a2      	ldr	r2, [r4, #8]
 80130d2:	f104 010c 	add.w	r1, r4, #12
 80130d6:	4628      	mov	r0, r5
 80130d8:	f7fd f958 	bl	801038c <ucdr_serialize_sequence_uint8_t>
 80130dc:	4606      	mov	r6, r0
 80130de:	e7d5      	b.n	801308c <uxr_serialize_ObjectVariant.part.0+0x94>

080130e0 <uxr_deserialize_DATAWRITER_Representation>:
 80130e0:	b570      	push	{r4, r5, r6, lr}
 80130e2:	4606      	mov	r6, r0
 80130e4:	460d      	mov	r5, r1
 80130e6:	f7f8 fa05 	bl	800b4f4 <ucdr_deserialize_uint8_t>
 80130ea:	4604      	mov	r4, r0
 80130ec:	b130      	cbz	r0, 80130fc <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80130ee:	782b      	ldrb	r3, [r5, #0]
 80130f0:	2b02      	cmp	r3, #2
 80130f2:	d00c      	beq.n	801310e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80130f4:	2b03      	cmp	r3, #3
 80130f6:	d012      	beq.n	801311e <uxr_deserialize_DATAWRITER_Representation+0x3e>
 80130f8:	2b01      	cmp	r3, #1
 80130fa:	d008      	beq.n	801310e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80130fc:	2202      	movs	r2, #2
 80130fe:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8013102:	4630      	mov	r0, r6
 8013104:	f7fd f808 	bl	8010118 <ucdr_deserialize_array_uint8_t>
 8013108:	4020      	ands	r0, r4
 801310a:	b2c0      	uxtb	r0, r0
 801310c:	bd70      	pop	{r4, r5, r6, pc}
 801310e:	6869      	ldr	r1, [r5, #4]
 8013110:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013114:	4630      	mov	r0, r6
 8013116:	f004 ff2d 	bl	8017f74 <ucdr_deserialize_string>
 801311a:	4604      	mov	r4, r0
 801311c:	e7ee      	b.n	80130fc <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801311e:	1d2b      	adds	r3, r5, #4
 8013120:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013124:	f105 0108 	add.w	r1, r5, #8
 8013128:	4630      	mov	r0, r6
 801312a:	f7fd f941 	bl	80103b0 <ucdr_deserialize_sequence_uint8_t>
 801312e:	4604      	mov	r4, r0
 8013130:	e7e4      	b.n	80130fc <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8013132:	bf00      	nop

08013134 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8013134:	b570      	push	{r4, r5, r6, lr}
 8013136:	460d      	mov	r5, r1
 8013138:	7809      	ldrb	r1, [r1, #0]
 801313a:	4606      	mov	r6, r0
 801313c:	f7f8 f996 	bl	800b46c <ucdr_serialize_bool>
 8013140:	782b      	ldrb	r3, [r5, #0]
 8013142:	4604      	mov	r4, r0
 8013144:	b94b      	cbnz	r3, 801315a <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8013146:	7a29      	ldrb	r1, [r5, #8]
 8013148:	4630      	mov	r0, r6
 801314a:	f7f8 f98f 	bl	800b46c <ucdr_serialize_bool>
 801314e:	7a2b      	ldrb	r3, [r5, #8]
 8013150:	4004      	ands	r4, r0
 8013152:	b2e4      	uxtb	r4, r4
 8013154:	b943      	cbnz	r3, 8013168 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8013156:	4620      	mov	r0, r4
 8013158:	bd70      	pop	{r4, r5, r6, pc}
 801315a:	6869      	ldr	r1, [r5, #4]
 801315c:	4630      	mov	r0, r6
 801315e:	f004 fef9 	bl	8017f54 <ucdr_serialize_string>
 8013162:	4004      	ands	r4, r0
 8013164:	b2e4      	uxtb	r4, r4
 8013166:	e7ee      	b.n	8013146 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8013168:	68e9      	ldr	r1, [r5, #12]
 801316a:	4630      	mov	r0, r6
 801316c:	f004 fef2 	bl	8017f54 <ucdr_serialize_string>
 8013170:	4004      	ands	r4, r0
 8013172:	4620      	mov	r0, r4
 8013174:	bd70      	pop	{r4, r5, r6, pc}
 8013176:	bf00      	nop

08013178 <uxr_serialize_OBJK_Topic_Binary>:
 8013178:	b570      	push	{r4, r5, r6, lr}
 801317a:	460d      	mov	r5, r1
 801317c:	6809      	ldr	r1, [r1, #0]
 801317e:	4606      	mov	r6, r0
 8013180:	f004 fee8 	bl	8017f54 <ucdr_serialize_string>
 8013184:	7929      	ldrb	r1, [r5, #4]
 8013186:	4604      	mov	r4, r0
 8013188:	4630      	mov	r0, r6
 801318a:	f7f8 f96f 	bl	800b46c <ucdr_serialize_bool>
 801318e:	792b      	ldrb	r3, [r5, #4]
 8013190:	4004      	ands	r4, r0
 8013192:	b2e4      	uxtb	r4, r4
 8013194:	b943      	cbnz	r3, 80131a8 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8013196:	7b29      	ldrb	r1, [r5, #12]
 8013198:	4630      	mov	r0, r6
 801319a:	f7f8 f967 	bl	800b46c <ucdr_serialize_bool>
 801319e:	7b2b      	ldrb	r3, [r5, #12]
 80131a0:	4004      	ands	r4, r0
 80131a2:	b93b      	cbnz	r3, 80131b4 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 80131a4:	4620      	mov	r0, r4
 80131a6:	bd70      	pop	{r4, r5, r6, pc}
 80131a8:	68a9      	ldr	r1, [r5, #8]
 80131aa:	4630      	mov	r0, r6
 80131ac:	f004 fed2 	bl	8017f54 <ucdr_serialize_string>
 80131b0:	4004      	ands	r4, r0
 80131b2:	e7f0      	b.n	8013196 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 80131b4:	6929      	ldr	r1, [r5, #16]
 80131b6:	4630      	mov	r0, r6
 80131b8:	f004 fecc 	bl	8017f54 <ucdr_serialize_string>
 80131bc:	4004      	ands	r4, r0
 80131be:	b2e4      	uxtb	r4, r4
 80131c0:	4620      	mov	r0, r4
 80131c2:	bd70      	pop	{r4, r5, r6, pc}

080131c4 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 80131c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131c8:	460c      	mov	r4, r1
 80131ca:	7809      	ldrb	r1, [r1, #0]
 80131cc:	4606      	mov	r6, r0
 80131ce:	f7f8 f94d 	bl	800b46c <ucdr_serialize_bool>
 80131d2:	7823      	ldrb	r3, [r4, #0]
 80131d4:	4605      	mov	r5, r0
 80131d6:	b96b      	cbnz	r3, 80131f4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 80131d8:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 80131dc:	4630      	mov	r0, r6
 80131de:	f7f8 f945 	bl	800b46c <ucdr_serialize_bool>
 80131e2:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80131e6:	4005      	ands	r5, r0
 80131e8:	b2ed      	uxtb	r5, r5
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d169      	bne.n	80132c2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 80131ee:	4628      	mov	r0, r5
 80131f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131f4:	6861      	ldr	r1, [r4, #4]
 80131f6:	4630      	mov	r0, r6
 80131f8:	f7f8 fb7c 	bl	800b8f4 <ucdr_serialize_uint32_t>
 80131fc:	6863      	ldr	r3, [r4, #4]
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d06b      	beq.n	80132da <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8013202:	2800      	cmp	r0, #0
 8013204:	d067      	beq.n	80132d6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013206:	68a1      	ldr	r1, [r4, #8]
 8013208:	4630      	mov	r0, r6
 801320a:	f004 fea3 	bl	8017f54 <ucdr_serialize_string>
 801320e:	6863      	ldr	r3, [r4, #4]
 8013210:	2b01      	cmp	r3, #1
 8013212:	d953      	bls.n	80132bc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013214:	2800      	cmp	r0, #0
 8013216:	d05e      	beq.n	80132d6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013218:	68e1      	ldr	r1, [r4, #12]
 801321a:	4630      	mov	r0, r6
 801321c:	f004 fe9a 	bl	8017f54 <ucdr_serialize_string>
 8013220:	6863      	ldr	r3, [r4, #4]
 8013222:	2b02      	cmp	r3, #2
 8013224:	d94a      	bls.n	80132bc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013226:	2800      	cmp	r0, #0
 8013228:	d055      	beq.n	80132d6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801322a:	6921      	ldr	r1, [r4, #16]
 801322c:	4630      	mov	r0, r6
 801322e:	f004 fe91 	bl	8017f54 <ucdr_serialize_string>
 8013232:	6863      	ldr	r3, [r4, #4]
 8013234:	2b03      	cmp	r3, #3
 8013236:	d941      	bls.n	80132bc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013238:	2800      	cmp	r0, #0
 801323a:	d04c      	beq.n	80132d6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801323c:	6961      	ldr	r1, [r4, #20]
 801323e:	4630      	mov	r0, r6
 8013240:	f004 fe88 	bl	8017f54 <ucdr_serialize_string>
 8013244:	6863      	ldr	r3, [r4, #4]
 8013246:	2b04      	cmp	r3, #4
 8013248:	d938      	bls.n	80132bc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801324a:	2800      	cmp	r0, #0
 801324c:	d043      	beq.n	80132d6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801324e:	69a1      	ldr	r1, [r4, #24]
 8013250:	4630      	mov	r0, r6
 8013252:	f004 fe7f 	bl	8017f54 <ucdr_serialize_string>
 8013256:	6863      	ldr	r3, [r4, #4]
 8013258:	2b05      	cmp	r3, #5
 801325a:	d92f      	bls.n	80132bc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801325c:	2800      	cmp	r0, #0
 801325e:	d03a      	beq.n	80132d6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013260:	69e1      	ldr	r1, [r4, #28]
 8013262:	4630      	mov	r0, r6
 8013264:	f004 fe76 	bl	8017f54 <ucdr_serialize_string>
 8013268:	6863      	ldr	r3, [r4, #4]
 801326a:	2b06      	cmp	r3, #6
 801326c:	d926      	bls.n	80132bc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801326e:	b390      	cbz	r0, 80132d6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013270:	6a21      	ldr	r1, [r4, #32]
 8013272:	4630      	mov	r0, r6
 8013274:	f004 fe6e 	bl	8017f54 <ucdr_serialize_string>
 8013278:	6863      	ldr	r3, [r4, #4]
 801327a:	2b07      	cmp	r3, #7
 801327c:	d91e      	bls.n	80132bc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801327e:	b350      	cbz	r0, 80132d6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013280:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8013282:	4630      	mov	r0, r6
 8013284:	f004 fe66 	bl	8017f54 <ucdr_serialize_string>
 8013288:	6863      	ldr	r3, [r4, #4]
 801328a:	2b08      	cmp	r3, #8
 801328c:	d916      	bls.n	80132bc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801328e:	b310      	cbz	r0, 80132d6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013290:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8013292:	4630      	mov	r0, r6
 8013294:	f004 fe5e 	bl	8017f54 <ucdr_serialize_string>
 8013298:	6863      	ldr	r3, [r4, #4]
 801329a:	2b09      	cmp	r3, #9
 801329c:	d90e      	bls.n	80132bc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801329e:	b1d0      	cbz	r0, 80132d6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80132a0:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 80132a4:	2709      	movs	r7, #9
 80132a6:	e000      	b.n	80132aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 80132a8:	b1a8      	cbz	r0, 80132d6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80132aa:	f858 1b04 	ldr.w	r1, [r8], #4
 80132ae:	4630      	mov	r0, r6
 80132b0:	f004 fe50 	bl	8017f54 <ucdr_serialize_string>
 80132b4:	6862      	ldr	r2, [r4, #4]
 80132b6:	3701      	adds	r7, #1
 80132b8:	4297      	cmp	r7, r2
 80132ba:	d3f5      	bcc.n	80132a8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 80132bc:	4005      	ands	r5, r0
 80132be:	b2ed      	uxtb	r5, r5
 80132c0:	e78a      	b.n	80131d8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80132c2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80132c4:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80132c8:	4630      	mov	r0, r6
 80132ca:	f7fd f85f 	bl	801038c <ucdr_serialize_sequence_uint8_t>
 80132ce:	4005      	ands	r5, r0
 80132d0:	4628      	mov	r0, r5
 80132d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132d6:	2500      	movs	r5, #0
 80132d8:	e77e      	b.n	80131d8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80132da:	4028      	ands	r0, r5
 80132dc:	b2c5      	uxtb	r5, r0
 80132de:	e77b      	b.n	80131d8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

080132e0 <uxr_serialize_OBJK_Publisher_Binary>:
 80132e0:	b570      	push	{r4, r5, r6, lr}
 80132e2:	460d      	mov	r5, r1
 80132e4:	7809      	ldrb	r1, [r1, #0]
 80132e6:	4606      	mov	r6, r0
 80132e8:	f7f8 f8c0 	bl	800b46c <ucdr_serialize_bool>
 80132ec:	782b      	ldrb	r3, [r5, #0]
 80132ee:	4604      	mov	r4, r0
 80132f0:	b94b      	cbnz	r3, 8013306 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 80132f2:	7a29      	ldrb	r1, [r5, #8]
 80132f4:	4630      	mov	r0, r6
 80132f6:	f7f8 f8b9 	bl	800b46c <ucdr_serialize_bool>
 80132fa:	7a2b      	ldrb	r3, [r5, #8]
 80132fc:	4004      	ands	r4, r0
 80132fe:	b2e4      	uxtb	r4, r4
 8013300:	b943      	cbnz	r3, 8013314 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8013302:	4620      	mov	r0, r4
 8013304:	bd70      	pop	{r4, r5, r6, pc}
 8013306:	6869      	ldr	r1, [r5, #4]
 8013308:	4630      	mov	r0, r6
 801330a:	f004 fe23 	bl	8017f54 <ucdr_serialize_string>
 801330e:	4004      	ands	r4, r0
 8013310:	b2e4      	uxtb	r4, r4
 8013312:	e7ee      	b.n	80132f2 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8013314:	f105 010c 	add.w	r1, r5, #12
 8013318:	4630      	mov	r0, r6
 801331a:	f7ff ff53 	bl	80131c4 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 801331e:	4004      	ands	r4, r0
 8013320:	4620      	mov	r0, r4
 8013322:	bd70      	pop	{r4, r5, r6, pc}

08013324 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8013324:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8013328:	4688      	mov	r8, r1
 801332a:	8809      	ldrh	r1, [r1, #0]
 801332c:	4681      	mov	r9, r0
 801332e:	f7f8 f8f7 	bl	800b520 <ucdr_serialize_uint16_t>
 8013332:	f898 1002 	ldrb.w	r1, [r8, #2]
 8013336:	4606      	mov	r6, r0
 8013338:	4648      	mov	r0, r9
 801333a:	f7f8 f897 	bl	800b46c <ucdr_serialize_bool>
 801333e:	f898 3002 	ldrb.w	r3, [r8, #2]
 8013342:	4006      	ands	r6, r0
 8013344:	b2f5      	uxtb	r5, r6
 8013346:	b9eb      	cbnz	r3, 8013384 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8013348:	f898 1006 	ldrb.w	r1, [r8, #6]
 801334c:	4648      	mov	r0, r9
 801334e:	f7f8 f88d 	bl	800b46c <ucdr_serialize_bool>
 8013352:	f898 3006 	ldrb.w	r3, [r8, #6]
 8013356:	4005      	ands	r5, r0
 8013358:	bb7b      	cbnz	r3, 80133ba <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 801335a:	f898 100c 	ldrb.w	r1, [r8, #12]
 801335e:	4648      	mov	r0, r9
 8013360:	f7f8 f884 	bl	800b46c <ucdr_serialize_bool>
 8013364:	f898 300c 	ldrb.w	r3, [r8, #12]
 8013368:	4005      	ands	r5, r0
 801336a:	b9f3      	cbnz	r3, 80133aa <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 801336c:	f898 1014 	ldrb.w	r1, [r8, #20]
 8013370:	4648      	mov	r0, r9
 8013372:	f7f8 f87b 	bl	800b46c <ucdr_serialize_bool>
 8013376:	f898 3014 	ldrb.w	r3, [r8, #20]
 801337a:	4005      	ands	r5, r0
 801337c:	b94b      	cbnz	r3, 8013392 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 801337e:	4628      	mov	r0, r5
 8013380:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8013384:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8013388:	4648      	mov	r0, r9
 801338a:	f7f8 f8c9 	bl	800b520 <ucdr_serialize_uint16_t>
 801338e:	4005      	ands	r5, r0
 8013390:	e7da      	b.n	8013348 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8013392:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8013396:	f108 011c 	add.w	r1, r8, #28
 801339a:	4648      	mov	r0, r9
 801339c:	f7fc fff6 	bl	801038c <ucdr_serialize_sequence_uint8_t>
 80133a0:	4028      	ands	r0, r5
 80133a2:	b2c5      	uxtb	r5, r0
 80133a4:	4628      	mov	r0, r5
 80133a6:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80133aa:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80133ae:	4648      	mov	r0, r9
 80133b0:	f7f8 faa0 	bl	800b8f4 <ucdr_serialize_uint32_t>
 80133b4:	4028      	ands	r0, r5
 80133b6:	b2c5      	uxtb	r5, r0
 80133b8:	e7d8      	b.n	801336c <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 80133ba:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80133be:	4648      	mov	r0, r9
 80133c0:	f7f8 fa98 	bl	800b8f4 <ucdr_serialize_uint32_t>
 80133c4:	4028      	ands	r0, r5
 80133c6:	b2c5      	uxtb	r5, r0
 80133c8:	e7c7      	b.n	801335a <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 80133ca:	bf00      	nop

080133cc <uxr_serialize_OBJK_DataWriter_Binary>:
 80133cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133ce:	2202      	movs	r2, #2
 80133d0:	460d      	mov	r5, r1
 80133d2:	4606      	mov	r6, r0
 80133d4:	f7fc fe3c 	bl	8010050 <ucdr_serialize_array_uint8_t>
 80133d8:	78a9      	ldrb	r1, [r5, #2]
 80133da:	4604      	mov	r4, r0
 80133dc:	4630      	mov	r0, r6
 80133de:	f7f8 f845 	bl	800b46c <ucdr_serialize_bool>
 80133e2:	78ab      	ldrb	r3, [r5, #2]
 80133e4:	4004      	ands	r4, r0
 80133e6:	b2e4      	uxtb	r4, r4
 80133e8:	b90b      	cbnz	r3, 80133ee <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 80133ea:	4620      	mov	r0, r4
 80133ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80133ee:	f105 0108 	add.w	r1, r5, #8
 80133f2:	4630      	mov	r0, r6
 80133f4:	f7ff ff96 	bl	8013324 <uxr_serialize_OBJK_Endpoint_QosBinary>
 80133f8:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 80133fc:	4607      	mov	r7, r0
 80133fe:	4630      	mov	r0, r6
 8013400:	f7f8 f834 	bl	800b46c <ucdr_serialize_bool>
 8013404:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8013408:	4038      	ands	r0, r7
 801340a:	b2c7      	uxtb	r7, r0
 801340c:	b913      	cbnz	r3, 8013414 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 801340e:	403c      	ands	r4, r7
 8013410:	4620      	mov	r0, r4
 8013412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013414:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8013418:	4630      	mov	r0, r6
 801341a:	f7f8 fcc1 	bl	800bda0 <ucdr_serialize_uint64_t>
 801341e:	4007      	ands	r7, r0
 8013420:	e7f5      	b.n	801340e <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8013422:	bf00      	nop

08013424 <uxr_serialize_OBJK_Replier_Binary>:
 8013424:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 8013428:	460f      	mov	r7, r1
 801342a:	6809      	ldr	r1, [r1, #0]
 801342c:	4680      	mov	r8, r0
 801342e:	f004 fd91 	bl	8017f54 <ucdr_serialize_string>
 8013432:	6879      	ldr	r1, [r7, #4]
 8013434:	4605      	mov	r5, r0
 8013436:	4640      	mov	r0, r8
 8013438:	f004 fd8c 	bl	8017f54 <ucdr_serialize_string>
 801343c:	68b9      	ldr	r1, [r7, #8]
 801343e:	4005      	ands	r5, r0
 8013440:	4640      	mov	r0, r8
 8013442:	f004 fd87 	bl	8017f54 <ucdr_serialize_string>
 8013446:	b2ec      	uxtb	r4, r5
 8013448:	4004      	ands	r4, r0
 801344a:	7b39      	ldrb	r1, [r7, #12]
 801344c:	4640      	mov	r0, r8
 801344e:	f7f8 f80d 	bl	800b46c <ucdr_serialize_bool>
 8013452:	7b3b      	ldrb	r3, [r7, #12]
 8013454:	4004      	ands	r4, r0
 8013456:	b94b      	cbnz	r3, 801346c <uxr_serialize_OBJK_Replier_Binary+0x48>
 8013458:	7d39      	ldrb	r1, [r7, #20]
 801345a:	4640      	mov	r0, r8
 801345c:	f7f8 f806 	bl	800b46c <ucdr_serialize_bool>
 8013460:	7d3b      	ldrb	r3, [r7, #20]
 8013462:	4004      	ands	r4, r0
 8013464:	b943      	cbnz	r3, 8013478 <uxr_serialize_OBJK_Replier_Binary+0x54>
 8013466:	4620      	mov	r0, r4
 8013468:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 801346c:	6939      	ldr	r1, [r7, #16]
 801346e:	4640      	mov	r0, r8
 8013470:	f004 fd70 	bl	8017f54 <ucdr_serialize_string>
 8013474:	4004      	ands	r4, r0
 8013476:	e7ef      	b.n	8013458 <uxr_serialize_OBJK_Replier_Binary+0x34>
 8013478:	69b9      	ldr	r1, [r7, #24]
 801347a:	4640      	mov	r0, r8
 801347c:	f004 fd6a 	bl	8017f54 <ucdr_serialize_string>
 8013480:	4004      	ands	r4, r0
 8013482:	b2e4      	uxtb	r4, r4
 8013484:	4620      	mov	r0, r4
 8013486:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 801348a:	bf00      	nop

0801348c <uxr_deserialize_ObjectVariant>:
 801348c:	b570      	push	{r4, r5, r6, lr}
 801348e:	4605      	mov	r5, r0
 8013490:	460e      	mov	r6, r1
 8013492:	f7f8 f82f 	bl	800b4f4 <ucdr_deserialize_uint8_t>
 8013496:	b168      	cbz	r0, 80134b4 <uxr_deserialize_ObjectVariant+0x28>
 8013498:	7833      	ldrb	r3, [r6, #0]
 801349a:	3b01      	subs	r3, #1
 801349c:	4604      	mov	r4, r0
 801349e:	2b0d      	cmp	r3, #13
 80134a0:	d809      	bhi.n	80134b6 <uxr_deserialize_ObjectVariant+0x2a>
 80134a2:	e8df f003 	tbb	[pc, r3]
 80134a6:	0a41      	.short	0x0a41
 80134a8:	0a0a2323 	.word	0x0a0a2323
 80134ac:	10080a0a 	.word	0x10080a0a
 80134b0:	565c1010 	.word	0x565c1010
 80134b4:	2400      	movs	r4, #0
 80134b6:	4620      	mov	r0, r4
 80134b8:	bd70      	pop	{r4, r5, r6, pc}
 80134ba:	1d31      	adds	r1, r6, #4
 80134bc:	4628      	mov	r0, r5
 80134be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80134c2:	f7ff be0d 	b.w	80130e0 <uxr_deserialize_DATAWRITER_Representation>
 80134c6:	1d31      	adds	r1, r6, #4
 80134c8:	4628      	mov	r0, r5
 80134ca:	f7f8 f813 	bl	800b4f4 <ucdr_deserialize_uint8_t>
 80134ce:	2800      	cmp	r0, #0
 80134d0:	d0f0      	beq.n	80134b4 <uxr_deserialize_ObjectVariant+0x28>
 80134d2:	7933      	ldrb	r3, [r6, #4]
 80134d4:	2b01      	cmp	r3, #1
 80134d6:	d001      	beq.n	80134dc <uxr_deserialize_ObjectVariant+0x50>
 80134d8:	2b02      	cmp	r3, #2
 80134da:	d1ec      	bne.n	80134b6 <uxr_deserialize_ObjectVariant+0x2a>
 80134dc:	68b1      	ldr	r1, [r6, #8]
 80134de:	4628      	mov	r0, r5
 80134e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80134e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80134e8:	f004 bd44 	b.w	8017f74 <ucdr_deserialize_string>
 80134ec:	1d31      	adds	r1, r6, #4
 80134ee:	4628      	mov	r0, r5
 80134f0:	f7f8 f800 	bl	800b4f4 <ucdr_deserialize_uint8_t>
 80134f4:	4604      	mov	r4, r0
 80134f6:	b170      	cbz	r0, 8013516 <uxr_deserialize_ObjectVariant+0x8a>
 80134f8:	7933      	ldrb	r3, [r6, #4]
 80134fa:	2b02      	cmp	r3, #2
 80134fc:	d04c      	beq.n	8013598 <uxr_deserialize_ObjectVariant+0x10c>
 80134fe:	2b03      	cmp	r3, #3
 8013500:	d109      	bne.n	8013516 <uxr_deserialize_ObjectVariant+0x8a>
 8013502:	f106 0308 	add.w	r3, r6, #8
 8013506:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801350a:	f106 010c 	add.w	r1, r6, #12
 801350e:	4628      	mov	r0, r5
 8013510:	f7fc ff4e 	bl	80103b0 <ucdr_deserialize_sequence_uint8_t>
 8013514:	4604      	mov	r4, r0
 8013516:	2202      	movs	r2, #2
 8013518:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801351c:	4628      	mov	r0, r5
 801351e:	f7fc fdfb 	bl	8010118 <ucdr_deserialize_array_uint8_t>
 8013522:	4020      	ands	r0, r4
 8013524:	b2c4      	uxtb	r4, r0
 8013526:	e7c6      	b.n	80134b6 <uxr_deserialize_ObjectVariant+0x2a>
 8013528:	1d31      	adds	r1, r6, #4
 801352a:	4628      	mov	r0, r5
 801352c:	f7f7 ffe2 	bl	800b4f4 <ucdr_deserialize_uint8_t>
 8013530:	4604      	mov	r4, r0
 8013532:	b130      	cbz	r0, 8013542 <uxr_deserialize_ObjectVariant+0xb6>
 8013534:	7933      	ldrb	r3, [r6, #4]
 8013536:	2b02      	cmp	r3, #2
 8013538:	d036      	beq.n	80135a8 <uxr_deserialize_ObjectVariant+0x11c>
 801353a:	2b03      	cmp	r3, #3
 801353c:	d03c      	beq.n	80135b8 <uxr_deserialize_ObjectVariant+0x12c>
 801353e:	2b01      	cmp	r3, #1
 8013540:	d032      	beq.n	80135a8 <uxr_deserialize_ObjectVariant+0x11c>
 8013542:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8013546:	4628      	mov	r0, r5
 8013548:	f7f8 fd7a 	bl	800c040 <ucdr_deserialize_int16_t>
 801354c:	4020      	ands	r0, r4
 801354e:	b2c4      	uxtb	r4, r0
 8013550:	e7b1      	b.n	80134b6 <uxr_deserialize_ObjectVariant+0x2a>
 8013552:	1d31      	adds	r1, r6, #4
 8013554:	4628      	mov	r0, r5
 8013556:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801355a:	f7ff bc77 	b.w	8012e4c <uxr_deserialize_CLIENT_Representation>
 801355e:	2204      	movs	r2, #4
 8013560:	18b1      	adds	r1, r6, r2
 8013562:	4628      	mov	r0, r5
 8013564:	f7fc fdd8 	bl	8010118 <ucdr_deserialize_array_uint8_t>
 8013568:	2202      	movs	r2, #2
 801356a:	f106 0108 	add.w	r1, r6, #8
 801356e:	4604      	mov	r4, r0
 8013570:	4628      	mov	r0, r5
 8013572:	f7fc fdd1 	bl	8010118 <ucdr_deserialize_array_uint8_t>
 8013576:	2202      	movs	r2, #2
 8013578:	4004      	ands	r4, r0
 801357a:	f106 010a 	add.w	r1, r6, #10
 801357e:	4628      	mov	r0, r5
 8013580:	f7fc fdca 	bl	8010118 <ucdr_deserialize_array_uint8_t>
 8013584:	b2e4      	uxtb	r4, r4
 8013586:	4603      	mov	r3, r0
 8013588:	f106 010c 	add.w	r1, r6, #12
 801358c:	4628      	mov	r0, r5
 801358e:	401c      	ands	r4, r3
 8013590:	f7f7 ff82 	bl	800b498 <ucdr_deserialize_bool>
 8013594:	4004      	ands	r4, r0
 8013596:	e78e      	b.n	80134b6 <uxr_deserialize_ObjectVariant+0x2a>
 8013598:	68b1      	ldr	r1, [r6, #8]
 801359a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801359e:	4628      	mov	r0, r5
 80135a0:	f004 fce8 	bl	8017f74 <ucdr_deserialize_string>
 80135a4:	4604      	mov	r4, r0
 80135a6:	e7b6      	b.n	8013516 <uxr_deserialize_ObjectVariant+0x8a>
 80135a8:	68b1      	ldr	r1, [r6, #8]
 80135aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80135ae:	4628      	mov	r0, r5
 80135b0:	f004 fce0 	bl	8017f74 <ucdr_deserialize_string>
 80135b4:	4604      	mov	r4, r0
 80135b6:	e7c4      	b.n	8013542 <uxr_deserialize_ObjectVariant+0xb6>
 80135b8:	f106 0308 	add.w	r3, r6, #8
 80135bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80135c0:	f106 010c 	add.w	r1, r6, #12
 80135c4:	4628      	mov	r0, r5
 80135c6:	f7fc fef3 	bl	80103b0 <ucdr_deserialize_sequence_uint8_t>
 80135ca:	4604      	mov	r4, r0
 80135cc:	e7b9      	b.n	8013542 <uxr_deserialize_ObjectVariant+0xb6>
 80135ce:	bf00      	nop

080135d0 <uxr_deserialize_BaseObjectRequest>:
 80135d0:	b570      	push	{r4, r5, r6, lr}
 80135d2:	2202      	movs	r2, #2
 80135d4:	4605      	mov	r5, r0
 80135d6:	460e      	mov	r6, r1
 80135d8:	f7fc fd9e 	bl	8010118 <ucdr_deserialize_array_uint8_t>
 80135dc:	2202      	movs	r2, #2
 80135de:	4604      	mov	r4, r0
 80135e0:	18b1      	adds	r1, r6, r2
 80135e2:	4628      	mov	r0, r5
 80135e4:	f7fc fd98 	bl	8010118 <ucdr_deserialize_array_uint8_t>
 80135e8:	4020      	ands	r0, r4
 80135ea:	b2c0      	uxtb	r0, r0
 80135ec:	bd70      	pop	{r4, r5, r6, pc}
 80135ee:	bf00      	nop

080135f0 <uxr_serialize_ActivityInfoVariant>:
 80135f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80135f4:	460d      	mov	r5, r1
 80135f6:	7809      	ldrb	r1, [r1, #0]
 80135f8:	4607      	mov	r7, r0
 80135fa:	f7f7 ff65 	bl	800b4c8 <ucdr_serialize_uint8_t>
 80135fe:	4681      	mov	r9, r0
 8013600:	b138      	cbz	r0, 8013612 <uxr_serialize_ActivityInfoVariant+0x22>
 8013602:	782b      	ldrb	r3, [r5, #0]
 8013604:	2b06      	cmp	r3, #6
 8013606:	f000 8082 	beq.w	801370e <uxr_serialize_ActivityInfoVariant+0x11e>
 801360a:	2b0d      	cmp	r3, #13
 801360c:	d016      	beq.n	801363c <uxr_serialize_ActivityInfoVariant+0x4c>
 801360e:	2b05      	cmp	r3, #5
 8013610:	d002      	beq.n	8013618 <uxr_serialize_ActivityInfoVariant+0x28>
 8013612:	4648      	mov	r0, r9
 8013614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013618:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 801361c:	4638      	mov	r0, r7
 801361e:	f7f8 fc8f 	bl	800bf40 <ucdr_serialize_int16_t>
 8013622:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8013626:	4681      	mov	r9, r0
 8013628:	4638      	mov	r0, r7
 801362a:	f7f8 fbb9 	bl	800bda0 <ucdr_serialize_uint64_t>
 801362e:	ea09 0000 	and.w	r0, r9, r0
 8013632:	fa5f f980 	uxtb.w	r9, r0
 8013636:	4648      	mov	r0, r9
 8013638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801363c:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8013640:	4638      	mov	r0, r7
 8013642:	f7f8 fc7d 	bl	800bf40 <ucdr_serialize_int16_t>
 8013646:	68e9      	ldr	r1, [r5, #12]
 8013648:	4681      	mov	r9, r0
 801364a:	4638      	mov	r0, r7
 801364c:	f7f8 f952 	bl	800b8f4 <ucdr_serialize_uint32_t>
 8013650:	68eb      	ldr	r3, [r5, #12]
 8013652:	2b00      	cmp	r3, #0
 8013654:	d0eb      	beq.n	801362e <uxr_serialize_ActivityInfoVariant+0x3e>
 8013656:	b320      	cbz	r0, 80136a2 <uxr_serialize_ActivityInfoVariant+0xb2>
 8013658:	f105 080c 	add.w	r8, r5, #12
 801365c:	2600      	movs	r6, #0
 801365e:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 8013662:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8013666:	f89a 1010 	ldrb.w	r1, [sl, #16]
 801366a:	4638      	mov	r0, r7
 801366c:	f7f7 ff2c 	bl	800b4c8 <ucdr_serialize_uint8_t>
 8013670:	2800      	cmp	r0, #0
 8013672:	d053      	beq.n	801371c <uxr_serialize_ActivityInfoVariant+0x12c>
 8013674:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8013678:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 801367c:	0074      	lsls	r4, r6, #1
 801367e:	00c9      	lsls	r1, r1, #3
 8013680:	2b03      	cmp	r3, #3
 8013682:	d854      	bhi.n	801372e <uxr_serialize_ActivityInfoVariant+0x13e>
 8013684:	e8df f003 	tbb	[pc, r3]
 8013688:	02102132 	.word	0x02102132
 801368c:	4441      	add	r1, r8
 801368e:	4638      	mov	r0, r7
 8013690:	6889      	ldr	r1, [r1, #8]
 8013692:	f004 fc5f 	bl	8017f54 <ucdr_serialize_string>
 8013696:	68ea      	ldr	r2, [r5, #12]
 8013698:	3601      	adds	r6, #1
 801369a:	4296      	cmp	r6, r2
 801369c:	d242      	bcs.n	8013724 <uxr_serialize_ActivityInfoVariant+0x134>
 801369e:	2800      	cmp	r0, #0
 80136a0:	d1dd      	bne.n	801365e <uxr_serialize_ActivityInfoVariant+0x6e>
 80136a2:	f04f 0900 	mov.w	r9, #0
 80136a6:	e7b4      	b.n	8013612 <uxr_serialize_ActivityInfoVariant+0x22>
 80136a8:	3108      	adds	r1, #8
 80136aa:	4441      	add	r1, r8
 80136ac:	2210      	movs	r2, #16
 80136ae:	4638      	mov	r0, r7
 80136b0:	f7fc fcce 	bl	8010050 <ucdr_serialize_array_uint8_t>
 80136b4:	4434      	add	r4, r6
 80136b6:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 80136ba:	4604      	mov	r4, r0
 80136bc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80136be:	4638      	mov	r0, r7
 80136c0:	f7f8 f918 	bl	800b8f4 <ucdr_serialize_uint32_t>
 80136c4:	4020      	ands	r0, r4
 80136c6:	b2c0      	uxtb	r0, r0
 80136c8:	e7e5      	b.n	8013696 <uxr_serialize_ActivityInfoVariant+0xa6>
 80136ca:	3108      	adds	r1, #8
 80136cc:	4441      	add	r1, r8
 80136ce:	2204      	movs	r2, #4
 80136d0:	4638      	mov	r0, r7
 80136d2:	f7fc fcbd 	bl	8010050 <ucdr_serialize_array_uint8_t>
 80136d6:	4434      	add	r4, r6
 80136d8:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 80136dc:	4604      	mov	r4, r0
 80136de:	8b19      	ldrh	r1, [r3, #24]
 80136e0:	4638      	mov	r0, r7
 80136e2:	f7f7 ff1d 	bl	800b520 <ucdr_serialize_uint16_t>
 80136e6:	4020      	ands	r0, r4
 80136e8:	b2c0      	uxtb	r0, r0
 80136ea:	e7d4      	b.n	8013696 <uxr_serialize_ActivityInfoVariant+0xa6>
 80136ec:	3108      	adds	r1, #8
 80136ee:	4441      	add	r1, r8
 80136f0:	2202      	movs	r2, #2
 80136f2:	4638      	mov	r0, r7
 80136f4:	f7fc fcac 	bl	8010050 <ucdr_serialize_array_uint8_t>
 80136f8:	4434      	add	r4, r6
 80136fa:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 80136fe:	4604      	mov	r4, r0
 8013700:	7d99      	ldrb	r1, [r3, #22]
 8013702:	4638      	mov	r0, r7
 8013704:	f7f7 fee0 	bl	800b4c8 <ucdr_serialize_uint8_t>
 8013708:	4020      	ands	r0, r4
 801370a:	b2c0      	uxtb	r0, r0
 801370c:	e7c3      	b.n	8013696 <uxr_serialize_ActivityInfoVariant+0xa6>
 801370e:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8013712:	4638      	mov	r0, r7
 8013714:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013718:	f7f8 bc12 	b.w	800bf40 <ucdr_serialize_int16_t>
 801371c:	68ea      	ldr	r2, [r5, #12]
 801371e:	3601      	adds	r6, #1
 8013720:	42b2      	cmp	r2, r6
 8013722:	d8be      	bhi.n	80136a2 <uxr_serialize_ActivityInfoVariant+0xb2>
 8013724:	ea09 0900 	and.w	r9, r9, r0
 8013728:	fa5f f989 	uxtb.w	r9, r9
 801372c:	e771      	b.n	8013612 <uxr_serialize_ActivityInfoVariant+0x22>
 801372e:	68eb      	ldr	r3, [r5, #12]
 8013730:	3601      	adds	r6, #1
 8013732:	429e      	cmp	r6, r3
 8013734:	f10a 0a18 	add.w	sl, sl, #24
 8013738:	d395      	bcc.n	8013666 <uxr_serialize_ActivityInfoVariant+0x76>
 801373a:	e76a      	b.n	8013612 <uxr_serialize_ActivityInfoVariant+0x22>

0801373c <uxr_deserialize_BaseObjectReply>:
 801373c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013740:	2202      	movs	r2, #2
 8013742:	4606      	mov	r6, r0
 8013744:	460f      	mov	r7, r1
 8013746:	f7fc fce7 	bl	8010118 <ucdr_deserialize_array_uint8_t>
 801374a:	2202      	movs	r2, #2
 801374c:	18b9      	adds	r1, r7, r2
 801374e:	4605      	mov	r5, r0
 8013750:	4630      	mov	r0, r6
 8013752:	f7fc fce1 	bl	8010118 <ucdr_deserialize_array_uint8_t>
 8013756:	1d39      	adds	r1, r7, #4
 8013758:	4680      	mov	r8, r0
 801375a:	4630      	mov	r0, r6
 801375c:	f7f7 feca 	bl	800b4f4 <ucdr_deserialize_uint8_t>
 8013760:	1d79      	adds	r1, r7, #5
 8013762:	4604      	mov	r4, r0
 8013764:	4630      	mov	r0, r6
 8013766:	f7f7 fec5 	bl	800b4f4 <ucdr_deserialize_uint8_t>
 801376a:	ea05 0508 	and.w	r5, r5, r8
 801376e:	402c      	ands	r4, r5
 8013770:	4020      	ands	r0, r4
 8013772:	b2c0      	uxtb	r0, r0
 8013774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013778 <uxr_serialize_ReadSpecification>:
 8013778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801377c:	460e      	mov	r6, r1
 801377e:	7809      	ldrb	r1, [r1, #0]
 8013780:	4607      	mov	r7, r0
 8013782:	f7f7 fea1 	bl	800b4c8 <ucdr_serialize_uint8_t>
 8013786:	7871      	ldrb	r1, [r6, #1]
 8013788:	4604      	mov	r4, r0
 801378a:	4638      	mov	r0, r7
 801378c:	f7f7 fe9c 	bl	800b4c8 <ucdr_serialize_uint8_t>
 8013790:	78b1      	ldrb	r1, [r6, #2]
 8013792:	4004      	ands	r4, r0
 8013794:	4638      	mov	r0, r7
 8013796:	f7f7 fe69 	bl	800b46c <ucdr_serialize_bool>
 801379a:	78b3      	ldrb	r3, [r6, #2]
 801379c:	b2e4      	uxtb	r4, r4
 801379e:	4004      	ands	r4, r0
 80137a0:	b94b      	cbnz	r3, 80137b6 <uxr_serialize_ReadSpecification+0x3e>
 80137a2:	7a31      	ldrb	r1, [r6, #8]
 80137a4:	4638      	mov	r0, r7
 80137a6:	f7f7 fe61 	bl	800b46c <ucdr_serialize_bool>
 80137aa:	7a33      	ldrb	r3, [r6, #8]
 80137ac:	4004      	ands	r4, r0
 80137ae:	b943      	cbnz	r3, 80137c2 <uxr_serialize_ReadSpecification+0x4a>
 80137b0:	4620      	mov	r0, r4
 80137b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137b6:	6871      	ldr	r1, [r6, #4]
 80137b8:	4638      	mov	r0, r7
 80137ba:	f004 fbcb 	bl	8017f54 <ucdr_serialize_string>
 80137be:	4004      	ands	r4, r0
 80137c0:	e7ef      	b.n	80137a2 <uxr_serialize_ReadSpecification+0x2a>
 80137c2:	8971      	ldrh	r1, [r6, #10]
 80137c4:	4638      	mov	r0, r7
 80137c6:	f7f7 feab 	bl	800b520 <ucdr_serialize_uint16_t>
 80137ca:	89b1      	ldrh	r1, [r6, #12]
 80137cc:	4605      	mov	r5, r0
 80137ce:	4638      	mov	r0, r7
 80137d0:	f7f7 fea6 	bl	800b520 <ucdr_serialize_uint16_t>
 80137d4:	89f1      	ldrh	r1, [r6, #14]
 80137d6:	4005      	ands	r5, r0
 80137d8:	4638      	mov	r0, r7
 80137da:	f7f7 fea1 	bl	800b520 <ucdr_serialize_uint16_t>
 80137de:	8a31      	ldrh	r1, [r6, #16]
 80137e0:	4680      	mov	r8, r0
 80137e2:	4638      	mov	r0, r7
 80137e4:	f7f7 fe9c 	bl	800b520 <ucdr_serialize_uint16_t>
 80137e8:	b2ed      	uxtb	r5, r5
 80137ea:	4025      	ands	r5, r4
 80137ec:	ea08 0505 	and.w	r5, r8, r5
 80137f0:	ea00 0405 	and.w	r4, r0, r5
 80137f4:	4620      	mov	r0, r4
 80137f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137fa:	bf00      	nop

080137fc <uxr_serialize_CREATE_CLIENT_Payload>:
 80137fc:	f7ff bace 	b.w	8012d9c <uxr_serialize_CLIENT_Representation>

08013800 <uxr_serialize_CREATE_Payload>:
 8013800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013802:	2202      	movs	r2, #2
 8013804:	4607      	mov	r7, r0
 8013806:	460e      	mov	r6, r1
 8013808:	f7fc fc22 	bl	8010050 <ucdr_serialize_array_uint8_t>
 801380c:	2202      	movs	r2, #2
 801380e:	18b1      	adds	r1, r6, r2
 8013810:	4605      	mov	r5, r0
 8013812:	4638      	mov	r0, r7
 8013814:	f7fc fc1c 	bl	8010050 <ucdr_serialize_array_uint8_t>
 8013818:	7931      	ldrb	r1, [r6, #4]
 801381a:	4604      	mov	r4, r0
 801381c:	4638      	mov	r0, r7
 801381e:	f7f7 fe53 	bl	800b4c8 <ucdr_serialize_uint8_t>
 8013822:	b170      	cbz	r0, 8013842 <uxr_serialize_CREATE_Payload+0x42>
 8013824:	7933      	ldrb	r3, [r6, #4]
 8013826:	402c      	ands	r4, r5
 8013828:	3b01      	subs	r3, #1
 801382a:	b2e4      	uxtb	r4, r4
 801382c:	2b0d      	cmp	r3, #13
 801382e:	d809      	bhi.n	8013844 <uxr_serialize_CREATE_Payload+0x44>
 8013830:	e8df f003 	tbb	[pc, r3]
 8013834:	23230a4c 	.word	0x23230a4c
 8013838:	0a0a0a0a 	.word	0x0a0a0a0a
 801383c:	12121208 	.word	0x12121208
 8013840:	3e45      	.short	0x3e45
 8013842:	2400      	movs	r4, #0
 8013844:	4620      	mov	r0, r4
 8013846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013848:	f106 0108 	add.w	r1, r6, #8
 801384c:	4638      	mov	r0, r7
 801384e:	f7ff fbab 	bl	8012fa8 <uxr_serialize_DATAWRITER_Representation>
 8013852:	4004      	ands	r4, r0
 8013854:	4620      	mov	r0, r4
 8013856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013858:	7a31      	ldrb	r1, [r6, #8]
 801385a:	4638      	mov	r0, r7
 801385c:	f7f7 fe34 	bl	800b4c8 <ucdr_serialize_uint8_t>
 8013860:	2800      	cmp	r0, #0
 8013862:	d0ee      	beq.n	8013842 <uxr_serialize_CREATE_Payload+0x42>
 8013864:	7a33      	ldrb	r3, [r6, #8]
 8013866:	2b01      	cmp	r3, #1
 8013868:	d001      	beq.n	801386e <uxr_serialize_CREATE_Payload+0x6e>
 801386a:	2b02      	cmp	r3, #2
 801386c:	d1ea      	bne.n	8013844 <uxr_serialize_CREATE_Payload+0x44>
 801386e:	68f1      	ldr	r1, [r6, #12]
 8013870:	4638      	mov	r0, r7
 8013872:	f004 fb6f 	bl	8017f54 <ucdr_serialize_string>
 8013876:	4004      	ands	r4, r0
 8013878:	e7e4      	b.n	8013844 <uxr_serialize_CREATE_Payload+0x44>
 801387a:	7a31      	ldrb	r1, [r6, #8]
 801387c:	4638      	mov	r0, r7
 801387e:	f7f7 fe23 	bl	800b4c8 <ucdr_serialize_uint8_t>
 8013882:	4605      	mov	r5, r0
 8013884:	b158      	cbz	r0, 801389e <uxr_serialize_CREATE_Payload+0x9e>
 8013886:	7a33      	ldrb	r3, [r6, #8]
 8013888:	2b02      	cmp	r3, #2
 801388a:	d034      	beq.n	80138f6 <uxr_serialize_CREATE_Payload+0xf6>
 801388c:	2b03      	cmp	r3, #3
 801388e:	d106      	bne.n	801389e <uxr_serialize_CREATE_Payload+0x9e>
 8013890:	68f2      	ldr	r2, [r6, #12]
 8013892:	f106 0110 	add.w	r1, r6, #16
 8013896:	4638      	mov	r0, r7
 8013898:	f7fc fd78 	bl	801038c <ucdr_serialize_sequence_uint8_t>
 801389c:	4605      	mov	r5, r0
 801389e:	2202      	movs	r2, #2
 80138a0:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 80138a4:	4638      	mov	r0, r7
 80138a6:	f7fc fbd3 	bl	8010050 <ucdr_serialize_array_uint8_t>
 80138aa:	4028      	ands	r0, r5
 80138ac:	4004      	ands	r4, r0
 80138ae:	e7c9      	b.n	8013844 <uxr_serialize_CREATE_Payload+0x44>
 80138b0:	f106 0108 	add.w	r1, r6, #8
 80138b4:	4638      	mov	r0, r7
 80138b6:	f7ff fa71 	bl	8012d9c <uxr_serialize_CLIENT_Representation>
 80138ba:	4004      	ands	r4, r0
 80138bc:	e7c2      	b.n	8013844 <uxr_serialize_CREATE_Payload+0x44>
 80138be:	f106 0108 	add.w	r1, r6, #8
 80138c2:	4638      	mov	r0, r7
 80138c4:	f7ff fb26 	bl	8012f14 <uxr_serialize_AGENT_Representation>
 80138c8:	4004      	ands	r4, r0
 80138ca:	e7bb      	b.n	8013844 <uxr_serialize_CREATE_Payload+0x44>
 80138cc:	7a31      	ldrb	r1, [r6, #8]
 80138ce:	4638      	mov	r0, r7
 80138d0:	f7f7 fdfa 	bl	800b4c8 <ucdr_serialize_uint8_t>
 80138d4:	4605      	mov	r5, r0
 80138d6:	b130      	cbz	r0, 80138e6 <uxr_serialize_CREATE_Payload+0xe6>
 80138d8:	7a33      	ldrb	r3, [r6, #8]
 80138da:	2b02      	cmp	r3, #2
 80138dc:	d011      	beq.n	8013902 <uxr_serialize_CREATE_Payload+0x102>
 80138de:	2b03      	cmp	r3, #3
 80138e0:	d015      	beq.n	801390e <uxr_serialize_CREATE_Payload+0x10e>
 80138e2:	2b01      	cmp	r3, #1
 80138e4:	d00d      	beq.n	8013902 <uxr_serialize_CREATE_Payload+0x102>
 80138e6:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 80138ea:	4638      	mov	r0, r7
 80138ec:	f7f8 fb28 	bl	800bf40 <ucdr_serialize_int16_t>
 80138f0:	4028      	ands	r0, r5
 80138f2:	4004      	ands	r4, r0
 80138f4:	e7a6      	b.n	8013844 <uxr_serialize_CREATE_Payload+0x44>
 80138f6:	68f1      	ldr	r1, [r6, #12]
 80138f8:	4638      	mov	r0, r7
 80138fa:	f004 fb2b 	bl	8017f54 <ucdr_serialize_string>
 80138fe:	4605      	mov	r5, r0
 8013900:	e7cd      	b.n	801389e <uxr_serialize_CREATE_Payload+0x9e>
 8013902:	68f1      	ldr	r1, [r6, #12]
 8013904:	4638      	mov	r0, r7
 8013906:	f004 fb25 	bl	8017f54 <ucdr_serialize_string>
 801390a:	4605      	mov	r5, r0
 801390c:	e7eb      	b.n	80138e6 <uxr_serialize_CREATE_Payload+0xe6>
 801390e:	68f2      	ldr	r2, [r6, #12]
 8013910:	f106 0110 	add.w	r1, r6, #16
 8013914:	4638      	mov	r0, r7
 8013916:	f7fc fd39 	bl	801038c <ucdr_serialize_sequence_uint8_t>
 801391a:	4605      	mov	r5, r0
 801391c:	e7e3      	b.n	80138e6 <uxr_serialize_CREATE_Payload+0xe6>
 801391e:	bf00      	nop

08013920 <uxr_deserialize_GET_INFO_Payload>:
 8013920:	b570      	push	{r4, r5, r6, lr}
 8013922:	2202      	movs	r2, #2
 8013924:	4605      	mov	r5, r0
 8013926:	460e      	mov	r6, r1
 8013928:	f7fc fbf6 	bl	8010118 <ucdr_deserialize_array_uint8_t>
 801392c:	2202      	movs	r2, #2
 801392e:	18b1      	adds	r1, r6, r2
 8013930:	4604      	mov	r4, r0
 8013932:	4628      	mov	r0, r5
 8013934:	f7fc fbf0 	bl	8010118 <ucdr_deserialize_array_uint8_t>
 8013938:	1d31      	adds	r1, r6, #4
 801393a:	4004      	ands	r4, r0
 801393c:	4628      	mov	r0, r5
 801393e:	f7f8 f909 	bl	800bb54 <ucdr_deserialize_uint32_t>
 8013942:	b2e4      	uxtb	r4, r4
 8013944:	4020      	ands	r0, r4
 8013946:	bd70      	pop	{r4, r5, r6, pc}

08013948 <uxr_serialize_DELETE_Payload>:
 8013948:	b570      	push	{r4, r5, r6, lr}
 801394a:	2202      	movs	r2, #2
 801394c:	4605      	mov	r5, r0
 801394e:	460e      	mov	r6, r1
 8013950:	f7fc fb7e 	bl	8010050 <ucdr_serialize_array_uint8_t>
 8013954:	2202      	movs	r2, #2
 8013956:	4604      	mov	r4, r0
 8013958:	18b1      	adds	r1, r6, r2
 801395a:	4628      	mov	r0, r5
 801395c:	f7fc fb78 	bl	8010050 <ucdr_serialize_array_uint8_t>
 8013960:	4020      	ands	r0, r4
 8013962:	b2c0      	uxtb	r0, r0
 8013964:	bd70      	pop	{r4, r5, r6, pc}
 8013966:	bf00      	nop

08013968 <uxr_deserialize_STATUS_AGENT_Payload>:
 8013968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801396c:	4605      	mov	r5, r0
 801396e:	460e      	mov	r6, r1
 8013970:	f7f7 fdc0 	bl	800b4f4 <ucdr_deserialize_uint8_t>
 8013974:	1c71      	adds	r1, r6, #1
 8013976:	4604      	mov	r4, r0
 8013978:	4628      	mov	r0, r5
 801397a:	f7f7 fdbb 	bl	800b4f4 <ucdr_deserialize_uint8_t>
 801397e:	2204      	movs	r2, #4
 8013980:	18b1      	adds	r1, r6, r2
 8013982:	4680      	mov	r8, r0
 8013984:	4628      	mov	r0, r5
 8013986:	f7fc fbc7 	bl	8010118 <ucdr_deserialize_array_uint8_t>
 801398a:	f106 0108 	add.w	r1, r6, #8
 801398e:	4607      	mov	r7, r0
 8013990:	2202      	movs	r2, #2
 8013992:	4628      	mov	r0, r5
 8013994:	f7fc fbc0 	bl	8010118 <ucdr_deserialize_array_uint8_t>
 8013998:	ea04 0308 	and.w	r3, r4, r8
 801399c:	b2db      	uxtb	r3, r3
 801399e:	ea03 0407 	and.w	r4, r3, r7
 80139a2:	2202      	movs	r2, #2
 80139a4:	4607      	mov	r7, r0
 80139a6:	f106 010a 	add.w	r1, r6, #10
 80139aa:	4628      	mov	r0, r5
 80139ac:	f7fc fbb4 	bl	8010118 <ucdr_deserialize_array_uint8_t>
 80139b0:	f106 010c 	add.w	r1, r6, #12
 80139b4:	4603      	mov	r3, r0
 80139b6:	4628      	mov	r0, r5
 80139b8:	461d      	mov	r5, r3
 80139ba:	f7f7 fd6d 	bl	800b498 <ucdr_deserialize_bool>
 80139be:	403c      	ands	r4, r7
 80139c0:	4025      	ands	r5, r4
 80139c2:	4028      	ands	r0, r5
 80139c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080139c8 <uxr_deserialize_STATUS_Payload>:
 80139c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139cc:	2202      	movs	r2, #2
 80139ce:	4606      	mov	r6, r0
 80139d0:	460f      	mov	r7, r1
 80139d2:	f7fc fba1 	bl	8010118 <ucdr_deserialize_array_uint8_t>
 80139d6:	2202      	movs	r2, #2
 80139d8:	18b9      	adds	r1, r7, r2
 80139da:	4605      	mov	r5, r0
 80139dc:	4630      	mov	r0, r6
 80139de:	f7fc fb9b 	bl	8010118 <ucdr_deserialize_array_uint8_t>
 80139e2:	1d39      	adds	r1, r7, #4
 80139e4:	4680      	mov	r8, r0
 80139e6:	4630      	mov	r0, r6
 80139e8:	f7f7 fd84 	bl	800b4f4 <ucdr_deserialize_uint8_t>
 80139ec:	1d79      	adds	r1, r7, #5
 80139ee:	4604      	mov	r4, r0
 80139f0:	4630      	mov	r0, r6
 80139f2:	f7f7 fd7f 	bl	800b4f4 <ucdr_deserialize_uint8_t>
 80139f6:	ea05 0508 	and.w	r5, r5, r8
 80139fa:	402c      	ands	r4, r5
 80139fc:	4020      	ands	r0, r4
 80139fe:	b2c0      	uxtb	r0, r0
 8013a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013a04 <uxr_serialize_INFO_Payload>:
 8013a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a08:	2202      	movs	r2, #2
 8013a0a:	460c      	mov	r4, r1
 8013a0c:	4605      	mov	r5, r0
 8013a0e:	f7fc fb1f 	bl	8010050 <ucdr_serialize_array_uint8_t>
 8013a12:	2202      	movs	r2, #2
 8013a14:	18a1      	adds	r1, r4, r2
 8013a16:	4680      	mov	r8, r0
 8013a18:	4628      	mov	r0, r5
 8013a1a:	f7fc fb19 	bl	8010050 <ucdr_serialize_array_uint8_t>
 8013a1e:	7921      	ldrb	r1, [r4, #4]
 8013a20:	4607      	mov	r7, r0
 8013a22:	4628      	mov	r0, r5
 8013a24:	f7f7 fd50 	bl	800b4c8 <ucdr_serialize_uint8_t>
 8013a28:	7961      	ldrb	r1, [r4, #5]
 8013a2a:	4606      	mov	r6, r0
 8013a2c:	4628      	mov	r0, r5
 8013a2e:	f7f7 fd4b 	bl	800b4c8 <ucdr_serialize_uint8_t>
 8013a32:	ea08 0807 	and.w	r8, r8, r7
 8013a36:	ea06 0608 	and.w	r6, r6, r8
 8013a3a:	4006      	ands	r6, r0
 8013a3c:	7a21      	ldrb	r1, [r4, #8]
 8013a3e:	4628      	mov	r0, r5
 8013a40:	f7f7 fd14 	bl	800b46c <ucdr_serialize_bool>
 8013a44:	7a23      	ldrb	r3, [r4, #8]
 8013a46:	b2f7      	uxtb	r7, r6
 8013a48:	4606      	mov	r6, r0
 8013a4a:	b96b      	cbnz	r3, 8013a68 <uxr_serialize_INFO_Payload+0x64>
 8013a4c:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8013a50:	4628      	mov	r0, r5
 8013a52:	f7f7 fd0b 	bl	800b46c <ucdr_serialize_bool>
 8013a56:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8013a5a:	4030      	ands	r0, r6
 8013a5c:	b2c6      	uxtb	r6, r0
 8013a5e:	b983      	cbnz	r3, 8013a82 <uxr_serialize_INFO_Payload+0x7e>
 8013a60:	ea06 0007 	and.w	r0, r6, r7
 8013a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a68:	7b21      	ldrb	r1, [r4, #12]
 8013a6a:	4628      	mov	r0, r5
 8013a6c:	f7f7 fd2c 	bl	800b4c8 <ucdr_serialize_uint8_t>
 8013a70:	b188      	cbz	r0, 8013a96 <uxr_serialize_INFO_Payload+0x92>
 8013a72:	f104 010c 	add.w	r1, r4, #12
 8013a76:	4628      	mov	r0, r5
 8013a78:	f7ff fabe 	bl	8012ff8 <uxr_serialize_ObjectVariant.part.0>
 8013a7c:	4030      	ands	r0, r6
 8013a7e:	b2c6      	uxtb	r6, r0
 8013a80:	e7e4      	b.n	8013a4c <uxr_serialize_INFO_Payload+0x48>
 8013a82:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8013a86:	4628      	mov	r0, r5
 8013a88:	f7ff fdb2 	bl	80135f0 <uxr_serialize_ActivityInfoVariant>
 8013a8c:	4006      	ands	r6, r0
 8013a8e:	ea06 0007 	and.w	r0, r6, r7
 8013a92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a96:	4606      	mov	r6, r0
 8013a98:	e7d8      	b.n	8013a4c <uxr_serialize_INFO_Payload+0x48>
 8013a9a:	bf00      	nop

08013a9c <uxr_serialize_READ_DATA_Payload>:
 8013a9c:	b570      	push	{r4, r5, r6, lr}
 8013a9e:	2202      	movs	r2, #2
 8013aa0:	4605      	mov	r5, r0
 8013aa2:	460e      	mov	r6, r1
 8013aa4:	f7fc fad4 	bl	8010050 <ucdr_serialize_array_uint8_t>
 8013aa8:	2202      	movs	r2, #2
 8013aaa:	18b1      	adds	r1, r6, r2
 8013aac:	4604      	mov	r4, r0
 8013aae:	4628      	mov	r0, r5
 8013ab0:	f7fc face 	bl	8010050 <ucdr_serialize_array_uint8_t>
 8013ab4:	1d31      	adds	r1, r6, #4
 8013ab6:	4004      	ands	r4, r0
 8013ab8:	4628      	mov	r0, r5
 8013aba:	f7ff fe5d 	bl	8013778 <uxr_serialize_ReadSpecification>
 8013abe:	b2e4      	uxtb	r4, r4
 8013ac0:	4020      	ands	r0, r4
 8013ac2:	bd70      	pop	{r4, r5, r6, pc}

08013ac4 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8013ac4:	b570      	push	{r4, r5, r6, lr}
 8013ac6:	2202      	movs	r2, #2
 8013ac8:	4605      	mov	r5, r0
 8013aca:	460e      	mov	r6, r1
 8013acc:	f7fc fac0 	bl	8010050 <ucdr_serialize_array_uint8_t>
 8013ad0:	2202      	movs	r2, #2
 8013ad2:	4604      	mov	r4, r0
 8013ad4:	18b1      	adds	r1, r6, r2
 8013ad6:	4628      	mov	r0, r5
 8013ad8:	f7fc faba 	bl	8010050 <ucdr_serialize_array_uint8_t>
 8013adc:	4020      	ands	r0, r4
 8013ade:	b2c0      	uxtb	r0, r0
 8013ae0:	bd70      	pop	{r4, r5, r6, pc}
 8013ae2:	bf00      	nop

08013ae4 <uxr_serialize_ACKNACK_Payload>:
 8013ae4:	b570      	push	{r4, r5, r6, lr}
 8013ae6:	460c      	mov	r4, r1
 8013ae8:	460e      	mov	r6, r1
 8013aea:	f834 1b02 	ldrh.w	r1, [r4], #2
 8013aee:	4605      	mov	r5, r0
 8013af0:	f7f7 fd16 	bl	800b520 <ucdr_serialize_uint16_t>
 8013af4:	2202      	movs	r2, #2
 8013af6:	4621      	mov	r1, r4
 8013af8:	4604      	mov	r4, r0
 8013afa:	4628      	mov	r0, r5
 8013afc:	f7fc faa8 	bl	8010050 <ucdr_serialize_array_uint8_t>
 8013b00:	7931      	ldrb	r1, [r6, #4]
 8013b02:	4004      	ands	r4, r0
 8013b04:	4628      	mov	r0, r5
 8013b06:	f7f7 fcdf 	bl	800b4c8 <ucdr_serialize_uint8_t>
 8013b0a:	b2e4      	uxtb	r4, r4
 8013b0c:	4020      	ands	r0, r4
 8013b0e:	bd70      	pop	{r4, r5, r6, pc}

08013b10 <uxr_deserialize_ACKNACK_Payload>:
 8013b10:	b570      	push	{r4, r5, r6, lr}
 8013b12:	4605      	mov	r5, r0
 8013b14:	460e      	mov	r6, r1
 8013b16:	f7f7 fe03 	bl	800b720 <ucdr_deserialize_uint16_t>
 8013b1a:	2202      	movs	r2, #2
 8013b1c:	18b1      	adds	r1, r6, r2
 8013b1e:	4604      	mov	r4, r0
 8013b20:	4628      	mov	r0, r5
 8013b22:	f7fc faf9 	bl	8010118 <ucdr_deserialize_array_uint8_t>
 8013b26:	1d31      	adds	r1, r6, #4
 8013b28:	4004      	ands	r4, r0
 8013b2a:	4628      	mov	r0, r5
 8013b2c:	f7f7 fce2 	bl	800b4f4 <ucdr_deserialize_uint8_t>
 8013b30:	b2e4      	uxtb	r4, r4
 8013b32:	4020      	ands	r0, r4
 8013b34:	bd70      	pop	{r4, r5, r6, pc}
 8013b36:	bf00      	nop

08013b38 <uxr_serialize_HEARTBEAT_Payload>:
 8013b38:	b570      	push	{r4, r5, r6, lr}
 8013b3a:	460d      	mov	r5, r1
 8013b3c:	8809      	ldrh	r1, [r1, #0]
 8013b3e:	4606      	mov	r6, r0
 8013b40:	f7f7 fcee 	bl	800b520 <ucdr_serialize_uint16_t>
 8013b44:	8869      	ldrh	r1, [r5, #2]
 8013b46:	4604      	mov	r4, r0
 8013b48:	4630      	mov	r0, r6
 8013b4a:	f7f7 fce9 	bl	800b520 <ucdr_serialize_uint16_t>
 8013b4e:	7929      	ldrb	r1, [r5, #4]
 8013b50:	4004      	ands	r4, r0
 8013b52:	4630      	mov	r0, r6
 8013b54:	f7f7 fcb8 	bl	800b4c8 <ucdr_serialize_uint8_t>
 8013b58:	b2e4      	uxtb	r4, r4
 8013b5a:	4020      	ands	r0, r4
 8013b5c:	bd70      	pop	{r4, r5, r6, pc}
 8013b5e:	bf00      	nop

08013b60 <uxr_deserialize_HEARTBEAT_Payload>:
 8013b60:	b570      	push	{r4, r5, r6, lr}
 8013b62:	4605      	mov	r5, r0
 8013b64:	460e      	mov	r6, r1
 8013b66:	f7f7 fddb 	bl	800b720 <ucdr_deserialize_uint16_t>
 8013b6a:	1cb1      	adds	r1, r6, #2
 8013b6c:	4604      	mov	r4, r0
 8013b6e:	4628      	mov	r0, r5
 8013b70:	f7f7 fdd6 	bl	800b720 <ucdr_deserialize_uint16_t>
 8013b74:	1d31      	adds	r1, r6, #4
 8013b76:	4004      	ands	r4, r0
 8013b78:	4628      	mov	r0, r5
 8013b7a:	f7f7 fcbb 	bl	800b4f4 <ucdr_deserialize_uint8_t>
 8013b7e:	b2e4      	uxtb	r4, r4
 8013b80:	4020      	ands	r0, r4
 8013b82:	bd70      	pop	{r4, r5, r6, pc}

08013b84 <uxr_serialize_TIMESTAMP_Payload>:
 8013b84:	b570      	push	{r4, r5, r6, lr}
 8013b86:	460d      	mov	r5, r1
 8013b88:	6809      	ldr	r1, [r1, #0]
 8013b8a:	4606      	mov	r6, r0
 8013b8c:	f7f8 facc 	bl	800c128 <ucdr_serialize_int32_t>
 8013b90:	6869      	ldr	r1, [r5, #4]
 8013b92:	4604      	mov	r4, r0
 8013b94:	4630      	mov	r0, r6
 8013b96:	f7f7 fead 	bl	800b8f4 <ucdr_serialize_uint32_t>
 8013b9a:	4020      	ands	r0, r4
 8013b9c:	b2c0      	uxtb	r0, r0
 8013b9e:	bd70      	pop	{r4, r5, r6, pc}

08013ba0 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8013ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ba4:	4605      	mov	r5, r0
 8013ba6:	460e      	mov	r6, r1
 8013ba8:	f7f8 fb56 	bl	800c258 <ucdr_deserialize_int32_t>
 8013bac:	1d31      	adds	r1, r6, #4
 8013bae:	4607      	mov	r7, r0
 8013bb0:	4628      	mov	r0, r5
 8013bb2:	f7f7 ffcf 	bl	800bb54 <ucdr_deserialize_uint32_t>
 8013bb6:	f106 0108 	add.w	r1, r6, #8
 8013bba:	4680      	mov	r8, r0
 8013bbc:	4628      	mov	r0, r5
 8013bbe:	f7f8 fb4b 	bl	800c258 <ucdr_deserialize_int32_t>
 8013bc2:	f106 010c 	add.w	r1, r6, #12
 8013bc6:	4604      	mov	r4, r0
 8013bc8:	4628      	mov	r0, r5
 8013bca:	f7f7 ffc3 	bl	800bb54 <ucdr_deserialize_uint32_t>
 8013bce:	ea07 0708 	and.w	r7, r7, r8
 8013bd2:	403c      	ands	r4, r7
 8013bd4:	f106 0110 	add.w	r1, r6, #16
 8013bd8:	4004      	ands	r4, r0
 8013bda:	4628      	mov	r0, r5
 8013bdc:	f7f8 fb3c 	bl	800c258 <ucdr_deserialize_int32_t>
 8013be0:	f106 0114 	add.w	r1, r6, #20
 8013be4:	4607      	mov	r7, r0
 8013be6:	4628      	mov	r0, r5
 8013be8:	f7f7 ffb4 	bl	800bb54 <ucdr_deserialize_uint32_t>
 8013bec:	b2e4      	uxtb	r4, r4
 8013bee:	403c      	ands	r4, r7
 8013bf0:	4020      	ands	r0, r4
 8013bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bf6:	bf00      	nop

08013bf8 <uxr_serialize_SampleIdentity>:
 8013bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bfc:	220c      	movs	r2, #12
 8013bfe:	4604      	mov	r4, r0
 8013c00:	460d      	mov	r5, r1
 8013c02:	f7fc fa25 	bl	8010050 <ucdr_serialize_array_uint8_t>
 8013c06:	2203      	movs	r2, #3
 8013c08:	f105 010c 	add.w	r1, r5, #12
 8013c0c:	4607      	mov	r7, r0
 8013c0e:	4620      	mov	r0, r4
 8013c10:	f7fc fa1e 	bl	8010050 <ucdr_serialize_array_uint8_t>
 8013c14:	7be9      	ldrb	r1, [r5, #15]
 8013c16:	4680      	mov	r8, r0
 8013c18:	4620      	mov	r0, r4
 8013c1a:	f7f7 fc55 	bl	800b4c8 <ucdr_serialize_uint8_t>
 8013c1e:	6929      	ldr	r1, [r5, #16]
 8013c20:	4606      	mov	r6, r0
 8013c22:	4620      	mov	r0, r4
 8013c24:	f7f8 fa80 	bl	800c128 <ucdr_serialize_int32_t>
 8013c28:	6969      	ldr	r1, [r5, #20]
 8013c2a:	4603      	mov	r3, r0
 8013c2c:	4620      	mov	r0, r4
 8013c2e:	ea07 0708 	and.w	r7, r7, r8
 8013c32:	461c      	mov	r4, r3
 8013c34:	f7f7 fe5e 	bl	800b8f4 <ucdr_serialize_uint32_t>
 8013c38:	403e      	ands	r6, r7
 8013c3a:	4034      	ands	r4, r6
 8013c3c:	4020      	ands	r0, r4
 8013c3e:	b2c0      	uxtb	r0, r0
 8013c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013c44 <uxr_deserialize_SampleIdentity>:
 8013c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c48:	220c      	movs	r2, #12
 8013c4a:	4604      	mov	r4, r0
 8013c4c:	460d      	mov	r5, r1
 8013c4e:	f7fc fa63 	bl	8010118 <ucdr_deserialize_array_uint8_t>
 8013c52:	2203      	movs	r2, #3
 8013c54:	f105 010c 	add.w	r1, r5, #12
 8013c58:	4607      	mov	r7, r0
 8013c5a:	4620      	mov	r0, r4
 8013c5c:	f7fc fa5c 	bl	8010118 <ucdr_deserialize_array_uint8_t>
 8013c60:	f105 010f 	add.w	r1, r5, #15
 8013c64:	4680      	mov	r8, r0
 8013c66:	4620      	mov	r0, r4
 8013c68:	f7f7 fc44 	bl	800b4f4 <ucdr_deserialize_uint8_t>
 8013c6c:	f105 0110 	add.w	r1, r5, #16
 8013c70:	4606      	mov	r6, r0
 8013c72:	4620      	mov	r0, r4
 8013c74:	f7f8 faf0 	bl	800c258 <ucdr_deserialize_int32_t>
 8013c78:	f105 0114 	add.w	r1, r5, #20
 8013c7c:	4603      	mov	r3, r0
 8013c7e:	4620      	mov	r0, r4
 8013c80:	ea07 0708 	and.w	r7, r7, r8
 8013c84:	461c      	mov	r4, r3
 8013c86:	f7f7 ff65 	bl	800bb54 <ucdr_deserialize_uint32_t>
 8013c8a:	403e      	ands	r6, r7
 8013c8c:	4034      	ands	r4, r6
 8013c8e:	4020      	ands	r0, r4
 8013c90:	b2c0      	uxtb	r0, r0
 8013c92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c96:	bf00      	nop

08013c98 <rcl_client_get_rmw_handle>:
 8013c98:	b118      	cbz	r0, 8013ca2 <rcl_client_get_rmw_handle+0xa>
 8013c9a:	6800      	ldr	r0, [r0, #0]
 8013c9c:	b108      	cbz	r0, 8013ca2 <rcl_client_get_rmw_handle+0xa>
 8013c9e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8013ca2:	4770      	bx	lr

08013ca4 <rcl_send_request>:
 8013ca4:	b570      	push	{r4, r5, r6, lr}
 8013ca6:	b082      	sub	sp, #8
 8013ca8:	b1e8      	cbz	r0, 8013ce6 <rcl_send_request+0x42>
 8013caa:	4604      	mov	r4, r0
 8013cac:	6800      	ldr	r0, [r0, #0]
 8013cae:	b1d0      	cbz	r0, 8013ce6 <rcl_send_request+0x42>
 8013cb0:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8013cb4:	b1bb      	cbz	r3, 8013ce6 <rcl_send_request+0x42>
 8013cb6:	460e      	mov	r6, r1
 8013cb8:	b1d1      	cbz	r1, 8013cf0 <rcl_send_request+0x4c>
 8013cba:	4615      	mov	r5, r2
 8013cbc:	b1c2      	cbz	r2, 8013cf0 <rcl_send_request+0x4c>
 8013cbe:	2105      	movs	r1, #5
 8013cc0:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8013cc4:	f002 fe58 	bl	8016978 <__atomic_load_8>
 8013cc8:	6823      	ldr	r3, [r4, #0]
 8013cca:	e9c5 0100 	strd	r0, r1, [r5]
 8013cce:	462a      	mov	r2, r5
 8013cd0:	4631      	mov	r1, r6
 8013cd2:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8013cd6:	f003 fd43 	bl	8017760 <rmw_send_request>
 8013cda:	4606      	mov	r6, r0
 8013cdc:	b160      	cbz	r0, 8013cf8 <rcl_send_request+0x54>
 8013cde:	2601      	movs	r6, #1
 8013ce0:	4630      	mov	r0, r6
 8013ce2:	b002      	add	sp, #8
 8013ce4:	bd70      	pop	{r4, r5, r6, pc}
 8013ce6:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8013cea:	4630      	mov	r0, r6
 8013cec:	b002      	add	sp, #8
 8013cee:	bd70      	pop	{r4, r5, r6, pc}
 8013cf0:	260b      	movs	r6, #11
 8013cf2:	4630      	mov	r0, r6
 8013cf4:	b002      	add	sp, #8
 8013cf6:	bd70      	pop	{r4, r5, r6, pc}
 8013cf8:	6820      	ldr	r0, [r4, #0]
 8013cfa:	2105      	movs	r1, #5
 8013cfc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013d00:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8013d04:	9100      	str	r1, [sp, #0]
 8013d06:	f002 fea3 	bl	8016a50 <__atomic_exchange_8>
 8013d0a:	4630      	mov	r0, r6
 8013d0c:	b002      	add	sp, #8
 8013d0e:	bd70      	pop	{r4, r5, r6, pc}

08013d10 <rcl_take_response>:
 8013d10:	b570      	push	{r4, r5, r6, lr}
 8013d12:	468e      	mov	lr, r1
 8013d14:	460c      	mov	r4, r1
 8013d16:	4616      	mov	r6, r2
 8013d18:	4605      	mov	r5, r0
 8013d1a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013d1e:	b08c      	sub	sp, #48	@ 0x30
 8013d20:	f10d 0c18 	add.w	ip, sp, #24
 8013d24:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013d28:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013d2c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013d30:	b35d      	cbz	r5, 8013d8a <rcl_take_response+0x7a>
 8013d32:	682b      	ldr	r3, [r5, #0]
 8013d34:	b34b      	cbz	r3, 8013d8a <rcl_take_response+0x7a>
 8013d36:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8013d3a:	b330      	cbz	r0, 8013d8a <rcl_take_response+0x7a>
 8013d3c:	b346      	cbz	r6, 8013d90 <rcl_take_response+0x80>
 8013d3e:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8013d98 <rcl_take_response+0x88>
 8013d42:	2300      	movs	r3, #0
 8013d44:	f88d 3007 	strb.w	r3, [sp, #7]
 8013d48:	4632      	mov	r2, r6
 8013d4a:	f10d 0307 	add.w	r3, sp, #7
 8013d4e:	a902      	add	r1, sp, #8
 8013d50:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013d54:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013d58:	f003 fe0a 	bl	8017970 <rmw_take_response>
 8013d5c:	4605      	mov	r5, r0
 8013d5e:	b9c8      	cbnz	r0, 8013d94 <rcl_take_response+0x84>
 8013d60:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8013d64:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8013d68:	2a00      	cmp	r2, #0
 8013d6a:	bf08      	it	eq
 8013d6c:	461d      	moveq	r5, r3
 8013d6e:	f10d 0e18 	add.w	lr, sp, #24
 8013d72:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013d76:	46a4      	mov	ip, r4
 8013d78:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013d7c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8013d80:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013d84:	4628      	mov	r0, r5
 8013d86:	b00c      	add	sp, #48	@ 0x30
 8013d88:	bd70      	pop	{r4, r5, r6, pc}
 8013d8a:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 8013d8e:	e7ee      	b.n	8013d6e <rcl_take_response+0x5e>
 8013d90:	250b      	movs	r5, #11
 8013d92:	e7ec      	b.n	8013d6e <rcl_take_response+0x5e>
 8013d94:	2501      	movs	r5, #1
 8013d96:	e7ea      	b.n	8013d6e <rcl_take_response+0x5e>
	...

08013da0 <rcl_client_is_valid>:
 8013da0:	b130      	cbz	r0, 8013db0 <rcl_client_is_valid+0x10>
 8013da2:	6800      	ldr	r0, [r0, #0]
 8013da4:	b120      	cbz	r0, 8013db0 <rcl_client_is_valid+0x10>
 8013da6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8013daa:	3800      	subs	r0, #0
 8013dac:	bf18      	it	ne
 8013dae:	2001      	movne	r0, #1
 8013db0:	4770      	bx	lr
 8013db2:	bf00      	nop

08013db4 <rcl_convert_rmw_ret_to_rcl_ret>:
 8013db4:	280b      	cmp	r0, #11
 8013db6:	dc0d      	bgt.n	8013dd4 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8013db8:	2800      	cmp	r0, #0
 8013dba:	db09      	blt.n	8013dd0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8013dbc:	280b      	cmp	r0, #11
 8013dbe:	d807      	bhi.n	8013dd0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8013dc0:	e8df f000 	tbb	[pc, r0]
 8013dc4:	07060607 	.word	0x07060607
 8013dc8:	06060606 	.word	0x06060606
 8013dcc:	07070606 	.word	0x07070606
 8013dd0:	2001      	movs	r0, #1
 8013dd2:	4770      	bx	lr
 8013dd4:	28cb      	cmp	r0, #203	@ 0xcb
 8013dd6:	bf18      	it	ne
 8013dd8:	2001      	movne	r0, #1
 8013dda:	4770      	bx	lr

08013ddc <rcl_get_zero_initialized_context>:
 8013ddc:	4a03      	ldr	r2, [pc, #12]	@ (8013dec <rcl_get_zero_initialized_context+0x10>)
 8013dde:	4603      	mov	r3, r0
 8013de0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013de4:	e883 0003 	stmia.w	r3, {r0, r1}
 8013de8:	4618      	mov	r0, r3
 8013dea:	4770      	bx	lr
 8013dec:	0801c29c 	.word	0x0801c29c

08013df0 <rcl_context_is_valid>:
 8013df0:	b118      	cbz	r0, 8013dfa <rcl_context_is_valid+0xa>
 8013df2:	6840      	ldr	r0, [r0, #4]
 8013df4:	3800      	subs	r0, #0
 8013df6:	bf18      	it	ne
 8013df8:	2001      	movne	r0, #1
 8013dfa:	4770      	bx	lr

08013dfc <__cleanup_context>:
 8013dfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013e00:	4606      	mov	r6, r0
 8013e02:	6800      	ldr	r0, [r0, #0]
 8013e04:	2300      	movs	r3, #0
 8013e06:	6073      	str	r3, [r6, #4]
 8013e08:	2800      	cmp	r0, #0
 8013e0a:	d049      	beq.n	8013ea0 <__cleanup_context+0xa4>
 8013e0c:	6947      	ldr	r7, [r0, #20]
 8013e0e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8013e12:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8013e16:	b137      	cbz	r7, 8013e26 <__cleanup_context+0x2a>
 8013e18:	3014      	adds	r0, #20
 8013e1a:	f7f8 ff0f 	bl	800cc3c <rcl_init_options_fini>
 8013e1e:	4607      	mov	r7, r0
 8013e20:	2800      	cmp	r0, #0
 8013e22:	d144      	bne.n	8013eae <__cleanup_context+0xb2>
 8013e24:	6830      	ldr	r0, [r6, #0]
 8013e26:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013e28:	b143      	cbz	r3, 8013e3c <__cleanup_context+0x40>
 8013e2a:	3028      	adds	r0, #40	@ 0x28
 8013e2c:	f7fa fb40 	bl	800e4b0 <rmw_context_fini>
 8013e30:	b118      	cbz	r0, 8013e3a <__cleanup_context+0x3e>
 8013e32:	2f00      	cmp	r7, #0
 8013e34:	d03e      	beq.n	8013eb4 <__cleanup_context+0xb8>
 8013e36:	f7fa f873 	bl	800df20 <rcutils_reset_error>
 8013e3a:	6830      	ldr	r0, [r6, #0]
 8013e3c:	6a03      	ldr	r3, [r0, #32]
 8013e3e:	b1db      	cbz	r3, 8013e78 <__cleanup_context+0x7c>
 8013e40:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8013e44:	2a01      	cmp	r2, #1
 8013e46:	f17c 0100 	sbcs.w	r1, ip, #0
 8013e4a:	db11      	blt.n	8013e70 <__cleanup_context+0x74>
 8013e4c:	2400      	movs	r4, #0
 8013e4e:	4625      	mov	r5, r4
 8013e50:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013e54:	4649      	mov	r1, r9
 8013e56:	b1b8      	cbz	r0, 8013e88 <__cleanup_context+0x8c>
 8013e58:	47c0      	blx	r8
 8013e5a:	6833      	ldr	r3, [r6, #0]
 8013e5c:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8013e60:	3401      	adds	r4, #1
 8013e62:	f145 0500 	adc.w	r5, r5, #0
 8013e66:	4294      	cmp	r4, r2
 8013e68:	eb75 010c 	sbcs.w	r1, r5, ip
 8013e6c:	6a1b      	ldr	r3, [r3, #32]
 8013e6e:	dbef      	blt.n	8013e50 <__cleanup_context+0x54>
 8013e70:	4618      	mov	r0, r3
 8013e72:	4649      	mov	r1, r9
 8013e74:	47c0      	blx	r8
 8013e76:	6830      	ldr	r0, [r6, #0]
 8013e78:	4649      	mov	r1, r9
 8013e7a:	47c0      	blx	r8
 8013e7c:	2300      	movs	r3, #0
 8013e7e:	e9c6 3300 	strd	r3, r3, [r6]
 8013e82:	4638      	mov	r0, r7
 8013e84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013e88:	3401      	adds	r4, #1
 8013e8a:	f145 0500 	adc.w	r5, r5, #0
 8013e8e:	4294      	cmp	r4, r2
 8013e90:	eb75 010c 	sbcs.w	r1, r5, ip
 8013e94:	dbdc      	blt.n	8013e50 <__cleanup_context+0x54>
 8013e96:	4618      	mov	r0, r3
 8013e98:	4649      	mov	r1, r9
 8013e9a:	47c0      	blx	r8
 8013e9c:	6830      	ldr	r0, [r6, #0]
 8013e9e:	e7eb      	b.n	8013e78 <__cleanup_context+0x7c>
 8013ea0:	4607      	mov	r7, r0
 8013ea2:	2300      	movs	r3, #0
 8013ea4:	e9c6 3300 	strd	r3, r3, [r6]
 8013ea8:	4638      	mov	r0, r7
 8013eaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013eae:	f7fa f837 	bl	800df20 <rcutils_reset_error>
 8013eb2:	e7b7      	b.n	8013e24 <__cleanup_context+0x28>
 8013eb4:	f7ff ff7e 	bl	8013db4 <rcl_convert_rmw_ret_to_rcl_ret>
 8013eb8:	4607      	mov	r7, r0
 8013eba:	e7bc      	b.n	8013e36 <__cleanup_context+0x3a>

08013ebc <rcl_init>:
 8013ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ec0:	1e05      	subs	r5, r0, #0
 8013ec2:	b09e      	sub	sp, #120	@ 0x78
 8013ec4:	460e      	mov	r6, r1
 8013ec6:	4690      	mov	r8, r2
 8013ec8:	461f      	mov	r7, r3
 8013eca:	f340 809c 	ble.w	8014006 <rcl_init+0x14a>
 8013ece:	2900      	cmp	r1, #0
 8013ed0:	f000 809c 	beq.w	801400c <rcl_init+0x150>
 8013ed4:	f1a1 0e04 	sub.w	lr, r1, #4
 8013ed8:	f04f 0c00 	mov.w	ip, #0
 8013edc:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8013ee0:	f10c 0c01 	add.w	ip, ip, #1
 8013ee4:	2c00      	cmp	r4, #0
 8013ee6:	f000 8091 	beq.w	801400c <rcl_init+0x150>
 8013eea:	4565      	cmp	r5, ip
 8013eec:	d1f6      	bne.n	8013edc <rcl_init+0x20>
 8013eee:	f1b8 0f00 	cmp.w	r8, #0
 8013ef2:	f000 808b 	beq.w	801400c <rcl_init+0x150>
 8013ef6:	f8d8 4000 	ldr.w	r4, [r8]
 8013efa:	2c00      	cmp	r4, #0
 8013efc:	f000 8086 	beq.w	801400c <rcl_init+0x150>
 8013f00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013f02:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8013f06:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013f0a:	6823      	ldr	r3, [r4, #0]
 8013f0c:	f8cc 3000 	str.w	r3, [ip]
 8013f10:	a819      	add	r0, sp, #100	@ 0x64
 8013f12:	f7f9 ffdf 	bl	800ded4 <rcutils_allocator_is_valid>
 8013f16:	2800      	cmp	r0, #0
 8013f18:	d078      	beq.n	801400c <rcl_init+0x150>
 8013f1a:	2f00      	cmp	r7, #0
 8013f1c:	d076      	beq.n	801400c <rcl_init+0x150>
 8013f1e:	683b      	ldr	r3, [r7, #0]
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d178      	bne.n	8014016 <rcl_init+0x15a>
 8013f24:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8013f28:	2178      	movs	r1, #120	@ 0x78
 8013f2a:	2001      	movs	r0, #1
 8013f2c:	4798      	blx	r3
 8013f2e:	4604      	mov	r4, r0
 8013f30:	6038      	str	r0, [r7, #0]
 8013f32:	2800      	cmp	r0, #0
 8013f34:	f000 80b6 	beq.w	80140a4 <rcl_init+0x1e8>
 8013f38:	a802      	add	r0, sp, #8
 8013f3a:	f003 f86d 	bl	8017018 <rmw_get_zero_initialized_context>
 8013f3e:	a902      	add	r1, sp, #8
 8013f40:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8013f44:	2250      	movs	r2, #80	@ 0x50
 8013f46:	ac19      	add	r4, sp, #100	@ 0x64
 8013f48:	f005 ff45 	bl	8019dd6 <memcpy>
 8013f4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013f4e:	f8d7 e000 	ldr.w	lr, [r7]
 8013f52:	46f4      	mov	ip, lr
 8013f54:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013f58:	6823      	ldr	r3, [r4, #0]
 8013f5a:	f8cc 3000 	str.w	r3, [ip]
 8013f5e:	f10e 0114 	add.w	r1, lr, #20
 8013f62:	4640      	mov	r0, r8
 8013f64:	f7f8 fe94 	bl	800cc90 <rcl_init_options_copy>
 8013f68:	4604      	mov	r4, r0
 8013f6a:	2800      	cmp	r0, #0
 8013f6c:	d144      	bne.n	8013ff8 <rcl_init+0x13c>
 8013f6e:	f8d7 9000 	ldr.w	r9, [r7]
 8013f72:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8013f76:	f8c9 0020 	str.w	r0, [r9, #32]
 8013f7a:	f8c9 5018 	str.w	r5, [r9, #24]
 8013f7e:	f8c9 801c 	str.w	r8, [r9, #28]
 8013f82:	2d00      	cmp	r5, #0
 8013f84:	d04e      	beq.n	8014024 <rcl_init+0x168>
 8013f86:	2e00      	cmp	r6, #0
 8013f88:	d04c      	beq.n	8014024 <rcl_init+0x168>
 8013f8a:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8013f8e:	2104      	movs	r1, #4
 8013f90:	4628      	mov	r0, r5
 8013f92:	4798      	blx	r3
 8013f94:	f8c9 0020 	str.w	r0, [r9, #32]
 8013f98:	f8d7 9000 	ldr.w	r9, [r7]
 8013f9c:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8013fa0:	46ca      	mov	sl, r9
 8013fa2:	b343      	cbz	r3, 8013ff6 <rcl_init+0x13a>
 8013fa4:	2d01      	cmp	r5, #1
 8013fa6:	f178 0300 	sbcs.w	r3, r8, #0
 8013faa:	db3b      	blt.n	8014024 <rcl_init+0x168>
 8013fac:	2400      	movs	r4, #0
 8013fae:	3e04      	subs	r6, #4
 8013fb0:	46a1      	mov	r9, r4
 8013fb2:	e00b      	b.n	8013fcc <rcl_init+0x110>
 8013fb4:	6831      	ldr	r1, [r6, #0]
 8013fb6:	f005 ff0e 	bl	8019dd6 <memcpy>
 8013fba:	3401      	adds	r4, #1
 8013fbc:	f149 0900 	adc.w	r9, r9, #0
 8013fc0:	45c8      	cmp	r8, r9
 8013fc2:	bf08      	it	eq
 8013fc4:	42a5      	cmpeq	r5, r4
 8013fc6:	d02b      	beq.n	8014020 <rcl_init+0x164>
 8013fc8:	f8d7 a000 	ldr.w	sl, [r7]
 8013fcc:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8013fd0:	f7ec f930 	bl	8000234 <strlen>
 8013fd4:	1c42      	adds	r2, r0, #1
 8013fd6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013fd8:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8013fda:	f8da a020 	ldr.w	sl, [sl, #32]
 8013fde:	9201      	str	r2, [sp, #4]
 8013fe0:	4610      	mov	r0, r2
 8013fe2:	4798      	blx	r3
 8013fe4:	683b      	ldr	r3, [r7, #0]
 8013fe6:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8013fea:	6a1b      	ldr	r3, [r3, #32]
 8013fec:	9a01      	ldr	r2, [sp, #4]
 8013fee:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013ff2:	2800      	cmp	r0, #0
 8013ff4:	d1de      	bne.n	8013fb4 <rcl_init+0xf8>
 8013ff6:	240a      	movs	r4, #10
 8013ff8:	4638      	mov	r0, r7
 8013ffa:	f7ff feff 	bl	8013dfc <__cleanup_context>
 8013ffe:	4620      	mov	r0, r4
 8014000:	b01e      	add	sp, #120	@ 0x78
 8014002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014006:	2900      	cmp	r1, #0
 8014008:	f43f af71 	beq.w	8013eee <rcl_init+0x32>
 801400c:	240b      	movs	r4, #11
 801400e:	4620      	mov	r0, r4
 8014010:	b01e      	add	sp, #120	@ 0x78
 8014012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014016:	2464      	movs	r4, #100	@ 0x64
 8014018:	4620      	mov	r0, r4
 801401a:	b01e      	add	sp, #120	@ 0x78
 801401c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014020:	f8d7 9000 	ldr.w	r9, [r7]
 8014024:	4926      	ldr	r1, [pc, #152]	@ (80140c0 <rcl_init+0x204>)
 8014026:	680b      	ldr	r3, [r1, #0]
 8014028:	3301      	adds	r3, #1
 801402a:	d036      	beq.n	801409a <rcl_init+0x1de>
 801402c:	600b      	str	r3, [r1, #0]
 801402e:	461a      	mov	r2, r3
 8014030:	2400      	movs	r4, #0
 8014032:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8014036:	607b      	str	r3, [r7, #4]
 8014038:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801403a:	3301      	adds	r3, #1
 801403c:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8014040:	d034      	beq.n	80140ac <rcl_init+0x1f0>
 8014042:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8014046:	b93b      	cbnz	r3, 8014058 <rcl_init+0x19c>
 8014048:	3030      	adds	r0, #48	@ 0x30
 801404a:	f000 f83b 	bl	80140c4 <rcl_get_localhost_only>
 801404e:	4604      	mov	r4, r0
 8014050:	2800      	cmp	r0, #0
 8014052:	d1d1      	bne.n	8013ff8 <rcl_init+0x13c>
 8014054:	683b      	ldr	r3, [r7, #0]
 8014056:	6958      	ldr	r0, [r3, #20]
 8014058:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 801405a:	aa18      	add	r2, sp, #96	@ 0x60
 801405c:	a917      	add	r1, sp, #92	@ 0x5c
 801405e:	f001 f925 	bl	80152ac <rcl_validate_enclave_name>
 8014062:	4604      	mov	r4, r0
 8014064:	2800      	cmp	r0, #0
 8014066:	d1c7      	bne.n	8013ff8 <rcl_init+0x13c>
 8014068:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801406a:	b9eb      	cbnz	r3, 80140a8 <rcl_init+0x1ec>
 801406c:	6839      	ldr	r1, [r7, #0]
 801406e:	694b      	ldr	r3, [r1, #20]
 8014070:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8014072:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8014076:	f000 fb3f 	bl	80146f8 <rcl_get_security_options_from_environment>
 801407a:	4604      	mov	r4, r0
 801407c:	2800      	cmp	r0, #0
 801407e:	d1bb      	bne.n	8013ff8 <rcl_init+0x13c>
 8014080:	6839      	ldr	r1, [r7, #0]
 8014082:	6948      	ldr	r0, [r1, #20]
 8014084:	3128      	adds	r1, #40	@ 0x28
 8014086:	3018      	adds	r0, #24
 8014088:	f7fa f8dc 	bl	800e244 <rmw_init>
 801408c:	4604      	mov	r4, r0
 801408e:	2800      	cmp	r0, #0
 8014090:	d0bd      	beq.n	801400e <rcl_init+0x152>
 8014092:	f7ff fe8f 	bl	8013db4 <rcl_convert_rmw_ret_to_rcl_ret>
 8014096:	4604      	mov	r4, r0
 8014098:	e7ae      	b.n	8013ff8 <rcl_init+0x13c>
 801409a:	2201      	movs	r2, #1
 801409c:	461c      	mov	r4, r3
 801409e:	600a      	str	r2, [r1, #0]
 80140a0:	4613      	mov	r3, r2
 80140a2:	e7c6      	b.n	8014032 <rcl_init+0x176>
 80140a4:	240a      	movs	r4, #10
 80140a6:	e7b2      	b.n	801400e <rcl_init+0x152>
 80140a8:	2401      	movs	r4, #1
 80140aa:	e7a5      	b.n	8013ff8 <rcl_init+0x13c>
 80140ac:	3024      	adds	r0, #36	@ 0x24
 80140ae:	f004 fcd1 	bl	8018a54 <rcl_get_default_domain_id>
 80140b2:	4604      	mov	r4, r0
 80140b4:	2800      	cmp	r0, #0
 80140b6:	d19f      	bne.n	8013ff8 <rcl_init+0x13c>
 80140b8:	683b      	ldr	r3, [r7, #0]
 80140ba:	6958      	ldr	r0, [r3, #20]
 80140bc:	e7c1      	b.n	8014042 <rcl_init+0x186>
 80140be:	bf00      	nop
 80140c0:	2000ba98 	.word	0x2000ba98

080140c4 <rcl_get_localhost_only>:
 80140c4:	b510      	push	{r4, lr}
 80140c6:	b082      	sub	sp, #8
 80140c8:	2300      	movs	r3, #0
 80140ca:	9301      	str	r3, [sp, #4]
 80140cc:	b1b8      	cbz	r0, 80140fe <rcl_get_localhost_only+0x3a>
 80140ce:	4604      	mov	r4, r0
 80140d0:	a901      	add	r1, sp, #4
 80140d2:	480c      	ldr	r0, [pc, #48]	@ (8014104 <rcl_get_localhost_only+0x40>)
 80140d4:	f002 fcf4 	bl	8016ac0 <rcutils_get_env>
 80140d8:	b110      	cbz	r0, 80140e0 <rcl_get_localhost_only+0x1c>
 80140da:	2001      	movs	r0, #1
 80140dc:	b002      	add	sp, #8
 80140de:	bd10      	pop	{r4, pc}
 80140e0:	9b01      	ldr	r3, [sp, #4]
 80140e2:	b113      	cbz	r3, 80140ea <rcl_get_localhost_only+0x26>
 80140e4:	781a      	ldrb	r2, [r3, #0]
 80140e6:	2a31      	cmp	r2, #49	@ 0x31
 80140e8:	d004      	beq.n	80140f4 <rcl_get_localhost_only+0x30>
 80140ea:	2302      	movs	r3, #2
 80140ec:	2000      	movs	r0, #0
 80140ee:	7023      	strb	r3, [r4, #0]
 80140f0:	b002      	add	sp, #8
 80140f2:	bd10      	pop	{r4, pc}
 80140f4:	785b      	ldrb	r3, [r3, #1]
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d1f7      	bne.n	80140ea <rcl_get_localhost_only+0x26>
 80140fa:	2301      	movs	r3, #1
 80140fc:	e7f6      	b.n	80140ec <rcl_get_localhost_only+0x28>
 80140fe:	200b      	movs	r0, #11
 8014100:	b002      	add	sp, #8
 8014102:	bd10      	pop	{r4, pc}
 8014104:	0801c2a4 	.word	0x0801c2a4

08014108 <rcl_get_zero_initialized_node>:
 8014108:	4a03      	ldr	r2, [pc, #12]	@ (8014118 <rcl_get_zero_initialized_node+0x10>)
 801410a:	4603      	mov	r3, r0
 801410c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014110:	e883 0003 	stmia.w	r3, {r0, r1}
 8014114:	4618      	mov	r0, r3
 8014116:	4770      	bx	lr
 8014118:	0801c2c0 	.word	0x0801c2c0

0801411c <rcl_node_init>:
 801411c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014120:	b0a9      	sub	sp, #164	@ 0xa4
 8014122:	4604      	mov	r4, r0
 8014124:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 8014128:	a823      	add	r0, sp, #140	@ 0x8c
 801412a:	460e      	mov	r6, r1
 801412c:	4615      	mov	r5, r2
 801412e:	461f      	mov	r7, r3
 8014130:	f004 ff04 	bl	8018f3c <rcl_guard_condition_get_default_options>
 8014134:	f1b8 0f00 	cmp.w	r8, #0
 8014138:	f000 80e6 	beq.w	8014308 <rcl_node_init+0x1ec>
 801413c:	4640      	mov	r0, r8
 801413e:	f7f9 fec9 	bl	800ded4 <rcutils_allocator_is_valid>
 8014142:	2800      	cmp	r0, #0
 8014144:	f000 80e0 	beq.w	8014308 <rcl_node_init+0x1ec>
 8014148:	2e00      	cmp	r6, #0
 801414a:	f000 80dd 	beq.w	8014308 <rcl_node_init+0x1ec>
 801414e:	2d00      	cmp	r5, #0
 8014150:	f000 80da 	beq.w	8014308 <rcl_node_init+0x1ec>
 8014154:	2c00      	cmp	r4, #0
 8014156:	f000 80d7 	beq.w	8014308 <rcl_node_init+0x1ec>
 801415a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801415e:	f1b9 0f00 	cmp.w	r9, #0
 8014162:	f040 80fd 	bne.w	8014360 <rcl_node_init+0x244>
 8014166:	2f00      	cmp	r7, #0
 8014168:	f000 80ce 	beq.w	8014308 <rcl_node_init+0x1ec>
 801416c:	4638      	mov	r0, r7
 801416e:	f7ff fe3f 	bl	8013df0 <rcl_context_is_valid>
 8014172:	4682      	mov	sl, r0
 8014174:	2800      	cmp	r0, #0
 8014176:	f000 80cd 	beq.w	8014314 <rcl_node_init+0x1f8>
 801417a:	464a      	mov	r2, r9
 801417c:	a922      	add	r1, sp, #136	@ 0x88
 801417e:	4630      	mov	r0, r6
 8014180:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 8014184:	f003 f8c6 	bl	8017314 <rmw_validate_node_name>
 8014188:	4681      	mov	r9, r0
 801418a:	2800      	cmp	r0, #0
 801418c:	f040 80be 	bne.w	801430c <rcl_node_init+0x1f0>
 8014190:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8014192:	2800      	cmp	r0, #0
 8014194:	f040 80f0 	bne.w	8014378 <rcl_node_init+0x25c>
 8014198:	4628      	mov	r0, r5
 801419a:	f7ec f84b 	bl	8000234 <strlen>
 801419e:	2800      	cmp	r0, #0
 80141a0:	f040 80bb 	bne.w	801431a <rcl_node_init+0x1fe>
 80141a4:	4d7c      	ldr	r5, [pc, #496]	@ (8014398 <rcl_node_init+0x27c>)
 80141a6:	a922      	add	r1, sp, #136	@ 0x88
 80141a8:	2200      	movs	r2, #0
 80141aa:	4628      	mov	r0, r5
 80141ac:	f003 f894 	bl	80172d8 <rmw_validate_namespace>
 80141b0:	4681      	mov	r9, r0
 80141b2:	2800      	cmp	r0, #0
 80141b4:	f040 80aa 	bne.w	801430c <rcl_node_init+0x1f0>
 80141b8:	4682      	mov	sl, r0
 80141ba:	9822      	ldr	r0, [sp, #136]	@ 0x88
 80141bc:	2800      	cmp	r0, #0
 80141be:	f040 80e0 	bne.w	8014382 <rcl_node_init+0x266>
 80141c2:	f8d8 3000 	ldr.w	r3, [r8]
 80141c6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80141ca:	2078      	movs	r0, #120	@ 0x78
 80141cc:	4798      	blx	r3
 80141ce:	4681      	mov	r9, r0
 80141d0:	6060      	str	r0, [r4, #4]
 80141d2:	2800      	cmp	r0, #0
 80141d4:	f000 80ca 	beq.w	801436c <rcl_node_init+0x250>
 80141d8:	2200      	movs	r2, #0
 80141da:	2300      	movs	r3, #0
 80141dc:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 80141e0:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 80141e4:	a808      	add	r0, sp, #32
 80141e6:	f000 f907 	bl	80143f8 <rcl_node_get_default_options>
 80141ea:	a908      	add	r1, sp, #32
 80141ec:	4648      	mov	r0, r9
 80141ee:	2268      	movs	r2, #104	@ 0x68
 80141f0:	f005 fdf1 	bl	8019dd6 <memcpy>
 80141f4:	6861      	ldr	r1, [r4, #4]
 80141f6:	6027      	str	r7, [r4, #0]
 80141f8:	4640      	mov	r0, r8
 80141fa:	f000 f90b 	bl	8014414 <rcl_node_options_copy>
 80141fe:	2800      	cmp	r0, #0
 8014200:	d158      	bne.n	80142b4 <rcl_node_init+0x198>
 8014202:	4628      	mov	r0, r5
 8014204:	f7ec f816 	bl	8000234 <strlen>
 8014208:	4428      	add	r0, r5
 801420a:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 801420e:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8014212:	2b2f      	cmp	r3, #47	@ 0x2f
 8014214:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8014218:	9300      	str	r3, [sp, #0]
 801421a:	bf0c      	ite	eq
 801421c:	4b5f      	ldreq	r3, [pc, #380]	@ (801439c <rcl_node_init+0x280>)
 801421e:	4b60      	ldrne	r3, [pc, #384]	@ (80143a0 <rcl_node_init+0x284>)
 8014220:	9302      	str	r3, [sp, #8]
 8014222:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014226:	9301      	str	r3, [sp, #4]
 8014228:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 801422c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8014230:	f002 fc6e 	bl	8016b10 <rcutils_format_string_limit>
 8014234:	6823      	ldr	r3, [r4, #0]
 8014236:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 801423a:	6818      	ldr	r0, [r3, #0]
 801423c:	4631      	mov	r1, r6
 801423e:	3028      	adds	r0, #40	@ 0x28
 8014240:	462a      	mov	r2, r5
 8014242:	6866      	ldr	r6, [r4, #4]
 8014244:	f7fa f9e0 	bl	800e608 <rmw_create_node>
 8014248:	6863      	ldr	r3, [r4, #4]
 801424a:	66b0      	str	r0, [r6, #104]	@ 0x68
 801424c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801424e:	2800      	cmp	r0, #0
 8014250:	d032      	beq.n	80142b8 <rcl_node_init+0x19c>
 8014252:	f7fa fa6d 	bl	800e730 <rmw_node_get_graph_guard_condition>
 8014256:	4681      	mov	r9, r0
 8014258:	b360      	cbz	r0, 80142b4 <rcl_node_init+0x198>
 801425a:	f8d8 3000 	ldr.w	r3, [r8]
 801425e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014262:	6866      	ldr	r6, [r4, #4]
 8014264:	2008      	movs	r0, #8
 8014266:	4798      	blx	r3
 8014268:	6863      	ldr	r3, [r4, #4]
 801426a:	66f0      	str	r0, [r6, #108]	@ 0x6c
 801426c:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 8014270:	f1bb 0f00 	cmp.w	fp, #0
 8014274:	d020      	beq.n	80142b8 <rcl_node_init+0x19c>
 8014276:	a806      	add	r0, sp, #24
 8014278:	f004 fd84 	bl	8018d84 <rcl_get_zero_initialized_guard_condition>
 801427c:	a806      	add	r0, sp, #24
 801427e:	c803      	ldmia	r0, {r0, r1}
 8014280:	6863      	ldr	r3, [r4, #4]
 8014282:	46c4      	mov	ip, r8
 8014284:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8014288:	e88b 0003 	stmia.w	fp, {r0, r1}
 801428c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014290:	ae23      	add	r6, sp, #140	@ 0x8c
 8014292:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8014294:	f8dc 3000 	ldr.w	r3, [ip]
 8014298:	6033      	str	r3, [r6, #0]
 801429a:	ab28      	add	r3, sp, #160	@ 0xa0
 801429c:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 80142a0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80142a4:	4649      	mov	r1, r9
 80142a6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80142a8:	463a      	mov	r2, r7
 80142aa:	4670      	mov	r0, lr
 80142ac:	f004 fdc0 	bl	8018e30 <rcl_guard_condition_init_from_rmw>
 80142b0:	4681      	mov	r9, r0
 80142b2:	b328      	cbz	r0, 8014300 <rcl_node_init+0x1e4>
 80142b4:	6863      	ldr	r3, [r4, #4]
 80142b6:	b1f3      	cbz	r3, 80142f6 <rcl_node_init+0x1da>
 80142b8:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80142ba:	b128      	cbz	r0, 80142c8 <rcl_node_init+0x1ac>
 80142bc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80142c0:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80142c4:	4798      	blx	r3
 80142c6:	6863      	ldr	r3, [r4, #4]
 80142c8:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80142ca:	b110      	cbz	r0, 80142d2 <rcl_node_init+0x1b6>
 80142cc:	f7fa f9b4 	bl	800e638 <rmw_destroy_node>
 80142d0:	6863      	ldr	r3, [r4, #4]
 80142d2:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80142d4:	b148      	cbz	r0, 80142ea <rcl_node_init+0x1ce>
 80142d6:	f004 fe0b 	bl	8018ef0 <rcl_guard_condition_fini>
 80142da:	6863      	ldr	r3, [r4, #4]
 80142dc:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80142e0:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80142e2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80142e6:	4798      	blx	r3
 80142e8:	6863      	ldr	r3, [r4, #4]
 80142ea:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80142ee:	4618      	mov	r0, r3
 80142f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80142f4:	4798      	blx	r3
 80142f6:	2300      	movs	r3, #0
 80142f8:	e9c4 3300 	strd	r3, r3, [r4]
 80142fc:	f04f 0901 	mov.w	r9, #1
 8014300:	f1ba 0f00 	cmp.w	sl, #0
 8014304:	d125      	bne.n	8014352 <rcl_node_init+0x236>
 8014306:	e001      	b.n	801430c <rcl_node_init+0x1f0>
 8014308:	f04f 090b 	mov.w	r9, #11
 801430c:	4648      	mov	r0, r9
 801430e:	b029      	add	sp, #164	@ 0xa4
 8014310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014314:	f04f 0965 	mov.w	r9, #101	@ 0x65
 8014318:	e7f8      	b.n	801430c <rcl_node_init+0x1f0>
 801431a:	782b      	ldrb	r3, [r5, #0]
 801431c:	2b2f      	cmp	r3, #47	@ 0x2f
 801431e:	f43f af42 	beq.w	80141a6 <rcl_node_init+0x8a>
 8014322:	9503      	str	r5, [sp, #12]
 8014324:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8014328:	9300      	str	r3, [sp, #0]
 801432a:	4b1e      	ldr	r3, [pc, #120]	@ (80143a4 <rcl_node_init+0x288>)
 801432c:	9302      	str	r3, [sp, #8]
 801432e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014332:	9301      	str	r3, [sp, #4]
 8014334:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8014338:	f002 fbea 	bl	8016b10 <rcutils_format_string_limit>
 801433c:	4605      	mov	r5, r0
 801433e:	b340      	cbz	r0, 8014392 <rcl_node_init+0x276>
 8014340:	2200      	movs	r2, #0
 8014342:	a922      	add	r1, sp, #136	@ 0x88
 8014344:	9222      	str	r2, [sp, #136]	@ 0x88
 8014346:	f002 ffc7 	bl	80172d8 <rmw_validate_namespace>
 801434a:	4681      	mov	r9, r0
 801434c:	2800      	cmp	r0, #0
 801434e:	f43f af34 	beq.w	80141ba <rcl_node_init+0x9e>
 8014352:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014356:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801435a:	4628      	mov	r0, r5
 801435c:	4798      	blx	r3
 801435e:	e7d5      	b.n	801430c <rcl_node_init+0x1f0>
 8014360:	f04f 0964 	mov.w	r9, #100	@ 0x64
 8014364:	4648      	mov	r0, r9
 8014366:	b029      	add	sp, #164	@ 0xa4
 8014368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801436c:	f04f 090a 	mov.w	r9, #10
 8014370:	f1ba 0f00 	cmp.w	sl, #0
 8014374:	d1ed      	bne.n	8014352 <rcl_node_init+0x236>
 8014376:	e7c9      	b.n	801430c <rcl_node_init+0x1f0>
 8014378:	f003 f81e 	bl	80173b8 <rmw_node_name_validation_result_string>
 801437c:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 8014380:	e7c4      	b.n	801430c <rcl_node_init+0x1f0>
 8014382:	f002 ffbb 	bl	80172fc <rmw_namespace_validation_result_string>
 8014386:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 801438a:	f1ba 0f00 	cmp.w	sl, #0
 801438e:	d1e0      	bne.n	8014352 <rcl_node_init+0x236>
 8014390:	e7bc      	b.n	801430c <rcl_node_init+0x1f0>
 8014392:	f04f 090a 	mov.w	r9, #10
 8014396:	e7b9      	b.n	801430c <rcl_node_init+0x1f0>
 8014398:	0801bd6c 	.word	0x0801bd6c
 801439c:	0801bd94 	.word	0x0801bd94
 80143a0:	0801bd70 	.word	0x0801bd70
 80143a4:	0801c2bc 	.word	0x0801c2bc

080143a8 <rcl_node_is_valid>:
 80143a8:	b130      	cbz	r0, 80143b8 <rcl_node_is_valid+0x10>
 80143aa:	6843      	ldr	r3, [r0, #4]
 80143ac:	b123      	cbz	r3, 80143b8 <rcl_node_is_valid+0x10>
 80143ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80143b0:	b113      	cbz	r3, 80143b8 <rcl_node_is_valid+0x10>
 80143b2:	6800      	ldr	r0, [r0, #0]
 80143b4:	f7ff bd1c 	b.w	8013df0 <rcl_context_is_valid>
 80143b8:	2000      	movs	r0, #0
 80143ba:	4770      	bx	lr

080143bc <rcl_node_get_name>:
 80143bc:	b120      	cbz	r0, 80143c8 <rcl_node_get_name+0xc>
 80143be:	6840      	ldr	r0, [r0, #4]
 80143c0:	b110      	cbz	r0, 80143c8 <rcl_node_get_name+0xc>
 80143c2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80143c4:	b100      	cbz	r0, 80143c8 <rcl_node_get_name+0xc>
 80143c6:	6880      	ldr	r0, [r0, #8]
 80143c8:	4770      	bx	lr
 80143ca:	bf00      	nop

080143cc <rcl_node_get_namespace>:
 80143cc:	b120      	cbz	r0, 80143d8 <rcl_node_get_namespace+0xc>
 80143ce:	6840      	ldr	r0, [r0, #4]
 80143d0:	b110      	cbz	r0, 80143d8 <rcl_node_get_namespace+0xc>
 80143d2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80143d4:	b100      	cbz	r0, 80143d8 <rcl_node_get_namespace+0xc>
 80143d6:	68c0      	ldr	r0, [r0, #12]
 80143d8:	4770      	bx	lr
 80143da:	bf00      	nop

080143dc <rcl_node_get_options>:
 80143dc:	b128      	cbz	r0, 80143ea <rcl_node_get_options+0xe>
 80143de:	6840      	ldr	r0, [r0, #4]
 80143e0:	b118      	cbz	r0, 80143ea <rcl_node_get_options+0xe>
 80143e2:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	bf08      	it	eq
 80143e8:	2000      	moveq	r0, #0
 80143ea:	4770      	bx	lr

080143ec <rcl_node_get_rmw_handle>:
 80143ec:	b110      	cbz	r0, 80143f4 <rcl_node_get_rmw_handle+0x8>
 80143ee:	6840      	ldr	r0, [r0, #4]
 80143f0:	b100      	cbz	r0, 80143f4 <rcl_node_get_rmw_handle+0x8>
 80143f2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80143f4:	4770      	bx	lr
 80143f6:	bf00      	nop

080143f8 <rcl_node_get_default_options>:
 80143f8:	b510      	push	{r4, lr}
 80143fa:	2268      	movs	r2, #104	@ 0x68
 80143fc:	4604      	mov	r4, r0
 80143fe:	2100      	movs	r1, #0
 8014400:	f005 fc20 	bl	8019c44 <memset>
 8014404:	4620      	mov	r0, r4
 8014406:	f7f9 fd57 	bl	800deb8 <rcutils_get_default_allocator>
 801440a:	2301      	movs	r3, #1
 801440c:	7523      	strb	r3, [r4, #20]
 801440e:	4620      	mov	r0, r4
 8014410:	bd10      	pop	{r4, pc}
 8014412:	bf00      	nop

08014414 <rcl_node_options_copy>:
 8014414:	b1d0      	cbz	r0, 801444c <rcl_node_options_copy+0x38>
 8014416:	b570      	push	{r4, r5, r6, lr}
 8014418:	460c      	mov	r4, r1
 801441a:	b1a9      	cbz	r1, 8014448 <rcl_node_options_copy+0x34>
 801441c:	4288      	cmp	r0, r1
 801441e:	4684      	mov	ip, r0
 8014420:	d012      	beq.n	8014448 <rcl_node_options_copy+0x34>
 8014422:	4605      	mov	r5, r0
 8014424:	8a86      	ldrh	r6, [r0, #20]
 8014426:	468e      	mov	lr, r1
 8014428:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801442a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801442e:	682b      	ldr	r3, [r5, #0]
 8014430:	f8ce 3000 	str.w	r3, [lr]
 8014434:	f10c 0118 	add.w	r1, ip, #24
 8014438:	2250      	movs	r2, #80	@ 0x50
 801443a:	82a6      	strh	r6, [r4, #20]
 801443c:	f104 0018 	add.w	r0, r4, #24
 8014440:	f005 fcc9 	bl	8019dd6 <memcpy>
 8014444:	2000      	movs	r0, #0
 8014446:	bd70      	pop	{r4, r5, r6, pc}
 8014448:	200b      	movs	r0, #11
 801444a:	bd70      	pop	{r4, r5, r6, pc}
 801444c:	200b      	movs	r0, #11
 801444e:	4770      	bx	lr

08014450 <rcl_node_resolve_name>:
 8014450:	b082      	sub	sp, #8
 8014452:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014456:	b091      	sub	sp, #68	@ 0x44
 8014458:	ac1a      	add	r4, sp, #104	@ 0x68
 801445a:	e884 000c 	stmia.w	r4, {r2, r3}
 801445e:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8014462:	2800      	cmp	r0, #0
 8014464:	d03b      	beq.n	80144de <rcl_node_resolve_name+0x8e>
 8014466:	460c      	mov	r4, r1
 8014468:	4605      	mov	r5, r0
 801446a:	f7ff ffb7 	bl	80143dc <rcl_node_get_options>
 801446e:	2800      	cmp	r0, #0
 8014470:	d037      	beq.n	80144e2 <rcl_node_resolve_name+0x92>
 8014472:	4628      	mov	r0, r5
 8014474:	f7ff ffa2 	bl	80143bc <rcl_node_get_name>
 8014478:	4606      	mov	r6, r0
 801447a:	4628      	mov	r0, r5
 801447c:	f7ff ffa6 	bl	80143cc <rcl_node_get_namespace>
 8014480:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8014484:	4681      	mov	r9, r0
 8014486:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801448a:	ad0b      	add	r5, sp, #44	@ 0x2c
 801448c:	46ac      	mov	ip, r5
 801448e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014492:	f8de 3000 	ldr.w	r3, [lr]
 8014496:	f8cc 3000 	str.w	r3, [ip]
 801449a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801449c:	b1fb      	cbz	r3, 80144de <rcl_node_resolve_name+0x8e>
 801449e:	468a      	mov	sl, r1
 80144a0:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 80144a4:	f002 fc8c 	bl	8016dc0 <rcutils_get_zero_initialized_string_map>
 80144a8:	ab10      	add	r3, sp, #64	@ 0x40
 80144aa:	9008      	str	r0, [sp, #32]
 80144ac:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80144b0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80144b4:	2100      	movs	r1, #0
 80144b6:	e895 000c 	ldmia.w	r5, {r2, r3}
 80144ba:	a808      	add	r0, sp, #32
 80144bc:	f002 fcf8 	bl	8016eb0 <rcutils_string_map_init>
 80144c0:	4607      	mov	r7, r0
 80144c2:	b180      	cbz	r0, 80144e6 <rcl_node_resolve_name+0x96>
 80144c4:	f7f9 fd14 	bl	800def0 <rcutils_get_error_string>
 80144c8:	f7f9 fd2a 	bl	800df20 <rcutils_reset_error>
 80144cc:	2f0a      	cmp	r7, #10
 80144ce:	bf18      	it	ne
 80144d0:	2701      	movne	r7, #1
 80144d2:	4638      	mov	r0, r7
 80144d4:	b011      	add	sp, #68	@ 0x44
 80144d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144da:	b002      	add	sp, #8
 80144dc:	4770      	bx	lr
 80144de:	270b      	movs	r7, #11
 80144e0:	e7f7      	b.n	80144d2 <rcl_node_resolve_name+0x82>
 80144e2:	2701      	movs	r7, #1
 80144e4:	e7f5      	b.n	80144d2 <rcl_node_resolve_name+0x82>
 80144e6:	9009      	str	r0, [sp, #36]	@ 0x24
 80144e8:	9007      	str	r0, [sp, #28]
 80144ea:	a808      	add	r0, sp, #32
 80144ec:	f004 fc44 	bl	8018d78 <rcl_get_default_topic_name_substitutions>
 80144f0:	4607      	mov	r7, r0
 80144f2:	b1a8      	cbz	r0, 8014520 <rcl_node_resolve_name+0xd0>
 80144f4:	280a      	cmp	r0, #10
 80144f6:	9c07      	ldr	r4, [sp, #28]
 80144f8:	d000      	beq.n	80144fc <rcl_node_resolve_name+0xac>
 80144fa:	2701      	movs	r7, #1
 80144fc:	a808      	add	r0, sp, #32
 80144fe:	f002 fd17 	bl	8016f30 <rcutils_string_map_fini>
 8014502:	2800      	cmp	r0, #0
 8014504:	d13d      	bne.n	8014582 <rcl_node_resolve_name+0x132>
 8014506:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014508:	4659      	mov	r1, fp
 801450a:	47d0      	blx	sl
 801450c:	4659      	mov	r1, fp
 801450e:	4620      	mov	r0, r4
 8014510:	47d0      	blx	sl
 8014512:	f1b8 0f00 	cmp.w	r8, #0
 8014516:	d0dc      	beq.n	80144d2 <rcl_node_resolve_name+0x82>
 8014518:	2f67      	cmp	r7, #103	@ 0x67
 801451a:	bf08      	it	eq
 801451c:	2768      	moveq	r7, #104	@ 0x68
 801451e:	e7d8      	b.n	80144d2 <rcl_node_resolve_name+0x82>
 8014520:	ab09      	add	r3, sp, #36	@ 0x24
 8014522:	9305      	str	r3, [sp, #20]
 8014524:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014526:	46ec      	mov	ip, sp
 8014528:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801452c:	682b      	ldr	r3, [r5, #0]
 801452e:	f8cc 3000 	str.w	r3, [ip]
 8014532:	464a      	mov	r2, r9
 8014534:	4631      	mov	r1, r6
 8014536:	4620      	mov	r0, r4
 8014538:	ab08      	add	r3, sp, #32
 801453a:	f004 fabf 	bl	8018abc <rcl_expand_topic_name>
 801453e:	4607      	mov	r7, r0
 8014540:	b9b8      	cbnz	r0, 8014572 <rcl_node_resolve_name+0x122>
 8014542:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8014544:	9009      	str	r0, [sp, #36]	@ 0x24
 8014546:	4602      	mov	r2, r0
 8014548:	a90a      	add	r1, sp, #40	@ 0x28
 801454a:	4620      	mov	r0, r4
 801454c:	f002 fe00 	bl	8017150 <rmw_validate_full_topic_name>
 8014550:	b988      	cbnz	r0, 8014576 <rcl_node_resolve_name+0x126>
 8014552:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8014554:	b9d5      	cbnz	r5, 801458c <rcl_node_resolve_name+0x13c>
 8014556:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014558:	a808      	add	r0, sp, #32
 801455a:	601c      	str	r4, [r3, #0]
 801455c:	f002 fce8 	bl	8016f30 <rcutils_string_map_fini>
 8014560:	4607      	mov	r7, r0
 8014562:	b1a8      	cbz	r0, 8014590 <rcl_node_resolve_name+0x140>
 8014564:	f7f9 fcc4 	bl	800def0 <rcutils_get_error_string>
 8014568:	462c      	mov	r4, r5
 801456a:	f7f9 fcd9 	bl	800df20 <rcutils_reset_error>
 801456e:	2701      	movs	r7, #1
 8014570:	e7c9      	b.n	8014506 <rcl_node_resolve_name+0xb6>
 8014572:	9c07      	ldr	r4, [sp, #28]
 8014574:	e7c2      	b.n	80144fc <rcl_node_resolve_name+0xac>
 8014576:	f7f9 fcbb 	bl	800def0 <rcutils_get_error_string>
 801457a:	2701      	movs	r7, #1
 801457c:	f7f9 fcd0 	bl	800df20 <rcutils_reset_error>
 8014580:	e7bc      	b.n	80144fc <rcl_node_resolve_name+0xac>
 8014582:	f7f9 fcb5 	bl	800def0 <rcutils_get_error_string>
 8014586:	f7f9 fccb 	bl	800df20 <rcutils_reset_error>
 801458a:	e7bc      	b.n	8014506 <rcl_node_resolve_name+0xb6>
 801458c:	2767      	movs	r7, #103	@ 0x67
 801458e:	e7b5      	b.n	80144fc <rcl_node_resolve_name+0xac>
 8014590:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014592:	4659      	mov	r1, fp
 8014594:	47d0      	blx	sl
 8014596:	4659      	mov	r1, fp
 8014598:	4638      	mov	r0, r7
 801459a:	47d0      	blx	sl
 801459c:	e799      	b.n	80144d2 <rcl_node_resolve_name+0x82>
 801459e:	bf00      	nop

080145a0 <exact_match_lookup>:
 80145a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80145a2:	f102 0708 	add.w	r7, r2, #8
 80145a6:	460b      	mov	r3, r1
 80145a8:	4614      	mov	r4, r2
 80145aa:	4606      	mov	r6, r0
 80145ac:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80145b0:	b085      	sub	sp, #20
 80145b2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80145b6:	4618      	mov	r0, r3
 80145b8:	4919      	ldr	r1, [pc, #100]	@ (8014620 <exact_match_lookup+0x80>)
 80145ba:	e894 000c 	ldmia.w	r4, {r2, r3}
 80145be:	f002 fa99 	bl	8016af4 <rcutils_join_path>
 80145c2:	7833      	ldrb	r3, [r6, #0]
 80145c4:	2b2f      	cmp	r3, #47	@ 0x2f
 80145c6:	4605      	mov	r5, r0
 80145c8:	d023      	beq.n	8014612 <exact_match_lookup+0x72>
 80145ca:	f104 030c 	add.w	r3, r4, #12
 80145ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 80145d2:	e88d 0003 	stmia.w	sp, {r0, r1}
 80145d6:	1c70      	adds	r0, r6, #1
 80145d8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80145dc:	f002 fa90 	bl	8016b00 <rcutils_to_native_path>
 80145e0:	4606      	mov	r6, r0
 80145e2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80145e6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80145ea:	4631      	mov	r1, r6
 80145ec:	e894 000c 	ldmia.w	r4, {r2, r3}
 80145f0:	4628      	mov	r0, r5
 80145f2:	f002 fa7f 	bl	8016af4 <rcutils_join_path>
 80145f6:	6862      	ldr	r2, [r4, #4]
 80145f8:	6921      	ldr	r1, [r4, #16]
 80145fa:	4603      	mov	r3, r0
 80145fc:	4630      	mov	r0, r6
 80145fe:	461e      	mov	r6, r3
 8014600:	4790      	blx	r2
 8014602:	4628      	mov	r0, r5
 8014604:	6863      	ldr	r3, [r4, #4]
 8014606:	6921      	ldr	r1, [r4, #16]
 8014608:	4798      	blx	r3
 801460a:	4635      	mov	r5, r6
 801460c:	4628      	mov	r0, r5
 801460e:	b005      	add	sp, #20
 8014610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014612:	7873      	ldrb	r3, [r6, #1]
 8014614:	2b00      	cmp	r3, #0
 8014616:	d1d8      	bne.n	80145ca <exact_match_lookup+0x2a>
 8014618:	4628      	mov	r0, r5
 801461a:	b005      	add	sp, #20
 801461c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801461e:	bf00      	nop
 8014620:	0801c304 	.word	0x0801c304

08014624 <rcl_get_secure_root>:
 8014624:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014628:	b085      	sub	sp, #20
 801462a:	b168      	cbz	r0, 8014648 <rcl_get_secure_root+0x24>
 801462c:	4607      	mov	r7, r0
 801462e:	4608      	mov	r0, r1
 8014630:	460c      	mov	r4, r1
 8014632:	f7f9 fc4f 	bl	800ded4 <rcutils_allocator_is_valid>
 8014636:	b138      	cbz	r0, 8014648 <rcl_get_secure_root+0x24>
 8014638:	2300      	movs	r3, #0
 801463a:	482d      	ldr	r0, [pc, #180]	@ (80146f0 <rcl_get_secure_root+0xcc>)
 801463c:	9303      	str	r3, [sp, #12]
 801463e:	a903      	add	r1, sp, #12
 8014640:	f002 fa3e 	bl	8016ac0 <rcutils_get_env>
 8014644:	4605      	mov	r5, r0
 8014646:	b120      	cbz	r0, 8014652 <rcl_get_secure_root+0x2e>
 8014648:	2500      	movs	r5, #0
 801464a:	4628      	mov	r0, r5
 801464c:	b005      	add	sp, #20
 801464e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014652:	9b03      	ldr	r3, [sp, #12]
 8014654:	781a      	ldrb	r2, [r3, #0]
 8014656:	2a00      	cmp	r2, #0
 8014658:	d0f6      	beq.n	8014648 <rcl_get_secure_root+0x24>
 801465a:	f104 090c 	add.w	r9, r4, #12
 801465e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8014662:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014666:	4618      	mov	r0, r3
 8014668:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801466c:	f002 fb6a 	bl	8016d44 <rcutils_strdup>
 8014670:	4680      	mov	r8, r0
 8014672:	2800      	cmp	r0, #0
 8014674:	d0e8      	beq.n	8014648 <rcl_get_secure_root+0x24>
 8014676:	481f      	ldr	r0, [pc, #124]	@ (80146f4 <rcl_get_secure_root+0xd0>)
 8014678:	9503      	str	r5, [sp, #12]
 801467a:	a903      	add	r1, sp, #12
 801467c:	f002 fa20 	bl	8016ac0 <rcutils_get_env>
 8014680:	b160      	cbz	r0, 801469c <rcl_get_secure_root+0x78>
 8014682:	2600      	movs	r6, #0
 8014684:	6863      	ldr	r3, [r4, #4]
 8014686:	6921      	ldr	r1, [r4, #16]
 8014688:	4630      	mov	r0, r6
 801468a:	4798      	blx	r3
 801468c:	4640      	mov	r0, r8
 801468e:	6863      	ldr	r3, [r4, #4]
 8014690:	6921      	ldr	r1, [r4, #16]
 8014692:	4798      	blx	r3
 8014694:	4628      	mov	r0, r5
 8014696:	b005      	add	sp, #20
 8014698:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801469c:	9b03      	ldr	r3, [sp, #12]
 801469e:	781e      	ldrb	r6, [r3, #0]
 80146a0:	b1f6      	cbz	r6, 80146e0 <rcl_get_secure_root+0xbc>
 80146a2:	e899 0003 	ldmia.w	r9, {r0, r1}
 80146a6:	e88d 0003 	stmia.w	sp, {r0, r1}
 80146aa:	4618      	mov	r0, r3
 80146ac:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80146b0:	f002 fb48 	bl	8016d44 <rcutils_strdup>
 80146b4:	4606      	mov	r6, r0
 80146b6:	2800      	cmp	r0, #0
 80146b8:	d0e3      	beq.n	8014682 <rcl_get_secure_root+0x5e>
 80146ba:	4622      	mov	r2, r4
 80146bc:	4641      	mov	r1, r8
 80146be:	f7ff ff6f 	bl	80145a0 <exact_match_lookup>
 80146c2:	4605      	mov	r5, r0
 80146c4:	2d00      	cmp	r5, #0
 80146c6:	d0dd      	beq.n	8014684 <rcl_get_secure_root+0x60>
 80146c8:	4628      	mov	r0, r5
 80146ca:	f002 fa11 	bl	8016af0 <rcutils_is_directory>
 80146ce:	4603      	mov	r3, r0
 80146d0:	2800      	cmp	r0, #0
 80146d2:	d1d7      	bne.n	8014684 <rcl_get_secure_root+0x60>
 80146d4:	4628      	mov	r0, r5
 80146d6:	6921      	ldr	r1, [r4, #16]
 80146d8:	461d      	mov	r5, r3
 80146da:	6863      	ldr	r3, [r4, #4]
 80146dc:	4798      	blx	r3
 80146de:	e7d1      	b.n	8014684 <rcl_get_secure_root+0x60>
 80146e0:	4622      	mov	r2, r4
 80146e2:	4638      	mov	r0, r7
 80146e4:	4641      	mov	r1, r8
 80146e6:	f7ff ff5b 	bl	80145a0 <exact_match_lookup>
 80146ea:	4605      	mov	r5, r0
 80146ec:	e7ea      	b.n	80146c4 <rcl_get_secure_root+0xa0>
 80146ee:	bf00      	nop
 80146f0:	0801c310 	.word	0x0801c310
 80146f4:	0801c328 	.word	0x0801c328

080146f8 <rcl_get_security_options_from_environment>:
 80146f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146fc:	b082      	sub	sp, #8
 80146fe:	2300      	movs	r3, #0
 8014700:	4606      	mov	r6, r0
 8014702:	460f      	mov	r7, r1
 8014704:	4820      	ldr	r0, [pc, #128]	@ (8014788 <rcl_get_security_options_from_environment+0x90>)
 8014706:	9301      	str	r3, [sp, #4]
 8014708:	a901      	add	r1, sp, #4
 801470a:	4690      	mov	r8, r2
 801470c:	f002 f9d8 	bl	8016ac0 <rcutils_get_env>
 8014710:	b120      	cbz	r0, 801471c <rcl_get_security_options_from_environment+0x24>
 8014712:	2501      	movs	r5, #1
 8014714:	4628      	mov	r0, r5
 8014716:	b002      	add	sp, #8
 8014718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801471c:	491b      	ldr	r1, [pc, #108]	@ (801478c <rcl_get_security_options_from_environment+0x94>)
 801471e:	4604      	mov	r4, r0
 8014720:	9801      	ldr	r0, [sp, #4]
 8014722:	f7eb fd7d 	bl	8000220 <strcmp>
 8014726:	4605      	mov	r5, r0
 8014728:	b9e8      	cbnz	r0, 8014766 <rcl_get_security_options_from_environment+0x6e>
 801472a:	9001      	str	r0, [sp, #4]
 801472c:	f1b8 0f00 	cmp.w	r8, #0
 8014730:	d020      	beq.n	8014774 <rcl_get_security_options_from_environment+0x7c>
 8014732:	4817      	ldr	r0, [pc, #92]	@ (8014790 <rcl_get_security_options_from_environment+0x98>)
 8014734:	a901      	add	r1, sp, #4
 8014736:	f002 f9c3 	bl	8016ac0 <rcutils_get_env>
 801473a:	2800      	cmp	r0, #0
 801473c:	d1e9      	bne.n	8014712 <rcl_get_security_options_from_environment+0x1a>
 801473e:	4915      	ldr	r1, [pc, #84]	@ (8014794 <rcl_get_security_options_from_environment+0x9c>)
 8014740:	9801      	ldr	r0, [sp, #4]
 8014742:	f7eb fd6d 	bl	8000220 <strcmp>
 8014746:	fab0 f080 	clz	r0, r0
 801474a:	0940      	lsrs	r0, r0, #5
 801474c:	f888 0000 	strb.w	r0, [r8]
 8014750:	4639      	mov	r1, r7
 8014752:	4630      	mov	r0, r6
 8014754:	f7ff ff66 	bl	8014624 <rcl_get_secure_root>
 8014758:	b170      	cbz	r0, 8014778 <rcl_get_security_options_from_environment+0x80>
 801475a:	f8c8 0004 	str.w	r0, [r8, #4]
 801475e:	4628      	mov	r0, r5
 8014760:	b002      	add	sp, #8
 8014762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014766:	4625      	mov	r5, r4
 8014768:	4628      	mov	r0, r5
 801476a:	f888 4000 	strb.w	r4, [r8]
 801476e:	b002      	add	sp, #8
 8014770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014774:	250b      	movs	r5, #11
 8014776:	e7cd      	b.n	8014714 <rcl_get_security_options_from_environment+0x1c>
 8014778:	f898 5000 	ldrb.w	r5, [r8]
 801477c:	f1a5 0501 	sub.w	r5, r5, #1
 8014780:	fab5 f585 	clz	r5, r5
 8014784:	096d      	lsrs	r5, r5, #5
 8014786:	e7c5      	b.n	8014714 <rcl_get_security_options_from_environment+0x1c>
 8014788:	0801c2c8 	.word	0x0801c2c8
 801478c:	0801c2dc 	.word	0x0801c2dc
 8014790:	0801c2e4 	.word	0x0801c2e4
 8014794:	0801c2fc 	.word	0x0801c2fc

08014798 <rcl_get_zero_initialized_service>:
 8014798:	4b01      	ldr	r3, [pc, #4]	@ (80147a0 <rcl_get_zero_initialized_service+0x8>)
 801479a:	6818      	ldr	r0, [r3, #0]
 801479c:	4770      	bx	lr
 801479e:	bf00      	nop
 80147a0:	0801c348 	.word	0x0801c348

080147a4 <rcl_service_init>:
 80147a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80147a8:	b089      	sub	sp, #36	@ 0x24
 80147aa:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80147ac:	b1c5      	cbz	r5, 80147e0 <rcl_service_init+0x3c>
 80147ae:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 80147b2:	4604      	mov	r4, r0
 80147b4:	4648      	mov	r0, r9
 80147b6:	4688      	mov	r8, r1
 80147b8:	4617      	mov	r7, r2
 80147ba:	461e      	mov	r6, r3
 80147bc:	f7f9 fb8a 	bl	800ded4 <rcutils_allocator_is_valid>
 80147c0:	b170      	cbz	r0, 80147e0 <rcl_service_init+0x3c>
 80147c2:	b16c      	cbz	r4, 80147e0 <rcl_service_init+0x3c>
 80147c4:	4640      	mov	r0, r8
 80147c6:	f7ff fdef 	bl	80143a8 <rcl_node_is_valid>
 80147ca:	2800      	cmp	r0, #0
 80147cc:	d058      	beq.n	8014880 <rcl_service_init+0xdc>
 80147ce:	b13f      	cbz	r7, 80147e0 <rcl_service_init+0x3c>
 80147d0:	b136      	cbz	r6, 80147e0 <rcl_service_init+0x3c>
 80147d2:	6823      	ldr	r3, [r4, #0]
 80147d4:	b14b      	cbz	r3, 80147ea <rcl_service_init+0x46>
 80147d6:	2664      	movs	r6, #100	@ 0x64
 80147d8:	4630      	mov	r0, r6
 80147da:	b009      	add	sp, #36	@ 0x24
 80147dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80147e0:	260b      	movs	r6, #11
 80147e2:	4630      	mov	r0, r6
 80147e4:	b009      	add	sp, #36	@ 0x24
 80147e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80147ea:	aa07      	add	r2, sp, #28
 80147ec:	9205      	str	r2, [sp, #20]
 80147ee:	2201      	movs	r2, #1
 80147f0:	9304      	str	r3, [sp, #16]
 80147f2:	9203      	str	r2, [sp, #12]
 80147f4:	9307      	str	r3, [sp, #28]
 80147f6:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 80147fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80147fe:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014802:	4631      	mov	r1, r6
 8014804:	e899 000c 	ldmia.w	r9, {r2, r3}
 8014808:	4640      	mov	r0, r8
 801480a:	f7ff fe21 	bl	8014450 <rcl_node_resolve_name>
 801480e:	2800      	cmp	r0, #0
 8014810:	d145      	bne.n	801489e <rcl_service_init+0xfa>
 8014812:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8014814:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8014816:	f44f 7088 	mov.w	r0, #272	@ 0x110
 801481a:	4798      	blx	r3
 801481c:	6020      	str	r0, [r4, #0]
 801481e:	2800      	cmp	r0, #0
 8014820:	d043      	beq.n	80148aa <rcl_service_init+0x106>
 8014822:	4640      	mov	r0, r8
 8014824:	f7ff fde2 	bl	80143ec <rcl_node_get_rmw_handle>
 8014828:	462b      	mov	r3, r5
 801482a:	9a07      	ldr	r2, [sp, #28]
 801482c:	6826      	ldr	r6, [r4, #0]
 801482e:	4639      	mov	r1, r7
 8014830:	f7fa f928 	bl	800ea84 <rmw_create_service>
 8014834:	6823      	ldr	r3, [r4, #0]
 8014836:	f8c6 0108 	str.w	r0, [r6, #264]	@ 0x108
 801483a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801483e:	b330      	cbz	r0, 801488e <rcl_service_init+0xea>
 8014840:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8014844:	f7fa fa44 	bl	800ecd0 <rmw_service_request_subscription_get_actual_qos>
 8014848:	b9f8      	cbnz	r0, 801488a <rcl_service_init+0xe6>
 801484a:	6821      	ldr	r1, [r4, #0]
 801484c:	f8d1 0108 	ldr.w	r0, [r1, #264]	@ 0x108
 8014850:	31b8      	adds	r1, #184	@ 0xb8
 8014852:	f7fa fa2d 	bl	800ecb0 <rmw_service_response_publisher_get_actual_qos>
 8014856:	4606      	mov	r6, r0
 8014858:	b9b8      	cbnz	r0, 801488a <rcl_service_init+0xe6>
 801485a:	6820      	ldr	r0, [r4, #0]
 801485c:	f895 3048 	ldrb.w	r3, [r5, #72]	@ 0x48
 8014860:	f880 30b0 	strb.w	r3, [r0, #176]	@ 0xb0
 8014864:	f880 3100 	strb.w	r3, [r0, #256]	@ 0x100
 8014868:	2268      	movs	r2, #104	@ 0x68
 801486a:	4629      	mov	r1, r5
 801486c:	f005 fab3 	bl	8019dd6 <memcpy>
 8014870:	9807      	ldr	r0, [sp, #28]
 8014872:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8014874:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8014876:	4798      	blx	r3
 8014878:	4630      	mov	r0, r6
 801487a:	b009      	add	sp, #36	@ 0x24
 801487c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014880:	26c8      	movs	r6, #200	@ 0xc8
 8014882:	4630      	mov	r0, r6
 8014884:	b009      	add	sp, #36	@ 0x24
 8014886:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801488a:	6823      	ldr	r3, [r4, #0]
 801488c:	b12b      	cbz	r3, 801489a <rcl_service_init+0xf6>
 801488e:	4618      	mov	r0, r3
 8014890:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 8014892:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8014894:	4790      	blx	r2
 8014896:	2300      	movs	r3, #0
 8014898:	6023      	str	r3, [r4, #0]
 801489a:	2601      	movs	r6, #1
 801489c:	e7e8      	b.n	8014870 <rcl_service_init+0xcc>
 801489e:	f1a0 0368 	sub.w	r3, r0, #104	@ 0x68
 80148a2:	2b01      	cmp	r3, #1
 80148a4:	d903      	bls.n	80148ae <rcl_service_init+0x10a>
 80148a6:	280a      	cmp	r0, #10
 80148a8:	d1f7      	bne.n	801489a <rcl_service_init+0xf6>
 80148aa:	260a      	movs	r6, #10
 80148ac:	e7e0      	b.n	8014870 <rcl_service_init+0xcc>
 80148ae:	2668      	movs	r6, #104	@ 0x68
 80148b0:	e7de      	b.n	8014870 <rcl_service_init+0xcc>
 80148b2:	bf00      	nop

080148b4 <rcl_service_get_default_options>:
 80148b4:	b530      	push	{r4, r5, lr}
 80148b6:	4d0f      	ldr	r5, [pc, #60]	@ (80148f4 <rcl_service_get_default_options+0x40>)
 80148b8:	490f      	ldr	r1, [pc, #60]	@ (80148f8 <rcl_service_get_default_options+0x44>)
 80148ba:	b087      	sub	sp, #28
 80148bc:	4604      	mov	r4, r0
 80148be:	2250      	movs	r2, #80	@ 0x50
 80148c0:	4628      	mov	r0, r5
 80148c2:	f005 fa88 	bl	8019dd6 <memcpy>
 80148c6:	4668      	mov	r0, sp
 80148c8:	f7f9 faf6 	bl	800deb8 <rcutils_get_default_allocator>
 80148cc:	46ec      	mov	ip, sp
 80148ce:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80148d2:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 80148d6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80148da:	2268      	movs	r2, #104	@ 0x68
 80148dc:	f8dc 3000 	ldr.w	r3, [ip]
 80148e0:	f8ce 3000 	str.w	r3, [lr]
 80148e4:	4629      	mov	r1, r5
 80148e6:	4620      	mov	r0, r4
 80148e8:	f005 fa75 	bl	8019dd6 <memcpy>
 80148ec:	4620      	mov	r0, r4
 80148ee:	b007      	add	sp, #28
 80148f0:	bd30      	pop	{r4, r5, pc}
 80148f2:	bf00      	nop
 80148f4:	2000baa0 	.word	0x2000baa0
 80148f8:	0801c350 	.word	0x0801c350

080148fc <rcl_service_get_rmw_handle>:
 80148fc:	b118      	cbz	r0, 8014906 <rcl_service_get_rmw_handle+0xa>
 80148fe:	6800      	ldr	r0, [r0, #0]
 8014900:	b108      	cbz	r0, 8014906 <rcl_service_get_rmw_handle+0xa>
 8014902:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8014906:	4770      	bx	lr

08014908 <rcl_take_request>:
 8014908:	b570      	push	{r4, r5, r6, lr}
 801490a:	468e      	mov	lr, r1
 801490c:	460c      	mov	r4, r1
 801490e:	4616      	mov	r6, r2
 8014910:	4605      	mov	r5, r0
 8014912:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014916:	b08c      	sub	sp, #48	@ 0x30
 8014918:	f10d 0c18 	add.w	ip, sp, #24
 801491c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014920:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014924:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014928:	b30d      	cbz	r5, 801496e <rcl_take_request+0x66>
 801492a:	682b      	ldr	r3, [r5, #0]
 801492c:	b1fb      	cbz	r3, 801496e <rcl_take_request+0x66>
 801492e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8014932:	b1e0      	cbz	r0, 801496e <rcl_take_request+0x66>
 8014934:	b336      	cbz	r6, 8014984 <rcl_take_request+0x7c>
 8014936:	2300      	movs	r3, #0
 8014938:	f88d 3007 	strb.w	r3, [sp, #7]
 801493c:	4632      	mov	r2, r6
 801493e:	f10d 0307 	add.w	r3, sp, #7
 8014942:	a902      	add	r1, sp, #8
 8014944:	f002 ff5a 	bl	80177fc <rmw_take_request>
 8014948:	4605      	mov	r5, r0
 801494a:	b198      	cbz	r0, 8014974 <rcl_take_request+0x6c>
 801494c:	280a      	cmp	r0, #10
 801494e:	bf18      	it	ne
 8014950:	2501      	movne	r5, #1
 8014952:	f10d 0e18 	add.w	lr, sp, #24
 8014956:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801495a:	46a4      	mov	ip, r4
 801495c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014960:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014964:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014968:	4628      	mov	r0, r5
 801496a:	b00c      	add	sp, #48	@ 0x30
 801496c:	bd70      	pop	{r4, r5, r6, pc}
 801496e:	f44f 7516 	mov.w	r5, #600	@ 0x258
 8014972:	e7ee      	b.n	8014952 <rcl_take_request+0x4a>
 8014974:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8014978:	f240 2359 	movw	r3, #601	@ 0x259
 801497c:	2a00      	cmp	r2, #0
 801497e:	bf08      	it	eq
 8014980:	461d      	moveq	r5, r3
 8014982:	e7e6      	b.n	8014952 <rcl_take_request+0x4a>
 8014984:	250b      	movs	r5, #11
 8014986:	e7e4      	b.n	8014952 <rcl_take_request+0x4a>

08014988 <rcl_send_response>:
 8014988:	b170      	cbz	r0, 80149a8 <rcl_send_response+0x20>
 801498a:	6800      	ldr	r0, [r0, #0]
 801498c:	b160      	cbz	r0, 80149a8 <rcl_send_response+0x20>
 801498e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8014992:	b148      	cbz	r0, 80149a8 <rcl_send_response+0x20>
 8014994:	b159      	cbz	r1, 80149ae <rcl_send_response+0x26>
 8014996:	b510      	push	{r4, lr}
 8014998:	b15a      	cbz	r2, 80149b2 <rcl_send_response+0x2a>
 801499a:	f002 ff8d 	bl	80178b8 <rmw_send_response>
 801499e:	b110      	cbz	r0, 80149a6 <rcl_send_response+0x1e>
 80149a0:	2802      	cmp	r0, #2
 80149a2:	bf18      	it	ne
 80149a4:	2001      	movne	r0, #1
 80149a6:	bd10      	pop	{r4, pc}
 80149a8:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80149ac:	4770      	bx	lr
 80149ae:	200b      	movs	r0, #11
 80149b0:	4770      	bx	lr
 80149b2:	200b      	movs	r0, #11
 80149b4:	bd10      	pop	{r4, pc}
 80149b6:	bf00      	nop

080149b8 <rcl_service_is_valid>:
 80149b8:	b130      	cbz	r0, 80149c8 <rcl_service_is_valid+0x10>
 80149ba:	6800      	ldr	r0, [r0, #0]
 80149bc:	b120      	cbz	r0, 80149c8 <rcl_service_is_valid+0x10>
 80149be:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80149c2:	3800      	subs	r0, #0
 80149c4:	bf18      	it	ne
 80149c6:	2001      	movne	r0, #1
 80149c8:	4770      	bx	lr
 80149ca:	bf00      	nop

080149cc <rcl_take>:
 80149cc:	2800      	cmp	r0, #0
 80149ce:	d04a      	beq.n	8014a66 <rcl_take+0x9a>
 80149d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149d4:	4604      	mov	r4, r0
 80149d6:	6800      	ldr	r0, [r0, #0]
 80149d8:	b0a4      	sub	sp, #144	@ 0x90
 80149da:	2800      	cmp	r0, #0
 80149dc:	d03b      	beq.n	8014a56 <rcl_take+0x8a>
 80149de:	461f      	mov	r7, r3
 80149e0:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	d036      	beq.n	8014a56 <rcl_take+0x8a>
 80149e8:	460e      	mov	r6, r1
 80149ea:	2900      	cmp	r1, #0
 80149ec:	d039      	beq.n	8014a62 <rcl_take+0x96>
 80149ee:	4615      	mov	r5, r2
 80149f0:	2a00      	cmp	r2, #0
 80149f2:	d03c      	beq.n	8014a6e <rcl_take+0xa2>
 80149f4:	a802      	add	r0, sp, #8
 80149f6:	f002 fba3 	bl	8017140 <rmw_get_zero_initialized_message_info>
 80149fa:	f10d 0c08 	add.w	ip, sp, #8
 80149fe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014a02:	46ae      	mov	lr, r5
 8014a04:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014a08:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014a0c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014a10:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014a14:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014a18:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8014a1c:	f04f 0800 	mov.w	r8, #0
 8014a20:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8014a24:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8014a28:	6822      	ldr	r2, [r4, #0]
 8014a2a:	462b      	mov	r3, r5
 8014a2c:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 8014a30:	9700      	str	r7, [sp, #0]
 8014a32:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 8014a36:	4631      	mov	r1, r6
 8014a38:	f002 ffe4 	bl	8017a04 <rmw_take_with_info>
 8014a3c:	4603      	mov	r3, r0
 8014a3e:	b9c0      	cbnz	r0, 8014a72 <rcl_take+0xa6>
 8014a40:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8014a44:	f240 1291 	movw	r2, #401	@ 0x191
 8014a48:	2900      	cmp	r1, #0
 8014a4a:	bf08      	it	eq
 8014a4c:	4613      	moveq	r3, r2
 8014a4e:	4618      	mov	r0, r3
 8014a50:	b024      	add	sp, #144	@ 0x90
 8014a52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a56:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8014a5a:	4618      	mov	r0, r3
 8014a5c:	b024      	add	sp, #144	@ 0x90
 8014a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a62:	230b      	movs	r3, #11
 8014a64:	e7f3      	b.n	8014a4e <rcl_take+0x82>
 8014a66:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8014a6a:	4618      	mov	r0, r3
 8014a6c:	4770      	bx	lr
 8014a6e:	ad14      	add	r5, sp, #80	@ 0x50
 8014a70:	e7c0      	b.n	80149f4 <rcl_take+0x28>
 8014a72:	f7ff f99f 	bl	8013db4 <rcl_convert_rmw_ret_to_rcl_ret>
 8014a76:	4603      	mov	r3, r0
 8014a78:	e7e9      	b.n	8014a4e <rcl_take+0x82>
 8014a7a:	bf00      	nop

08014a7c <rcl_subscription_get_rmw_handle>:
 8014a7c:	b118      	cbz	r0, 8014a86 <rcl_subscription_get_rmw_handle+0xa>
 8014a7e:	6800      	ldr	r0, [r0, #0]
 8014a80:	b108      	cbz	r0, 8014a86 <rcl_subscription_get_rmw_handle+0xa>
 8014a82:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8014a86:	4770      	bx	lr

08014a88 <rcl_subscription_is_valid>:
 8014a88:	b130      	cbz	r0, 8014a98 <rcl_subscription_is_valid+0x10>
 8014a8a:	6800      	ldr	r0, [r0, #0]
 8014a8c:	b120      	cbz	r0, 8014a98 <rcl_subscription_is_valid+0x10>
 8014a8e:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8014a92:	3800      	subs	r0, #0
 8014a94:	bf18      	it	ne
 8014a96:	2001      	movne	r0, #1
 8014a98:	4770      	bx	lr
 8014a9a:	bf00      	nop

08014a9c <rcl_get_system_time>:
 8014a9c:	4608      	mov	r0, r1
 8014a9e:	f7f9 ba5b 	b.w	800df58 <rcutils_system_time_now>
 8014aa2:	bf00      	nop

08014aa4 <rcl_get_steady_time>:
 8014aa4:	4608      	mov	r0, r1
 8014aa6:	f7f9 ba7f 	b.w	800dfa8 <rcutils_steady_time_now>
 8014aaa:	bf00      	nop

08014aac <rcl_get_ros_time>:
 8014aac:	7a03      	ldrb	r3, [r0, #8]
 8014aae:	b510      	push	{r4, lr}
 8014ab0:	460c      	mov	r4, r1
 8014ab2:	b133      	cbz	r3, 8014ac2 <rcl_get_ros_time+0x16>
 8014ab4:	2105      	movs	r1, #5
 8014ab6:	f001 ff5f 	bl	8016978 <__atomic_load_8>
 8014aba:	e9c4 0100 	strd	r0, r1, [r4]
 8014abe:	2000      	movs	r0, #0
 8014ac0:	bd10      	pop	{r4, pc}
 8014ac2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014ac6:	4608      	mov	r0, r1
 8014ac8:	f7f9 ba46 	b.w	800df58 <rcutils_system_time_now>

08014acc <rcl_clock_init>:
 8014acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ace:	4605      	mov	r5, r0
 8014ad0:	4610      	mov	r0, r2
 8014ad2:	4614      	mov	r4, r2
 8014ad4:	460e      	mov	r6, r1
 8014ad6:	f7f9 f9fd 	bl	800ded4 <rcutils_allocator_is_valid>
 8014ada:	b128      	cbz	r0, 8014ae8 <rcl_clock_init+0x1c>
 8014adc:	2d03      	cmp	r5, #3
 8014ade:	d803      	bhi.n	8014ae8 <rcl_clock_init+0x1c>
 8014ae0:	e8df f005 	tbb	[pc, r5]
 8014ae4:	06532e1d 	.word	0x06532e1d
 8014ae8:	f04f 0c0b 	mov.w	ip, #11
 8014aec:	4660      	mov	r0, ip
 8014aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014af0:	2e00      	cmp	r6, #0
 8014af2:	d0f9      	beq.n	8014ae8 <rcl_clock_init+0x1c>
 8014af4:	2c00      	cmp	r4, #0
 8014af6:	d0f7      	beq.n	8014ae8 <rcl_clock_init+0x1c>
 8014af8:	2300      	movs	r3, #0
 8014afa:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8014afe:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 8014bb4 <rcl_clock_init+0xe8>
 8014b02:	6133      	str	r3, [r6, #16]
 8014b04:	f106 0514 	add.w	r5, r6, #20
 8014b08:	469c      	mov	ip, r3
 8014b0a:	2703      	movs	r7, #3
 8014b0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014b0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014b10:	6823      	ldr	r3, [r4, #0]
 8014b12:	602b      	str	r3, [r5, #0]
 8014b14:	7037      	strb	r7, [r6, #0]
 8014b16:	f8c6 e00c 	str.w	lr, [r6, #12]
 8014b1a:	4660      	mov	r0, ip
 8014b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014b1e:	2e00      	cmp	r6, #0
 8014b20:	d0e2      	beq.n	8014ae8 <rcl_clock_init+0x1c>
 8014b22:	2300      	movs	r3, #0
 8014b24:	7033      	strb	r3, [r6, #0]
 8014b26:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8014b2a:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8014b2e:	469c      	mov	ip, r3
 8014b30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014b32:	f106 0514 	add.w	r5, r6, #20
 8014b36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014b38:	6823      	ldr	r3, [r4, #0]
 8014b3a:	602b      	str	r3, [r5, #0]
 8014b3c:	4660      	mov	r0, ip
 8014b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014b40:	2e00      	cmp	r6, #0
 8014b42:	d0d1      	beq.n	8014ae8 <rcl_clock_init+0x1c>
 8014b44:	2c00      	cmp	r4, #0
 8014b46:	d0cf      	beq.n	8014ae8 <rcl_clock_init+0x1c>
 8014b48:	2700      	movs	r7, #0
 8014b4a:	7037      	strb	r7, [r6, #0]
 8014b4c:	46a4      	mov	ip, r4
 8014b4e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014b52:	f106 0514 	add.w	r5, r6, #20
 8014b56:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8014b5a:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8014b5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014b60:	f8dc 3000 	ldr.w	r3, [ip]
 8014b64:	602b      	str	r3, [r5, #0]
 8014b66:	6921      	ldr	r1, [r4, #16]
 8014b68:	6823      	ldr	r3, [r4, #0]
 8014b6a:	2010      	movs	r0, #16
 8014b6c:	4798      	blx	r3
 8014b6e:	6130      	str	r0, [r6, #16]
 8014b70:	b1d0      	cbz	r0, 8014ba8 <rcl_clock_init+0xdc>
 8014b72:	2200      	movs	r2, #0
 8014b74:	2300      	movs	r3, #0
 8014b76:	e9c0 2300 	strd	r2, r3, [r0]
 8014b7a:	2301      	movs	r3, #1
 8014b7c:	7207      	strb	r7, [r0, #8]
 8014b7e:	4a0c      	ldr	r2, [pc, #48]	@ (8014bb0 <rcl_clock_init+0xe4>)
 8014b80:	7033      	strb	r3, [r6, #0]
 8014b82:	46bc      	mov	ip, r7
 8014b84:	60f2      	str	r2, [r6, #12]
 8014b86:	4660      	mov	r0, ip
 8014b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014b8a:	2e00      	cmp	r6, #0
 8014b8c:	d0ac      	beq.n	8014ae8 <rcl_clock_init+0x1c>
 8014b8e:	2c00      	cmp	r4, #0
 8014b90:	d0aa      	beq.n	8014ae8 <rcl_clock_init+0x1c>
 8014b92:	2300      	movs	r3, #0
 8014b94:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8014b98:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 8014bb8 <rcl_clock_init+0xec>
 8014b9c:	6133      	str	r3, [r6, #16]
 8014b9e:	f106 0514 	add.w	r5, r6, #20
 8014ba2:	469c      	mov	ip, r3
 8014ba4:	2702      	movs	r7, #2
 8014ba6:	e7b1      	b.n	8014b0c <rcl_clock_init+0x40>
 8014ba8:	f04f 0c0a 	mov.w	ip, #10
 8014bac:	e79e      	b.n	8014aec <rcl_clock_init+0x20>
 8014bae:	bf00      	nop
 8014bb0:	08014aad 	.word	0x08014aad
 8014bb4:	08014aa5 	.word	0x08014aa5
 8014bb8:	08014a9d 	.word	0x08014a9d

08014bbc <rcl_clock_get_now>:
 8014bbc:	b140      	cbz	r0, 8014bd0 <rcl_clock_get_now+0x14>
 8014bbe:	b139      	cbz	r1, 8014bd0 <rcl_clock_get_now+0x14>
 8014bc0:	7803      	ldrb	r3, [r0, #0]
 8014bc2:	b11b      	cbz	r3, 8014bcc <rcl_clock_get_now+0x10>
 8014bc4:	68c3      	ldr	r3, [r0, #12]
 8014bc6:	b10b      	cbz	r3, 8014bcc <rcl_clock_get_now+0x10>
 8014bc8:	6900      	ldr	r0, [r0, #16]
 8014bca:	4718      	bx	r3
 8014bcc:	2001      	movs	r0, #1
 8014bce:	4770      	bx	lr
 8014bd0:	200b      	movs	r0, #11
 8014bd2:	4770      	bx	lr

08014bd4 <rcl_clock_add_jump_callback>:
 8014bd4:	b082      	sub	sp, #8
 8014bd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014bda:	a906      	add	r1, sp, #24
 8014bdc:	e881 000c 	stmia.w	r1, {r2, r3}
 8014be0:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	@ 0x30
 8014be4:	b320      	cbz	r0, 8014c30 <rcl_clock_add_jump_callback+0x5c>
 8014be6:	4604      	mov	r4, r0
 8014be8:	3014      	adds	r0, #20
 8014bea:	f7f9 f973 	bl	800ded4 <rcutils_allocator_is_valid>
 8014bee:	b1f8      	cbz	r0, 8014c30 <rcl_clock_add_jump_callback+0x5c>
 8014bf0:	b1f6      	cbz	r6, 8014c30 <rcl_clock_add_jump_callback+0x5c>
 8014bf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	db1b      	blt.n	8014c30 <rcl_clock_add_jump_callback+0x5c>
 8014bf8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8014bfc:	2a01      	cmp	r2, #1
 8014bfe:	f173 0300 	sbcs.w	r3, r3, #0
 8014c02:	da15      	bge.n	8014c30 <rcl_clock_add_jump_callback+0x5c>
 8014c04:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8014c08:	2f00      	cmp	r7, #0
 8014c0a:	d042      	beq.n	8014c92 <rcl_clock_add_jump_callback+0xbe>
 8014c0c:	2300      	movs	r3, #0
 8014c0e:	4602      	mov	r2, r0
 8014c10:	e003      	b.n	8014c1a <rcl_clock_add_jump_callback+0x46>
 8014c12:	42bb      	cmp	r3, r7
 8014c14:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8014c18:	d011      	beq.n	8014c3e <rcl_clock_add_jump_callback+0x6a>
 8014c1a:	6811      	ldr	r1, [r2, #0]
 8014c1c:	42b1      	cmp	r1, r6
 8014c1e:	f103 0301 	add.w	r3, r3, #1
 8014c22:	d1f6      	bne.n	8014c12 <rcl_clock_add_jump_callback+0x3e>
 8014c24:	6a11      	ldr	r1, [r2, #32]
 8014c26:	42a9      	cmp	r1, r5
 8014c28:	d1f3      	bne.n	8014c12 <rcl_clock_add_jump_callback+0x3e>
 8014c2a:	f04f 0e01 	mov.w	lr, #1
 8014c2e:	e001      	b.n	8014c34 <rcl_clock_add_jump_callback+0x60>
 8014c30:	f04f 0e0b 	mov.w	lr, #11
 8014c34:	4670      	mov	r0, lr
 8014c36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014c3a:	b002      	add	sp, #8
 8014c3c:	4770      	bx	lr
 8014c3e:	3301      	adds	r3, #1
 8014c40:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014c44:	00d9      	lsls	r1, r3, #3
 8014c46:	69e3      	ldr	r3, [r4, #28]
 8014c48:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8014c4a:	4798      	blx	r3
 8014c4c:	b1f0      	cbz	r0, 8014c8c <rcl_clock_add_jump_callback+0xb8>
 8014c4e:	68a3      	ldr	r3, [r4, #8]
 8014c50:	6060      	str	r0, [r4, #4]
 8014c52:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8014c56:	f10d 0c18 	add.w	ip, sp, #24
 8014c5a:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 8014c5e:	f103 0801 	add.w	r8, r3, #1
 8014c62:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8014c66:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014c6a:	f106 0708 	add.w	r7, r6, #8
 8014c6e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8014c70:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8014c74:	f04f 0e00 	mov.w	lr, #0
 8014c78:	e887 0003 	stmia.w	r7, {r0, r1}
 8014c7c:	6235      	str	r5, [r6, #32]
 8014c7e:	4670      	mov	r0, lr
 8014c80:	f8c4 8008 	str.w	r8, [r4, #8]
 8014c84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014c88:	b002      	add	sp, #8
 8014c8a:	4770      	bx	lr
 8014c8c:	f04f 0e0a 	mov.w	lr, #10
 8014c90:	e7d0      	b.n	8014c34 <rcl_clock_add_jump_callback+0x60>
 8014c92:	2128      	movs	r1, #40	@ 0x28
 8014c94:	e7d7      	b.n	8014c46 <rcl_clock_add_jump_callback+0x72>
 8014c96:	bf00      	nop

08014c98 <rcl_clock_remove_jump_callback>:
 8014c98:	2800      	cmp	r0, #0
 8014c9a:	d057      	beq.n	8014d4c <rcl_clock_remove_jump_callback+0xb4>
 8014c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014ca0:	4605      	mov	r5, r0
 8014ca2:	3014      	adds	r0, #20
 8014ca4:	4688      	mov	r8, r1
 8014ca6:	4692      	mov	sl, r2
 8014ca8:	f7f9 f914 	bl	800ded4 <rcutils_allocator_is_valid>
 8014cac:	2800      	cmp	r0, #0
 8014cae:	d03b      	beq.n	8014d28 <rcl_clock_remove_jump_callback+0x90>
 8014cb0:	f1b8 0f00 	cmp.w	r8, #0
 8014cb4:	d038      	beq.n	8014d28 <rcl_clock_remove_jump_callback+0x90>
 8014cb6:	68ae      	ldr	r6, [r5, #8]
 8014cb8:	b166      	cbz	r6, 8014cd4 <rcl_clock_remove_jump_callback+0x3c>
 8014cba:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8014cbe:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 8014cc2:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 8014cc6:	464c      	mov	r4, r9
 8014cc8:	6823      	ldr	r3, [r4, #0]
 8014cca:	4543      	cmp	r3, r8
 8014ccc:	d005      	beq.n	8014cda <rcl_clock_remove_jump_callback+0x42>
 8014cce:	3428      	adds	r4, #40	@ 0x28
 8014cd0:	42a7      	cmp	r7, r4
 8014cd2:	d1f9      	bne.n	8014cc8 <rcl_clock_remove_jump_callback+0x30>
 8014cd4:	2001      	movs	r0, #1
 8014cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014cda:	6a23      	ldr	r3, [r4, #32]
 8014cdc:	3428      	adds	r4, #40	@ 0x28
 8014cde:	42bc      	cmp	r4, r7
 8014ce0:	d02d      	beq.n	8014d3e <rcl_clock_remove_jump_callback+0xa6>
 8014ce2:	4553      	cmp	r3, sl
 8014ce4:	d1f0      	bne.n	8014cc8 <rcl_clock_remove_jump_callback+0x30>
 8014ce6:	46a6      	mov	lr, r4
 8014ce8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014cec:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 8014cf0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014cf4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014cf8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014cfc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014d00:	3428      	adds	r4, #40	@ 0x28
 8014d02:	42a7      	cmp	r7, r4
 8014d04:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014d08:	d1ed      	bne.n	8014ce6 <rcl_clock_remove_jump_callback+0x4e>
 8014d0a:	3e01      	subs	r6, #1
 8014d0c:	60ae      	str	r6, [r5, #8]
 8014d0e:	b176      	cbz	r6, 8014d2e <rcl_clock_remove_jump_callback+0x96>
 8014d10:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8014d14:	69eb      	ldr	r3, [r5, #28]
 8014d16:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8014d18:	00f1      	lsls	r1, r6, #3
 8014d1a:	4648      	mov	r0, r9
 8014d1c:	4798      	blx	r3
 8014d1e:	b1b8      	cbz	r0, 8014d50 <rcl_clock_remove_jump_callback+0xb8>
 8014d20:	6068      	str	r0, [r5, #4]
 8014d22:	2000      	movs	r0, #0
 8014d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d28:	200b      	movs	r0, #11
 8014d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d2e:	4648      	mov	r0, r9
 8014d30:	69ab      	ldr	r3, [r5, #24]
 8014d32:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8014d34:	4798      	blx	r3
 8014d36:	606e      	str	r6, [r5, #4]
 8014d38:	4630      	mov	r0, r6
 8014d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d3e:	4553      	cmp	r3, sl
 8014d40:	d1c8      	bne.n	8014cd4 <rcl_clock_remove_jump_callback+0x3c>
 8014d42:	3e01      	subs	r6, #1
 8014d44:	60ae      	str	r6, [r5, #8]
 8014d46:	2e00      	cmp	r6, #0
 8014d48:	d1e2      	bne.n	8014d10 <rcl_clock_remove_jump_callback+0x78>
 8014d4a:	e7f0      	b.n	8014d2e <rcl_clock_remove_jump_callback+0x96>
 8014d4c:	200b      	movs	r0, #11
 8014d4e:	4770      	bx	lr
 8014d50:	200a      	movs	r0, #10
 8014d52:	e7ea      	b.n	8014d2a <rcl_clock_remove_jump_callback+0x92>

08014d54 <_rcl_timer_time_jump>:
 8014d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d58:	4605      	mov	r5, r0
 8014d5a:	b084      	sub	sp, #16
 8014d5c:	4614      	mov	r4, r2
 8014d5e:	b131      	cbz	r1, 8014d6e <_rcl_timer_time_jump+0x1a>
 8014d60:	7803      	ldrb	r3, [r0, #0]
 8014d62:	3b02      	subs	r3, #2
 8014d64:	2b01      	cmp	r3, #1
 8014d66:	d93f      	bls.n	8014de8 <_rcl_timer_time_jump+0x94>
 8014d68:	b004      	add	sp, #16
 8014d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d6e:	6813      	ldr	r3, [r2, #0]
 8014d70:	a902      	add	r1, sp, #8
 8014d72:	6818      	ldr	r0, [r3, #0]
 8014d74:	f7ff ff22 	bl	8014bbc <rcl_clock_get_now>
 8014d78:	2800      	cmp	r0, #0
 8014d7a:	d1f5      	bne.n	8014d68 <_rcl_timer_time_jump+0x14>
 8014d7c:	6820      	ldr	r0, [r4, #0]
 8014d7e:	2105      	movs	r1, #5
 8014d80:	3020      	adds	r0, #32
 8014d82:	f001 fdf9 	bl	8016978 <__atomic_load_8>
 8014d86:	6823      	ldr	r3, [r4, #0]
 8014d88:	4681      	mov	r9, r0
 8014d8a:	4688      	mov	r8, r1
 8014d8c:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8014d90:	2105      	movs	r1, #5
 8014d92:	f001 fdf1 	bl	8016978 <__atomic_load_8>
 8014d96:	4607      	mov	r7, r0
 8014d98:	6820      	ldr	r0, [r4, #0]
 8014d9a:	460e      	mov	r6, r1
 8014d9c:	3018      	adds	r0, #24
 8014d9e:	2105      	movs	r1, #5
 8014da0:	f001 fdea 	bl	8016978 <__atomic_load_8>
 8014da4:	782b      	ldrb	r3, [r5, #0]
 8014da6:	9a02      	ldr	r2, [sp, #8]
 8014da8:	3b02      	subs	r3, #2
 8014daa:	2b01      	cmp	r3, #1
 8014dac:	460d      	mov	r5, r1
 8014dae:	9b03      	ldr	r3, [sp, #12]
 8014db0:	4682      	mov	sl, r0
 8014db2:	d937      	bls.n	8014e24 <_rcl_timer_time_jump+0xd0>
 8014db4:	42ba      	cmp	r2, r7
 8014db6:	eb73 0106 	sbcs.w	r1, r3, r6
 8014dba:	da5f      	bge.n	8014e7c <_rcl_timer_time_jump+0x128>
 8014dbc:	454a      	cmp	r2, r9
 8014dbe:	eb73 0108 	sbcs.w	r1, r3, r8
 8014dc2:	dad1      	bge.n	8014d68 <_rcl_timer_time_jump+0x14>
 8014dc4:	6820      	ldr	r0, [r4, #0]
 8014dc6:	eb1a 0202 	adds.w	r2, sl, r2
 8014dca:	eb43 0305 	adc.w	r3, r3, r5
 8014dce:	2505      	movs	r5, #5
 8014dd0:	3028      	adds	r0, #40	@ 0x28
 8014dd2:	9500      	str	r5, [sp, #0]
 8014dd4:	f001 fe06 	bl	80169e4 <__atomic_store_8>
 8014dd8:	6820      	ldr	r0, [r4, #0]
 8014dda:	9500      	str	r5, [sp, #0]
 8014ddc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014de0:	3020      	adds	r0, #32
 8014de2:	f001 fdff 	bl	80169e4 <__atomic_store_8>
 8014de6:	e7bf      	b.n	8014d68 <_rcl_timer_time_jump+0x14>
 8014de8:	6813      	ldr	r3, [r2, #0]
 8014dea:	a902      	add	r1, sp, #8
 8014dec:	6818      	ldr	r0, [r3, #0]
 8014dee:	f7ff fee5 	bl	8014bbc <rcl_clock_get_now>
 8014df2:	2800      	cmp	r0, #0
 8014df4:	d1b8      	bne.n	8014d68 <_rcl_timer_time_jump+0x14>
 8014df6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014dfa:	4313      	orrs	r3, r2
 8014dfc:	d0b4      	beq.n	8014d68 <_rcl_timer_time_jump+0x14>
 8014dfe:	6820      	ldr	r0, [r4, #0]
 8014e00:	2105      	movs	r1, #5
 8014e02:	3028      	adds	r0, #40	@ 0x28
 8014e04:	f001 fdb8 	bl	8016978 <__atomic_load_8>
 8014e08:	9d02      	ldr	r5, [sp, #8]
 8014e0a:	9b03      	ldr	r3, [sp, #12]
 8014e0c:	4602      	mov	r2, r0
 8014e0e:	6820      	ldr	r0, [r4, #0]
 8014e10:	1b52      	subs	r2, r2, r5
 8014e12:	f04f 0405 	mov.w	r4, #5
 8014e16:	9400      	str	r4, [sp, #0]
 8014e18:	eb61 0303 	sbc.w	r3, r1, r3
 8014e1c:	3030      	adds	r0, #48	@ 0x30
 8014e1e:	f001 fde1 	bl	80169e4 <__atomic_store_8>
 8014e22:	e7a1      	b.n	8014d68 <_rcl_timer_time_jump+0x14>
 8014e24:	4313      	orrs	r3, r2
 8014e26:	d09f      	beq.n	8014d68 <_rcl_timer_time_jump+0x14>
 8014e28:	6820      	ldr	r0, [r4, #0]
 8014e2a:	f04f 0805 	mov.w	r8, #5
 8014e2e:	2300      	movs	r3, #0
 8014e30:	f8cd 8000 	str.w	r8, [sp]
 8014e34:	3030      	adds	r0, #48	@ 0x30
 8014e36:	2200      	movs	r2, #0
 8014e38:	f001 fe0a 	bl	8016a50 <__atomic_exchange_8>
 8014e3c:	ea51 0300 	orrs.w	r3, r1, r0
 8014e40:	4606      	mov	r6, r0
 8014e42:	460f      	mov	r7, r1
 8014e44:	d090      	beq.n	8014d68 <_rcl_timer_time_jump+0x14>
 8014e46:	9a02      	ldr	r2, [sp, #8]
 8014e48:	9b03      	ldr	r3, [sp, #12]
 8014e4a:	f8cd 8000 	str.w	r8, [sp]
 8014e4e:	1a12      	subs	r2, r2, r0
 8014e50:	6820      	ldr	r0, [r4, #0]
 8014e52:	eb63 0301 	sbc.w	r3, r3, r1
 8014e56:	eb12 020a 	adds.w	r2, r2, sl
 8014e5a:	eb43 0305 	adc.w	r3, r3, r5
 8014e5e:	3028      	adds	r0, #40	@ 0x28
 8014e60:	f001 fdc0 	bl	80169e4 <__atomic_store_8>
 8014e64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014e68:	f8cd 8000 	str.w	r8, [sp]
 8014e6c:	6820      	ldr	r0, [r4, #0]
 8014e6e:	1b92      	subs	r2, r2, r6
 8014e70:	eb63 0307 	sbc.w	r3, r3, r7
 8014e74:	3020      	adds	r0, #32
 8014e76:	f001 fdb5 	bl	80169e4 <__atomic_store_8>
 8014e7a:	e775      	b.n	8014d68 <_rcl_timer_time_jump+0x14>
 8014e7c:	6820      	ldr	r0, [r4, #0]
 8014e7e:	3008      	adds	r0, #8
 8014e80:	f004 f878 	bl	8018f74 <rcl_trigger_guard_condition>
 8014e84:	e770      	b.n	8014d68 <_rcl_timer_time_jump+0x14>
 8014e86:	bf00      	nop

08014e88 <rcl_get_zero_initialized_timer>:
 8014e88:	4b01      	ldr	r3, [pc, #4]	@ (8014e90 <rcl_get_zero_initialized_timer+0x8>)
 8014e8a:	6818      	ldr	r0, [r3, #0]
 8014e8c:	4770      	bx	lr
 8014e8e:	bf00      	nop
 8014e90:	0801c3a0 	.word	0x0801c3a0
 8014e94:	00000000 	.word	0x00000000

08014e98 <rcl_timer_init>:
 8014e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014e9c:	b0aa      	sub	sp, #168	@ 0xa8
 8014e9e:	4604      	mov	r4, r0
 8014ea0:	a835      	add	r0, sp, #212	@ 0xd4
 8014ea2:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	@ 0xc8
 8014ea6:	460d      	mov	r5, r1
 8014ea8:	4692      	mov	sl, r2
 8014eaa:	f7f9 f813 	bl	800ded4 <rcutils_allocator_is_valid>
 8014eae:	2800      	cmp	r0, #0
 8014eb0:	d064      	beq.n	8014f7c <rcl_timer_init+0xe4>
 8014eb2:	2c00      	cmp	r4, #0
 8014eb4:	d062      	beq.n	8014f7c <rcl_timer_init+0xe4>
 8014eb6:	2d00      	cmp	r5, #0
 8014eb8:	d060      	beq.n	8014f7c <rcl_timer_init+0xe4>
 8014eba:	2f00      	cmp	r7, #0
 8014ebc:	db5e      	blt.n	8014f7c <rcl_timer_init+0xe4>
 8014ebe:	6823      	ldr	r3, [r4, #0]
 8014ec0:	b123      	cbz	r3, 8014ecc <rcl_timer_init+0x34>
 8014ec2:	2664      	movs	r6, #100	@ 0x64
 8014ec4:	4630      	mov	r0, r6
 8014ec6:	b02a      	add	sp, #168	@ 0xa8
 8014ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014ecc:	a908      	add	r1, sp, #32
 8014ece:	4628      	mov	r0, r5
 8014ed0:	f7ff fe74 	bl	8014bbc <rcl_clock_get_now>
 8014ed4:	4606      	mov	r6, r0
 8014ed6:	2800      	cmp	r0, #0
 8014ed8:	d1f4      	bne.n	8014ec4 <rcl_timer_init+0x2c>
 8014eda:	ae06      	add	r6, sp, #24
 8014edc:	4630      	mov	r0, r6
 8014ede:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 8014ee2:	f003 ff4f 	bl	8018d84 <rcl_get_zero_initialized_guard_condition>
 8014ee6:	e896 0003 	ldmia.w	r6, {r0, r1}
 8014eea:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 8014eee:	ae0b      	add	r6, sp, #44	@ 0x2c
 8014ef0:	e889 0003 	stmia.w	r9, {r0, r1}
 8014ef4:	4630      	mov	r0, r6
 8014ef6:	f004 f821 	bl	8018f3c <rcl_guard_condition_get_default_options>
 8014efa:	ab0d      	add	r3, sp, #52	@ 0x34
 8014efc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014f00:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014f04:	4651      	mov	r1, sl
 8014f06:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014f0a:	4648      	mov	r0, r9
 8014f0c:	f003 ff44 	bl	8018d98 <rcl_guard_condition_init>
 8014f10:	4606      	mov	r6, r0
 8014f12:	2800      	cmp	r0, #0
 8014f14:	d1d6      	bne.n	8014ec4 <rcl_timer_init+0x2c>
 8014f16:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8014f18:	781b      	ldrb	r3, [r3, #0]
 8014f1a:	2b01      	cmp	r3, #1
 8014f1c:	d033      	beq.n	8014f86 <rcl_timer_init+0xee>
 8014f1e:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8014f20:	911a      	str	r1, [sp, #104]	@ 0x68
 8014f22:	4642      	mov	r2, r8
 8014f24:	463b      	mov	r3, r7
 8014f26:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 8014f2a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014f2e:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8014fe0 <rcl_timer_init+0x148>
 8014f32:	eb12 0008 	adds.w	r0, r2, r8
 8014f36:	eb47 0103 	adc.w	r1, r7, r3
 8014f3a:	f10d 0ed4 	add.w	lr, sp, #212	@ 0xd4
 8014f3e:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 8014f42:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 8014f46:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 8014f4a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014f4e:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 8014f52:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014f56:	f8de 3000 	ldr.w	r3, [lr]
 8014f5a:	f8cc 3000 	str.w	r3, [ip]
 8014f5e:	f04f 0a00 	mov.w	sl, #0
 8014f62:	4619      	mov	r1, r3
 8014f64:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 8014f68:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8014f6a:	2050      	movs	r0, #80	@ 0x50
 8014f6c:	4798      	blx	r3
 8014f6e:	6020      	str	r0, [r4, #0]
 8014f70:	b358      	cbz	r0, 8014fca <rcl_timer_init+0x132>
 8014f72:	2250      	movs	r2, #80	@ 0x50
 8014f74:	a916      	add	r1, sp, #88	@ 0x58
 8014f76:	f004 ff2e 	bl	8019dd6 <memcpy>
 8014f7a:	e7a3      	b.n	8014ec4 <rcl_timer_init+0x2c>
 8014f7c:	260b      	movs	r6, #11
 8014f7e:	4630      	mov	r0, r6
 8014f80:	b02a      	add	sp, #168	@ 0xa8
 8014f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f86:	2001      	movs	r0, #1
 8014f88:	2100      	movs	r1, #0
 8014f8a:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 8014f8e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014f92:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8014f96:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 8014f9a:	4a13      	ldr	r2, [pc, #76]	@ (8014fe8 <rcl_timer_init+0x150>)
 8014f9c:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8014fa0:	9405      	str	r4, [sp, #20]
 8014fa2:	9204      	str	r2, [sp, #16]
 8014fa4:	ab12      	add	r3, sp, #72	@ 0x48
 8014fa6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014fa8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014fac:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8014fb0:	e89c 000c 	ldmia.w	ip, {r2, r3}
 8014fb4:	4628      	mov	r0, r5
 8014fb6:	f7ff fe0d 	bl	8014bd4 <rcl_clock_add_jump_callback>
 8014fba:	4682      	mov	sl, r0
 8014fbc:	2800      	cmp	r0, #0
 8014fbe:	d0ae      	beq.n	8014f1e <rcl_timer_init+0x86>
 8014fc0:	4648      	mov	r0, r9
 8014fc2:	f003 ff95 	bl	8018ef0 <rcl_guard_condition_fini>
 8014fc6:	4656      	mov	r6, sl
 8014fc8:	e77c      	b.n	8014ec4 <rcl_timer_init+0x2c>
 8014fca:	4648      	mov	r0, r9
 8014fcc:	f003 ff90 	bl	8018ef0 <rcl_guard_condition_fini>
 8014fd0:	4905      	ldr	r1, [pc, #20]	@ (8014fe8 <rcl_timer_init+0x150>)
 8014fd2:	4622      	mov	r2, r4
 8014fd4:	4628      	mov	r0, r5
 8014fd6:	f7ff fe5f 	bl	8014c98 <rcl_clock_remove_jump_callback>
 8014fda:	260a      	movs	r6, #10
 8014fdc:	e772      	b.n	8014ec4 <rcl_timer_init+0x2c>
 8014fde:	bf00      	nop
	...
 8014fe8:	08014d55 	.word	0x08014d55

08014fec <rcl_timer_call>:
 8014fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ff0:	b087      	sub	sp, #28
 8014ff2:	2800      	cmp	r0, #0
 8014ff4:	d06d      	beq.n	80150d2 <rcl_timer_call+0xe6>
 8014ff6:	6803      	ldr	r3, [r0, #0]
 8014ff8:	4604      	mov	r4, r0
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d063      	beq.n	80150c6 <rcl_timer_call+0xda>
 8014ffe:	f3bf 8f5b 	dmb	ish
 8015002:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8015006:	f3bf 8f5b 	dmb	ish
 801500a:	2b00      	cmp	r3, #0
 801500c:	d150      	bne.n	80150b0 <rcl_timer_call+0xc4>
 801500e:	6803      	ldr	r3, [r0, #0]
 8015010:	a904      	add	r1, sp, #16
 8015012:	6818      	ldr	r0, [r3, #0]
 8015014:	f7ff fdd2 	bl	8014bbc <rcl_clock_get_now>
 8015018:	4605      	mov	r5, r0
 801501a:	2800      	cmp	r0, #0
 801501c:	d14a      	bne.n	80150b4 <rcl_timer_call+0xc8>
 801501e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015022:	2b00      	cmp	r3, #0
 8015024:	db4a      	blt.n	80150bc <rcl_timer_call+0xd0>
 8015026:	6820      	ldr	r0, [r4, #0]
 8015028:	f04f 0a05 	mov.w	sl, #5
 801502c:	f8cd a000 	str.w	sl, [sp]
 8015030:	3020      	adds	r0, #32
 8015032:	f001 fd0d 	bl	8016a50 <__atomic_exchange_8>
 8015036:	6823      	ldr	r3, [r4, #0]
 8015038:	f3bf 8f5b 	dmb	ish
 801503c:	4680      	mov	r8, r0
 801503e:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8015042:	f3bf 8f5b 	dmb	ish
 8015046:	6820      	ldr	r0, [r4, #0]
 8015048:	4689      	mov	r9, r1
 801504a:	3028      	adds	r0, #40	@ 0x28
 801504c:	4651      	mov	r1, sl
 801504e:	f001 fc93 	bl	8016978 <__atomic_load_8>
 8015052:	4606      	mov	r6, r0
 8015054:	6820      	ldr	r0, [r4, #0]
 8015056:	460f      	mov	r7, r1
 8015058:	3018      	adds	r0, #24
 801505a:	4651      	mov	r1, sl
 801505c:	f001 fc8c 	bl	8016978 <__atomic_load_8>
 8015060:	1836      	adds	r6, r6, r0
 8015062:	4602      	mov	r2, r0
 8015064:	4682      	mov	sl, r0
 8015066:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 801506a:	eb47 0701 	adc.w	r7, r7, r1
 801506e:	4286      	cmp	r6, r0
 8015070:	460b      	mov	r3, r1
 8015072:	eb77 010c 	sbcs.w	r1, r7, ip
 8015076:	da04      	bge.n	8015082 <rcl_timer_call+0x96>
 8015078:	ea53 0102 	orrs.w	r1, r3, r2
 801507c:	d12e      	bne.n	80150dc <rcl_timer_call+0xf0>
 801507e:	4606      	mov	r6, r0
 8015080:	4667      	mov	r7, ip
 8015082:	6820      	ldr	r0, [r4, #0]
 8015084:	2105      	movs	r1, #5
 8015086:	4632      	mov	r2, r6
 8015088:	463b      	mov	r3, r7
 801508a:	3028      	adds	r0, #40	@ 0x28
 801508c:	9100      	str	r1, [sp, #0]
 801508e:	f001 fca9 	bl	80169e4 <__atomic_store_8>
 8015092:	f1bb 0f00 	cmp.w	fp, #0
 8015096:	d00d      	beq.n	80150b4 <rcl_timer_call+0xc8>
 8015098:	9a04      	ldr	r2, [sp, #16]
 801509a:	9b05      	ldr	r3, [sp, #20]
 801509c:	ebb2 0208 	subs.w	r2, r2, r8
 80150a0:	4620      	mov	r0, r4
 80150a2:	eb63 0309 	sbc.w	r3, r3, r9
 80150a6:	47d8      	blx	fp
 80150a8:	4628      	mov	r0, r5
 80150aa:	b007      	add	sp, #28
 80150ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150b0:	f240 3521 	movw	r5, #801	@ 0x321
 80150b4:	4628      	mov	r0, r5
 80150b6:	b007      	add	sp, #28
 80150b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150bc:	2501      	movs	r5, #1
 80150be:	4628      	mov	r0, r5
 80150c0:	b007      	add	sp, #28
 80150c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150c6:	f44f 7548 	mov.w	r5, #800	@ 0x320
 80150ca:	4628      	mov	r0, r5
 80150cc:	b007      	add	sp, #28
 80150ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150d2:	250b      	movs	r5, #11
 80150d4:	4628      	mov	r0, r5
 80150d6:	b007      	add	sp, #28
 80150d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150dc:	1b80      	subs	r0, r0, r6
 80150de:	eb6c 0107 	sbc.w	r1, ip, r7
 80150e2:	3801      	subs	r0, #1
 80150e4:	f161 0100 	sbc.w	r1, r1, #0
 80150e8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80150ec:	f7eb fdbc 	bl	8000c68 <__aeabi_ldivmod>
 80150f0:	9b02      	ldr	r3, [sp, #8]
 80150f2:	3001      	adds	r0, #1
 80150f4:	f141 0100 	adc.w	r1, r1, #0
 80150f8:	fb00 f303 	mul.w	r3, r0, r3
 80150fc:	fb01 330a 	mla	r3, r1, sl, r3
 8015100:	fba0 0a0a 	umull	r0, sl, r0, sl
 8015104:	1986      	adds	r6, r0, r6
 8015106:	4453      	add	r3, sl
 8015108:	eb43 0707 	adc.w	r7, r3, r7
 801510c:	e7b9      	b.n	8015082 <rcl_timer_call+0x96>
 801510e:	bf00      	nop

08015110 <rcl_timer_is_ready>:
 8015110:	b570      	push	{r4, r5, r6, lr}
 8015112:	b082      	sub	sp, #8
 8015114:	b378      	cbz	r0, 8015176 <rcl_timer_is_ready+0x66>
 8015116:	6803      	ldr	r3, [r0, #0]
 8015118:	4604      	mov	r4, r0
 801511a:	b383      	cbz	r3, 801517e <rcl_timer_is_ready+0x6e>
 801511c:	460d      	mov	r5, r1
 801511e:	b351      	cbz	r1, 8015176 <rcl_timer_is_ready+0x66>
 8015120:	f3bf 8f5b 	dmb	ish
 8015124:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8015128:	f3bf 8f5b 	dmb	ish
 801512c:	b953      	cbnz	r3, 8015144 <rcl_timer_is_ready+0x34>
 801512e:	6803      	ldr	r3, [r0, #0]
 8015130:	4669      	mov	r1, sp
 8015132:	6818      	ldr	r0, [r3, #0]
 8015134:	f7ff fd42 	bl	8014bbc <rcl_clock_get_now>
 8015138:	4606      	mov	r6, r0
 801513a:	b140      	cbz	r0, 801514e <rcl_timer_is_ready+0x3e>
 801513c:	f240 3321 	movw	r3, #801	@ 0x321
 8015140:	4298      	cmp	r0, r3
 8015142:	d101      	bne.n	8015148 <rcl_timer_is_ready+0x38>
 8015144:	2600      	movs	r6, #0
 8015146:	702e      	strb	r6, [r5, #0]
 8015148:	4630      	mov	r0, r6
 801514a:	b002      	add	sp, #8
 801514c:	bd70      	pop	{r4, r5, r6, pc}
 801514e:	6820      	ldr	r0, [r4, #0]
 8015150:	2105      	movs	r1, #5
 8015152:	3028      	adds	r0, #40	@ 0x28
 8015154:	f001 fc10 	bl	8016978 <__atomic_load_8>
 8015158:	9b00      	ldr	r3, [sp, #0]
 801515a:	1ac0      	subs	r0, r0, r3
 801515c:	9b01      	ldr	r3, [sp, #4]
 801515e:	eb61 0103 	sbc.w	r1, r1, r3
 8015162:	2801      	cmp	r0, #1
 8015164:	f171 0300 	sbcs.w	r3, r1, #0
 8015168:	bfb4      	ite	lt
 801516a:	2301      	movlt	r3, #1
 801516c:	2300      	movge	r3, #0
 801516e:	4630      	mov	r0, r6
 8015170:	702b      	strb	r3, [r5, #0]
 8015172:	b002      	add	sp, #8
 8015174:	bd70      	pop	{r4, r5, r6, pc}
 8015176:	260b      	movs	r6, #11
 8015178:	4630      	mov	r0, r6
 801517a:	b002      	add	sp, #8
 801517c:	bd70      	pop	{r4, r5, r6, pc}
 801517e:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8015182:	e7e1      	b.n	8015148 <rcl_timer_is_ready+0x38>

08015184 <rcl_timer_get_time_until_next_call>:
 8015184:	b570      	push	{r4, r5, r6, lr}
 8015186:	b082      	sub	sp, #8
 8015188:	b330      	cbz	r0, 80151d8 <rcl_timer_get_time_until_next_call+0x54>
 801518a:	6803      	ldr	r3, [r0, #0]
 801518c:	4604      	mov	r4, r0
 801518e:	b33b      	cbz	r3, 80151e0 <rcl_timer_get_time_until_next_call+0x5c>
 8015190:	460d      	mov	r5, r1
 8015192:	b309      	cbz	r1, 80151d8 <rcl_timer_get_time_until_next_call+0x54>
 8015194:	f3bf 8f5b 	dmb	ish
 8015198:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801519c:	f3bf 8f5b 	dmb	ish
 80151a0:	b9ab      	cbnz	r3, 80151ce <rcl_timer_get_time_until_next_call+0x4a>
 80151a2:	6803      	ldr	r3, [r0, #0]
 80151a4:	4669      	mov	r1, sp
 80151a6:	6818      	ldr	r0, [r3, #0]
 80151a8:	f7ff fd08 	bl	8014bbc <rcl_clock_get_now>
 80151ac:	4606      	mov	r6, r0
 80151ae:	b958      	cbnz	r0, 80151c8 <rcl_timer_get_time_until_next_call+0x44>
 80151b0:	6820      	ldr	r0, [r4, #0]
 80151b2:	2105      	movs	r1, #5
 80151b4:	3028      	adds	r0, #40	@ 0x28
 80151b6:	f001 fbdf 	bl	8016978 <__atomic_load_8>
 80151ba:	9b00      	ldr	r3, [sp, #0]
 80151bc:	1ac0      	subs	r0, r0, r3
 80151be:	9b01      	ldr	r3, [sp, #4]
 80151c0:	6028      	str	r0, [r5, #0]
 80151c2:	eb61 0103 	sbc.w	r1, r1, r3
 80151c6:	6069      	str	r1, [r5, #4]
 80151c8:	4630      	mov	r0, r6
 80151ca:	b002      	add	sp, #8
 80151cc:	bd70      	pop	{r4, r5, r6, pc}
 80151ce:	f240 3621 	movw	r6, #801	@ 0x321
 80151d2:	4630      	mov	r0, r6
 80151d4:	b002      	add	sp, #8
 80151d6:	bd70      	pop	{r4, r5, r6, pc}
 80151d8:	260b      	movs	r6, #11
 80151da:	4630      	mov	r0, r6
 80151dc:	b002      	add	sp, #8
 80151de:	bd70      	pop	{r4, r5, r6, pc}
 80151e0:	f44f 7648 	mov.w	r6, #800	@ 0x320
 80151e4:	e7f0      	b.n	80151c8 <rcl_timer_get_time_until_next_call+0x44>
 80151e6:	bf00      	nop

080151e8 <rcl_timer_get_guard_condition>:
 80151e8:	b130      	cbz	r0, 80151f8 <rcl_timer_get_guard_condition+0x10>
 80151ea:	6800      	ldr	r0, [r0, #0]
 80151ec:	b120      	cbz	r0, 80151f8 <rcl_timer_get_guard_condition+0x10>
 80151ee:	68c3      	ldr	r3, [r0, #12]
 80151f0:	b10b      	cbz	r3, 80151f6 <rcl_timer_get_guard_condition+0xe>
 80151f2:	3008      	adds	r0, #8
 80151f4:	4770      	bx	lr
 80151f6:	4618      	mov	r0, r3
 80151f8:	4770      	bx	lr
 80151fa:	bf00      	nop

080151fc <rcl_validate_enclave_name_with_size>:
 80151fc:	b378      	cbz	r0, 801525e <rcl_validate_enclave_name_with_size+0x62>
 80151fe:	b570      	push	{r4, r5, r6, lr}
 8015200:	4615      	mov	r5, r2
 8015202:	b0c2      	sub	sp, #264	@ 0x108
 8015204:	b302      	cbz	r2, 8015248 <rcl_validate_enclave_name_with_size+0x4c>
 8015206:	461e      	mov	r6, r3
 8015208:	466a      	mov	r2, sp
 801520a:	ab01      	add	r3, sp, #4
 801520c:	460c      	mov	r4, r1
 801520e:	f002 f815 	bl	801723c <rmw_validate_namespace_with_size>
 8015212:	4684      	mov	ip, r0
 8015214:	b9e8      	cbnz	r0, 8015252 <rcl_validate_enclave_name_with_size+0x56>
 8015216:	9b00      	ldr	r3, [sp, #0]
 8015218:	b923      	cbnz	r3, 8015224 <rcl_validate_enclave_name_with_size+0x28>
 801521a:	2300      	movs	r3, #0
 801521c:	602b      	str	r3, [r5, #0]
 801521e:	4660      	mov	r0, ip
 8015220:	b042      	add	sp, #264	@ 0x108
 8015222:	bd70      	pop	{r4, r5, r6, pc}
 8015224:	2b07      	cmp	r3, #7
 8015226:	d007      	beq.n	8015238 <rcl_validate_enclave_name_with_size+0x3c>
 8015228:	1e5a      	subs	r2, r3, #1
 801522a:	2a05      	cmp	r2, #5
 801522c:	d833      	bhi.n	8015296 <rcl_validate_enclave_name_with_size+0x9a>
 801522e:	e8df f002 	tbb	[pc, r2]
 8015232:	2c2f      	.short	0x2c2f
 8015234:	1a232629 	.word	0x1a232629
 8015238:	2cff      	cmp	r4, #255	@ 0xff
 801523a:	d9ee      	bls.n	801521a <rcl_validate_enclave_name_with_size+0x1e>
 801523c:	602b      	str	r3, [r5, #0]
 801523e:	2e00      	cmp	r6, #0
 8015240:	d0ed      	beq.n	801521e <rcl_validate_enclave_name_with_size+0x22>
 8015242:	23fe      	movs	r3, #254	@ 0xfe
 8015244:	6033      	str	r3, [r6, #0]
 8015246:	e7ea      	b.n	801521e <rcl_validate_enclave_name_with_size+0x22>
 8015248:	f04f 0c0b 	mov.w	ip, #11
 801524c:	4660      	mov	r0, ip
 801524e:	b042      	add	sp, #264	@ 0x108
 8015250:	bd70      	pop	{r4, r5, r6, pc}
 8015252:	f7fe fdaf 	bl	8013db4 <rcl_convert_rmw_ret_to_rcl_ret>
 8015256:	4684      	mov	ip, r0
 8015258:	4660      	mov	r0, ip
 801525a:	b042      	add	sp, #264	@ 0x108
 801525c:	bd70      	pop	{r4, r5, r6, pc}
 801525e:	f04f 0c0b 	mov.w	ip, #11
 8015262:	4660      	mov	r0, ip
 8015264:	4770      	bx	lr
 8015266:	2306      	movs	r3, #6
 8015268:	602b      	str	r3, [r5, #0]
 801526a:	2e00      	cmp	r6, #0
 801526c:	d0d7      	beq.n	801521e <rcl_validate_enclave_name_with_size+0x22>
 801526e:	9b01      	ldr	r3, [sp, #4]
 8015270:	6033      	str	r3, [r6, #0]
 8015272:	4660      	mov	r0, ip
 8015274:	b042      	add	sp, #264	@ 0x108
 8015276:	bd70      	pop	{r4, r5, r6, pc}
 8015278:	2305      	movs	r3, #5
 801527a:	602b      	str	r3, [r5, #0]
 801527c:	e7f5      	b.n	801526a <rcl_validate_enclave_name_with_size+0x6e>
 801527e:	2304      	movs	r3, #4
 8015280:	602b      	str	r3, [r5, #0]
 8015282:	e7f2      	b.n	801526a <rcl_validate_enclave_name_with_size+0x6e>
 8015284:	2303      	movs	r3, #3
 8015286:	602b      	str	r3, [r5, #0]
 8015288:	e7ef      	b.n	801526a <rcl_validate_enclave_name_with_size+0x6e>
 801528a:	2302      	movs	r3, #2
 801528c:	602b      	str	r3, [r5, #0]
 801528e:	e7ec      	b.n	801526a <rcl_validate_enclave_name_with_size+0x6e>
 8015290:	2301      	movs	r3, #1
 8015292:	602b      	str	r3, [r5, #0]
 8015294:	e7e9      	b.n	801526a <rcl_validate_enclave_name_with_size+0x6e>
 8015296:	4a04      	ldr	r2, [pc, #16]	@ (80152a8 <rcl_validate_enclave_name_with_size+0xac>)
 8015298:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801529c:	a802      	add	r0, sp, #8
 801529e:	f001 fd25 	bl	8016cec <rcutils_snprintf>
 80152a2:	f04f 0c01 	mov.w	ip, #1
 80152a6:	e7ba      	b.n	801521e <rcl_validate_enclave_name_with_size+0x22>
 80152a8:	0801c3a4 	.word	0x0801c3a4

080152ac <rcl_validate_enclave_name>:
 80152ac:	b168      	cbz	r0, 80152ca <rcl_validate_enclave_name+0x1e>
 80152ae:	b570      	push	{r4, r5, r6, lr}
 80152b0:	460d      	mov	r5, r1
 80152b2:	4616      	mov	r6, r2
 80152b4:	4604      	mov	r4, r0
 80152b6:	f7ea ffbd 	bl	8000234 <strlen>
 80152ba:	4633      	mov	r3, r6
 80152bc:	4601      	mov	r1, r0
 80152be:	462a      	mov	r2, r5
 80152c0:	4620      	mov	r0, r4
 80152c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80152c6:	f7ff bf99 	b.w	80151fc <rcl_validate_enclave_name_with_size>
 80152ca:	200b      	movs	r0, #11
 80152cc:	4770      	bx	lr
 80152ce:	bf00      	nop

080152d0 <rcl_get_zero_initialized_wait_set>:
 80152d0:	b510      	push	{r4, lr}
 80152d2:	4c08      	ldr	r4, [pc, #32]	@ (80152f4 <rcl_get_zero_initialized_wait_set+0x24>)
 80152d4:	4686      	mov	lr, r0
 80152d6:	4684      	mov	ip, r0
 80152d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80152da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80152de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80152e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80152e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80152e6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80152ea:	6823      	ldr	r3, [r4, #0]
 80152ec:	f8cc 3000 	str.w	r3, [ip]
 80152f0:	4670      	mov	r0, lr
 80152f2:	bd10      	pop	{r4, pc}
 80152f4:	0801c404 	.word	0x0801c404

080152f8 <rcl_wait_set_is_valid>:
 80152f8:	b118      	cbz	r0, 8015302 <rcl_wait_set_is_valid+0xa>
 80152fa:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80152fc:	3800      	subs	r0, #0
 80152fe:	bf18      	it	ne
 8015300:	2001      	movne	r0, #1
 8015302:	4770      	bx	lr

08015304 <rcl_wait_set_fini>:
 8015304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015308:	b082      	sub	sp, #8
 801530a:	2800      	cmp	r0, #0
 801530c:	f000 8095 	beq.w	801543a <rcl_wait_set_fini+0x136>
 8015310:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8015312:	4604      	mov	r4, r0
 8015314:	2e00      	cmp	r6, #0
 8015316:	f000 808c 	beq.w	8015432 <rcl_wait_set_fini+0x12e>
 801531a:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 801531c:	f002 fd48 	bl	8017db0 <rmw_destroy_wait_set>
 8015320:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015322:	1e06      	subs	r6, r0, #0
 8015324:	bf18      	it	ne
 8015326:	f44f 7661 	movne.w	r6, #900	@ 0x384
 801532a:	2d00      	cmp	r5, #0
 801532c:	f000 8081 	beq.w	8015432 <rcl_wait_set_fini+0x12e>
 8015330:	6820      	ldr	r0, [r4, #0]
 8015332:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8015336:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015338:	2700      	movs	r7, #0
 801533a:	6067      	str	r7, [r4, #4]
 801533c:	602f      	str	r7, [r5, #0]
 801533e:	b120      	cbz	r0, 801534a <rcl_wait_set_fini+0x46>
 8015340:	9101      	str	r1, [sp, #4]
 8015342:	47c0      	blx	r8
 8015344:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015346:	9901      	ldr	r1, [sp, #4]
 8015348:	6027      	str	r7, [r4, #0]
 801534a:	68a8      	ldr	r0, [r5, #8]
 801534c:	b120      	cbz	r0, 8015358 <rcl_wait_set_fini+0x54>
 801534e:	47c0      	blx	r8
 8015350:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015352:	2300      	movs	r3, #0
 8015354:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8015358:	68a0      	ldr	r0, [r4, #8]
 801535a:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801535c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801535e:	f04f 0800 	mov.w	r8, #0
 8015362:	f8c4 800c 	str.w	r8, [r4, #12]
 8015366:	f8c5 800c 	str.w	r8, [r5, #12]
 801536a:	b128      	cbz	r0, 8015378 <rcl_wait_set_fini+0x74>
 801536c:	47b8      	blx	r7
 801536e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015370:	f8c4 8008 	str.w	r8, [r4, #8]
 8015374:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8015376:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015378:	6968      	ldr	r0, [r5, #20]
 801537a:	f04f 0800 	mov.w	r8, #0
 801537e:	f8c5 8010 	str.w	r8, [r5, #16]
 8015382:	b128      	cbz	r0, 8015390 <rcl_wait_set_fini+0x8c>
 8015384:	47b8      	blx	r7
 8015386:	f8c5 8014 	str.w	r8, [r5, #20]
 801538a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801538c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801538e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015390:	6920      	ldr	r0, [r4, #16]
 8015392:	f04f 0800 	mov.w	r8, #0
 8015396:	f8c4 8014 	str.w	r8, [r4, #20]
 801539a:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 801539e:	b128      	cbz	r0, 80153ac <rcl_wait_set_fini+0xa8>
 80153a0:	47b8      	blx	r7
 80153a2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80153a4:	f8c4 8010 	str.w	r8, [r4, #16]
 80153a8:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80153aa:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80153ac:	69a0      	ldr	r0, [r4, #24]
 80153ae:	f04f 0800 	mov.w	r8, #0
 80153b2:	f8c4 801c 	str.w	r8, [r4, #28]
 80153b6:	f8c5 8018 	str.w	r8, [r5, #24]
 80153ba:	b128      	cbz	r0, 80153c8 <rcl_wait_set_fini+0xc4>
 80153bc:	9101      	str	r1, [sp, #4]
 80153be:	47b8      	blx	r7
 80153c0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80153c2:	9901      	ldr	r1, [sp, #4]
 80153c4:	f8c4 8018 	str.w	r8, [r4, #24]
 80153c8:	6a28      	ldr	r0, [r5, #32]
 80153ca:	b120      	cbz	r0, 80153d6 <rcl_wait_set_fini+0xd2>
 80153cc:	47b8      	blx	r7
 80153ce:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80153d0:	2300      	movs	r3, #0
 80153d2:	e9c5 3307 	strd	r3, r3, [r5, #28]
 80153d6:	6a20      	ldr	r0, [r4, #32]
 80153d8:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80153dc:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80153de:	2700      	movs	r7, #0
 80153e0:	6267      	str	r7, [r4, #36]	@ 0x24
 80153e2:	626f      	str	r7, [r5, #36]	@ 0x24
 80153e4:	b120      	cbz	r0, 80153f0 <rcl_wait_set_fini+0xec>
 80153e6:	9101      	str	r1, [sp, #4]
 80153e8:	47c0      	blx	r8
 80153ea:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80153ec:	9901      	ldr	r1, [sp, #4]
 80153ee:	6227      	str	r7, [r4, #32]
 80153f0:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80153f2:	b120      	cbz	r0, 80153fe <rcl_wait_set_fini+0xfa>
 80153f4:	47c0      	blx	r8
 80153f6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80153f8:	2300      	movs	r3, #0
 80153fa:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 80153fe:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8015400:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8015404:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015406:	2700      	movs	r7, #0
 8015408:	62e7      	str	r7, [r4, #44]	@ 0x2c
 801540a:	632f      	str	r7, [r5, #48]	@ 0x30
 801540c:	b120      	cbz	r0, 8015418 <rcl_wait_set_fini+0x114>
 801540e:	9101      	str	r1, [sp, #4]
 8015410:	47c0      	blx	r8
 8015412:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015414:	9901      	ldr	r1, [sp, #4]
 8015416:	62a7      	str	r7, [r4, #40]	@ 0x28
 8015418:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 801541a:	b120      	cbz	r0, 8015426 <rcl_wait_set_fini+0x122>
 801541c:	47c0      	blx	r8
 801541e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015420:	2300      	movs	r3, #0
 8015422:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8015426:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8015428:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801542a:	4628      	mov	r0, r5
 801542c:	4798      	blx	r3
 801542e:	2300      	movs	r3, #0
 8015430:	6323      	str	r3, [r4, #48]	@ 0x30
 8015432:	4630      	mov	r0, r6
 8015434:	b002      	add	sp, #8
 8015436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801543a:	260b      	movs	r6, #11
 801543c:	4630      	mov	r0, r6
 801543e:	b002      	add	sp, #8
 8015440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015444 <rcl_wait_set_add_subscription>:
 8015444:	b318      	cbz	r0, 801548e <rcl_wait_set_add_subscription+0x4a>
 8015446:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015448:	b570      	push	{r4, r5, r6, lr}
 801544a:	4604      	mov	r4, r0
 801544c:	b30b      	cbz	r3, 8015492 <rcl_wait_set_add_subscription+0x4e>
 801544e:	b319      	cbz	r1, 8015498 <rcl_wait_set_add_subscription+0x54>
 8015450:	681d      	ldr	r5, [r3, #0]
 8015452:	6840      	ldr	r0, [r0, #4]
 8015454:	4285      	cmp	r5, r0
 8015456:	d217      	bcs.n	8015488 <rcl_wait_set_add_subscription+0x44>
 8015458:	6820      	ldr	r0, [r4, #0]
 801545a:	1c6e      	adds	r6, r5, #1
 801545c:	601e      	str	r6, [r3, #0]
 801545e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8015462:	b102      	cbz	r2, 8015466 <rcl_wait_set_add_subscription+0x22>
 8015464:	6015      	str	r5, [r2, #0]
 8015466:	4608      	mov	r0, r1
 8015468:	f7ff fb08 	bl	8014a7c <rcl_subscription_get_rmw_handle>
 801546c:	b150      	cbz	r0, 8015484 <rcl_wait_set_add_subscription+0x40>
 801546e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015470:	6842      	ldr	r2, [r0, #4]
 8015472:	689b      	ldr	r3, [r3, #8]
 8015474:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015478:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801547a:	6853      	ldr	r3, [r2, #4]
 801547c:	3301      	adds	r3, #1
 801547e:	2000      	movs	r0, #0
 8015480:	6053      	str	r3, [r2, #4]
 8015482:	bd70      	pop	{r4, r5, r6, pc}
 8015484:	2001      	movs	r0, #1
 8015486:	bd70      	pop	{r4, r5, r6, pc}
 8015488:	f240 3086 	movw	r0, #902	@ 0x386
 801548c:	bd70      	pop	{r4, r5, r6, pc}
 801548e:	200b      	movs	r0, #11
 8015490:	4770      	bx	lr
 8015492:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015496:	bd70      	pop	{r4, r5, r6, pc}
 8015498:	200b      	movs	r0, #11
 801549a:	bd70      	pop	{r4, r5, r6, pc}

0801549c <rcl_wait_set_clear>:
 801549c:	2800      	cmp	r0, #0
 801549e:	d073      	beq.n	8015588 <rcl_wait_set_clear+0xec>
 80154a0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80154a2:	b510      	push	{r4, lr}
 80154a4:	4604      	mov	r4, r0
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	d070      	beq.n	801558c <rcl_wait_set_clear+0xf0>
 80154aa:	6800      	ldr	r0, [r0, #0]
 80154ac:	b138      	cbz	r0, 80154be <rcl_wait_set_clear+0x22>
 80154ae:	6862      	ldr	r2, [r4, #4]
 80154b0:	2100      	movs	r1, #0
 80154b2:	0092      	lsls	r2, r2, #2
 80154b4:	f004 fbc6 	bl	8019c44 <memset>
 80154b8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80154ba:	2200      	movs	r2, #0
 80154bc:	601a      	str	r2, [r3, #0]
 80154be:	68a0      	ldr	r0, [r4, #8]
 80154c0:	b138      	cbz	r0, 80154d2 <rcl_wait_set_clear+0x36>
 80154c2:	68e2      	ldr	r2, [r4, #12]
 80154c4:	2100      	movs	r1, #0
 80154c6:	0092      	lsls	r2, r2, #2
 80154c8:	f004 fbbc 	bl	8019c44 <memset>
 80154cc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80154ce:	2200      	movs	r2, #0
 80154d0:	60da      	str	r2, [r3, #12]
 80154d2:	69a0      	ldr	r0, [r4, #24]
 80154d4:	b138      	cbz	r0, 80154e6 <rcl_wait_set_clear+0x4a>
 80154d6:	69e2      	ldr	r2, [r4, #28]
 80154d8:	2100      	movs	r1, #0
 80154da:	0092      	lsls	r2, r2, #2
 80154dc:	f004 fbb2 	bl	8019c44 <memset>
 80154e0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80154e2:	2200      	movs	r2, #0
 80154e4:	619a      	str	r2, [r3, #24]
 80154e6:	6a20      	ldr	r0, [r4, #32]
 80154e8:	b138      	cbz	r0, 80154fa <rcl_wait_set_clear+0x5e>
 80154ea:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80154ec:	2100      	movs	r1, #0
 80154ee:	0092      	lsls	r2, r2, #2
 80154f0:	f004 fba8 	bl	8019c44 <memset>
 80154f4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80154f6:	2200      	movs	r2, #0
 80154f8:	625a      	str	r2, [r3, #36]	@ 0x24
 80154fa:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80154fc:	b138      	cbz	r0, 801550e <rcl_wait_set_clear+0x72>
 80154fe:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8015500:	2100      	movs	r1, #0
 8015502:	0092      	lsls	r2, r2, #2
 8015504:	f004 fb9e 	bl	8019c44 <memset>
 8015508:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801550a:	2200      	movs	r2, #0
 801550c:	631a      	str	r2, [r3, #48]	@ 0x30
 801550e:	6920      	ldr	r0, [r4, #16]
 8015510:	b138      	cbz	r0, 8015522 <rcl_wait_set_clear+0x86>
 8015512:	6962      	ldr	r2, [r4, #20]
 8015514:	2100      	movs	r1, #0
 8015516:	0092      	lsls	r2, r2, #2
 8015518:	f004 fb94 	bl	8019c44 <memset>
 801551c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801551e:	2200      	movs	r2, #0
 8015520:	641a      	str	r2, [r3, #64]	@ 0x40
 8015522:	6898      	ldr	r0, [r3, #8]
 8015524:	b138      	cbz	r0, 8015536 <rcl_wait_set_clear+0x9a>
 8015526:	685a      	ldr	r2, [r3, #4]
 8015528:	2100      	movs	r1, #0
 801552a:	0092      	lsls	r2, r2, #2
 801552c:	f004 fb8a 	bl	8019c44 <memset>
 8015530:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015532:	2200      	movs	r2, #0
 8015534:	605a      	str	r2, [r3, #4]
 8015536:	6958      	ldr	r0, [r3, #20]
 8015538:	b138      	cbz	r0, 801554a <rcl_wait_set_clear+0xae>
 801553a:	691a      	ldr	r2, [r3, #16]
 801553c:	2100      	movs	r1, #0
 801553e:	0092      	lsls	r2, r2, #2
 8015540:	f004 fb80 	bl	8019c44 <memset>
 8015544:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015546:	2200      	movs	r2, #0
 8015548:	611a      	str	r2, [r3, #16]
 801554a:	6a18      	ldr	r0, [r3, #32]
 801554c:	b138      	cbz	r0, 801555e <rcl_wait_set_clear+0xc2>
 801554e:	69da      	ldr	r2, [r3, #28]
 8015550:	2100      	movs	r1, #0
 8015552:	0092      	lsls	r2, r2, #2
 8015554:	f004 fb76 	bl	8019c44 <memset>
 8015558:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801555a:	2200      	movs	r2, #0
 801555c:	61da      	str	r2, [r3, #28]
 801555e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8015560:	b138      	cbz	r0, 8015572 <rcl_wait_set_clear+0xd6>
 8015562:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015564:	2100      	movs	r1, #0
 8015566:	0092      	lsls	r2, r2, #2
 8015568:	f004 fb6c 	bl	8019c44 <memset>
 801556c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801556e:	2200      	movs	r2, #0
 8015570:	629a      	str	r2, [r3, #40]	@ 0x28
 8015572:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8015574:	b138      	cbz	r0, 8015586 <rcl_wait_set_clear+0xea>
 8015576:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015578:	2100      	movs	r1, #0
 801557a:	0092      	lsls	r2, r2, #2
 801557c:	f004 fb62 	bl	8019c44 <memset>
 8015580:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015582:	2000      	movs	r0, #0
 8015584:	6358      	str	r0, [r3, #52]	@ 0x34
 8015586:	bd10      	pop	{r4, pc}
 8015588:	200b      	movs	r0, #11
 801558a:	4770      	bx	lr
 801558c:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015590:	bd10      	pop	{r4, pc}
 8015592:	bf00      	nop

08015594 <rcl_wait_set_resize>:
 8015594:	2800      	cmp	r0, #0
 8015596:	f000 8185 	beq.w	80158a4 <rcl_wait_set_resize+0x310>
 801559a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801559e:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80155a0:	b083      	sub	sp, #12
 80155a2:	4605      	mov	r5, r0
 80155a4:	2c00      	cmp	r4, #0
 80155a6:	f000 817f 	beq.w	80158a8 <rcl_wait_set_resize+0x314>
 80155aa:	f04f 0900 	mov.w	r9, #0
 80155ae:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 80155b2:	461f      	mov	r7, r3
 80155b4:	4688      	mov	r8, r1
 80155b6:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 80155ba:	4616      	mov	r6, r2
 80155bc:	f8c0 9004 	str.w	r9, [r0, #4]
 80155c0:	f8c4 9000 	str.w	r9, [r4]
 80155c4:	2900      	cmp	r1, #0
 80155c6:	f000 80bd 	beq.w	8015744 <rcl_wait_set_resize+0x1b0>
 80155ca:	008c      	lsls	r4, r1, #2
 80155cc:	6800      	ldr	r0, [r0, #0]
 80155ce:	9301      	str	r3, [sp, #4]
 80155d0:	4652      	mov	r2, sl
 80155d2:	4621      	mov	r1, r4
 80155d4:	4798      	blx	r3
 80155d6:	9b01      	ldr	r3, [sp, #4]
 80155d8:	6028      	str	r0, [r5, #0]
 80155da:	2800      	cmp	r0, #0
 80155dc:	f000 80cb 	beq.w	8015776 <rcl_wait_set_resize+0x1e2>
 80155e0:	4622      	mov	r2, r4
 80155e2:	4649      	mov	r1, r9
 80155e4:	9301      	str	r3, [sp, #4]
 80155e6:	f004 fb2d 	bl	8019c44 <memset>
 80155ea:	f8c5 8004 	str.w	r8, [r5, #4]
 80155ee:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 80155f2:	9b01      	ldr	r3, [sp, #4]
 80155f4:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80155f8:	f8c8 9004 	str.w	r9, [r8, #4]
 80155fc:	4652      	mov	r2, sl
 80155fe:	4621      	mov	r1, r4
 8015600:	4798      	blx	r3
 8015602:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015604:	f8c8 0008 	str.w	r0, [r8, #8]
 8015608:	689b      	ldr	r3, [r3, #8]
 801560a:	2b00      	cmp	r3, #0
 801560c:	f000 80ac 	beq.w	8015768 <rcl_wait_set_resize+0x1d4>
 8015610:	4622      	mov	r2, r4
 8015612:	4649      	mov	r1, r9
 8015614:	4618      	mov	r0, r3
 8015616:	f004 fb15 	bl	8019c44 <memset>
 801561a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801561c:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015620:	f04f 0800 	mov.w	r8, #0
 8015624:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8015628:	f8c5 800c 	str.w	r8, [r5, #12]
 801562c:	f8c4 800c 	str.w	r8, [r4, #12]
 8015630:	2e00      	cmp	r6, #0
 8015632:	f040 80a4 	bne.w	801577e <rcl_wait_set_resize+0x1ea>
 8015636:	68a8      	ldr	r0, [r5, #8]
 8015638:	b128      	cbz	r0, 8015646 <rcl_wait_set_resize+0xb2>
 801563a:	4649      	mov	r1, r9
 801563c:	4790      	blx	r2
 801563e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015640:	60ae      	str	r6, [r5, #8]
 8015642:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015646:	f04f 0800 	mov.w	r8, #0
 801564a:	19f6      	adds	r6, r6, r7
 801564c:	f8c4 8010 	str.w	r8, [r4, #16]
 8015650:	f040 80ac 	bne.w	80157ac <rcl_wait_set_resize+0x218>
 8015654:	6960      	ldr	r0, [r4, #20]
 8015656:	b130      	cbz	r0, 8015666 <rcl_wait_set_resize+0xd2>
 8015658:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801565a:	4649      	mov	r1, r9
 801565c:	4798      	blx	r3
 801565e:	6166      	str	r6, [r4, #20]
 8015660:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015662:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015666:	2600      	movs	r6, #0
 8015668:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801566c:	616e      	str	r6, [r5, #20]
 801566e:	6426      	str	r6, [r4, #64]	@ 0x40
 8015670:	2f00      	cmp	r7, #0
 8015672:	f040 80ad 	bne.w	80157d0 <rcl_wait_set_resize+0x23c>
 8015676:	6928      	ldr	r0, [r5, #16]
 8015678:	b138      	cbz	r0, 801568a <rcl_wait_set_resize+0xf6>
 801567a:	4649      	mov	r1, r9
 801567c:	47d0      	blx	sl
 801567e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015680:	612f      	str	r7, [r5, #16]
 8015682:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8015686:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801568a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801568c:	2600      	movs	r6, #0
 801568e:	61ee      	str	r6, [r5, #28]
 8015690:	61a6      	str	r6, [r4, #24]
 8015692:	2b00      	cmp	r3, #0
 8015694:	f040 80af 	bne.w	80157f6 <rcl_wait_set_resize+0x262>
 8015698:	69a8      	ldr	r0, [r5, #24]
 801569a:	b120      	cbz	r0, 80156a6 <rcl_wait_set_resize+0x112>
 801569c:	4649      	mov	r1, r9
 801569e:	47d0      	blx	sl
 80156a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80156a2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80156a4:	61ab      	str	r3, [r5, #24]
 80156a6:	6a20      	ldr	r0, [r4, #32]
 80156a8:	b128      	cbz	r0, 80156b6 <rcl_wait_set_resize+0x122>
 80156aa:	4649      	mov	r1, r9
 80156ac:	47d0      	blx	sl
 80156ae:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80156b0:	2300      	movs	r3, #0
 80156b2:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80156b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80156b8:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 80156ba:	2600      	movs	r6, #0
 80156bc:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 80156c0:	626e      	str	r6, [r5, #36]	@ 0x24
 80156c2:	6266      	str	r6, [r4, #36]	@ 0x24
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	f000 80b6 	beq.w	8015836 <rcl_wait_set_resize+0x2a2>
 80156ca:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 80156ce:	6a28      	ldr	r0, [r5, #32]
 80156d0:	463a      	mov	r2, r7
 80156d2:	4651      	mov	r1, sl
 80156d4:	47c8      	blx	r9
 80156d6:	6228      	str	r0, [r5, #32]
 80156d8:	2800      	cmp	r0, #0
 80156da:	d04c      	beq.n	8015776 <rcl_wait_set_resize+0x1e2>
 80156dc:	4652      	mov	r2, sl
 80156de:	4631      	mov	r1, r6
 80156e0:	f004 fab0 	bl	8019c44 <memset>
 80156e4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80156e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80156e8:	626b      	str	r3, [r5, #36]	@ 0x24
 80156ea:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80156ec:	62a6      	str	r6, [r4, #40]	@ 0x28
 80156ee:	463a      	mov	r2, r7
 80156f0:	4651      	mov	r1, sl
 80156f2:	47c8      	blx	r9
 80156f4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80156f6:	62e0      	str	r0, [r4, #44]	@ 0x2c
 80156f8:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 80156fa:	2c00      	cmp	r4, #0
 80156fc:	f000 80f0 	beq.w	80158e0 <rcl_wait_set_resize+0x34c>
 8015700:	4620      	mov	r0, r4
 8015702:	4652      	mov	r2, sl
 8015704:	4631      	mov	r1, r6
 8015706:	f004 fa9d 	bl	8019c44 <memset>
 801570a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801570c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801570e:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8015710:	2600      	movs	r6, #0
 8015712:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8015716:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8015718:	6326      	str	r6, [r4, #48]	@ 0x30
 801571a:	2b00      	cmp	r3, #0
 801571c:	f040 809d 	bne.w	801585a <rcl_wait_set_resize+0x2c6>
 8015720:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8015722:	b120      	cbz	r0, 801572e <rcl_wait_set_resize+0x19a>
 8015724:	4639      	mov	r1, r7
 8015726:	47c0      	blx	r8
 8015728:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801572a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801572c:	62ab      	str	r3, [r5, #40]	@ 0x28
 801572e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015730:	b310      	cbz	r0, 8015778 <rcl_wait_set_resize+0x1e4>
 8015732:	4639      	mov	r1, r7
 8015734:	47c0      	blx	r8
 8015736:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015738:	2000      	movs	r0, #0
 801573a:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 801573e:	b003      	add	sp, #12
 8015740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015744:	6800      	ldr	r0, [r0, #0]
 8015746:	b120      	cbz	r0, 8015752 <rcl_wait_set_resize+0x1be>
 8015748:	4651      	mov	r1, sl
 801574a:	47d8      	blx	fp
 801574c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801574e:	f8c5 8000 	str.w	r8, [r5]
 8015752:	68a0      	ldr	r0, [r4, #8]
 8015754:	2800      	cmp	r0, #0
 8015756:	f43f af61 	beq.w	801561c <rcl_wait_set_resize+0x88>
 801575a:	4651      	mov	r1, sl
 801575c:	47d8      	blx	fp
 801575e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015760:	2300      	movs	r3, #0
 8015762:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8015766:	e759      	b.n	801561c <rcl_wait_set_resize+0x88>
 8015768:	6828      	ldr	r0, [r5, #0]
 801576a:	9301      	str	r3, [sp, #4]
 801576c:	4651      	mov	r1, sl
 801576e:	47d8      	blx	fp
 8015770:	9b01      	ldr	r3, [sp, #4]
 8015772:	e9c5 3300 	strd	r3, r3, [r5]
 8015776:	200a      	movs	r0, #10
 8015778:	b003      	add	sp, #12
 801577a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801577e:	00b4      	lsls	r4, r6, #2
 8015780:	68a8      	ldr	r0, [r5, #8]
 8015782:	464a      	mov	r2, r9
 8015784:	4621      	mov	r1, r4
 8015786:	4798      	blx	r3
 8015788:	60a8      	str	r0, [r5, #8]
 801578a:	2800      	cmp	r0, #0
 801578c:	d0f3      	beq.n	8015776 <rcl_wait_set_resize+0x1e2>
 801578e:	4622      	mov	r2, r4
 8015790:	4641      	mov	r1, r8
 8015792:	f004 fa57 	bl	8019c44 <memset>
 8015796:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015798:	60ee      	str	r6, [r5, #12]
 801579a:	f04f 0800 	mov.w	r8, #0
 801579e:	19f6      	adds	r6, r6, r7
 80157a0:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80157a4:	f8c4 8010 	str.w	r8, [r4, #16]
 80157a8:	f43f af54 	beq.w	8015654 <rcl_wait_set_resize+0xc0>
 80157ac:	00b6      	lsls	r6, r6, #2
 80157ae:	464a      	mov	r2, r9
 80157b0:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80157b2:	6960      	ldr	r0, [r4, #20]
 80157b4:	4631      	mov	r1, r6
 80157b6:	4798      	blx	r3
 80157b8:	4681      	mov	r9, r0
 80157ba:	6160      	str	r0, [r4, #20]
 80157bc:	2800      	cmp	r0, #0
 80157be:	d076      	beq.n	80158ae <rcl_wait_set_resize+0x31a>
 80157c0:	4632      	mov	r2, r6
 80157c2:	4641      	mov	r1, r8
 80157c4:	f004 fa3e 	bl	8019c44 <memset>
 80157c8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80157ca:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80157ce:	e74a      	b.n	8015666 <rcl_wait_set_resize+0xd2>
 80157d0:	00bc      	lsls	r4, r7, #2
 80157d2:	6928      	ldr	r0, [r5, #16]
 80157d4:	464a      	mov	r2, r9
 80157d6:	4621      	mov	r1, r4
 80157d8:	47c0      	blx	r8
 80157da:	6128      	str	r0, [r5, #16]
 80157dc:	2800      	cmp	r0, #0
 80157de:	d0ca      	beq.n	8015776 <rcl_wait_set_resize+0x1e2>
 80157e0:	4622      	mov	r2, r4
 80157e2:	4631      	mov	r1, r6
 80157e4:	f004 fa2e 	bl	8019c44 <memset>
 80157e8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80157ea:	616f      	str	r7, [r5, #20]
 80157ec:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80157f0:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80157f4:	e749      	b.n	801568a <rcl_wait_set_resize+0xf6>
 80157f6:	009c      	lsls	r4, r3, #2
 80157f8:	69a8      	ldr	r0, [r5, #24]
 80157fa:	464a      	mov	r2, r9
 80157fc:	4621      	mov	r1, r4
 80157fe:	47c0      	blx	r8
 8015800:	61a8      	str	r0, [r5, #24]
 8015802:	2800      	cmp	r0, #0
 8015804:	d0b7      	beq.n	8015776 <rcl_wait_set_resize+0x1e2>
 8015806:	4622      	mov	r2, r4
 8015808:	4631      	mov	r1, r6
 801580a:	f004 fa1b 	bl	8019c44 <memset>
 801580e:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8015810:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015812:	61eb      	str	r3, [r5, #28]
 8015814:	6a38      	ldr	r0, [r7, #32]
 8015816:	61fe      	str	r6, [r7, #28]
 8015818:	464a      	mov	r2, r9
 801581a:	4621      	mov	r1, r4
 801581c:	47c0      	blx	r8
 801581e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015820:	6238      	str	r0, [r7, #32]
 8015822:	6a1f      	ldr	r7, [r3, #32]
 8015824:	2f00      	cmp	r7, #0
 8015826:	d054      	beq.n	80158d2 <rcl_wait_set_resize+0x33e>
 8015828:	4622      	mov	r2, r4
 801582a:	4631      	mov	r1, r6
 801582c:	4638      	mov	r0, r7
 801582e:	f004 fa09 	bl	8019c44 <memset>
 8015832:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015834:	e73f      	b.n	80156b6 <rcl_wait_set_resize+0x122>
 8015836:	6a28      	ldr	r0, [r5, #32]
 8015838:	b120      	cbz	r0, 8015844 <rcl_wait_set_resize+0x2b0>
 801583a:	4639      	mov	r1, r7
 801583c:	47c0      	blx	r8
 801583e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015840:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015842:	622b      	str	r3, [r5, #32]
 8015844:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8015846:	2800      	cmp	r0, #0
 8015848:	f43f af60 	beq.w	801570c <rcl_wait_set_resize+0x178>
 801584c:	4639      	mov	r1, r7
 801584e:	47c0      	blx	r8
 8015850:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015852:	2300      	movs	r3, #0
 8015854:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8015858:	e758      	b.n	801570c <rcl_wait_set_resize+0x178>
 801585a:	009c      	lsls	r4, r3, #2
 801585c:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801585e:	463a      	mov	r2, r7
 8015860:	4621      	mov	r1, r4
 8015862:	47c8      	blx	r9
 8015864:	62a8      	str	r0, [r5, #40]	@ 0x28
 8015866:	2800      	cmp	r0, #0
 8015868:	d085      	beq.n	8015776 <rcl_wait_set_resize+0x1e2>
 801586a:	4622      	mov	r2, r4
 801586c:	4631      	mov	r1, r6
 801586e:	f004 f9e9 	bl	8019c44 <memset>
 8015872:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8015876:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015878:	62eb      	str	r3, [r5, #44]	@ 0x2c
 801587a:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 801587e:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 8015882:	463a      	mov	r2, r7
 8015884:	4621      	mov	r1, r4
 8015886:	47c8      	blx	r9
 8015888:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801588a:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 801588e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015890:	b36b      	cbz	r3, 80158ee <rcl_wait_set_resize+0x35a>
 8015892:	4622      	mov	r2, r4
 8015894:	4631      	mov	r1, r6
 8015896:	4618      	mov	r0, r3
 8015898:	f004 f9d4 	bl	8019c44 <memset>
 801589c:	4630      	mov	r0, r6
 801589e:	b003      	add	sp, #12
 80158a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158a4:	200b      	movs	r0, #11
 80158a6:	4770      	bx	lr
 80158a8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80158ac:	e764      	b.n	8015778 <rcl_wait_set_resize+0x1e4>
 80158ae:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80158b0:	68a8      	ldr	r0, [r5, #8]
 80158b2:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80158b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80158b6:	4798      	blx	r3
 80158b8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80158ba:	6928      	ldr	r0, [r5, #16]
 80158bc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80158be:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80158c0:	f8c5 900c 	str.w	r9, [r5, #12]
 80158c4:	f8c5 9008 	str.w	r9, [r5, #8]
 80158c8:	4790      	blx	r2
 80158ca:	e9c5 9904 	strd	r9, r9, [r5, #16]
 80158ce:	200a      	movs	r0, #10
 80158d0:	e752      	b.n	8015778 <rcl_wait_set_resize+0x1e4>
 80158d2:	69a8      	ldr	r0, [r5, #24]
 80158d4:	4649      	mov	r1, r9
 80158d6:	47d0      	blx	sl
 80158d8:	e9c5 7706 	strd	r7, r7, [r5, #24]
 80158dc:	200a      	movs	r0, #10
 80158de:	e74b      	b.n	8015778 <rcl_wait_set_resize+0x1e4>
 80158e0:	6a28      	ldr	r0, [r5, #32]
 80158e2:	4639      	mov	r1, r7
 80158e4:	47c0      	blx	r8
 80158e6:	e9c5 4408 	strd	r4, r4, [r5, #32]
 80158ea:	200a      	movs	r0, #10
 80158ec:	e744      	b.n	8015778 <rcl_wait_set_resize+0x1e4>
 80158ee:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80158f0:	9301      	str	r3, [sp, #4]
 80158f2:	4639      	mov	r1, r7
 80158f4:	47c0      	blx	r8
 80158f6:	9b01      	ldr	r3, [sp, #4]
 80158f8:	200a      	movs	r0, #10
 80158fa:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 80158fe:	e73b      	b.n	8015778 <rcl_wait_set_resize+0x1e4>

08015900 <rcl_wait_set_init>:
 8015900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015904:	b084      	sub	sp, #16
 8015906:	4604      	mov	r4, r0
 8015908:	a810      	add	r0, sp, #64	@ 0x40
 801590a:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 801590e:	460f      	mov	r7, r1
 8015910:	4690      	mov	r8, r2
 8015912:	4699      	mov	r9, r3
 8015914:	f7f8 fade 	bl	800ded4 <rcutils_allocator_is_valid>
 8015918:	2800      	cmp	r0, #0
 801591a:	d06b      	beq.n	80159f4 <rcl_wait_set_init+0xf4>
 801591c:	2c00      	cmp	r4, #0
 801591e:	d069      	beq.n	80159f4 <rcl_wait_set_init+0xf4>
 8015920:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015922:	b125      	cbz	r5, 801592e <rcl_wait_set_init+0x2e>
 8015924:	2564      	movs	r5, #100	@ 0x64
 8015926:	4628      	mov	r0, r5
 8015928:	b004      	add	sp, #16
 801592a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801592e:	f1ba 0f00 	cmp.w	sl, #0
 8015932:	d05f      	beq.n	80159f4 <rcl_wait_set_init+0xf4>
 8015934:	4650      	mov	r0, sl
 8015936:	f7fe fa5b 	bl	8013df0 <rcl_context_is_valid>
 801593a:	2800      	cmp	r0, #0
 801593c:	d067      	beq.n	8015a0e <rcl_wait_set_init+0x10e>
 801593e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015940:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8015942:	205c      	movs	r0, #92	@ 0x5c
 8015944:	4798      	blx	r3
 8015946:	6320      	str	r0, [r4, #48]	@ 0x30
 8015948:	2800      	cmp	r0, #0
 801594a:	d062      	beq.n	8015a12 <rcl_wait_set_init+0x112>
 801594c:	4629      	mov	r1, r5
 801594e:	225c      	movs	r2, #92	@ 0x5c
 8015950:	f004 f978 	bl	8019c44 <memset>
 8015954:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8015958:	eb03 0e02 	add.w	lr, r3, r2
 801595c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801595e:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8015960:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8015964:	449e      	add	lr, r3
 8015966:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801596a:	e9c6 5501 	strd	r5, r5, [r6, #4]
 801596e:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8015972:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8015976:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 801597a:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 801597e:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 8015982:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 8015986:	f8da a000 	ldr.w	sl, [sl]
 801598a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801598c:	44c6      	add	lr, r8
 801598e:	f8dc 3000 	ldr.w	r3, [ip]
 8015992:	602b      	str	r3, [r5, #0]
 8015994:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8015998:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 801599c:	f002 f9fe 	bl	8017d9c <rmw_create_wait_set>
 80159a0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80159a2:	63f0      	str	r0, [r6, #60]	@ 0x3c
 80159a4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80159a6:	b350      	cbz	r0, 80159fe <rcl_wait_set_init+0xfe>
 80159a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80159aa:	9302      	str	r3, [sp, #8]
 80159ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80159ae:	9301      	str	r3, [sp, #4]
 80159b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80159b2:	9300      	str	r3, [sp, #0]
 80159b4:	4642      	mov	r2, r8
 80159b6:	464b      	mov	r3, r9
 80159b8:	4639      	mov	r1, r7
 80159ba:	4620      	mov	r0, r4
 80159bc:	f7ff fdea 	bl	8015594 <rcl_wait_set_resize>
 80159c0:	4605      	mov	r5, r0
 80159c2:	2800      	cmp	r0, #0
 80159c4:	d0af      	beq.n	8015926 <rcl_wait_set_init+0x26>
 80159c6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80159c8:	bb2b      	cbnz	r3, 8015a16 <rcl_wait_set_init+0x116>
 80159ca:	2600      	movs	r6, #0
 80159cc:	e9cd 6601 	strd	r6, r6, [sp, #4]
 80159d0:	9600      	str	r6, [sp, #0]
 80159d2:	4633      	mov	r3, r6
 80159d4:	4632      	mov	r2, r6
 80159d6:	4631      	mov	r1, r6
 80159d8:	4620      	mov	r0, r4
 80159da:	f7ff fddb 	bl	8015594 <rcl_wait_set_resize>
 80159de:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80159e0:	2800      	cmp	r0, #0
 80159e2:	d0a0      	beq.n	8015926 <rcl_wait_set_init+0x26>
 80159e4:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80159e6:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 80159e8:	4798      	blx	r3
 80159ea:	4628      	mov	r0, r5
 80159ec:	6326      	str	r6, [r4, #48]	@ 0x30
 80159ee:	b004      	add	sp, #16
 80159f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80159f4:	250b      	movs	r5, #11
 80159f6:	4628      	mov	r0, r5
 80159f8:	b004      	add	sp, #16
 80159fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80159fe:	2501      	movs	r5, #1
 8015a00:	f002 f9d6 	bl	8017db0 <rmw_destroy_wait_set>
 8015a04:	2800      	cmp	r0, #0
 8015a06:	bf18      	it	ne
 8015a08:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8015a0c:	e7dd      	b.n	80159ca <rcl_wait_set_init+0xca>
 8015a0e:	2565      	movs	r5, #101	@ 0x65
 8015a10:	e789      	b.n	8015926 <rcl_wait_set_init+0x26>
 8015a12:	250a      	movs	r5, #10
 8015a14:	e787      	b.n	8015926 <rcl_wait_set_init+0x26>
 8015a16:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8015a18:	e7f2      	b.n	8015a00 <rcl_wait_set_init+0x100>
 8015a1a:	bf00      	nop

08015a1c <rcl_wait_set_add_guard_condition>:
 8015a1c:	b318      	cbz	r0, 8015a66 <rcl_wait_set_add_guard_condition+0x4a>
 8015a1e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015a20:	b570      	push	{r4, r5, r6, lr}
 8015a22:	4604      	mov	r4, r0
 8015a24:	b30b      	cbz	r3, 8015a6a <rcl_wait_set_add_guard_condition+0x4e>
 8015a26:	b319      	cbz	r1, 8015a70 <rcl_wait_set_add_guard_condition+0x54>
 8015a28:	68dd      	ldr	r5, [r3, #12]
 8015a2a:	68c0      	ldr	r0, [r0, #12]
 8015a2c:	4285      	cmp	r5, r0
 8015a2e:	d217      	bcs.n	8015a60 <rcl_wait_set_add_guard_condition+0x44>
 8015a30:	68a0      	ldr	r0, [r4, #8]
 8015a32:	1c6e      	adds	r6, r5, #1
 8015a34:	60de      	str	r6, [r3, #12]
 8015a36:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8015a3a:	b102      	cbz	r2, 8015a3e <rcl_wait_set_add_guard_condition+0x22>
 8015a3c:	6015      	str	r5, [r2, #0]
 8015a3e:	4608      	mov	r0, r1
 8015a40:	f003 faa8 	bl	8018f94 <rcl_guard_condition_get_rmw_handle>
 8015a44:	b150      	cbz	r0, 8015a5c <rcl_wait_set_add_guard_condition+0x40>
 8015a46:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015a48:	6842      	ldr	r2, [r0, #4]
 8015a4a:	695b      	ldr	r3, [r3, #20]
 8015a4c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015a50:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015a52:	6913      	ldr	r3, [r2, #16]
 8015a54:	3301      	adds	r3, #1
 8015a56:	2000      	movs	r0, #0
 8015a58:	6113      	str	r3, [r2, #16]
 8015a5a:	bd70      	pop	{r4, r5, r6, pc}
 8015a5c:	2001      	movs	r0, #1
 8015a5e:	bd70      	pop	{r4, r5, r6, pc}
 8015a60:	f240 3086 	movw	r0, #902	@ 0x386
 8015a64:	bd70      	pop	{r4, r5, r6, pc}
 8015a66:	200b      	movs	r0, #11
 8015a68:	4770      	bx	lr
 8015a6a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015a6e:	bd70      	pop	{r4, r5, r6, pc}
 8015a70:	200b      	movs	r0, #11
 8015a72:	bd70      	pop	{r4, r5, r6, pc}

08015a74 <rcl_wait_set_add_timer>:
 8015a74:	b328      	cbz	r0, 8015ac2 <rcl_wait_set_add_timer+0x4e>
 8015a76:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015a78:	b570      	push	{r4, r5, r6, lr}
 8015a7a:	4604      	mov	r4, r0
 8015a7c:	b31b      	cbz	r3, 8015ac6 <rcl_wait_set_add_timer+0x52>
 8015a7e:	b329      	cbz	r1, 8015acc <rcl_wait_set_add_timer+0x58>
 8015a80:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8015a82:	6965      	ldr	r5, [r4, #20]
 8015a84:	42a8      	cmp	r0, r5
 8015a86:	d219      	bcs.n	8015abc <rcl_wait_set_add_timer+0x48>
 8015a88:	6925      	ldr	r5, [r4, #16]
 8015a8a:	1c46      	adds	r6, r0, #1
 8015a8c:	641e      	str	r6, [r3, #64]	@ 0x40
 8015a8e:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8015a92:	b102      	cbz	r2, 8015a96 <rcl_wait_set_add_timer+0x22>
 8015a94:	6010      	str	r0, [r2, #0]
 8015a96:	4608      	mov	r0, r1
 8015a98:	f7ff fba6 	bl	80151e8 <rcl_timer_get_guard_condition>
 8015a9c:	b168      	cbz	r0, 8015aba <rcl_wait_set_add_timer+0x46>
 8015a9e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015aa0:	68e3      	ldr	r3, [r4, #12]
 8015aa2:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8015aa4:	3b01      	subs	r3, #1
 8015aa6:	441d      	add	r5, r3
 8015aa8:	f003 fa74 	bl	8018f94 <rcl_guard_condition_get_rmw_handle>
 8015aac:	b180      	cbz	r0, 8015ad0 <rcl_wait_set_add_timer+0x5c>
 8015aae:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015ab0:	6842      	ldr	r2, [r0, #4]
 8015ab2:	695b      	ldr	r3, [r3, #20]
 8015ab4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015ab8:	2000      	movs	r0, #0
 8015aba:	bd70      	pop	{r4, r5, r6, pc}
 8015abc:	f240 3086 	movw	r0, #902	@ 0x386
 8015ac0:	bd70      	pop	{r4, r5, r6, pc}
 8015ac2:	200b      	movs	r0, #11
 8015ac4:	4770      	bx	lr
 8015ac6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015aca:	bd70      	pop	{r4, r5, r6, pc}
 8015acc:	200b      	movs	r0, #11
 8015ace:	bd70      	pop	{r4, r5, r6, pc}
 8015ad0:	2001      	movs	r0, #1
 8015ad2:	bd70      	pop	{r4, r5, r6, pc}

08015ad4 <rcl_wait_set_add_client>:
 8015ad4:	b318      	cbz	r0, 8015b1e <rcl_wait_set_add_client+0x4a>
 8015ad6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015ad8:	b570      	push	{r4, r5, r6, lr}
 8015ada:	4604      	mov	r4, r0
 8015adc:	b30b      	cbz	r3, 8015b22 <rcl_wait_set_add_client+0x4e>
 8015ade:	b319      	cbz	r1, 8015b28 <rcl_wait_set_add_client+0x54>
 8015ae0:	699d      	ldr	r5, [r3, #24]
 8015ae2:	69c0      	ldr	r0, [r0, #28]
 8015ae4:	4285      	cmp	r5, r0
 8015ae6:	d217      	bcs.n	8015b18 <rcl_wait_set_add_client+0x44>
 8015ae8:	69a0      	ldr	r0, [r4, #24]
 8015aea:	1c6e      	adds	r6, r5, #1
 8015aec:	619e      	str	r6, [r3, #24]
 8015aee:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8015af2:	b102      	cbz	r2, 8015af6 <rcl_wait_set_add_client+0x22>
 8015af4:	6015      	str	r5, [r2, #0]
 8015af6:	4608      	mov	r0, r1
 8015af8:	f7fe f8ce 	bl	8013c98 <rcl_client_get_rmw_handle>
 8015afc:	b150      	cbz	r0, 8015b14 <rcl_wait_set_add_client+0x40>
 8015afe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015b00:	6842      	ldr	r2, [r0, #4]
 8015b02:	6a1b      	ldr	r3, [r3, #32]
 8015b04:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015b08:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015b0a:	69d3      	ldr	r3, [r2, #28]
 8015b0c:	3301      	adds	r3, #1
 8015b0e:	2000      	movs	r0, #0
 8015b10:	61d3      	str	r3, [r2, #28]
 8015b12:	bd70      	pop	{r4, r5, r6, pc}
 8015b14:	2001      	movs	r0, #1
 8015b16:	bd70      	pop	{r4, r5, r6, pc}
 8015b18:	f240 3086 	movw	r0, #902	@ 0x386
 8015b1c:	bd70      	pop	{r4, r5, r6, pc}
 8015b1e:	200b      	movs	r0, #11
 8015b20:	4770      	bx	lr
 8015b22:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015b26:	bd70      	pop	{r4, r5, r6, pc}
 8015b28:	200b      	movs	r0, #11
 8015b2a:	bd70      	pop	{r4, r5, r6, pc}

08015b2c <rcl_wait_set_add_service>:
 8015b2c:	b318      	cbz	r0, 8015b76 <rcl_wait_set_add_service+0x4a>
 8015b2e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015b30:	b570      	push	{r4, r5, r6, lr}
 8015b32:	4604      	mov	r4, r0
 8015b34:	b30b      	cbz	r3, 8015b7a <rcl_wait_set_add_service+0x4e>
 8015b36:	b319      	cbz	r1, 8015b80 <rcl_wait_set_add_service+0x54>
 8015b38:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8015b3a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8015b3c:	4285      	cmp	r5, r0
 8015b3e:	d217      	bcs.n	8015b70 <rcl_wait_set_add_service+0x44>
 8015b40:	6a20      	ldr	r0, [r4, #32]
 8015b42:	1c6e      	adds	r6, r5, #1
 8015b44:	625e      	str	r6, [r3, #36]	@ 0x24
 8015b46:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8015b4a:	b102      	cbz	r2, 8015b4e <rcl_wait_set_add_service+0x22>
 8015b4c:	6015      	str	r5, [r2, #0]
 8015b4e:	4608      	mov	r0, r1
 8015b50:	f7fe fed4 	bl	80148fc <rcl_service_get_rmw_handle>
 8015b54:	b150      	cbz	r0, 8015b6c <rcl_wait_set_add_service+0x40>
 8015b56:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015b58:	6842      	ldr	r2, [r0, #4]
 8015b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015b5c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015b60:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015b62:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8015b64:	3301      	adds	r3, #1
 8015b66:	2000      	movs	r0, #0
 8015b68:	6293      	str	r3, [r2, #40]	@ 0x28
 8015b6a:	bd70      	pop	{r4, r5, r6, pc}
 8015b6c:	2001      	movs	r0, #1
 8015b6e:	bd70      	pop	{r4, r5, r6, pc}
 8015b70:	f240 3086 	movw	r0, #902	@ 0x386
 8015b74:	bd70      	pop	{r4, r5, r6, pc}
 8015b76:	200b      	movs	r0, #11
 8015b78:	4770      	bx	lr
 8015b7a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015b7e:	bd70      	pop	{r4, r5, r6, pc}
 8015b80:	200b      	movs	r0, #11
 8015b82:	bd70      	pop	{r4, r5, r6, pc}
 8015b84:	0000      	movs	r0, r0
	...

08015b88 <rcl_wait>:
 8015b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b8c:	ed2d 8b02 	vpush	{d8}
 8015b90:	b08d      	sub	sp, #52	@ 0x34
 8015b92:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015b96:	2800      	cmp	r0, #0
 8015b98:	f000 8143 	beq.w	8015e22 <rcl_wait+0x29a>
 8015b9c:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8015b9e:	4605      	mov	r5, r0
 8015ba0:	2e00      	cmp	r6, #0
 8015ba2:	f000 8112 	beq.w	8015dca <rcl_wait+0x242>
 8015ba6:	6843      	ldr	r3, [r0, #4]
 8015ba8:	b983      	cbnz	r3, 8015bcc <rcl_wait+0x44>
 8015baa:	68eb      	ldr	r3, [r5, #12]
 8015bac:	b973      	cbnz	r3, 8015bcc <rcl_wait+0x44>
 8015bae:	696b      	ldr	r3, [r5, #20]
 8015bb0:	b963      	cbnz	r3, 8015bcc <rcl_wait+0x44>
 8015bb2:	69eb      	ldr	r3, [r5, #28]
 8015bb4:	b953      	cbnz	r3, 8015bcc <rcl_wait+0x44>
 8015bb6:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8015bb8:	b943      	cbnz	r3, 8015bcc <rcl_wait+0x44>
 8015bba:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8015bbc:	b933      	cbnz	r3, 8015bcc <rcl_wait+0x44>
 8015bbe:	f240 3085 	movw	r0, #901	@ 0x385
 8015bc2:	b00d      	add	sp, #52	@ 0x34
 8015bc4:	ecbd 8b02 	vpop	{d8}
 8015bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bcc:	9b04      	ldr	r3, [sp, #16]
 8015bce:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8015bd0:	2b01      	cmp	r3, #1
 8015bd2:	9b05      	ldr	r3, [sp, #20]
 8015bd4:	f173 0300 	sbcs.w	r3, r3, #0
 8015bd8:	f2c0 80f0 	blt.w	8015dbc <rcl_wait+0x234>
 8015bdc:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8015be0:	4643      	mov	r3, r8
 8015be2:	2a00      	cmp	r2, #0
 8015be4:	f000 8133 	beq.w	8015e4e <rcl_wait+0x2c6>
 8015be8:	2400      	movs	r4, #0
 8015bea:	4613      	mov	r3, r2
 8015bec:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8015e60 <rcl_wait+0x2d8>
 8015bf0:	46a2      	mov	sl, r4
 8015bf2:	46a3      	mov	fp, r4
 8015bf4:	f240 3921 	movw	r9, #801	@ 0x321
 8015bf8:	4632      	mov	r2, r6
 8015bfa:	e014      	b.n	8015c26 <rcl_wait+0x9e>
 8015bfc:	2800      	cmp	r0, #0
 8015bfe:	d1e0      	bne.n	8015bc2 <rcl_wait+0x3a>
 8015c00:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015c04:	4542      	cmp	r2, r8
 8015c06:	eb73 0107 	sbcs.w	r1, r3, r7
 8015c0a:	da03      	bge.n	8015c14 <rcl_wait+0x8c>
 8015c0c:	4690      	mov	r8, r2
 8015c0e:	461f      	mov	r7, r3
 8015c10:	f04f 0b01 	mov.w	fp, #1
 8015c14:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8015c16:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8015c18:	3401      	adds	r4, #1
 8015c1a:	f14a 0a00 	adc.w	sl, sl, #0
 8015c1e:	429c      	cmp	r4, r3
 8015c20:	f17a 0100 	sbcs.w	r1, sl, #0
 8015c24:	d228      	bcs.n	8015c78 <rcl_wait+0xf0>
 8015c26:	6928      	ldr	r0, [r5, #16]
 8015c28:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8015c2c:	a908      	add	r1, sp, #32
 8015c2e:	00a6      	lsls	r6, r4, #2
 8015c30:	2800      	cmp	r0, #0
 8015c32:	d0f1      	beq.n	8015c18 <rcl_wait+0x90>
 8015c34:	68eb      	ldr	r3, [r5, #12]
 8015c36:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8015c3a:	4423      	add	r3, r4
 8015c3c:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8015c40:	f1be 0f00 	cmp.w	lr, #0
 8015c44:	d006      	beq.n	8015c54 <rcl_wait+0xcc>
 8015c46:	6913      	ldr	r3, [r2, #16]
 8015c48:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8015c4c:	3301      	adds	r3, #1
 8015c4e:	6113      	str	r3, [r2, #16]
 8015c50:	692b      	ldr	r3, [r5, #16]
 8015c52:	5998      	ldr	r0, [r3, r6]
 8015c54:	ed8d 8b08 	vstr	d8, [sp, #32]
 8015c58:	f7ff fa94 	bl	8015184 <rcl_timer_get_time_until_next_call>
 8015c5c:	4548      	cmp	r0, r9
 8015c5e:	d1cd      	bne.n	8015bfc <rcl_wait+0x74>
 8015c60:	692b      	ldr	r3, [r5, #16]
 8015c62:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8015c64:	2100      	movs	r1, #0
 8015c66:	5199      	str	r1, [r3, r6]
 8015c68:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8015c6a:	3401      	adds	r4, #1
 8015c6c:	f14a 0a00 	adc.w	sl, sl, #0
 8015c70:	429c      	cmp	r4, r3
 8015c72:	f17a 0100 	sbcs.w	r1, sl, #0
 8015c76:	d3d6      	bcc.n	8015c26 <rcl_wait+0x9e>
 8015c78:	4616      	mov	r6, r2
 8015c7a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8015c7e:	4313      	orrs	r3, r2
 8015c80:	46d9      	mov	r9, fp
 8015c82:	f040 80a9 	bne.w	8015dd8 <rcl_wait+0x250>
 8015c86:	2300      	movs	r3, #0
 8015c88:	2200      	movs	r2, #0
 8015c8a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015c8e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8015c92:	ab08      	add	r3, sp, #32
 8015c94:	9302      	str	r3, [sp, #8]
 8015c96:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8015c98:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8015c9c:	e9cd 3200 	strd	r3, r2, [sp]
 8015ca0:	f106 0110 	add.w	r1, r6, #16
 8015ca4:	f106 031c 	add.w	r3, r6, #28
 8015ca8:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8015cac:	1d30      	adds	r0, r6, #4
 8015cae:	f001 fefd 	bl	8017aac <rmw_wait>
 8015cb2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015cb4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8015cb6:	4680      	mov	r8, r0
 8015cb8:	b1ca      	cbz	r2, 8015cee <rcl_wait+0x166>
 8015cba:	2400      	movs	r4, #0
 8015cbc:	4627      	mov	r7, r4
 8015cbe:	692a      	ldr	r2, [r5, #16]
 8015cc0:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8015cc4:	f10d 011f 	add.w	r1, sp, #31
 8015cc8:	00a6      	lsls	r6, r4, #2
 8015cca:	b160      	cbz	r0, 8015ce6 <rcl_wait+0x15e>
 8015ccc:	f88d 701f 	strb.w	r7, [sp, #31]
 8015cd0:	f7ff fa1e 	bl	8015110 <rcl_timer_is_ready>
 8015cd4:	2800      	cmp	r0, #0
 8015cd6:	f47f af74 	bne.w	8015bc2 <rcl_wait+0x3a>
 8015cda:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8015cde:	b90b      	cbnz	r3, 8015ce4 <rcl_wait+0x15c>
 8015ce0:	692a      	ldr	r2, [r5, #16]
 8015ce2:	5193      	str	r3, [r2, r6]
 8015ce4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015ce6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8015ce8:	3401      	adds	r4, #1
 8015cea:	42a2      	cmp	r2, r4
 8015cec:	d8e7      	bhi.n	8015cbe <rcl_wait+0x136>
 8015cee:	f038 0002 	bics.w	r0, r8, #2
 8015cf2:	f040 8090 	bne.w	8015e16 <rcl_wait+0x28e>
 8015cf6:	686e      	ldr	r6, [r5, #4]
 8015cf8:	4602      	mov	r2, r0
 8015cfa:	b91e      	cbnz	r6, 8015d04 <rcl_wait+0x17c>
 8015cfc:	e00d      	b.n	8015d1a <rcl_wait+0x192>
 8015cfe:	3201      	adds	r2, #1
 8015d00:	42b2      	cmp	r2, r6
 8015d02:	d00a      	beq.n	8015d1a <rcl_wait+0x192>
 8015d04:	6899      	ldr	r1, [r3, #8]
 8015d06:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015d0a:	2900      	cmp	r1, #0
 8015d0c:	d1f7      	bne.n	8015cfe <rcl_wait+0x176>
 8015d0e:	682c      	ldr	r4, [r5, #0]
 8015d10:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8015d14:	3201      	adds	r2, #1
 8015d16:	42b2      	cmp	r2, r6
 8015d18:	d1f4      	bne.n	8015d04 <rcl_wait+0x17c>
 8015d1a:	68ee      	ldr	r6, [r5, #12]
 8015d1c:	2200      	movs	r2, #0
 8015d1e:	b91e      	cbnz	r6, 8015d28 <rcl_wait+0x1a0>
 8015d20:	e00d      	b.n	8015d3e <rcl_wait+0x1b6>
 8015d22:	3201      	adds	r2, #1
 8015d24:	42b2      	cmp	r2, r6
 8015d26:	d00a      	beq.n	8015d3e <rcl_wait+0x1b6>
 8015d28:	6959      	ldr	r1, [r3, #20]
 8015d2a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015d2e:	2900      	cmp	r1, #0
 8015d30:	d1f7      	bne.n	8015d22 <rcl_wait+0x19a>
 8015d32:	68ac      	ldr	r4, [r5, #8]
 8015d34:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8015d38:	3201      	adds	r2, #1
 8015d3a:	42b2      	cmp	r2, r6
 8015d3c:	d1f4      	bne.n	8015d28 <rcl_wait+0x1a0>
 8015d3e:	69ee      	ldr	r6, [r5, #28]
 8015d40:	2200      	movs	r2, #0
 8015d42:	b91e      	cbnz	r6, 8015d4c <rcl_wait+0x1c4>
 8015d44:	e00d      	b.n	8015d62 <rcl_wait+0x1da>
 8015d46:	3201      	adds	r2, #1
 8015d48:	42b2      	cmp	r2, r6
 8015d4a:	d00a      	beq.n	8015d62 <rcl_wait+0x1da>
 8015d4c:	6a19      	ldr	r1, [r3, #32]
 8015d4e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015d52:	2900      	cmp	r1, #0
 8015d54:	d1f7      	bne.n	8015d46 <rcl_wait+0x1be>
 8015d56:	69ac      	ldr	r4, [r5, #24]
 8015d58:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8015d5c:	3201      	adds	r2, #1
 8015d5e:	42b2      	cmp	r2, r6
 8015d60:	d1f4      	bne.n	8015d4c <rcl_wait+0x1c4>
 8015d62:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 8015d64:	2200      	movs	r2, #0
 8015d66:	b91e      	cbnz	r6, 8015d70 <rcl_wait+0x1e8>
 8015d68:	e00d      	b.n	8015d86 <rcl_wait+0x1fe>
 8015d6a:	3201      	adds	r2, #1
 8015d6c:	4296      	cmp	r6, r2
 8015d6e:	d00a      	beq.n	8015d86 <rcl_wait+0x1fe>
 8015d70:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8015d72:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015d76:	2900      	cmp	r1, #0
 8015d78:	d1f7      	bne.n	8015d6a <rcl_wait+0x1e2>
 8015d7a:	6a2c      	ldr	r4, [r5, #32]
 8015d7c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8015d80:	3201      	adds	r2, #1
 8015d82:	4296      	cmp	r6, r2
 8015d84:	d1f4      	bne.n	8015d70 <rcl_wait+0x1e8>
 8015d86:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8015d88:	2200      	movs	r2, #0
 8015d8a:	b91e      	cbnz	r6, 8015d94 <rcl_wait+0x20c>
 8015d8c:	e00d      	b.n	8015daa <rcl_wait+0x222>
 8015d8e:	3201      	adds	r2, #1
 8015d90:	42b2      	cmp	r2, r6
 8015d92:	d00a      	beq.n	8015daa <rcl_wait+0x222>
 8015d94:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8015d96:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015d9a:	2900      	cmp	r1, #0
 8015d9c:	d1f7      	bne.n	8015d8e <rcl_wait+0x206>
 8015d9e:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8015da0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8015da4:	3201      	adds	r2, #1
 8015da6:	42b2      	cmp	r2, r6
 8015da8:	d1f4      	bne.n	8015d94 <rcl_wait+0x20c>
 8015daa:	f1b8 0f02 	cmp.w	r8, #2
 8015dae:	f47f af08 	bne.w	8015bc2 <rcl_wait+0x3a>
 8015db2:	464b      	mov	r3, r9
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	bf08      	it	eq
 8015db8:	2002      	moveq	r0, #2
 8015dba:	e702      	b.n	8015bc2 <rcl_wait+0x3a>
 8015dbc:	2a00      	cmp	r2, #0
 8015dbe:	d03a      	beq.n	8015e36 <rcl_wait+0x2ae>
 8015dc0:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8015dc4:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8015dc8:	e70e      	b.n	8015be8 <rcl_wait+0x60>
 8015dca:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015dce:	b00d      	add	sp, #52	@ 0x34
 8015dd0:	ecbd 8b02 	vpop	{d8}
 8015dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015dd8:	9b04      	ldr	r3, [sp, #16]
 8015dda:	2b01      	cmp	r3, #1
 8015ddc:	9b05      	ldr	r3, [sp, #20]
 8015dde:	f173 0300 	sbcs.w	r3, r3, #0
 8015de2:	db24      	blt.n	8015e2e <rcl_wait+0x2a6>
 8015de4:	2f00      	cmp	r7, #0
 8015de6:	bfbc      	itt	lt
 8015de8:	f04f 0800 	movlt.w	r8, #0
 8015dec:	4647      	movlt	r7, r8
 8015dee:	a31e      	add	r3, pc, #120	@ (adr r3, 8015e68 <rcl_wait+0x2e0>)
 8015df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015df4:	4640      	mov	r0, r8
 8015df6:	4639      	mov	r1, r7
 8015df8:	f7ea ff36 	bl	8000c68 <__aeabi_ldivmod>
 8015dfc:	a31a      	add	r3, pc, #104	@ (adr r3, 8015e68 <rcl_wait+0x2e0>)
 8015dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e02:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015e06:	4640      	mov	r0, r8
 8015e08:	4639      	mov	r1, r7
 8015e0a:	f7ea ff2d 	bl	8000c68 <__aeabi_ldivmod>
 8015e0e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8015e12:	ab08      	add	r3, sp, #32
 8015e14:	e73e      	b.n	8015c94 <rcl_wait+0x10c>
 8015e16:	2001      	movs	r0, #1
 8015e18:	b00d      	add	sp, #52	@ 0x34
 8015e1a:	ecbd 8b02 	vpop	{d8}
 8015e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e22:	200b      	movs	r0, #11
 8015e24:	b00d      	add	sp, #52	@ 0x34
 8015e26:	ecbd 8b02 	vpop	{d8}
 8015e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e2e:	465b      	mov	r3, fp
 8015e30:	2b00      	cmp	r3, #0
 8015e32:	d1d7      	bne.n	8015de4 <rcl_wait+0x25c>
 8015e34:	e72e      	b.n	8015c94 <rcl_wait+0x10c>
 8015e36:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8015e3a:	430b      	orrs	r3, r1
 8015e3c:	bf08      	it	eq
 8015e3e:	4691      	moveq	r9, r2
 8015e40:	f43f af21 	beq.w	8015c86 <rcl_wait+0xfe>
 8015e44:	9b04      	ldr	r3, [sp, #16]
 8015e46:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8015e4a:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8015e4e:	2b01      	cmp	r3, #1
 8015e50:	9b05      	ldr	r3, [sp, #20]
 8015e52:	f173 0300 	sbcs.w	r3, r3, #0
 8015e56:	f04f 0300 	mov.w	r3, #0
 8015e5a:	4699      	mov	r9, r3
 8015e5c:	dac2      	bge.n	8015de4 <rcl_wait+0x25c>
 8015e5e:	e719      	b.n	8015c94 <rcl_wait+0x10c>
 8015e60:	ffffffff 	.word	0xffffffff
 8015e64:	7fffffff 	.word	0x7fffffff
 8015e68:	3b9aca00 	.word	0x3b9aca00
 8015e6c:	00000000 	.word	0x00000000

08015e70 <rcl_action_take_goal_response>:
 8015e70:	2800      	cmp	r0, #0
 8015e72:	d039      	beq.n	8015ee8 <rcl_action_take_goal_response+0x78>
 8015e74:	b570      	push	{r4, r5, r6, lr}
 8015e76:	4604      	mov	r4, r0
 8015e78:	6800      	ldr	r0, [r0, #0]
 8015e7a:	b380      	cbz	r0, 8015ede <rcl_action_take_goal_response+0x6e>
 8015e7c:	460d      	mov	r5, r1
 8015e7e:	4616      	mov	r6, r2
 8015e80:	f7fd ff8e 	bl	8013da0 <rcl_client_is_valid>
 8015e84:	b330      	cbz	r0, 8015ed4 <rcl_action_take_goal_response+0x64>
 8015e86:	6820      	ldr	r0, [r4, #0]
 8015e88:	3004      	adds	r0, #4
 8015e8a:	f7fd ff89 	bl	8013da0 <rcl_client_is_valid>
 8015e8e:	b308      	cbz	r0, 8015ed4 <rcl_action_take_goal_response+0x64>
 8015e90:	6820      	ldr	r0, [r4, #0]
 8015e92:	3008      	adds	r0, #8
 8015e94:	f7fd ff84 	bl	8013da0 <rcl_client_is_valid>
 8015e98:	b1e0      	cbz	r0, 8015ed4 <rcl_action_take_goal_response+0x64>
 8015e9a:	6820      	ldr	r0, [r4, #0]
 8015e9c:	300c      	adds	r0, #12
 8015e9e:	f7fe fdf3 	bl	8014a88 <rcl_subscription_is_valid>
 8015ea2:	b1b8      	cbz	r0, 8015ed4 <rcl_action_take_goal_response+0x64>
 8015ea4:	6820      	ldr	r0, [r4, #0]
 8015ea6:	3010      	adds	r0, #16
 8015ea8:	f7fe fdee 	bl	8014a88 <rcl_subscription_is_valid>
 8015eac:	b190      	cbz	r0, 8015ed4 <rcl_action_take_goal_response+0x64>
 8015eae:	b1cd      	cbz	r5, 8015ee4 <rcl_action_take_goal_response+0x74>
 8015eb0:	b1c6      	cbz	r6, 8015ee4 <rcl_action_take_goal_response+0x74>
 8015eb2:	6820      	ldr	r0, [r4, #0]
 8015eb4:	4632      	mov	r2, r6
 8015eb6:	4629      	mov	r1, r5
 8015eb8:	f7fd ff2a 	bl	8013d10 <rcl_take_response>
 8015ebc:	b148      	cbz	r0, 8015ed2 <rcl_action_take_goal_response+0x62>
 8015ebe:	280a      	cmp	r0, #10
 8015ec0:	d007      	beq.n	8015ed2 <rcl_action_take_goal_response+0x62>
 8015ec2:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8015ec6:	f640 0337 	movw	r3, #2103	@ 0x837
 8015eca:	4290      	cmp	r0, r2
 8015ecc:	bf0c      	ite	eq
 8015ece:	4618      	moveq	r0, r3
 8015ed0:	2001      	movne	r0, #1
 8015ed2:	bd70      	pop	{r4, r5, r6, pc}
 8015ed4:	f7f8 f824 	bl	800df20 <rcutils_reset_error>
 8015ed8:	f640 0036 	movw	r0, #2102	@ 0x836
 8015edc:	bd70      	pop	{r4, r5, r6, pc}
 8015ede:	f640 0036 	movw	r0, #2102	@ 0x836
 8015ee2:	bd70      	pop	{r4, r5, r6, pc}
 8015ee4:	200b      	movs	r0, #11
 8015ee6:	bd70      	pop	{r4, r5, r6, pc}
 8015ee8:	f640 0036 	movw	r0, #2102	@ 0x836
 8015eec:	4770      	bx	lr
 8015eee:	bf00      	nop

08015ef0 <rcl_action_send_result_request>:
 8015ef0:	b390      	cbz	r0, 8015f58 <rcl_action_send_result_request+0x68>
 8015ef2:	b570      	push	{r4, r5, r6, lr}
 8015ef4:	4604      	mov	r4, r0
 8015ef6:	6800      	ldr	r0, [r0, #0]
 8015ef8:	b348      	cbz	r0, 8015f4e <rcl_action_send_result_request+0x5e>
 8015efa:	460d      	mov	r5, r1
 8015efc:	4616      	mov	r6, r2
 8015efe:	f7fd ff4f 	bl	8013da0 <rcl_client_is_valid>
 8015f02:	b1f8      	cbz	r0, 8015f44 <rcl_action_send_result_request+0x54>
 8015f04:	6820      	ldr	r0, [r4, #0]
 8015f06:	3004      	adds	r0, #4
 8015f08:	f7fd ff4a 	bl	8013da0 <rcl_client_is_valid>
 8015f0c:	b1d0      	cbz	r0, 8015f44 <rcl_action_send_result_request+0x54>
 8015f0e:	6820      	ldr	r0, [r4, #0]
 8015f10:	3008      	adds	r0, #8
 8015f12:	f7fd ff45 	bl	8013da0 <rcl_client_is_valid>
 8015f16:	b1a8      	cbz	r0, 8015f44 <rcl_action_send_result_request+0x54>
 8015f18:	6820      	ldr	r0, [r4, #0]
 8015f1a:	300c      	adds	r0, #12
 8015f1c:	f7fe fdb4 	bl	8014a88 <rcl_subscription_is_valid>
 8015f20:	b180      	cbz	r0, 8015f44 <rcl_action_send_result_request+0x54>
 8015f22:	6820      	ldr	r0, [r4, #0]
 8015f24:	3010      	adds	r0, #16
 8015f26:	f7fe fdaf 	bl	8014a88 <rcl_subscription_is_valid>
 8015f2a:	b158      	cbz	r0, 8015f44 <rcl_action_send_result_request+0x54>
 8015f2c:	b195      	cbz	r5, 8015f54 <rcl_action_send_result_request+0x64>
 8015f2e:	b18e      	cbz	r6, 8015f54 <rcl_action_send_result_request+0x64>
 8015f30:	6820      	ldr	r0, [r4, #0]
 8015f32:	4632      	mov	r2, r6
 8015f34:	4629      	mov	r1, r5
 8015f36:	3008      	adds	r0, #8
 8015f38:	f7fd feb4 	bl	8013ca4 <rcl_send_request>
 8015f3c:	3800      	subs	r0, #0
 8015f3e:	bf18      	it	ne
 8015f40:	2001      	movne	r0, #1
 8015f42:	bd70      	pop	{r4, r5, r6, pc}
 8015f44:	f7f7 ffec 	bl	800df20 <rcutils_reset_error>
 8015f48:	f640 0036 	movw	r0, #2102	@ 0x836
 8015f4c:	bd70      	pop	{r4, r5, r6, pc}
 8015f4e:	f640 0036 	movw	r0, #2102	@ 0x836
 8015f52:	bd70      	pop	{r4, r5, r6, pc}
 8015f54:	200b      	movs	r0, #11
 8015f56:	bd70      	pop	{r4, r5, r6, pc}
 8015f58:	f640 0036 	movw	r0, #2102	@ 0x836
 8015f5c:	4770      	bx	lr
 8015f5e:	bf00      	nop

08015f60 <rcl_action_take_result_response>:
 8015f60:	2800      	cmp	r0, #0
 8015f62:	d03a      	beq.n	8015fda <rcl_action_take_result_response+0x7a>
 8015f64:	b570      	push	{r4, r5, r6, lr}
 8015f66:	4604      	mov	r4, r0
 8015f68:	6800      	ldr	r0, [r0, #0]
 8015f6a:	b388      	cbz	r0, 8015fd0 <rcl_action_take_result_response+0x70>
 8015f6c:	460d      	mov	r5, r1
 8015f6e:	4616      	mov	r6, r2
 8015f70:	f7fd ff16 	bl	8013da0 <rcl_client_is_valid>
 8015f74:	b338      	cbz	r0, 8015fc6 <rcl_action_take_result_response+0x66>
 8015f76:	6820      	ldr	r0, [r4, #0]
 8015f78:	3004      	adds	r0, #4
 8015f7a:	f7fd ff11 	bl	8013da0 <rcl_client_is_valid>
 8015f7e:	b310      	cbz	r0, 8015fc6 <rcl_action_take_result_response+0x66>
 8015f80:	6820      	ldr	r0, [r4, #0]
 8015f82:	3008      	adds	r0, #8
 8015f84:	f7fd ff0c 	bl	8013da0 <rcl_client_is_valid>
 8015f88:	b1e8      	cbz	r0, 8015fc6 <rcl_action_take_result_response+0x66>
 8015f8a:	6820      	ldr	r0, [r4, #0]
 8015f8c:	300c      	adds	r0, #12
 8015f8e:	f7fe fd7b 	bl	8014a88 <rcl_subscription_is_valid>
 8015f92:	b1c0      	cbz	r0, 8015fc6 <rcl_action_take_result_response+0x66>
 8015f94:	6820      	ldr	r0, [r4, #0]
 8015f96:	3010      	adds	r0, #16
 8015f98:	f7fe fd76 	bl	8014a88 <rcl_subscription_is_valid>
 8015f9c:	b198      	cbz	r0, 8015fc6 <rcl_action_take_result_response+0x66>
 8015f9e:	b1d5      	cbz	r5, 8015fd6 <rcl_action_take_result_response+0x76>
 8015fa0:	b1ce      	cbz	r6, 8015fd6 <rcl_action_take_result_response+0x76>
 8015fa2:	6820      	ldr	r0, [r4, #0]
 8015fa4:	4632      	mov	r2, r6
 8015fa6:	4629      	mov	r1, r5
 8015fa8:	3008      	adds	r0, #8
 8015faa:	f7fd feb1 	bl	8013d10 <rcl_take_response>
 8015fae:	b148      	cbz	r0, 8015fc4 <rcl_action_take_result_response+0x64>
 8015fb0:	280a      	cmp	r0, #10
 8015fb2:	d007      	beq.n	8015fc4 <rcl_action_take_result_response+0x64>
 8015fb4:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8015fb8:	f640 0337 	movw	r3, #2103	@ 0x837
 8015fbc:	4290      	cmp	r0, r2
 8015fbe:	bf0c      	ite	eq
 8015fc0:	4618      	moveq	r0, r3
 8015fc2:	2001      	movne	r0, #1
 8015fc4:	bd70      	pop	{r4, r5, r6, pc}
 8015fc6:	f7f7 ffab 	bl	800df20 <rcutils_reset_error>
 8015fca:	f640 0036 	movw	r0, #2102	@ 0x836
 8015fce:	bd70      	pop	{r4, r5, r6, pc}
 8015fd0:	f640 0036 	movw	r0, #2102	@ 0x836
 8015fd4:	bd70      	pop	{r4, r5, r6, pc}
 8015fd6:	200b      	movs	r0, #11
 8015fd8:	bd70      	pop	{r4, r5, r6, pc}
 8015fda:	f640 0036 	movw	r0, #2102	@ 0x836
 8015fde:	4770      	bx	lr

08015fe0 <rcl_action_take_cancel_response>:
 8015fe0:	2800      	cmp	r0, #0
 8015fe2:	d03a      	beq.n	801605a <rcl_action_take_cancel_response+0x7a>
 8015fe4:	b570      	push	{r4, r5, r6, lr}
 8015fe6:	4604      	mov	r4, r0
 8015fe8:	6800      	ldr	r0, [r0, #0]
 8015fea:	b388      	cbz	r0, 8016050 <rcl_action_take_cancel_response+0x70>
 8015fec:	460d      	mov	r5, r1
 8015fee:	4616      	mov	r6, r2
 8015ff0:	f7fd fed6 	bl	8013da0 <rcl_client_is_valid>
 8015ff4:	b338      	cbz	r0, 8016046 <rcl_action_take_cancel_response+0x66>
 8015ff6:	6820      	ldr	r0, [r4, #0]
 8015ff8:	3004      	adds	r0, #4
 8015ffa:	f7fd fed1 	bl	8013da0 <rcl_client_is_valid>
 8015ffe:	b310      	cbz	r0, 8016046 <rcl_action_take_cancel_response+0x66>
 8016000:	6820      	ldr	r0, [r4, #0]
 8016002:	3008      	adds	r0, #8
 8016004:	f7fd fecc 	bl	8013da0 <rcl_client_is_valid>
 8016008:	b1e8      	cbz	r0, 8016046 <rcl_action_take_cancel_response+0x66>
 801600a:	6820      	ldr	r0, [r4, #0]
 801600c:	300c      	adds	r0, #12
 801600e:	f7fe fd3b 	bl	8014a88 <rcl_subscription_is_valid>
 8016012:	b1c0      	cbz	r0, 8016046 <rcl_action_take_cancel_response+0x66>
 8016014:	6820      	ldr	r0, [r4, #0]
 8016016:	3010      	adds	r0, #16
 8016018:	f7fe fd36 	bl	8014a88 <rcl_subscription_is_valid>
 801601c:	b198      	cbz	r0, 8016046 <rcl_action_take_cancel_response+0x66>
 801601e:	b1d5      	cbz	r5, 8016056 <rcl_action_take_cancel_response+0x76>
 8016020:	b1ce      	cbz	r6, 8016056 <rcl_action_take_cancel_response+0x76>
 8016022:	6820      	ldr	r0, [r4, #0]
 8016024:	4632      	mov	r2, r6
 8016026:	4629      	mov	r1, r5
 8016028:	3004      	adds	r0, #4
 801602a:	f7fd fe71 	bl	8013d10 <rcl_take_response>
 801602e:	b148      	cbz	r0, 8016044 <rcl_action_take_cancel_response+0x64>
 8016030:	280a      	cmp	r0, #10
 8016032:	d007      	beq.n	8016044 <rcl_action_take_cancel_response+0x64>
 8016034:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8016038:	f640 0337 	movw	r3, #2103	@ 0x837
 801603c:	4290      	cmp	r0, r2
 801603e:	bf0c      	ite	eq
 8016040:	4618      	moveq	r0, r3
 8016042:	2001      	movne	r0, #1
 8016044:	bd70      	pop	{r4, r5, r6, pc}
 8016046:	f7f7 ff6b 	bl	800df20 <rcutils_reset_error>
 801604a:	f640 0036 	movw	r0, #2102	@ 0x836
 801604e:	bd70      	pop	{r4, r5, r6, pc}
 8016050:	f640 0036 	movw	r0, #2102	@ 0x836
 8016054:	bd70      	pop	{r4, r5, r6, pc}
 8016056:	200b      	movs	r0, #11
 8016058:	bd70      	pop	{r4, r5, r6, pc}
 801605a:	f640 0036 	movw	r0, #2102	@ 0x836
 801605e:	4770      	bx	lr

08016060 <rcl_action_take_feedback>:
 8016060:	2800      	cmp	r0, #0
 8016062:	d038      	beq.n	80160d6 <rcl_action_take_feedback+0x76>
 8016064:	b530      	push	{r4, r5, lr}
 8016066:	4604      	mov	r4, r0
 8016068:	6800      	ldr	r0, [r0, #0]
 801606a:	b091      	sub	sp, #68	@ 0x44
 801606c:	b378      	cbz	r0, 80160ce <rcl_action_take_feedback+0x6e>
 801606e:	460d      	mov	r5, r1
 8016070:	f7fd fe96 	bl	8013da0 <rcl_client_is_valid>
 8016074:	b328      	cbz	r0, 80160c2 <rcl_action_take_feedback+0x62>
 8016076:	6820      	ldr	r0, [r4, #0]
 8016078:	3004      	adds	r0, #4
 801607a:	f7fd fe91 	bl	8013da0 <rcl_client_is_valid>
 801607e:	b300      	cbz	r0, 80160c2 <rcl_action_take_feedback+0x62>
 8016080:	6820      	ldr	r0, [r4, #0]
 8016082:	3008      	adds	r0, #8
 8016084:	f7fd fe8c 	bl	8013da0 <rcl_client_is_valid>
 8016088:	b1d8      	cbz	r0, 80160c2 <rcl_action_take_feedback+0x62>
 801608a:	6820      	ldr	r0, [r4, #0]
 801608c:	300c      	adds	r0, #12
 801608e:	f7fe fcfb 	bl	8014a88 <rcl_subscription_is_valid>
 8016092:	b1b0      	cbz	r0, 80160c2 <rcl_action_take_feedback+0x62>
 8016094:	6820      	ldr	r0, [r4, #0]
 8016096:	3010      	adds	r0, #16
 8016098:	f7fe fcf6 	bl	8014a88 <rcl_subscription_is_valid>
 801609c:	b188      	cbz	r0, 80160c2 <rcl_action_take_feedback+0x62>
 801609e:	b1ed      	cbz	r5, 80160dc <rcl_action_take_feedback+0x7c>
 80160a0:	6820      	ldr	r0, [r4, #0]
 80160a2:	2300      	movs	r3, #0
 80160a4:	466a      	mov	r2, sp
 80160a6:	4629      	mov	r1, r5
 80160a8:	300c      	adds	r0, #12
 80160aa:	f7fe fc8f 	bl	80149cc <rcl_take>
 80160ae:	b160      	cbz	r0, 80160ca <rcl_action_take_feedback+0x6a>
 80160b0:	f240 1391 	movw	r3, #401	@ 0x191
 80160b4:	4298      	cmp	r0, r3
 80160b6:	d014      	beq.n	80160e2 <rcl_action_take_feedback+0x82>
 80160b8:	280a      	cmp	r0, #10
 80160ba:	bf18      	it	ne
 80160bc:	2001      	movne	r0, #1
 80160be:	b011      	add	sp, #68	@ 0x44
 80160c0:	bd30      	pop	{r4, r5, pc}
 80160c2:	f7f7 ff2d 	bl	800df20 <rcutils_reset_error>
 80160c6:	f640 0036 	movw	r0, #2102	@ 0x836
 80160ca:	b011      	add	sp, #68	@ 0x44
 80160cc:	bd30      	pop	{r4, r5, pc}
 80160ce:	f640 0036 	movw	r0, #2102	@ 0x836
 80160d2:	b011      	add	sp, #68	@ 0x44
 80160d4:	bd30      	pop	{r4, r5, pc}
 80160d6:	f640 0036 	movw	r0, #2102	@ 0x836
 80160da:	4770      	bx	lr
 80160dc:	200b      	movs	r0, #11
 80160de:	b011      	add	sp, #68	@ 0x44
 80160e0:	bd30      	pop	{r4, r5, pc}
 80160e2:	f640 0037 	movw	r0, #2103	@ 0x837
 80160e6:	e7f0      	b.n	80160ca <rcl_action_take_feedback+0x6a>

080160e8 <rcl_action_wait_set_add_action_client>:
 80160e8:	2800      	cmp	r0, #0
 80160ea:	d048      	beq.n	801617e <rcl_action_wait_set_add_action_client+0x96>
 80160ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80160ee:	460c      	mov	r4, r1
 80160f0:	2900      	cmp	r1, #0
 80160f2:	d03c      	beq.n	801616e <rcl_action_wait_set_add_action_client+0x86>
 80160f4:	4605      	mov	r5, r0
 80160f6:	6808      	ldr	r0, [r1, #0]
 80160f8:	2800      	cmp	r0, #0
 80160fa:	d038      	beq.n	801616e <rcl_action_wait_set_add_action_client+0x86>
 80160fc:	4617      	mov	r7, r2
 80160fe:	461e      	mov	r6, r3
 8016100:	f7fd fe4e 	bl	8013da0 <rcl_client_is_valid>
 8016104:	b3b0      	cbz	r0, 8016174 <rcl_action_wait_set_add_action_client+0x8c>
 8016106:	6820      	ldr	r0, [r4, #0]
 8016108:	3004      	adds	r0, #4
 801610a:	f7fd fe49 	bl	8013da0 <rcl_client_is_valid>
 801610e:	b388      	cbz	r0, 8016174 <rcl_action_wait_set_add_action_client+0x8c>
 8016110:	6820      	ldr	r0, [r4, #0]
 8016112:	3008      	adds	r0, #8
 8016114:	f7fd fe44 	bl	8013da0 <rcl_client_is_valid>
 8016118:	b360      	cbz	r0, 8016174 <rcl_action_wait_set_add_action_client+0x8c>
 801611a:	6820      	ldr	r0, [r4, #0]
 801611c:	300c      	adds	r0, #12
 801611e:	f7fe fcb3 	bl	8014a88 <rcl_subscription_is_valid>
 8016122:	b338      	cbz	r0, 8016174 <rcl_action_wait_set_add_action_client+0x8c>
 8016124:	6820      	ldr	r0, [r4, #0]
 8016126:	3010      	adds	r0, #16
 8016128:	f7fe fcae 	bl	8014a88 <rcl_subscription_is_valid>
 801612c:	b310      	cbz	r0, 8016174 <rcl_action_wait_set_add_action_client+0x8c>
 801612e:	6821      	ldr	r1, [r4, #0]
 8016130:	4628      	mov	r0, r5
 8016132:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8016136:	f7ff fccd 	bl	8015ad4 <rcl_wait_set_add_client>
 801613a:	b9b8      	cbnz	r0, 801616c <rcl_action_wait_set_add_action_client+0x84>
 801613c:	6821      	ldr	r1, [r4, #0]
 801613e:	4628      	mov	r0, r5
 8016140:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8016144:	3104      	adds	r1, #4
 8016146:	f7ff fcc5 	bl	8015ad4 <rcl_wait_set_add_client>
 801614a:	b978      	cbnz	r0, 801616c <rcl_action_wait_set_add_action_client+0x84>
 801614c:	6821      	ldr	r1, [r4, #0]
 801614e:	4628      	mov	r0, r5
 8016150:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8016154:	3108      	adds	r1, #8
 8016156:	f7ff fcbd 	bl	8015ad4 <rcl_wait_set_add_client>
 801615a:	b938      	cbnz	r0, 801616c <rcl_action_wait_set_add_action_client+0x84>
 801615c:	6821      	ldr	r1, [r4, #0]
 801615e:	4628      	mov	r0, r5
 8016160:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8016164:	310c      	adds	r1, #12
 8016166:	f7ff f96d 	bl	8015444 <rcl_wait_set_add_subscription>
 801616a:	b158      	cbz	r0, 8016184 <rcl_action_wait_set_add_action_client+0x9c>
 801616c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801616e:	f640 0036 	movw	r0, #2102	@ 0x836
 8016172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016174:	f7f7 fed4 	bl	800df20 <rcutils_reset_error>
 8016178:	f640 0036 	movw	r0, #2102	@ 0x836
 801617c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801617e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016182:	4770      	bx	lr
 8016184:	6821      	ldr	r1, [r4, #0]
 8016186:	4628      	mov	r0, r5
 8016188:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 801618c:	3110      	adds	r1, #16
 801618e:	f7ff f959 	bl	8015444 <rcl_wait_set_add_subscription>
 8016192:	2800      	cmp	r0, #0
 8016194:	d1ea      	bne.n	801616c <rcl_action_wait_set_add_action_client+0x84>
 8016196:	b11f      	cbz	r7, 80161a0 <rcl_action_wait_set_add_action_client+0xb8>
 8016198:	6823      	ldr	r3, [r4, #0]
 801619a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 801619e:	603b      	str	r3, [r7, #0]
 80161a0:	2e00      	cmp	r6, #0
 80161a2:	d0e3      	beq.n	801616c <rcl_action_wait_set_add_action_client+0x84>
 80161a4:	6823      	ldr	r3, [r4, #0]
 80161a6:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 80161aa:	6033      	str	r3, [r6, #0]
 80161ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80161ae:	bf00      	nop

080161b0 <rcl_action_client_wait_set_get_entities_ready>:
 80161b0:	2800      	cmp	r0, #0
 80161b2:	f000 808d 	beq.w	80162d0 <rcl_action_client_wait_set_get_entities_ready+0x120>
 80161b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161ba:	460c      	mov	r4, r1
 80161bc:	2900      	cmp	r1, #0
 80161be:	d077      	beq.n	80162b0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 80161c0:	4605      	mov	r5, r0
 80161c2:	6808      	ldr	r0, [r1, #0]
 80161c4:	2800      	cmp	r0, #0
 80161c6:	d073      	beq.n	80162b0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 80161c8:	4616      	mov	r6, r2
 80161ca:	461f      	mov	r7, r3
 80161cc:	f7fd fde8 	bl	8013da0 <rcl_client_is_valid>
 80161d0:	2800      	cmp	r0, #0
 80161d2:	d071      	beq.n	80162b8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80161d4:	6820      	ldr	r0, [r4, #0]
 80161d6:	3004      	adds	r0, #4
 80161d8:	f7fd fde2 	bl	8013da0 <rcl_client_is_valid>
 80161dc:	2800      	cmp	r0, #0
 80161de:	d06b      	beq.n	80162b8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80161e0:	6820      	ldr	r0, [r4, #0]
 80161e2:	3008      	adds	r0, #8
 80161e4:	f7fd fddc 	bl	8013da0 <rcl_client_is_valid>
 80161e8:	2800      	cmp	r0, #0
 80161ea:	d065      	beq.n	80162b8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80161ec:	6820      	ldr	r0, [r4, #0]
 80161ee:	300c      	adds	r0, #12
 80161f0:	f7fe fc4a 	bl	8014a88 <rcl_subscription_is_valid>
 80161f4:	2800      	cmp	r0, #0
 80161f6:	d05f      	beq.n	80162b8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80161f8:	6820      	ldr	r0, [r4, #0]
 80161fa:	3010      	adds	r0, #16
 80161fc:	f7fe fc44 	bl	8014a88 <rcl_subscription_is_valid>
 8016200:	2800      	cmp	r0, #0
 8016202:	d059      	beq.n	80162b8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8016204:	2e00      	cmp	r6, #0
 8016206:	d060      	beq.n	80162ca <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8016208:	2f00      	cmp	r7, #0
 801620a:	d05e      	beq.n	80162ca <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801620c:	9b06      	ldr	r3, [sp, #24]
 801620e:	2b00      	cmp	r3, #0
 8016210:	d05b      	beq.n	80162ca <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8016212:	9b07      	ldr	r3, [sp, #28]
 8016214:	2b00      	cmp	r3, #0
 8016216:	d058      	beq.n	80162ca <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8016218:	9b08      	ldr	r3, [sp, #32]
 801621a:	2b00      	cmp	r3, #0
 801621c:	d055      	beq.n	80162ca <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801621e:	6823      	ldr	r3, [r4, #0]
 8016220:	686a      	ldr	r2, [r5, #4]
 8016222:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 8016226:	428a      	cmp	r2, r1
 8016228:	d94c      	bls.n	80162c4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801622a:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 801622e:	4282      	cmp	r2, r0
 8016230:	d948      	bls.n	80162c4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8016232:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 8016236:	69ea      	ldr	r2, [r5, #28]
 8016238:	42a2      	cmp	r2, r4
 801623a:	d943      	bls.n	80162c4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801623c:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8016240:	4562      	cmp	r2, ip
 8016242:	d93f      	bls.n	80162c4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8016244:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8016248:	4572      	cmp	r2, lr
 801624a:	d93b      	bls.n	80162c4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801624c:	69aa      	ldr	r2, [r5, #24]
 801624e:	682d      	ldr	r5, [r5, #0]
 8016250:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8016254:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8016258:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 801625c:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8016260:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8016264:	f103 0c0c 	add.w	ip, r3, #12
 8016268:	eba5 050c 	sub.w	r5, r5, ip
 801626c:	fab5 f585 	clz	r5, r5
 8016270:	096d      	lsrs	r5, r5, #5
 8016272:	7035      	strb	r5, [r6, #0]
 8016274:	f103 0510 	add.w	r5, r3, #16
 8016278:	1b64      	subs	r4, r4, r5
 801627a:	fab4 f484 	clz	r4, r4
 801627e:	0964      	lsrs	r4, r4, #5
 8016280:	703c      	strb	r4, [r7, #0]
 8016282:	eba3 0008 	sub.w	r0, r3, r8
 8016286:	1d1c      	adds	r4, r3, #4
 8016288:	3308      	adds	r3, #8
 801628a:	1ad3      	subs	r3, r2, r3
 801628c:	fab0 f080 	clz	r0, r0
 8016290:	9a06      	ldr	r2, [sp, #24]
 8016292:	0940      	lsrs	r0, r0, #5
 8016294:	1b09      	subs	r1, r1, r4
 8016296:	7010      	strb	r0, [r2, #0]
 8016298:	fab1 f181 	clz	r1, r1
 801629c:	9a07      	ldr	r2, [sp, #28]
 801629e:	0949      	lsrs	r1, r1, #5
 80162a0:	7011      	strb	r1, [r2, #0]
 80162a2:	fab3 f383 	clz	r3, r3
 80162a6:	9a08      	ldr	r2, [sp, #32]
 80162a8:	095b      	lsrs	r3, r3, #5
 80162aa:	2000      	movs	r0, #0
 80162ac:	7013      	strb	r3, [r2, #0]
 80162ae:	e001      	b.n	80162b4 <rcl_action_client_wait_set_get_entities_ready+0x104>
 80162b0:	f640 0036 	movw	r0, #2102	@ 0x836
 80162b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162b8:	f7f7 fe32 	bl	800df20 <rcutils_reset_error>
 80162bc:	f640 0036 	movw	r0, #2102	@ 0x836
 80162c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162c4:	2001      	movs	r0, #1
 80162c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162ca:	200b      	movs	r0, #11
 80162cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162d0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80162d4:	4770      	bx	lr
 80162d6:	bf00      	nop

080162d8 <rcl_action_take_goal_request>:
 80162d8:	2800      	cmp	r0, #0
 80162da:	d039      	beq.n	8016350 <rcl_action_take_goal_request+0x78>
 80162dc:	b570      	push	{r4, r5, r6, lr}
 80162de:	4604      	mov	r4, r0
 80162e0:	6800      	ldr	r0, [r0, #0]
 80162e2:	b380      	cbz	r0, 8016346 <rcl_action_take_goal_request+0x6e>
 80162e4:	460d      	mov	r5, r1
 80162e6:	4616      	mov	r6, r2
 80162e8:	f7fe fb66 	bl	80149b8 <rcl_service_is_valid>
 80162ec:	b330      	cbz	r0, 801633c <rcl_action_take_goal_request+0x64>
 80162ee:	6820      	ldr	r0, [r4, #0]
 80162f0:	3004      	adds	r0, #4
 80162f2:	f7fe fb61 	bl	80149b8 <rcl_service_is_valid>
 80162f6:	b308      	cbz	r0, 801633c <rcl_action_take_goal_request+0x64>
 80162f8:	6820      	ldr	r0, [r4, #0]
 80162fa:	3008      	adds	r0, #8
 80162fc:	f7fe fb5c 	bl	80149b8 <rcl_service_is_valid>
 8016300:	b1e0      	cbz	r0, 801633c <rcl_action_take_goal_request+0x64>
 8016302:	6820      	ldr	r0, [r4, #0]
 8016304:	300c      	adds	r0, #12
 8016306:	f7f6 fe25 	bl	800cf54 <rcl_publisher_is_valid>
 801630a:	b1b8      	cbz	r0, 801633c <rcl_action_take_goal_request+0x64>
 801630c:	6820      	ldr	r0, [r4, #0]
 801630e:	3010      	adds	r0, #16
 8016310:	f7f6 fe20 	bl	800cf54 <rcl_publisher_is_valid>
 8016314:	b190      	cbz	r0, 801633c <rcl_action_take_goal_request+0x64>
 8016316:	b1cd      	cbz	r5, 801634c <rcl_action_take_goal_request+0x74>
 8016318:	b1c6      	cbz	r6, 801634c <rcl_action_take_goal_request+0x74>
 801631a:	6820      	ldr	r0, [r4, #0]
 801631c:	4632      	mov	r2, r6
 801631e:	4629      	mov	r1, r5
 8016320:	f7fe faf2 	bl	8014908 <rcl_take_request>
 8016324:	b148      	cbz	r0, 801633a <rcl_action_take_goal_request+0x62>
 8016326:	280a      	cmp	r0, #10
 8016328:	d007      	beq.n	801633a <rcl_action_take_goal_request+0x62>
 801632a:	f240 2259 	movw	r2, #601	@ 0x259
 801632e:	f640 0399 	movw	r3, #2201	@ 0x899
 8016332:	4290      	cmp	r0, r2
 8016334:	bf0c      	ite	eq
 8016336:	4618      	moveq	r0, r3
 8016338:	2001      	movne	r0, #1
 801633a:	bd70      	pop	{r4, r5, r6, pc}
 801633c:	f7f7 fdf0 	bl	800df20 <rcutils_reset_error>
 8016340:	f640 0098 	movw	r0, #2200	@ 0x898
 8016344:	bd70      	pop	{r4, r5, r6, pc}
 8016346:	f640 0098 	movw	r0, #2200	@ 0x898
 801634a:	bd70      	pop	{r4, r5, r6, pc}
 801634c:	200b      	movs	r0, #11
 801634e:	bd70      	pop	{r4, r5, r6, pc}
 8016350:	f640 0098 	movw	r0, #2200	@ 0x898
 8016354:	4770      	bx	lr
 8016356:	bf00      	nop

08016358 <rcl_action_send_goal_response>:
 8016358:	b390      	cbz	r0, 80163c0 <rcl_action_send_goal_response+0x68>
 801635a:	b570      	push	{r4, r5, r6, lr}
 801635c:	4604      	mov	r4, r0
 801635e:	6800      	ldr	r0, [r0, #0]
 8016360:	b348      	cbz	r0, 80163b6 <rcl_action_send_goal_response+0x5e>
 8016362:	460d      	mov	r5, r1
 8016364:	4616      	mov	r6, r2
 8016366:	f7fe fb27 	bl	80149b8 <rcl_service_is_valid>
 801636a:	b1f8      	cbz	r0, 80163ac <rcl_action_send_goal_response+0x54>
 801636c:	6820      	ldr	r0, [r4, #0]
 801636e:	3004      	adds	r0, #4
 8016370:	f7fe fb22 	bl	80149b8 <rcl_service_is_valid>
 8016374:	b1d0      	cbz	r0, 80163ac <rcl_action_send_goal_response+0x54>
 8016376:	6820      	ldr	r0, [r4, #0]
 8016378:	3008      	adds	r0, #8
 801637a:	f7fe fb1d 	bl	80149b8 <rcl_service_is_valid>
 801637e:	b1a8      	cbz	r0, 80163ac <rcl_action_send_goal_response+0x54>
 8016380:	6820      	ldr	r0, [r4, #0]
 8016382:	300c      	adds	r0, #12
 8016384:	f7f6 fde6 	bl	800cf54 <rcl_publisher_is_valid>
 8016388:	b180      	cbz	r0, 80163ac <rcl_action_send_goal_response+0x54>
 801638a:	6820      	ldr	r0, [r4, #0]
 801638c:	3010      	adds	r0, #16
 801638e:	f7f6 fde1 	bl	800cf54 <rcl_publisher_is_valid>
 8016392:	b158      	cbz	r0, 80163ac <rcl_action_send_goal_response+0x54>
 8016394:	b195      	cbz	r5, 80163bc <rcl_action_send_goal_response+0x64>
 8016396:	b18e      	cbz	r6, 80163bc <rcl_action_send_goal_response+0x64>
 8016398:	6820      	ldr	r0, [r4, #0]
 801639a:	4632      	mov	r2, r6
 801639c:	4629      	mov	r1, r5
 801639e:	f7fe faf3 	bl	8014988 <rcl_send_response>
 80163a2:	b110      	cbz	r0, 80163aa <rcl_action_send_goal_response+0x52>
 80163a4:	2802      	cmp	r0, #2
 80163a6:	bf18      	it	ne
 80163a8:	2001      	movne	r0, #1
 80163aa:	bd70      	pop	{r4, r5, r6, pc}
 80163ac:	f7f7 fdb8 	bl	800df20 <rcutils_reset_error>
 80163b0:	f640 0098 	movw	r0, #2200	@ 0x898
 80163b4:	bd70      	pop	{r4, r5, r6, pc}
 80163b6:	f640 0098 	movw	r0, #2200	@ 0x898
 80163ba:	bd70      	pop	{r4, r5, r6, pc}
 80163bc:	200b      	movs	r0, #11
 80163be:	bd70      	pop	{r4, r5, r6, pc}
 80163c0:	f640 0098 	movw	r0, #2200	@ 0x898
 80163c4:	4770      	bx	lr
 80163c6:	bf00      	nop

080163c8 <rcl_action_take_result_request>:
 80163c8:	2800      	cmp	r0, #0
 80163ca:	d03a      	beq.n	8016442 <rcl_action_take_result_request+0x7a>
 80163cc:	b570      	push	{r4, r5, r6, lr}
 80163ce:	4604      	mov	r4, r0
 80163d0:	6800      	ldr	r0, [r0, #0]
 80163d2:	b388      	cbz	r0, 8016438 <rcl_action_take_result_request+0x70>
 80163d4:	460d      	mov	r5, r1
 80163d6:	4616      	mov	r6, r2
 80163d8:	f7fe faee 	bl	80149b8 <rcl_service_is_valid>
 80163dc:	b338      	cbz	r0, 801642e <rcl_action_take_result_request+0x66>
 80163de:	6820      	ldr	r0, [r4, #0]
 80163e0:	3004      	adds	r0, #4
 80163e2:	f7fe fae9 	bl	80149b8 <rcl_service_is_valid>
 80163e6:	b310      	cbz	r0, 801642e <rcl_action_take_result_request+0x66>
 80163e8:	6820      	ldr	r0, [r4, #0]
 80163ea:	3008      	adds	r0, #8
 80163ec:	f7fe fae4 	bl	80149b8 <rcl_service_is_valid>
 80163f0:	b1e8      	cbz	r0, 801642e <rcl_action_take_result_request+0x66>
 80163f2:	6820      	ldr	r0, [r4, #0]
 80163f4:	300c      	adds	r0, #12
 80163f6:	f7f6 fdad 	bl	800cf54 <rcl_publisher_is_valid>
 80163fa:	b1c0      	cbz	r0, 801642e <rcl_action_take_result_request+0x66>
 80163fc:	6820      	ldr	r0, [r4, #0]
 80163fe:	3010      	adds	r0, #16
 8016400:	f7f6 fda8 	bl	800cf54 <rcl_publisher_is_valid>
 8016404:	b198      	cbz	r0, 801642e <rcl_action_take_result_request+0x66>
 8016406:	b1d5      	cbz	r5, 801643e <rcl_action_take_result_request+0x76>
 8016408:	b1ce      	cbz	r6, 801643e <rcl_action_take_result_request+0x76>
 801640a:	6820      	ldr	r0, [r4, #0]
 801640c:	4632      	mov	r2, r6
 801640e:	4629      	mov	r1, r5
 8016410:	3008      	adds	r0, #8
 8016412:	f7fe fa79 	bl	8014908 <rcl_take_request>
 8016416:	b148      	cbz	r0, 801642c <rcl_action_take_result_request+0x64>
 8016418:	280a      	cmp	r0, #10
 801641a:	d007      	beq.n	801642c <rcl_action_take_result_request+0x64>
 801641c:	f240 2259 	movw	r2, #601	@ 0x259
 8016420:	f640 0399 	movw	r3, #2201	@ 0x899
 8016424:	4290      	cmp	r0, r2
 8016426:	bf0c      	ite	eq
 8016428:	4618      	moveq	r0, r3
 801642a:	2001      	movne	r0, #1
 801642c:	bd70      	pop	{r4, r5, r6, pc}
 801642e:	f7f7 fd77 	bl	800df20 <rcutils_reset_error>
 8016432:	f640 0098 	movw	r0, #2200	@ 0x898
 8016436:	bd70      	pop	{r4, r5, r6, pc}
 8016438:	f640 0098 	movw	r0, #2200	@ 0x898
 801643c:	bd70      	pop	{r4, r5, r6, pc}
 801643e:	200b      	movs	r0, #11
 8016440:	bd70      	pop	{r4, r5, r6, pc}
 8016442:	f640 0098 	movw	r0, #2200	@ 0x898
 8016446:	4770      	bx	lr

08016448 <rcl_action_take_cancel_request>:
 8016448:	2800      	cmp	r0, #0
 801644a:	d03a      	beq.n	80164c2 <rcl_action_take_cancel_request+0x7a>
 801644c:	b570      	push	{r4, r5, r6, lr}
 801644e:	4604      	mov	r4, r0
 8016450:	6800      	ldr	r0, [r0, #0]
 8016452:	b388      	cbz	r0, 80164b8 <rcl_action_take_cancel_request+0x70>
 8016454:	460d      	mov	r5, r1
 8016456:	4616      	mov	r6, r2
 8016458:	f7fe faae 	bl	80149b8 <rcl_service_is_valid>
 801645c:	b338      	cbz	r0, 80164ae <rcl_action_take_cancel_request+0x66>
 801645e:	6820      	ldr	r0, [r4, #0]
 8016460:	3004      	adds	r0, #4
 8016462:	f7fe faa9 	bl	80149b8 <rcl_service_is_valid>
 8016466:	b310      	cbz	r0, 80164ae <rcl_action_take_cancel_request+0x66>
 8016468:	6820      	ldr	r0, [r4, #0]
 801646a:	3008      	adds	r0, #8
 801646c:	f7fe faa4 	bl	80149b8 <rcl_service_is_valid>
 8016470:	b1e8      	cbz	r0, 80164ae <rcl_action_take_cancel_request+0x66>
 8016472:	6820      	ldr	r0, [r4, #0]
 8016474:	300c      	adds	r0, #12
 8016476:	f7f6 fd6d 	bl	800cf54 <rcl_publisher_is_valid>
 801647a:	b1c0      	cbz	r0, 80164ae <rcl_action_take_cancel_request+0x66>
 801647c:	6820      	ldr	r0, [r4, #0]
 801647e:	3010      	adds	r0, #16
 8016480:	f7f6 fd68 	bl	800cf54 <rcl_publisher_is_valid>
 8016484:	b198      	cbz	r0, 80164ae <rcl_action_take_cancel_request+0x66>
 8016486:	b1d5      	cbz	r5, 80164be <rcl_action_take_cancel_request+0x76>
 8016488:	b1ce      	cbz	r6, 80164be <rcl_action_take_cancel_request+0x76>
 801648a:	6820      	ldr	r0, [r4, #0]
 801648c:	4632      	mov	r2, r6
 801648e:	4629      	mov	r1, r5
 8016490:	3004      	adds	r0, #4
 8016492:	f7fe fa39 	bl	8014908 <rcl_take_request>
 8016496:	b148      	cbz	r0, 80164ac <rcl_action_take_cancel_request+0x64>
 8016498:	280a      	cmp	r0, #10
 801649a:	d007      	beq.n	80164ac <rcl_action_take_cancel_request+0x64>
 801649c:	f240 2259 	movw	r2, #601	@ 0x259
 80164a0:	f640 0399 	movw	r3, #2201	@ 0x899
 80164a4:	4290      	cmp	r0, r2
 80164a6:	bf0c      	ite	eq
 80164a8:	4618      	moveq	r0, r3
 80164aa:	2001      	movne	r0, #1
 80164ac:	bd70      	pop	{r4, r5, r6, pc}
 80164ae:	f7f7 fd37 	bl	800df20 <rcutils_reset_error>
 80164b2:	f640 0098 	movw	r0, #2200	@ 0x898
 80164b6:	bd70      	pop	{r4, r5, r6, pc}
 80164b8:	f640 0098 	movw	r0, #2200	@ 0x898
 80164bc:	bd70      	pop	{r4, r5, r6, pc}
 80164be:	200b      	movs	r0, #11
 80164c0:	bd70      	pop	{r4, r5, r6, pc}
 80164c2:	f640 0098 	movw	r0, #2200	@ 0x898
 80164c6:	4770      	bx	lr

080164c8 <rcl_action_send_cancel_response>:
 80164c8:	b398      	cbz	r0, 8016532 <rcl_action_send_cancel_response+0x6a>
 80164ca:	b570      	push	{r4, r5, r6, lr}
 80164cc:	4604      	mov	r4, r0
 80164ce:	6800      	ldr	r0, [r0, #0]
 80164d0:	b350      	cbz	r0, 8016528 <rcl_action_send_cancel_response+0x60>
 80164d2:	460d      	mov	r5, r1
 80164d4:	4616      	mov	r6, r2
 80164d6:	f7fe fa6f 	bl	80149b8 <rcl_service_is_valid>
 80164da:	b300      	cbz	r0, 801651e <rcl_action_send_cancel_response+0x56>
 80164dc:	6820      	ldr	r0, [r4, #0]
 80164de:	3004      	adds	r0, #4
 80164e0:	f7fe fa6a 	bl	80149b8 <rcl_service_is_valid>
 80164e4:	b1d8      	cbz	r0, 801651e <rcl_action_send_cancel_response+0x56>
 80164e6:	6820      	ldr	r0, [r4, #0]
 80164e8:	3008      	adds	r0, #8
 80164ea:	f7fe fa65 	bl	80149b8 <rcl_service_is_valid>
 80164ee:	b1b0      	cbz	r0, 801651e <rcl_action_send_cancel_response+0x56>
 80164f0:	6820      	ldr	r0, [r4, #0]
 80164f2:	300c      	adds	r0, #12
 80164f4:	f7f6 fd2e 	bl	800cf54 <rcl_publisher_is_valid>
 80164f8:	b188      	cbz	r0, 801651e <rcl_action_send_cancel_response+0x56>
 80164fa:	6820      	ldr	r0, [r4, #0]
 80164fc:	3010      	adds	r0, #16
 80164fe:	f7f6 fd29 	bl	800cf54 <rcl_publisher_is_valid>
 8016502:	b160      	cbz	r0, 801651e <rcl_action_send_cancel_response+0x56>
 8016504:	b19d      	cbz	r5, 801652e <rcl_action_send_cancel_response+0x66>
 8016506:	b196      	cbz	r6, 801652e <rcl_action_send_cancel_response+0x66>
 8016508:	6820      	ldr	r0, [r4, #0]
 801650a:	4632      	mov	r2, r6
 801650c:	4629      	mov	r1, r5
 801650e:	3004      	adds	r0, #4
 8016510:	f7fe fa3a 	bl	8014988 <rcl_send_response>
 8016514:	b110      	cbz	r0, 801651c <rcl_action_send_cancel_response+0x54>
 8016516:	2802      	cmp	r0, #2
 8016518:	bf18      	it	ne
 801651a:	2001      	movne	r0, #1
 801651c:	bd70      	pop	{r4, r5, r6, pc}
 801651e:	f7f7 fcff 	bl	800df20 <rcutils_reset_error>
 8016522:	f640 0098 	movw	r0, #2200	@ 0x898
 8016526:	bd70      	pop	{r4, r5, r6, pc}
 8016528:	f640 0098 	movw	r0, #2200	@ 0x898
 801652c:	bd70      	pop	{r4, r5, r6, pc}
 801652e:	200b      	movs	r0, #11
 8016530:	bd70      	pop	{r4, r5, r6, pc}
 8016532:	f640 0098 	movw	r0, #2200	@ 0x898
 8016536:	4770      	bx	lr

08016538 <rcl_action_wait_set_add_action_server>:
 8016538:	2800      	cmp	r0, #0
 801653a:	d04d      	beq.n	80165d8 <rcl_action_wait_set_add_action_server+0xa0>
 801653c:	b570      	push	{r4, r5, r6, lr}
 801653e:	460c      	mov	r4, r1
 8016540:	b159      	cbz	r1, 801655a <rcl_action_wait_set_add_action_server+0x22>
 8016542:	4605      	mov	r5, r0
 8016544:	6808      	ldr	r0, [r1, #0]
 8016546:	b140      	cbz	r0, 801655a <rcl_action_wait_set_add_action_server+0x22>
 8016548:	4616      	mov	r6, r2
 801654a:	f7fe fa35 	bl	80149b8 <rcl_service_is_valid>
 801654e:	b120      	cbz	r0, 801655a <rcl_action_wait_set_add_action_server+0x22>
 8016550:	6820      	ldr	r0, [r4, #0]
 8016552:	3004      	adds	r0, #4
 8016554:	f7fe fa30 	bl	80149b8 <rcl_service_is_valid>
 8016558:	b910      	cbnz	r0, 8016560 <rcl_action_wait_set_add_action_server+0x28>
 801655a:	f640 0098 	movw	r0, #2200	@ 0x898
 801655e:	bd70      	pop	{r4, r5, r6, pc}
 8016560:	6820      	ldr	r0, [r4, #0]
 8016562:	3008      	adds	r0, #8
 8016564:	f7fe fa28 	bl	80149b8 <rcl_service_is_valid>
 8016568:	2800      	cmp	r0, #0
 801656a:	d0f6      	beq.n	801655a <rcl_action_wait_set_add_action_server+0x22>
 801656c:	6820      	ldr	r0, [r4, #0]
 801656e:	300c      	adds	r0, #12
 8016570:	f7f6 fd08 	bl	800cf84 <rcl_publisher_is_valid_except_context>
 8016574:	2800      	cmp	r0, #0
 8016576:	d0f0      	beq.n	801655a <rcl_action_wait_set_add_action_server+0x22>
 8016578:	6820      	ldr	r0, [r4, #0]
 801657a:	3010      	adds	r0, #16
 801657c:	f7f6 fd02 	bl	800cf84 <rcl_publisher_is_valid_except_context>
 8016580:	2800      	cmp	r0, #0
 8016582:	d0ea      	beq.n	801655a <rcl_action_wait_set_add_action_server+0x22>
 8016584:	6821      	ldr	r1, [r4, #0]
 8016586:	4628      	mov	r0, r5
 8016588:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 801658c:	f7ff face 	bl	8015b2c <rcl_wait_set_add_service>
 8016590:	2800      	cmp	r0, #0
 8016592:	d1e4      	bne.n	801655e <rcl_action_wait_set_add_action_server+0x26>
 8016594:	6821      	ldr	r1, [r4, #0]
 8016596:	4628      	mov	r0, r5
 8016598:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 801659c:	3104      	adds	r1, #4
 801659e:	f7ff fac5 	bl	8015b2c <rcl_wait_set_add_service>
 80165a2:	2800      	cmp	r0, #0
 80165a4:	d1db      	bne.n	801655e <rcl_action_wait_set_add_action_server+0x26>
 80165a6:	6821      	ldr	r1, [r4, #0]
 80165a8:	4628      	mov	r0, r5
 80165aa:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 80165ae:	3108      	adds	r1, #8
 80165b0:	f7ff fabc 	bl	8015b2c <rcl_wait_set_add_service>
 80165b4:	2800      	cmp	r0, #0
 80165b6:	d1d2      	bne.n	801655e <rcl_action_wait_set_add_action_server+0x26>
 80165b8:	6821      	ldr	r1, [r4, #0]
 80165ba:	4628      	mov	r0, r5
 80165bc:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 80165c0:	3114      	adds	r1, #20
 80165c2:	f7ff fa57 	bl	8015a74 <rcl_wait_set_add_timer>
 80165c6:	2800      	cmp	r0, #0
 80165c8:	d1c9      	bne.n	801655e <rcl_action_wait_set_add_action_server+0x26>
 80165ca:	2e00      	cmp	r6, #0
 80165cc:	d0c7      	beq.n	801655e <rcl_action_wait_set_add_action_server+0x26>
 80165ce:	6823      	ldr	r3, [r4, #0]
 80165d0:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 80165d4:	6033      	str	r3, [r6, #0]
 80165d6:	bd70      	pop	{r4, r5, r6, pc}
 80165d8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80165dc:	4770      	bx	lr
 80165de:	bf00      	nop

080165e0 <rcl_action_server_wait_set_get_entities_ready>:
 80165e0:	2800      	cmp	r0, #0
 80165e2:	d05a      	beq.n	801669a <rcl_action_server_wait_set_get_entities_ready+0xba>
 80165e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80165e6:	460c      	mov	r4, r1
 80165e8:	b161      	cbz	r1, 8016604 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80165ea:	4605      	mov	r5, r0
 80165ec:	6808      	ldr	r0, [r1, #0]
 80165ee:	b148      	cbz	r0, 8016604 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80165f0:	4616      	mov	r6, r2
 80165f2:	461f      	mov	r7, r3
 80165f4:	f7fe f9e0 	bl	80149b8 <rcl_service_is_valid>
 80165f8:	b120      	cbz	r0, 8016604 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80165fa:	6820      	ldr	r0, [r4, #0]
 80165fc:	3004      	adds	r0, #4
 80165fe:	f7fe f9db 	bl	80149b8 <rcl_service_is_valid>
 8016602:	b910      	cbnz	r0, 801660a <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8016604:	f640 0098 	movw	r0, #2200	@ 0x898
 8016608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801660a:	6820      	ldr	r0, [r4, #0]
 801660c:	3008      	adds	r0, #8
 801660e:	f7fe f9d3 	bl	80149b8 <rcl_service_is_valid>
 8016612:	2800      	cmp	r0, #0
 8016614:	d0f6      	beq.n	8016604 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8016616:	6820      	ldr	r0, [r4, #0]
 8016618:	300c      	adds	r0, #12
 801661a:	f7f6 fcb3 	bl	800cf84 <rcl_publisher_is_valid_except_context>
 801661e:	2800      	cmp	r0, #0
 8016620:	d0f0      	beq.n	8016604 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8016622:	6820      	ldr	r0, [r4, #0]
 8016624:	3010      	adds	r0, #16
 8016626:	f7f6 fcad 	bl	800cf84 <rcl_publisher_is_valid_except_context>
 801662a:	2800      	cmp	r0, #0
 801662c:	d0ea      	beq.n	8016604 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801662e:	b3be      	cbz	r6, 80166a0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8016630:	b3b7      	cbz	r7, 80166a0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8016632:	9b06      	ldr	r3, [sp, #24]
 8016634:	b3a3      	cbz	r3, 80166a0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8016636:	9b07      	ldr	r3, [sp, #28]
 8016638:	b393      	cbz	r3, 80166a0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801663a:	6821      	ldr	r1, [r4, #0]
 801663c:	692a      	ldr	r2, [r5, #16]
 801663e:	6a2c      	ldr	r4, [r5, #32]
 8016640:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 8016644:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8016648:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 801664c:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8016650:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 8016654:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8016658:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801665c:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8016660:	1a64      	subs	r4, r4, r1
 8016662:	fab4 f484 	clz	r4, r4
 8016666:	0964      	lsrs	r4, r4, #5
 8016668:	7034      	strb	r4, [r6, #0]
 801666a:	1d0c      	adds	r4, r1, #4
 801666c:	1b1b      	subs	r3, r3, r4
 801666e:	fab3 f383 	clz	r3, r3
 8016672:	095b      	lsrs	r3, r3, #5
 8016674:	f101 0408 	add.w	r4, r1, #8
 8016678:	703b      	strb	r3, [r7, #0]
 801667a:	f101 0314 	add.w	r3, r1, #20
 801667e:	1b01      	subs	r1, r0, r4
 8016680:	1ad3      	subs	r3, r2, r3
 8016682:	fab1 f181 	clz	r1, r1
 8016686:	9a06      	ldr	r2, [sp, #24]
 8016688:	0949      	lsrs	r1, r1, #5
 801668a:	7011      	strb	r1, [r2, #0]
 801668c:	fab3 f383 	clz	r3, r3
 8016690:	9a07      	ldr	r2, [sp, #28]
 8016692:	095b      	lsrs	r3, r3, #5
 8016694:	2000      	movs	r0, #0
 8016696:	7013      	strb	r3, [r2, #0]
 8016698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801669a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801669e:	4770      	bx	lr
 80166a0:	200b      	movs	r0, #11
 80166a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080166a4 <_execute_event_handler>:
 80166a4:	2002      	movs	r0, #2
 80166a6:	4770      	bx	lr

080166a8 <_cancel_goal_event_handler>:
 80166a8:	2003      	movs	r0, #3
 80166aa:	4770      	bx	lr

080166ac <_succeed_event_handler>:
 80166ac:	2004      	movs	r0, #4
 80166ae:	4770      	bx	lr

080166b0 <_abort_event_handler>:
 80166b0:	2006      	movs	r0, #6
 80166b2:	4770      	bx	lr

080166b4 <_canceled_event_handler>:
 80166b4:	2005      	movs	r0, #5
 80166b6:	4770      	bx	lr

080166b8 <rcl_action_transition_goal_state>:
 80166b8:	b2c2      	uxtb	r2, r0
 80166ba:	2a06      	cmp	r2, #6
 80166bc:	d80c      	bhi.n	80166d8 <rcl_action_transition_goal_state+0x20>
 80166be:	2904      	cmp	r1, #4
 80166c0:	d80a      	bhi.n	80166d8 <rcl_action_transition_goal_state+0x20>
 80166c2:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 80166c6:	b410      	push	{r4}
 80166c8:	1853      	adds	r3, r2, r1
 80166ca:	4c06      	ldr	r4, [pc, #24]	@ (80166e4 <rcl_action_transition_goal_state+0x2c>)
 80166cc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80166d0:	b123      	cbz	r3, 80166dc <rcl_action_transition_goal_state+0x24>
 80166d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80166d6:	4718      	bx	r3
 80166d8:	2000      	movs	r0, #0
 80166da:	4770      	bx	lr
 80166dc:	2000      	movs	r0, #0
 80166de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80166e2:	4770      	bx	lr
 80166e4:	0801c438 	.word	0x0801c438

080166e8 <rcl_action_get_zero_initialized_cancel_response>:
 80166e8:	b510      	push	{r4, lr}
 80166ea:	4c07      	ldr	r4, [pc, #28]	@ (8016708 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 80166ec:	4686      	mov	lr, r0
 80166ee:	4684      	mov	ip, r0
 80166f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80166f2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80166f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80166f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80166fc:	6823      	ldr	r3, [r4, #0]
 80166fe:	f8cc 3000 	str.w	r3, [ip]
 8016702:	4670      	mov	r0, lr
 8016704:	bd10      	pop	{r4, pc}
 8016706:	bf00      	nop
 8016708:	0801c4c4 	.word	0x0801c4c4

0801670c <rclc_action_send_result_request>:
 801670c:	b1d0      	cbz	r0, 8016744 <rclc_action_send_result_request+0x38>
 801670e:	b500      	push	{lr}
 8016710:	4684      	mov	ip, r0
 8016712:	b087      	sub	sp, #28
 8016714:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8016718:	f8dc 100d 	ldr.w	r1, [ip, #13]
 801671c:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8016720:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8016724:	f10d 0e08 	add.w	lr, sp, #8
 8016728:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801672c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8016730:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8016734:	a902      	add	r1, sp, #8
 8016736:	3010      	adds	r0, #16
 8016738:	f7ff fbda 	bl	8015ef0 <rcl_action_send_result_request>
 801673c:	b920      	cbnz	r0, 8016748 <rclc_action_send_result_request+0x3c>
 801673e:	b007      	add	sp, #28
 8016740:	f85d fb04 	ldr.w	pc, [sp], #4
 8016744:	200b      	movs	r0, #11
 8016746:	4770      	bx	lr
 8016748:	9001      	str	r0, [sp, #4]
 801674a:	f7f7 fbe9 	bl	800df20 <rcutils_reset_error>
 801674e:	9801      	ldr	r0, [sp, #4]
 8016750:	b007      	add	sp, #28
 8016752:	f85d fb04 	ldr.w	pc, [sp], #4
 8016756:	bf00      	nop

08016758 <rclc_action_take_goal_handle>:
 8016758:	b160      	cbz	r0, 8016774 <rclc_action_take_goal_handle+0x1c>
 801675a:	6883      	ldr	r3, [r0, #8]
 801675c:	b143      	cbz	r3, 8016770 <rclc_action_take_goal_handle+0x18>
 801675e:	6819      	ldr	r1, [r3, #0]
 8016760:	6081      	str	r1, [r0, #8]
 8016762:	2200      	movs	r2, #0
 8016764:	721a      	strb	r2, [r3, #8]
 8016766:	68c1      	ldr	r1, [r0, #12]
 8016768:	6019      	str	r1, [r3, #0]
 801676a:	621a      	str	r2, [r3, #32]
 801676c:	849a      	strh	r2, [r3, #36]	@ 0x24
 801676e:	60c3      	str	r3, [r0, #12]
 8016770:	4618      	mov	r0, r3
 8016772:	4770      	bx	lr
 8016774:	4603      	mov	r3, r0
 8016776:	e7fb      	b.n	8016770 <rclc_action_take_goal_handle+0x18>

08016778 <rclc_action_remove_used_goal_handle>:
 8016778:	b180      	cbz	r0, 801679c <rclc_action_remove_used_goal_handle+0x24>
 801677a:	b179      	cbz	r1, 801679c <rclc_action_remove_used_goal_handle+0x24>
 801677c:	68c3      	ldr	r3, [r0, #12]
 801677e:	4299      	cmp	r1, r3
 8016780:	d00d      	beq.n	801679e <rclc_action_remove_used_goal_handle+0x26>
 8016782:	b12b      	cbz	r3, 8016790 <rclc_action_remove_used_goal_handle+0x18>
 8016784:	681a      	ldr	r2, [r3, #0]
 8016786:	4291      	cmp	r1, r2
 8016788:	d003      	beq.n	8016792 <rclc_action_remove_used_goal_handle+0x1a>
 801678a:	4613      	mov	r3, r2
 801678c:	2b00      	cmp	r3, #0
 801678e:	d1f9      	bne.n	8016784 <rclc_action_remove_used_goal_handle+0xc>
 8016790:	4770      	bx	lr
 8016792:	680a      	ldr	r2, [r1, #0]
 8016794:	601a      	str	r2, [r3, #0]
 8016796:	6883      	ldr	r3, [r0, #8]
 8016798:	600b      	str	r3, [r1, #0]
 801679a:	6081      	str	r1, [r0, #8]
 801679c:	4770      	bx	lr
 801679e:	680b      	ldr	r3, [r1, #0]
 80167a0:	60c3      	str	r3, [r0, #12]
 80167a2:	e7f8      	b.n	8016796 <rclc_action_remove_used_goal_handle+0x1e>

080167a4 <rclc_action_find_goal_handle_by_uuid>:
 80167a4:	b538      	push	{r3, r4, r5, lr}
 80167a6:	b180      	cbz	r0, 80167ca <rclc_action_find_goal_handle_by_uuid+0x26>
 80167a8:	460d      	mov	r5, r1
 80167aa:	b181      	cbz	r1, 80167ce <rclc_action_find_goal_handle_by_uuid+0x2a>
 80167ac:	68c4      	ldr	r4, [r0, #12]
 80167ae:	b914      	cbnz	r4, 80167b6 <rclc_action_find_goal_handle_by_uuid+0x12>
 80167b0:	e009      	b.n	80167c6 <rclc_action_find_goal_handle_by_uuid+0x22>
 80167b2:	6824      	ldr	r4, [r4, #0]
 80167b4:	b13c      	cbz	r4, 80167c6 <rclc_action_find_goal_handle_by_uuid+0x22>
 80167b6:	f104 0009 	add.w	r0, r4, #9
 80167ba:	2210      	movs	r2, #16
 80167bc:	4629      	mov	r1, r5
 80167be:	f003 fa17 	bl	8019bf0 <memcmp>
 80167c2:	2800      	cmp	r0, #0
 80167c4:	d1f5      	bne.n	80167b2 <rclc_action_find_goal_handle_by_uuid+0xe>
 80167c6:	4620      	mov	r0, r4
 80167c8:	bd38      	pop	{r3, r4, r5, pc}
 80167ca:	4604      	mov	r4, r0
 80167cc:	e7fb      	b.n	80167c6 <rclc_action_find_goal_handle_by_uuid+0x22>
 80167ce:	460c      	mov	r4, r1
 80167d0:	e7f9      	b.n	80167c6 <rclc_action_find_goal_handle_by_uuid+0x22>
 80167d2:	bf00      	nop

080167d4 <rclc_action_find_first_handle_by_status>:
 80167d4:	b140      	cbz	r0, 80167e8 <rclc_action_find_first_handle_by_status+0x14>
 80167d6:	68c0      	ldr	r0, [r0, #12]
 80167d8:	b910      	cbnz	r0, 80167e0 <rclc_action_find_first_handle_by_status+0xc>
 80167da:	e005      	b.n	80167e8 <rclc_action_find_first_handle_by_status+0x14>
 80167dc:	6800      	ldr	r0, [r0, #0]
 80167de:	b118      	cbz	r0, 80167e8 <rclc_action_find_first_handle_by_status+0x14>
 80167e0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80167e4:	428b      	cmp	r3, r1
 80167e6:	d1f9      	bne.n	80167dc <rclc_action_find_first_handle_by_status+0x8>
 80167e8:	4770      	bx	lr
 80167ea:	bf00      	nop

080167ec <rclc_action_find_first_terminated_handle>:
 80167ec:	b140      	cbz	r0, 8016800 <rclc_action_find_first_terminated_handle+0x14>
 80167ee:	68c0      	ldr	r0, [r0, #12]
 80167f0:	b910      	cbnz	r0, 80167f8 <rclc_action_find_first_terminated_handle+0xc>
 80167f2:	e005      	b.n	8016800 <rclc_action_find_first_terminated_handle+0x14>
 80167f4:	6800      	ldr	r0, [r0, #0]
 80167f6:	b118      	cbz	r0, 8016800 <rclc_action_find_first_terminated_handle+0x14>
 80167f8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80167fc:	2b03      	cmp	r3, #3
 80167fe:	ddf9      	ble.n	80167f4 <rclc_action_find_first_terminated_handle+0x8>
 8016800:	4770      	bx	lr
 8016802:	bf00      	nop

08016804 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8016804:	b170      	cbz	r0, 8016824 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8016806:	68c0      	ldr	r0, [r0, #12]
 8016808:	b160      	cbz	r0, 8016824 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801680a:	b410      	push	{r4}
 801680c:	e001      	b.n	8016812 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 801680e:	6800      	ldr	r0, [r0, #0]
 8016810:	b128      	cbz	r0, 801681e <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8016812:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8016816:	4299      	cmp	r1, r3
 8016818:	bf08      	it	eq
 801681a:	4294      	cmpeq	r4, r2
 801681c:	d1f7      	bne.n	801680e <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 801681e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016822:	4770      	bx	lr
 8016824:	4770      	bx	lr
 8016826:	bf00      	nop

08016828 <rclc_action_find_handle_by_result_request_sequence_number>:
 8016828:	b170      	cbz	r0, 8016848 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801682a:	68c0      	ldr	r0, [r0, #12]
 801682c:	b160      	cbz	r0, 8016848 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801682e:	b410      	push	{r4}
 8016830:	e001      	b.n	8016836 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8016832:	6800      	ldr	r0, [r0, #0]
 8016834:	b128      	cbz	r0, 8016842 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8016836:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 801683a:	4299      	cmp	r1, r3
 801683c:	bf08      	it	eq
 801683e:	4294      	cmpeq	r4, r2
 8016840:	d1f7      	bne.n	8016832 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8016842:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016846:	4770      	bx	lr
 8016848:	4770      	bx	lr
 801684a:	bf00      	nop

0801684c <rclc_action_find_handle_by_cancel_request_sequence_number>:
 801684c:	b170      	cbz	r0, 801686c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801684e:	68c0      	ldr	r0, [r0, #12]
 8016850:	b160      	cbz	r0, 801686c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8016852:	b410      	push	{r4}
 8016854:	e001      	b.n	801685a <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8016856:	6800      	ldr	r0, [r0, #0]
 8016858:	b128      	cbz	r0, 8016866 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 801685a:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 801685e:	4299      	cmp	r1, r3
 8016860:	bf08      	it	eq
 8016862:	4294      	cmpeq	r4, r2
 8016864:	d1f7      	bne.n	8016856 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8016866:	f85d 4b04 	ldr.w	r4, [sp], #4
 801686a:	4770      	bx	lr
 801686c:	4770      	bx	lr
 801686e:	bf00      	nop

08016870 <rclc_action_find_first_handle_with_goal_response>:
 8016870:	b140      	cbz	r0, 8016884 <rclc_action_find_first_handle_with_goal_response+0x14>
 8016872:	68c0      	ldr	r0, [r0, #12]
 8016874:	b910      	cbnz	r0, 801687c <rclc_action_find_first_handle_with_goal_response+0xc>
 8016876:	e005      	b.n	8016884 <rclc_action_find_first_handle_with_goal_response+0x14>
 8016878:	6800      	ldr	r0, [r0, #0]
 801687a:	b118      	cbz	r0, 8016884 <rclc_action_find_first_handle_with_goal_response+0x14>
 801687c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8016880:	2b00      	cmp	r3, #0
 8016882:	d0f9      	beq.n	8016878 <rclc_action_find_first_handle_with_goal_response+0x8>
 8016884:	4770      	bx	lr
 8016886:	bf00      	nop

08016888 <rclc_action_find_first_handle_with_result_response>:
 8016888:	b140      	cbz	r0, 801689c <rclc_action_find_first_handle_with_result_response+0x14>
 801688a:	68c0      	ldr	r0, [r0, #12]
 801688c:	b910      	cbnz	r0, 8016894 <rclc_action_find_first_handle_with_result_response+0xc>
 801688e:	e005      	b.n	801689c <rclc_action_find_first_handle_with_result_response+0x14>
 8016890:	6800      	ldr	r0, [r0, #0]
 8016892:	b118      	cbz	r0, 801689c <rclc_action_find_first_handle_with_result_response+0x14>
 8016894:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8016898:	2b00      	cmp	r3, #0
 801689a:	d0f9      	beq.n	8016890 <rclc_action_find_first_handle_with_result_response+0x8>
 801689c:	4770      	bx	lr
 801689e:	bf00      	nop

080168a0 <rclc_action_server_response_goal_request>:
 80168a0:	b198      	cbz	r0, 80168ca <rclc_action_server_response_goal_request+0x2a>
 80168a2:	b510      	push	{r4, lr}
 80168a4:	6844      	ldr	r4, [r0, #4]
 80168a6:	b086      	sub	sp, #24
 80168a8:	2200      	movs	r2, #0
 80168aa:	e9cd 2203 	strd	r2, r2, [sp, #12]
 80168ae:	460b      	mov	r3, r1
 80168b0:	9205      	str	r2, [sp, #20]
 80168b2:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 80168b6:	aa03      	add	r2, sp, #12
 80168b8:	f104 0010 	add.w	r0, r4, #16
 80168bc:	f88d 300c 	strb.w	r3, [sp, #12]
 80168c0:	f7ff fd4a 	bl	8016358 <rcl_action_send_goal_response>
 80168c4:	b918      	cbnz	r0, 80168ce <rclc_action_server_response_goal_request+0x2e>
 80168c6:	b006      	add	sp, #24
 80168c8:	bd10      	pop	{r4, pc}
 80168ca:	200b      	movs	r0, #11
 80168cc:	4770      	bx	lr
 80168ce:	9001      	str	r0, [sp, #4]
 80168d0:	f7f7 fb26 	bl	800df20 <rcutils_reset_error>
 80168d4:	9801      	ldr	r0, [sp, #4]
 80168d6:	b006      	add	sp, #24
 80168d8:	bd10      	pop	{r4, pc}
 80168da:	bf00      	nop
 80168dc:	0000      	movs	r0, r0
	...

080168e0 <rclc_action_server_goal_cancel_accept>:
 80168e0:	b310      	cbz	r0, 8016928 <rclc_action_server_goal_cancel_accept+0x48>
 80168e2:	b510      	push	{r4, lr}
 80168e4:	b090      	sub	sp, #64	@ 0x40
 80168e6:	4604      	mov	r4, r0
 80168e8:	a806      	add	r0, sp, #24
 80168ea:	f7ff fefd 	bl	80166e8 <rcl_action_get_zero_initialized_cancel_response>
 80168ee:	2300      	movs	r3, #0
 80168f0:	f8d4 0009 	ldr.w	r0, [r4, #9]
 80168f4:	f8d4 100d 	ldr.w	r1, [r4, #13]
 80168f8:	f8d4 2011 	ldr.w	r2, [r4, #17]
 80168fc:	f88d 3018 	strb.w	r3, [sp, #24]
 8016900:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8016904:	f8cd d01c 	str.w	sp, [sp, #28]
 8016908:	46ec      	mov	ip, sp
 801690a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801690e:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8016930 <rclc_action_server_goal_cancel_accept+0x50>
 8016912:	6860      	ldr	r0, [r4, #4]
 8016914:	aa06      	add	r2, sp, #24
 8016916:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 801691a:	3010      	adds	r0, #16
 801691c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8016920:	f7ff fdd2 	bl	80164c8 <rcl_action_send_cancel_response>
 8016924:	b010      	add	sp, #64	@ 0x40
 8016926:	bd10      	pop	{r4, pc}
 8016928:	200b      	movs	r0, #11
 801692a:	4770      	bx	lr
 801692c:	f3af 8000 	nop.w
 8016930:	00000001 	.word	0x00000001
 8016934:	00000001 	.word	0x00000001

08016938 <rclc_action_server_goal_cancel_reject>:
 8016938:	b082      	sub	sp, #8
 801693a:	b530      	push	{r4, r5, lr}
 801693c:	b08b      	sub	sp, #44	@ 0x2c
 801693e:	ac0e      	add	r4, sp, #56	@ 0x38
 8016940:	e884 000c 	stmia.w	r4, {r2, r3}
 8016944:	b188      	cbz	r0, 801696a <rclc_action_server_goal_cancel_reject+0x32>
 8016946:	4604      	mov	r4, r0
 8016948:	a801      	add	r0, sp, #4
 801694a:	460d      	mov	r5, r1
 801694c:	f7ff fecc 	bl	80166e8 <rcl_action_get_zero_initialized_cancel_response>
 8016950:	aa01      	add	r2, sp, #4
 8016952:	a90e      	add	r1, sp, #56	@ 0x38
 8016954:	f104 0010 	add.w	r0, r4, #16
 8016958:	f88d 5004 	strb.w	r5, [sp, #4]
 801695c:	f7ff fdb4 	bl	80164c8 <rcl_action_send_cancel_response>
 8016960:	b00b      	add	sp, #44	@ 0x2c
 8016962:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016966:	b002      	add	sp, #8
 8016968:	4770      	bx	lr
 801696a:	200b      	movs	r0, #11
 801696c:	b00b      	add	sp, #44	@ 0x2c
 801696e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016972:	b002      	add	sp, #8
 8016974:	4770      	bx	lr
 8016976:	bf00      	nop

08016978 <__atomic_load_8>:
 8016978:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 801697c:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8016980:	4a15      	ldr	r2, [pc, #84]	@ (80169d8 <__atomic_load_8+0x60>)
 8016982:	4b16      	ldr	r3, [pc, #88]	@ (80169dc <__atomic_load_8+0x64>)
 8016984:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8016988:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801698c:	fb02 f101 	mul.w	r1, r2, r1
 8016990:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8016994:	fba3 2301 	umull	r2, r3, r3, r1
 8016998:	091b      	lsrs	r3, r3, #4
 801699a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801699e:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 80169a2:	b4d0      	push	{r4, r6, r7}
 80169a4:	4c0e      	ldr	r4, [pc, #56]	@ (80169e0 <__atomic_load_8+0x68>)
 80169a6:	1ac9      	subs	r1, r1, r3
 80169a8:	1862      	adds	r2, r4, r1
 80169aa:	f04f 0c01 	mov.w	ip, #1
 80169ae:	e8d2 3f4f 	ldrexb	r3, [r2]
 80169b2:	e8c2 cf46 	strexb	r6, ip, [r2]
 80169b6:	2e00      	cmp	r6, #0
 80169b8:	d1f9      	bne.n	80169ae <__atomic_load_8+0x36>
 80169ba:	f3bf 8f5b 	dmb	ish
 80169be:	b2db      	uxtb	r3, r3
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	d1f4      	bne.n	80169ae <__atomic_load_8+0x36>
 80169c4:	e9d0 6700 	ldrd	r6, r7, [r0]
 80169c8:	f3bf 8f5b 	dmb	ish
 80169cc:	5463      	strb	r3, [r4, r1]
 80169ce:	4630      	mov	r0, r6
 80169d0:	4639      	mov	r1, r7
 80169d2:	bcd0      	pop	{r4, r6, r7}
 80169d4:	4770      	bx	lr
 80169d6:	bf00      	nop
 80169d8:	27d4eb2d 	.word	0x27d4eb2d
 80169dc:	b21642c9 	.word	0xb21642c9
 80169e0:	2000bb08 	.word	0x2000bb08

080169e4 <__atomic_store_8>:
 80169e4:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80169e8:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 80169ec:	b570      	push	{r4, r5, r6, lr}
 80169ee:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80169f2:	4c14      	ldr	r4, [pc, #80]	@ (8016a44 <__atomic_store_8+0x60>)
 80169f4:	4d14      	ldr	r5, [pc, #80]	@ (8016a48 <__atomic_store_8+0x64>)
 80169f6:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80169fa:	fb04 f101 	mul.w	r1, r4, r1
 80169fe:	4c13      	ldr	r4, [pc, #76]	@ (8016a4c <__atomic_store_8+0x68>)
 8016a00:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8016a04:	fba4 4e01 	umull	r4, lr, r4, r1
 8016a08:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8016a0c:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8016a10:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 8016a14:	eba1 0e0e 	sub.w	lr, r1, lr
 8016a18:	eb05 0c0e 	add.w	ip, r5, lr
 8016a1c:	f04f 0401 	mov.w	r4, #1
 8016a20:	e8dc 1f4f 	ldrexb	r1, [ip]
 8016a24:	e8cc 4f46 	strexb	r6, r4, [ip]
 8016a28:	2e00      	cmp	r6, #0
 8016a2a:	d1f9      	bne.n	8016a20 <__atomic_store_8+0x3c>
 8016a2c:	f3bf 8f5b 	dmb	ish
 8016a30:	b2c9      	uxtb	r1, r1
 8016a32:	2900      	cmp	r1, #0
 8016a34:	d1f4      	bne.n	8016a20 <__atomic_store_8+0x3c>
 8016a36:	e9c0 2300 	strd	r2, r3, [r0]
 8016a3a:	f3bf 8f5b 	dmb	ish
 8016a3e:	f805 100e 	strb.w	r1, [r5, lr]
 8016a42:	bd70      	pop	{r4, r5, r6, pc}
 8016a44:	27d4eb2d 	.word	0x27d4eb2d
 8016a48:	2000bb08 	.word	0x2000bb08
 8016a4c:	b21642c9 	.word	0xb21642c9

08016a50 <__atomic_exchange_8>:
 8016a50:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8016a54:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8016a58:	4916      	ldr	r1, [pc, #88]	@ (8016ab4 <__atomic_exchange_8+0x64>)
 8016a5a:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8016a5e:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8016a62:	fb01 fc0c 	mul.w	ip, r1, ip
 8016a66:	4914      	ldr	r1, [pc, #80]	@ (8016ab8 <__atomic_exchange_8+0x68>)
 8016a68:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8016a6c:	b570      	push	{r4, r5, r6, lr}
 8016a6e:	4605      	mov	r5, r0
 8016a70:	fba1 010c 	umull	r0, r1, r1, ip
 8016a74:	0909      	lsrs	r1, r1, #4
 8016a76:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8016a7a:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8016a7e:	4e0f      	ldr	r6, [pc, #60]	@ (8016abc <__atomic_exchange_8+0x6c>)
 8016a80:	ebac 0c01 	sub.w	ip, ip, r1
 8016a84:	eb06 010c 	add.w	r1, r6, ip
 8016a88:	f04f 0e01 	mov.w	lr, #1
 8016a8c:	e8d1 4f4f 	ldrexb	r4, [r1]
 8016a90:	e8c1 ef40 	strexb	r0, lr, [r1]
 8016a94:	2800      	cmp	r0, #0
 8016a96:	d1f9      	bne.n	8016a8c <__atomic_exchange_8+0x3c>
 8016a98:	f3bf 8f5b 	dmb	ish
 8016a9c:	b2e4      	uxtb	r4, r4
 8016a9e:	2c00      	cmp	r4, #0
 8016aa0:	d1f4      	bne.n	8016a8c <__atomic_exchange_8+0x3c>
 8016aa2:	e9d5 0100 	ldrd	r0, r1, [r5]
 8016aa6:	e9c5 2300 	strd	r2, r3, [r5]
 8016aaa:	f3bf 8f5b 	dmb	ish
 8016aae:	f806 400c 	strb.w	r4, [r6, ip]
 8016ab2:	bd70      	pop	{r4, r5, r6, pc}
 8016ab4:	27d4eb2d 	.word	0x27d4eb2d
 8016ab8:	b21642c9 	.word	0xb21642c9
 8016abc:	2000bb08 	.word	0x2000bb08

08016ac0 <rcutils_get_env>:
 8016ac0:	b168      	cbz	r0, 8016ade <rcutils_get_env+0x1e>
 8016ac2:	b510      	push	{r4, lr}
 8016ac4:	460c      	mov	r4, r1
 8016ac6:	b129      	cbz	r1, 8016ad4 <rcutils_get_env+0x14>
 8016ac8:	f002 fc00 	bl	80192cc <getenv>
 8016acc:	b120      	cbz	r0, 8016ad8 <rcutils_get_env+0x18>
 8016ace:	6020      	str	r0, [r4, #0]
 8016ad0:	2000      	movs	r0, #0
 8016ad2:	bd10      	pop	{r4, pc}
 8016ad4:	4803      	ldr	r0, [pc, #12]	@ (8016ae4 <rcutils_get_env+0x24>)
 8016ad6:	bd10      	pop	{r4, pc}
 8016ad8:	4b03      	ldr	r3, [pc, #12]	@ (8016ae8 <rcutils_get_env+0x28>)
 8016ada:	6023      	str	r3, [r4, #0]
 8016adc:	bd10      	pop	{r4, pc}
 8016ade:	4803      	ldr	r0, [pc, #12]	@ (8016aec <rcutils_get_env+0x2c>)
 8016ae0:	4770      	bx	lr
 8016ae2:	bf00      	nop
 8016ae4:	0801c504 	.word	0x0801c504
 8016ae8:	0801c8dc 	.word	0x0801c8dc
 8016aec:	0801c4e8 	.word	0x0801c4e8

08016af0 <rcutils_is_directory>:
 8016af0:	2000      	movs	r0, #0
 8016af2:	4770      	bx	lr

08016af4 <rcutils_join_path>:
 8016af4:	b082      	sub	sp, #8
 8016af6:	e88d 000c 	stmia.w	sp, {r2, r3}
 8016afa:	2000      	movs	r0, #0
 8016afc:	b002      	add	sp, #8
 8016afe:	4770      	bx	lr

08016b00 <rcutils_to_native_path>:
 8016b00:	b084      	sub	sp, #16
 8016b02:	a801      	add	r0, sp, #4
 8016b04:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8016b08:	b004      	add	sp, #16
 8016b0a:	2000      	movs	r0, #0
 8016b0c:	4770      	bx	lr
 8016b0e:	bf00      	nop

08016b10 <rcutils_format_string_limit>:
 8016b10:	b40f      	push	{r0, r1, r2, r3}
 8016b12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016b14:	b083      	sub	sp, #12
 8016b16:	ac08      	add	r4, sp, #32
 8016b18:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8016b1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8016b1e:	b34e      	cbz	r6, 8016b74 <rcutils_format_string_limit+0x64>
 8016b20:	a808      	add	r0, sp, #32
 8016b22:	f7f7 f9d7 	bl	800ded4 <rcutils_allocator_is_valid>
 8016b26:	b328      	cbz	r0, 8016b74 <rcutils_format_string_limit+0x64>
 8016b28:	2100      	movs	r1, #0
 8016b2a:	ab0f      	add	r3, sp, #60	@ 0x3c
 8016b2c:	4632      	mov	r2, r6
 8016b2e:	4608      	mov	r0, r1
 8016b30:	e9cd 3300 	strd	r3, r3, [sp]
 8016b34:	f000 f8f4 	bl	8016d20 <rcutils_vsnprintf>
 8016b38:	1c43      	adds	r3, r0, #1
 8016b3a:	4605      	mov	r5, r0
 8016b3c:	d01a      	beq.n	8016b74 <rcutils_format_string_limit+0x64>
 8016b3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016b40:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016b42:	1c47      	adds	r7, r0, #1
 8016b44:	429f      	cmp	r7, r3
 8016b46:	bf84      	itt	hi
 8016b48:	461f      	movhi	r7, r3
 8016b4a:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8016b4e:	4638      	mov	r0, r7
 8016b50:	9b08      	ldr	r3, [sp, #32]
 8016b52:	4798      	blx	r3
 8016b54:	4604      	mov	r4, r0
 8016b56:	b168      	cbz	r0, 8016b74 <rcutils_format_string_limit+0x64>
 8016b58:	9b01      	ldr	r3, [sp, #4]
 8016b5a:	4632      	mov	r2, r6
 8016b5c:	4639      	mov	r1, r7
 8016b5e:	f000 f8df 	bl	8016d20 <rcutils_vsnprintf>
 8016b62:	2800      	cmp	r0, #0
 8016b64:	db02      	blt.n	8016b6c <rcutils_format_string_limit+0x5c>
 8016b66:	2300      	movs	r3, #0
 8016b68:	5563      	strb	r3, [r4, r5]
 8016b6a:	e004      	b.n	8016b76 <rcutils_format_string_limit+0x66>
 8016b6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016b6e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016b70:	4620      	mov	r0, r4
 8016b72:	4798      	blx	r3
 8016b74:	2400      	movs	r4, #0
 8016b76:	4620      	mov	r0, r4
 8016b78:	b003      	add	sp, #12
 8016b7a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016b7e:	b004      	add	sp, #16
 8016b80:	4770      	bx	lr
 8016b82:	bf00      	nop

08016b84 <rcutils_repl_str>:
 8016b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b88:	ed2d 8b02 	vpush	{d8}
 8016b8c:	b087      	sub	sp, #28
 8016b8e:	4680      	mov	r8, r0
 8016b90:	4608      	mov	r0, r1
 8016b92:	f8cd 8004 	str.w	r8, [sp, #4]
 8016b96:	ee08 2a10 	vmov	s16, r2
 8016b9a:	468a      	mov	sl, r1
 8016b9c:	4699      	mov	r9, r3
 8016b9e:	f7e9 fb49 	bl	8000234 <strlen>
 8016ba2:	2600      	movs	r6, #0
 8016ba4:	4647      	mov	r7, r8
 8016ba6:	9002      	str	r0, [sp, #8]
 8016ba8:	46b3      	mov	fp, r6
 8016baa:	2510      	movs	r5, #16
 8016bac:	46b0      	mov	r8, r6
 8016bae:	e01d      	b.n	8016bec <rcutils_repl_str+0x68>
 8016bb0:	f10b 0b01 	add.w	fp, fp, #1
 8016bb4:	455e      	cmp	r6, fp
 8016bb6:	d211      	bcs.n	8016bdc <rcutils_repl_str+0x58>
 8016bb8:	442e      	add	r6, r5
 8016bba:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8016bbe:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8016bc2:	00b1      	lsls	r1, r6, #2
 8016bc4:	4798      	blx	r3
 8016bc6:	2800      	cmp	r0, #0
 8016bc8:	f000 8088 	beq.w	8016cdc <rcutils_repl_str+0x158>
 8016bcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016bd0:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8016bd4:	4680      	mov	r8, r0
 8016bd6:	bf28      	it	cs
 8016bd8:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8016bdc:	9a01      	ldr	r2, [sp, #4]
 8016bde:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8016be2:	1aa2      	subs	r2, r4, r2
 8016be4:	f843 2c04 	str.w	r2, [r3, #-4]
 8016be8:	9b02      	ldr	r3, [sp, #8]
 8016bea:	18e7      	adds	r7, r4, r3
 8016bec:	4651      	mov	r1, sl
 8016bee:	4638      	mov	r0, r7
 8016bf0:	f003 f84f 	bl	8019c92 <strstr>
 8016bf4:	4604      	mov	r4, r0
 8016bf6:	4640      	mov	r0, r8
 8016bf8:	2c00      	cmp	r4, #0
 8016bfa:	d1d9      	bne.n	8016bb0 <rcutils_repl_str+0x2c>
 8016bfc:	46b8      	mov	r8, r7
 8016bfe:	4607      	mov	r7, r0
 8016c00:	4640      	mov	r0, r8
 8016c02:	f7e9 fb17 	bl	8000234 <strlen>
 8016c06:	9b01      	ldr	r3, [sp, #4]
 8016c08:	eba8 0303 	sub.w	r3, r8, r3
 8016c0c:	181c      	adds	r4, r3, r0
 8016c0e:	9404      	str	r4, [sp, #16]
 8016c10:	f1bb 0f00 	cmp.w	fp, #0
 8016c14:	d04a      	beq.n	8016cac <rcutils_repl_str+0x128>
 8016c16:	ee18 0a10 	vmov	r0, s16
 8016c1a:	f7e9 fb0b 	bl	8000234 <strlen>
 8016c1e:	9b02      	ldr	r3, [sp, #8]
 8016c20:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8016c24:	1ac3      	subs	r3, r0, r3
 8016c26:	fb0b 4303 	mla	r3, fp, r3, r4
 8016c2a:	461a      	mov	r2, r3
 8016c2c:	9305      	str	r3, [sp, #20]
 8016c2e:	4606      	mov	r6, r0
 8016c30:	f8d9 3000 	ldr.w	r3, [r9]
 8016c34:	1c50      	adds	r0, r2, #1
 8016c36:	4798      	blx	r3
 8016c38:	9003      	str	r0, [sp, #12]
 8016c3a:	2800      	cmp	r0, #0
 8016c3c:	d04f      	beq.n	8016cde <rcutils_repl_str+0x15a>
 8016c3e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016c42:	683a      	ldr	r2, [r7, #0]
 8016c44:	4641      	mov	r1, r8
 8016c46:	f003 f8c6 	bl	8019dd6 <memcpy>
 8016c4a:	683d      	ldr	r5, [r7, #0]
 8016c4c:	9b03      	ldr	r3, [sp, #12]
 8016c4e:	9701      	str	r7, [sp, #4]
 8016c50:	46ba      	mov	sl, r7
 8016c52:	441d      	add	r5, r3
 8016c54:	9f02      	ldr	r7, [sp, #8]
 8016c56:	f8cd 9008 	str.w	r9, [sp, #8]
 8016c5a:	2401      	movs	r4, #1
 8016c5c:	46d1      	mov	r9, sl
 8016c5e:	ee18 aa10 	vmov	sl, s16
 8016c62:	e00a      	b.n	8016c7a <rcutils_repl_str+0xf6>
 8016c64:	f8d9 5000 	ldr.w	r5, [r9]
 8016c68:	1aaa      	subs	r2, r5, r2
 8016c6a:	1885      	adds	r5, r0, r2
 8016c6c:	f003 f8b3 	bl	8019dd6 <memcpy>
 8016c70:	45a3      	cmp	fp, r4
 8016c72:	f104 0201 	add.w	r2, r4, #1
 8016c76:	d935      	bls.n	8016ce4 <rcutils_repl_str+0x160>
 8016c78:	4614      	mov	r4, r2
 8016c7a:	4632      	mov	r2, r6
 8016c7c:	4651      	mov	r1, sl
 8016c7e:	4628      	mov	r0, r5
 8016c80:	f003 f8a9 	bl	8019dd6 <memcpy>
 8016c84:	f859 2b04 	ldr.w	r2, [r9], #4
 8016c88:	45a3      	cmp	fp, r4
 8016c8a:	443a      	add	r2, r7
 8016c8c:	eb05 0006 	add.w	r0, r5, r6
 8016c90:	eb08 0102 	add.w	r1, r8, r2
 8016c94:	d1e6      	bne.n	8016c64 <rcutils_repl_str+0xe0>
 8016c96:	9b04      	ldr	r3, [sp, #16]
 8016c98:	1a9a      	subs	r2, r3, r2
 8016c9a:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8016c9e:	f003 f89a 	bl	8019dd6 <memcpy>
 8016ca2:	9a03      	ldr	r2, [sp, #12]
 8016ca4:	9905      	ldr	r1, [sp, #20]
 8016ca6:	2300      	movs	r3, #0
 8016ca8:	5453      	strb	r3, [r2, r1]
 8016caa:	e00b      	b.n	8016cc4 <rcutils_repl_str+0x140>
 8016cac:	4620      	mov	r0, r4
 8016cae:	f8d9 3000 	ldr.w	r3, [r9]
 8016cb2:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8016cb6:	3001      	adds	r0, #1
 8016cb8:	4798      	blx	r3
 8016cba:	9003      	str	r0, [sp, #12]
 8016cbc:	b110      	cbz	r0, 8016cc4 <rcutils_repl_str+0x140>
 8016cbe:	9901      	ldr	r1, [sp, #4]
 8016cc0:	f003 f881 	bl	8019dc6 <strcpy>
 8016cc4:	4638      	mov	r0, r7
 8016cc6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8016cca:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8016cce:	4798      	blx	r3
 8016cd0:	9803      	ldr	r0, [sp, #12]
 8016cd2:	b007      	add	sp, #28
 8016cd4:	ecbd 8b02 	vpop	{d8}
 8016cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016cdc:	4647      	mov	r7, r8
 8016cde:	2300      	movs	r3, #0
 8016ce0:	9303      	str	r3, [sp, #12]
 8016ce2:	e7ef      	b.n	8016cc4 <rcutils_repl_str+0x140>
 8016ce4:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8016ce8:	e7db      	b.n	8016ca2 <rcutils_repl_str+0x11e>
 8016cea:	bf00      	nop

08016cec <rcutils_snprintf>:
 8016cec:	b40c      	push	{r2, r3}
 8016cee:	b530      	push	{r4, r5, lr}
 8016cf0:	b083      	sub	sp, #12
 8016cf2:	ab06      	add	r3, sp, #24
 8016cf4:	f853 2b04 	ldr.w	r2, [r3], #4
 8016cf8:	9301      	str	r3, [sp, #4]
 8016cfa:	b152      	cbz	r2, 8016d12 <rcutils_snprintf+0x26>
 8016cfc:	b138      	cbz	r0, 8016d0e <rcutils_snprintf+0x22>
 8016cfe:	b141      	cbz	r1, 8016d12 <rcutils_snprintf+0x26>
 8016d00:	f002 fed4 	bl	8019aac <vsniprintf>
 8016d04:	b003      	add	sp, #12
 8016d06:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016d0a:	b002      	add	sp, #8
 8016d0c:	4770      	bx	lr
 8016d0e:	2900      	cmp	r1, #0
 8016d10:	d0f6      	beq.n	8016d00 <rcutils_snprintf+0x14>
 8016d12:	f003 f82b 	bl	8019d6c <__errno>
 8016d16:	2316      	movs	r3, #22
 8016d18:	6003      	str	r3, [r0, #0]
 8016d1a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016d1e:	e7f1      	b.n	8016d04 <rcutils_snprintf+0x18>

08016d20 <rcutils_vsnprintf>:
 8016d20:	b570      	push	{r4, r5, r6, lr}
 8016d22:	b13a      	cbz	r2, 8016d34 <rcutils_vsnprintf+0x14>
 8016d24:	b120      	cbz	r0, 8016d30 <rcutils_vsnprintf+0x10>
 8016d26:	b129      	cbz	r1, 8016d34 <rcutils_vsnprintf+0x14>
 8016d28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016d2c:	f002 bebe 	b.w	8019aac <vsniprintf>
 8016d30:	2900      	cmp	r1, #0
 8016d32:	d0f9      	beq.n	8016d28 <rcutils_vsnprintf+0x8>
 8016d34:	f003 f81a 	bl	8019d6c <__errno>
 8016d38:	2316      	movs	r3, #22
 8016d3a:	6003      	str	r3, [r0, #0]
 8016d3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016d40:	bd70      	pop	{r4, r5, r6, pc}
 8016d42:	bf00      	nop

08016d44 <rcutils_strdup>:
 8016d44:	b084      	sub	sp, #16
 8016d46:	b570      	push	{r4, r5, r6, lr}
 8016d48:	b082      	sub	sp, #8
 8016d4a:	ac07      	add	r4, sp, #28
 8016d4c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8016d50:	4605      	mov	r5, r0
 8016d52:	b1b0      	cbz	r0, 8016d82 <rcutils_strdup+0x3e>
 8016d54:	f7e9 fa6e 	bl	8000234 <strlen>
 8016d58:	1c42      	adds	r2, r0, #1
 8016d5a:	9b07      	ldr	r3, [sp, #28]
 8016d5c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8016d5e:	9201      	str	r2, [sp, #4]
 8016d60:	4606      	mov	r6, r0
 8016d62:	4610      	mov	r0, r2
 8016d64:	4798      	blx	r3
 8016d66:	4604      	mov	r4, r0
 8016d68:	b128      	cbz	r0, 8016d76 <rcutils_strdup+0x32>
 8016d6a:	9a01      	ldr	r2, [sp, #4]
 8016d6c:	4629      	mov	r1, r5
 8016d6e:	f003 f832 	bl	8019dd6 <memcpy>
 8016d72:	2300      	movs	r3, #0
 8016d74:	55a3      	strb	r3, [r4, r6]
 8016d76:	4620      	mov	r0, r4
 8016d78:	b002      	add	sp, #8
 8016d7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016d7e:	b004      	add	sp, #16
 8016d80:	4770      	bx	lr
 8016d82:	4604      	mov	r4, r0
 8016d84:	e7f7      	b.n	8016d76 <rcutils_strdup+0x32>
 8016d86:	bf00      	nop

08016d88 <rcutils_strndup>:
 8016d88:	b082      	sub	sp, #8
 8016d8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d8c:	ac06      	add	r4, sp, #24
 8016d8e:	e884 000c 	stmia.w	r4, {r2, r3}
 8016d92:	4605      	mov	r5, r0
 8016d94:	b188      	cbz	r0, 8016dba <rcutils_strndup+0x32>
 8016d96:	1c4f      	adds	r7, r1, #1
 8016d98:	460e      	mov	r6, r1
 8016d9a:	4638      	mov	r0, r7
 8016d9c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016d9e:	4790      	blx	r2
 8016da0:	4604      	mov	r4, r0
 8016da2:	b128      	cbz	r0, 8016db0 <rcutils_strndup+0x28>
 8016da4:	463a      	mov	r2, r7
 8016da6:	4629      	mov	r1, r5
 8016da8:	f003 f815 	bl	8019dd6 <memcpy>
 8016dac:	2300      	movs	r3, #0
 8016dae:	55a3      	strb	r3, [r4, r6]
 8016db0:	4620      	mov	r0, r4
 8016db2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016db6:	b002      	add	sp, #8
 8016db8:	4770      	bx	lr
 8016dba:	4604      	mov	r4, r0
 8016dbc:	e7f8      	b.n	8016db0 <rcutils_strndup+0x28>
 8016dbe:	bf00      	nop

08016dc0 <rcutils_get_zero_initialized_string_map>:
 8016dc0:	4b01      	ldr	r3, [pc, #4]	@ (8016dc8 <rcutils_get_zero_initialized_string_map+0x8>)
 8016dc2:	2000      	movs	r0, #0
 8016dc4:	6018      	str	r0, [r3, #0]
 8016dc6:	4770      	bx	lr
 8016dc8:	2000bb20 	.word	0x2000bb20

08016dcc <rcutils_string_map_reserve>:
 8016dcc:	2800      	cmp	r0, #0
 8016dce:	d05f      	beq.n	8016e90 <rcutils_string_map_reserve+0xc4>
 8016dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016dd4:	460c      	mov	r4, r1
 8016dd6:	6801      	ldr	r1, [r0, #0]
 8016dd8:	b082      	sub	sp, #8
 8016dda:	4605      	mov	r5, r0
 8016ddc:	b129      	cbz	r1, 8016dea <rcutils_string_map_reserve+0x1e>
 8016dde:	68cb      	ldr	r3, [r1, #12]
 8016de0:	42a3      	cmp	r3, r4
 8016de2:	d906      	bls.n	8016df2 <rcutils_string_map_reserve+0x26>
 8016de4:	461c      	mov	r4, r3
 8016de6:	2900      	cmp	r1, #0
 8016de8:	d1f9      	bne.n	8016dde <rcutils_string_map_reserve+0x12>
 8016dea:	201f      	movs	r0, #31
 8016dec:	b002      	add	sp, #8
 8016dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016df2:	688b      	ldr	r3, [r1, #8]
 8016df4:	42a3      	cmp	r3, r4
 8016df6:	d047      	beq.n	8016e88 <rcutils_string_map_reserve+0xbc>
 8016df8:	6a0e      	ldr	r6, [r1, #32]
 8016dfa:	2c00      	cmp	r4, #0
 8016dfc:	d034      	beq.n	8016e68 <rcutils_string_map_reserve+0x9c>
 8016dfe:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8016e02:	d243      	bcs.n	8016e8c <rcutils_string_map_reserve+0xc0>
 8016e04:	00a7      	lsls	r7, r4, #2
 8016e06:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8016e0a:	6808      	ldr	r0, [r1, #0]
 8016e0c:	4632      	mov	r2, r6
 8016e0e:	4639      	mov	r1, r7
 8016e10:	47c0      	blx	r8
 8016e12:	2800      	cmp	r0, #0
 8016e14:	d03a      	beq.n	8016e8c <rcutils_string_map_reserve+0xc0>
 8016e16:	682b      	ldr	r3, [r5, #0]
 8016e18:	4632      	mov	r2, r6
 8016e1a:	6018      	str	r0, [r3, #0]
 8016e1c:	4639      	mov	r1, r7
 8016e1e:	6858      	ldr	r0, [r3, #4]
 8016e20:	47c0      	blx	r8
 8016e22:	2800      	cmp	r0, #0
 8016e24:	d032      	beq.n	8016e8c <rcutils_string_map_reserve+0xc0>
 8016e26:	682d      	ldr	r5, [r5, #0]
 8016e28:	68ab      	ldr	r3, [r5, #8]
 8016e2a:	6068      	str	r0, [r5, #4]
 8016e2c:	42a3      	cmp	r3, r4
 8016e2e:	d226      	bcs.n	8016e7e <rcutils_string_map_reserve+0xb2>
 8016e30:	682a      	ldr	r2, [r5, #0]
 8016e32:	eb00 0c07 	add.w	ip, r0, r7
 8016e36:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8016e3a:	45e6      	cmp	lr, ip
 8016e3c:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8016e40:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8016e44:	d203      	bcs.n	8016e4e <rcutils_string_map_reserve+0x82>
 8016e46:	eb02 0c07 	add.w	ip, r2, r7
 8016e4a:	4566      	cmp	r6, ip
 8016e4c:	d322      	bcc.n	8016e94 <rcutils_string_map_reserve+0xc8>
 8016e4e:	1ae3      	subs	r3, r4, r3
 8016e50:	009a      	lsls	r2, r3, #2
 8016e52:	4670      	mov	r0, lr
 8016e54:	2100      	movs	r1, #0
 8016e56:	9201      	str	r2, [sp, #4]
 8016e58:	f002 fef4 	bl	8019c44 <memset>
 8016e5c:	9a01      	ldr	r2, [sp, #4]
 8016e5e:	2100      	movs	r1, #0
 8016e60:	4630      	mov	r0, r6
 8016e62:	f002 feef 	bl	8019c44 <memset>
 8016e66:	e00a      	b.n	8016e7e <rcutils_string_map_reserve+0xb2>
 8016e68:	694f      	ldr	r7, [r1, #20]
 8016e6a:	6808      	ldr	r0, [r1, #0]
 8016e6c:	4631      	mov	r1, r6
 8016e6e:	47b8      	blx	r7
 8016e70:	682b      	ldr	r3, [r5, #0]
 8016e72:	4631      	mov	r1, r6
 8016e74:	6858      	ldr	r0, [r3, #4]
 8016e76:	601c      	str	r4, [r3, #0]
 8016e78:	47b8      	blx	r7
 8016e7a:	682d      	ldr	r5, [r5, #0]
 8016e7c:	606c      	str	r4, [r5, #4]
 8016e7e:	2000      	movs	r0, #0
 8016e80:	60ac      	str	r4, [r5, #8]
 8016e82:	b002      	add	sp, #8
 8016e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e88:	2000      	movs	r0, #0
 8016e8a:	e7af      	b.n	8016dec <rcutils_string_map_reserve+0x20>
 8016e8c:	200a      	movs	r0, #10
 8016e8e:	e7ad      	b.n	8016dec <rcutils_string_map_reserve+0x20>
 8016e90:	200b      	movs	r0, #11
 8016e92:	4770      	bx	lr
 8016e94:	1f0b      	subs	r3, r1, #4
 8016e96:	4418      	add	r0, r3
 8016e98:	4413      	add	r3, r2
 8016e9a:	3a04      	subs	r2, #4
 8016e9c:	4417      	add	r7, r2
 8016e9e:	2200      	movs	r2, #0
 8016ea0:	f843 2f04 	str.w	r2, [r3, #4]!
 8016ea4:	42bb      	cmp	r3, r7
 8016ea6:	f840 2f04 	str.w	r2, [r0, #4]!
 8016eaa:	d1f9      	bne.n	8016ea0 <rcutils_string_map_reserve+0xd4>
 8016eac:	e7e7      	b.n	8016e7e <rcutils_string_map_reserve+0xb2>
 8016eae:	bf00      	nop

08016eb0 <rcutils_string_map_init>:
 8016eb0:	b082      	sub	sp, #8
 8016eb2:	b570      	push	{r4, r5, r6, lr}
 8016eb4:	ac04      	add	r4, sp, #16
 8016eb6:	e884 000c 	stmia.w	r4, {r2, r3}
 8016eba:	b380      	cbz	r0, 8016f1e <rcutils_string_map_init+0x6e>
 8016ebc:	6806      	ldr	r6, [r0, #0]
 8016ebe:	4604      	mov	r4, r0
 8016ec0:	b12e      	cbz	r6, 8016ece <rcutils_string_map_init+0x1e>
 8016ec2:	251e      	movs	r5, #30
 8016ec4:	4628      	mov	r0, r5
 8016ec6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016eca:	b002      	add	sp, #8
 8016ecc:	4770      	bx	lr
 8016ece:	a804      	add	r0, sp, #16
 8016ed0:	460d      	mov	r5, r1
 8016ed2:	f7f6 ffff 	bl	800ded4 <rcutils_allocator_is_valid>
 8016ed6:	b310      	cbz	r0, 8016f1e <rcutils_string_map_init+0x6e>
 8016ed8:	9b04      	ldr	r3, [sp, #16]
 8016eda:	9908      	ldr	r1, [sp, #32]
 8016edc:	2024      	movs	r0, #36	@ 0x24
 8016ede:	4798      	blx	r3
 8016ee0:	6020      	str	r0, [r4, #0]
 8016ee2:	b310      	cbz	r0, 8016f2a <rcutils_string_map_init+0x7a>
 8016ee4:	f10d 0e10 	add.w	lr, sp, #16
 8016ee8:	e9c0 6600 	strd	r6, r6, [r0]
 8016eec:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8016ef0:	f100 0c10 	add.w	ip, r0, #16
 8016ef4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016ef8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016efc:	f8de 3000 	ldr.w	r3, [lr]
 8016f00:	f8cc 3000 	str.w	r3, [ip]
 8016f04:	4629      	mov	r1, r5
 8016f06:	4620      	mov	r0, r4
 8016f08:	f7ff ff60 	bl	8016dcc <rcutils_string_map_reserve>
 8016f0c:	4605      	mov	r5, r0
 8016f0e:	2800      	cmp	r0, #0
 8016f10:	d0d8      	beq.n	8016ec4 <rcutils_string_map_init+0x14>
 8016f12:	9b05      	ldr	r3, [sp, #20]
 8016f14:	9908      	ldr	r1, [sp, #32]
 8016f16:	6820      	ldr	r0, [r4, #0]
 8016f18:	4798      	blx	r3
 8016f1a:	6026      	str	r6, [r4, #0]
 8016f1c:	e7d2      	b.n	8016ec4 <rcutils_string_map_init+0x14>
 8016f1e:	250b      	movs	r5, #11
 8016f20:	4628      	mov	r0, r5
 8016f22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016f26:	b002      	add	sp, #8
 8016f28:	4770      	bx	lr
 8016f2a:	250a      	movs	r5, #10
 8016f2c:	e7ca      	b.n	8016ec4 <rcutils_string_map_init+0x14>
 8016f2e:	bf00      	nop

08016f30 <rcutils_string_map_fini>:
 8016f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f34:	b082      	sub	sp, #8
 8016f36:	2800      	cmp	r0, #0
 8016f38:	d03a      	beq.n	8016fb0 <rcutils_string_map_fini+0x80>
 8016f3a:	6804      	ldr	r4, [r0, #0]
 8016f3c:	4606      	mov	r6, r0
 8016f3e:	2c00      	cmp	r4, #0
 8016f40:	d032      	beq.n	8016fa8 <rcutils_string_map_fini+0x78>
 8016f42:	68a3      	ldr	r3, [r4, #8]
 8016f44:	b32b      	cbz	r3, 8016f92 <rcutils_string_map_fini+0x62>
 8016f46:	2500      	movs	r5, #0
 8016f48:	6822      	ldr	r2, [r4, #0]
 8016f4a:	462f      	mov	r7, r5
 8016f4c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8016f50:	b1e0      	cbz	r0, 8016f8c <rcutils_string_map_fini+0x5c>
 8016f52:	6a21      	ldr	r1, [r4, #32]
 8016f54:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8016f58:	9101      	str	r1, [sp, #4]
 8016f5a:	47c0      	blx	r8
 8016f5c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016f60:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8016f64:	9901      	ldr	r1, [sp, #4]
 8016f66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016f6a:	47c0      	blx	r8
 8016f6c:	68e3      	ldr	r3, [r4, #12]
 8016f6e:	6862      	ldr	r2, [r4, #4]
 8016f70:	3b01      	subs	r3, #1
 8016f72:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8016f76:	60e3      	str	r3, [r4, #12]
 8016f78:	6834      	ldr	r4, [r6, #0]
 8016f7a:	68a3      	ldr	r3, [r4, #8]
 8016f7c:	3501      	adds	r5, #1
 8016f7e:	429d      	cmp	r5, r3
 8016f80:	d207      	bcs.n	8016f92 <rcutils_string_map_fini+0x62>
 8016f82:	6822      	ldr	r2, [r4, #0]
 8016f84:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8016f88:	2800      	cmp	r0, #0
 8016f8a:	d1e2      	bne.n	8016f52 <rcutils_string_map_fini+0x22>
 8016f8c:	3501      	adds	r5, #1
 8016f8e:	429d      	cmp	r5, r3
 8016f90:	d3dc      	bcc.n	8016f4c <rcutils_string_map_fini+0x1c>
 8016f92:	2100      	movs	r1, #0
 8016f94:	4630      	mov	r0, r6
 8016f96:	f7ff ff19 	bl	8016dcc <rcutils_string_map_reserve>
 8016f9a:	4604      	mov	r4, r0
 8016f9c:	b920      	cbnz	r0, 8016fa8 <rcutils_string_map_fini+0x78>
 8016f9e:	6830      	ldr	r0, [r6, #0]
 8016fa0:	6943      	ldr	r3, [r0, #20]
 8016fa2:	6a01      	ldr	r1, [r0, #32]
 8016fa4:	4798      	blx	r3
 8016fa6:	6034      	str	r4, [r6, #0]
 8016fa8:	4620      	mov	r0, r4
 8016faa:	b002      	add	sp, #8
 8016fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016fb0:	240b      	movs	r4, #11
 8016fb2:	4620      	mov	r0, r4
 8016fb4:	b002      	add	sp, #8
 8016fb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016fba:	bf00      	nop

08016fbc <rcutils_string_map_getn>:
 8016fbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fc0:	b300      	cbz	r0, 8017004 <rcutils_string_map_getn+0x48>
 8016fc2:	6807      	ldr	r7, [r0, #0]
 8016fc4:	b1ff      	cbz	r7, 8017006 <rcutils_string_map_getn+0x4a>
 8016fc6:	4688      	mov	r8, r1
 8016fc8:	b1e1      	cbz	r1, 8017004 <rcutils_string_map_getn+0x48>
 8016fca:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8016fce:	683e      	ldr	r6, [r7, #0]
 8016fd0:	f1ba 0f00 	cmp.w	sl, #0
 8016fd4:	d016      	beq.n	8017004 <rcutils_string_map_getn+0x48>
 8016fd6:	4691      	mov	r9, r2
 8016fd8:	3e04      	subs	r6, #4
 8016fda:	2400      	movs	r4, #0
 8016fdc:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8016fe0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8016fe4:	4628      	mov	r0, r5
 8016fe6:	3401      	adds	r4, #1
 8016fe8:	b155      	cbz	r5, 8017000 <rcutils_string_map_getn+0x44>
 8016fea:	f7e9 f923 	bl	8000234 <strlen>
 8016fee:	4548      	cmp	r0, r9
 8016ff0:	4602      	mov	r2, r0
 8016ff2:	4629      	mov	r1, r5
 8016ff4:	bf38      	it	cc
 8016ff6:	464a      	movcc	r2, r9
 8016ff8:	4640      	mov	r0, r8
 8016ffa:	f002 fe38 	bl	8019c6e <strncmp>
 8016ffe:	b128      	cbz	r0, 801700c <rcutils_string_map_getn+0x50>
 8017000:	45a2      	cmp	sl, r4
 8017002:	d1eb      	bne.n	8016fdc <rcutils_string_map_getn+0x20>
 8017004:	2700      	movs	r7, #0
 8017006:	4638      	mov	r0, r7
 8017008:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801700c:	687b      	ldr	r3, [r7, #4]
 801700e:	f853 700b 	ldr.w	r7, [r3, fp]
 8017012:	4638      	mov	r0, r7
 8017014:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017018 <rmw_get_zero_initialized_context>:
 8017018:	b510      	push	{r4, lr}
 801701a:	4604      	mov	r4, r0
 801701c:	3010      	adds	r0, #16
 801701e:	f7f6 ffeb 	bl	800dff8 <rmw_get_zero_initialized_init_options>
 8017022:	2300      	movs	r3, #0
 8017024:	2000      	movs	r0, #0
 8017026:	2100      	movs	r1, #0
 8017028:	e9c4 0100 	strd	r0, r1, [r4]
 801702c:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8017030:	60a3      	str	r3, [r4, #8]
 8017032:	4620      	mov	r0, r4
 8017034:	bd10      	pop	{r4, pc}
 8017036:	bf00      	nop

08017038 <rmw_time_equal>:
 8017038:	b4f0      	push	{r4, r5, r6, r7}
 801703a:	b084      	sub	sp, #16
 801703c:	ac04      	add	r4, sp, #16
 801703e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8017042:	4603      	mov	r3, r0
 8017044:	4924      	ldr	r1, [pc, #144]	@ (80170d8 <rmw_time_equal+0xa0>)
 8017046:	9e03      	ldr	r6, [sp, #12]
 8017048:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 801704c:	2202      	movs	r2, #2
 801704e:	4299      	cmp	r1, r3
 8017050:	41aa      	sbcs	r2, r5
 8017052:	d330      	bcc.n	80170b6 <rmw_time_equal+0x7e>
 8017054:	4c21      	ldr	r4, [pc, #132]	@ (80170dc <rmw_time_equal+0xa4>)
 8017056:	fba3 3204 	umull	r3, r2, r3, r4
 801705a:	fb04 2205 	mla	r2, r4, r5, r2
 801705e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8017062:	43dd      	mvns	r5, r3
 8017064:	1a8c      	subs	r4, r1, r2
 8017066:	4285      	cmp	r5, r0
 8017068:	41b4      	sbcs	r4, r6
 801706a:	d332      	bcc.n	80170d2 <rmw_time_equal+0x9a>
 801706c:	eb10 0c03 	adds.w	ip, r0, r3
 8017070:	eb42 0106 	adc.w	r1, r2, r6
 8017074:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8017078:	4817      	ldr	r0, [pc, #92]	@ (80170d8 <rmw_time_equal+0xa0>)
 801707a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801707c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801707e:	2202      	movs	r2, #2
 8017080:	4298      	cmp	r0, r3
 8017082:	41b2      	sbcs	r2, r6
 8017084:	d31c      	bcc.n	80170c0 <rmw_time_equal+0x88>
 8017086:	4c15      	ldr	r4, [pc, #84]	@ (80170dc <rmw_time_equal+0xa4>)
 8017088:	fba3 3204 	umull	r3, r2, r3, r4
 801708c:	fb04 2206 	mla	r2, r4, r6, r2
 8017090:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8017094:	43de      	mvns	r6, r3
 8017096:	1a84      	subs	r4, r0, r2
 8017098:	42ae      	cmp	r6, r5
 801709a:	41bc      	sbcs	r4, r7
 801709c:	d315      	bcc.n	80170ca <rmw_time_equal+0x92>
 801709e:	195b      	adds	r3, r3, r5
 80170a0:	eb42 0207 	adc.w	r2, r2, r7
 80170a4:	428a      	cmp	r2, r1
 80170a6:	bf08      	it	eq
 80170a8:	4563      	cmpeq	r3, ip
 80170aa:	bf0c      	ite	eq
 80170ac:	2001      	moveq	r0, #1
 80170ae:	2000      	movne	r0, #0
 80170b0:	b004      	add	sp, #16
 80170b2:	bcf0      	pop	{r4, r5, r6, r7}
 80170b4:	4770      	bx	lr
 80170b6:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80170ba:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80170be:	e7d9      	b.n	8017074 <rmw_time_equal+0x3c>
 80170c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80170c4:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80170c8:	e7ec      	b.n	80170a4 <rmw_time_equal+0x6c>
 80170ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80170ce:	4602      	mov	r2, r0
 80170d0:	e7e8      	b.n	80170a4 <rmw_time_equal+0x6c>
 80170d2:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80170d6:	e7cd      	b.n	8017074 <rmw_time_equal+0x3c>
 80170d8:	25c17d04 	.word	0x25c17d04
 80170dc:	3b9aca00 	.word	0x3b9aca00

080170e0 <rmw_time_total_nsec>:
 80170e0:	b470      	push	{r4, r5, r6}
 80170e2:	b085      	sub	sp, #20
 80170e4:	ac04      	add	r4, sp, #16
 80170e6:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80170ea:	4603      	mov	r3, r0
 80170ec:	4912      	ldr	r1, [pc, #72]	@ (8017138 <rmw_time_total_nsec+0x58>)
 80170ee:	9e03      	ldr	r6, [sp, #12]
 80170f0:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 80170f4:	2202      	movs	r2, #2
 80170f6:	4299      	cmp	r1, r3
 80170f8:	41aa      	sbcs	r2, r5
 80170fa:	d311      	bcc.n	8017120 <rmw_time_total_nsec+0x40>
 80170fc:	4c0f      	ldr	r4, [pc, #60]	@ (801713c <rmw_time_total_nsec+0x5c>)
 80170fe:	fba3 3204 	umull	r3, r2, r3, r4
 8017102:	fb04 2205 	mla	r2, r4, r5, r2
 8017106:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801710a:	43dd      	mvns	r5, r3
 801710c:	1a8c      	subs	r4, r1, r2
 801710e:	4285      	cmp	r5, r0
 8017110:	41b4      	sbcs	r4, r6
 8017112:	d30c      	bcc.n	801712e <rmw_time_total_nsec+0x4e>
 8017114:	1818      	adds	r0, r3, r0
 8017116:	eb42 0106 	adc.w	r1, r2, r6
 801711a:	b005      	add	sp, #20
 801711c:	bc70      	pop	{r4, r5, r6}
 801711e:	4770      	bx	lr
 8017120:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017124:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8017128:	b005      	add	sp, #20
 801712a:	bc70      	pop	{r4, r5, r6}
 801712c:	4770      	bx	lr
 801712e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017132:	b005      	add	sp, #20
 8017134:	bc70      	pop	{r4, r5, r6}
 8017136:	4770      	bx	lr
 8017138:	25c17d04 	.word	0x25c17d04
 801713c:	3b9aca00 	.word	0x3b9aca00

08017140 <rmw_get_zero_initialized_message_info>:
 8017140:	b510      	push	{r4, lr}
 8017142:	2240      	movs	r2, #64	@ 0x40
 8017144:	4604      	mov	r4, r0
 8017146:	2100      	movs	r1, #0
 8017148:	f002 fd7c 	bl	8019c44 <memset>
 801714c:	4620      	mov	r0, r4
 801714e:	bd10      	pop	{r4, pc}

08017150 <rmw_validate_full_topic_name>:
 8017150:	2800      	cmp	r0, #0
 8017152:	d057      	beq.n	8017204 <rmw_validate_full_topic_name+0xb4>
 8017154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017158:	460d      	mov	r5, r1
 801715a:	2900      	cmp	r1, #0
 801715c:	d054      	beq.n	8017208 <rmw_validate_full_topic_name+0xb8>
 801715e:	4616      	mov	r6, r2
 8017160:	4604      	mov	r4, r0
 8017162:	f7e9 f867 	bl	8000234 <strlen>
 8017166:	b148      	cbz	r0, 801717c <rmw_validate_full_topic_name+0x2c>
 8017168:	7823      	ldrb	r3, [r4, #0]
 801716a:	2b2f      	cmp	r3, #47	@ 0x2f
 801716c:	d00d      	beq.n	801718a <rmw_validate_full_topic_name+0x3a>
 801716e:	2302      	movs	r3, #2
 8017170:	602b      	str	r3, [r5, #0]
 8017172:	b13e      	cbz	r6, 8017184 <rmw_validate_full_topic_name+0x34>
 8017174:	2000      	movs	r0, #0
 8017176:	6030      	str	r0, [r6, #0]
 8017178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801717c:	2301      	movs	r3, #1
 801717e:	602b      	str	r3, [r5, #0]
 8017180:	2e00      	cmp	r6, #0
 8017182:	d1f7      	bne.n	8017174 <rmw_validate_full_topic_name+0x24>
 8017184:	2000      	movs	r0, #0
 8017186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801718a:	1e43      	subs	r3, r0, #1
 801718c:	5ce2      	ldrb	r2, [r4, r3]
 801718e:	2a2f      	cmp	r2, #47	@ 0x2f
 8017190:	d03c      	beq.n	801720c <rmw_validate_full_topic_name+0xbc>
 8017192:	1e63      	subs	r3, r4, #1
 8017194:	eb03 0800 	add.w	r8, r3, r0
 8017198:	f1c4 0e01 	rsb	lr, r4, #1
 801719c:	eb0e 0703 	add.w	r7, lr, r3
 80171a0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80171a4:	f021 0220 	bic.w	r2, r1, #32
 80171a8:	3a41      	subs	r2, #65	@ 0x41
 80171aa:	2a19      	cmp	r2, #25
 80171ac:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 80171b0:	d90b      	bls.n	80171ca <rmw_validate_full_topic_name+0x7a>
 80171b2:	295f      	cmp	r1, #95	@ 0x5f
 80171b4:	d009      	beq.n	80171ca <rmw_validate_full_topic_name+0x7a>
 80171b6:	f1bc 0f0a 	cmp.w	ip, #10
 80171ba:	d906      	bls.n	80171ca <rmw_validate_full_topic_name+0x7a>
 80171bc:	2304      	movs	r3, #4
 80171be:	602b      	str	r3, [r5, #0]
 80171c0:	2e00      	cmp	r6, #0
 80171c2:	d0df      	beq.n	8017184 <rmw_validate_full_topic_name+0x34>
 80171c4:	6037      	str	r7, [r6, #0]
 80171c6:	2000      	movs	r0, #0
 80171c8:	e7d6      	b.n	8017178 <rmw_validate_full_topic_name+0x28>
 80171ca:	4543      	cmp	r3, r8
 80171cc:	d1e6      	bne.n	801719c <rmw_validate_full_topic_name+0x4c>
 80171ce:	4f1a      	ldr	r7, [pc, #104]	@ (8017238 <rmw_validate_full_topic_name+0xe8>)
 80171d0:	2301      	movs	r3, #1
 80171d2:	e004      	b.n	80171de <rmw_validate_full_topic_name+0x8e>
 80171d4:	4298      	cmp	r0, r3
 80171d6:	f104 0401 	add.w	r4, r4, #1
 80171da:	d91c      	bls.n	8017216 <rmw_validate_full_topic_name+0xc6>
 80171dc:	4613      	mov	r3, r2
 80171de:	4298      	cmp	r0, r3
 80171e0:	f103 0201 	add.w	r2, r3, #1
 80171e4:	d0f6      	beq.n	80171d4 <rmw_validate_full_topic_name+0x84>
 80171e6:	7821      	ldrb	r1, [r4, #0]
 80171e8:	292f      	cmp	r1, #47	@ 0x2f
 80171ea:	d1f3      	bne.n	80171d4 <rmw_validate_full_topic_name+0x84>
 80171ec:	7861      	ldrb	r1, [r4, #1]
 80171ee:	292f      	cmp	r1, #47	@ 0x2f
 80171f0:	d01c      	beq.n	801722c <rmw_validate_full_topic_name+0xdc>
 80171f2:	5dc9      	ldrb	r1, [r1, r7]
 80171f4:	0749      	lsls	r1, r1, #29
 80171f6:	d5ed      	bpl.n	80171d4 <rmw_validate_full_topic_name+0x84>
 80171f8:	2206      	movs	r2, #6
 80171fa:	602a      	str	r2, [r5, #0]
 80171fc:	2e00      	cmp	r6, #0
 80171fe:	d0c1      	beq.n	8017184 <rmw_validate_full_topic_name+0x34>
 8017200:	6033      	str	r3, [r6, #0]
 8017202:	e7bf      	b.n	8017184 <rmw_validate_full_topic_name+0x34>
 8017204:	200b      	movs	r0, #11
 8017206:	4770      	bx	lr
 8017208:	200b      	movs	r0, #11
 801720a:	e7b5      	b.n	8017178 <rmw_validate_full_topic_name+0x28>
 801720c:	2203      	movs	r2, #3
 801720e:	602a      	str	r2, [r5, #0]
 8017210:	2e00      	cmp	r6, #0
 8017212:	d1f5      	bne.n	8017200 <rmw_validate_full_topic_name+0xb0>
 8017214:	e7b6      	b.n	8017184 <rmw_validate_full_topic_name+0x34>
 8017216:	28f7      	cmp	r0, #247	@ 0xf7
 8017218:	d802      	bhi.n	8017220 <rmw_validate_full_topic_name+0xd0>
 801721a:	2000      	movs	r0, #0
 801721c:	6028      	str	r0, [r5, #0]
 801721e:	e7ab      	b.n	8017178 <rmw_validate_full_topic_name+0x28>
 8017220:	2307      	movs	r3, #7
 8017222:	602b      	str	r3, [r5, #0]
 8017224:	2e00      	cmp	r6, #0
 8017226:	d0ad      	beq.n	8017184 <rmw_validate_full_topic_name+0x34>
 8017228:	23f6      	movs	r3, #246	@ 0xf6
 801722a:	e7e9      	b.n	8017200 <rmw_validate_full_topic_name+0xb0>
 801722c:	2205      	movs	r2, #5
 801722e:	602a      	str	r2, [r5, #0]
 8017230:	2e00      	cmp	r6, #0
 8017232:	d1e5      	bne.n	8017200 <rmw_validate_full_topic_name+0xb0>
 8017234:	e7a6      	b.n	8017184 <rmw_validate_full_topic_name+0x34>
 8017236:	bf00      	nop
 8017238:	0801c9f2 	.word	0x0801c9f2

0801723c <rmw_validate_namespace_with_size>:
 801723c:	b340      	cbz	r0, 8017290 <rmw_validate_namespace_with_size+0x54>
 801723e:	b570      	push	{r4, r5, r6, lr}
 8017240:	4614      	mov	r4, r2
 8017242:	b0c2      	sub	sp, #264	@ 0x108
 8017244:	b332      	cbz	r2, 8017294 <rmw_validate_namespace_with_size+0x58>
 8017246:	2901      	cmp	r1, #1
 8017248:	460d      	mov	r5, r1
 801724a:	461e      	mov	r6, r3
 801724c:	d102      	bne.n	8017254 <rmw_validate_namespace_with_size+0x18>
 801724e:	7803      	ldrb	r3, [r0, #0]
 8017250:	2b2f      	cmp	r3, #47	@ 0x2f
 8017252:	d012      	beq.n	801727a <rmw_validate_namespace_with_size+0x3e>
 8017254:	aa01      	add	r2, sp, #4
 8017256:	4669      	mov	r1, sp
 8017258:	f7ff ff7a 	bl	8017150 <rmw_validate_full_topic_name>
 801725c:	b978      	cbnz	r0, 801727e <rmw_validate_namespace_with_size+0x42>
 801725e:	9b00      	ldr	r3, [sp, #0]
 8017260:	b14b      	cbz	r3, 8017276 <rmw_validate_namespace_with_size+0x3a>
 8017262:	2b07      	cmp	r3, #7
 8017264:	d007      	beq.n	8017276 <rmw_validate_namespace_with_size+0x3a>
 8017266:	1e5a      	subs	r2, r3, #1
 8017268:	2a05      	cmp	r2, #5
 801726a:	d82b      	bhi.n	80172c4 <rmw_validate_namespace_with_size+0x88>
 801726c:	e8df f002 	tbb	[pc, r2]
 8017270:	1e212427 	.word	0x1e212427
 8017274:	141b      	.short	0x141b
 8017276:	2df5      	cmp	r5, #245	@ 0xf5
 8017278:	d803      	bhi.n	8017282 <rmw_validate_namespace_with_size+0x46>
 801727a:	2000      	movs	r0, #0
 801727c:	6020      	str	r0, [r4, #0]
 801727e:	b042      	add	sp, #264	@ 0x108
 8017280:	bd70      	pop	{r4, r5, r6, pc}
 8017282:	2307      	movs	r3, #7
 8017284:	6023      	str	r3, [r4, #0]
 8017286:	2e00      	cmp	r6, #0
 8017288:	d0f9      	beq.n	801727e <rmw_validate_namespace_with_size+0x42>
 801728a:	23f4      	movs	r3, #244	@ 0xf4
 801728c:	6033      	str	r3, [r6, #0]
 801728e:	e7f6      	b.n	801727e <rmw_validate_namespace_with_size+0x42>
 8017290:	200b      	movs	r0, #11
 8017292:	4770      	bx	lr
 8017294:	200b      	movs	r0, #11
 8017296:	e7f2      	b.n	801727e <rmw_validate_namespace_with_size+0x42>
 8017298:	2306      	movs	r3, #6
 801729a:	6023      	str	r3, [r4, #0]
 801729c:	2e00      	cmp	r6, #0
 801729e:	d0ee      	beq.n	801727e <rmw_validate_namespace_with_size+0x42>
 80172a0:	9b01      	ldr	r3, [sp, #4]
 80172a2:	6033      	str	r3, [r6, #0]
 80172a4:	e7eb      	b.n	801727e <rmw_validate_namespace_with_size+0x42>
 80172a6:	2305      	movs	r3, #5
 80172a8:	6023      	str	r3, [r4, #0]
 80172aa:	e7f7      	b.n	801729c <rmw_validate_namespace_with_size+0x60>
 80172ac:	2304      	movs	r3, #4
 80172ae:	6023      	str	r3, [r4, #0]
 80172b0:	e7f4      	b.n	801729c <rmw_validate_namespace_with_size+0x60>
 80172b2:	2303      	movs	r3, #3
 80172b4:	6023      	str	r3, [r4, #0]
 80172b6:	e7f1      	b.n	801729c <rmw_validate_namespace_with_size+0x60>
 80172b8:	2302      	movs	r3, #2
 80172ba:	6023      	str	r3, [r4, #0]
 80172bc:	e7ee      	b.n	801729c <rmw_validate_namespace_with_size+0x60>
 80172be:	2301      	movs	r3, #1
 80172c0:	6023      	str	r3, [r4, #0]
 80172c2:	e7eb      	b.n	801729c <rmw_validate_namespace_with_size+0x60>
 80172c4:	4a03      	ldr	r2, [pc, #12]	@ (80172d4 <rmw_validate_namespace_with_size+0x98>)
 80172c6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80172ca:	a802      	add	r0, sp, #8
 80172cc:	f7ff fd0e 	bl	8016cec <rcutils_snprintf>
 80172d0:	2001      	movs	r0, #1
 80172d2:	e7d4      	b.n	801727e <rmw_validate_namespace_with_size+0x42>
 80172d4:	0801c520 	.word	0x0801c520

080172d8 <rmw_validate_namespace>:
 80172d8:	b168      	cbz	r0, 80172f6 <rmw_validate_namespace+0x1e>
 80172da:	b570      	push	{r4, r5, r6, lr}
 80172dc:	460d      	mov	r5, r1
 80172de:	4616      	mov	r6, r2
 80172e0:	4604      	mov	r4, r0
 80172e2:	f7e8 ffa7 	bl	8000234 <strlen>
 80172e6:	4633      	mov	r3, r6
 80172e8:	4601      	mov	r1, r0
 80172ea:	462a      	mov	r2, r5
 80172ec:	4620      	mov	r0, r4
 80172ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80172f2:	f7ff bfa3 	b.w	801723c <rmw_validate_namespace_with_size>
 80172f6:	200b      	movs	r0, #11
 80172f8:	4770      	bx	lr
 80172fa:	bf00      	nop

080172fc <rmw_namespace_validation_result_string>:
 80172fc:	2807      	cmp	r0, #7
 80172fe:	bf9a      	itte	ls
 8017300:	4b02      	ldrls	r3, [pc, #8]	@ (801730c <rmw_namespace_validation_result_string+0x10>)
 8017302:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8017306:	4802      	ldrhi	r0, [pc, #8]	@ (8017310 <rmw_namespace_validation_result_string+0x14>)
 8017308:	4770      	bx	lr
 801730a:	bf00      	nop
 801730c:	0801c718 	.word	0x0801c718
 8017310:	0801c570 	.word	0x0801c570

08017314 <rmw_validate_node_name>:
 8017314:	2800      	cmp	r0, #0
 8017316:	d03b      	beq.n	8017390 <rmw_validate_node_name+0x7c>
 8017318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801731c:	460d      	mov	r5, r1
 801731e:	2900      	cmp	r1, #0
 8017320:	d038      	beq.n	8017394 <rmw_validate_node_name+0x80>
 8017322:	4616      	mov	r6, r2
 8017324:	4604      	mov	r4, r0
 8017326:	f7e8 ff85 	bl	8000234 <strlen>
 801732a:	b1e0      	cbz	r0, 8017366 <rmw_validate_node_name+0x52>
 801732c:	1e63      	subs	r3, r4, #1
 801732e:	eb03 0800 	add.w	r8, r3, r0
 8017332:	f1c4 0101 	rsb	r1, r4, #1
 8017336:	18cf      	adds	r7, r1, r3
 8017338:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 801733c:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8017340:	f02e 0c20 	bic.w	ip, lr, #32
 8017344:	2a09      	cmp	r2, #9
 8017346:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 801734a:	d914      	bls.n	8017376 <rmw_validate_node_name+0x62>
 801734c:	f1bc 0f19 	cmp.w	ip, #25
 8017350:	d911      	bls.n	8017376 <rmw_validate_node_name+0x62>
 8017352:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8017356:	d00e      	beq.n	8017376 <rmw_validate_node_name+0x62>
 8017358:	2302      	movs	r3, #2
 801735a:	602b      	str	r3, [r5, #0]
 801735c:	b106      	cbz	r6, 8017360 <rmw_validate_node_name+0x4c>
 801735e:	6037      	str	r7, [r6, #0]
 8017360:	2000      	movs	r0, #0
 8017362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017366:	2301      	movs	r3, #1
 8017368:	602b      	str	r3, [r5, #0]
 801736a:	2e00      	cmp	r6, #0
 801736c:	d0f8      	beq.n	8017360 <rmw_validate_node_name+0x4c>
 801736e:	2000      	movs	r0, #0
 8017370:	6030      	str	r0, [r6, #0]
 8017372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017376:	4543      	cmp	r3, r8
 8017378:	d1dd      	bne.n	8017336 <rmw_validate_node_name+0x22>
 801737a:	7822      	ldrb	r2, [r4, #0]
 801737c:	4b0d      	ldr	r3, [pc, #52]	@ (80173b4 <rmw_validate_node_name+0xa0>)
 801737e:	5cd3      	ldrb	r3, [r2, r3]
 8017380:	f013 0304 	ands.w	r3, r3, #4
 8017384:	d110      	bne.n	80173a8 <rmw_validate_node_name+0x94>
 8017386:	28ff      	cmp	r0, #255	@ 0xff
 8017388:	d806      	bhi.n	8017398 <rmw_validate_node_name+0x84>
 801738a:	602b      	str	r3, [r5, #0]
 801738c:	4618      	mov	r0, r3
 801738e:	e7e8      	b.n	8017362 <rmw_validate_node_name+0x4e>
 8017390:	200b      	movs	r0, #11
 8017392:	4770      	bx	lr
 8017394:	200b      	movs	r0, #11
 8017396:	e7e4      	b.n	8017362 <rmw_validate_node_name+0x4e>
 8017398:	2204      	movs	r2, #4
 801739a:	602a      	str	r2, [r5, #0]
 801739c:	2e00      	cmp	r6, #0
 801739e:	d0df      	beq.n	8017360 <rmw_validate_node_name+0x4c>
 80173a0:	22fe      	movs	r2, #254	@ 0xfe
 80173a2:	6032      	str	r2, [r6, #0]
 80173a4:	4618      	mov	r0, r3
 80173a6:	e7dc      	b.n	8017362 <rmw_validate_node_name+0x4e>
 80173a8:	2303      	movs	r3, #3
 80173aa:	602b      	str	r3, [r5, #0]
 80173ac:	2e00      	cmp	r6, #0
 80173ae:	d1de      	bne.n	801736e <rmw_validate_node_name+0x5a>
 80173b0:	e7d6      	b.n	8017360 <rmw_validate_node_name+0x4c>
 80173b2:	bf00      	nop
 80173b4:	0801c9f2 	.word	0x0801c9f2

080173b8 <rmw_node_name_validation_result_string>:
 80173b8:	2804      	cmp	r0, #4
 80173ba:	bf9a      	itte	ls
 80173bc:	4b02      	ldrls	r3, [pc, #8]	@ (80173c8 <rmw_node_name_validation_result_string+0x10>)
 80173be:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80173c2:	4802      	ldrhi	r0, [pc, #8]	@ (80173cc <rmw_node_name_validation_result_string+0x14>)
 80173c4:	4770      	bx	lr
 80173c6:	bf00      	nop
 80173c8:	0801c824 	.word	0x0801c824
 80173cc:	0801c738 	.word	0x0801c738

080173d0 <on_status>:
 80173d0:	b082      	sub	sp, #8
 80173d2:	b002      	add	sp, #8
 80173d4:	4770      	bx	lr
 80173d6:	bf00      	nop

080173d8 <on_topic>:
 80173d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173dc:	4a22      	ldr	r2, [pc, #136]	@ (8017468 <on_topic+0x90>)
 80173de:	b094      	sub	sp, #80	@ 0x50
 80173e0:	6812      	ldr	r2, [r2, #0]
 80173e2:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 80173e4:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80173e8:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 80173ec:	b3c2      	cbz	r2, 8017460 <on_topic+0x88>
 80173ee:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 80173f2:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 80173f6:	e001      	b.n	80173fc <on_topic+0x24>
 80173f8:	6852      	ldr	r2, [r2, #4]
 80173fa:	b38a      	cbz	r2, 8017460 <on_topic+0x88>
 80173fc:	6894      	ldr	r4, [r2, #8]
 80173fe:	8aa3      	ldrh	r3, [r4, #20]
 8017400:	428b      	cmp	r3, r1
 8017402:	d1f9      	bne.n	80173f8 <on_topic+0x20>
 8017404:	7da3      	ldrb	r3, [r4, #22]
 8017406:	4283      	cmp	r3, r0
 8017408:	d1f6      	bne.n	80173f8 <on_topic+0x20>
 801740a:	2248      	movs	r2, #72	@ 0x48
 801740c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8017410:	4668      	mov	r0, sp
 8017412:	f002 fce0 	bl	8019dd6 <memcpy>
 8017416:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 801741a:	cb0c      	ldmia	r3, {r2, r3}
 801741c:	4620      	mov	r0, r4
 801741e:	f7f7 feef 	bl	800f200 <rmw_uxrce_get_static_input_buffer_for_entity>
 8017422:	4607      	mov	r7, r0
 8017424:	b1e0      	cbz	r0, 8017460 <on_topic+0x88>
 8017426:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801742a:	4632      	mov	r2, r6
 801742c:	4628      	mov	r0, r5
 801742e:	f108 0110 	add.w	r1, r8, #16
 8017432:	f7f8 fe71 	bl	8010118 <ucdr_deserialize_array_uint8_t>
 8017436:	b930      	cbnz	r0, 8017446 <on_topic+0x6e>
 8017438:	480c      	ldr	r0, [pc, #48]	@ (801746c <on_topic+0x94>)
 801743a:	4639      	mov	r1, r7
 801743c:	b014      	add	sp, #80	@ 0x50
 801743e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017442:	f000 b8bd 	b.w	80175c0 <put_memory>
 8017446:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 801744a:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 801744e:	f7f7 fcd5 	bl	800edfc <rmw_uros_epoch_nanos>
 8017452:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8017456:	2305      	movs	r3, #5
 8017458:	e942 0102 	strd	r0, r1, [r2, #-8]
 801745c:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8017460:	b014      	add	sp, #80	@ 0x50
 8017462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017466:	bf00      	nop
 8017468:	2000ba64 	.word	0x2000ba64
 801746c:	2000ba54 	.word	0x2000ba54

08017470 <on_request>:
 8017470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017474:	4823      	ldr	r0, [pc, #140]	@ (8017504 <on_request+0x94>)
 8017476:	b094      	sub	sp, #80	@ 0x50
 8017478:	6800      	ldr	r0, [r0, #0]
 801747a:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801747c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8017480:	9113      	str	r1, [sp, #76]	@ 0x4c
 8017482:	2800      	cmp	r0, #0
 8017484:	d03b      	beq.n	80174fe <on_request+0x8e>
 8017486:	461d      	mov	r5, r3
 8017488:	e001      	b.n	801748e <on_request+0x1e>
 801748a:	6840      	ldr	r0, [r0, #4]
 801748c:	b3b8      	cbz	r0, 80174fe <on_request+0x8e>
 801748e:	6884      	ldr	r4, [r0, #8]
 8017490:	8b21      	ldrh	r1, [r4, #24]
 8017492:	4291      	cmp	r1, r2
 8017494:	d1f9      	bne.n	801748a <on_request+0x1a>
 8017496:	2248      	movs	r2, #72	@ 0x48
 8017498:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801749c:	4668      	mov	r0, sp
 801749e:	f002 fc9a 	bl	8019dd6 <memcpy>
 80174a2:	f104 0320 	add.w	r3, r4, #32
 80174a6:	cb0c      	ldmia	r3, {r2, r3}
 80174a8:	4620      	mov	r0, r4
 80174aa:	f7f7 fea9 	bl	800f200 <rmw_uxrce_get_static_input_buffer_for_entity>
 80174ae:	4680      	mov	r8, r0
 80174b0:	b328      	cbz	r0, 80174fe <on_request+0x8e>
 80174b2:	4638      	mov	r0, r7
 80174b4:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80174b8:	4632      	mov	r2, r6
 80174ba:	f107 0110 	add.w	r1, r7, #16
 80174be:	f7f8 fe2b 	bl	8010118 <ucdr_deserialize_array_uint8_t>
 80174c2:	b930      	cbnz	r0, 80174d2 <on_request+0x62>
 80174c4:	4810      	ldr	r0, [pc, #64]	@ (8017508 <on_request+0x98>)
 80174c6:	4641      	mov	r1, r8
 80174c8:	b014      	add	sp, #80	@ 0x50
 80174ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80174ce:	f000 b877 	b.w	80175c0 <put_memory>
 80174d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80174d4:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 80174d8:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 80174dc:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 80174e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80174e4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80174e8:	e88c 0003 	stmia.w	ip, {r0, r1}
 80174ec:	f7f7 fc86 	bl	800edfc <rmw_uros_epoch_nanos>
 80174f0:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 80174f4:	2303      	movs	r3, #3
 80174f6:	e942 0102 	strd	r0, r1, [r2, #-8]
 80174fa:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 80174fe:	b014      	add	sp, #80	@ 0x50
 8017500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017504:	2000ba34 	.word	0x2000ba34
 8017508:	2000ba54 	.word	0x2000ba54

0801750c <on_reply>:
 801750c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017510:	4821      	ldr	r0, [pc, #132]	@ (8017598 <on_reply+0x8c>)
 8017512:	b094      	sub	sp, #80	@ 0x50
 8017514:	6800      	ldr	r0, [r0, #0]
 8017516:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8017518:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801751c:	9113      	str	r1, [sp, #76]	@ 0x4c
 801751e:	b3b8      	cbz	r0, 8017590 <on_reply+0x84>
 8017520:	461d      	mov	r5, r3
 8017522:	e001      	b.n	8017528 <on_reply+0x1c>
 8017524:	6840      	ldr	r0, [r0, #4]
 8017526:	b398      	cbz	r0, 8017590 <on_reply+0x84>
 8017528:	6884      	ldr	r4, [r0, #8]
 801752a:	8b21      	ldrh	r1, [r4, #24]
 801752c:	4291      	cmp	r1, r2
 801752e:	d1f9      	bne.n	8017524 <on_reply+0x18>
 8017530:	2248      	movs	r2, #72	@ 0x48
 8017532:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8017536:	4668      	mov	r0, sp
 8017538:	f002 fc4d 	bl	8019dd6 <memcpy>
 801753c:	f104 0320 	add.w	r3, r4, #32
 8017540:	cb0c      	ldmia	r3, {r2, r3}
 8017542:	4620      	mov	r0, r4
 8017544:	f7f7 fe5c 	bl	800f200 <rmw_uxrce_get_static_input_buffer_for_entity>
 8017548:	4680      	mov	r8, r0
 801754a:	b308      	cbz	r0, 8017590 <on_reply+0x84>
 801754c:	4638      	mov	r0, r7
 801754e:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8017552:	4632      	mov	r2, r6
 8017554:	f107 0110 	add.w	r1, r7, #16
 8017558:	f7f8 fdde 	bl	8010118 <ucdr_deserialize_array_uint8_t>
 801755c:	b930      	cbnz	r0, 801756c <on_reply+0x60>
 801755e:	480f      	ldr	r0, [pc, #60]	@ (801759c <on_reply+0x90>)
 8017560:	4641      	mov	r1, r8
 8017562:	b014      	add	sp, #80	@ 0x50
 8017564:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017568:	f000 b82a 	b.w	80175c0 <put_memory>
 801756c:	2200      	movs	r2, #0
 801756e:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8017572:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8017576:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 801757a:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 801757e:	f7f7 fc3d 	bl	800edfc <rmw_uros_epoch_nanos>
 8017582:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8017586:	2304      	movs	r3, #4
 8017588:	e942 0102 	strd	r0, r1, [r2, #-8]
 801758c:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8017590:	b014      	add	sp, #80	@ 0x50
 8017592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017596:	bf00      	nop
 8017598:	2000707c 	.word	0x2000707c
 801759c:	2000ba54 	.word	0x2000ba54

080175a0 <get_memory>:
 80175a0:	4603      	mov	r3, r0
 80175a2:	6840      	ldr	r0, [r0, #4]
 80175a4:	b158      	cbz	r0, 80175be <get_memory+0x1e>
 80175a6:	6842      	ldr	r2, [r0, #4]
 80175a8:	605a      	str	r2, [r3, #4]
 80175aa:	b10a      	cbz	r2, 80175b0 <get_memory+0x10>
 80175ac:	2100      	movs	r1, #0
 80175ae:	6011      	str	r1, [r2, #0]
 80175b0:	681a      	ldr	r2, [r3, #0]
 80175b2:	6042      	str	r2, [r0, #4]
 80175b4:	b102      	cbz	r2, 80175b8 <get_memory+0x18>
 80175b6:	6010      	str	r0, [r2, #0]
 80175b8:	2200      	movs	r2, #0
 80175ba:	6002      	str	r2, [r0, #0]
 80175bc:	6018      	str	r0, [r3, #0]
 80175be:	4770      	bx	lr

080175c0 <put_memory>:
 80175c0:	680b      	ldr	r3, [r1, #0]
 80175c2:	b10b      	cbz	r3, 80175c8 <put_memory+0x8>
 80175c4:	684a      	ldr	r2, [r1, #4]
 80175c6:	605a      	str	r2, [r3, #4]
 80175c8:	684a      	ldr	r2, [r1, #4]
 80175ca:	b102      	cbz	r2, 80175ce <put_memory+0xe>
 80175cc:	6013      	str	r3, [r2, #0]
 80175ce:	6803      	ldr	r3, [r0, #0]
 80175d0:	428b      	cmp	r3, r1
 80175d2:	6843      	ldr	r3, [r0, #4]
 80175d4:	bf08      	it	eq
 80175d6:	6002      	streq	r2, [r0, #0]
 80175d8:	604b      	str	r3, [r1, #4]
 80175da:	b103      	cbz	r3, 80175de <put_memory+0x1e>
 80175dc:	6019      	str	r1, [r3, #0]
 80175de:	2300      	movs	r3, #0
 80175e0:	600b      	str	r3, [r1, #0]
 80175e2:	6041      	str	r1, [r0, #4]
 80175e4:	4770      	bx	lr
 80175e6:	bf00      	nop

080175e8 <rmw_destroy_client>:
 80175e8:	b570      	push	{r4, r5, r6, lr}
 80175ea:	b128      	cbz	r0, 80175f8 <rmw_destroy_client+0x10>
 80175ec:	4604      	mov	r4, r0
 80175ee:	6800      	ldr	r0, [r0, #0]
 80175f0:	460d      	mov	r5, r1
 80175f2:	f7f8 f815 	bl	800f620 <is_uxrce_rmw_identifier_valid>
 80175f6:	b910      	cbnz	r0, 80175fe <rmw_destroy_client+0x16>
 80175f8:	2401      	movs	r4, #1
 80175fa:	4620      	mov	r0, r4
 80175fc:	bd70      	pop	{r4, r5, r6, pc}
 80175fe:	6863      	ldr	r3, [r4, #4]
 8017600:	2b00      	cmp	r3, #0
 8017602:	d0f9      	beq.n	80175f8 <rmw_destroy_client+0x10>
 8017604:	2d00      	cmp	r5, #0
 8017606:	d0f7      	beq.n	80175f8 <rmw_destroy_client+0x10>
 8017608:	6828      	ldr	r0, [r5, #0]
 801760a:	f7f8 f809 	bl	800f620 <is_uxrce_rmw_identifier_valid>
 801760e:	2800      	cmp	r0, #0
 8017610:	d0f2      	beq.n	80175f8 <rmw_destroy_client+0x10>
 8017612:	686e      	ldr	r6, [r5, #4]
 8017614:	2e00      	cmp	r6, #0
 8017616:	d0ef      	beq.n	80175f8 <rmw_destroy_client+0x10>
 8017618:	6864      	ldr	r4, [r4, #4]
 801761a:	6932      	ldr	r2, [r6, #16]
 801761c:	6920      	ldr	r0, [r4, #16]
 801761e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017622:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017626:	6819      	ldr	r1, [r3, #0]
 8017628:	f7f9 f99c 	bl	8010964 <uxr_buffer_cancel_data>
 801762c:	4602      	mov	r2, r0
 801762e:	6920      	ldr	r0, [r4, #16]
 8017630:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017634:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017638:	f7f7 fed8 	bl	800f3ec <run_xrce_session>
 801763c:	6920      	ldr	r0, [r4, #16]
 801763e:	6932      	ldr	r2, [r6, #16]
 8017640:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017644:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017648:	6819      	ldr	r1, [r3, #0]
 801764a:	f7f8 fecb 	bl	80103e4 <uxr_buffer_delete_entity>
 801764e:	4602      	mov	r2, r0
 8017650:	6920      	ldr	r0, [r4, #16]
 8017652:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017656:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801765a:	f7f7 fec7 	bl	800f3ec <run_xrce_session>
 801765e:	2800      	cmp	r0, #0
 8017660:	4628      	mov	r0, r5
 8017662:	bf14      	ite	ne
 8017664:	2400      	movne	r4, #0
 8017666:	2402      	moveq	r4, #2
 8017668:	f7f7 fda8 	bl	800f1bc <rmw_uxrce_fini_client_memory>
 801766c:	e7c5      	b.n	80175fa <rmw_destroy_client+0x12>
 801766e:	bf00      	nop

08017670 <rmw_get_implementation_identifier>:
 8017670:	4b01      	ldr	r3, [pc, #4]	@ (8017678 <rmw_get_implementation_identifier+0x8>)
 8017672:	6818      	ldr	r0, [r3, #0]
 8017674:	4770      	bx	lr
 8017676:	bf00      	nop
 8017678:	0801c850 	.word	0x0801c850

0801767c <create_topic>:
 801767c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017680:	4605      	mov	r5, r0
 8017682:	b084      	sub	sp, #16
 8017684:	4822      	ldr	r0, [pc, #136]	@ (8017710 <create_topic+0x94>)
 8017686:	460f      	mov	r7, r1
 8017688:	4616      	mov	r6, r2
 801768a:	f7ff ff89 	bl	80175a0 <get_memory>
 801768e:	4604      	mov	r4, r0
 8017690:	2800      	cmp	r0, #0
 8017692:	d039      	beq.n	8017708 <create_topic+0x8c>
 8017694:	692b      	ldr	r3, [r5, #16]
 8017696:	6884      	ldr	r4, [r0, #8]
 8017698:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8017718 <create_topic+0x9c>
 801769c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80176a0:	e9c4 6505 	strd	r6, r5, [r4, #20]
 80176a4:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 80176a8:	1c42      	adds	r2, r0, #1
 80176aa:	2102      	movs	r1, #2
 80176ac:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 80176b0:	f7f9 f8ee 	bl	8010890 <uxr_object_id>
 80176b4:	223c      	movs	r2, #60	@ 0x3c
 80176b6:	6120      	str	r0, [r4, #16]
 80176b8:	4641      	mov	r1, r8
 80176ba:	4638      	mov	r0, r7
 80176bc:	f7f7 ff96 	bl	800f5ec <generate_topic_name>
 80176c0:	b1f0      	cbz	r0, 8017700 <create_topic+0x84>
 80176c2:	4f14      	ldr	r7, [pc, #80]	@ (8017714 <create_topic+0x98>)
 80176c4:	4630      	mov	r0, r6
 80176c6:	2264      	movs	r2, #100	@ 0x64
 80176c8:	4639      	mov	r1, r7
 80176ca:	f7f7 ff5f 	bl	800f58c <generate_type_name>
 80176ce:	b1b8      	cbz	r0, 8017700 <create_topic+0x84>
 80176d0:	6928      	ldr	r0, [r5, #16]
 80176d2:	2306      	movs	r3, #6
 80176d4:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80176d8:	f8cd 8000 	str.w	r8, [sp]
 80176dc:	e9cd 7301 	strd	r7, r3, [sp, #4]
 80176e0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80176e4:	6811      	ldr	r1, [r2, #0]
 80176e6:	696b      	ldr	r3, [r5, #20]
 80176e8:	6922      	ldr	r2, [r4, #16]
 80176ea:	f7f8 fef9 	bl	80104e0 <uxr_buffer_create_topic_bin>
 80176ee:	4602      	mov	r2, r0
 80176f0:	6928      	ldr	r0, [r5, #16]
 80176f2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80176f6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80176fa:	f7f7 fe77 	bl	800f3ec <run_xrce_session>
 80176fe:	b918      	cbnz	r0, 8017708 <create_topic+0x8c>
 8017700:	4620      	mov	r0, r4
 8017702:	f7f7 fd71 	bl	800f1e8 <rmw_uxrce_fini_topic_memory>
 8017706:	2400      	movs	r4, #0
 8017708:	4620      	mov	r0, r4
 801770a:	b004      	add	sp, #16
 801770c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017710:	2000ba74 	.word	0x2000ba74
 8017714:	2000bb60 	.word	0x2000bb60
 8017718:	2000bb24 	.word	0x2000bb24

0801771c <destroy_topic>:
 801771c:	b538      	push	{r3, r4, r5, lr}
 801771e:	6985      	ldr	r5, [r0, #24]
 8017720:	b1d5      	cbz	r5, 8017758 <destroy_topic+0x3c>
 8017722:	4604      	mov	r4, r0
 8017724:	6928      	ldr	r0, [r5, #16]
 8017726:	6922      	ldr	r2, [r4, #16]
 8017728:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801772c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017730:	6819      	ldr	r1, [r3, #0]
 8017732:	f7f8 fe57 	bl	80103e4 <uxr_buffer_delete_entity>
 8017736:	4602      	mov	r2, r0
 8017738:	6928      	ldr	r0, [r5, #16]
 801773a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801773e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017742:	f7f7 fe53 	bl	800f3ec <run_xrce_session>
 8017746:	2800      	cmp	r0, #0
 8017748:	4620      	mov	r0, r4
 801774a:	bf14      	ite	ne
 801774c:	2400      	movne	r4, #0
 801774e:	2402      	moveq	r4, #2
 8017750:	f7f7 fd4a 	bl	800f1e8 <rmw_uxrce_fini_topic_memory>
 8017754:	4620      	mov	r0, r4
 8017756:	bd38      	pop	{r3, r4, r5, pc}
 8017758:	2401      	movs	r4, #1
 801775a:	4620      	mov	r0, r4
 801775c:	bd38      	pop	{r3, r4, r5, pc}
 801775e:	bf00      	nop

08017760 <rmw_send_request>:
 8017760:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017764:	4604      	mov	r4, r0
 8017766:	6800      	ldr	r0, [r0, #0]
 8017768:	b08b      	sub	sp, #44	@ 0x2c
 801776a:	460e      	mov	r6, r1
 801776c:	4615      	mov	r5, r2
 801776e:	b128      	cbz	r0, 801777c <rmw_send_request+0x1c>
 8017770:	4b21      	ldr	r3, [pc, #132]	@ (80177f8 <rmw_send_request+0x98>)
 8017772:	6819      	ldr	r1, [r3, #0]
 8017774:	f7e8 fd54 	bl	8000220 <strcmp>
 8017778:	2800      	cmp	r0, #0
 801777a:	d139      	bne.n	80177f0 <rmw_send_request+0x90>
 801777c:	6864      	ldr	r4, [r4, #4]
 801777e:	6963      	ldr	r3, [r4, #20]
 8017780:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 8017784:	689b      	ldr	r3, [r3, #8]
 8017786:	4798      	blx	r3
 8017788:	f8d0 9004 	ldr.w	r9, [r0, #4]
 801778c:	4630      	mov	r0, r6
 801778e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017792:	4798      	blx	r3
 8017794:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8017798:	9000      	str	r0, [sp, #0]
 801779a:	6922      	ldr	r2, [r4, #16]
 801779c:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 801779e:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80177a2:	ab02      	add	r3, sp, #8
 80177a4:	f7fb f99a 	bl	8012adc <uxr_prepare_output_stream>
 80177a8:	2700      	movs	r7, #0
 80177aa:	6028      	str	r0, [r5, #0]
 80177ac:	606f      	str	r7, [r5, #4]
 80177ae:	b198      	cbz	r0, 80177d8 <rmw_send_request+0x78>
 80177b0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80177b4:	a902      	add	r1, sp, #8
 80177b6:	4630      	mov	r0, r6
 80177b8:	4798      	blx	r3
 80177ba:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 80177be:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80177c2:	2b01      	cmp	r3, #1
 80177c4:	d00c      	beq.n	80177e0 <rmw_send_request+0x80>
 80177c6:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 80177c8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80177cc:	f7f9 feb2 	bl	8011534 <uxr_run_session_until_confirm_delivery>
 80177d0:	4638      	mov	r0, r7
 80177d2:	b00b      	add	sp, #44	@ 0x2c
 80177d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80177d8:	2001      	movs	r0, #1
 80177da:	b00b      	add	sp, #44	@ 0x2c
 80177dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80177e0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80177e4:	f7f9 fae6 	bl	8010db4 <uxr_flash_output_streams>
 80177e8:	4638      	mov	r0, r7
 80177ea:	b00b      	add	sp, #44	@ 0x2c
 80177ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80177f0:	200c      	movs	r0, #12
 80177f2:	b00b      	add	sp, #44	@ 0x2c
 80177f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80177f8:	0801c850 	.word	0x0801c850

080177fc <rmw_take_request>:
 80177fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017800:	4605      	mov	r5, r0
 8017802:	6800      	ldr	r0, [r0, #0]
 8017804:	b089      	sub	sp, #36	@ 0x24
 8017806:	460c      	mov	r4, r1
 8017808:	4690      	mov	r8, r2
 801780a:	461e      	mov	r6, r3
 801780c:	b128      	cbz	r0, 801781a <rmw_take_request+0x1e>
 801780e:	4b28      	ldr	r3, [pc, #160]	@ (80178b0 <rmw_take_request+0xb4>)
 8017810:	6819      	ldr	r1, [r3, #0]
 8017812:	f7e8 fd05 	bl	8000220 <strcmp>
 8017816:	2800      	cmp	r0, #0
 8017818:	d146      	bne.n	80178a8 <rmw_take_request+0xac>
 801781a:	b10e      	cbz	r6, 8017820 <rmw_take_request+0x24>
 801781c:	2300      	movs	r3, #0
 801781e:	7033      	strb	r3, [r6, #0]
 8017820:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8017824:	f7f7 fd64 	bl	800f2f0 <rmw_uxrce_clean_expired_static_input_buffer>
 8017828:	4648      	mov	r0, r9
 801782a:	f7f7 fd39 	bl	800f2a0 <rmw_uxrce_find_static_input_buffer_by_owner>
 801782e:	4607      	mov	r7, r0
 8017830:	b3b0      	cbz	r0, 80178a0 <rmw_take_request+0xa4>
 8017832:	6885      	ldr	r5, [r0, #8]
 8017834:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8017838:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 801783c:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8017840:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8017844:	7423      	strb	r3, [r4, #16]
 8017846:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 801784a:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 801784e:	74e2      	strb	r2, [r4, #19]
 8017850:	f8a4 3011 	strh.w	r3, [r4, #17]
 8017854:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 8017858:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 801785c:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8017860:	61e1      	str	r1, [r4, #28]
 8017862:	6162      	str	r2, [r4, #20]
 8017864:	61a3      	str	r3, [r4, #24]
 8017866:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801786a:	689b      	ldr	r3, [r3, #8]
 801786c:	4798      	blx	r3
 801786e:	6844      	ldr	r4, [r0, #4]
 8017870:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8017874:	f105 0110 	add.w	r1, r5, #16
 8017878:	4668      	mov	r0, sp
 801787a:	f7f5 f907 	bl	800ca8c <ucdr_init_buffer>
 801787e:	68e3      	ldr	r3, [r4, #12]
 8017880:	4641      	mov	r1, r8
 8017882:	4668      	mov	r0, sp
 8017884:	4798      	blx	r3
 8017886:	4639      	mov	r1, r7
 8017888:	4604      	mov	r4, r0
 801788a:	480a      	ldr	r0, [pc, #40]	@ (80178b4 <rmw_take_request+0xb8>)
 801788c:	f7ff fe98 	bl	80175c0 <put_memory>
 8017890:	b106      	cbz	r6, 8017894 <rmw_take_request+0x98>
 8017892:	7034      	strb	r4, [r6, #0]
 8017894:	f084 0001 	eor.w	r0, r4, #1
 8017898:	b2c0      	uxtb	r0, r0
 801789a:	b009      	add	sp, #36	@ 0x24
 801789c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80178a0:	2001      	movs	r0, #1
 80178a2:	b009      	add	sp, #36	@ 0x24
 80178a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80178a8:	200c      	movs	r0, #12
 80178aa:	b009      	add	sp, #36	@ 0x24
 80178ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80178b0:	0801c850 	.word	0x0801c850
 80178b4:	2000ba54 	.word	0x2000ba54

080178b8 <rmw_send_response>:
 80178b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80178ba:	4605      	mov	r5, r0
 80178bc:	6800      	ldr	r0, [r0, #0]
 80178be:	b091      	sub	sp, #68	@ 0x44
 80178c0:	460c      	mov	r4, r1
 80178c2:	4616      	mov	r6, r2
 80178c4:	b128      	cbz	r0, 80178d2 <rmw_send_response+0x1a>
 80178c6:	4b29      	ldr	r3, [pc, #164]	@ (801796c <rmw_send_response+0xb4>)
 80178c8:	6819      	ldr	r1, [r3, #0]
 80178ca:	f7e8 fca9 	bl	8000220 <strcmp>
 80178ce:	2800      	cmp	r0, #0
 80178d0:	d141      	bne.n	8017956 <rmw_send_response+0x9e>
 80178d2:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80178d6:	9306      	str	r3, [sp, #24]
 80178d8:	4623      	mov	r3, r4
 80178da:	9207      	str	r2, [sp, #28]
 80178dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80178e0:	686d      	ldr	r5, [r5, #4]
 80178e2:	789b      	ldrb	r3, [r3, #2]
 80178e4:	68a1      	ldr	r1, [r4, #8]
 80178e6:	f88d 2017 	strb.w	r2, [sp, #23]
 80178ea:	f88d 3016 	strb.w	r3, [sp, #22]
 80178ee:	68e2      	ldr	r2, [r4, #12]
 80178f0:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 80178f4:	6860      	ldr	r0, [r4, #4]
 80178f6:	f8ad 3014 	strh.w	r3, [sp, #20]
 80178fa:	ab02      	add	r3, sp, #8
 80178fc:	c307      	stmia	r3!, {r0, r1, r2}
 80178fe:	696b      	ldr	r3, [r5, #20]
 8017900:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 8017902:	68db      	ldr	r3, [r3, #12]
 8017904:	4798      	blx	r3
 8017906:	6844      	ldr	r4, [r0, #4]
 8017908:	4630      	mov	r0, r6
 801790a:	6923      	ldr	r3, [r4, #16]
 801790c:	4798      	blx	r3
 801790e:	f100 0318 	add.w	r3, r0, #24
 8017912:	6938      	ldr	r0, [r7, #16]
 8017914:	9300      	str	r3, [sp, #0]
 8017916:	692a      	ldr	r2, [r5, #16]
 8017918:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 801791a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801791e:	ab08      	add	r3, sp, #32
 8017920:	f7fb f8dc 	bl	8012adc <uxr_prepare_output_stream>
 8017924:	b910      	cbnz	r0, 801792c <rmw_send_response+0x74>
 8017926:	2001      	movs	r0, #1
 8017928:	b011      	add	sp, #68	@ 0x44
 801792a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801792c:	a902      	add	r1, sp, #8
 801792e:	a808      	add	r0, sp, #32
 8017930:	f7fc f962 	bl	8013bf8 <uxr_serialize_SampleIdentity>
 8017934:	68a3      	ldr	r3, [r4, #8]
 8017936:	a908      	add	r1, sp, #32
 8017938:	4630      	mov	r0, r6
 801793a:	4798      	blx	r3
 801793c:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8017940:	6938      	ldr	r0, [r7, #16]
 8017942:	2b01      	cmp	r3, #1
 8017944:	d00a      	beq.n	801795c <rmw_send_response+0xa4>
 8017946:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8017948:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801794c:	f7f9 fdf2 	bl	8011534 <uxr_run_session_until_confirm_delivery>
 8017950:	2000      	movs	r0, #0
 8017952:	b011      	add	sp, #68	@ 0x44
 8017954:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017956:	200c      	movs	r0, #12
 8017958:	b011      	add	sp, #68	@ 0x44
 801795a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801795c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017960:	f7f9 fa28 	bl	8010db4 <uxr_flash_output_streams>
 8017964:	2000      	movs	r0, #0
 8017966:	b011      	add	sp, #68	@ 0x44
 8017968:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801796a:	bf00      	nop
 801796c:	0801c850 	.word	0x0801c850

08017970 <rmw_take_response>:
 8017970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017974:	4604      	mov	r4, r0
 8017976:	6800      	ldr	r0, [r0, #0]
 8017978:	b088      	sub	sp, #32
 801797a:	4688      	mov	r8, r1
 801797c:	4617      	mov	r7, r2
 801797e:	461d      	mov	r5, r3
 8017980:	b120      	cbz	r0, 801798c <rmw_take_response+0x1c>
 8017982:	4b1e      	ldr	r3, [pc, #120]	@ (80179fc <rmw_take_response+0x8c>)
 8017984:	6819      	ldr	r1, [r3, #0]
 8017986:	f7e8 fc4b 	bl	8000220 <strcmp>
 801798a:	bb78      	cbnz	r0, 80179ec <rmw_take_response+0x7c>
 801798c:	b10d      	cbz	r5, 8017992 <rmw_take_response+0x22>
 801798e:	2300      	movs	r3, #0
 8017990:	702b      	strb	r3, [r5, #0]
 8017992:	6864      	ldr	r4, [r4, #4]
 8017994:	f7f7 fcac 	bl	800f2f0 <rmw_uxrce_clean_expired_static_input_buffer>
 8017998:	4620      	mov	r0, r4
 801799a:	f7f7 fc81 	bl	800f2a0 <rmw_uxrce_find_static_input_buffer_by_owner>
 801799e:	4606      	mov	r6, r0
 80179a0:	b340      	cbz	r0, 80179f4 <rmw_take_response+0x84>
 80179a2:	6963      	ldr	r3, [r4, #20]
 80179a4:	6884      	ldr	r4, [r0, #8]
 80179a6:	68db      	ldr	r3, [r3, #12]
 80179a8:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 80179ac:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 80179b0:	e9c8 0108 	strd	r0, r1, [r8, #32]
 80179b4:	4798      	blx	r3
 80179b6:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80179ba:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 80179be:	f104 0110 	add.w	r1, r4, #16
 80179c2:	4668      	mov	r0, sp
 80179c4:	f7f5 f862 	bl	800ca8c <ucdr_init_buffer>
 80179c8:	4639      	mov	r1, r7
 80179ca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80179ce:	4668      	mov	r0, sp
 80179d0:	4798      	blx	r3
 80179d2:	4631      	mov	r1, r6
 80179d4:	4604      	mov	r4, r0
 80179d6:	480a      	ldr	r0, [pc, #40]	@ (8017a00 <rmw_take_response+0x90>)
 80179d8:	f7ff fdf2 	bl	80175c0 <put_memory>
 80179dc:	b105      	cbz	r5, 80179e0 <rmw_take_response+0x70>
 80179de:	702c      	strb	r4, [r5, #0]
 80179e0:	f084 0001 	eor.w	r0, r4, #1
 80179e4:	b2c0      	uxtb	r0, r0
 80179e6:	b008      	add	sp, #32
 80179e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179ec:	200c      	movs	r0, #12
 80179ee:	b008      	add	sp, #32
 80179f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179f4:	2001      	movs	r0, #1
 80179f6:	b008      	add	sp, #32
 80179f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179fc:	0801c850 	.word	0x0801c850
 8017a00:	2000ba54 	.word	0x2000ba54

08017a04 <rmw_take_with_info>:
 8017a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017a06:	4604      	mov	r4, r0
 8017a08:	6800      	ldr	r0, [r0, #0]
 8017a0a:	b089      	sub	sp, #36	@ 0x24
 8017a0c:	460f      	mov	r7, r1
 8017a0e:	4615      	mov	r5, r2
 8017a10:	b128      	cbz	r0, 8017a1e <rmw_take_with_info+0x1a>
 8017a12:	4b24      	ldr	r3, [pc, #144]	@ (8017aa4 <rmw_take_with_info+0xa0>)
 8017a14:	6819      	ldr	r1, [r3, #0]
 8017a16:	f7e8 fc03 	bl	8000220 <strcmp>
 8017a1a:	2800      	cmp	r0, #0
 8017a1c:	d13e      	bne.n	8017a9c <rmw_take_with_info+0x98>
 8017a1e:	b305      	cbz	r5, 8017a62 <rmw_take_with_info+0x5e>
 8017a20:	6864      	ldr	r4, [r4, #4]
 8017a22:	2300      	movs	r3, #0
 8017a24:	702b      	strb	r3, [r5, #0]
 8017a26:	f7f7 fc63 	bl	800f2f0 <rmw_uxrce_clean_expired_static_input_buffer>
 8017a2a:	4620      	mov	r0, r4
 8017a2c:	f7f7 fc38 	bl	800f2a0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017a30:	4606      	mov	r6, r0
 8017a32:	b1f0      	cbz	r0, 8017a72 <rmw_take_with_info+0x6e>
 8017a34:	6881      	ldr	r1, [r0, #8]
 8017a36:	4668      	mov	r0, sp
 8017a38:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8017a3c:	3110      	adds	r1, #16
 8017a3e:	f7f5 f825 	bl	800ca8c <ucdr_init_buffer>
 8017a42:	69a3      	ldr	r3, [r4, #24]
 8017a44:	4639      	mov	r1, r7
 8017a46:	68db      	ldr	r3, [r3, #12]
 8017a48:	4668      	mov	r0, sp
 8017a4a:	4798      	blx	r3
 8017a4c:	4631      	mov	r1, r6
 8017a4e:	4604      	mov	r4, r0
 8017a50:	4815      	ldr	r0, [pc, #84]	@ (8017aa8 <rmw_take_with_info+0xa4>)
 8017a52:	f7ff fdb5 	bl	80175c0 <put_memory>
 8017a56:	702c      	strb	r4, [r5, #0]
 8017a58:	f084 0001 	eor.w	r0, r4, #1
 8017a5c:	b2c0      	uxtb	r0, r0
 8017a5e:	b009      	add	sp, #36	@ 0x24
 8017a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017a62:	6864      	ldr	r4, [r4, #4]
 8017a64:	f7f7 fc44 	bl	800f2f0 <rmw_uxrce_clean_expired_static_input_buffer>
 8017a68:	4620      	mov	r0, r4
 8017a6a:	f7f7 fc19 	bl	800f2a0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017a6e:	4605      	mov	r5, r0
 8017a70:	b910      	cbnz	r0, 8017a78 <rmw_take_with_info+0x74>
 8017a72:	2001      	movs	r0, #1
 8017a74:	b009      	add	sp, #36	@ 0x24
 8017a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017a78:	68a9      	ldr	r1, [r5, #8]
 8017a7a:	4668      	mov	r0, sp
 8017a7c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8017a80:	3110      	adds	r1, #16
 8017a82:	f7f5 f803 	bl	800ca8c <ucdr_init_buffer>
 8017a86:	69a3      	ldr	r3, [r4, #24]
 8017a88:	4639      	mov	r1, r7
 8017a8a:	68db      	ldr	r3, [r3, #12]
 8017a8c:	4668      	mov	r0, sp
 8017a8e:	4798      	blx	r3
 8017a90:	4629      	mov	r1, r5
 8017a92:	4604      	mov	r4, r0
 8017a94:	4804      	ldr	r0, [pc, #16]	@ (8017aa8 <rmw_take_with_info+0xa4>)
 8017a96:	f7ff fd93 	bl	80175c0 <put_memory>
 8017a9a:	e7dd      	b.n	8017a58 <rmw_take_with_info+0x54>
 8017a9c:	200c      	movs	r0, #12
 8017a9e:	b009      	add	sp, #36	@ 0x24
 8017aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017aa2:	bf00      	nop
 8017aa4:	0801c850 	.word	0x0801c850
 8017aa8:	2000ba54 	.word	0x2000ba54

08017aac <rmw_wait>:
 8017aac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017ab0:	b089      	sub	sp, #36	@ 0x24
 8017ab2:	4605      	mov	r5, r0
 8017ab4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8017ab6:	460e      	mov	r6, r1
 8017ab8:	4698      	mov	r8, r3
 8017aba:	4691      	mov	r9, r2
 8017abc:	2a00      	cmp	r2, #0
 8017abe:	f000 810a 	beq.w	8017cd6 <rmw_wait+0x22a>
 8017ac2:	b16c      	cbz	r4, 8017ae0 <rmw_wait+0x34>
 8017ac4:	4bae      	ldr	r3, [pc, #696]	@ (8017d80 <rmw_wait+0x2d4>)
 8017ac6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017ac8:	af04      	add	r7, sp, #16
 8017aca:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8017ace:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8017ad2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8017ad6:	f7ff faaf 	bl	8017038 <rmw_time_equal>
 8017ada:	2800      	cmp	r0, #0
 8017adc:	f000 8127 	beq.w	8017d2e <rmw_wait+0x282>
 8017ae0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8017ae4:	f7f7 fc04 	bl	800f2f0 <rmw_uxrce_clean_expired_static_input_buffer>
 8017ae8:	4ba6      	ldr	r3, [pc, #664]	@ (8017d84 <rmw_wait+0x2d8>)
 8017aea:	681c      	ldr	r4, [r3, #0]
 8017aec:	b14c      	cbz	r4, 8017b02 <rmw_wait+0x56>
 8017aee:	4623      	mov	r3, r4
 8017af0:	2100      	movs	r1, #0
 8017af2:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8017af6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017afa:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8017afe:	2b00      	cmp	r3, #0
 8017b00:	d1f7      	bne.n	8017af2 <rmw_wait+0x46>
 8017b02:	f1b9 0f00 	cmp.w	r9, #0
 8017b06:	d011      	beq.n	8017b2c <rmw_wait+0x80>
 8017b08:	f8d9 1000 	ldr.w	r1, [r9]
 8017b0c:	b171      	cbz	r1, 8017b2c <rmw_wait+0x80>
 8017b0e:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8017b12:	2300      	movs	r3, #0
 8017b14:	2001      	movs	r0, #1
 8017b16:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8017b1a:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8017b1c:	6912      	ldr	r2, [r2, #16]
 8017b1e:	3301      	adds	r3, #1
 8017b20:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017b24:	4299      	cmp	r1, r3
 8017b26:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8017b2a:	d1f4      	bne.n	8017b16 <rmw_wait+0x6a>
 8017b2c:	f1b8 0f00 	cmp.w	r8, #0
 8017b30:	d011      	beq.n	8017b56 <rmw_wait+0xaa>
 8017b32:	f8d8 1000 	ldr.w	r1, [r8]
 8017b36:	b171      	cbz	r1, 8017b56 <rmw_wait+0xaa>
 8017b38:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8017b3c:	2300      	movs	r3, #0
 8017b3e:	2001      	movs	r0, #1
 8017b40:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8017b44:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8017b46:	6912      	ldr	r2, [r2, #16]
 8017b48:	3301      	adds	r3, #1
 8017b4a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017b4e:	4299      	cmp	r1, r3
 8017b50:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8017b54:	d1f4      	bne.n	8017b40 <rmw_wait+0x94>
 8017b56:	b185      	cbz	r5, 8017b7a <rmw_wait+0xce>
 8017b58:	6829      	ldr	r1, [r5, #0]
 8017b5a:	b171      	cbz	r1, 8017b7a <rmw_wait+0xce>
 8017b5c:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8017b60:	2300      	movs	r3, #0
 8017b62:	2001      	movs	r0, #1
 8017b64:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8017b68:	6a12      	ldr	r2, [r2, #32]
 8017b6a:	6912      	ldr	r2, [r2, #16]
 8017b6c:	3301      	adds	r3, #1
 8017b6e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017b72:	4299      	cmp	r1, r3
 8017b74:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8017b78:	d1f4      	bne.n	8017b64 <rmw_wait+0xb8>
 8017b7a:	b34c      	cbz	r4, 8017bd0 <rmw_wait+0x124>
 8017b7c:	4622      	mov	r2, r4
 8017b7e:	2300      	movs	r3, #0
 8017b80:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8017b84:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8017b88:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8017b8c:	440b      	add	r3, r1
 8017b8e:	b2db      	uxtb	r3, r3
 8017b90:	2a00      	cmp	r2, #0
 8017b92:	d1f5      	bne.n	8017b80 <rmw_wait+0xd4>
 8017b94:	2b00      	cmp	r3, #0
 8017b96:	f000 8084 	beq.w	8017ca2 <rmw_wait+0x1f6>
 8017b9a:	1c7a      	adds	r2, r7, #1
 8017b9c:	d00d      	beq.n	8017bba <rmw_wait+0x10e>
 8017b9e:	ee07 7a90 	vmov	s15, r7
 8017ba2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8017ba6:	ee07 3a90 	vmov	s15, r3
 8017baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017bae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8017bb2:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8017bb6:	ee17 7a90 	vmov	r7, s15
 8017bba:	68a0      	ldr	r0, [r4, #8]
 8017bbc:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8017bc0:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8017bc4:	2b00      	cmp	r3, #0
 8017bc6:	f040 8090 	bne.w	8017cea <rmw_wait+0x23e>
 8017bca:	6864      	ldr	r4, [r4, #4]
 8017bcc:	2c00      	cmp	r4, #0
 8017bce:	d1f4      	bne.n	8017bba <rmw_wait+0x10e>
 8017bd0:	f1b9 0f00 	cmp.w	r9, #0
 8017bd4:	f000 80bc 	beq.w	8017d50 <rmw_wait+0x2a4>
 8017bd8:	f8d9 7000 	ldr.w	r7, [r9]
 8017bdc:	2f00      	cmp	r7, #0
 8017bde:	f000 808e 	beq.w	8017cfe <rmw_wait+0x252>
 8017be2:	2400      	movs	r4, #0
 8017be4:	4627      	mov	r7, r4
 8017be6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8017bea:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017bee:	f7f7 fb57 	bl	800f2a0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017bf2:	2800      	cmp	r0, #0
 8017bf4:	d05f      	beq.n	8017cb6 <rmw_wait+0x20a>
 8017bf6:	f8d9 3000 	ldr.w	r3, [r9]
 8017bfa:	3401      	adds	r4, #1
 8017bfc:	42a3      	cmp	r3, r4
 8017bfe:	f04f 0701 	mov.w	r7, #1
 8017c02:	d8f0      	bhi.n	8017be6 <rmw_wait+0x13a>
 8017c04:	f1b8 0f00 	cmp.w	r8, #0
 8017c08:	d012      	beq.n	8017c30 <rmw_wait+0x184>
 8017c0a:	f8d8 3000 	ldr.w	r3, [r8]
 8017c0e:	b17b      	cbz	r3, 8017c30 <rmw_wait+0x184>
 8017c10:	2400      	movs	r4, #0
 8017c12:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017c16:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017c1a:	f7f7 fb41 	bl	800f2a0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017c1e:	2800      	cmp	r0, #0
 8017c20:	d051      	beq.n	8017cc6 <rmw_wait+0x21a>
 8017c22:	f8d8 3000 	ldr.w	r3, [r8]
 8017c26:	3401      	adds	r4, #1
 8017c28:	42a3      	cmp	r3, r4
 8017c2a:	f04f 0701 	mov.w	r7, #1
 8017c2e:	d8f0      	bhi.n	8017c12 <rmw_wait+0x166>
 8017c30:	b1dd      	cbz	r5, 8017c6a <rmw_wait+0x1be>
 8017c32:	682b      	ldr	r3, [r5, #0]
 8017c34:	b1cb      	cbz	r3, 8017c6a <rmw_wait+0x1be>
 8017c36:	2400      	movs	r4, #0
 8017c38:	686b      	ldr	r3, [r5, #4]
 8017c3a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017c3e:	f7f7 fb2f 	bl	800f2a0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017c42:	b158      	cbz	r0, 8017c5c <rmw_wait+0x1b0>
 8017c44:	682b      	ldr	r3, [r5, #0]
 8017c46:	3401      	adds	r4, #1
 8017c48:	42a3      	cmp	r3, r4
 8017c4a:	d969      	bls.n	8017d20 <rmw_wait+0x274>
 8017c4c:	686b      	ldr	r3, [r5, #4]
 8017c4e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017c52:	2701      	movs	r7, #1
 8017c54:	f7f7 fb24 	bl	800f2a0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017c58:	2800      	cmp	r0, #0
 8017c5a:	d1f3      	bne.n	8017c44 <rmw_wait+0x198>
 8017c5c:	e9d5 3200 	ldrd	r3, r2, [r5]
 8017c60:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8017c64:	3401      	adds	r4, #1
 8017c66:	42a3      	cmp	r3, r4
 8017c68:	d8e6      	bhi.n	8017c38 <rmw_wait+0x18c>
 8017c6a:	b1a6      	cbz	r6, 8017c96 <rmw_wait+0x1ea>
 8017c6c:	6834      	ldr	r4, [r6, #0]
 8017c6e:	b194      	cbz	r4, 8017c96 <rmw_wait+0x1ea>
 8017c70:	2300      	movs	r3, #0
 8017c72:	461d      	mov	r5, r3
 8017c74:	e004      	b.n	8017c80 <rmw_wait+0x1d4>
 8017c76:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8017c7a:	3301      	adds	r3, #1
 8017c7c:	42a3      	cmp	r3, r4
 8017c7e:	d00a      	beq.n	8017c96 <rmw_wait+0x1ea>
 8017c80:	6870      	ldr	r0, [r6, #4]
 8017c82:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8017c86:	7c0a      	ldrb	r2, [r1, #16]
 8017c88:	2a00      	cmp	r2, #0
 8017c8a:	d0f4      	beq.n	8017c76 <rmw_wait+0x1ca>
 8017c8c:	3301      	adds	r3, #1
 8017c8e:	42a3      	cmp	r3, r4
 8017c90:	740d      	strb	r5, [r1, #16]
 8017c92:	4617      	mov	r7, r2
 8017c94:	d1f4      	bne.n	8017c80 <rmw_wait+0x1d4>
 8017c96:	2f00      	cmp	r7, #0
 8017c98:	d03e      	beq.n	8017d18 <rmw_wait+0x26c>
 8017c9a:	2000      	movs	r0, #0
 8017c9c:	b009      	add	sp, #36	@ 0x24
 8017c9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017ca2:	68a0      	ldr	r0, [r4, #8]
 8017ca4:	2100      	movs	r1, #0
 8017ca6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017caa:	f7f9 fc09 	bl	80114c0 <uxr_run_session_timeout>
 8017cae:	6864      	ldr	r4, [r4, #4]
 8017cb0:	2c00      	cmp	r4, #0
 8017cb2:	d1f6      	bne.n	8017ca2 <rmw_wait+0x1f6>
 8017cb4:	e78c      	b.n	8017bd0 <rmw_wait+0x124>
 8017cb6:	e9d9 3200 	ldrd	r3, r2, [r9]
 8017cba:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8017cbe:	3401      	adds	r4, #1
 8017cc0:	42a3      	cmp	r3, r4
 8017cc2:	d890      	bhi.n	8017be6 <rmw_wait+0x13a>
 8017cc4:	e79e      	b.n	8017c04 <rmw_wait+0x158>
 8017cc6:	e9d8 3200 	ldrd	r3, r2, [r8]
 8017cca:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8017cce:	3401      	adds	r4, #1
 8017cd0:	429c      	cmp	r4, r3
 8017cd2:	d39e      	bcc.n	8017c12 <rmw_wait+0x166>
 8017cd4:	e7ac      	b.n	8017c30 <rmw_wait+0x184>
 8017cd6:	2b00      	cmp	r3, #0
 8017cd8:	f47f aef3 	bne.w	8017ac2 <rmw_wait+0x16>
 8017cdc:	2800      	cmp	r0, #0
 8017cde:	f47f aef0 	bne.w	8017ac2 <rmw_wait+0x16>
 8017ce2:	2900      	cmp	r1, #0
 8017ce4:	f47f aeed 	bne.w	8017ac2 <rmw_wait+0x16>
 8017ce8:	e7d7      	b.n	8017c9a <rmw_wait+0x1ee>
 8017cea:	4639      	mov	r1, r7
 8017cec:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017cf0:	f7f9 fc00 	bl	80114f4 <uxr_run_session_until_data>
 8017cf4:	6864      	ldr	r4, [r4, #4]
 8017cf6:	2c00      	cmp	r4, #0
 8017cf8:	f47f af5f 	bne.w	8017bba <rmw_wait+0x10e>
 8017cfc:	e768      	b.n	8017bd0 <rmw_wait+0x124>
 8017cfe:	f1b8 0f00 	cmp.w	r8, #0
 8017d02:	d032      	beq.n	8017d6a <rmw_wait+0x2be>
 8017d04:	f8d8 3000 	ldr.w	r3, [r8]
 8017d08:	2b00      	cmp	r3, #0
 8017d0a:	d181      	bne.n	8017c10 <rmw_wait+0x164>
 8017d0c:	461f      	mov	r7, r3
 8017d0e:	2d00      	cmp	r5, #0
 8017d10:	d18f      	bne.n	8017c32 <rmw_wait+0x186>
 8017d12:	462f      	mov	r7, r5
 8017d14:	2e00      	cmp	r6, #0
 8017d16:	d1a9      	bne.n	8017c6c <rmw_wait+0x1c0>
 8017d18:	2002      	movs	r0, #2
 8017d1a:	b009      	add	sp, #36	@ 0x24
 8017d1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017d20:	2e00      	cmp	r6, #0
 8017d22:	d0ba      	beq.n	8017c9a <rmw_wait+0x1ee>
 8017d24:	6834      	ldr	r4, [r6, #0]
 8017d26:	2701      	movs	r7, #1
 8017d28:	2c00      	cmp	r4, #0
 8017d2a:	d1a1      	bne.n	8017c70 <rmw_wait+0x1c4>
 8017d2c:	e7b5      	b.n	8017c9a <rmw_wait+0x1ee>
 8017d2e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8017d32:	f7ff f9d5 	bl	80170e0 <rmw_time_total_nsec>
 8017d36:	2300      	movs	r3, #0
 8017d38:	4a13      	ldr	r2, [pc, #76]	@ (8017d88 <rmw_wait+0x2dc>)
 8017d3a:	f7e8 ffe5 	bl	8000d08 <__aeabi_uldivmod>
 8017d3e:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8017d42:	f171 0300 	sbcs.w	r3, r1, #0
 8017d46:	4607      	mov	r7, r0
 8017d48:	bfa8      	it	ge
 8017d4a:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 8017d4e:	e6c9      	b.n	8017ae4 <rmw_wait+0x38>
 8017d50:	f1b8 0f00 	cmp.w	r8, #0
 8017d54:	d009      	beq.n	8017d6a <rmw_wait+0x2be>
 8017d56:	f8d8 3000 	ldr.w	r3, [r8]
 8017d5a:	464f      	mov	r7, r9
 8017d5c:	2b00      	cmp	r3, #0
 8017d5e:	f47f af57 	bne.w	8017c10 <rmw_wait+0x164>
 8017d62:	2d00      	cmp	r5, #0
 8017d64:	f47f af65 	bne.w	8017c32 <rmw_wait+0x186>
 8017d68:	e7d3      	b.n	8017d12 <rmw_wait+0x266>
 8017d6a:	b17d      	cbz	r5, 8017d8c <rmw_wait+0x2e0>
 8017d6c:	682b      	ldr	r3, [r5, #0]
 8017d6e:	4647      	mov	r7, r8
 8017d70:	2b00      	cmp	r3, #0
 8017d72:	f47f af60 	bne.w	8017c36 <rmw_wait+0x18a>
 8017d76:	2e00      	cmp	r6, #0
 8017d78:	f47f af78 	bne.w	8017c6c <rmw_wait+0x1c0>
 8017d7c:	e7cc      	b.n	8017d18 <rmw_wait+0x26c>
 8017d7e:	bf00      	nop
 8017d80:	0801b260 	.word	0x0801b260
 8017d84:	2000ba44 	.word	0x2000ba44
 8017d88:	000f4240 	.word	0x000f4240
 8017d8c:	2e00      	cmp	r6, #0
 8017d8e:	d0c3      	beq.n	8017d18 <rmw_wait+0x26c>
 8017d90:	6834      	ldr	r4, [r6, #0]
 8017d92:	462f      	mov	r7, r5
 8017d94:	2c00      	cmp	r4, #0
 8017d96:	f47f af6b 	bne.w	8017c70 <rmw_wait+0x1c4>
 8017d9a:	e7bd      	b.n	8017d18 <rmw_wait+0x26c>

08017d9c <rmw_create_wait_set>:
 8017d9c:	b508      	push	{r3, lr}
 8017d9e:	4803      	ldr	r0, [pc, #12]	@ (8017dac <rmw_create_wait_set+0x10>)
 8017da0:	f7ff fbfe 	bl	80175a0 <get_memory>
 8017da4:	b108      	cbz	r0, 8017daa <rmw_create_wait_set+0xe>
 8017da6:	6880      	ldr	r0, [r0, #8]
 8017da8:	3010      	adds	r0, #16
 8017daa:	bd08      	pop	{r3, pc}
 8017dac:	2000ba84 	.word	0x2000ba84

08017db0 <rmw_destroy_wait_set>:
 8017db0:	b508      	push	{r3, lr}
 8017db2:	4b08      	ldr	r3, [pc, #32]	@ (8017dd4 <rmw_destroy_wait_set+0x24>)
 8017db4:	6819      	ldr	r1, [r3, #0]
 8017db6:	b911      	cbnz	r1, 8017dbe <rmw_destroy_wait_set+0xe>
 8017db8:	e00a      	b.n	8017dd0 <rmw_destroy_wait_set+0x20>
 8017dba:	6849      	ldr	r1, [r1, #4]
 8017dbc:	b141      	cbz	r1, 8017dd0 <rmw_destroy_wait_set+0x20>
 8017dbe:	688b      	ldr	r3, [r1, #8]
 8017dc0:	3310      	adds	r3, #16
 8017dc2:	4298      	cmp	r0, r3
 8017dc4:	d1f9      	bne.n	8017dba <rmw_destroy_wait_set+0xa>
 8017dc6:	4803      	ldr	r0, [pc, #12]	@ (8017dd4 <rmw_destroy_wait_set+0x24>)
 8017dc8:	f7ff fbfa 	bl	80175c0 <put_memory>
 8017dcc:	2000      	movs	r0, #0
 8017dce:	bd08      	pop	{r3, pc}
 8017dd0:	2001      	movs	r0, #1
 8017dd2:	bd08      	pop	{r3, pc}
 8017dd4:	2000ba84 	.word	0x2000ba84

08017dd8 <sensor_msgs__msg__Imu__init>:
 8017dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ddc:	4605      	mov	r5, r0
 8017dde:	b3c0      	cbz	r0, 8017e52 <sensor_msgs__msg__Imu__init+0x7a>
 8017de0:	f000 f86a 	bl	8017eb8 <std_msgs__msg__Header__init>
 8017de4:	4604      	mov	r4, r0
 8017de6:	b310      	cbz	r0, 8017e2e <sensor_msgs__msg__Imu__init+0x56>
 8017de8:	f105 0618 	add.w	r6, r5, #24
 8017dec:	4630      	mov	r0, r6
 8017dee:	f000 f89b 	bl	8017f28 <geometry_msgs__msg__Quaternion__init>
 8017df2:	4604      	mov	r4, r0
 8017df4:	2800      	cmp	r0, #0
 8017df6:	d040      	beq.n	8017e7a <sensor_msgs__msg__Imu__init+0xa2>
 8017df8:	f105 0780 	add.w	r7, r5, #128	@ 0x80
 8017dfc:	4638      	mov	r0, r7
 8017dfe:	f7f7 ffab 	bl	800fd58 <geometry_msgs__msg__Vector3__init>
 8017e02:	4604      	mov	r4, r0
 8017e04:	b348      	cbz	r0, 8017e5a <sensor_msgs__msg__Imu__init+0x82>
 8017e06:	f105 08e0 	add.w	r8, r5, #224	@ 0xe0
 8017e0a:	4640      	mov	r0, r8
 8017e0c:	f7f7 ffa4 	bl	800fd58 <geometry_msgs__msg__Vector3__init>
 8017e10:	4604      	mov	r4, r0
 8017e12:	b9d8      	cbnz	r0, 8017e4c <sensor_msgs__msg__Imu__init+0x74>
 8017e14:	4628      	mov	r0, r5
 8017e16:	f000 f873 	bl	8017f00 <std_msgs__msg__Header__fini>
 8017e1a:	4630      	mov	r0, r6
 8017e1c:	f000 f898 	bl	8017f50 <geometry_msgs__msg__Quaternion__fini>
 8017e20:	4638      	mov	r0, r7
 8017e22:	f7f7 ff9d 	bl	800fd60 <geometry_msgs__msg__Vector3__fini>
 8017e26:	4640      	mov	r0, r8
 8017e28:	f7f7 ff9a 	bl	800fd60 <geometry_msgs__msg__Vector3__fini>
 8017e2c:	e00e      	b.n	8017e4c <sensor_msgs__msg__Imu__init+0x74>
 8017e2e:	4628      	mov	r0, r5
 8017e30:	f000 f866 	bl	8017f00 <std_msgs__msg__Header__fini>
 8017e34:	f105 0018 	add.w	r0, r5, #24
 8017e38:	f000 f88a 	bl	8017f50 <geometry_msgs__msg__Quaternion__fini>
 8017e3c:	f105 0080 	add.w	r0, r5, #128	@ 0x80
 8017e40:	f7f7 ff8e 	bl	800fd60 <geometry_msgs__msg__Vector3__fini>
 8017e44:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 8017e48:	f7f7 ff8a 	bl	800fd60 <geometry_msgs__msg__Vector3__fini>
 8017e4c:	4620      	mov	r0, r4
 8017e4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e52:	4604      	mov	r4, r0
 8017e54:	4620      	mov	r0, r4
 8017e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e5a:	4628      	mov	r0, r5
 8017e5c:	f000 f850 	bl	8017f00 <std_msgs__msg__Header__fini>
 8017e60:	4630      	mov	r0, r6
 8017e62:	f000 f875 	bl	8017f50 <geometry_msgs__msg__Quaternion__fini>
 8017e66:	4638      	mov	r0, r7
 8017e68:	f7f7 ff7a 	bl	800fd60 <geometry_msgs__msg__Vector3__fini>
 8017e6c:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 8017e70:	f7f7 ff76 	bl	800fd60 <geometry_msgs__msg__Vector3__fini>
 8017e74:	4620      	mov	r0, r4
 8017e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e7a:	4628      	mov	r0, r5
 8017e7c:	f000 f840 	bl	8017f00 <std_msgs__msg__Header__fini>
 8017e80:	4630      	mov	r0, r6
 8017e82:	e7d9      	b.n	8017e38 <sensor_msgs__msg__Imu__init+0x60>

08017e84 <sensor_msgs__msg__Imu__fini>:
 8017e84:	b188      	cbz	r0, 8017eaa <sensor_msgs__msg__Imu__fini+0x26>
 8017e86:	b510      	push	{r4, lr}
 8017e88:	4604      	mov	r4, r0
 8017e8a:	f000 f839 	bl	8017f00 <std_msgs__msg__Header__fini>
 8017e8e:	f104 0018 	add.w	r0, r4, #24
 8017e92:	f000 f85d 	bl	8017f50 <geometry_msgs__msg__Quaternion__fini>
 8017e96:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 8017e9a:	f7f7 ff61 	bl	800fd60 <geometry_msgs__msg__Vector3__fini>
 8017e9e:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 8017ea2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017ea6:	f7f7 bf5b 	b.w	800fd60 <geometry_msgs__msg__Vector3__fini>
 8017eaa:	4770      	bx	lr

08017eac <std_msgs__msg__Bool__init>:
 8017eac:	3800      	subs	r0, #0
 8017eae:	bf18      	it	ne
 8017eb0:	2001      	movne	r0, #1
 8017eb2:	4770      	bx	lr

08017eb4 <std_msgs__msg__Bool__fini>:
 8017eb4:	4770      	bx	lr
 8017eb6:	bf00      	nop

08017eb8 <std_msgs__msg__Header__init>:
 8017eb8:	b570      	push	{r4, r5, r6, lr}
 8017eba:	4605      	mov	r5, r0
 8017ebc:	b1a8      	cbz	r0, 8017eea <std_msgs__msg__Header__init+0x32>
 8017ebe:	f000 f82b 	bl	8017f18 <builtin_interfaces__msg__Time__init>
 8017ec2:	4604      	mov	r4, r0
 8017ec4:	b140      	cbz	r0, 8017ed8 <std_msgs__msg__Header__init+0x20>
 8017ec6:	f105 0608 	add.w	r6, r5, #8
 8017eca:	4630      	mov	r0, r6
 8017ecc:	f001 f972 	bl	80191b4 <rosidl_runtime_c__String__init>
 8017ed0:	4604      	mov	r4, r0
 8017ed2:	b168      	cbz	r0, 8017ef0 <std_msgs__msg__Header__init+0x38>
 8017ed4:	4620      	mov	r0, r4
 8017ed6:	bd70      	pop	{r4, r5, r6, pc}
 8017ed8:	4628      	mov	r0, r5
 8017eda:	f000 f821 	bl	8017f20 <builtin_interfaces__msg__Time__fini>
 8017ede:	f105 0008 	add.w	r0, r5, #8
 8017ee2:	f001 f97d 	bl	80191e0 <rosidl_runtime_c__String__fini>
 8017ee6:	4620      	mov	r0, r4
 8017ee8:	bd70      	pop	{r4, r5, r6, pc}
 8017eea:	4604      	mov	r4, r0
 8017eec:	4620      	mov	r0, r4
 8017eee:	bd70      	pop	{r4, r5, r6, pc}
 8017ef0:	4628      	mov	r0, r5
 8017ef2:	f000 f815 	bl	8017f20 <builtin_interfaces__msg__Time__fini>
 8017ef6:	4630      	mov	r0, r6
 8017ef8:	f001 f972 	bl	80191e0 <rosidl_runtime_c__String__fini>
 8017efc:	e7ea      	b.n	8017ed4 <std_msgs__msg__Header__init+0x1c>
 8017efe:	bf00      	nop

08017f00 <std_msgs__msg__Header__fini>:
 8017f00:	b148      	cbz	r0, 8017f16 <std_msgs__msg__Header__fini+0x16>
 8017f02:	b510      	push	{r4, lr}
 8017f04:	4604      	mov	r4, r0
 8017f06:	f000 f80b 	bl	8017f20 <builtin_interfaces__msg__Time__fini>
 8017f0a:	f104 0008 	add.w	r0, r4, #8
 8017f0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017f12:	f001 b965 	b.w	80191e0 <rosidl_runtime_c__String__fini>
 8017f16:	4770      	bx	lr

08017f18 <builtin_interfaces__msg__Time__init>:
 8017f18:	3800      	subs	r0, #0
 8017f1a:	bf18      	it	ne
 8017f1c:	2001      	movne	r0, #1
 8017f1e:	4770      	bx	lr

08017f20 <builtin_interfaces__msg__Time__fini>:
 8017f20:	4770      	bx	lr
 8017f22:	bf00      	nop
 8017f24:	0000      	movs	r0, r0
	...

08017f28 <geometry_msgs__msg__Quaternion__init>:
 8017f28:	b160      	cbz	r0, 8017f44 <geometry_msgs__msg__Quaternion__init+0x1c>
 8017f2a:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8017f48 <geometry_msgs__msg__Quaternion__init+0x20>
 8017f2e:	2200      	movs	r2, #0
 8017f30:	2300      	movs	r3, #0
 8017f32:	e9c0 2300 	strd	r2, r3, [r0]
 8017f36:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8017f3a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8017f3e:	ed80 7b06 	vstr	d7, [r0, #24]
 8017f42:	2001      	movs	r0, #1
 8017f44:	4770      	bx	lr
 8017f46:	bf00      	nop
 8017f48:	00000000 	.word	0x00000000
 8017f4c:	3ff00000 	.word	0x3ff00000

08017f50 <geometry_msgs__msg__Quaternion__fini>:
 8017f50:	4770      	bx	lr
 8017f52:	bf00      	nop

08017f54 <ucdr_serialize_string>:
 8017f54:	b510      	push	{r4, lr}
 8017f56:	b082      	sub	sp, #8
 8017f58:	4604      	mov	r4, r0
 8017f5a:	4608      	mov	r0, r1
 8017f5c:	9101      	str	r1, [sp, #4]
 8017f5e:	f7e8 f969 	bl	8000234 <strlen>
 8017f62:	9901      	ldr	r1, [sp, #4]
 8017f64:	1c42      	adds	r2, r0, #1
 8017f66:	4620      	mov	r0, r4
 8017f68:	b002      	add	sp, #8
 8017f6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017f6e:	f7f8 b9e1 	b.w	8010334 <ucdr_serialize_sequence_char>
 8017f72:	bf00      	nop

08017f74 <ucdr_deserialize_string>:
 8017f74:	b500      	push	{lr}
 8017f76:	b083      	sub	sp, #12
 8017f78:	ab01      	add	r3, sp, #4
 8017f7a:	f7f8 f9ed 	bl	8010358 <ucdr_deserialize_sequence_char>
 8017f7e:	b003      	add	sp, #12
 8017f80:	f85d fb04 	ldr.w	pc, [sp], #4

08017f84 <uxr_init_input_best_effort_stream>:
 8017f84:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017f88:	8003      	strh	r3, [r0, #0]
 8017f8a:	4770      	bx	lr

08017f8c <uxr_reset_input_best_effort_stream>:
 8017f8c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017f90:	8003      	strh	r3, [r0, #0]
 8017f92:	4770      	bx	lr

08017f94 <uxr_receive_best_effort_message>:
 8017f94:	b538      	push	{r3, r4, r5, lr}
 8017f96:	4604      	mov	r4, r0
 8017f98:	8800      	ldrh	r0, [r0, #0]
 8017f9a:	460d      	mov	r5, r1
 8017f9c:	f000 fd42 	bl	8018a24 <uxr_seq_num_cmp>
 8017fa0:	4603      	mov	r3, r0
 8017fa2:	2b00      	cmp	r3, #0
 8017fa4:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8017fa8:	bfb8      	it	lt
 8017faa:	8025      	strhlt	r5, [r4, #0]
 8017fac:	bd38      	pop	{r3, r4, r5, pc}
 8017fae:	bf00      	nop

08017fb0 <on_full_input_buffer>:
 8017fb0:	b570      	push	{r4, r5, r6, lr}
 8017fb2:	4605      	mov	r5, r0
 8017fb4:	460c      	mov	r4, r1
 8017fb6:	682b      	ldr	r3, [r5, #0]
 8017fb8:	6809      	ldr	r1, [r1, #0]
 8017fba:	8920      	ldrh	r0, [r4, #8]
 8017fbc:	6862      	ldr	r2, [r4, #4]
 8017fbe:	fbb2 f2f0 	udiv	r2, r2, r0
 8017fc2:	eba3 0c01 	sub.w	ip, r3, r1
 8017fc6:	fbbc fcf2 	udiv	ip, ip, r2
 8017fca:	f10c 0c01 	add.w	ip, ip, #1
 8017fce:	fa1f f38c 	uxth.w	r3, ip
 8017fd2:	fbb3 f6f0 	udiv	r6, r3, r0
 8017fd6:	fb00 3316 	mls	r3, r0, r6, r3
 8017fda:	b29b      	uxth	r3, r3
 8017fdc:	fb02 f303 	mul.w	r3, r2, r3
 8017fe0:	1d18      	adds	r0, r3, #4
 8017fe2:	4408      	add	r0, r1
 8017fe4:	7d26      	ldrb	r6, [r4, #20]
 8017fe6:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8017fea:	b116      	cbz	r6, 8017ff2 <on_full_input_buffer+0x42>
 8017fec:	2600      	movs	r6, #0
 8017fee:	f840 6c04 	str.w	r6, [r0, #-4]
 8017ff2:	2a03      	cmp	r2, #3
 8017ff4:	d801      	bhi.n	8017ffa <on_full_input_buffer+0x4a>
 8017ff6:	2001      	movs	r0, #1
 8017ff8:	bd70      	pop	{r4, r5, r6, pc}
 8017ffa:	3308      	adds	r3, #8
 8017ffc:	4419      	add	r1, r3
 8017ffe:	4628      	mov	r0, r5
 8018000:	692b      	ldr	r3, [r5, #16]
 8018002:	3a04      	subs	r2, #4
 8018004:	f7f4 fd3a 	bl	800ca7c <ucdr_init_buffer_origin>
 8018008:	4628      	mov	r0, r5
 801800a:	4903      	ldr	r1, [pc, #12]	@ (8018018 <on_full_input_buffer+0x68>)
 801800c:	4622      	mov	r2, r4
 801800e:	f7f4 fd11 	bl	800ca34 <ucdr_set_on_full_buffer_callback>
 8018012:	2000      	movs	r0, #0
 8018014:	bd70      	pop	{r4, r5, r6, pc}
 8018016:	bf00      	nop
 8018018:	08017fb1 	.word	0x08017fb1

0801801c <uxr_init_input_reliable_stream>:
 801801c:	b500      	push	{lr}
 801801e:	e9c0 1200 	strd	r1, r2, [r0]
 8018022:	f04f 0e00 	mov.w	lr, #0
 8018026:	9a01      	ldr	r2, [sp, #4]
 8018028:	8103      	strh	r3, [r0, #8]
 801802a:	6102      	str	r2, [r0, #16]
 801802c:	f880 e014 	strb.w	lr, [r0, #20]
 8018030:	b1d3      	cbz	r3, 8018068 <uxr_init_input_reliable_stream+0x4c>
 8018032:	f8c1 e000 	str.w	lr, [r1]
 8018036:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801803a:	f1bc 0f01 	cmp.w	ip, #1
 801803e:	d913      	bls.n	8018068 <uxr_init_input_reliable_stream+0x4c>
 8018040:	2301      	movs	r3, #1
 8018042:	fbb3 f1fc 	udiv	r1, r3, ip
 8018046:	fb0c 3111 	mls	r1, ip, r1, r3
 801804a:	b289      	uxth	r1, r1
 801804c:	6842      	ldr	r2, [r0, #4]
 801804e:	fbb2 f2fc 	udiv	r2, r2, ip
 8018052:	fb01 f202 	mul.w	r2, r1, r2
 8018056:	6801      	ldr	r1, [r0, #0]
 8018058:	f841 e002 	str.w	lr, [r1, r2]
 801805c:	3301      	adds	r3, #1
 801805e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8018062:	b29b      	uxth	r3, r3
 8018064:	459c      	cmp	ip, r3
 8018066:	d8ec      	bhi.n	8018042 <uxr_init_input_reliable_stream+0x26>
 8018068:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801806c:	60c3      	str	r3, [r0, #12]
 801806e:	f85d fb04 	ldr.w	pc, [sp], #4
 8018072:	bf00      	nop

08018074 <uxr_reset_input_reliable_stream>:
 8018074:	8901      	ldrh	r1, [r0, #8]
 8018076:	b1e9      	cbz	r1, 80180b4 <uxr_reset_input_reliable_stream+0x40>
 8018078:	f04f 0c00 	mov.w	ip, #0
 801807c:	b500      	push	{lr}
 801807e:	4663      	mov	r3, ip
 8018080:	46e6      	mov	lr, ip
 8018082:	fbb3 f2f1 	udiv	r2, r3, r1
 8018086:	fb01 3312 	mls	r3, r1, r2, r3
 801808a:	b29b      	uxth	r3, r3
 801808c:	6842      	ldr	r2, [r0, #4]
 801808e:	fbb2 f2f1 	udiv	r2, r2, r1
 8018092:	fb02 f303 	mul.w	r3, r2, r3
 8018096:	6802      	ldr	r2, [r0, #0]
 8018098:	f842 e003 	str.w	lr, [r2, r3]
 801809c:	f10c 0c01 	add.w	ip, ip, #1
 80180a0:	8901      	ldrh	r1, [r0, #8]
 80180a2:	fa1f f38c 	uxth.w	r3, ip
 80180a6:	4299      	cmp	r1, r3
 80180a8:	d8eb      	bhi.n	8018082 <uxr_reset_input_reliable_stream+0xe>
 80180aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80180ae:	60c3      	str	r3, [r0, #12]
 80180b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80180b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80180b8:	60c3      	str	r3, [r0, #12]
 80180ba:	4770      	bx	lr

080180bc <uxr_receive_reliable_message>:
 80180bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80180c0:	4604      	mov	r4, r0
 80180c2:	460d      	mov	r5, r1
 80180c4:	8901      	ldrh	r1, [r0, #8]
 80180c6:	8980      	ldrh	r0, [r0, #12]
 80180c8:	4690      	mov	r8, r2
 80180ca:	461f      	mov	r7, r3
 80180cc:	f000 fca2 	bl	8018a14 <uxr_seq_num_add>
 80180d0:	4629      	mov	r1, r5
 80180d2:	4606      	mov	r6, r0
 80180d4:	89a0      	ldrh	r0, [r4, #12]
 80180d6:	f000 fca5 	bl	8018a24 <uxr_seq_num_cmp>
 80180da:	2800      	cmp	r0, #0
 80180dc:	db0a      	blt.n	80180f4 <uxr_receive_reliable_message+0x38>
 80180de:	2600      	movs	r6, #0
 80180e0:	89e0      	ldrh	r0, [r4, #14]
 80180e2:	4629      	mov	r1, r5
 80180e4:	f000 fc9e 	bl	8018a24 <uxr_seq_num_cmp>
 80180e8:	2800      	cmp	r0, #0
 80180ea:	da00      	bge.n	80180ee <uxr_receive_reliable_message+0x32>
 80180ec:	81e5      	strh	r5, [r4, #14]
 80180ee:	4630      	mov	r0, r6
 80180f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80180f4:	4630      	mov	r0, r6
 80180f6:	4629      	mov	r1, r5
 80180f8:	f000 fc94 	bl	8018a24 <uxr_seq_num_cmp>
 80180fc:	2800      	cmp	r0, #0
 80180fe:	dbee      	blt.n	80180de <uxr_receive_reliable_message+0x22>
 8018100:	6923      	ldr	r3, [r4, #16]
 8018102:	4640      	mov	r0, r8
 8018104:	4798      	blx	r3
 8018106:	2101      	movs	r1, #1
 8018108:	4681      	mov	r9, r0
 801810a:	89a0      	ldrh	r0, [r4, #12]
 801810c:	f000 fc82 	bl	8018a14 <uxr_seq_num_add>
 8018110:	f1b9 0f00 	cmp.w	r9, #0
 8018114:	d101      	bne.n	801811a <uxr_receive_reliable_message+0x5e>
 8018116:	4285      	cmp	r5, r0
 8018118:	d047      	beq.n	80181aa <uxr_receive_reliable_message+0xee>
 801811a:	8922      	ldrh	r2, [r4, #8]
 801811c:	fbb5 f0f2 	udiv	r0, r5, r2
 8018120:	fb02 5010 	mls	r0, r2, r0, r5
 8018124:	b280      	uxth	r0, r0
 8018126:	6863      	ldr	r3, [r4, #4]
 8018128:	fbb3 f3f2 	udiv	r3, r3, r2
 801812c:	fb00 f303 	mul.w	r3, r0, r3
 8018130:	6820      	ldr	r0, [r4, #0]
 8018132:	3304      	adds	r3, #4
 8018134:	4418      	add	r0, r3
 8018136:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801813a:	2b00      	cmp	r3, #0
 801813c:	d1cf      	bne.n	80180de <uxr_receive_reliable_message+0x22>
 801813e:	4641      	mov	r1, r8
 8018140:	463a      	mov	r2, r7
 8018142:	f001 fe48 	bl	8019dd6 <memcpy>
 8018146:	8921      	ldrh	r1, [r4, #8]
 8018148:	fbb5 f2f1 	udiv	r2, r5, r1
 801814c:	fb01 5212 	mls	r2, r1, r2, r5
 8018150:	b292      	uxth	r2, r2
 8018152:	6863      	ldr	r3, [r4, #4]
 8018154:	fbb3 f3f1 	udiv	r3, r3, r1
 8018158:	fb02 f303 	mul.w	r3, r2, r3
 801815c:	6822      	ldr	r2, [r4, #0]
 801815e:	50d7      	str	r7, [r2, r3]
 8018160:	9a08      	ldr	r2, [sp, #32]
 8018162:	2301      	movs	r3, #1
 8018164:	7013      	strb	r3, [r2, #0]
 8018166:	f1b9 0f00 	cmp.w	r9, #0
 801816a:	d0b8      	beq.n	80180de <uxr_receive_reliable_message+0x22>
 801816c:	89a6      	ldrh	r6, [r4, #12]
 801816e:	4630      	mov	r0, r6
 8018170:	2101      	movs	r1, #1
 8018172:	f000 fc4f 	bl	8018a14 <uxr_seq_num_add>
 8018176:	8922      	ldrh	r2, [r4, #8]
 8018178:	6863      	ldr	r3, [r4, #4]
 801817a:	fbb3 f3f2 	udiv	r3, r3, r2
 801817e:	4606      	mov	r6, r0
 8018180:	fbb0 f0f2 	udiv	r0, r0, r2
 8018184:	fb02 6010 	mls	r0, r2, r0, r6
 8018188:	b280      	uxth	r0, r0
 801818a:	fb00 f303 	mul.w	r3, r0, r3
 801818e:	6820      	ldr	r0, [r4, #0]
 8018190:	3304      	adds	r3, #4
 8018192:	4418      	add	r0, r3
 8018194:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018198:	2b00      	cmp	r3, #0
 801819a:	d0a0      	beq.n	80180de <uxr_receive_reliable_message+0x22>
 801819c:	6923      	ldr	r3, [r4, #16]
 801819e:	4798      	blx	r3
 80181a0:	2802      	cmp	r0, #2
 80181a2:	d008      	beq.n	80181b6 <uxr_receive_reliable_message+0xfa>
 80181a4:	2801      	cmp	r0, #1
 80181a6:	d0e2      	beq.n	801816e <uxr_receive_reliable_message+0xb2>
 80181a8:	e799      	b.n	80180de <uxr_receive_reliable_message+0x22>
 80181aa:	9b08      	ldr	r3, [sp, #32]
 80181ac:	81a5      	strh	r5, [r4, #12]
 80181ae:	2601      	movs	r6, #1
 80181b0:	f883 9000 	strb.w	r9, [r3]
 80181b4:	e794      	b.n	80180e0 <uxr_receive_reliable_message+0x24>
 80181b6:	2601      	movs	r6, #1
 80181b8:	e792      	b.n	80180e0 <uxr_receive_reliable_message+0x24>
 80181ba:	bf00      	nop

080181bc <uxr_next_input_reliable_buffer_available>:
 80181bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80181c0:	4604      	mov	r4, r0
 80181c2:	460f      	mov	r7, r1
 80181c4:	8980      	ldrh	r0, [r0, #12]
 80181c6:	2101      	movs	r1, #1
 80181c8:	4690      	mov	r8, r2
 80181ca:	f000 fc23 	bl	8018a14 <uxr_seq_num_add>
 80181ce:	8922      	ldrh	r2, [r4, #8]
 80181d0:	fbb0 f6f2 	udiv	r6, r0, r2
 80181d4:	fb02 0616 	mls	r6, r2, r6, r0
 80181d8:	b2b6      	uxth	r6, r6
 80181da:	6863      	ldr	r3, [r4, #4]
 80181dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80181e0:	fb06 f303 	mul.w	r3, r6, r3
 80181e4:	6826      	ldr	r6, [r4, #0]
 80181e6:	3304      	adds	r3, #4
 80181e8:	441e      	add	r6, r3
 80181ea:	f856 9c04 	ldr.w	r9, [r6, #-4]
 80181ee:	f1b9 0f00 	cmp.w	r9, #0
 80181f2:	d023      	beq.n	801823c <uxr_next_input_reliable_buffer_available+0x80>
 80181f4:	6923      	ldr	r3, [r4, #16]
 80181f6:	4605      	mov	r5, r0
 80181f8:	4630      	mov	r0, r6
 80181fa:	4798      	blx	r3
 80181fc:	4682      	mov	sl, r0
 80181fe:	b300      	cbz	r0, 8018242 <uxr_next_input_reliable_buffer_available+0x86>
 8018200:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8018204:	2101      	movs	r1, #1
 8018206:	4650      	mov	r0, sl
 8018208:	f000 fc04 	bl	8018a14 <uxr_seq_num_add>
 801820c:	8921      	ldrh	r1, [r4, #8]
 801820e:	fbb0 f2f1 	udiv	r2, r0, r1
 8018212:	4682      	mov	sl, r0
 8018214:	fb01 0212 	mls	r2, r1, r2, r0
 8018218:	e9d4 0300 	ldrd	r0, r3, [r4]
 801821c:	b292      	uxth	r2, r2
 801821e:	fbb3 f3f1 	udiv	r3, r3, r1
 8018222:	fb02 f303 	mul.w	r3, r2, r3
 8018226:	3304      	adds	r3, #4
 8018228:	4418      	add	r0, r3
 801822a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801822e:	b12b      	cbz	r3, 801823c <uxr_next_input_reliable_buffer_available+0x80>
 8018230:	6923      	ldr	r3, [r4, #16]
 8018232:	4798      	blx	r3
 8018234:	2802      	cmp	r0, #2
 8018236:	d01b      	beq.n	8018270 <uxr_next_input_reliable_buffer_available+0xb4>
 8018238:	2801      	cmp	r0, #1
 801823a:	d0e3      	beq.n	8018204 <uxr_next_input_reliable_buffer_available+0x48>
 801823c:	2000      	movs	r0, #0
 801823e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018242:	464a      	mov	r2, r9
 8018244:	4631      	mov	r1, r6
 8018246:	4638      	mov	r0, r7
 8018248:	f7f4 fc20 	bl	800ca8c <ucdr_init_buffer>
 801824c:	8921      	ldrh	r1, [r4, #8]
 801824e:	fbb5 f2f1 	udiv	r2, r5, r1
 8018252:	fb01 5212 	mls	r2, r1, r2, r5
 8018256:	b292      	uxth	r2, r2
 8018258:	6863      	ldr	r3, [r4, #4]
 801825a:	fbb3 f3f1 	udiv	r3, r3, r1
 801825e:	fb02 f303 	mul.w	r3, r2, r3
 8018262:	6822      	ldr	r2, [r4, #0]
 8018264:	f842 a003 	str.w	sl, [r2, r3]
 8018268:	2001      	movs	r0, #1
 801826a:	81a5      	strh	r5, [r4, #12]
 801826c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018270:	8920      	ldrh	r0, [r4, #8]
 8018272:	fbb5 f3f0 	udiv	r3, r5, r0
 8018276:	fb00 5513 	mls	r5, r0, r3, r5
 801827a:	b2ad      	uxth	r5, r5
 801827c:	6863      	ldr	r3, [r4, #4]
 801827e:	fbb3 f3f0 	udiv	r3, r3, r0
 8018282:	fb03 f505 	mul.w	r5, r3, r5
 8018286:	6823      	ldr	r3, [r4, #0]
 8018288:	2000      	movs	r0, #0
 801828a:	5158      	str	r0, [r3, r5]
 801828c:	eb06 0108 	add.w	r1, r6, r8
 8018290:	eba9 0208 	sub.w	r2, r9, r8
 8018294:	4638      	mov	r0, r7
 8018296:	f7f4 fbf9 	bl	800ca8c <ucdr_init_buffer>
 801829a:	4638      	mov	r0, r7
 801829c:	4903      	ldr	r1, [pc, #12]	@ (80182ac <uxr_next_input_reliable_buffer_available+0xf0>)
 801829e:	4622      	mov	r2, r4
 80182a0:	f7f4 fbc8 	bl	800ca34 <ucdr_set_on_full_buffer_callback>
 80182a4:	f8a4 a00c 	strh.w	sl, [r4, #12]
 80182a8:	2001      	movs	r0, #1
 80182aa:	e7c8      	b.n	801823e <uxr_next_input_reliable_buffer_available+0x82>
 80182ac:	08017fb1 	.word	0x08017fb1

080182b0 <uxr_process_heartbeat>:
 80182b0:	b538      	push	{r3, r4, r5, lr}
 80182b2:	4611      	mov	r1, r2
 80182b4:	4604      	mov	r4, r0
 80182b6:	89c0      	ldrh	r0, [r0, #14]
 80182b8:	4615      	mov	r5, r2
 80182ba:	f000 fbb3 	bl	8018a24 <uxr_seq_num_cmp>
 80182be:	2800      	cmp	r0, #0
 80182c0:	bfb8      	it	lt
 80182c2:	81e5      	strhlt	r5, [r4, #14]
 80182c4:	bd38      	pop	{r3, r4, r5, pc}
 80182c6:	bf00      	nop

080182c8 <uxr_compute_acknack>:
 80182c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80182cc:	8903      	ldrh	r3, [r0, #8]
 80182ce:	8985      	ldrh	r5, [r0, #12]
 80182d0:	4604      	mov	r4, r0
 80182d2:	460e      	mov	r6, r1
 80182d4:	b1d3      	cbz	r3, 801830c <uxr_compute_acknack+0x44>
 80182d6:	4628      	mov	r0, r5
 80182d8:	2701      	movs	r7, #1
 80182da:	e003      	b.n	80182e4 <uxr_compute_acknack+0x1c>
 80182dc:	4567      	cmp	r7, ip
 80182de:	d215      	bcs.n	801830c <uxr_compute_acknack+0x44>
 80182e0:	89a0      	ldrh	r0, [r4, #12]
 80182e2:	3701      	adds	r7, #1
 80182e4:	b2b9      	uxth	r1, r7
 80182e6:	f000 fb95 	bl	8018a14 <uxr_seq_num_add>
 80182ea:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80182ee:	fbb0 f3fc 	udiv	r3, r0, ip
 80182f2:	fb0c 0313 	mls	r3, ip, r3, r0
 80182f6:	b29a      	uxth	r2, r3
 80182f8:	e9d4 1300 	ldrd	r1, r3, [r4]
 80182fc:	fbb3 f3fc 	udiv	r3, r3, ip
 8018300:	fb02 f303 	mul.w	r3, r2, r3
 8018304:	58cb      	ldr	r3, [r1, r3]
 8018306:	2b00      	cmp	r3, #0
 8018308:	d1e8      	bne.n	80182dc <uxr_compute_acknack+0x14>
 801830a:	4605      	mov	r5, r0
 801830c:	8035      	strh	r5, [r6, #0]
 801830e:	2101      	movs	r1, #1
 8018310:	4628      	mov	r0, r5
 8018312:	89e7      	ldrh	r7, [r4, #14]
 8018314:	f000 fb82 	bl	8018a1c <uxr_seq_num_sub>
 8018318:	4601      	mov	r1, r0
 801831a:	4638      	mov	r0, r7
 801831c:	f000 fb7e 	bl	8018a1c <uxr_seq_num_sub>
 8018320:	4605      	mov	r5, r0
 8018322:	b318      	cbz	r0, 801836c <uxr_compute_acknack+0xa4>
 8018324:	f04f 0900 	mov.w	r9, #0
 8018328:	464f      	mov	r7, r9
 801832a:	f04f 0801 	mov.w	r8, #1
 801832e:	fa1f f189 	uxth.w	r1, r9
 8018332:	8830      	ldrh	r0, [r6, #0]
 8018334:	f000 fb6e 	bl	8018a14 <uxr_seq_num_add>
 8018338:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801833c:	fbb0 f3fc 	udiv	r3, r0, ip
 8018340:	e9d4 1200 	ldrd	r1, r2, [r4]
 8018344:	fb03 001c 	mls	r0, r3, ip, r0
 8018348:	b283      	uxth	r3, r0
 801834a:	fbb2 f2fc 	udiv	r2, r2, ip
 801834e:	fb02 f303 	mul.w	r3, r2, r3
 8018352:	fa08 f209 	lsl.w	r2, r8, r9
 8018356:	58cb      	ldr	r3, [r1, r3]
 8018358:	f109 0901 	add.w	r9, r9, #1
 801835c:	b90b      	cbnz	r3, 8018362 <uxr_compute_acknack+0x9a>
 801835e:	4317      	orrs	r7, r2
 8018360:	b2bf      	uxth	r7, r7
 8018362:	454d      	cmp	r5, r9
 8018364:	d1e3      	bne.n	801832e <uxr_compute_acknack+0x66>
 8018366:	4638      	mov	r0, r7
 8018368:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801836c:	4607      	mov	r7, r0
 801836e:	4638      	mov	r0, r7
 8018370:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08018374 <uxr_init_output_best_effort_stream>:
 8018374:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8018378:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801837c:	6001      	str	r1, [r0, #0]
 801837e:	7303      	strb	r3, [r0, #12]
 8018380:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8018384:	4770      	bx	lr
 8018386:	bf00      	nop

08018388 <uxr_reset_output_best_effort_stream>:
 8018388:	7b02      	ldrb	r2, [r0, #12]
 801838a:	6042      	str	r2, [r0, #4]
 801838c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018390:	81c3      	strh	r3, [r0, #14]
 8018392:	4770      	bx	lr

08018394 <uxr_prepare_best_effort_buffer_to_write>:
 8018394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018396:	4604      	mov	r4, r0
 8018398:	b083      	sub	sp, #12
 801839a:	6840      	ldr	r0, [r0, #4]
 801839c:	460d      	mov	r5, r1
 801839e:	4616      	mov	r6, r2
 80183a0:	f7fa fadc 	bl	801295c <uxr_submessage_padding>
 80183a4:	6863      	ldr	r3, [r4, #4]
 80183a6:	4418      	add	r0, r3
 80183a8:	68a3      	ldr	r3, [r4, #8]
 80183aa:	1942      	adds	r2, r0, r5
 80183ac:	4293      	cmp	r3, r2
 80183ae:	bf2c      	ite	cs
 80183b0:	2701      	movcs	r7, #1
 80183b2:	2700      	movcc	r7, #0
 80183b4:	d202      	bcs.n	80183bc <uxr_prepare_best_effort_buffer_to_write+0x28>
 80183b6:	4638      	mov	r0, r7
 80183b8:	b003      	add	sp, #12
 80183ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80183bc:	9000      	str	r0, [sp, #0]
 80183be:	6821      	ldr	r1, [r4, #0]
 80183c0:	4630      	mov	r0, r6
 80183c2:	2300      	movs	r3, #0
 80183c4:	f7f4 fb50 	bl	800ca68 <ucdr_init_buffer_origin_offset>
 80183c8:	6861      	ldr	r1, [r4, #4]
 80183ca:	4638      	mov	r0, r7
 80183cc:	4429      	add	r1, r5
 80183ce:	6061      	str	r1, [r4, #4]
 80183d0:	b003      	add	sp, #12
 80183d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080183d4 <uxr_prepare_best_effort_buffer_to_send>:
 80183d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80183d8:	4604      	mov	r4, r0
 80183da:	461d      	mov	r5, r3
 80183dc:	6840      	ldr	r0, [r0, #4]
 80183de:	7b23      	ldrb	r3, [r4, #12]
 80183e0:	4298      	cmp	r0, r3
 80183e2:	bf8c      	ite	hi
 80183e4:	2601      	movhi	r6, #1
 80183e6:	2600      	movls	r6, #0
 80183e8:	d802      	bhi.n	80183f0 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 80183ea:	4630      	mov	r0, r6
 80183ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80183f0:	4688      	mov	r8, r1
 80183f2:	89e0      	ldrh	r0, [r4, #14]
 80183f4:	2101      	movs	r1, #1
 80183f6:	4617      	mov	r7, r2
 80183f8:	f000 fb0c 	bl	8018a14 <uxr_seq_num_add>
 80183fc:	6823      	ldr	r3, [r4, #0]
 80183fe:	81e0      	strh	r0, [r4, #14]
 8018400:	8028      	strh	r0, [r5, #0]
 8018402:	f8c8 3000 	str.w	r3, [r8]
 8018406:	6863      	ldr	r3, [r4, #4]
 8018408:	603b      	str	r3, [r7, #0]
 801840a:	7b23      	ldrb	r3, [r4, #12]
 801840c:	6063      	str	r3, [r4, #4]
 801840e:	4630      	mov	r0, r6
 8018410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018414 <on_full_output_buffer>:
 8018414:	b538      	push	{r3, r4, r5, lr}
 8018416:	6802      	ldr	r2, [r0, #0]
 8018418:	460c      	mov	r4, r1
 801841a:	6809      	ldr	r1, [r1, #0]
 801841c:	8923      	ldrh	r3, [r4, #8]
 801841e:	eba2 0c01 	sub.w	ip, r2, r1
 8018422:	6862      	ldr	r2, [r4, #4]
 8018424:	fbb2 f2f3 	udiv	r2, r2, r3
 8018428:	fbbc fcf2 	udiv	ip, ip, r2
 801842c:	f10c 0c01 	add.w	ip, ip, #1
 8018430:	fa1f fc8c 	uxth.w	ip, ip
 8018434:	fbbc fef3 	udiv	lr, ip, r3
 8018438:	fb03 c31e 	mls	r3, r3, lr, ip
 801843c:	b29b      	uxth	r3, r3
 801843e:	fb02 f303 	mul.w	r3, r2, r3
 8018442:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8018446:	58ca      	ldr	r2, [r1, r3]
 8018448:	4463      	add	r3, ip
 801844a:	eba2 020c 	sub.w	r2, r2, ip
 801844e:	3308      	adds	r3, #8
 8018450:	4605      	mov	r5, r0
 8018452:	4419      	add	r1, r3
 8018454:	3a04      	subs	r2, #4
 8018456:	6903      	ldr	r3, [r0, #16]
 8018458:	f7f4 fb10 	bl	800ca7c <ucdr_init_buffer_origin>
 801845c:	4628      	mov	r0, r5
 801845e:	4903      	ldr	r1, [pc, #12]	@ (801846c <on_full_output_buffer+0x58>)
 8018460:	4622      	mov	r2, r4
 8018462:	f7f4 fae7 	bl	800ca34 <ucdr_set_on_full_buffer_callback>
 8018466:	2000      	movs	r0, #0
 8018468:	bd38      	pop	{r3, r4, r5, pc}
 801846a:	bf00      	nop
 801846c:	08018415 	.word	0x08018415

08018470 <uxr_init_output_reliable_stream>:
 8018470:	b410      	push	{r4}
 8018472:	f89d c004 	ldrb.w	ip, [sp, #4]
 8018476:	8103      	strh	r3, [r0, #8]
 8018478:	e9c0 1200 	strd	r1, r2, [r0]
 801847c:	f880 c00c 	strb.w	ip, [r0, #12]
 8018480:	b1d3      	cbz	r3, 80184b8 <uxr_init_output_reliable_stream+0x48>
 8018482:	f8c1 c000 	str.w	ip, [r1]
 8018486:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801848a:	f1bc 0f01 	cmp.w	ip, #1
 801848e:	d913      	bls.n	80184b8 <uxr_init_output_reliable_stream+0x48>
 8018490:	2301      	movs	r3, #1
 8018492:	fbb3 f1fc 	udiv	r1, r3, ip
 8018496:	fb0c 3111 	mls	r1, ip, r1, r3
 801849a:	b289      	uxth	r1, r1
 801849c:	6842      	ldr	r2, [r0, #4]
 801849e:	6804      	ldr	r4, [r0, #0]
 80184a0:	fbb2 f2fc 	udiv	r2, r2, ip
 80184a4:	fb01 f202 	mul.w	r2, r1, r2
 80184a8:	7b01      	ldrb	r1, [r0, #12]
 80184aa:	50a1      	str	r1, [r4, r2]
 80184ac:	3301      	adds	r3, #1
 80184ae:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80184b2:	b29b      	uxth	r3, r3
 80184b4:	459c      	cmp	ip, r3
 80184b6:	d8ec      	bhi.n	8018492 <uxr_init_output_reliable_stream+0x22>
 80184b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80184bc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80184c0:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80184c4:	4905      	ldr	r1, [pc, #20]	@ (80184dc <uxr_init_output_reliable_stream+0x6c>)
 80184c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80184ca:	f8c0 100e 	str.w	r1, [r0, #14]
 80184ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80184d2:	2300      	movs	r3, #0
 80184d4:	8242      	strh	r2, [r0, #18]
 80184d6:	8403      	strh	r3, [r0, #32]
 80184d8:	4770      	bx	lr
 80184da:	bf00      	nop
 80184dc:	ffff0000 	.word	0xffff0000

080184e0 <uxr_reset_output_reliable_stream>:
 80184e0:	8901      	ldrh	r1, [r0, #8]
 80184e2:	b1b1      	cbz	r1, 8018512 <uxr_reset_output_reliable_stream+0x32>
 80184e4:	f04f 0c00 	mov.w	ip, #0
 80184e8:	4663      	mov	r3, ip
 80184ea:	fbb3 f2f1 	udiv	r2, r3, r1
 80184ee:	fb01 3312 	mls	r3, r1, r2, r3
 80184f2:	b29b      	uxth	r3, r3
 80184f4:	6842      	ldr	r2, [r0, #4]
 80184f6:	fbb2 f2f1 	udiv	r2, r2, r1
 80184fa:	6801      	ldr	r1, [r0, #0]
 80184fc:	fb02 f303 	mul.w	r3, r2, r3
 8018500:	7b02      	ldrb	r2, [r0, #12]
 8018502:	50ca      	str	r2, [r1, r3]
 8018504:	f10c 0c01 	add.w	ip, ip, #1
 8018508:	8901      	ldrh	r1, [r0, #8]
 801850a:	fa1f f38c 	uxth.w	r3, ip
 801850e:	4299      	cmp	r1, r3
 8018510:	d8eb      	bhi.n	80184ea <uxr_reset_output_reliable_stream+0xa>
 8018512:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018516:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801851a:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801851e:	4904      	ldr	r1, [pc, #16]	@ (8018530 <uxr_reset_output_reliable_stream+0x50>)
 8018520:	f8c0 100e 	str.w	r1, [r0, #14]
 8018524:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018528:	2300      	movs	r3, #0
 801852a:	8242      	strh	r2, [r0, #18]
 801852c:	8403      	strh	r3, [r0, #32]
 801852e:	4770      	bx	lr
 8018530:	ffff0000 	.word	0xffff0000

08018534 <uxr_prepare_reliable_buffer_to_write>:
 8018534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018538:	4604      	mov	r4, r0
 801853a:	b091      	sub	sp, #68	@ 0x44
 801853c:	8900      	ldrh	r0, [r0, #8]
 801853e:	89e6      	ldrh	r6, [r4, #14]
 8018540:	6823      	ldr	r3, [r4, #0]
 8018542:	9204      	str	r2, [sp, #16]
 8018544:	fbb6 f2f0 	udiv	r2, r6, r0
 8018548:	fb00 6212 	mls	r2, r0, r2, r6
 801854c:	b292      	uxth	r2, r2
 801854e:	6865      	ldr	r5, [r4, #4]
 8018550:	fbb5 f5f0 	udiv	r5, r5, r0
 8018554:	fb05 3202 	mla	r2, r5, r2, r3
 8018558:	3204      	adds	r2, #4
 801855a:	f852 8c04 	ldr.w	r8, [r2, #-4]
 801855e:	f894 900c 	ldrb.w	r9, [r4, #12]
 8018562:	9203      	str	r2, [sp, #12]
 8018564:	468b      	mov	fp, r1
 8018566:	1f2f      	subs	r7, r5, #4
 8018568:	2800      	cmp	r0, #0
 801856a:	f000 814c 	beq.w	8018806 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801856e:	f04f 0c00 	mov.w	ip, #0
 8018572:	46e2      	mov	sl, ip
 8018574:	4661      	mov	r1, ip
 8018576:	fbb1 f2f0 	udiv	r2, r1, r0
 801857a:	fb00 1212 	mls	r2, r0, r2, r1
 801857e:	b292      	uxth	r2, r2
 8018580:	fb05 f202 	mul.w	r2, r5, r2
 8018584:	f10c 0c01 	add.w	ip, ip, #1
 8018588:	589a      	ldr	r2, [r3, r2]
 801858a:	454a      	cmp	r2, r9
 801858c:	bf08      	it	eq
 801858e:	f10a 0a01 	addeq.w	sl, sl, #1
 8018592:	fa1f f18c 	uxth.w	r1, ip
 8018596:	bf08      	it	eq
 8018598:	fa1f fa8a 	uxtheq.w	sl, sl
 801859c:	4281      	cmp	r1, r0
 801859e:	d3ea      	bcc.n	8018576 <uxr_prepare_reliable_buffer_to_write+0x42>
 80185a0:	4640      	mov	r0, r8
 80185a2:	2104      	movs	r1, #4
 80185a4:	f8cd a014 	str.w	sl, [sp, #20]
 80185a8:	f7f4 fa74 	bl	800ca94 <ucdr_alignment>
 80185ac:	4480      	add	r8, r0
 80185ae:	eb08 020b 	add.w	r2, r8, fp
 80185b2:	42ba      	cmp	r2, r7
 80185b4:	f240 80cd 	bls.w	8018752 <uxr_prepare_reliable_buffer_to_write+0x21e>
 80185b8:	7b22      	ldrb	r2, [r4, #12]
 80185ba:	445a      	add	r2, fp
 80185bc:	42ba      	cmp	r2, r7
 80185be:	f240 80b5 	bls.w	801872c <uxr_prepare_reliable_buffer_to_write+0x1f8>
 80185c2:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 80185c6:	33fc      	adds	r3, #252	@ 0xfc
 80185c8:	b2ba      	uxth	r2, r7
 80185ca:	4413      	add	r3, r2
 80185cc:	b29b      	uxth	r3, r3
 80185ce:	fb0a f903 	mul.w	r9, sl, r3
 80185d2:	45d9      	cmp	r9, fp
 80185d4:	9305      	str	r3, [sp, #20]
 80185d6:	9306      	str	r3, [sp, #24]
 80185d8:	f0c0 80b7 	bcc.w	801874a <uxr_prepare_reliable_buffer_to_write+0x216>
 80185dc:	f108 0304 	add.w	r3, r8, #4
 80185e0:	42bb      	cmp	r3, r7
 80185e2:	f080 80db 	bcs.w	801879c <uxr_prepare_reliable_buffer_to_write+0x268>
 80185e6:	f1a2 0904 	sub.w	r9, r2, #4
 80185ea:	eba9 0908 	sub.w	r9, r9, r8
 80185ee:	9b05      	ldr	r3, [sp, #20]
 80185f0:	fa1f f989 	uxth.w	r9, r9
 80185f4:	ebab 0b09 	sub.w	fp, fp, r9
 80185f8:	fbbb f2f3 	udiv	r2, fp, r3
 80185fc:	fb03 b312 	mls	r3, r3, r2, fp
 8018600:	2b00      	cmp	r3, #0
 8018602:	f000 80c8 	beq.w	8018796 <uxr_prepare_reliable_buffer_to_write+0x262>
 8018606:	3201      	adds	r2, #1
 8018608:	b292      	uxth	r2, r2
 801860a:	9306      	str	r3, [sp, #24]
 801860c:	4552      	cmp	r2, sl
 801860e:	f200 809c 	bhi.w	801874a <uxr_prepare_reliable_buffer_to_write+0x216>
 8018612:	f10d 0b20 	add.w	fp, sp, #32
 8018616:	2a00      	cmp	r2, #0
 8018618:	d042      	beq.n	80186a0 <uxr_prepare_reliable_buffer_to_write+0x16c>
 801861a:	f8cd 801c 	str.w	r8, [sp, #28]
 801861e:	f04f 0a00 	mov.w	sl, #0
 8018622:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8018626:	9505      	str	r5, [sp, #20]
 8018628:	f10d 0b20 	add.w	fp, sp, #32
 801862c:	4615      	mov	r5, r2
 801862e:	e000      	b.n	8018632 <uxr_prepare_reliable_buffer_to_write+0xfe>
 8018630:	46c1      	mov	r9, r8
 8018632:	8920      	ldrh	r0, [r4, #8]
 8018634:	fbb6 f2f0 	udiv	r2, r6, r0
 8018638:	fb00 6112 	mls	r1, r0, r2, r6
 801863c:	b28a      	uxth	r2, r1
 801863e:	6863      	ldr	r3, [r4, #4]
 8018640:	fbb3 f1f0 	udiv	r1, r3, r0
 8018644:	6823      	ldr	r3, [r4, #0]
 8018646:	fb02 f101 	mul.w	r1, r2, r1
 801864a:	3104      	adds	r1, #4
 801864c:	4419      	add	r1, r3
 801864e:	4658      	mov	r0, fp
 8018650:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8018654:	9200      	str	r2, [sp, #0]
 8018656:	2300      	movs	r3, #0
 8018658:	463a      	mov	r2, r7
 801865a:	f7f4 fa05 	bl	800ca68 <ucdr_init_buffer_origin_offset>
 801865e:	464a      	mov	r2, r9
 8018660:	2300      	movs	r3, #0
 8018662:	210d      	movs	r1, #13
 8018664:	4658      	mov	r0, fp
 8018666:	f7fa f939 	bl	80128dc <uxr_buffer_submessage_header>
 801866a:	8921      	ldrh	r1, [r4, #8]
 801866c:	fbb6 f2f1 	udiv	r2, r6, r1
 8018670:	fb01 6212 	mls	r2, r1, r2, r6
 8018674:	b292      	uxth	r2, r2
 8018676:	6863      	ldr	r3, [r4, #4]
 8018678:	fbb3 f3f1 	udiv	r3, r3, r1
 801867c:	fb02 f303 	mul.w	r3, r2, r3
 8018680:	6822      	ldr	r2, [r4, #0]
 8018682:	4630      	mov	r0, r6
 8018684:	50d7      	str	r7, [r2, r3]
 8018686:	2101      	movs	r1, #1
 8018688:	f000 f9c4 	bl	8018a14 <uxr_seq_num_add>
 801868c:	f10a 0a01 	add.w	sl, sl, #1
 8018690:	fa1f f38a 	uxth.w	r3, sl
 8018694:	429d      	cmp	r5, r3
 8018696:	4606      	mov	r6, r0
 8018698:	d8ca      	bhi.n	8018630 <uxr_prepare_reliable_buffer_to_write+0xfc>
 801869a:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801869e:	9d05      	ldr	r5, [sp, #20]
 80186a0:	8920      	ldrh	r0, [r4, #8]
 80186a2:	fbb6 f3f0 	udiv	r3, r6, r0
 80186a6:	fb00 6313 	mls	r3, r0, r3, r6
 80186aa:	b299      	uxth	r1, r3
 80186ac:	6863      	ldr	r3, [r4, #4]
 80186ae:	fbb3 f3f0 	udiv	r3, r3, r0
 80186b2:	fb01 f303 	mul.w	r3, r1, r3
 80186b6:	6821      	ldr	r1, [r4, #0]
 80186b8:	3304      	adds	r3, #4
 80186ba:	4419      	add	r1, r3
 80186bc:	463a      	mov	r2, r7
 80186be:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80186c2:	9000      	str	r0, [sp, #0]
 80186c4:	2300      	movs	r3, #0
 80186c6:	4658      	mov	r0, fp
 80186c8:	f7f4 f9ce 	bl	800ca68 <ucdr_init_buffer_origin_offset>
 80186cc:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80186d0:	4658      	mov	r0, fp
 80186d2:	fa1f f289 	uxth.w	r2, r9
 80186d6:	2302      	movs	r3, #2
 80186d8:	210d      	movs	r1, #13
 80186da:	f7fa f8ff 	bl	80128dc <uxr_buffer_submessage_header>
 80186de:	9b03      	ldr	r3, [sp, #12]
 80186e0:	8927      	ldrh	r7, [r4, #8]
 80186e2:	7b20      	ldrb	r0, [r4, #12]
 80186e4:	f108 0104 	add.w	r1, r8, #4
 80186e8:	440b      	add	r3, r1
 80186ea:	4619      	mov	r1, r3
 80186ec:	fbb6 f3f7 	udiv	r3, r6, r7
 80186f0:	fb07 6313 	mls	r3, r7, r3, r6
 80186f4:	f1a5 0208 	sub.w	r2, r5, #8
 80186f8:	b29d      	uxth	r5, r3
 80186fa:	3004      	adds	r0, #4
 80186fc:	6863      	ldr	r3, [r4, #4]
 80186fe:	fbb3 f3f7 	udiv	r3, r3, r7
 8018702:	fb05 f303 	mul.w	r3, r5, r3
 8018706:	6825      	ldr	r5, [r4, #0]
 8018708:	4448      	add	r0, r9
 801870a:	50e8      	str	r0, [r5, r3]
 801870c:	9d04      	ldr	r5, [sp, #16]
 801870e:	eba2 0208 	sub.w	r2, r2, r8
 8018712:	4628      	mov	r0, r5
 8018714:	f7f4 f9ba 	bl	800ca8c <ucdr_init_buffer>
 8018718:	4628      	mov	r0, r5
 801871a:	493c      	ldr	r1, [pc, #240]	@ (801880c <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801871c:	4622      	mov	r2, r4
 801871e:	f7f4 f989 	bl	800ca34 <ucdr_set_on_full_buffer_callback>
 8018722:	2001      	movs	r0, #1
 8018724:	81e6      	strh	r6, [r4, #14]
 8018726:	b011      	add	sp, #68	@ 0x44
 8018728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801872c:	2101      	movs	r1, #1
 801872e:	89e0      	ldrh	r0, [r4, #14]
 8018730:	f000 f970 	bl	8018a14 <uxr_seq_num_add>
 8018734:	8921      	ldrh	r1, [r4, #8]
 8018736:	4605      	mov	r5, r0
 8018738:	8a60      	ldrh	r0, [r4, #18]
 801873a:	f000 f96b 	bl	8018a14 <uxr_seq_num_add>
 801873e:	4601      	mov	r1, r0
 8018740:	4628      	mov	r0, r5
 8018742:	f000 f96f 	bl	8018a24 <uxr_seq_num_cmp>
 8018746:	2800      	cmp	r0, #0
 8018748:	dd42      	ble.n	80187d0 <uxr_prepare_reliable_buffer_to_write+0x29c>
 801874a:	2000      	movs	r0, #0
 801874c:	b011      	add	sp, #68	@ 0x44
 801874e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018752:	8921      	ldrh	r1, [r4, #8]
 8018754:	8a60      	ldrh	r0, [r4, #18]
 8018756:	9205      	str	r2, [sp, #20]
 8018758:	f000 f95c 	bl	8018a14 <uxr_seq_num_add>
 801875c:	4601      	mov	r1, r0
 801875e:	4630      	mov	r0, r6
 8018760:	f000 f960 	bl	8018a24 <uxr_seq_num_cmp>
 8018764:	2800      	cmp	r0, #0
 8018766:	9a05      	ldr	r2, [sp, #20]
 8018768:	dcef      	bgt.n	801874a <uxr_prepare_reliable_buffer_to_write+0x216>
 801876a:	8927      	ldrh	r7, [r4, #8]
 801876c:	fbb6 f3f7 	udiv	r3, r6, r7
 8018770:	fb07 6313 	mls	r3, r7, r3, r6
 8018774:	b29d      	uxth	r5, r3
 8018776:	6863      	ldr	r3, [r4, #4]
 8018778:	6824      	ldr	r4, [r4, #0]
 801877a:	fbb3 f3f7 	udiv	r3, r3, r7
 801877e:	fb05 f303 	mul.w	r3, r5, r3
 8018782:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8018786:	50e2      	str	r2, [r4, r3]
 8018788:	2300      	movs	r3, #0
 801878a:	f8cd 8000 	str.w	r8, [sp]
 801878e:	f7f4 f96b 	bl	800ca68 <ucdr_init_buffer_origin_offset>
 8018792:	2001      	movs	r0, #1
 8018794:	e7da      	b.n	801874c <uxr_prepare_reliable_buffer_to_write+0x218>
 8018796:	b293      	uxth	r3, r2
 8018798:	461a      	mov	r2, r3
 801879a:	e737      	b.n	801860c <uxr_prepare_reliable_buffer_to_write+0xd8>
 801879c:	4630      	mov	r0, r6
 801879e:	2101      	movs	r1, #1
 80187a0:	9207      	str	r2, [sp, #28]
 80187a2:	f000 f937 	bl	8018a14 <uxr_seq_num_add>
 80187a6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80187aa:	fbb0 f1fc 	udiv	r1, r0, ip
 80187ae:	fb0c 0111 	mls	r1, ip, r1, r0
 80187b2:	4606      	mov	r6, r0
 80187b4:	b288      	uxth	r0, r1
 80187b6:	6863      	ldr	r3, [r4, #4]
 80187b8:	fbb3 f1fc 	udiv	r1, r3, ip
 80187bc:	6823      	ldr	r3, [r4, #0]
 80187be:	9a07      	ldr	r2, [sp, #28]
 80187c0:	fb00 f101 	mul.w	r1, r0, r1
 80187c4:	3104      	adds	r1, #4
 80187c6:	440b      	add	r3, r1
 80187c8:	9303      	str	r3, [sp, #12]
 80187ca:	f853 8c04 	ldr.w	r8, [r3, #-4]
 80187ce:	e70a      	b.n	80185e6 <uxr_prepare_reliable_buffer_to_write+0xb2>
 80187d0:	8921      	ldrh	r1, [r4, #8]
 80187d2:	fbb5 f3f1 	udiv	r3, r5, r1
 80187d6:	fb01 5313 	mls	r3, r1, r3, r5
 80187da:	b29a      	uxth	r2, r3
 80187dc:	6863      	ldr	r3, [r4, #4]
 80187de:	fbb3 f3f1 	udiv	r3, r3, r1
 80187e2:	6821      	ldr	r1, [r4, #0]
 80187e4:	9804      	ldr	r0, [sp, #16]
 80187e6:	fb02 f303 	mul.w	r3, r2, r3
 80187ea:	3304      	adds	r3, #4
 80187ec:	7b22      	ldrb	r2, [r4, #12]
 80187ee:	4419      	add	r1, r3
 80187f0:	445a      	add	r2, fp
 80187f2:	f841 2c04 	str.w	r2, [r1, #-4]
 80187f6:	7b23      	ldrb	r3, [r4, #12]
 80187f8:	9300      	str	r3, [sp, #0]
 80187fa:	2300      	movs	r3, #0
 80187fc:	f7f4 f934 	bl	800ca68 <ucdr_init_buffer_origin_offset>
 8018800:	81e5      	strh	r5, [r4, #14]
 8018802:	2001      	movs	r0, #1
 8018804:	e7a2      	b.n	801874c <uxr_prepare_reliable_buffer_to_write+0x218>
 8018806:	4682      	mov	sl, r0
 8018808:	e6ca      	b.n	80185a0 <uxr_prepare_reliable_buffer_to_write+0x6c>
 801880a:	bf00      	nop
 801880c:	08018415 	.word	0x08018415

08018810 <uxr_prepare_next_reliable_buffer_to_send>:
 8018810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018812:	4604      	mov	r4, r0
 8018814:	460f      	mov	r7, r1
 8018816:	8a00      	ldrh	r0, [r0, #16]
 8018818:	2101      	movs	r1, #1
 801881a:	4616      	mov	r6, r2
 801881c:	461d      	mov	r5, r3
 801881e:	f000 f8f9 	bl	8018a14 <uxr_seq_num_add>
 8018822:	8028      	strh	r0, [r5, #0]
 8018824:	8922      	ldrh	r2, [r4, #8]
 8018826:	fbb0 f3f2 	udiv	r3, r0, r2
 801882a:	fb02 0c13 	mls	ip, r2, r3, r0
 801882e:	fa1f fc8c 	uxth.w	ip, ip
 8018832:	6863      	ldr	r3, [r4, #4]
 8018834:	fbb3 f3f2 	udiv	r3, r3, r2
 8018838:	fb0c fc03 	mul.w	ip, ip, r3
 801883c:	6823      	ldr	r3, [r4, #0]
 801883e:	89e1      	ldrh	r1, [r4, #14]
 8018840:	f10c 0c04 	add.w	ip, ip, #4
 8018844:	4463      	add	r3, ip
 8018846:	603b      	str	r3, [r7, #0]
 8018848:	6823      	ldr	r3, [r4, #0]
 801884a:	449c      	add	ip, r3
 801884c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8018850:	6033      	str	r3, [r6, #0]
 8018852:	f000 f8e7 	bl	8018a24 <uxr_seq_num_cmp>
 8018856:	2800      	cmp	r0, #0
 8018858:	dd01      	ble.n	801885e <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801885a:	2000      	movs	r0, #0
 801885c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801885e:	7b23      	ldrb	r3, [r4, #12]
 8018860:	6832      	ldr	r2, [r6, #0]
 8018862:	429a      	cmp	r2, r3
 8018864:	d9f9      	bls.n	801885a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8018866:	8a61      	ldrh	r1, [r4, #18]
 8018868:	8a20      	ldrh	r0, [r4, #16]
 801886a:	f000 f8d7 	bl	8018a1c <uxr_seq_num_sub>
 801886e:	8923      	ldrh	r3, [r4, #8]
 8018870:	4283      	cmp	r3, r0
 8018872:	d0f2      	beq.n	801885a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8018874:	8828      	ldrh	r0, [r5, #0]
 8018876:	89e3      	ldrh	r3, [r4, #14]
 8018878:	8220      	strh	r0, [r4, #16]
 801887a:	4298      	cmp	r0, r3
 801887c:	d001      	beq.n	8018882 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801887e:	2001      	movs	r0, #1
 8018880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018882:	2101      	movs	r1, #1
 8018884:	f000 f8c6 	bl	8018a14 <uxr_seq_num_add>
 8018888:	81e0      	strh	r0, [r4, #14]
 801888a:	2001      	movs	r0, #1
 801888c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801888e:	bf00      	nop

08018890 <uxr_update_output_stream_heartbeat_timestamp>:
 8018890:	b570      	push	{r4, r5, r6, lr}
 8018892:	8a01      	ldrh	r1, [r0, #16]
 8018894:	4604      	mov	r4, r0
 8018896:	8a40      	ldrh	r0, [r0, #18]
 8018898:	4615      	mov	r5, r2
 801889a:	461e      	mov	r6, r3
 801889c:	f000 f8c2 	bl	8018a24 <uxr_seq_num_cmp>
 80188a0:	2800      	cmp	r0, #0
 80188a2:	db07      	blt.n	80188b4 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 80188a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80188a8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80188ac:	e9c4 2306 	strd	r2, r3, [r4, #24]
 80188b0:	2000      	movs	r0, #0
 80188b2:	bd70      	pop	{r4, r5, r6, pc}
 80188b4:	f894 0020 	ldrb.w	r0, [r4, #32]
 80188b8:	b940      	cbnz	r0, 80188cc <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 80188ba:	2301      	movs	r3, #1
 80188bc:	f884 3020 	strb.w	r3, [r4, #32]
 80188c0:	3564      	adds	r5, #100	@ 0x64
 80188c2:	f146 0600 	adc.w	r6, r6, #0
 80188c6:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80188ca:	bd70      	pop	{r4, r5, r6, pc}
 80188cc:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 80188d0:	4295      	cmp	r5, r2
 80188d2:	eb76 0303 	sbcs.w	r3, r6, r3
 80188d6:	bfa5      	ittet	ge
 80188d8:	3001      	addge	r0, #1
 80188da:	f884 0020 	strbge.w	r0, [r4, #32]
 80188de:	2000      	movlt	r0, #0
 80188e0:	2001      	movge	r0, #1
 80188e2:	e7ed      	b.n	80188c0 <uxr_update_output_stream_heartbeat_timestamp+0x30>

080188e4 <uxr_begin_output_nack_buffer_it>:
 80188e4:	8a40      	ldrh	r0, [r0, #18]
 80188e6:	4770      	bx	lr

080188e8 <uxr_next_reliable_nack_buffer_to_send>:
 80188e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80188ec:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 80188f0:	b082      	sub	sp, #8
 80188f2:	f1b8 0f00 	cmp.w	r8, #0
 80188f6:	d011      	beq.n	801891c <uxr_next_reliable_nack_buffer_to_send+0x34>
 80188f8:	4604      	mov	r4, r0
 80188fa:	8818      	ldrh	r0, [r3, #0]
 80188fc:	460e      	mov	r6, r1
 80188fe:	4617      	mov	r7, r2
 8018900:	461d      	mov	r5, r3
 8018902:	2101      	movs	r1, #1
 8018904:	f000 f886 	bl	8018a14 <uxr_seq_num_add>
 8018908:	8028      	strh	r0, [r5, #0]
 801890a:	8a21      	ldrh	r1, [r4, #16]
 801890c:	f000 f88a 	bl	8018a24 <uxr_seq_num_cmp>
 8018910:	2800      	cmp	r0, #0
 8018912:	dd07      	ble.n	8018924 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8018914:	f04f 0800 	mov.w	r8, #0
 8018918:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 801891c:	4640      	mov	r0, r8
 801891e:	b002      	add	sp, #8
 8018920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018924:	8921      	ldrh	r1, [r4, #8]
 8018926:	8828      	ldrh	r0, [r5, #0]
 8018928:	6823      	ldr	r3, [r4, #0]
 801892a:	fbb0 f2f1 	udiv	r2, r0, r1
 801892e:	fb01 0c12 	mls	ip, r1, r2, r0
 8018932:	fa1f f28c 	uxth.w	r2, ip
 8018936:	9301      	str	r3, [sp, #4]
 8018938:	6863      	ldr	r3, [r4, #4]
 801893a:	fbb3 fcf1 	udiv	ip, r3, r1
 801893e:	9b01      	ldr	r3, [sp, #4]
 8018940:	fb02 fc0c 	mul.w	ip, r2, ip
 8018944:	f10c 0c04 	add.w	ip, ip, #4
 8018948:	4463      	add	r3, ip
 801894a:	6033      	str	r3, [r6, #0]
 801894c:	6823      	ldr	r3, [r4, #0]
 801894e:	4463      	add	r3, ip
 8018950:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8018954:	603b      	str	r3, [r7, #0]
 8018956:	7b22      	ldrb	r2, [r4, #12]
 8018958:	429a      	cmp	r2, r3
 801895a:	d0d2      	beq.n	8018902 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 801895c:	4640      	mov	r0, r8
 801895e:	b002      	add	sp, #8
 8018960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018964 <uxr_process_acknack>:
 8018964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018966:	4604      	mov	r4, r0
 8018968:	460e      	mov	r6, r1
 801896a:	4610      	mov	r0, r2
 801896c:	2101      	movs	r1, #1
 801896e:	f000 f855 	bl	8018a1c <uxr_seq_num_sub>
 8018972:	8a61      	ldrh	r1, [r4, #18]
 8018974:	f000 f852 	bl	8018a1c <uxr_seq_num_sub>
 8018978:	b1c0      	cbz	r0, 80189ac <uxr_process_acknack+0x48>
 801897a:	4605      	mov	r5, r0
 801897c:	2700      	movs	r7, #0
 801897e:	2101      	movs	r1, #1
 8018980:	8a60      	ldrh	r0, [r4, #18]
 8018982:	f000 f847 	bl	8018a14 <uxr_seq_num_add>
 8018986:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801898a:	fbb0 f1fc 	udiv	r1, r0, ip
 801898e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018992:	fb0c 0111 	mls	r1, ip, r1, r0
 8018996:	b289      	uxth	r1, r1
 8018998:	3701      	adds	r7, #1
 801899a:	fbb3 f3fc 	udiv	r3, r3, ip
 801899e:	fb01 f303 	mul.w	r3, r1, r3
 80189a2:	42bd      	cmp	r5, r7
 80189a4:	7b21      	ldrb	r1, [r4, #12]
 80189a6:	8260      	strh	r0, [r4, #18]
 80189a8:	50d1      	str	r1, [r2, r3]
 80189aa:	d1e8      	bne.n	801897e <uxr_process_acknack+0x1a>
 80189ac:	3e00      	subs	r6, #0
 80189ae:	f04f 0300 	mov.w	r3, #0
 80189b2:	bf18      	it	ne
 80189b4:	2601      	movne	r6, #1
 80189b6:	f884 3020 	strb.w	r3, [r4, #32]
 80189ba:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 80189be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080189c0 <uxr_is_output_up_to_date>:
 80189c0:	8a01      	ldrh	r1, [r0, #16]
 80189c2:	8a40      	ldrh	r0, [r0, #18]
 80189c4:	b508      	push	{r3, lr}
 80189c6:	f000 f82d 	bl	8018a24 <uxr_seq_num_cmp>
 80189ca:	fab0 f080 	clz	r0, r0
 80189ce:	0940      	lsrs	r0, r0, #5
 80189d0:	bd08      	pop	{r3, pc}
 80189d2:	bf00      	nop

080189d4 <get_available_free_slots>:
 80189d4:	8902      	ldrh	r2, [r0, #8]
 80189d6:	b1da      	cbz	r2, 8018a10 <get_available_free_slots+0x3c>
 80189d8:	b530      	push	{r4, r5, lr}
 80189da:	2100      	movs	r1, #0
 80189dc:	6843      	ldr	r3, [r0, #4]
 80189de:	6805      	ldr	r5, [r0, #0]
 80189e0:	7b04      	ldrb	r4, [r0, #12]
 80189e2:	fbb3 fef2 	udiv	lr, r3, r2
 80189e6:	4608      	mov	r0, r1
 80189e8:	460b      	mov	r3, r1
 80189ea:	fbb3 fcf2 	udiv	ip, r3, r2
 80189ee:	fb02 331c 	mls	r3, r2, ip, r3
 80189f2:	b29b      	uxth	r3, r3
 80189f4:	fb0e f303 	mul.w	r3, lr, r3
 80189f8:	3101      	adds	r1, #1
 80189fa:	f855 c003 	ldr.w	ip, [r5, r3]
 80189fe:	4564      	cmp	r4, ip
 8018a00:	bf08      	it	eq
 8018a02:	3001      	addeq	r0, #1
 8018a04:	b28b      	uxth	r3, r1
 8018a06:	bf08      	it	eq
 8018a08:	b280      	uxtheq	r0, r0
 8018a0a:	4293      	cmp	r3, r2
 8018a0c:	d3ed      	bcc.n	80189ea <get_available_free_slots+0x16>
 8018a0e:	bd30      	pop	{r4, r5, pc}
 8018a10:	4610      	mov	r0, r2
 8018a12:	4770      	bx	lr

08018a14 <uxr_seq_num_add>:
 8018a14:	4408      	add	r0, r1
 8018a16:	b280      	uxth	r0, r0
 8018a18:	4770      	bx	lr
 8018a1a:	bf00      	nop

08018a1c <uxr_seq_num_sub>:
 8018a1c:	1a40      	subs	r0, r0, r1
 8018a1e:	b280      	uxth	r0, r0
 8018a20:	4770      	bx	lr
 8018a22:	bf00      	nop

08018a24 <uxr_seq_num_cmp>:
 8018a24:	4288      	cmp	r0, r1
 8018a26:	d011      	beq.n	8018a4c <uxr_seq_num_cmp+0x28>
 8018a28:	d309      	bcc.n	8018a3e <uxr_seq_num_cmp+0x1a>
 8018a2a:	4288      	cmp	r0, r1
 8018a2c:	d910      	bls.n	8018a50 <uxr_seq_num_cmp+0x2c>
 8018a2e:	1a40      	subs	r0, r0, r1
 8018a30:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8018a34:	bfd4      	ite	le
 8018a36:	2001      	movle	r0, #1
 8018a38:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8018a3c:	4770      	bx	lr
 8018a3e:	1a0b      	subs	r3, r1, r0
 8018a40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8018a44:	daf1      	bge.n	8018a2a <uxr_seq_num_cmp+0x6>
 8018a46:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018a4a:	4770      	bx	lr
 8018a4c:	2000      	movs	r0, #0
 8018a4e:	4770      	bx	lr
 8018a50:	2001      	movs	r0, #1
 8018a52:	4770      	bx	lr

08018a54 <rcl_get_default_domain_id>:
 8018a54:	b530      	push	{r4, r5, lr}
 8018a56:	b083      	sub	sp, #12
 8018a58:	2300      	movs	r3, #0
 8018a5a:	9300      	str	r3, [sp, #0]
 8018a5c:	b1d0      	cbz	r0, 8018a94 <rcl_get_default_domain_id+0x40>
 8018a5e:	4604      	mov	r4, r0
 8018a60:	4669      	mov	r1, sp
 8018a62:	4815      	ldr	r0, [pc, #84]	@ (8018ab8 <rcl_get_default_domain_id+0x64>)
 8018a64:	f7fe f82c 	bl	8016ac0 <rcutils_get_env>
 8018a68:	4602      	mov	r2, r0
 8018a6a:	b110      	cbz	r0, 8018a72 <rcl_get_default_domain_id+0x1e>
 8018a6c:	2001      	movs	r0, #1
 8018a6e:	b003      	add	sp, #12
 8018a70:	bd30      	pop	{r4, r5, pc}
 8018a72:	9b00      	ldr	r3, [sp, #0]
 8018a74:	b18b      	cbz	r3, 8018a9a <rcl_get_default_domain_id+0x46>
 8018a76:	7818      	ldrb	r0, [r3, #0]
 8018a78:	2800      	cmp	r0, #0
 8018a7a:	d0f8      	beq.n	8018a6e <rcl_get_default_domain_id+0x1a>
 8018a7c:	a901      	add	r1, sp, #4
 8018a7e:	4618      	mov	r0, r3
 8018a80:	9201      	str	r2, [sp, #4]
 8018a82:	f000 fe39 	bl	80196f8 <strtoul>
 8018a86:	4605      	mov	r5, r0
 8018a88:	b150      	cbz	r0, 8018aa0 <rcl_get_default_domain_id+0x4c>
 8018a8a:	1c43      	adds	r3, r0, #1
 8018a8c:	d00d      	beq.n	8018aaa <rcl_get_default_domain_id+0x56>
 8018a8e:	6025      	str	r5, [r4, #0]
 8018a90:	2000      	movs	r0, #0
 8018a92:	e7ec      	b.n	8018a6e <rcl_get_default_domain_id+0x1a>
 8018a94:	200b      	movs	r0, #11
 8018a96:	b003      	add	sp, #12
 8018a98:	bd30      	pop	{r4, r5, pc}
 8018a9a:	4618      	mov	r0, r3
 8018a9c:	b003      	add	sp, #12
 8018a9e:	bd30      	pop	{r4, r5, pc}
 8018aa0:	9b01      	ldr	r3, [sp, #4]
 8018aa2:	781b      	ldrb	r3, [r3, #0]
 8018aa4:	2b00      	cmp	r3, #0
 8018aa6:	d0f2      	beq.n	8018a8e <rcl_get_default_domain_id+0x3a>
 8018aa8:	e7e0      	b.n	8018a6c <rcl_get_default_domain_id+0x18>
 8018aaa:	f001 f95f 	bl	8019d6c <__errno>
 8018aae:	6803      	ldr	r3, [r0, #0]
 8018ab0:	2b22      	cmp	r3, #34	@ 0x22
 8018ab2:	d1ec      	bne.n	8018a8e <rcl_get_default_domain_id+0x3a>
 8018ab4:	e7da      	b.n	8018a6c <rcl_get_default_domain_id+0x18>
 8018ab6:	bf00      	nop
 8018ab8:	0801c854 	.word	0x0801c854

08018abc <rcl_expand_topic_name>:
 8018abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ac0:	b08b      	sub	sp, #44	@ 0x2c
 8018ac2:	9306      	str	r3, [sp, #24]
 8018ac4:	2800      	cmp	r0, #0
 8018ac6:	f000 80ad 	beq.w	8018c24 <rcl_expand_topic_name+0x168>
 8018aca:	460e      	mov	r6, r1
 8018acc:	2900      	cmp	r1, #0
 8018ace:	f000 80a9 	beq.w	8018c24 <rcl_expand_topic_name+0x168>
 8018ad2:	4617      	mov	r7, r2
 8018ad4:	2a00      	cmp	r2, #0
 8018ad6:	f000 80a5 	beq.w	8018c24 <rcl_expand_topic_name+0x168>
 8018ada:	2b00      	cmp	r3, #0
 8018adc:	f000 80a2 	beq.w	8018c24 <rcl_expand_topic_name+0x168>
 8018ae0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018ae2:	2b00      	cmp	r3, #0
 8018ae4:	f000 809e 	beq.w	8018c24 <rcl_expand_topic_name+0x168>
 8018ae8:	2200      	movs	r2, #0
 8018aea:	a909      	add	r1, sp, #36	@ 0x24
 8018aec:	4680      	mov	r8, r0
 8018aee:	f000 fa57 	bl	8018fa0 <rcl_validate_topic_name>
 8018af2:	4604      	mov	r4, r0
 8018af4:	2800      	cmp	r0, #0
 8018af6:	f040 8096 	bne.w	8018c26 <rcl_expand_topic_name+0x16a>
 8018afa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018afc:	2b00      	cmp	r3, #0
 8018afe:	f040 809a 	bne.w	8018c36 <rcl_expand_topic_name+0x17a>
 8018b02:	4602      	mov	r2, r0
 8018b04:	a909      	add	r1, sp, #36	@ 0x24
 8018b06:	4630      	mov	r0, r6
 8018b08:	f7fe fc04 	bl	8017314 <rmw_validate_node_name>
 8018b0c:	2800      	cmp	r0, #0
 8018b0e:	f040 808e 	bne.w	8018c2e <rcl_expand_topic_name+0x172>
 8018b12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018b14:	2a00      	cmp	r2, #0
 8018b16:	f040 8093 	bne.w	8018c40 <rcl_expand_topic_name+0x184>
 8018b1a:	a909      	add	r1, sp, #36	@ 0x24
 8018b1c:	4638      	mov	r0, r7
 8018b1e:	f7fe fbdb 	bl	80172d8 <rmw_validate_namespace>
 8018b22:	2800      	cmp	r0, #0
 8018b24:	f040 8083 	bne.w	8018c2e <rcl_expand_topic_name+0x172>
 8018b28:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8018b2a:	2c00      	cmp	r4, #0
 8018b2c:	f040 80ed 	bne.w	8018d0a <rcl_expand_topic_name+0x24e>
 8018b30:	217b      	movs	r1, #123	@ 0x7b
 8018b32:	4640      	mov	r0, r8
 8018b34:	f001 f88e 	bl	8019c54 <strchr>
 8018b38:	f898 3000 	ldrb.w	r3, [r8]
 8018b3c:	2b2f      	cmp	r3, #47	@ 0x2f
 8018b3e:	4605      	mov	r5, r0
 8018b40:	f000 809e 	beq.w	8018c80 <rcl_expand_topic_name+0x1c4>
 8018b44:	2b7e      	cmp	r3, #126	@ 0x7e
 8018b46:	f040 80a2 	bne.w	8018c8e <rcl_expand_topic_name+0x1d2>
 8018b4a:	4638      	mov	r0, r7
 8018b4c:	f7e7 fb72 	bl	8000234 <strlen>
 8018b50:	4a82      	ldr	r2, [pc, #520]	@ (8018d5c <rcl_expand_topic_name+0x2a0>)
 8018b52:	4b83      	ldr	r3, [pc, #524]	@ (8018d60 <rcl_expand_topic_name+0x2a4>)
 8018b54:	2801      	cmp	r0, #1
 8018b56:	bf18      	it	ne
 8018b58:	4613      	movne	r3, r2
 8018b5a:	9302      	str	r3, [sp, #8]
 8018b5c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8018b5e:	9300      	str	r3, [sp, #0]
 8018b60:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8018b64:	f108 0301 	add.w	r3, r8, #1
 8018b68:	9305      	str	r3, [sp, #20]
 8018b6a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8018b6e:	9301      	str	r3, [sp, #4]
 8018b70:	ab14      	add	r3, sp, #80	@ 0x50
 8018b72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018b74:	f7fd ffcc 	bl	8016b10 <rcutils_format_string_limit>
 8018b78:	4682      	mov	sl, r0
 8018b7a:	2800      	cmp	r0, #0
 8018b7c:	f000 80c7 	beq.w	8018d0e <rcl_expand_topic_name+0x252>
 8018b80:	2d00      	cmp	r5, #0
 8018b82:	f000 80a2 	beq.w	8018cca <rcl_expand_topic_name+0x20e>
 8018b86:	217b      	movs	r1, #123	@ 0x7b
 8018b88:	f001 f864 	bl	8019c54 <strchr>
 8018b8c:	46d1      	mov	r9, sl
 8018b8e:	4605      	mov	r5, r0
 8018b90:	9407      	str	r4, [sp, #28]
 8018b92:	46d3      	mov	fp, sl
 8018b94:	464c      	mov	r4, r9
 8018b96:	2d00      	cmp	r5, #0
 8018b98:	f000 80be 	beq.w	8018d18 <rcl_expand_topic_name+0x25c>
 8018b9c:	217d      	movs	r1, #125	@ 0x7d
 8018b9e:	4620      	mov	r0, r4
 8018ba0:	f001 f858 	bl	8019c54 <strchr>
 8018ba4:	eba0 0905 	sub.w	r9, r0, r5
 8018ba8:	f109 0a01 	add.w	sl, r9, #1
 8018bac:	486d      	ldr	r0, [pc, #436]	@ (8018d64 <rcl_expand_topic_name+0x2a8>)
 8018bae:	4652      	mov	r2, sl
 8018bb0:	4629      	mov	r1, r5
 8018bb2:	f001 f85c 	bl	8019c6e <strncmp>
 8018bb6:	2800      	cmp	r0, #0
 8018bb8:	d067      	beq.n	8018c8a <rcl_expand_topic_name+0x1ce>
 8018bba:	486b      	ldr	r0, [pc, #428]	@ (8018d68 <rcl_expand_topic_name+0x2ac>)
 8018bbc:	4652      	mov	r2, sl
 8018bbe:	4629      	mov	r1, r5
 8018bc0:	f001 f855 	bl	8019c6e <strncmp>
 8018bc4:	b130      	cbz	r0, 8018bd4 <rcl_expand_topic_name+0x118>
 8018bc6:	4869      	ldr	r0, [pc, #420]	@ (8018d6c <rcl_expand_topic_name+0x2b0>)
 8018bc8:	4652      	mov	r2, sl
 8018bca:	4629      	mov	r1, r5
 8018bcc:	f001 f84f 	bl	8019c6e <strncmp>
 8018bd0:	2800      	cmp	r0, #0
 8018bd2:	d137      	bne.n	8018c44 <rcl_expand_topic_name+0x188>
 8018bd4:	46b9      	mov	r9, r7
 8018bd6:	ab16      	add	r3, sp, #88	@ 0x58
 8018bd8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018bdc:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8018be0:	ab14      	add	r3, sp, #80	@ 0x50
 8018be2:	4628      	mov	r0, r5
 8018be4:	cb0c      	ldmia	r3, {r2, r3}
 8018be6:	4651      	mov	r1, sl
 8018be8:	f7fe f8ce 	bl	8016d88 <rcutils_strndup>
 8018bec:	4605      	mov	r5, r0
 8018bee:	2800      	cmp	r0, #0
 8018bf0:	f000 809c 	beq.w	8018d2c <rcl_expand_topic_name+0x270>
 8018bf4:	464a      	mov	r2, r9
 8018bf6:	4620      	mov	r0, r4
 8018bf8:	ab14      	add	r3, sp, #80	@ 0x50
 8018bfa:	4629      	mov	r1, r5
 8018bfc:	f7fd ffc2 	bl	8016b84 <rcutils_repl_str>
 8018c00:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018c02:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018c04:	4604      	mov	r4, r0
 8018c06:	4628      	mov	r0, r5
 8018c08:	4798      	blx	r3
 8018c0a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018c0c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018c0e:	4658      	mov	r0, fp
 8018c10:	4798      	blx	r3
 8018c12:	2c00      	cmp	r4, #0
 8018c14:	d07b      	beq.n	8018d0e <rcl_expand_topic_name+0x252>
 8018c16:	217b      	movs	r1, #123	@ 0x7b
 8018c18:	4620      	mov	r0, r4
 8018c1a:	f001 f81b 	bl	8019c54 <strchr>
 8018c1e:	46a3      	mov	fp, r4
 8018c20:	4605      	mov	r5, r0
 8018c22:	e7b8      	b.n	8018b96 <rcl_expand_topic_name+0xda>
 8018c24:	240b      	movs	r4, #11
 8018c26:	4620      	mov	r0, r4
 8018c28:	b00b      	add	sp, #44	@ 0x2c
 8018c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c2e:	f7fb f8c1 	bl	8013db4 <rcl_convert_rmw_ret_to_rcl_ret>
 8018c32:	4604      	mov	r4, r0
 8018c34:	e7f7      	b.n	8018c26 <rcl_expand_topic_name+0x16a>
 8018c36:	2467      	movs	r4, #103	@ 0x67
 8018c38:	4620      	mov	r0, r4
 8018c3a:	b00b      	add	sp, #44	@ 0x2c
 8018c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c40:	24c9      	movs	r4, #201	@ 0xc9
 8018c42:	e7f0      	b.n	8018c26 <rcl_expand_topic_name+0x16a>
 8018c44:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8018c48:	9806      	ldr	r0, [sp, #24]
 8018c4a:	1c69      	adds	r1, r5, #1
 8018c4c:	f7fe f9b6 	bl	8016fbc <rcutils_string_map_getn>
 8018c50:	4681      	mov	r9, r0
 8018c52:	2800      	cmp	r0, #0
 8018c54:	d1bf      	bne.n	8018bd6 <rcl_expand_topic_name+0x11a>
 8018c56:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018c58:	aa16      	add	r2, sp, #88	@ 0x58
 8018c5a:	6018      	str	r0, [r3, #0]
 8018c5c:	ca07      	ldmia	r2, {r0, r1, r2}
 8018c5e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8018c62:	ab14      	add	r3, sp, #80	@ 0x50
 8018c64:	cb0c      	ldmia	r3, {r2, r3}
 8018c66:	4651      	mov	r1, sl
 8018c68:	4628      	mov	r0, r5
 8018c6a:	f7fe f88d 	bl	8016d88 <rcutils_strndup>
 8018c6e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018c70:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018c72:	4798      	blx	r3
 8018c74:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018c76:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018c78:	4658      	mov	r0, fp
 8018c7a:	2469      	movs	r4, #105	@ 0x69
 8018c7c:	4798      	blx	r3
 8018c7e:	e7d2      	b.n	8018c26 <rcl_expand_topic_name+0x16a>
 8018c80:	2800      	cmp	r0, #0
 8018c82:	d05b      	beq.n	8018d3c <rcl_expand_topic_name+0x280>
 8018c84:	46c1      	mov	r9, r8
 8018c86:	46a2      	mov	sl, r4
 8018c88:	e782      	b.n	8018b90 <rcl_expand_topic_name+0xd4>
 8018c8a:	46b1      	mov	r9, r6
 8018c8c:	e7a3      	b.n	8018bd6 <rcl_expand_topic_name+0x11a>
 8018c8e:	2800      	cmp	r0, #0
 8018c90:	d1f8      	bne.n	8018c84 <rcl_expand_topic_name+0x1c8>
 8018c92:	4638      	mov	r0, r7
 8018c94:	f7e7 face 	bl	8000234 <strlen>
 8018c98:	4a35      	ldr	r2, [pc, #212]	@ (8018d70 <rcl_expand_topic_name+0x2b4>)
 8018c9a:	4b36      	ldr	r3, [pc, #216]	@ (8018d74 <rcl_expand_topic_name+0x2b8>)
 8018c9c:	f8cd 8010 	str.w	r8, [sp, #16]
 8018ca0:	2801      	cmp	r0, #1
 8018ca2:	bf18      	it	ne
 8018ca4:	4613      	movne	r3, r2
 8018ca6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8018caa:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8018cae:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8018cb0:	9703      	str	r7, [sp, #12]
 8018cb2:	9200      	str	r2, [sp, #0]
 8018cb4:	ab14      	add	r3, sp, #80	@ 0x50
 8018cb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018cb8:	f7fd ff2a 	bl	8016b10 <rcutils_format_string_limit>
 8018cbc:	4682      	mov	sl, r0
 8018cbe:	4653      	mov	r3, sl
 8018cc0:	b32b      	cbz	r3, 8018d0e <rcl_expand_topic_name+0x252>
 8018cc2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018cc4:	f8c3 a000 	str.w	sl, [r3]
 8018cc8:	e7ad      	b.n	8018c26 <rcl_expand_topic_name+0x16a>
 8018cca:	f89a 3000 	ldrb.w	r3, [sl]
 8018cce:	2b2f      	cmp	r3, #47	@ 0x2f
 8018cd0:	d0f7      	beq.n	8018cc2 <rcl_expand_topic_name+0x206>
 8018cd2:	4638      	mov	r0, r7
 8018cd4:	f7e7 faae 	bl	8000234 <strlen>
 8018cd8:	4a25      	ldr	r2, [pc, #148]	@ (8018d70 <rcl_expand_topic_name+0x2b4>)
 8018cda:	4b26      	ldr	r3, [pc, #152]	@ (8018d74 <rcl_expand_topic_name+0x2b8>)
 8018cdc:	f8cd a010 	str.w	sl, [sp, #16]
 8018ce0:	2801      	cmp	r0, #1
 8018ce2:	bf18      	it	ne
 8018ce4:	4613      	movne	r3, r2
 8018ce6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8018cea:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8018cee:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8018cf0:	9703      	str	r7, [sp, #12]
 8018cf2:	9200      	str	r2, [sp, #0]
 8018cf4:	ab14      	add	r3, sp, #80	@ 0x50
 8018cf6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018cf8:	f7fd ff0a 	bl	8016b10 <rcutils_format_string_limit>
 8018cfc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018cfe:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018d00:	4605      	mov	r5, r0
 8018d02:	4650      	mov	r0, sl
 8018d04:	4798      	blx	r3
 8018d06:	46aa      	mov	sl, r5
 8018d08:	e7d9      	b.n	8018cbe <rcl_expand_topic_name+0x202>
 8018d0a:	24ca      	movs	r4, #202	@ 0xca
 8018d0c:	e78b      	b.n	8018c26 <rcl_expand_topic_name+0x16a>
 8018d0e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8018d10:	2300      	movs	r3, #0
 8018d12:	6013      	str	r3, [r2, #0]
 8018d14:	240a      	movs	r4, #10
 8018d16:	e786      	b.n	8018c26 <rcl_expand_topic_name+0x16a>
 8018d18:	465b      	mov	r3, fp
 8018d1a:	9c07      	ldr	r4, [sp, #28]
 8018d1c:	46da      	mov	sl, fp
 8018d1e:	2b00      	cmp	r3, #0
 8018d20:	d1d3      	bne.n	8018cca <rcl_expand_topic_name+0x20e>
 8018d22:	f898 3000 	ldrb.w	r3, [r8]
 8018d26:	2b2f      	cmp	r3, #47	@ 0x2f
 8018d28:	d0cb      	beq.n	8018cc2 <rcl_expand_topic_name+0x206>
 8018d2a:	e7b2      	b.n	8018c92 <rcl_expand_topic_name+0x1d6>
 8018d2c:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8018d30:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018d32:	6015      	str	r5, [r2, #0]
 8018d34:	4658      	mov	r0, fp
 8018d36:	4798      	blx	r3
 8018d38:	240a      	movs	r4, #10
 8018d3a:	e774      	b.n	8018c26 <rcl_expand_topic_name+0x16a>
 8018d3c:	ab17      	add	r3, sp, #92	@ 0x5c
 8018d3e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018d42:	e88d 0003 	stmia.w	sp, {r0, r1}
 8018d46:	ab14      	add	r3, sp, #80	@ 0x50
 8018d48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8018d4a:	4640      	mov	r0, r8
 8018d4c:	f7fd fffa 	bl	8016d44 <rcutils_strdup>
 8018d50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018d52:	2800      	cmp	r0, #0
 8018d54:	6018      	str	r0, [r3, #0]
 8018d56:	bf08      	it	eq
 8018d58:	240a      	moveq	r4, #10
 8018d5a:	e764      	b.n	8018c26 <rcl_expand_topic_name+0x16a>
 8018d5c:	0801c864 	.word	0x0801c864
 8018d60:	0801bd84 	.word	0x0801bd84
 8018d64:	0801c86c 	.word	0x0801c86c
 8018d68:	0801c874 	.word	0x0801c874
 8018d6c:	0801c87c 	.word	0x0801c87c
 8018d70:	0801bd70 	.word	0x0801bd70
 8018d74:	0801bd94 	.word	0x0801bd94

08018d78 <rcl_get_default_topic_name_substitutions>:
 8018d78:	2800      	cmp	r0, #0
 8018d7a:	bf0c      	ite	eq
 8018d7c:	200b      	moveq	r0, #11
 8018d7e:	2000      	movne	r0, #0
 8018d80:	4770      	bx	lr
 8018d82:	bf00      	nop

08018d84 <rcl_get_zero_initialized_guard_condition>:
 8018d84:	4a03      	ldr	r2, [pc, #12]	@ (8018d94 <rcl_get_zero_initialized_guard_condition+0x10>)
 8018d86:	4603      	mov	r3, r0
 8018d88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018d8c:	e883 0003 	stmia.w	r3, {r0, r1}
 8018d90:	4618      	mov	r0, r3
 8018d92:	4770      	bx	lr
 8018d94:	0801c888 	.word	0x0801c888

08018d98 <rcl_guard_condition_init>:
 8018d98:	b082      	sub	sp, #8
 8018d9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018d9c:	b087      	sub	sp, #28
 8018d9e:	ac0c      	add	r4, sp, #48	@ 0x30
 8018da0:	e884 000c 	stmia.w	r4, {r2, r3}
 8018da4:	46a6      	mov	lr, r4
 8018da6:	460d      	mov	r5, r1
 8018da8:	4604      	mov	r4, r0
 8018daa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018dae:	f10d 0c04 	add.w	ip, sp, #4
 8018db2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018db6:	f8de 3000 	ldr.w	r3, [lr]
 8018dba:	f8cc 3000 	str.w	r3, [ip]
 8018dbe:	a801      	add	r0, sp, #4
 8018dc0:	f7f5 f888 	bl	800ded4 <rcutils_allocator_is_valid>
 8018dc4:	b338      	cbz	r0, 8018e16 <rcl_guard_condition_init+0x7e>
 8018dc6:	b334      	cbz	r4, 8018e16 <rcl_guard_condition_init+0x7e>
 8018dc8:	6866      	ldr	r6, [r4, #4]
 8018dca:	b9ee      	cbnz	r6, 8018e08 <rcl_guard_condition_init+0x70>
 8018dcc:	b31d      	cbz	r5, 8018e16 <rcl_guard_condition_init+0x7e>
 8018dce:	4628      	mov	r0, r5
 8018dd0:	f7fb f80e 	bl	8013df0 <rcl_context_is_valid>
 8018dd4:	b308      	cbz	r0, 8018e1a <rcl_guard_condition_init+0x82>
 8018dd6:	9b01      	ldr	r3, [sp, #4]
 8018dd8:	9905      	ldr	r1, [sp, #20]
 8018dda:	201c      	movs	r0, #28
 8018ddc:	4798      	blx	r3
 8018dde:	4607      	mov	r7, r0
 8018de0:	6060      	str	r0, [r4, #4]
 8018de2:	b310      	cbz	r0, 8018e2a <rcl_guard_condition_init+0x92>
 8018de4:	6828      	ldr	r0, [r5, #0]
 8018de6:	3028      	adds	r0, #40	@ 0x28
 8018de8:	f000 f9ac 	bl	8019144 <rmw_create_guard_condition>
 8018dec:	6038      	str	r0, [r7, #0]
 8018dee:	6860      	ldr	r0, [r4, #4]
 8018df0:	6805      	ldr	r5, [r0, #0]
 8018df2:	b1a5      	cbz	r5, 8018e1e <rcl_guard_condition_init+0x86>
 8018df4:	2301      	movs	r3, #1
 8018df6:	ac01      	add	r4, sp, #4
 8018df8:	7103      	strb	r3, [r0, #4]
 8018dfa:	f100 0708 	add.w	r7, r0, #8
 8018dfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018e00:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8018e02:	6823      	ldr	r3, [r4, #0]
 8018e04:	603b      	str	r3, [r7, #0]
 8018e06:	e000      	b.n	8018e0a <rcl_guard_condition_init+0x72>
 8018e08:	2664      	movs	r6, #100	@ 0x64
 8018e0a:	4630      	mov	r0, r6
 8018e0c:	b007      	add	sp, #28
 8018e0e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018e12:	b002      	add	sp, #8
 8018e14:	4770      	bx	lr
 8018e16:	260b      	movs	r6, #11
 8018e18:	e7f7      	b.n	8018e0a <rcl_guard_condition_init+0x72>
 8018e1a:	2665      	movs	r6, #101	@ 0x65
 8018e1c:	e7f5      	b.n	8018e0a <rcl_guard_condition_init+0x72>
 8018e1e:	9b02      	ldr	r3, [sp, #8]
 8018e20:	9905      	ldr	r1, [sp, #20]
 8018e22:	4798      	blx	r3
 8018e24:	2601      	movs	r6, #1
 8018e26:	6065      	str	r5, [r4, #4]
 8018e28:	e7ef      	b.n	8018e0a <rcl_guard_condition_init+0x72>
 8018e2a:	260a      	movs	r6, #10
 8018e2c:	e7ed      	b.n	8018e0a <rcl_guard_condition_init+0x72>
 8018e2e:	bf00      	nop

08018e30 <rcl_guard_condition_init_from_rmw>:
 8018e30:	b082      	sub	sp, #8
 8018e32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e36:	b086      	sub	sp, #24
 8018e38:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8018e3c:	4604      	mov	r4, r0
 8018e3e:	f84c 3f04 	str.w	r3, [ip, #4]!
 8018e42:	460e      	mov	r6, r1
 8018e44:	4617      	mov	r7, r2
 8018e46:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8018e4a:	f10d 0e04 	add.w	lr, sp, #4
 8018e4e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8018e52:	f8dc 3000 	ldr.w	r3, [ip]
 8018e56:	f8ce 3000 	str.w	r3, [lr]
 8018e5a:	a801      	add	r0, sp, #4
 8018e5c:	f7f5 f83a 	bl	800ded4 <rcutils_allocator_is_valid>
 8018e60:	b350      	cbz	r0, 8018eb8 <rcl_guard_condition_init_from_rmw+0x88>
 8018e62:	b34c      	cbz	r4, 8018eb8 <rcl_guard_condition_init_from_rmw+0x88>
 8018e64:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8018e68:	f1b8 0f00 	cmp.w	r8, #0
 8018e6c:	d11e      	bne.n	8018eac <rcl_guard_condition_init_from_rmw+0x7c>
 8018e6e:	b31f      	cbz	r7, 8018eb8 <rcl_guard_condition_init_from_rmw+0x88>
 8018e70:	4638      	mov	r0, r7
 8018e72:	f7fa ffbd 	bl	8013df0 <rcl_context_is_valid>
 8018e76:	b328      	cbz	r0, 8018ec4 <rcl_guard_condition_init_from_rmw+0x94>
 8018e78:	9b01      	ldr	r3, [sp, #4]
 8018e7a:	9905      	ldr	r1, [sp, #20]
 8018e7c:	201c      	movs	r0, #28
 8018e7e:	4798      	blx	r3
 8018e80:	4605      	mov	r5, r0
 8018e82:	6060      	str	r0, [r4, #4]
 8018e84:	b358      	cbz	r0, 8018ede <rcl_guard_condition_init_from_rmw+0xae>
 8018e86:	b1fe      	cbz	r6, 8018ec8 <rcl_guard_condition_init_from_rmw+0x98>
 8018e88:	6006      	str	r6, [r0, #0]
 8018e8a:	f880 8004 	strb.w	r8, [r0, #4]
 8018e8e:	ac01      	add	r4, sp, #4
 8018e90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018e92:	f105 0c08 	add.w	ip, r5, #8
 8018e96:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018e9a:	6823      	ldr	r3, [r4, #0]
 8018e9c:	f8cc 3000 	str.w	r3, [ip]
 8018ea0:	2000      	movs	r0, #0
 8018ea2:	b006      	add	sp, #24
 8018ea4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018ea8:	b002      	add	sp, #8
 8018eaa:	4770      	bx	lr
 8018eac:	2064      	movs	r0, #100	@ 0x64
 8018eae:	b006      	add	sp, #24
 8018eb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018eb4:	b002      	add	sp, #8
 8018eb6:	4770      	bx	lr
 8018eb8:	200b      	movs	r0, #11
 8018eba:	b006      	add	sp, #24
 8018ebc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018ec0:	b002      	add	sp, #8
 8018ec2:	4770      	bx	lr
 8018ec4:	2065      	movs	r0, #101	@ 0x65
 8018ec6:	e7f2      	b.n	8018eae <rcl_guard_condition_init_from_rmw+0x7e>
 8018ec8:	6838      	ldr	r0, [r7, #0]
 8018eca:	3028      	adds	r0, #40	@ 0x28
 8018ecc:	f000 f93a 	bl	8019144 <rmw_create_guard_condition>
 8018ed0:	6028      	str	r0, [r5, #0]
 8018ed2:	6865      	ldr	r5, [r4, #4]
 8018ed4:	682e      	ldr	r6, [r5, #0]
 8018ed6:	b126      	cbz	r6, 8018ee2 <rcl_guard_condition_init_from_rmw+0xb2>
 8018ed8:	2301      	movs	r3, #1
 8018eda:	712b      	strb	r3, [r5, #4]
 8018edc:	e7d7      	b.n	8018e8e <rcl_guard_condition_init_from_rmw+0x5e>
 8018ede:	200a      	movs	r0, #10
 8018ee0:	e7e5      	b.n	8018eae <rcl_guard_condition_init_from_rmw+0x7e>
 8018ee2:	4628      	mov	r0, r5
 8018ee4:	9b02      	ldr	r3, [sp, #8]
 8018ee6:	9905      	ldr	r1, [sp, #20]
 8018ee8:	4798      	blx	r3
 8018eea:	6066      	str	r6, [r4, #4]
 8018eec:	2001      	movs	r0, #1
 8018eee:	e7de      	b.n	8018eae <rcl_guard_condition_init_from_rmw+0x7e>

08018ef0 <rcl_guard_condition_fini>:
 8018ef0:	b570      	push	{r4, r5, r6, lr}
 8018ef2:	b082      	sub	sp, #8
 8018ef4:	b1f0      	cbz	r0, 8018f34 <rcl_guard_condition_fini+0x44>
 8018ef6:	6843      	ldr	r3, [r0, #4]
 8018ef8:	4604      	mov	r4, r0
 8018efa:	b163      	cbz	r3, 8018f16 <rcl_guard_condition_fini+0x26>
 8018efc:	6818      	ldr	r0, [r3, #0]
 8018efe:	68de      	ldr	r6, [r3, #12]
 8018f00:	6999      	ldr	r1, [r3, #24]
 8018f02:	b160      	cbz	r0, 8018f1e <rcl_guard_condition_fini+0x2e>
 8018f04:	791d      	ldrb	r5, [r3, #4]
 8018f06:	b965      	cbnz	r5, 8018f22 <rcl_guard_condition_fini+0x32>
 8018f08:	4618      	mov	r0, r3
 8018f0a:	47b0      	blx	r6
 8018f0c:	2300      	movs	r3, #0
 8018f0e:	4628      	mov	r0, r5
 8018f10:	6063      	str	r3, [r4, #4]
 8018f12:	b002      	add	sp, #8
 8018f14:	bd70      	pop	{r4, r5, r6, pc}
 8018f16:	461d      	mov	r5, r3
 8018f18:	4628      	mov	r0, r5
 8018f1a:	b002      	add	sp, #8
 8018f1c:	bd70      	pop	{r4, r5, r6, pc}
 8018f1e:	4605      	mov	r5, r0
 8018f20:	e7f2      	b.n	8018f08 <rcl_guard_condition_fini+0x18>
 8018f22:	9101      	str	r1, [sp, #4]
 8018f24:	f000 f922 	bl	801916c <rmw_destroy_guard_condition>
 8018f28:	1e05      	subs	r5, r0, #0
 8018f2a:	6863      	ldr	r3, [r4, #4]
 8018f2c:	9901      	ldr	r1, [sp, #4]
 8018f2e:	bf18      	it	ne
 8018f30:	2501      	movne	r5, #1
 8018f32:	e7e9      	b.n	8018f08 <rcl_guard_condition_fini+0x18>
 8018f34:	250b      	movs	r5, #11
 8018f36:	4628      	mov	r0, r5
 8018f38:	b002      	add	sp, #8
 8018f3a:	bd70      	pop	{r4, r5, r6, pc}

08018f3c <rcl_guard_condition_get_default_options>:
 8018f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018f3e:	b087      	sub	sp, #28
 8018f40:	4606      	mov	r6, r0
 8018f42:	4668      	mov	r0, sp
 8018f44:	f7f4 ffb8 	bl	800deb8 <rcutils_get_default_allocator>
 8018f48:	4b09      	ldr	r3, [pc, #36]	@ (8018f70 <rcl_guard_condition_get_default_options+0x34>)
 8018f4a:	46ee      	mov	lr, sp
 8018f4c:	469c      	mov	ip, r3
 8018f4e:	461d      	mov	r5, r3
 8018f50:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018f54:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018f58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018f5a:	4634      	mov	r4, r6
 8018f5c:	f8de 7000 	ldr.w	r7, [lr]
 8018f60:	f8cc 7000 	str.w	r7, [ip]
 8018f64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018f66:	4630      	mov	r0, r6
 8018f68:	6027      	str	r7, [r4, #0]
 8018f6a:	b007      	add	sp, #28
 8018f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018f6e:	bf00      	nop
 8018f70:	2000bbc4 	.word	0x2000bbc4

08018f74 <rcl_trigger_guard_condition>:
 8018f74:	b148      	cbz	r0, 8018f8a <rcl_trigger_guard_condition+0x16>
 8018f76:	b508      	push	{r3, lr}
 8018f78:	6843      	ldr	r3, [r0, #4]
 8018f7a:	b143      	cbz	r3, 8018f8e <rcl_trigger_guard_condition+0x1a>
 8018f7c:	6818      	ldr	r0, [r3, #0]
 8018f7e:	f000 f909 	bl	8019194 <rmw_trigger_guard_condition>
 8018f82:	3800      	subs	r0, #0
 8018f84:	bf18      	it	ne
 8018f86:	2001      	movne	r0, #1
 8018f88:	bd08      	pop	{r3, pc}
 8018f8a:	200b      	movs	r0, #11
 8018f8c:	4770      	bx	lr
 8018f8e:	200b      	movs	r0, #11
 8018f90:	bd08      	pop	{r3, pc}
 8018f92:	bf00      	nop

08018f94 <rcl_guard_condition_get_rmw_handle>:
 8018f94:	b110      	cbz	r0, 8018f9c <rcl_guard_condition_get_rmw_handle+0x8>
 8018f96:	6840      	ldr	r0, [r0, #4]
 8018f98:	b100      	cbz	r0, 8018f9c <rcl_guard_condition_get_rmw_handle+0x8>
 8018f9a:	6800      	ldr	r0, [r0, #0]
 8018f9c:	4770      	bx	lr
 8018f9e:	bf00      	nop

08018fa0 <rcl_validate_topic_name>:
 8018fa0:	2800      	cmp	r0, #0
 8018fa2:	d07a      	beq.n	801909a <rcl_validate_topic_name+0xfa>
 8018fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018fa8:	460e      	mov	r6, r1
 8018faa:	2900      	cmp	r1, #0
 8018fac:	d07c      	beq.n	80190a8 <rcl_validate_topic_name+0x108>
 8018fae:	4617      	mov	r7, r2
 8018fb0:	4605      	mov	r5, r0
 8018fb2:	f7e7 f93f 	bl	8000234 <strlen>
 8018fb6:	b1b0      	cbz	r0, 8018fe6 <rcl_validate_topic_name+0x46>
 8018fb8:	f895 9000 	ldrb.w	r9, [r5]
 8018fbc:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8019140 <rcl_validate_topic_name+0x1a0>
 8018fc0:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8018fc4:	f013 0304 	ands.w	r3, r3, #4
 8018fc8:	d169      	bne.n	801909e <rcl_validate_topic_name+0xfe>
 8018fca:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8018fce:	f815 2008 	ldrb.w	r2, [r5, r8]
 8018fd2:	2a2f      	cmp	r2, #47	@ 0x2f
 8018fd4:	d10e      	bne.n	8018ff4 <rcl_validate_topic_name+0x54>
 8018fd6:	2202      	movs	r2, #2
 8018fd8:	6032      	str	r2, [r6, #0]
 8018fda:	b36f      	cbz	r7, 8019038 <rcl_validate_topic_name+0x98>
 8018fdc:	f8c7 8000 	str.w	r8, [r7]
 8018fe0:	4618      	mov	r0, r3
 8018fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018fe6:	2301      	movs	r3, #1
 8018fe8:	6033      	str	r3, [r6, #0]
 8018fea:	b32f      	cbz	r7, 8019038 <rcl_validate_topic_name+0x98>
 8018fec:	2000      	movs	r0, #0
 8018fee:	6038      	str	r0, [r7, #0]
 8018ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018ff4:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8018ff8:	461c      	mov	r4, r3
 8018ffa:	4619      	mov	r1, r3
 8018ffc:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8019000:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8019004:	f1be 0f09 	cmp.w	lr, #9
 8019008:	d919      	bls.n	801903e <rcl_validate_topic_name+0x9e>
 801900a:	f022 0e20 	bic.w	lr, r2, #32
 801900e:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8019012:	f1be 0f19 	cmp.w	lr, #25
 8019016:	d912      	bls.n	801903e <rcl_validate_topic_name+0x9e>
 8019018:	2a5f      	cmp	r2, #95	@ 0x5f
 801901a:	d019      	beq.n	8019050 <rcl_validate_topic_name+0xb0>
 801901c:	2a2f      	cmp	r2, #47	@ 0x2f
 801901e:	d051      	beq.n	80190c4 <rcl_validate_topic_name+0x124>
 8019020:	2a7e      	cmp	r2, #126	@ 0x7e
 8019022:	d048      	beq.n	80190b6 <rcl_validate_topic_name+0x116>
 8019024:	2a7b      	cmp	r2, #123	@ 0x7b
 8019026:	d054      	beq.n	80190d2 <rcl_validate_topic_name+0x132>
 8019028:	2a7d      	cmp	r2, #125	@ 0x7d
 801902a:	d161      	bne.n	80190f0 <rcl_validate_topic_name+0x150>
 801902c:	2c00      	cmp	r4, #0
 801902e:	d155      	bne.n	80190dc <rcl_validate_topic_name+0x13c>
 8019030:	2305      	movs	r3, #5
 8019032:	6033      	str	r3, [r6, #0]
 8019034:	b107      	cbz	r7, 8019038 <rcl_validate_topic_name+0x98>
 8019036:	6039      	str	r1, [r7, #0]
 8019038:	2000      	movs	r0, #0
 801903a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801903e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8019042:	0752      	lsls	r2, r2, #29
 8019044:	d504      	bpl.n	8019050 <rcl_validate_topic_name+0xb0>
 8019046:	b11c      	cbz	r4, 8019050 <rcl_validate_topic_name+0xb0>
 8019048:	b111      	cbz	r1, 8019050 <rcl_validate_topic_name+0xb0>
 801904a:	1e4a      	subs	r2, r1, #1
 801904c:	429a      	cmp	r2, r3
 801904e:	d02d      	beq.n	80190ac <rcl_validate_topic_name+0x10c>
 8019050:	3101      	adds	r1, #1
 8019052:	4288      	cmp	r0, r1
 8019054:	d1d2      	bne.n	8018ffc <rcl_validate_topic_name+0x5c>
 8019056:	2c00      	cmp	r4, #0
 8019058:	d145      	bne.n	80190e6 <rcl_validate_topic_name+0x146>
 801905a:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 801905e:	d04f      	beq.n	8019100 <rcl_validate_topic_name+0x160>
 8019060:	4620      	mov	r0, r4
 8019062:	2301      	movs	r3, #1
 8019064:	e006      	b.n	8019074 <rcl_validate_topic_name+0xd4>
 8019066:	428b      	cmp	r3, r1
 8019068:	f105 0501 	add.w	r5, r5, #1
 801906c:	f103 0201 	add.w	r2, r3, #1
 8019070:	d236      	bcs.n	80190e0 <rcl_validate_topic_name+0x140>
 8019072:	4613      	mov	r3, r2
 8019074:	4580      	cmp	r8, r0
 8019076:	f100 0001 	add.w	r0, r0, #1
 801907a:	d0f4      	beq.n	8019066 <rcl_validate_topic_name+0xc6>
 801907c:	782a      	ldrb	r2, [r5, #0]
 801907e:	2a2f      	cmp	r2, #47	@ 0x2f
 8019080:	d1f1      	bne.n	8019066 <rcl_validate_topic_name+0xc6>
 8019082:	786a      	ldrb	r2, [r5, #1]
 8019084:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8019088:	0754      	lsls	r4, r2, #29
 801908a:	d5ec      	bpl.n	8019066 <rcl_validate_topic_name+0xc6>
 801908c:	2204      	movs	r2, #4
 801908e:	6032      	str	r2, [r6, #0]
 8019090:	2f00      	cmp	r7, #0
 8019092:	d0d1      	beq.n	8019038 <rcl_validate_topic_name+0x98>
 8019094:	603b      	str	r3, [r7, #0]
 8019096:	2000      	movs	r0, #0
 8019098:	e7aa      	b.n	8018ff0 <rcl_validate_topic_name+0x50>
 801909a:	200b      	movs	r0, #11
 801909c:	4770      	bx	lr
 801909e:	2304      	movs	r3, #4
 80190a0:	6033      	str	r3, [r6, #0]
 80190a2:	2f00      	cmp	r7, #0
 80190a4:	d1a2      	bne.n	8018fec <rcl_validate_topic_name+0x4c>
 80190a6:	e7c7      	b.n	8019038 <rcl_validate_topic_name+0x98>
 80190a8:	200b      	movs	r0, #11
 80190aa:	e7a1      	b.n	8018ff0 <rcl_validate_topic_name+0x50>
 80190ac:	2309      	movs	r3, #9
 80190ae:	6033      	str	r3, [r6, #0]
 80190b0:	2f00      	cmp	r7, #0
 80190b2:	d1c0      	bne.n	8019036 <rcl_validate_topic_name+0x96>
 80190b4:	e7c0      	b.n	8019038 <rcl_validate_topic_name+0x98>
 80190b6:	2900      	cmp	r1, #0
 80190b8:	d0ca      	beq.n	8019050 <rcl_validate_topic_name+0xb0>
 80190ba:	2306      	movs	r3, #6
 80190bc:	6033      	str	r3, [r6, #0]
 80190be:	2f00      	cmp	r7, #0
 80190c0:	d1b9      	bne.n	8019036 <rcl_validate_topic_name+0x96>
 80190c2:	e7b9      	b.n	8019038 <rcl_validate_topic_name+0x98>
 80190c4:	2c00      	cmp	r4, #0
 80190c6:	d0c3      	beq.n	8019050 <rcl_validate_topic_name+0xb0>
 80190c8:	2308      	movs	r3, #8
 80190ca:	6033      	str	r3, [r6, #0]
 80190cc:	2f00      	cmp	r7, #0
 80190ce:	d1b2      	bne.n	8019036 <rcl_validate_topic_name+0x96>
 80190d0:	e7b2      	b.n	8019038 <rcl_validate_topic_name+0x98>
 80190d2:	2c00      	cmp	r4, #0
 80190d4:	d1f8      	bne.n	80190c8 <rcl_validate_topic_name+0x128>
 80190d6:	460b      	mov	r3, r1
 80190d8:	2401      	movs	r4, #1
 80190da:	e7b9      	b.n	8019050 <rcl_validate_topic_name+0xb0>
 80190dc:	2400      	movs	r4, #0
 80190de:	e7b7      	b.n	8019050 <rcl_validate_topic_name+0xb0>
 80190e0:	2000      	movs	r0, #0
 80190e2:	6030      	str	r0, [r6, #0]
 80190e4:	e784      	b.n	8018ff0 <rcl_validate_topic_name+0x50>
 80190e6:	2205      	movs	r2, #5
 80190e8:	6032      	str	r2, [r6, #0]
 80190ea:	2f00      	cmp	r7, #0
 80190ec:	d1d2      	bne.n	8019094 <rcl_validate_topic_name+0xf4>
 80190ee:	e7a3      	b.n	8019038 <rcl_validate_topic_name+0x98>
 80190f0:	2c00      	cmp	r4, #0
 80190f2:	bf14      	ite	ne
 80190f4:	2308      	movne	r3, #8
 80190f6:	2303      	moveq	r3, #3
 80190f8:	6033      	str	r3, [r6, #0]
 80190fa:	2f00      	cmp	r7, #0
 80190fc:	d19b      	bne.n	8019036 <rcl_validate_topic_name+0x96>
 80190fe:	e79b      	b.n	8019038 <rcl_validate_topic_name+0x98>
 8019100:	2301      	movs	r3, #1
 8019102:	e00a      	b.n	801911a <rcl_validate_topic_name+0x17a>
 8019104:	2c01      	cmp	r4, #1
 8019106:	d013      	beq.n	8019130 <rcl_validate_topic_name+0x190>
 8019108:	4299      	cmp	r1, r3
 801910a:	f104 0401 	add.w	r4, r4, #1
 801910e:	f105 0501 	add.w	r5, r5, #1
 8019112:	f103 0201 	add.w	r2, r3, #1
 8019116:	d9e3      	bls.n	80190e0 <rcl_validate_topic_name+0x140>
 8019118:	4613      	mov	r3, r2
 801911a:	45a0      	cmp	r8, r4
 801911c:	d0f4      	beq.n	8019108 <rcl_validate_topic_name+0x168>
 801911e:	782a      	ldrb	r2, [r5, #0]
 8019120:	2a2f      	cmp	r2, #47	@ 0x2f
 8019122:	d1ef      	bne.n	8019104 <rcl_validate_topic_name+0x164>
 8019124:	786a      	ldrb	r2, [r5, #1]
 8019126:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801912a:	0752      	lsls	r2, r2, #29
 801912c:	d5ec      	bpl.n	8019108 <rcl_validate_topic_name+0x168>
 801912e:	e7ad      	b.n	801908c <rcl_validate_topic_name+0xec>
 8019130:	2307      	movs	r3, #7
 8019132:	6033      	str	r3, [r6, #0]
 8019134:	2f00      	cmp	r7, #0
 8019136:	f43f af7f 	beq.w	8019038 <rcl_validate_topic_name+0x98>
 801913a:	603c      	str	r4, [r7, #0]
 801913c:	2000      	movs	r0, #0
 801913e:	e757      	b.n	8018ff0 <rcl_validate_topic_name+0x50>
 8019140:	0801c9f2 	.word	0x0801c9f2

08019144 <rmw_create_guard_condition>:
 8019144:	b538      	push	{r3, r4, r5, lr}
 8019146:	4605      	mov	r5, r0
 8019148:	4807      	ldr	r0, [pc, #28]	@ (8019168 <rmw_create_guard_condition+0x24>)
 801914a:	f7fe fa29 	bl	80175a0 <get_memory>
 801914e:	b148      	cbz	r0, 8019164 <rmw_create_guard_condition+0x20>
 8019150:	6884      	ldr	r4, [r0, #8]
 8019152:	2300      	movs	r3, #0
 8019154:	7423      	strb	r3, [r4, #16]
 8019156:	61e5      	str	r5, [r4, #28]
 8019158:	f7fe fa8a 	bl	8017670 <rmw_get_implementation_identifier>
 801915c:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8019160:	f104 0014 	add.w	r0, r4, #20
 8019164:	bd38      	pop	{r3, r4, r5, pc}
 8019166:	bf00      	nop
 8019168:	2000b9f4 	.word	0x2000b9f4

0801916c <rmw_destroy_guard_condition>:
 801916c:	b508      	push	{r3, lr}
 801916e:	4b08      	ldr	r3, [pc, #32]	@ (8019190 <rmw_destroy_guard_condition+0x24>)
 8019170:	6819      	ldr	r1, [r3, #0]
 8019172:	b911      	cbnz	r1, 801917a <rmw_destroy_guard_condition+0xe>
 8019174:	e00a      	b.n	801918c <rmw_destroy_guard_condition+0x20>
 8019176:	6849      	ldr	r1, [r1, #4]
 8019178:	b141      	cbz	r1, 801918c <rmw_destroy_guard_condition+0x20>
 801917a:	688b      	ldr	r3, [r1, #8]
 801917c:	3314      	adds	r3, #20
 801917e:	4298      	cmp	r0, r3
 8019180:	d1f9      	bne.n	8019176 <rmw_destroy_guard_condition+0xa>
 8019182:	4803      	ldr	r0, [pc, #12]	@ (8019190 <rmw_destroy_guard_condition+0x24>)
 8019184:	f7fe fa1c 	bl	80175c0 <put_memory>
 8019188:	2000      	movs	r0, #0
 801918a:	bd08      	pop	{r3, pc}
 801918c:	2001      	movs	r0, #1
 801918e:	bd08      	pop	{r3, pc}
 8019190:	2000b9f4 	.word	0x2000b9f4

08019194 <rmw_trigger_guard_condition>:
 8019194:	b160      	cbz	r0, 80191b0 <rmw_trigger_guard_condition+0x1c>
 8019196:	b510      	push	{r4, lr}
 8019198:	4604      	mov	r4, r0
 801919a:	6800      	ldr	r0, [r0, #0]
 801919c:	f7f6 fa40 	bl	800f620 <is_uxrce_rmw_identifier_valid>
 80191a0:	b908      	cbnz	r0, 80191a6 <rmw_trigger_guard_condition+0x12>
 80191a2:	2001      	movs	r0, #1
 80191a4:	bd10      	pop	{r4, pc}
 80191a6:	6863      	ldr	r3, [r4, #4]
 80191a8:	2201      	movs	r2, #1
 80191aa:	741a      	strb	r2, [r3, #16]
 80191ac:	2000      	movs	r0, #0
 80191ae:	bd10      	pop	{r4, pc}
 80191b0:	2001      	movs	r0, #1
 80191b2:	4770      	bx	lr

080191b4 <rosidl_runtime_c__String__init>:
 80191b4:	b510      	push	{r4, lr}
 80191b6:	4604      	mov	r4, r0
 80191b8:	b086      	sub	sp, #24
 80191ba:	b170      	cbz	r0, 80191da <rosidl_runtime_c__String__init+0x26>
 80191bc:	a801      	add	r0, sp, #4
 80191be:	f7f4 fe7b 	bl	800deb8 <rcutils_get_default_allocator>
 80191c2:	9b01      	ldr	r3, [sp, #4]
 80191c4:	9905      	ldr	r1, [sp, #20]
 80191c6:	2001      	movs	r0, #1
 80191c8:	4798      	blx	r3
 80191ca:	6020      	str	r0, [r4, #0]
 80191cc:	b128      	cbz	r0, 80191da <rosidl_runtime_c__String__init+0x26>
 80191ce:	2100      	movs	r1, #0
 80191d0:	2201      	movs	r2, #1
 80191d2:	7001      	strb	r1, [r0, #0]
 80191d4:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80191d8:	4610      	mov	r0, r2
 80191da:	b006      	add	sp, #24
 80191dc:	bd10      	pop	{r4, pc}
 80191de:	bf00      	nop

080191e0 <rosidl_runtime_c__String__fini>:
 80191e0:	b320      	cbz	r0, 801922c <rosidl_runtime_c__String__fini+0x4c>
 80191e2:	b510      	push	{r4, lr}
 80191e4:	6803      	ldr	r3, [r0, #0]
 80191e6:	b086      	sub	sp, #24
 80191e8:	4604      	mov	r4, r0
 80191ea:	b173      	cbz	r3, 801920a <rosidl_runtime_c__String__fini+0x2a>
 80191ec:	6883      	ldr	r3, [r0, #8]
 80191ee:	b1f3      	cbz	r3, 801922e <rosidl_runtime_c__String__fini+0x4e>
 80191f0:	a801      	add	r0, sp, #4
 80191f2:	f7f4 fe61 	bl	800deb8 <rcutils_get_default_allocator>
 80191f6:	9b02      	ldr	r3, [sp, #8]
 80191f8:	9905      	ldr	r1, [sp, #20]
 80191fa:	6820      	ldr	r0, [r4, #0]
 80191fc:	4798      	blx	r3
 80191fe:	2300      	movs	r3, #0
 8019200:	e9c4 3300 	strd	r3, r3, [r4]
 8019204:	60a3      	str	r3, [r4, #8]
 8019206:	b006      	add	sp, #24
 8019208:	bd10      	pop	{r4, pc}
 801920a:	6843      	ldr	r3, [r0, #4]
 801920c:	b9db      	cbnz	r3, 8019246 <rosidl_runtime_c__String__fini+0x66>
 801920e:	6883      	ldr	r3, [r0, #8]
 8019210:	2b00      	cmp	r3, #0
 8019212:	d0f8      	beq.n	8019206 <rosidl_runtime_c__String__fini+0x26>
 8019214:	4b12      	ldr	r3, [pc, #72]	@ (8019260 <rosidl_runtime_c__String__fini+0x80>)
 8019216:	4813      	ldr	r0, [pc, #76]	@ (8019264 <rosidl_runtime_c__String__fini+0x84>)
 8019218:	681b      	ldr	r3, [r3, #0]
 801921a:	2251      	movs	r2, #81	@ 0x51
 801921c:	68db      	ldr	r3, [r3, #12]
 801921e:	2101      	movs	r1, #1
 8019220:	f000 fb82 	bl	8019928 <fwrite>
 8019224:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019228:	f000 f83e 	bl	80192a8 <exit>
 801922c:	4770      	bx	lr
 801922e:	4b0c      	ldr	r3, [pc, #48]	@ (8019260 <rosidl_runtime_c__String__fini+0x80>)
 8019230:	480d      	ldr	r0, [pc, #52]	@ (8019268 <rosidl_runtime_c__String__fini+0x88>)
 8019232:	681b      	ldr	r3, [r3, #0]
 8019234:	224c      	movs	r2, #76	@ 0x4c
 8019236:	68db      	ldr	r3, [r3, #12]
 8019238:	2101      	movs	r1, #1
 801923a:	f000 fb75 	bl	8019928 <fwrite>
 801923e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019242:	f000 f831 	bl	80192a8 <exit>
 8019246:	4b06      	ldr	r3, [pc, #24]	@ (8019260 <rosidl_runtime_c__String__fini+0x80>)
 8019248:	4808      	ldr	r0, [pc, #32]	@ (801926c <rosidl_runtime_c__String__fini+0x8c>)
 801924a:	681b      	ldr	r3, [r3, #0]
 801924c:	224e      	movs	r2, #78	@ 0x4e
 801924e:	68db      	ldr	r3, [r3, #12]
 8019250:	2101      	movs	r1, #1
 8019252:	f000 fb69 	bl	8019928 <fwrite>
 8019256:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801925a:	f000 f825 	bl	80192a8 <exit>
 801925e:	bf00      	nop
 8019260:	200009fc 	.word	0x200009fc
 8019264:	0801c930 	.word	0x0801c930
 8019268:	0801c890 	.word	0x0801c890
 801926c:	0801c8e0 	.word	0x0801c8e0

08019270 <calloc>:
 8019270:	4b02      	ldr	r3, [pc, #8]	@ (801927c <calloc+0xc>)
 8019272:	460a      	mov	r2, r1
 8019274:	4601      	mov	r1, r0
 8019276:	6818      	ldr	r0, [r3, #0]
 8019278:	f000 b802 	b.w	8019280 <_calloc_r>
 801927c:	200009fc 	.word	0x200009fc

08019280 <_calloc_r>:
 8019280:	b570      	push	{r4, r5, r6, lr}
 8019282:	fba1 5402 	umull	r5, r4, r1, r2
 8019286:	b93c      	cbnz	r4, 8019298 <_calloc_r+0x18>
 8019288:	4629      	mov	r1, r5
 801928a:	f000 f899 	bl	80193c0 <_malloc_r>
 801928e:	4606      	mov	r6, r0
 8019290:	b928      	cbnz	r0, 801929e <_calloc_r+0x1e>
 8019292:	2600      	movs	r6, #0
 8019294:	4630      	mov	r0, r6
 8019296:	bd70      	pop	{r4, r5, r6, pc}
 8019298:	220c      	movs	r2, #12
 801929a:	6002      	str	r2, [r0, #0]
 801929c:	e7f9      	b.n	8019292 <_calloc_r+0x12>
 801929e:	462a      	mov	r2, r5
 80192a0:	4621      	mov	r1, r4
 80192a2:	f000 fccf 	bl	8019c44 <memset>
 80192a6:	e7f5      	b.n	8019294 <_calloc_r+0x14>

080192a8 <exit>:
 80192a8:	b508      	push	{r3, lr}
 80192aa:	4b06      	ldr	r3, [pc, #24]	@ (80192c4 <exit+0x1c>)
 80192ac:	4604      	mov	r4, r0
 80192ae:	b113      	cbz	r3, 80192b6 <exit+0xe>
 80192b0:	2100      	movs	r1, #0
 80192b2:	f3af 8000 	nop.w
 80192b6:	4b04      	ldr	r3, [pc, #16]	@ (80192c8 <exit+0x20>)
 80192b8:	681b      	ldr	r3, [r3, #0]
 80192ba:	b103      	cbz	r3, 80192be <exit+0x16>
 80192bc:	4798      	blx	r3
 80192be:	4620      	mov	r0, r4
 80192c0:	f7e9 fc38 	bl	8002b34 <_exit>
 80192c4:	00000000 	.word	0x00000000
 80192c8:	2000bd18 	.word	0x2000bd18

080192cc <getenv>:
 80192cc:	b507      	push	{r0, r1, r2, lr}
 80192ce:	4b04      	ldr	r3, [pc, #16]	@ (80192e0 <getenv+0x14>)
 80192d0:	4601      	mov	r1, r0
 80192d2:	aa01      	add	r2, sp, #4
 80192d4:	6818      	ldr	r0, [r3, #0]
 80192d6:	f000 f805 	bl	80192e4 <_findenv_r>
 80192da:	b003      	add	sp, #12
 80192dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80192e0:	200009fc 	.word	0x200009fc

080192e4 <_findenv_r>:
 80192e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80192e8:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8019358 <_findenv_r+0x74>
 80192ec:	4606      	mov	r6, r0
 80192ee:	4689      	mov	r9, r1
 80192f0:	4617      	mov	r7, r2
 80192f2:	f000 fd9d 	bl	8019e30 <__env_lock>
 80192f6:	f8da 4000 	ldr.w	r4, [sl]
 80192fa:	b134      	cbz	r4, 801930a <_findenv_r+0x26>
 80192fc:	464b      	mov	r3, r9
 80192fe:	4698      	mov	r8, r3
 8019300:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019304:	b13a      	cbz	r2, 8019316 <_findenv_r+0x32>
 8019306:	2a3d      	cmp	r2, #61	@ 0x3d
 8019308:	d1f9      	bne.n	80192fe <_findenv_r+0x1a>
 801930a:	4630      	mov	r0, r6
 801930c:	f000 fd96 	bl	8019e3c <__env_unlock>
 8019310:	2000      	movs	r0, #0
 8019312:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019316:	eba8 0809 	sub.w	r8, r8, r9
 801931a:	46a3      	mov	fp, r4
 801931c:	f854 0b04 	ldr.w	r0, [r4], #4
 8019320:	2800      	cmp	r0, #0
 8019322:	d0f2      	beq.n	801930a <_findenv_r+0x26>
 8019324:	4642      	mov	r2, r8
 8019326:	4649      	mov	r1, r9
 8019328:	f000 fca1 	bl	8019c6e <strncmp>
 801932c:	2800      	cmp	r0, #0
 801932e:	d1f4      	bne.n	801931a <_findenv_r+0x36>
 8019330:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8019334:	eb03 0508 	add.w	r5, r3, r8
 8019338:	f813 3008 	ldrb.w	r3, [r3, r8]
 801933c:	2b3d      	cmp	r3, #61	@ 0x3d
 801933e:	d1ec      	bne.n	801931a <_findenv_r+0x36>
 8019340:	f8da 3000 	ldr.w	r3, [sl]
 8019344:	ebab 0303 	sub.w	r3, fp, r3
 8019348:	109b      	asrs	r3, r3, #2
 801934a:	4630      	mov	r0, r6
 801934c:	603b      	str	r3, [r7, #0]
 801934e:	f000 fd75 	bl	8019e3c <__env_unlock>
 8019352:	1c68      	adds	r0, r5, #1
 8019354:	e7dd      	b.n	8019312 <_findenv_r+0x2e>
 8019356:	bf00      	nop
 8019358:	20000008 	.word	0x20000008

0801935c <malloc>:
 801935c:	4b02      	ldr	r3, [pc, #8]	@ (8019368 <malloc+0xc>)
 801935e:	4601      	mov	r1, r0
 8019360:	6818      	ldr	r0, [r3, #0]
 8019362:	f000 b82d 	b.w	80193c0 <_malloc_r>
 8019366:	bf00      	nop
 8019368:	200009fc 	.word	0x200009fc

0801936c <free>:
 801936c:	4b02      	ldr	r3, [pc, #8]	@ (8019378 <free+0xc>)
 801936e:	4601      	mov	r1, r0
 8019370:	6818      	ldr	r0, [r3, #0]
 8019372:	f000 bd69 	b.w	8019e48 <_free_r>
 8019376:	bf00      	nop
 8019378:	200009fc 	.word	0x200009fc

0801937c <sbrk_aligned>:
 801937c:	b570      	push	{r4, r5, r6, lr}
 801937e:	4e0f      	ldr	r6, [pc, #60]	@ (80193bc <sbrk_aligned+0x40>)
 8019380:	460c      	mov	r4, r1
 8019382:	6831      	ldr	r1, [r6, #0]
 8019384:	4605      	mov	r5, r0
 8019386:	b911      	cbnz	r1, 801938e <sbrk_aligned+0x12>
 8019388:	f000 fcce 	bl	8019d28 <_sbrk_r>
 801938c:	6030      	str	r0, [r6, #0]
 801938e:	4621      	mov	r1, r4
 8019390:	4628      	mov	r0, r5
 8019392:	f000 fcc9 	bl	8019d28 <_sbrk_r>
 8019396:	1c43      	adds	r3, r0, #1
 8019398:	d103      	bne.n	80193a2 <sbrk_aligned+0x26>
 801939a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801939e:	4620      	mov	r0, r4
 80193a0:	bd70      	pop	{r4, r5, r6, pc}
 80193a2:	1cc4      	adds	r4, r0, #3
 80193a4:	f024 0403 	bic.w	r4, r4, #3
 80193a8:	42a0      	cmp	r0, r4
 80193aa:	d0f8      	beq.n	801939e <sbrk_aligned+0x22>
 80193ac:	1a21      	subs	r1, r4, r0
 80193ae:	4628      	mov	r0, r5
 80193b0:	f000 fcba 	bl	8019d28 <_sbrk_r>
 80193b4:	3001      	adds	r0, #1
 80193b6:	d1f2      	bne.n	801939e <sbrk_aligned+0x22>
 80193b8:	e7ef      	b.n	801939a <sbrk_aligned+0x1e>
 80193ba:	bf00      	nop
 80193bc:	2000bbd8 	.word	0x2000bbd8

080193c0 <_malloc_r>:
 80193c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80193c4:	1ccd      	adds	r5, r1, #3
 80193c6:	f025 0503 	bic.w	r5, r5, #3
 80193ca:	3508      	adds	r5, #8
 80193cc:	2d0c      	cmp	r5, #12
 80193ce:	bf38      	it	cc
 80193d0:	250c      	movcc	r5, #12
 80193d2:	2d00      	cmp	r5, #0
 80193d4:	4606      	mov	r6, r0
 80193d6:	db01      	blt.n	80193dc <_malloc_r+0x1c>
 80193d8:	42a9      	cmp	r1, r5
 80193da:	d904      	bls.n	80193e6 <_malloc_r+0x26>
 80193dc:	230c      	movs	r3, #12
 80193de:	6033      	str	r3, [r6, #0]
 80193e0:	2000      	movs	r0, #0
 80193e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80193e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80194bc <_malloc_r+0xfc>
 80193ea:	f000 f869 	bl	80194c0 <__malloc_lock>
 80193ee:	f8d8 3000 	ldr.w	r3, [r8]
 80193f2:	461c      	mov	r4, r3
 80193f4:	bb44      	cbnz	r4, 8019448 <_malloc_r+0x88>
 80193f6:	4629      	mov	r1, r5
 80193f8:	4630      	mov	r0, r6
 80193fa:	f7ff ffbf 	bl	801937c <sbrk_aligned>
 80193fe:	1c43      	adds	r3, r0, #1
 8019400:	4604      	mov	r4, r0
 8019402:	d158      	bne.n	80194b6 <_malloc_r+0xf6>
 8019404:	f8d8 4000 	ldr.w	r4, [r8]
 8019408:	4627      	mov	r7, r4
 801940a:	2f00      	cmp	r7, #0
 801940c:	d143      	bne.n	8019496 <_malloc_r+0xd6>
 801940e:	2c00      	cmp	r4, #0
 8019410:	d04b      	beq.n	80194aa <_malloc_r+0xea>
 8019412:	6823      	ldr	r3, [r4, #0]
 8019414:	4639      	mov	r1, r7
 8019416:	4630      	mov	r0, r6
 8019418:	eb04 0903 	add.w	r9, r4, r3
 801941c:	f000 fc84 	bl	8019d28 <_sbrk_r>
 8019420:	4581      	cmp	r9, r0
 8019422:	d142      	bne.n	80194aa <_malloc_r+0xea>
 8019424:	6821      	ldr	r1, [r4, #0]
 8019426:	1a6d      	subs	r5, r5, r1
 8019428:	4629      	mov	r1, r5
 801942a:	4630      	mov	r0, r6
 801942c:	f7ff ffa6 	bl	801937c <sbrk_aligned>
 8019430:	3001      	adds	r0, #1
 8019432:	d03a      	beq.n	80194aa <_malloc_r+0xea>
 8019434:	6823      	ldr	r3, [r4, #0]
 8019436:	442b      	add	r3, r5
 8019438:	6023      	str	r3, [r4, #0]
 801943a:	f8d8 3000 	ldr.w	r3, [r8]
 801943e:	685a      	ldr	r2, [r3, #4]
 8019440:	bb62      	cbnz	r2, 801949c <_malloc_r+0xdc>
 8019442:	f8c8 7000 	str.w	r7, [r8]
 8019446:	e00f      	b.n	8019468 <_malloc_r+0xa8>
 8019448:	6822      	ldr	r2, [r4, #0]
 801944a:	1b52      	subs	r2, r2, r5
 801944c:	d420      	bmi.n	8019490 <_malloc_r+0xd0>
 801944e:	2a0b      	cmp	r2, #11
 8019450:	d917      	bls.n	8019482 <_malloc_r+0xc2>
 8019452:	1961      	adds	r1, r4, r5
 8019454:	42a3      	cmp	r3, r4
 8019456:	6025      	str	r5, [r4, #0]
 8019458:	bf18      	it	ne
 801945a:	6059      	strne	r1, [r3, #4]
 801945c:	6863      	ldr	r3, [r4, #4]
 801945e:	bf08      	it	eq
 8019460:	f8c8 1000 	streq.w	r1, [r8]
 8019464:	5162      	str	r2, [r4, r5]
 8019466:	604b      	str	r3, [r1, #4]
 8019468:	4630      	mov	r0, r6
 801946a:	f000 f82f 	bl	80194cc <__malloc_unlock>
 801946e:	f104 000b 	add.w	r0, r4, #11
 8019472:	1d23      	adds	r3, r4, #4
 8019474:	f020 0007 	bic.w	r0, r0, #7
 8019478:	1ac2      	subs	r2, r0, r3
 801947a:	bf1c      	itt	ne
 801947c:	1a1b      	subne	r3, r3, r0
 801947e:	50a3      	strne	r3, [r4, r2]
 8019480:	e7af      	b.n	80193e2 <_malloc_r+0x22>
 8019482:	6862      	ldr	r2, [r4, #4]
 8019484:	42a3      	cmp	r3, r4
 8019486:	bf0c      	ite	eq
 8019488:	f8c8 2000 	streq.w	r2, [r8]
 801948c:	605a      	strne	r2, [r3, #4]
 801948e:	e7eb      	b.n	8019468 <_malloc_r+0xa8>
 8019490:	4623      	mov	r3, r4
 8019492:	6864      	ldr	r4, [r4, #4]
 8019494:	e7ae      	b.n	80193f4 <_malloc_r+0x34>
 8019496:	463c      	mov	r4, r7
 8019498:	687f      	ldr	r7, [r7, #4]
 801949a:	e7b6      	b.n	801940a <_malloc_r+0x4a>
 801949c:	461a      	mov	r2, r3
 801949e:	685b      	ldr	r3, [r3, #4]
 80194a0:	42a3      	cmp	r3, r4
 80194a2:	d1fb      	bne.n	801949c <_malloc_r+0xdc>
 80194a4:	2300      	movs	r3, #0
 80194a6:	6053      	str	r3, [r2, #4]
 80194a8:	e7de      	b.n	8019468 <_malloc_r+0xa8>
 80194aa:	230c      	movs	r3, #12
 80194ac:	6033      	str	r3, [r6, #0]
 80194ae:	4630      	mov	r0, r6
 80194b0:	f000 f80c 	bl	80194cc <__malloc_unlock>
 80194b4:	e794      	b.n	80193e0 <_malloc_r+0x20>
 80194b6:	6005      	str	r5, [r0, #0]
 80194b8:	e7d6      	b.n	8019468 <_malloc_r+0xa8>
 80194ba:	bf00      	nop
 80194bc:	2000bbdc 	.word	0x2000bbdc

080194c0 <__malloc_lock>:
 80194c0:	4801      	ldr	r0, [pc, #4]	@ (80194c8 <__malloc_lock+0x8>)
 80194c2:	f000 bc7e 	b.w	8019dc2 <__retarget_lock_acquire_recursive>
 80194c6:	bf00      	nop
 80194c8:	2000bd21 	.word	0x2000bd21

080194cc <__malloc_unlock>:
 80194cc:	4801      	ldr	r0, [pc, #4]	@ (80194d4 <__malloc_unlock+0x8>)
 80194ce:	f000 bc79 	b.w	8019dc4 <__retarget_lock_release_recursive>
 80194d2:	bf00      	nop
 80194d4:	2000bd21 	.word	0x2000bd21

080194d8 <srand>:
 80194d8:	b538      	push	{r3, r4, r5, lr}
 80194da:	4b10      	ldr	r3, [pc, #64]	@ (801951c <srand+0x44>)
 80194dc:	681d      	ldr	r5, [r3, #0]
 80194de:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80194e0:	4604      	mov	r4, r0
 80194e2:	b9b3      	cbnz	r3, 8019512 <srand+0x3a>
 80194e4:	2018      	movs	r0, #24
 80194e6:	f7ff ff39 	bl	801935c <malloc>
 80194ea:	4602      	mov	r2, r0
 80194ec:	6328      	str	r0, [r5, #48]	@ 0x30
 80194ee:	b920      	cbnz	r0, 80194fa <srand+0x22>
 80194f0:	4b0b      	ldr	r3, [pc, #44]	@ (8019520 <srand+0x48>)
 80194f2:	480c      	ldr	r0, [pc, #48]	@ (8019524 <srand+0x4c>)
 80194f4:	2146      	movs	r1, #70	@ 0x46
 80194f6:	f000 fc7d 	bl	8019df4 <__assert_func>
 80194fa:	490b      	ldr	r1, [pc, #44]	@ (8019528 <srand+0x50>)
 80194fc:	4b0b      	ldr	r3, [pc, #44]	@ (801952c <srand+0x54>)
 80194fe:	e9c0 1300 	strd	r1, r3, [r0]
 8019502:	4b0b      	ldr	r3, [pc, #44]	@ (8019530 <srand+0x58>)
 8019504:	6083      	str	r3, [r0, #8]
 8019506:	230b      	movs	r3, #11
 8019508:	8183      	strh	r3, [r0, #12]
 801950a:	2100      	movs	r1, #0
 801950c:	2001      	movs	r0, #1
 801950e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8019512:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8019514:	2200      	movs	r2, #0
 8019516:	611c      	str	r4, [r3, #16]
 8019518:	615a      	str	r2, [r3, #20]
 801951a:	bd38      	pop	{r3, r4, r5, pc}
 801951c:	200009fc 	.word	0x200009fc
 8019520:	0801c982 	.word	0x0801c982
 8019524:	0801c999 	.word	0x0801c999
 8019528:	abcd330e 	.word	0xabcd330e
 801952c:	e66d1234 	.word	0xe66d1234
 8019530:	0005deec 	.word	0x0005deec

08019534 <rand>:
 8019534:	4b16      	ldr	r3, [pc, #88]	@ (8019590 <rand+0x5c>)
 8019536:	b510      	push	{r4, lr}
 8019538:	681c      	ldr	r4, [r3, #0]
 801953a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801953c:	b9b3      	cbnz	r3, 801956c <rand+0x38>
 801953e:	2018      	movs	r0, #24
 8019540:	f7ff ff0c 	bl	801935c <malloc>
 8019544:	4602      	mov	r2, r0
 8019546:	6320      	str	r0, [r4, #48]	@ 0x30
 8019548:	b920      	cbnz	r0, 8019554 <rand+0x20>
 801954a:	4b12      	ldr	r3, [pc, #72]	@ (8019594 <rand+0x60>)
 801954c:	4812      	ldr	r0, [pc, #72]	@ (8019598 <rand+0x64>)
 801954e:	2152      	movs	r1, #82	@ 0x52
 8019550:	f000 fc50 	bl	8019df4 <__assert_func>
 8019554:	4911      	ldr	r1, [pc, #68]	@ (801959c <rand+0x68>)
 8019556:	4b12      	ldr	r3, [pc, #72]	@ (80195a0 <rand+0x6c>)
 8019558:	e9c0 1300 	strd	r1, r3, [r0]
 801955c:	4b11      	ldr	r3, [pc, #68]	@ (80195a4 <rand+0x70>)
 801955e:	6083      	str	r3, [r0, #8]
 8019560:	230b      	movs	r3, #11
 8019562:	8183      	strh	r3, [r0, #12]
 8019564:	2100      	movs	r1, #0
 8019566:	2001      	movs	r0, #1
 8019568:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801956c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801956e:	480e      	ldr	r0, [pc, #56]	@ (80195a8 <rand+0x74>)
 8019570:	690b      	ldr	r3, [r1, #16]
 8019572:	694c      	ldr	r4, [r1, #20]
 8019574:	4a0d      	ldr	r2, [pc, #52]	@ (80195ac <rand+0x78>)
 8019576:	4358      	muls	r0, r3
 8019578:	fb02 0004 	mla	r0, r2, r4, r0
 801957c:	fba3 3202 	umull	r3, r2, r3, r2
 8019580:	3301      	adds	r3, #1
 8019582:	eb40 0002 	adc.w	r0, r0, r2
 8019586:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801958a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801958e:	bd10      	pop	{r4, pc}
 8019590:	200009fc 	.word	0x200009fc
 8019594:	0801c982 	.word	0x0801c982
 8019598:	0801c999 	.word	0x0801c999
 801959c:	abcd330e 	.word	0xabcd330e
 80195a0:	e66d1234 	.word	0xe66d1234
 80195a4:	0005deec 	.word	0x0005deec
 80195a8:	5851f42d 	.word	0x5851f42d
 80195ac:	4c957f2d 	.word	0x4c957f2d

080195b0 <realloc>:
 80195b0:	4b02      	ldr	r3, [pc, #8]	@ (80195bc <realloc+0xc>)
 80195b2:	460a      	mov	r2, r1
 80195b4:	4601      	mov	r1, r0
 80195b6:	6818      	ldr	r0, [r3, #0]
 80195b8:	f000 b802 	b.w	80195c0 <_realloc_r>
 80195bc:	200009fc 	.word	0x200009fc

080195c0 <_realloc_r>:
 80195c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80195c4:	4680      	mov	r8, r0
 80195c6:	4615      	mov	r5, r2
 80195c8:	460c      	mov	r4, r1
 80195ca:	b921      	cbnz	r1, 80195d6 <_realloc_r+0x16>
 80195cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80195d0:	4611      	mov	r1, r2
 80195d2:	f7ff bef5 	b.w	80193c0 <_malloc_r>
 80195d6:	b92a      	cbnz	r2, 80195e4 <_realloc_r+0x24>
 80195d8:	f000 fc36 	bl	8019e48 <_free_r>
 80195dc:	2400      	movs	r4, #0
 80195de:	4620      	mov	r0, r4
 80195e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80195e4:	f000 fc7a 	bl	8019edc <_malloc_usable_size_r>
 80195e8:	4285      	cmp	r5, r0
 80195ea:	4606      	mov	r6, r0
 80195ec:	d802      	bhi.n	80195f4 <_realloc_r+0x34>
 80195ee:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80195f2:	d8f4      	bhi.n	80195de <_realloc_r+0x1e>
 80195f4:	4629      	mov	r1, r5
 80195f6:	4640      	mov	r0, r8
 80195f8:	f7ff fee2 	bl	80193c0 <_malloc_r>
 80195fc:	4607      	mov	r7, r0
 80195fe:	2800      	cmp	r0, #0
 8019600:	d0ec      	beq.n	80195dc <_realloc_r+0x1c>
 8019602:	42b5      	cmp	r5, r6
 8019604:	462a      	mov	r2, r5
 8019606:	4621      	mov	r1, r4
 8019608:	bf28      	it	cs
 801960a:	4632      	movcs	r2, r6
 801960c:	f000 fbe3 	bl	8019dd6 <memcpy>
 8019610:	4621      	mov	r1, r4
 8019612:	4640      	mov	r0, r8
 8019614:	f000 fc18 	bl	8019e48 <_free_r>
 8019618:	463c      	mov	r4, r7
 801961a:	e7e0      	b.n	80195de <_realloc_r+0x1e>

0801961c <_strtoul_l.constprop.0>:
 801961c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019620:	4e34      	ldr	r6, [pc, #208]	@ (80196f4 <_strtoul_l.constprop.0+0xd8>)
 8019622:	4686      	mov	lr, r0
 8019624:	460d      	mov	r5, r1
 8019626:	4628      	mov	r0, r5
 8019628:	f815 4b01 	ldrb.w	r4, [r5], #1
 801962c:	5d37      	ldrb	r7, [r6, r4]
 801962e:	f017 0708 	ands.w	r7, r7, #8
 8019632:	d1f8      	bne.n	8019626 <_strtoul_l.constprop.0+0xa>
 8019634:	2c2d      	cmp	r4, #45	@ 0x2d
 8019636:	d12f      	bne.n	8019698 <_strtoul_l.constprop.0+0x7c>
 8019638:	782c      	ldrb	r4, [r5, #0]
 801963a:	2701      	movs	r7, #1
 801963c:	1c85      	adds	r5, r0, #2
 801963e:	f033 0010 	bics.w	r0, r3, #16
 8019642:	d109      	bne.n	8019658 <_strtoul_l.constprop.0+0x3c>
 8019644:	2c30      	cmp	r4, #48	@ 0x30
 8019646:	d12c      	bne.n	80196a2 <_strtoul_l.constprop.0+0x86>
 8019648:	7828      	ldrb	r0, [r5, #0]
 801964a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801964e:	2858      	cmp	r0, #88	@ 0x58
 8019650:	d127      	bne.n	80196a2 <_strtoul_l.constprop.0+0x86>
 8019652:	786c      	ldrb	r4, [r5, #1]
 8019654:	2310      	movs	r3, #16
 8019656:	3502      	adds	r5, #2
 8019658:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801965c:	2600      	movs	r6, #0
 801965e:	fbb8 f8f3 	udiv	r8, r8, r3
 8019662:	fb03 f908 	mul.w	r9, r3, r8
 8019666:	ea6f 0909 	mvn.w	r9, r9
 801966a:	4630      	mov	r0, r6
 801966c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8019670:	f1bc 0f09 	cmp.w	ip, #9
 8019674:	d81c      	bhi.n	80196b0 <_strtoul_l.constprop.0+0x94>
 8019676:	4664      	mov	r4, ip
 8019678:	42a3      	cmp	r3, r4
 801967a:	dd2a      	ble.n	80196d2 <_strtoul_l.constprop.0+0xb6>
 801967c:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8019680:	d007      	beq.n	8019692 <_strtoul_l.constprop.0+0x76>
 8019682:	4580      	cmp	r8, r0
 8019684:	d322      	bcc.n	80196cc <_strtoul_l.constprop.0+0xb0>
 8019686:	d101      	bne.n	801968c <_strtoul_l.constprop.0+0x70>
 8019688:	45a1      	cmp	r9, r4
 801968a:	db1f      	blt.n	80196cc <_strtoul_l.constprop.0+0xb0>
 801968c:	fb00 4003 	mla	r0, r0, r3, r4
 8019690:	2601      	movs	r6, #1
 8019692:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019696:	e7e9      	b.n	801966c <_strtoul_l.constprop.0+0x50>
 8019698:	2c2b      	cmp	r4, #43	@ 0x2b
 801969a:	bf04      	itt	eq
 801969c:	782c      	ldrbeq	r4, [r5, #0]
 801969e:	1c85      	addeq	r5, r0, #2
 80196a0:	e7cd      	b.n	801963e <_strtoul_l.constprop.0+0x22>
 80196a2:	2b00      	cmp	r3, #0
 80196a4:	d1d8      	bne.n	8019658 <_strtoul_l.constprop.0+0x3c>
 80196a6:	2c30      	cmp	r4, #48	@ 0x30
 80196a8:	bf0c      	ite	eq
 80196aa:	2308      	moveq	r3, #8
 80196ac:	230a      	movne	r3, #10
 80196ae:	e7d3      	b.n	8019658 <_strtoul_l.constprop.0+0x3c>
 80196b0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80196b4:	f1bc 0f19 	cmp.w	ip, #25
 80196b8:	d801      	bhi.n	80196be <_strtoul_l.constprop.0+0xa2>
 80196ba:	3c37      	subs	r4, #55	@ 0x37
 80196bc:	e7dc      	b.n	8019678 <_strtoul_l.constprop.0+0x5c>
 80196be:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80196c2:	f1bc 0f19 	cmp.w	ip, #25
 80196c6:	d804      	bhi.n	80196d2 <_strtoul_l.constprop.0+0xb6>
 80196c8:	3c57      	subs	r4, #87	@ 0x57
 80196ca:	e7d5      	b.n	8019678 <_strtoul_l.constprop.0+0x5c>
 80196cc:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80196d0:	e7df      	b.n	8019692 <_strtoul_l.constprop.0+0x76>
 80196d2:	1c73      	adds	r3, r6, #1
 80196d4:	d106      	bne.n	80196e4 <_strtoul_l.constprop.0+0xc8>
 80196d6:	2322      	movs	r3, #34	@ 0x22
 80196d8:	f8ce 3000 	str.w	r3, [lr]
 80196dc:	4630      	mov	r0, r6
 80196de:	b932      	cbnz	r2, 80196ee <_strtoul_l.constprop.0+0xd2>
 80196e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80196e4:	b107      	cbz	r7, 80196e8 <_strtoul_l.constprop.0+0xcc>
 80196e6:	4240      	negs	r0, r0
 80196e8:	2a00      	cmp	r2, #0
 80196ea:	d0f9      	beq.n	80196e0 <_strtoul_l.constprop.0+0xc4>
 80196ec:	b106      	cbz	r6, 80196f0 <_strtoul_l.constprop.0+0xd4>
 80196ee:	1e69      	subs	r1, r5, #1
 80196f0:	6011      	str	r1, [r2, #0]
 80196f2:	e7f5      	b.n	80196e0 <_strtoul_l.constprop.0+0xc4>
 80196f4:	0801c9f2 	.word	0x0801c9f2

080196f8 <strtoul>:
 80196f8:	4613      	mov	r3, r2
 80196fa:	460a      	mov	r2, r1
 80196fc:	4601      	mov	r1, r0
 80196fe:	4802      	ldr	r0, [pc, #8]	@ (8019708 <strtoul+0x10>)
 8019700:	6800      	ldr	r0, [r0, #0]
 8019702:	f7ff bf8b 	b.w	801961c <_strtoul_l.constprop.0>
 8019706:	bf00      	nop
 8019708:	200009fc 	.word	0x200009fc

0801970c <std>:
 801970c:	2300      	movs	r3, #0
 801970e:	b510      	push	{r4, lr}
 8019710:	4604      	mov	r4, r0
 8019712:	e9c0 3300 	strd	r3, r3, [r0]
 8019716:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801971a:	6083      	str	r3, [r0, #8]
 801971c:	8181      	strh	r1, [r0, #12]
 801971e:	6643      	str	r3, [r0, #100]	@ 0x64
 8019720:	81c2      	strh	r2, [r0, #14]
 8019722:	6183      	str	r3, [r0, #24]
 8019724:	4619      	mov	r1, r3
 8019726:	2208      	movs	r2, #8
 8019728:	305c      	adds	r0, #92	@ 0x5c
 801972a:	f000 fa8b 	bl	8019c44 <memset>
 801972e:	4b0d      	ldr	r3, [pc, #52]	@ (8019764 <std+0x58>)
 8019730:	6263      	str	r3, [r4, #36]	@ 0x24
 8019732:	4b0d      	ldr	r3, [pc, #52]	@ (8019768 <std+0x5c>)
 8019734:	62a3      	str	r3, [r4, #40]	@ 0x28
 8019736:	4b0d      	ldr	r3, [pc, #52]	@ (801976c <std+0x60>)
 8019738:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801973a:	4b0d      	ldr	r3, [pc, #52]	@ (8019770 <std+0x64>)
 801973c:	6323      	str	r3, [r4, #48]	@ 0x30
 801973e:	4b0d      	ldr	r3, [pc, #52]	@ (8019774 <std+0x68>)
 8019740:	6224      	str	r4, [r4, #32]
 8019742:	429c      	cmp	r4, r3
 8019744:	d006      	beq.n	8019754 <std+0x48>
 8019746:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801974a:	4294      	cmp	r4, r2
 801974c:	d002      	beq.n	8019754 <std+0x48>
 801974e:	33d0      	adds	r3, #208	@ 0xd0
 8019750:	429c      	cmp	r4, r3
 8019752:	d105      	bne.n	8019760 <std+0x54>
 8019754:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8019758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801975c:	f000 bb30 	b.w	8019dc0 <__retarget_lock_init_recursive>
 8019760:	bd10      	pop	{r4, pc}
 8019762:	bf00      	nop
 8019764:	080199d1 	.word	0x080199d1
 8019768:	080199f3 	.word	0x080199f3
 801976c:	08019a2b 	.word	0x08019a2b
 8019770:	08019a4f 	.word	0x08019a4f
 8019774:	2000bbe0 	.word	0x2000bbe0

08019778 <stdio_exit_handler>:
 8019778:	4a02      	ldr	r2, [pc, #8]	@ (8019784 <stdio_exit_handler+0xc>)
 801977a:	4903      	ldr	r1, [pc, #12]	@ (8019788 <stdio_exit_handler+0x10>)
 801977c:	4803      	ldr	r0, [pc, #12]	@ (801978c <stdio_exit_handler+0x14>)
 801977e:	f000 b869 	b.w	8019854 <_fwalk_sglue>
 8019782:	bf00      	nop
 8019784:	200009f0 	.word	0x200009f0
 8019788:	0801a845 	.word	0x0801a845
 801978c:	20000a00 	.word	0x20000a00

08019790 <cleanup_stdio>:
 8019790:	6841      	ldr	r1, [r0, #4]
 8019792:	4b0c      	ldr	r3, [pc, #48]	@ (80197c4 <cleanup_stdio+0x34>)
 8019794:	4299      	cmp	r1, r3
 8019796:	b510      	push	{r4, lr}
 8019798:	4604      	mov	r4, r0
 801979a:	d001      	beq.n	80197a0 <cleanup_stdio+0x10>
 801979c:	f001 f852 	bl	801a844 <_fflush_r>
 80197a0:	68a1      	ldr	r1, [r4, #8]
 80197a2:	4b09      	ldr	r3, [pc, #36]	@ (80197c8 <cleanup_stdio+0x38>)
 80197a4:	4299      	cmp	r1, r3
 80197a6:	d002      	beq.n	80197ae <cleanup_stdio+0x1e>
 80197a8:	4620      	mov	r0, r4
 80197aa:	f001 f84b 	bl	801a844 <_fflush_r>
 80197ae:	68e1      	ldr	r1, [r4, #12]
 80197b0:	4b06      	ldr	r3, [pc, #24]	@ (80197cc <cleanup_stdio+0x3c>)
 80197b2:	4299      	cmp	r1, r3
 80197b4:	d004      	beq.n	80197c0 <cleanup_stdio+0x30>
 80197b6:	4620      	mov	r0, r4
 80197b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80197bc:	f001 b842 	b.w	801a844 <_fflush_r>
 80197c0:	bd10      	pop	{r4, pc}
 80197c2:	bf00      	nop
 80197c4:	2000bbe0 	.word	0x2000bbe0
 80197c8:	2000bc48 	.word	0x2000bc48
 80197cc:	2000bcb0 	.word	0x2000bcb0

080197d0 <global_stdio_init.part.0>:
 80197d0:	b510      	push	{r4, lr}
 80197d2:	4b0b      	ldr	r3, [pc, #44]	@ (8019800 <global_stdio_init.part.0+0x30>)
 80197d4:	4c0b      	ldr	r4, [pc, #44]	@ (8019804 <global_stdio_init.part.0+0x34>)
 80197d6:	4a0c      	ldr	r2, [pc, #48]	@ (8019808 <global_stdio_init.part.0+0x38>)
 80197d8:	601a      	str	r2, [r3, #0]
 80197da:	4620      	mov	r0, r4
 80197dc:	2200      	movs	r2, #0
 80197de:	2104      	movs	r1, #4
 80197e0:	f7ff ff94 	bl	801970c <std>
 80197e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80197e8:	2201      	movs	r2, #1
 80197ea:	2109      	movs	r1, #9
 80197ec:	f7ff ff8e 	bl	801970c <std>
 80197f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80197f4:	2202      	movs	r2, #2
 80197f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80197fa:	2112      	movs	r1, #18
 80197fc:	f7ff bf86 	b.w	801970c <std>
 8019800:	2000bd18 	.word	0x2000bd18
 8019804:	2000bbe0 	.word	0x2000bbe0
 8019808:	08019779 	.word	0x08019779

0801980c <__sfp_lock_acquire>:
 801980c:	4801      	ldr	r0, [pc, #4]	@ (8019814 <__sfp_lock_acquire+0x8>)
 801980e:	f000 bad8 	b.w	8019dc2 <__retarget_lock_acquire_recursive>
 8019812:	bf00      	nop
 8019814:	2000bd22 	.word	0x2000bd22

08019818 <__sfp_lock_release>:
 8019818:	4801      	ldr	r0, [pc, #4]	@ (8019820 <__sfp_lock_release+0x8>)
 801981a:	f000 bad3 	b.w	8019dc4 <__retarget_lock_release_recursive>
 801981e:	bf00      	nop
 8019820:	2000bd22 	.word	0x2000bd22

08019824 <__sinit>:
 8019824:	b510      	push	{r4, lr}
 8019826:	4604      	mov	r4, r0
 8019828:	f7ff fff0 	bl	801980c <__sfp_lock_acquire>
 801982c:	6a23      	ldr	r3, [r4, #32]
 801982e:	b11b      	cbz	r3, 8019838 <__sinit+0x14>
 8019830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019834:	f7ff bff0 	b.w	8019818 <__sfp_lock_release>
 8019838:	4b04      	ldr	r3, [pc, #16]	@ (801984c <__sinit+0x28>)
 801983a:	6223      	str	r3, [r4, #32]
 801983c:	4b04      	ldr	r3, [pc, #16]	@ (8019850 <__sinit+0x2c>)
 801983e:	681b      	ldr	r3, [r3, #0]
 8019840:	2b00      	cmp	r3, #0
 8019842:	d1f5      	bne.n	8019830 <__sinit+0xc>
 8019844:	f7ff ffc4 	bl	80197d0 <global_stdio_init.part.0>
 8019848:	e7f2      	b.n	8019830 <__sinit+0xc>
 801984a:	bf00      	nop
 801984c:	08019791 	.word	0x08019791
 8019850:	2000bd18 	.word	0x2000bd18

08019854 <_fwalk_sglue>:
 8019854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019858:	4607      	mov	r7, r0
 801985a:	4688      	mov	r8, r1
 801985c:	4614      	mov	r4, r2
 801985e:	2600      	movs	r6, #0
 8019860:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019864:	f1b9 0901 	subs.w	r9, r9, #1
 8019868:	d505      	bpl.n	8019876 <_fwalk_sglue+0x22>
 801986a:	6824      	ldr	r4, [r4, #0]
 801986c:	2c00      	cmp	r4, #0
 801986e:	d1f7      	bne.n	8019860 <_fwalk_sglue+0xc>
 8019870:	4630      	mov	r0, r6
 8019872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019876:	89ab      	ldrh	r3, [r5, #12]
 8019878:	2b01      	cmp	r3, #1
 801987a:	d907      	bls.n	801988c <_fwalk_sglue+0x38>
 801987c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019880:	3301      	adds	r3, #1
 8019882:	d003      	beq.n	801988c <_fwalk_sglue+0x38>
 8019884:	4629      	mov	r1, r5
 8019886:	4638      	mov	r0, r7
 8019888:	47c0      	blx	r8
 801988a:	4306      	orrs	r6, r0
 801988c:	3568      	adds	r5, #104	@ 0x68
 801988e:	e7e9      	b.n	8019864 <_fwalk_sglue+0x10>

08019890 <_fwrite_r>:
 8019890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019894:	9c08      	ldr	r4, [sp, #32]
 8019896:	468a      	mov	sl, r1
 8019898:	4690      	mov	r8, r2
 801989a:	fb02 f903 	mul.w	r9, r2, r3
 801989e:	4606      	mov	r6, r0
 80198a0:	b118      	cbz	r0, 80198aa <_fwrite_r+0x1a>
 80198a2:	6a03      	ldr	r3, [r0, #32]
 80198a4:	b90b      	cbnz	r3, 80198aa <_fwrite_r+0x1a>
 80198a6:	f7ff ffbd 	bl	8019824 <__sinit>
 80198aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80198ac:	07dd      	lsls	r5, r3, #31
 80198ae:	d405      	bmi.n	80198bc <_fwrite_r+0x2c>
 80198b0:	89a3      	ldrh	r3, [r4, #12]
 80198b2:	0598      	lsls	r0, r3, #22
 80198b4:	d402      	bmi.n	80198bc <_fwrite_r+0x2c>
 80198b6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80198b8:	f000 fa83 	bl	8019dc2 <__retarget_lock_acquire_recursive>
 80198bc:	89a3      	ldrh	r3, [r4, #12]
 80198be:	0719      	lsls	r1, r3, #28
 80198c0:	d516      	bpl.n	80198f0 <_fwrite_r+0x60>
 80198c2:	6923      	ldr	r3, [r4, #16]
 80198c4:	b1a3      	cbz	r3, 80198f0 <_fwrite_r+0x60>
 80198c6:	2500      	movs	r5, #0
 80198c8:	454d      	cmp	r5, r9
 80198ca:	d01f      	beq.n	801990c <_fwrite_r+0x7c>
 80198cc:	68a7      	ldr	r7, [r4, #8]
 80198ce:	f81a 1005 	ldrb.w	r1, [sl, r5]
 80198d2:	3f01      	subs	r7, #1
 80198d4:	2f00      	cmp	r7, #0
 80198d6:	60a7      	str	r7, [r4, #8]
 80198d8:	da04      	bge.n	80198e4 <_fwrite_r+0x54>
 80198da:	69a3      	ldr	r3, [r4, #24]
 80198dc:	429f      	cmp	r7, r3
 80198de:	db0f      	blt.n	8019900 <_fwrite_r+0x70>
 80198e0:	290a      	cmp	r1, #10
 80198e2:	d00d      	beq.n	8019900 <_fwrite_r+0x70>
 80198e4:	6823      	ldr	r3, [r4, #0]
 80198e6:	1c5a      	adds	r2, r3, #1
 80198e8:	6022      	str	r2, [r4, #0]
 80198ea:	7019      	strb	r1, [r3, #0]
 80198ec:	3501      	adds	r5, #1
 80198ee:	e7eb      	b.n	80198c8 <_fwrite_r+0x38>
 80198f0:	4621      	mov	r1, r4
 80198f2:	4630      	mov	r0, r6
 80198f4:	f000 f926 	bl	8019b44 <__swsetup_r>
 80198f8:	2800      	cmp	r0, #0
 80198fa:	d0e4      	beq.n	80198c6 <_fwrite_r+0x36>
 80198fc:	2500      	movs	r5, #0
 80198fe:	e005      	b.n	801990c <_fwrite_r+0x7c>
 8019900:	4622      	mov	r2, r4
 8019902:	4630      	mov	r0, r6
 8019904:	f000 f8e0 	bl	8019ac8 <__swbuf_r>
 8019908:	3001      	adds	r0, #1
 801990a:	d1ef      	bne.n	80198ec <_fwrite_r+0x5c>
 801990c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801990e:	07da      	lsls	r2, r3, #31
 8019910:	d405      	bmi.n	801991e <_fwrite_r+0x8e>
 8019912:	89a3      	ldrh	r3, [r4, #12]
 8019914:	059b      	lsls	r3, r3, #22
 8019916:	d402      	bmi.n	801991e <_fwrite_r+0x8e>
 8019918:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801991a:	f000 fa53 	bl	8019dc4 <__retarget_lock_release_recursive>
 801991e:	fbb5 f0f8 	udiv	r0, r5, r8
 8019922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08019928 <fwrite>:
 8019928:	b507      	push	{r0, r1, r2, lr}
 801992a:	9300      	str	r3, [sp, #0]
 801992c:	4613      	mov	r3, r2
 801992e:	460a      	mov	r2, r1
 8019930:	4601      	mov	r1, r0
 8019932:	4803      	ldr	r0, [pc, #12]	@ (8019940 <fwrite+0x18>)
 8019934:	6800      	ldr	r0, [r0, #0]
 8019936:	f7ff ffab 	bl	8019890 <_fwrite_r>
 801993a:	b003      	add	sp, #12
 801993c:	f85d fb04 	ldr.w	pc, [sp], #4
 8019940:	200009fc 	.word	0x200009fc

08019944 <iprintf>:
 8019944:	b40f      	push	{r0, r1, r2, r3}
 8019946:	b507      	push	{r0, r1, r2, lr}
 8019948:	4906      	ldr	r1, [pc, #24]	@ (8019964 <iprintf+0x20>)
 801994a:	ab04      	add	r3, sp, #16
 801994c:	6808      	ldr	r0, [r1, #0]
 801994e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019952:	6881      	ldr	r1, [r0, #8]
 8019954:	9301      	str	r3, [sp, #4]
 8019956:	f000 fc4b 	bl	801a1f0 <_vfiprintf_r>
 801995a:	b003      	add	sp, #12
 801995c:	f85d eb04 	ldr.w	lr, [sp], #4
 8019960:	b004      	add	sp, #16
 8019962:	4770      	bx	lr
 8019964:	200009fc 	.word	0x200009fc

08019968 <sniprintf>:
 8019968:	b40c      	push	{r2, r3}
 801996a:	b530      	push	{r4, r5, lr}
 801996c:	4b17      	ldr	r3, [pc, #92]	@ (80199cc <sniprintf+0x64>)
 801996e:	1e0c      	subs	r4, r1, #0
 8019970:	681d      	ldr	r5, [r3, #0]
 8019972:	b09d      	sub	sp, #116	@ 0x74
 8019974:	da08      	bge.n	8019988 <sniprintf+0x20>
 8019976:	238b      	movs	r3, #139	@ 0x8b
 8019978:	602b      	str	r3, [r5, #0]
 801997a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801997e:	b01d      	add	sp, #116	@ 0x74
 8019980:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019984:	b002      	add	sp, #8
 8019986:	4770      	bx	lr
 8019988:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801998c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019990:	bf14      	ite	ne
 8019992:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8019996:	4623      	moveq	r3, r4
 8019998:	9304      	str	r3, [sp, #16]
 801999a:	9307      	str	r3, [sp, #28]
 801999c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80199a0:	9002      	str	r0, [sp, #8]
 80199a2:	9006      	str	r0, [sp, #24]
 80199a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80199a8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80199aa:	ab21      	add	r3, sp, #132	@ 0x84
 80199ac:	a902      	add	r1, sp, #8
 80199ae:	4628      	mov	r0, r5
 80199b0:	9301      	str	r3, [sp, #4]
 80199b2:	f000 faf7 	bl	8019fa4 <_svfiprintf_r>
 80199b6:	1c43      	adds	r3, r0, #1
 80199b8:	bfbc      	itt	lt
 80199ba:	238b      	movlt	r3, #139	@ 0x8b
 80199bc:	602b      	strlt	r3, [r5, #0]
 80199be:	2c00      	cmp	r4, #0
 80199c0:	d0dd      	beq.n	801997e <sniprintf+0x16>
 80199c2:	9b02      	ldr	r3, [sp, #8]
 80199c4:	2200      	movs	r2, #0
 80199c6:	701a      	strb	r2, [r3, #0]
 80199c8:	e7d9      	b.n	801997e <sniprintf+0x16>
 80199ca:	bf00      	nop
 80199cc:	200009fc 	.word	0x200009fc

080199d0 <__sread>:
 80199d0:	b510      	push	{r4, lr}
 80199d2:	460c      	mov	r4, r1
 80199d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80199d8:	f000 f994 	bl	8019d04 <_read_r>
 80199dc:	2800      	cmp	r0, #0
 80199de:	bfab      	itete	ge
 80199e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80199e2:	89a3      	ldrhlt	r3, [r4, #12]
 80199e4:	181b      	addge	r3, r3, r0
 80199e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80199ea:	bfac      	ite	ge
 80199ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80199ee:	81a3      	strhlt	r3, [r4, #12]
 80199f0:	bd10      	pop	{r4, pc}

080199f2 <__swrite>:
 80199f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80199f6:	461f      	mov	r7, r3
 80199f8:	898b      	ldrh	r3, [r1, #12]
 80199fa:	05db      	lsls	r3, r3, #23
 80199fc:	4605      	mov	r5, r0
 80199fe:	460c      	mov	r4, r1
 8019a00:	4616      	mov	r6, r2
 8019a02:	d505      	bpl.n	8019a10 <__swrite+0x1e>
 8019a04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019a08:	2302      	movs	r3, #2
 8019a0a:	2200      	movs	r2, #0
 8019a0c:	f000 f968 	bl	8019ce0 <_lseek_r>
 8019a10:	89a3      	ldrh	r3, [r4, #12]
 8019a12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019a16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8019a1a:	81a3      	strh	r3, [r4, #12]
 8019a1c:	4632      	mov	r2, r6
 8019a1e:	463b      	mov	r3, r7
 8019a20:	4628      	mov	r0, r5
 8019a22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019a26:	f000 b98f 	b.w	8019d48 <_write_r>

08019a2a <__sseek>:
 8019a2a:	b510      	push	{r4, lr}
 8019a2c:	460c      	mov	r4, r1
 8019a2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019a32:	f000 f955 	bl	8019ce0 <_lseek_r>
 8019a36:	1c43      	adds	r3, r0, #1
 8019a38:	89a3      	ldrh	r3, [r4, #12]
 8019a3a:	bf15      	itete	ne
 8019a3c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8019a3e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8019a42:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8019a46:	81a3      	strheq	r3, [r4, #12]
 8019a48:	bf18      	it	ne
 8019a4a:	81a3      	strhne	r3, [r4, #12]
 8019a4c:	bd10      	pop	{r4, pc}

08019a4e <__sclose>:
 8019a4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019a52:	f000 b935 	b.w	8019cc0 <_close_r>

08019a56 <_vsniprintf_r>:
 8019a56:	b530      	push	{r4, r5, lr}
 8019a58:	4614      	mov	r4, r2
 8019a5a:	2c00      	cmp	r4, #0
 8019a5c:	b09b      	sub	sp, #108	@ 0x6c
 8019a5e:	4605      	mov	r5, r0
 8019a60:	461a      	mov	r2, r3
 8019a62:	da05      	bge.n	8019a70 <_vsniprintf_r+0x1a>
 8019a64:	238b      	movs	r3, #139	@ 0x8b
 8019a66:	6003      	str	r3, [r0, #0]
 8019a68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019a6c:	b01b      	add	sp, #108	@ 0x6c
 8019a6e:	bd30      	pop	{r4, r5, pc}
 8019a70:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8019a74:	f8ad 300c 	strh.w	r3, [sp, #12]
 8019a78:	bf14      	ite	ne
 8019a7a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8019a7e:	4623      	moveq	r3, r4
 8019a80:	9302      	str	r3, [sp, #8]
 8019a82:	9305      	str	r3, [sp, #20]
 8019a84:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019a88:	9100      	str	r1, [sp, #0]
 8019a8a:	9104      	str	r1, [sp, #16]
 8019a8c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8019a90:	4669      	mov	r1, sp
 8019a92:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8019a94:	f000 fa86 	bl	8019fa4 <_svfiprintf_r>
 8019a98:	1c43      	adds	r3, r0, #1
 8019a9a:	bfbc      	itt	lt
 8019a9c:	238b      	movlt	r3, #139	@ 0x8b
 8019a9e:	602b      	strlt	r3, [r5, #0]
 8019aa0:	2c00      	cmp	r4, #0
 8019aa2:	d0e3      	beq.n	8019a6c <_vsniprintf_r+0x16>
 8019aa4:	9b00      	ldr	r3, [sp, #0]
 8019aa6:	2200      	movs	r2, #0
 8019aa8:	701a      	strb	r2, [r3, #0]
 8019aaa:	e7df      	b.n	8019a6c <_vsniprintf_r+0x16>

08019aac <vsniprintf>:
 8019aac:	b507      	push	{r0, r1, r2, lr}
 8019aae:	9300      	str	r3, [sp, #0]
 8019ab0:	4613      	mov	r3, r2
 8019ab2:	460a      	mov	r2, r1
 8019ab4:	4601      	mov	r1, r0
 8019ab6:	4803      	ldr	r0, [pc, #12]	@ (8019ac4 <vsniprintf+0x18>)
 8019ab8:	6800      	ldr	r0, [r0, #0]
 8019aba:	f7ff ffcc 	bl	8019a56 <_vsniprintf_r>
 8019abe:	b003      	add	sp, #12
 8019ac0:	f85d fb04 	ldr.w	pc, [sp], #4
 8019ac4:	200009fc 	.word	0x200009fc

08019ac8 <__swbuf_r>:
 8019ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019aca:	460e      	mov	r6, r1
 8019acc:	4614      	mov	r4, r2
 8019ace:	4605      	mov	r5, r0
 8019ad0:	b118      	cbz	r0, 8019ada <__swbuf_r+0x12>
 8019ad2:	6a03      	ldr	r3, [r0, #32]
 8019ad4:	b90b      	cbnz	r3, 8019ada <__swbuf_r+0x12>
 8019ad6:	f7ff fea5 	bl	8019824 <__sinit>
 8019ada:	69a3      	ldr	r3, [r4, #24]
 8019adc:	60a3      	str	r3, [r4, #8]
 8019ade:	89a3      	ldrh	r3, [r4, #12]
 8019ae0:	071a      	lsls	r2, r3, #28
 8019ae2:	d501      	bpl.n	8019ae8 <__swbuf_r+0x20>
 8019ae4:	6923      	ldr	r3, [r4, #16]
 8019ae6:	b943      	cbnz	r3, 8019afa <__swbuf_r+0x32>
 8019ae8:	4621      	mov	r1, r4
 8019aea:	4628      	mov	r0, r5
 8019aec:	f000 f82a 	bl	8019b44 <__swsetup_r>
 8019af0:	b118      	cbz	r0, 8019afa <__swbuf_r+0x32>
 8019af2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8019af6:	4638      	mov	r0, r7
 8019af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019afa:	6823      	ldr	r3, [r4, #0]
 8019afc:	6922      	ldr	r2, [r4, #16]
 8019afe:	1a98      	subs	r0, r3, r2
 8019b00:	6963      	ldr	r3, [r4, #20]
 8019b02:	b2f6      	uxtb	r6, r6
 8019b04:	4283      	cmp	r3, r0
 8019b06:	4637      	mov	r7, r6
 8019b08:	dc05      	bgt.n	8019b16 <__swbuf_r+0x4e>
 8019b0a:	4621      	mov	r1, r4
 8019b0c:	4628      	mov	r0, r5
 8019b0e:	f000 fe99 	bl	801a844 <_fflush_r>
 8019b12:	2800      	cmp	r0, #0
 8019b14:	d1ed      	bne.n	8019af2 <__swbuf_r+0x2a>
 8019b16:	68a3      	ldr	r3, [r4, #8]
 8019b18:	3b01      	subs	r3, #1
 8019b1a:	60a3      	str	r3, [r4, #8]
 8019b1c:	6823      	ldr	r3, [r4, #0]
 8019b1e:	1c5a      	adds	r2, r3, #1
 8019b20:	6022      	str	r2, [r4, #0]
 8019b22:	701e      	strb	r6, [r3, #0]
 8019b24:	6962      	ldr	r2, [r4, #20]
 8019b26:	1c43      	adds	r3, r0, #1
 8019b28:	429a      	cmp	r2, r3
 8019b2a:	d004      	beq.n	8019b36 <__swbuf_r+0x6e>
 8019b2c:	89a3      	ldrh	r3, [r4, #12]
 8019b2e:	07db      	lsls	r3, r3, #31
 8019b30:	d5e1      	bpl.n	8019af6 <__swbuf_r+0x2e>
 8019b32:	2e0a      	cmp	r6, #10
 8019b34:	d1df      	bne.n	8019af6 <__swbuf_r+0x2e>
 8019b36:	4621      	mov	r1, r4
 8019b38:	4628      	mov	r0, r5
 8019b3a:	f000 fe83 	bl	801a844 <_fflush_r>
 8019b3e:	2800      	cmp	r0, #0
 8019b40:	d0d9      	beq.n	8019af6 <__swbuf_r+0x2e>
 8019b42:	e7d6      	b.n	8019af2 <__swbuf_r+0x2a>

08019b44 <__swsetup_r>:
 8019b44:	b538      	push	{r3, r4, r5, lr}
 8019b46:	4b29      	ldr	r3, [pc, #164]	@ (8019bec <__swsetup_r+0xa8>)
 8019b48:	4605      	mov	r5, r0
 8019b4a:	6818      	ldr	r0, [r3, #0]
 8019b4c:	460c      	mov	r4, r1
 8019b4e:	b118      	cbz	r0, 8019b58 <__swsetup_r+0x14>
 8019b50:	6a03      	ldr	r3, [r0, #32]
 8019b52:	b90b      	cbnz	r3, 8019b58 <__swsetup_r+0x14>
 8019b54:	f7ff fe66 	bl	8019824 <__sinit>
 8019b58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019b5c:	0719      	lsls	r1, r3, #28
 8019b5e:	d422      	bmi.n	8019ba6 <__swsetup_r+0x62>
 8019b60:	06da      	lsls	r2, r3, #27
 8019b62:	d407      	bmi.n	8019b74 <__swsetup_r+0x30>
 8019b64:	2209      	movs	r2, #9
 8019b66:	602a      	str	r2, [r5, #0]
 8019b68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019b6c:	81a3      	strh	r3, [r4, #12]
 8019b6e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019b72:	e033      	b.n	8019bdc <__swsetup_r+0x98>
 8019b74:	0758      	lsls	r0, r3, #29
 8019b76:	d512      	bpl.n	8019b9e <__swsetup_r+0x5a>
 8019b78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019b7a:	b141      	cbz	r1, 8019b8e <__swsetup_r+0x4a>
 8019b7c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019b80:	4299      	cmp	r1, r3
 8019b82:	d002      	beq.n	8019b8a <__swsetup_r+0x46>
 8019b84:	4628      	mov	r0, r5
 8019b86:	f000 f95f 	bl	8019e48 <_free_r>
 8019b8a:	2300      	movs	r3, #0
 8019b8c:	6363      	str	r3, [r4, #52]	@ 0x34
 8019b8e:	89a3      	ldrh	r3, [r4, #12]
 8019b90:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8019b94:	81a3      	strh	r3, [r4, #12]
 8019b96:	2300      	movs	r3, #0
 8019b98:	6063      	str	r3, [r4, #4]
 8019b9a:	6923      	ldr	r3, [r4, #16]
 8019b9c:	6023      	str	r3, [r4, #0]
 8019b9e:	89a3      	ldrh	r3, [r4, #12]
 8019ba0:	f043 0308 	orr.w	r3, r3, #8
 8019ba4:	81a3      	strh	r3, [r4, #12]
 8019ba6:	6923      	ldr	r3, [r4, #16]
 8019ba8:	b94b      	cbnz	r3, 8019bbe <__swsetup_r+0x7a>
 8019baa:	89a3      	ldrh	r3, [r4, #12]
 8019bac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8019bb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019bb4:	d003      	beq.n	8019bbe <__swsetup_r+0x7a>
 8019bb6:	4621      	mov	r1, r4
 8019bb8:	4628      	mov	r0, r5
 8019bba:	f000 fea3 	bl	801a904 <__smakebuf_r>
 8019bbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019bc2:	f013 0201 	ands.w	r2, r3, #1
 8019bc6:	d00a      	beq.n	8019bde <__swsetup_r+0x9a>
 8019bc8:	2200      	movs	r2, #0
 8019bca:	60a2      	str	r2, [r4, #8]
 8019bcc:	6962      	ldr	r2, [r4, #20]
 8019bce:	4252      	negs	r2, r2
 8019bd0:	61a2      	str	r2, [r4, #24]
 8019bd2:	6922      	ldr	r2, [r4, #16]
 8019bd4:	b942      	cbnz	r2, 8019be8 <__swsetup_r+0xa4>
 8019bd6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8019bda:	d1c5      	bne.n	8019b68 <__swsetup_r+0x24>
 8019bdc:	bd38      	pop	{r3, r4, r5, pc}
 8019bde:	0799      	lsls	r1, r3, #30
 8019be0:	bf58      	it	pl
 8019be2:	6962      	ldrpl	r2, [r4, #20]
 8019be4:	60a2      	str	r2, [r4, #8]
 8019be6:	e7f4      	b.n	8019bd2 <__swsetup_r+0x8e>
 8019be8:	2000      	movs	r0, #0
 8019bea:	e7f7      	b.n	8019bdc <__swsetup_r+0x98>
 8019bec:	200009fc 	.word	0x200009fc

08019bf0 <memcmp>:
 8019bf0:	b510      	push	{r4, lr}
 8019bf2:	3901      	subs	r1, #1
 8019bf4:	4402      	add	r2, r0
 8019bf6:	4290      	cmp	r0, r2
 8019bf8:	d101      	bne.n	8019bfe <memcmp+0xe>
 8019bfa:	2000      	movs	r0, #0
 8019bfc:	e005      	b.n	8019c0a <memcmp+0x1a>
 8019bfe:	7803      	ldrb	r3, [r0, #0]
 8019c00:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019c04:	42a3      	cmp	r3, r4
 8019c06:	d001      	beq.n	8019c0c <memcmp+0x1c>
 8019c08:	1b18      	subs	r0, r3, r4
 8019c0a:	bd10      	pop	{r4, pc}
 8019c0c:	3001      	adds	r0, #1
 8019c0e:	e7f2      	b.n	8019bf6 <memcmp+0x6>

08019c10 <memmove>:
 8019c10:	4288      	cmp	r0, r1
 8019c12:	b510      	push	{r4, lr}
 8019c14:	eb01 0402 	add.w	r4, r1, r2
 8019c18:	d902      	bls.n	8019c20 <memmove+0x10>
 8019c1a:	4284      	cmp	r4, r0
 8019c1c:	4623      	mov	r3, r4
 8019c1e:	d807      	bhi.n	8019c30 <memmove+0x20>
 8019c20:	1e43      	subs	r3, r0, #1
 8019c22:	42a1      	cmp	r1, r4
 8019c24:	d008      	beq.n	8019c38 <memmove+0x28>
 8019c26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019c2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019c2e:	e7f8      	b.n	8019c22 <memmove+0x12>
 8019c30:	4402      	add	r2, r0
 8019c32:	4601      	mov	r1, r0
 8019c34:	428a      	cmp	r2, r1
 8019c36:	d100      	bne.n	8019c3a <memmove+0x2a>
 8019c38:	bd10      	pop	{r4, pc}
 8019c3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019c3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019c42:	e7f7      	b.n	8019c34 <memmove+0x24>

08019c44 <memset>:
 8019c44:	4402      	add	r2, r0
 8019c46:	4603      	mov	r3, r0
 8019c48:	4293      	cmp	r3, r2
 8019c4a:	d100      	bne.n	8019c4e <memset+0xa>
 8019c4c:	4770      	bx	lr
 8019c4e:	f803 1b01 	strb.w	r1, [r3], #1
 8019c52:	e7f9      	b.n	8019c48 <memset+0x4>

08019c54 <strchr>:
 8019c54:	b2c9      	uxtb	r1, r1
 8019c56:	4603      	mov	r3, r0
 8019c58:	4618      	mov	r0, r3
 8019c5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019c5e:	b112      	cbz	r2, 8019c66 <strchr+0x12>
 8019c60:	428a      	cmp	r2, r1
 8019c62:	d1f9      	bne.n	8019c58 <strchr+0x4>
 8019c64:	4770      	bx	lr
 8019c66:	2900      	cmp	r1, #0
 8019c68:	bf18      	it	ne
 8019c6a:	2000      	movne	r0, #0
 8019c6c:	4770      	bx	lr

08019c6e <strncmp>:
 8019c6e:	b510      	push	{r4, lr}
 8019c70:	b16a      	cbz	r2, 8019c8e <strncmp+0x20>
 8019c72:	3901      	subs	r1, #1
 8019c74:	1884      	adds	r4, r0, r2
 8019c76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019c7a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8019c7e:	429a      	cmp	r2, r3
 8019c80:	d103      	bne.n	8019c8a <strncmp+0x1c>
 8019c82:	42a0      	cmp	r0, r4
 8019c84:	d001      	beq.n	8019c8a <strncmp+0x1c>
 8019c86:	2a00      	cmp	r2, #0
 8019c88:	d1f5      	bne.n	8019c76 <strncmp+0x8>
 8019c8a:	1ad0      	subs	r0, r2, r3
 8019c8c:	bd10      	pop	{r4, pc}
 8019c8e:	4610      	mov	r0, r2
 8019c90:	e7fc      	b.n	8019c8c <strncmp+0x1e>

08019c92 <strstr>:
 8019c92:	780a      	ldrb	r2, [r1, #0]
 8019c94:	b570      	push	{r4, r5, r6, lr}
 8019c96:	b96a      	cbnz	r2, 8019cb4 <strstr+0x22>
 8019c98:	bd70      	pop	{r4, r5, r6, pc}
 8019c9a:	429a      	cmp	r2, r3
 8019c9c:	d109      	bne.n	8019cb2 <strstr+0x20>
 8019c9e:	460c      	mov	r4, r1
 8019ca0:	4605      	mov	r5, r0
 8019ca2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8019ca6:	2b00      	cmp	r3, #0
 8019ca8:	d0f6      	beq.n	8019c98 <strstr+0x6>
 8019caa:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8019cae:	429e      	cmp	r6, r3
 8019cb0:	d0f7      	beq.n	8019ca2 <strstr+0x10>
 8019cb2:	3001      	adds	r0, #1
 8019cb4:	7803      	ldrb	r3, [r0, #0]
 8019cb6:	2b00      	cmp	r3, #0
 8019cb8:	d1ef      	bne.n	8019c9a <strstr+0x8>
 8019cba:	4618      	mov	r0, r3
 8019cbc:	e7ec      	b.n	8019c98 <strstr+0x6>
	...

08019cc0 <_close_r>:
 8019cc0:	b538      	push	{r3, r4, r5, lr}
 8019cc2:	4d06      	ldr	r5, [pc, #24]	@ (8019cdc <_close_r+0x1c>)
 8019cc4:	2300      	movs	r3, #0
 8019cc6:	4604      	mov	r4, r0
 8019cc8:	4608      	mov	r0, r1
 8019cca:	602b      	str	r3, [r5, #0]
 8019ccc:	f7e8 ff76 	bl	8002bbc <_close>
 8019cd0:	1c43      	adds	r3, r0, #1
 8019cd2:	d102      	bne.n	8019cda <_close_r+0x1a>
 8019cd4:	682b      	ldr	r3, [r5, #0]
 8019cd6:	b103      	cbz	r3, 8019cda <_close_r+0x1a>
 8019cd8:	6023      	str	r3, [r4, #0]
 8019cda:	bd38      	pop	{r3, r4, r5, pc}
 8019cdc:	2000bd1c 	.word	0x2000bd1c

08019ce0 <_lseek_r>:
 8019ce0:	b538      	push	{r3, r4, r5, lr}
 8019ce2:	4d07      	ldr	r5, [pc, #28]	@ (8019d00 <_lseek_r+0x20>)
 8019ce4:	4604      	mov	r4, r0
 8019ce6:	4608      	mov	r0, r1
 8019ce8:	4611      	mov	r1, r2
 8019cea:	2200      	movs	r2, #0
 8019cec:	602a      	str	r2, [r5, #0]
 8019cee:	461a      	mov	r2, r3
 8019cf0:	f7e8 ff8b 	bl	8002c0a <_lseek>
 8019cf4:	1c43      	adds	r3, r0, #1
 8019cf6:	d102      	bne.n	8019cfe <_lseek_r+0x1e>
 8019cf8:	682b      	ldr	r3, [r5, #0]
 8019cfa:	b103      	cbz	r3, 8019cfe <_lseek_r+0x1e>
 8019cfc:	6023      	str	r3, [r4, #0]
 8019cfe:	bd38      	pop	{r3, r4, r5, pc}
 8019d00:	2000bd1c 	.word	0x2000bd1c

08019d04 <_read_r>:
 8019d04:	b538      	push	{r3, r4, r5, lr}
 8019d06:	4d07      	ldr	r5, [pc, #28]	@ (8019d24 <_read_r+0x20>)
 8019d08:	4604      	mov	r4, r0
 8019d0a:	4608      	mov	r0, r1
 8019d0c:	4611      	mov	r1, r2
 8019d0e:	2200      	movs	r2, #0
 8019d10:	602a      	str	r2, [r5, #0]
 8019d12:	461a      	mov	r2, r3
 8019d14:	f7e8 ff19 	bl	8002b4a <_read>
 8019d18:	1c43      	adds	r3, r0, #1
 8019d1a:	d102      	bne.n	8019d22 <_read_r+0x1e>
 8019d1c:	682b      	ldr	r3, [r5, #0]
 8019d1e:	b103      	cbz	r3, 8019d22 <_read_r+0x1e>
 8019d20:	6023      	str	r3, [r4, #0]
 8019d22:	bd38      	pop	{r3, r4, r5, pc}
 8019d24:	2000bd1c 	.word	0x2000bd1c

08019d28 <_sbrk_r>:
 8019d28:	b538      	push	{r3, r4, r5, lr}
 8019d2a:	4d06      	ldr	r5, [pc, #24]	@ (8019d44 <_sbrk_r+0x1c>)
 8019d2c:	2300      	movs	r3, #0
 8019d2e:	4604      	mov	r4, r0
 8019d30:	4608      	mov	r0, r1
 8019d32:	602b      	str	r3, [r5, #0]
 8019d34:	f7e8 ff76 	bl	8002c24 <_sbrk>
 8019d38:	1c43      	adds	r3, r0, #1
 8019d3a:	d102      	bne.n	8019d42 <_sbrk_r+0x1a>
 8019d3c:	682b      	ldr	r3, [r5, #0]
 8019d3e:	b103      	cbz	r3, 8019d42 <_sbrk_r+0x1a>
 8019d40:	6023      	str	r3, [r4, #0]
 8019d42:	bd38      	pop	{r3, r4, r5, pc}
 8019d44:	2000bd1c 	.word	0x2000bd1c

08019d48 <_write_r>:
 8019d48:	b538      	push	{r3, r4, r5, lr}
 8019d4a:	4d07      	ldr	r5, [pc, #28]	@ (8019d68 <_write_r+0x20>)
 8019d4c:	4604      	mov	r4, r0
 8019d4e:	4608      	mov	r0, r1
 8019d50:	4611      	mov	r1, r2
 8019d52:	2200      	movs	r2, #0
 8019d54:	602a      	str	r2, [r5, #0]
 8019d56:	461a      	mov	r2, r3
 8019d58:	f7e8 ff14 	bl	8002b84 <_write>
 8019d5c:	1c43      	adds	r3, r0, #1
 8019d5e:	d102      	bne.n	8019d66 <_write_r+0x1e>
 8019d60:	682b      	ldr	r3, [r5, #0]
 8019d62:	b103      	cbz	r3, 8019d66 <_write_r+0x1e>
 8019d64:	6023      	str	r3, [r4, #0]
 8019d66:	bd38      	pop	{r3, r4, r5, pc}
 8019d68:	2000bd1c 	.word	0x2000bd1c

08019d6c <__errno>:
 8019d6c:	4b01      	ldr	r3, [pc, #4]	@ (8019d74 <__errno+0x8>)
 8019d6e:	6818      	ldr	r0, [r3, #0]
 8019d70:	4770      	bx	lr
 8019d72:	bf00      	nop
 8019d74:	200009fc 	.word	0x200009fc

08019d78 <__libc_init_array>:
 8019d78:	b570      	push	{r4, r5, r6, lr}
 8019d7a:	4d0d      	ldr	r5, [pc, #52]	@ (8019db0 <__libc_init_array+0x38>)
 8019d7c:	4c0d      	ldr	r4, [pc, #52]	@ (8019db4 <__libc_init_array+0x3c>)
 8019d7e:	1b64      	subs	r4, r4, r5
 8019d80:	10a4      	asrs	r4, r4, #2
 8019d82:	2600      	movs	r6, #0
 8019d84:	42a6      	cmp	r6, r4
 8019d86:	d109      	bne.n	8019d9c <__libc_init_array+0x24>
 8019d88:	4d0b      	ldr	r5, [pc, #44]	@ (8019db8 <__libc_init_array+0x40>)
 8019d8a:	4c0c      	ldr	r4, [pc, #48]	@ (8019dbc <__libc_init_array+0x44>)
 8019d8c:	f001 f9fa 	bl	801b184 <_init>
 8019d90:	1b64      	subs	r4, r4, r5
 8019d92:	10a4      	asrs	r4, r4, #2
 8019d94:	2600      	movs	r6, #0
 8019d96:	42a6      	cmp	r6, r4
 8019d98:	d105      	bne.n	8019da6 <__libc_init_array+0x2e>
 8019d9a:	bd70      	pop	{r4, r5, r6, pc}
 8019d9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8019da0:	4798      	blx	r3
 8019da2:	3601      	adds	r6, #1
 8019da4:	e7ee      	b.n	8019d84 <__libc_init_array+0xc>
 8019da6:	f855 3b04 	ldr.w	r3, [r5], #4
 8019daa:	4798      	blx	r3
 8019dac:	3601      	adds	r6, #1
 8019dae:	e7f2      	b.n	8019d96 <__libc_init_array+0x1e>
 8019db0:	0801cbe0 	.word	0x0801cbe0
 8019db4:	0801cbe0 	.word	0x0801cbe0
 8019db8:	0801cbe0 	.word	0x0801cbe0
 8019dbc:	0801cbf4 	.word	0x0801cbf4

08019dc0 <__retarget_lock_init_recursive>:
 8019dc0:	4770      	bx	lr

08019dc2 <__retarget_lock_acquire_recursive>:
 8019dc2:	4770      	bx	lr

08019dc4 <__retarget_lock_release_recursive>:
 8019dc4:	4770      	bx	lr

08019dc6 <strcpy>:
 8019dc6:	4603      	mov	r3, r0
 8019dc8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019dcc:	f803 2b01 	strb.w	r2, [r3], #1
 8019dd0:	2a00      	cmp	r2, #0
 8019dd2:	d1f9      	bne.n	8019dc8 <strcpy+0x2>
 8019dd4:	4770      	bx	lr

08019dd6 <memcpy>:
 8019dd6:	440a      	add	r2, r1
 8019dd8:	4291      	cmp	r1, r2
 8019dda:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8019dde:	d100      	bne.n	8019de2 <memcpy+0xc>
 8019de0:	4770      	bx	lr
 8019de2:	b510      	push	{r4, lr}
 8019de4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019de8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019dec:	4291      	cmp	r1, r2
 8019dee:	d1f9      	bne.n	8019de4 <memcpy+0xe>
 8019df0:	bd10      	pop	{r4, pc}
	...

08019df4 <__assert_func>:
 8019df4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019df6:	4614      	mov	r4, r2
 8019df8:	461a      	mov	r2, r3
 8019dfa:	4b09      	ldr	r3, [pc, #36]	@ (8019e20 <__assert_func+0x2c>)
 8019dfc:	681b      	ldr	r3, [r3, #0]
 8019dfe:	4605      	mov	r5, r0
 8019e00:	68d8      	ldr	r0, [r3, #12]
 8019e02:	b954      	cbnz	r4, 8019e1a <__assert_func+0x26>
 8019e04:	4b07      	ldr	r3, [pc, #28]	@ (8019e24 <__assert_func+0x30>)
 8019e06:	461c      	mov	r4, r3
 8019e08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019e0c:	9100      	str	r1, [sp, #0]
 8019e0e:	462b      	mov	r3, r5
 8019e10:	4905      	ldr	r1, [pc, #20]	@ (8019e28 <__assert_func+0x34>)
 8019e12:	f000 fd3f 	bl	801a894 <fiprintf>
 8019e16:	f000 fdd3 	bl	801a9c0 <abort>
 8019e1a:	4b04      	ldr	r3, [pc, #16]	@ (8019e2c <__assert_func+0x38>)
 8019e1c:	e7f4      	b.n	8019e08 <__assert_func+0x14>
 8019e1e:	bf00      	nop
 8019e20:	200009fc 	.word	0x200009fc
 8019e24:	0801cb2d 	.word	0x0801cb2d
 8019e28:	0801caff 	.word	0x0801caff
 8019e2c:	0801caf2 	.word	0x0801caf2

08019e30 <__env_lock>:
 8019e30:	4801      	ldr	r0, [pc, #4]	@ (8019e38 <__env_lock+0x8>)
 8019e32:	f7ff bfc6 	b.w	8019dc2 <__retarget_lock_acquire_recursive>
 8019e36:	bf00      	nop
 8019e38:	2000bd20 	.word	0x2000bd20

08019e3c <__env_unlock>:
 8019e3c:	4801      	ldr	r0, [pc, #4]	@ (8019e44 <__env_unlock+0x8>)
 8019e3e:	f7ff bfc1 	b.w	8019dc4 <__retarget_lock_release_recursive>
 8019e42:	bf00      	nop
 8019e44:	2000bd20 	.word	0x2000bd20

08019e48 <_free_r>:
 8019e48:	b538      	push	{r3, r4, r5, lr}
 8019e4a:	4605      	mov	r5, r0
 8019e4c:	2900      	cmp	r1, #0
 8019e4e:	d041      	beq.n	8019ed4 <_free_r+0x8c>
 8019e50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019e54:	1f0c      	subs	r4, r1, #4
 8019e56:	2b00      	cmp	r3, #0
 8019e58:	bfb8      	it	lt
 8019e5a:	18e4      	addlt	r4, r4, r3
 8019e5c:	f7ff fb30 	bl	80194c0 <__malloc_lock>
 8019e60:	4a1d      	ldr	r2, [pc, #116]	@ (8019ed8 <_free_r+0x90>)
 8019e62:	6813      	ldr	r3, [r2, #0]
 8019e64:	b933      	cbnz	r3, 8019e74 <_free_r+0x2c>
 8019e66:	6063      	str	r3, [r4, #4]
 8019e68:	6014      	str	r4, [r2, #0]
 8019e6a:	4628      	mov	r0, r5
 8019e6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019e70:	f7ff bb2c 	b.w	80194cc <__malloc_unlock>
 8019e74:	42a3      	cmp	r3, r4
 8019e76:	d908      	bls.n	8019e8a <_free_r+0x42>
 8019e78:	6820      	ldr	r0, [r4, #0]
 8019e7a:	1821      	adds	r1, r4, r0
 8019e7c:	428b      	cmp	r3, r1
 8019e7e:	bf01      	itttt	eq
 8019e80:	6819      	ldreq	r1, [r3, #0]
 8019e82:	685b      	ldreq	r3, [r3, #4]
 8019e84:	1809      	addeq	r1, r1, r0
 8019e86:	6021      	streq	r1, [r4, #0]
 8019e88:	e7ed      	b.n	8019e66 <_free_r+0x1e>
 8019e8a:	461a      	mov	r2, r3
 8019e8c:	685b      	ldr	r3, [r3, #4]
 8019e8e:	b10b      	cbz	r3, 8019e94 <_free_r+0x4c>
 8019e90:	42a3      	cmp	r3, r4
 8019e92:	d9fa      	bls.n	8019e8a <_free_r+0x42>
 8019e94:	6811      	ldr	r1, [r2, #0]
 8019e96:	1850      	adds	r0, r2, r1
 8019e98:	42a0      	cmp	r0, r4
 8019e9a:	d10b      	bne.n	8019eb4 <_free_r+0x6c>
 8019e9c:	6820      	ldr	r0, [r4, #0]
 8019e9e:	4401      	add	r1, r0
 8019ea0:	1850      	adds	r0, r2, r1
 8019ea2:	4283      	cmp	r3, r0
 8019ea4:	6011      	str	r1, [r2, #0]
 8019ea6:	d1e0      	bne.n	8019e6a <_free_r+0x22>
 8019ea8:	6818      	ldr	r0, [r3, #0]
 8019eaa:	685b      	ldr	r3, [r3, #4]
 8019eac:	6053      	str	r3, [r2, #4]
 8019eae:	4408      	add	r0, r1
 8019eb0:	6010      	str	r0, [r2, #0]
 8019eb2:	e7da      	b.n	8019e6a <_free_r+0x22>
 8019eb4:	d902      	bls.n	8019ebc <_free_r+0x74>
 8019eb6:	230c      	movs	r3, #12
 8019eb8:	602b      	str	r3, [r5, #0]
 8019eba:	e7d6      	b.n	8019e6a <_free_r+0x22>
 8019ebc:	6820      	ldr	r0, [r4, #0]
 8019ebe:	1821      	adds	r1, r4, r0
 8019ec0:	428b      	cmp	r3, r1
 8019ec2:	bf04      	itt	eq
 8019ec4:	6819      	ldreq	r1, [r3, #0]
 8019ec6:	685b      	ldreq	r3, [r3, #4]
 8019ec8:	6063      	str	r3, [r4, #4]
 8019eca:	bf04      	itt	eq
 8019ecc:	1809      	addeq	r1, r1, r0
 8019ece:	6021      	streq	r1, [r4, #0]
 8019ed0:	6054      	str	r4, [r2, #4]
 8019ed2:	e7ca      	b.n	8019e6a <_free_r+0x22>
 8019ed4:	bd38      	pop	{r3, r4, r5, pc}
 8019ed6:	bf00      	nop
 8019ed8:	2000bbdc 	.word	0x2000bbdc

08019edc <_malloc_usable_size_r>:
 8019edc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019ee0:	1f18      	subs	r0, r3, #4
 8019ee2:	2b00      	cmp	r3, #0
 8019ee4:	bfbc      	itt	lt
 8019ee6:	580b      	ldrlt	r3, [r1, r0]
 8019ee8:	18c0      	addlt	r0, r0, r3
 8019eea:	4770      	bx	lr

08019eec <__ssputs_r>:
 8019eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019ef0:	688e      	ldr	r6, [r1, #8]
 8019ef2:	461f      	mov	r7, r3
 8019ef4:	42be      	cmp	r6, r7
 8019ef6:	680b      	ldr	r3, [r1, #0]
 8019ef8:	4682      	mov	sl, r0
 8019efa:	460c      	mov	r4, r1
 8019efc:	4690      	mov	r8, r2
 8019efe:	d82d      	bhi.n	8019f5c <__ssputs_r+0x70>
 8019f00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019f04:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8019f08:	d026      	beq.n	8019f58 <__ssputs_r+0x6c>
 8019f0a:	6965      	ldr	r5, [r4, #20]
 8019f0c:	6909      	ldr	r1, [r1, #16]
 8019f0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019f12:	eba3 0901 	sub.w	r9, r3, r1
 8019f16:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019f1a:	1c7b      	adds	r3, r7, #1
 8019f1c:	444b      	add	r3, r9
 8019f1e:	106d      	asrs	r5, r5, #1
 8019f20:	429d      	cmp	r5, r3
 8019f22:	bf38      	it	cc
 8019f24:	461d      	movcc	r5, r3
 8019f26:	0553      	lsls	r3, r2, #21
 8019f28:	d527      	bpl.n	8019f7a <__ssputs_r+0x8e>
 8019f2a:	4629      	mov	r1, r5
 8019f2c:	f7ff fa48 	bl	80193c0 <_malloc_r>
 8019f30:	4606      	mov	r6, r0
 8019f32:	b360      	cbz	r0, 8019f8e <__ssputs_r+0xa2>
 8019f34:	6921      	ldr	r1, [r4, #16]
 8019f36:	464a      	mov	r2, r9
 8019f38:	f7ff ff4d 	bl	8019dd6 <memcpy>
 8019f3c:	89a3      	ldrh	r3, [r4, #12]
 8019f3e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8019f42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019f46:	81a3      	strh	r3, [r4, #12]
 8019f48:	6126      	str	r6, [r4, #16]
 8019f4a:	6165      	str	r5, [r4, #20]
 8019f4c:	444e      	add	r6, r9
 8019f4e:	eba5 0509 	sub.w	r5, r5, r9
 8019f52:	6026      	str	r6, [r4, #0]
 8019f54:	60a5      	str	r5, [r4, #8]
 8019f56:	463e      	mov	r6, r7
 8019f58:	42be      	cmp	r6, r7
 8019f5a:	d900      	bls.n	8019f5e <__ssputs_r+0x72>
 8019f5c:	463e      	mov	r6, r7
 8019f5e:	6820      	ldr	r0, [r4, #0]
 8019f60:	4632      	mov	r2, r6
 8019f62:	4641      	mov	r1, r8
 8019f64:	f7ff fe54 	bl	8019c10 <memmove>
 8019f68:	68a3      	ldr	r3, [r4, #8]
 8019f6a:	1b9b      	subs	r3, r3, r6
 8019f6c:	60a3      	str	r3, [r4, #8]
 8019f6e:	6823      	ldr	r3, [r4, #0]
 8019f70:	4433      	add	r3, r6
 8019f72:	6023      	str	r3, [r4, #0]
 8019f74:	2000      	movs	r0, #0
 8019f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019f7a:	462a      	mov	r2, r5
 8019f7c:	f7ff fb20 	bl	80195c0 <_realloc_r>
 8019f80:	4606      	mov	r6, r0
 8019f82:	2800      	cmp	r0, #0
 8019f84:	d1e0      	bne.n	8019f48 <__ssputs_r+0x5c>
 8019f86:	6921      	ldr	r1, [r4, #16]
 8019f88:	4650      	mov	r0, sl
 8019f8a:	f7ff ff5d 	bl	8019e48 <_free_r>
 8019f8e:	230c      	movs	r3, #12
 8019f90:	f8ca 3000 	str.w	r3, [sl]
 8019f94:	89a3      	ldrh	r3, [r4, #12]
 8019f96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019f9a:	81a3      	strh	r3, [r4, #12]
 8019f9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019fa0:	e7e9      	b.n	8019f76 <__ssputs_r+0x8a>
	...

08019fa4 <_svfiprintf_r>:
 8019fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019fa8:	4698      	mov	r8, r3
 8019faa:	898b      	ldrh	r3, [r1, #12]
 8019fac:	061b      	lsls	r3, r3, #24
 8019fae:	b09d      	sub	sp, #116	@ 0x74
 8019fb0:	4607      	mov	r7, r0
 8019fb2:	460d      	mov	r5, r1
 8019fb4:	4614      	mov	r4, r2
 8019fb6:	d510      	bpl.n	8019fda <_svfiprintf_r+0x36>
 8019fb8:	690b      	ldr	r3, [r1, #16]
 8019fba:	b973      	cbnz	r3, 8019fda <_svfiprintf_r+0x36>
 8019fbc:	2140      	movs	r1, #64	@ 0x40
 8019fbe:	f7ff f9ff 	bl	80193c0 <_malloc_r>
 8019fc2:	6028      	str	r0, [r5, #0]
 8019fc4:	6128      	str	r0, [r5, #16]
 8019fc6:	b930      	cbnz	r0, 8019fd6 <_svfiprintf_r+0x32>
 8019fc8:	230c      	movs	r3, #12
 8019fca:	603b      	str	r3, [r7, #0]
 8019fcc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019fd0:	b01d      	add	sp, #116	@ 0x74
 8019fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019fd6:	2340      	movs	r3, #64	@ 0x40
 8019fd8:	616b      	str	r3, [r5, #20]
 8019fda:	2300      	movs	r3, #0
 8019fdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8019fde:	2320      	movs	r3, #32
 8019fe0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8019fe4:	f8cd 800c 	str.w	r8, [sp, #12]
 8019fe8:	2330      	movs	r3, #48	@ 0x30
 8019fea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801a188 <_svfiprintf_r+0x1e4>
 8019fee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019ff2:	f04f 0901 	mov.w	r9, #1
 8019ff6:	4623      	mov	r3, r4
 8019ff8:	469a      	mov	sl, r3
 8019ffa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019ffe:	b10a      	cbz	r2, 801a004 <_svfiprintf_r+0x60>
 801a000:	2a25      	cmp	r2, #37	@ 0x25
 801a002:	d1f9      	bne.n	8019ff8 <_svfiprintf_r+0x54>
 801a004:	ebba 0b04 	subs.w	fp, sl, r4
 801a008:	d00b      	beq.n	801a022 <_svfiprintf_r+0x7e>
 801a00a:	465b      	mov	r3, fp
 801a00c:	4622      	mov	r2, r4
 801a00e:	4629      	mov	r1, r5
 801a010:	4638      	mov	r0, r7
 801a012:	f7ff ff6b 	bl	8019eec <__ssputs_r>
 801a016:	3001      	adds	r0, #1
 801a018:	f000 80a7 	beq.w	801a16a <_svfiprintf_r+0x1c6>
 801a01c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a01e:	445a      	add	r2, fp
 801a020:	9209      	str	r2, [sp, #36]	@ 0x24
 801a022:	f89a 3000 	ldrb.w	r3, [sl]
 801a026:	2b00      	cmp	r3, #0
 801a028:	f000 809f 	beq.w	801a16a <_svfiprintf_r+0x1c6>
 801a02c:	2300      	movs	r3, #0
 801a02e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a032:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a036:	f10a 0a01 	add.w	sl, sl, #1
 801a03a:	9304      	str	r3, [sp, #16]
 801a03c:	9307      	str	r3, [sp, #28]
 801a03e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801a042:	931a      	str	r3, [sp, #104]	@ 0x68
 801a044:	4654      	mov	r4, sl
 801a046:	2205      	movs	r2, #5
 801a048:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a04c:	484e      	ldr	r0, [pc, #312]	@ (801a188 <_svfiprintf_r+0x1e4>)
 801a04e:	f7e6 f8ff 	bl	8000250 <memchr>
 801a052:	9a04      	ldr	r2, [sp, #16]
 801a054:	b9d8      	cbnz	r0, 801a08e <_svfiprintf_r+0xea>
 801a056:	06d0      	lsls	r0, r2, #27
 801a058:	bf44      	itt	mi
 801a05a:	2320      	movmi	r3, #32
 801a05c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a060:	0711      	lsls	r1, r2, #28
 801a062:	bf44      	itt	mi
 801a064:	232b      	movmi	r3, #43	@ 0x2b
 801a066:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a06a:	f89a 3000 	ldrb.w	r3, [sl]
 801a06e:	2b2a      	cmp	r3, #42	@ 0x2a
 801a070:	d015      	beq.n	801a09e <_svfiprintf_r+0xfa>
 801a072:	9a07      	ldr	r2, [sp, #28]
 801a074:	4654      	mov	r4, sl
 801a076:	2000      	movs	r0, #0
 801a078:	f04f 0c0a 	mov.w	ip, #10
 801a07c:	4621      	mov	r1, r4
 801a07e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a082:	3b30      	subs	r3, #48	@ 0x30
 801a084:	2b09      	cmp	r3, #9
 801a086:	d94b      	bls.n	801a120 <_svfiprintf_r+0x17c>
 801a088:	b1b0      	cbz	r0, 801a0b8 <_svfiprintf_r+0x114>
 801a08a:	9207      	str	r2, [sp, #28]
 801a08c:	e014      	b.n	801a0b8 <_svfiprintf_r+0x114>
 801a08e:	eba0 0308 	sub.w	r3, r0, r8
 801a092:	fa09 f303 	lsl.w	r3, r9, r3
 801a096:	4313      	orrs	r3, r2
 801a098:	9304      	str	r3, [sp, #16]
 801a09a:	46a2      	mov	sl, r4
 801a09c:	e7d2      	b.n	801a044 <_svfiprintf_r+0xa0>
 801a09e:	9b03      	ldr	r3, [sp, #12]
 801a0a0:	1d19      	adds	r1, r3, #4
 801a0a2:	681b      	ldr	r3, [r3, #0]
 801a0a4:	9103      	str	r1, [sp, #12]
 801a0a6:	2b00      	cmp	r3, #0
 801a0a8:	bfbb      	ittet	lt
 801a0aa:	425b      	neglt	r3, r3
 801a0ac:	f042 0202 	orrlt.w	r2, r2, #2
 801a0b0:	9307      	strge	r3, [sp, #28]
 801a0b2:	9307      	strlt	r3, [sp, #28]
 801a0b4:	bfb8      	it	lt
 801a0b6:	9204      	strlt	r2, [sp, #16]
 801a0b8:	7823      	ldrb	r3, [r4, #0]
 801a0ba:	2b2e      	cmp	r3, #46	@ 0x2e
 801a0bc:	d10a      	bne.n	801a0d4 <_svfiprintf_r+0x130>
 801a0be:	7863      	ldrb	r3, [r4, #1]
 801a0c0:	2b2a      	cmp	r3, #42	@ 0x2a
 801a0c2:	d132      	bne.n	801a12a <_svfiprintf_r+0x186>
 801a0c4:	9b03      	ldr	r3, [sp, #12]
 801a0c6:	1d1a      	adds	r2, r3, #4
 801a0c8:	681b      	ldr	r3, [r3, #0]
 801a0ca:	9203      	str	r2, [sp, #12]
 801a0cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801a0d0:	3402      	adds	r4, #2
 801a0d2:	9305      	str	r3, [sp, #20]
 801a0d4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801a198 <_svfiprintf_r+0x1f4>
 801a0d8:	7821      	ldrb	r1, [r4, #0]
 801a0da:	2203      	movs	r2, #3
 801a0dc:	4650      	mov	r0, sl
 801a0de:	f7e6 f8b7 	bl	8000250 <memchr>
 801a0e2:	b138      	cbz	r0, 801a0f4 <_svfiprintf_r+0x150>
 801a0e4:	9b04      	ldr	r3, [sp, #16]
 801a0e6:	eba0 000a 	sub.w	r0, r0, sl
 801a0ea:	2240      	movs	r2, #64	@ 0x40
 801a0ec:	4082      	lsls	r2, r0
 801a0ee:	4313      	orrs	r3, r2
 801a0f0:	3401      	adds	r4, #1
 801a0f2:	9304      	str	r3, [sp, #16]
 801a0f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a0f8:	4824      	ldr	r0, [pc, #144]	@ (801a18c <_svfiprintf_r+0x1e8>)
 801a0fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801a0fe:	2206      	movs	r2, #6
 801a100:	f7e6 f8a6 	bl	8000250 <memchr>
 801a104:	2800      	cmp	r0, #0
 801a106:	d036      	beq.n	801a176 <_svfiprintf_r+0x1d2>
 801a108:	4b21      	ldr	r3, [pc, #132]	@ (801a190 <_svfiprintf_r+0x1ec>)
 801a10a:	bb1b      	cbnz	r3, 801a154 <_svfiprintf_r+0x1b0>
 801a10c:	9b03      	ldr	r3, [sp, #12]
 801a10e:	3307      	adds	r3, #7
 801a110:	f023 0307 	bic.w	r3, r3, #7
 801a114:	3308      	adds	r3, #8
 801a116:	9303      	str	r3, [sp, #12]
 801a118:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a11a:	4433      	add	r3, r6
 801a11c:	9309      	str	r3, [sp, #36]	@ 0x24
 801a11e:	e76a      	b.n	8019ff6 <_svfiprintf_r+0x52>
 801a120:	fb0c 3202 	mla	r2, ip, r2, r3
 801a124:	460c      	mov	r4, r1
 801a126:	2001      	movs	r0, #1
 801a128:	e7a8      	b.n	801a07c <_svfiprintf_r+0xd8>
 801a12a:	2300      	movs	r3, #0
 801a12c:	3401      	adds	r4, #1
 801a12e:	9305      	str	r3, [sp, #20]
 801a130:	4619      	mov	r1, r3
 801a132:	f04f 0c0a 	mov.w	ip, #10
 801a136:	4620      	mov	r0, r4
 801a138:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a13c:	3a30      	subs	r2, #48	@ 0x30
 801a13e:	2a09      	cmp	r2, #9
 801a140:	d903      	bls.n	801a14a <_svfiprintf_r+0x1a6>
 801a142:	2b00      	cmp	r3, #0
 801a144:	d0c6      	beq.n	801a0d4 <_svfiprintf_r+0x130>
 801a146:	9105      	str	r1, [sp, #20]
 801a148:	e7c4      	b.n	801a0d4 <_svfiprintf_r+0x130>
 801a14a:	fb0c 2101 	mla	r1, ip, r1, r2
 801a14e:	4604      	mov	r4, r0
 801a150:	2301      	movs	r3, #1
 801a152:	e7f0      	b.n	801a136 <_svfiprintf_r+0x192>
 801a154:	ab03      	add	r3, sp, #12
 801a156:	9300      	str	r3, [sp, #0]
 801a158:	462a      	mov	r2, r5
 801a15a:	4b0e      	ldr	r3, [pc, #56]	@ (801a194 <_svfiprintf_r+0x1f0>)
 801a15c:	a904      	add	r1, sp, #16
 801a15e:	4638      	mov	r0, r7
 801a160:	f3af 8000 	nop.w
 801a164:	1c42      	adds	r2, r0, #1
 801a166:	4606      	mov	r6, r0
 801a168:	d1d6      	bne.n	801a118 <_svfiprintf_r+0x174>
 801a16a:	89ab      	ldrh	r3, [r5, #12]
 801a16c:	065b      	lsls	r3, r3, #25
 801a16e:	f53f af2d 	bmi.w	8019fcc <_svfiprintf_r+0x28>
 801a172:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a174:	e72c      	b.n	8019fd0 <_svfiprintf_r+0x2c>
 801a176:	ab03      	add	r3, sp, #12
 801a178:	9300      	str	r3, [sp, #0]
 801a17a:	462a      	mov	r2, r5
 801a17c:	4b05      	ldr	r3, [pc, #20]	@ (801a194 <_svfiprintf_r+0x1f0>)
 801a17e:	a904      	add	r1, sp, #16
 801a180:	4638      	mov	r0, r7
 801a182:	f000 f9bb 	bl	801a4fc <_printf_i>
 801a186:	e7ed      	b.n	801a164 <_svfiprintf_r+0x1c0>
 801a188:	0801cb2e 	.word	0x0801cb2e
 801a18c:	0801cb38 	.word	0x0801cb38
 801a190:	00000000 	.word	0x00000000
 801a194:	08019eed 	.word	0x08019eed
 801a198:	0801cb34 	.word	0x0801cb34

0801a19c <__sfputc_r>:
 801a19c:	6893      	ldr	r3, [r2, #8]
 801a19e:	3b01      	subs	r3, #1
 801a1a0:	2b00      	cmp	r3, #0
 801a1a2:	b410      	push	{r4}
 801a1a4:	6093      	str	r3, [r2, #8]
 801a1a6:	da08      	bge.n	801a1ba <__sfputc_r+0x1e>
 801a1a8:	6994      	ldr	r4, [r2, #24]
 801a1aa:	42a3      	cmp	r3, r4
 801a1ac:	db01      	blt.n	801a1b2 <__sfputc_r+0x16>
 801a1ae:	290a      	cmp	r1, #10
 801a1b0:	d103      	bne.n	801a1ba <__sfputc_r+0x1e>
 801a1b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a1b6:	f7ff bc87 	b.w	8019ac8 <__swbuf_r>
 801a1ba:	6813      	ldr	r3, [r2, #0]
 801a1bc:	1c58      	adds	r0, r3, #1
 801a1be:	6010      	str	r0, [r2, #0]
 801a1c0:	7019      	strb	r1, [r3, #0]
 801a1c2:	4608      	mov	r0, r1
 801a1c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a1c8:	4770      	bx	lr

0801a1ca <__sfputs_r>:
 801a1ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a1cc:	4606      	mov	r6, r0
 801a1ce:	460f      	mov	r7, r1
 801a1d0:	4614      	mov	r4, r2
 801a1d2:	18d5      	adds	r5, r2, r3
 801a1d4:	42ac      	cmp	r4, r5
 801a1d6:	d101      	bne.n	801a1dc <__sfputs_r+0x12>
 801a1d8:	2000      	movs	r0, #0
 801a1da:	e007      	b.n	801a1ec <__sfputs_r+0x22>
 801a1dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a1e0:	463a      	mov	r2, r7
 801a1e2:	4630      	mov	r0, r6
 801a1e4:	f7ff ffda 	bl	801a19c <__sfputc_r>
 801a1e8:	1c43      	adds	r3, r0, #1
 801a1ea:	d1f3      	bne.n	801a1d4 <__sfputs_r+0xa>
 801a1ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a1f0 <_vfiprintf_r>:
 801a1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1f4:	460d      	mov	r5, r1
 801a1f6:	b09d      	sub	sp, #116	@ 0x74
 801a1f8:	4614      	mov	r4, r2
 801a1fa:	4698      	mov	r8, r3
 801a1fc:	4606      	mov	r6, r0
 801a1fe:	b118      	cbz	r0, 801a208 <_vfiprintf_r+0x18>
 801a200:	6a03      	ldr	r3, [r0, #32]
 801a202:	b90b      	cbnz	r3, 801a208 <_vfiprintf_r+0x18>
 801a204:	f7ff fb0e 	bl	8019824 <__sinit>
 801a208:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a20a:	07d9      	lsls	r1, r3, #31
 801a20c:	d405      	bmi.n	801a21a <_vfiprintf_r+0x2a>
 801a20e:	89ab      	ldrh	r3, [r5, #12]
 801a210:	059a      	lsls	r2, r3, #22
 801a212:	d402      	bmi.n	801a21a <_vfiprintf_r+0x2a>
 801a214:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a216:	f7ff fdd4 	bl	8019dc2 <__retarget_lock_acquire_recursive>
 801a21a:	89ab      	ldrh	r3, [r5, #12]
 801a21c:	071b      	lsls	r3, r3, #28
 801a21e:	d501      	bpl.n	801a224 <_vfiprintf_r+0x34>
 801a220:	692b      	ldr	r3, [r5, #16]
 801a222:	b99b      	cbnz	r3, 801a24c <_vfiprintf_r+0x5c>
 801a224:	4629      	mov	r1, r5
 801a226:	4630      	mov	r0, r6
 801a228:	f7ff fc8c 	bl	8019b44 <__swsetup_r>
 801a22c:	b170      	cbz	r0, 801a24c <_vfiprintf_r+0x5c>
 801a22e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a230:	07dc      	lsls	r4, r3, #31
 801a232:	d504      	bpl.n	801a23e <_vfiprintf_r+0x4e>
 801a234:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a238:	b01d      	add	sp, #116	@ 0x74
 801a23a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a23e:	89ab      	ldrh	r3, [r5, #12]
 801a240:	0598      	lsls	r0, r3, #22
 801a242:	d4f7      	bmi.n	801a234 <_vfiprintf_r+0x44>
 801a244:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a246:	f7ff fdbd 	bl	8019dc4 <__retarget_lock_release_recursive>
 801a24a:	e7f3      	b.n	801a234 <_vfiprintf_r+0x44>
 801a24c:	2300      	movs	r3, #0
 801a24e:	9309      	str	r3, [sp, #36]	@ 0x24
 801a250:	2320      	movs	r3, #32
 801a252:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801a256:	f8cd 800c 	str.w	r8, [sp, #12]
 801a25a:	2330      	movs	r3, #48	@ 0x30
 801a25c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801a40c <_vfiprintf_r+0x21c>
 801a260:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801a264:	f04f 0901 	mov.w	r9, #1
 801a268:	4623      	mov	r3, r4
 801a26a:	469a      	mov	sl, r3
 801a26c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a270:	b10a      	cbz	r2, 801a276 <_vfiprintf_r+0x86>
 801a272:	2a25      	cmp	r2, #37	@ 0x25
 801a274:	d1f9      	bne.n	801a26a <_vfiprintf_r+0x7a>
 801a276:	ebba 0b04 	subs.w	fp, sl, r4
 801a27a:	d00b      	beq.n	801a294 <_vfiprintf_r+0xa4>
 801a27c:	465b      	mov	r3, fp
 801a27e:	4622      	mov	r2, r4
 801a280:	4629      	mov	r1, r5
 801a282:	4630      	mov	r0, r6
 801a284:	f7ff ffa1 	bl	801a1ca <__sfputs_r>
 801a288:	3001      	adds	r0, #1
 801a28a:	f000 80a7 	beq.w	801a3dc <_vfiprintf_r+0x1ec>
 801a28e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a290:	445a      	add	r2, fp
 801a292:	9209      	str	r2, [sp, #36]	@ 0x24
 801a294:	f89a 3000 	ldrb.w	r3, [sl]
 801a298:	2b00      	cmp	r3, #0
 801a29a:	f000 809f 	beq.w	801a3dc <_vfiprintf_r+0x1ec>
 801a29e:	2300      	movs	r3, #0
 801a2a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a2a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a2a8:	f10a 0a01 	add.w	sl, sl, #1
 801a2ac:	9304      	str	r3, [sp, #16]
 801a2ae:	9307      	str	r3, [sp, #28]
 801a2b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801a2b4:	931a      	str	r3, [sp, #104]	@ 0x68
 801a2b6:	4654      	mov	r4, sl
 801a2b8:	2205      	movs	r2, #5
 801a2ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a2be:	4853      	ldr	r0, [pc, #332]	@ (801a40c <_vfiprintf_r+0x21c>)
 801a2c0:	f7e5 ffc6 	bl	8000250 <memchr>
 801a2c4:	9a04      	ldr	r2, [sp, #16]
 801a2c6:	b9d8      	cbnz	r0, 801a300 <_vfiprintf_r+0x110>
 801a2c8:	06d1      	lsls	r1, r2, #27
 801a2ca:	bf44      	itt	mi
 801a2cc:	2320      	movmi	r3, #32
 801a2ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a2d2:	0713      	lsls	r3, r2, #28
 801a2d4:	bf44      	itt	mi
 801a2d6:	232b      	movmi	r3, #43	@ 0x2b
 801a2d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a2dc:	f89a 3000 	ldrb.w	r3, [sl]
 801a2e0:	2b2a      	cmp	r3, #42	@ 0x2a
 801a2e2:	d015      	beq.n	801a310 <_vfiprintf_r+0x120>
 801a2e4:	9a07      	ldr	r2, [sp, #28]
 801a2e6:	4654      	mov	r4, sl
 801a2e8:	2000      	movs	r0, #0
 801a2ea:	f04f 0c0a 	mov.w	ip, #10
 801a2ee:	4621      	mov	r1, r4
 801a2f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a2f4:	3b30      	subs	r3, #48	@ 0x30
 801a2f6:	2b09      	cmp	r3, #9
 801a2f8:	d94b      	bls.n	801a392 <_vfiprintf_r+0x1a2>
 801a2fa:	b1b0      	cbz	r0, 801a32a <_vfiprintf_r+0x13a>
 801a2fc:	9207      	str	r2, [sp, #28]
 801a2fe:	e014      	b.n	801a32a <_vfiprintf_r+0x13a>
 801a300:	eba0 0308 	sub.w	r3, r0, r8
 801a304:	fa09 f303 	lsl.w	r3, r9, r3
 801a308:	4313      	orrs	r3, r2
 801a30a:	9304      	str	r3, [sp, #16]
 801a30c:	46a2      	mov	sl, r4
 801a30e:	e7d2      	b.n	801a2b6 <_vfiprintf_r+0xc6>
 801a310:	9b03      	ldr	r3, [sp, #12]
 801a312:	1d19      	adds	r1, r3, #4
 801a314:	681b      	ldr	r3, [r3, #0]
 801a316:	9103      	str	r1, [sp, #12]
 801a318:	2b00      	cmp	r3, #0
 801a31a:	bfbb      	ittet	lt
 801a31c:	425b      	neglt	r3, r3
 801a31e:	f042 0202 	orrlt.w	r2, r2, #2
 801a322:	9307      	strge	r3, [sp, #28]
 801a324:	9307      	strlt	r3, [sp, #28]
 801a326:	bfb8      	it	lt
 801a328:	9204      	strlt	r2, [sp, #16]
 801a32a:	7823      	ldrb	r3, [r4, #0]
 801a32c:	2b2e      	cmp	r3, #46	@ 0x2e
 801a32e:	d10a      	bne.n	801a346 <_vfiprintf_r+0x156>
 801a330:	7863      	ldrb	r3, [r4, #1]
 801a332:	2b2a      	cmp	r3, #42	@ 0x2a
 801a334:	d132      	bne.n	801a39c <_vfiprintf_r+0x1ac>
 801a336:	9b03      	ldr	r3, [sp, #12]
 801a338:	1d1a      	adds	r2, r3, #4
 801a33a:	681b      	ldr	r3, [r3, #0]
 801a33c:	9203      	str	r2, [sp, #12]
 801a33e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801a342:	3402      	adds	r4, #2
 801a344:	9305      	str	r3, [sp, #20]
 801a346:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801a41c <_vfiprintf_r+0x22c>
 801a34a:	7821      	ldrb	r1, [r4, #0]
 801a34c:	2203      	movs	r2, #3
 801a34e:	4650      	mov	r0, sl
 801a350:	f7e5 ff7e 	bl	8000250 <memchr>
 801a354:	b138      	cbz	r0, 801a366 <_vfiprintf_r+0x176>
 801a356:	9b04      	ldr	r3, [sp, #16]
 801a358:	eba0 000a 	sub.w	r0, r0, sl
 801a35c:	2240      	movs	r2, #64	@ 0x40
 801a35e:	4082      	lsls	r2, r0
 801a360:	4313      	orrs	r3, r2
 801a362:	3401      	adds	r4, #1
 801a364:	9304      	str	r3, [sp, #16]
 801a366:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a36a:	4829      	ldr	r0, [pc, #164]	@ (801a410 <_vfiprintf_r+0x220>)
 801a36c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801a370:	2206      	movs	r2, #6
 801a372:	f7e5 ff6d 	bl	8000250 <memchr>
 801a376:	2800      	cmp	r0, #0
 801a378:	d03f      	beq.n	801a3fa <_vfiprintf_r+0x20a>
 801a37a:	4b26      	ldr	r3, [pc, #152]	@ (801a414 <_vfiprintf_r+0x224>)
 801a37c:	bb1b      	cbnz	r3, 801a3c6 <_vfiprintf_r+0x1d6>
 801a37e:	9b03      	ldr	r3, [sp, #12]
 801a380:	3307      	adds	r3, #7
 801a382:	f023 0307 	bic.w	r3, r3, #7
 801a386:	3308      	adds	r3, #8
 801a388:	9303      	str	r3, [sp, #12]
 801a38a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a38c:	443b      	add	r3, r7
 801a38e:	9309      	str	r3, [sp, #36]	@ 0x24
 801a390:	e76a      	b.n	801a268 <_vfiprintf_r+0x78>
 801a392:	fb0c 3202 	mla	r2, ip, r2, r3
 801a396:	460c      	mov	r4, r1
 801a398:	2001      	movs	r0, #1
 801a39a:	e7a8      	b.n	801a2ee <_vfiprintf_r+0xfe>
 801a39c:	2300      	movs	r3, #0
 801a39e:	3401      	adds	r4, #1
 801a3a0:	9305      	str	r3, [sp, #20]
 801a3a2:	4619      	mov	r1, r3
 801a3a4:	f04f 0c0a 	mov.w	ip, #10
 801a3a8:	4620      	mov	r0, r4
 801a3aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a3ae:	3a30      	subs	r2, #48	@ 0x30
 801a3b0:	2a09      	cmp	r2, #9
 801a3b2:	d903      	bls.n	801a3bc <_vfiprintf_r+0x1cc>
 801a3b4:	2b00      	cmp	r3, #0
 801a3b6:	d0c6      	beq.n	801a346 <_vfiprintf_r+0x156>
 801a3b8:	9105      	str	r1, [sp, #20]
 801a3ba:	e7c4      	b.n	801a346 <_vfiprintf_r+0x156>
 801a3bc:	fb0c 2101 	mla	r1, ip, r1, r2
 801a3c0:	4604      	mov	r4, r0
 801a3c2:	2301      	movs	r3, #1
 801a3c4:	e7f0      	b.n	801a3a8 <_vfiprintf_r+0x1b8>
 801a3c6:	ab03      	add	r3, sp, #12
 801a3c8:	9300      	str	r3, [sp, #0]
 801a3ca:	462a      	mov	r2, r5
 801a3cc:	4b12      	ldr	r3, [pc, #72]	@ (801a418 <_vfiprintf_r+0x228>)
 801a3ce:	a904      	add	r1, sp, #16
 801a3d0:	4630      	mov	r0, r6
 801a3d2:	f3af 8000 	nop.w
 801a3d6:	4607      	mov	r7, r0
 801a3d8:	1c78      	adds	r0, r7, #1
 801a3da:	d1d6      	bne.n	801a38a <_vfiprintf_r+0x19a>
 801a3dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a3de:	07d9      	lsls	r1, r3, #31
 801a3e0:	d405      	bmi.n	801a3ee <_vfiprintf_r+0x1fe>
 801a3e2:	89ab      	ldrh	r3, [r5, #12]
 801a3e4:	059a      	lsls	r2, r3, #22
 801a3e6:	d402      	bmi.n	801a3ee <_vfiprintf_r+0x1fe>
 801a3e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a3ea:	f7ff fceb 	bl	8019dc4 <__retarget_lock_release_recursive>
 801a3ee:	89ab      	ldrh	r3, [r5, #12]
 801a3f0:	065b      	lsls	r3, r3, #25
 801a3f2:	f53f af1f 	bmi.w	801a234 <_vfiprintf_r+0x44>
 801a3f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a3f8:	e71e      	b.n	801a238 <_vfiprintf_r+0x48>
 801a3fa:	ab03      	add	r3, sp, #12
 801a3fc:	9300      	str	r3, [sp, #0]
 801a3fe:	462a      	mov	r2, r5
 801a400:	4b05      	ldr	r3, [pc, #20]	@ (801a418 <_vfiprintf_r+0x228>)
 801a402:	a904      	add	r1, sp, #16
 801a404:	4630      	mov	r0, r6
 801a406:	f000 f879 	bl	801a4fc <_printf_i>
 801a40a:	e7e4      	b.n	801a3d6 <_vfiprintf_r+0x1e6>
 801a40c:	0801cb2e 	.word	0x0801cb2e
 801a410:	0801cb38 	.word	0x0801cb38
 801a414:	00000000 	.word	0x00000000
 801a418:	0801a1cb 	.word	0x0801a1cb
 801a41c:	0801cb34 	.word	0x0801cb34

0801a420 <_printf_common>:
 801a420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a424:	4616      	mov	r6, r2
 801a426:	4698      	mov	r8, r3
 801a428:	688a      	ldr	r2, [r1, #8]
 801a42a:	690b      	ldr	r3, [r1, #16]
 801a42c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801a430:	4293      	cmp	r3, r2
 801a432:	bfb8      	it	lt
 801a434:	4613      	movlt	r3, r2
 801a436:	6033      	str	r3, [r6, #0]
 801a438:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801a43c:	4607      	mov	r7, r0
 801a43e:	460c      	mov	r4, r1
 801a440:	b10a      	cbz	r2, 801a446 <_printf_common+0x26>
 801a442:	3301      	adds	r3, #1
 801a444:	6033      	str	r3, [r6, #0]
 801a446:	6823      	ldr	r3, [r4, #0]
 801a448:	0699      	lsls	r1, r3, #26
 801a44a:	bf42      	ittt	mi
 801a44c:	6833      	ldrmi	r3, [r6, #0]
 801a44e:	3302      	addmi	r3, #2
 801a450:	6033      	strmi	r3, [r6, #0]
 801a452:	6825      	ldr	r5, [r4, #0]
 801a454:	f015 0506 	ands.w	r5, r5, #6
 801a458:	d106      	bne.n	801a468 <_printf_common+0x48>
 801a45a:	f104 0a19 	add.w	sl, r4, #25
 801a45e:	68e3      	ldr	r3, [r4, #12]
 801a460:	6832      	ldr	r2, [r6, #0]
 801a462:	1a9b      	subs	r3, r3, r2
 801a464:	42ab      	cmp	r3, r5
 801a466:	dc26      	bgt.n	801a4b6 <_printf_common+0x96>
 801a468:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801a46c:	6822      	ldr	r2, [r4, #0]
 801a46e:	3b00      	subs	r3, #0
 801a470:	bf18      	it	ne
 801a472:	2301      	movne	r3, #1
 801a474:	0692      	lsls	r2, r2, #26
 801a476:	d42b      	bmi.n	801a4d0 <_printf_common+0xb0>
 801a478:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801a47c:	4641      	mov	r1, r8
 801a47e:	4638      	mov	r0, r7
 801a480:	47c8      	blx	r9
 801a482:	3001      	adds	r0, #1
 801a484:	d01e      	beq.n	801a4c4 <_printf_common+0xa4>
 801a486:	6823      	ldr	r3, [r4, #0]
 801a488:	6922      	ldr	r2, [r4, #16]
 801a48a:	f003 0306 	and.w	r3, r3, #6
 801a48e:	2b04      	cmp	r3, #4
 801a490:	bf02      	ittt	eq
 801a492:	68e5      	ldreq	r5, [r4, #12]
 801a494:	6833      	ldreq	r3, [r6, #0]
 801a496:	1aed      	subeq	r5, r5, r3
 801a498:	68a3      	ldr	r3, [r4, #8]
 801a49a:	bf0c      	ite	eq
 801a49c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a4a0:	2500      	movne	r5, #0
 801a4a2:	4293      	cmp	r3, r2
 801a4a4:	bfc4      	itt	gt
 801a4a6:	1a9b      	subgt	r3, r3, r2
 801a4a8:	18ed      	addgt	r5, r5, r3
 801a4aa:	2600      	movs	r6, #0
 801a4ac:	341a      	adds	r4, #26
 801a4ae:	42b5      	cmp	r5, r6
 801a4b0:	d11a      	bne.n	801a4e8 <_printf_common+0xc8>
 801a4b2:	2000      	movs	r0, #0
 801a4b4:	e008      	b.n	801a4c8 <_printf_common+0xa8>
 801a4b6:	2301      	movs	r3, #1
 801a4b8:	4652      	mov	r2, sl
 801a4ba:	4641      	mov	r1, r8
 801a4bc:	4638      	mov	r0, r7
 801a4be:	47c8      	blx	r9
 801a4c0:	3001      	adds	r0, #1
 801a4c2:	d103      	bne.n	801a4cc <_printf_common+0xac>
 801a4c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a4c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a4cc:	3501      	adds	r5, #1
 801a4ce:	e7c6      	b.n	801a45e <_printf_common+0x3e>
 801a4d0:	18e1      	adds	r1, r4, r3
 801a4d2:	1c5a      	adds	r2, r3, #1
 801a4d4:	2030      	movs	r0, #48	@ 0x30
 801a4d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801a4da:	4422      	add	r2, r4
 801a4dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801a4e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801a4e4:	3302      	adds	r3, #2
 801a4e6:	e7c7      	b.n	801a478 <_printf_common+0x58>
 801a4e8:	2301      	movs	r3, #1
 801a4ea:	4622      	mov	r2, r4
 801a4ec:	4641      	mov	r1, r8
 801a4ee:	4638      	mov	r0, r7
 801a4f0:	47c8      	blx	r9
 801a4f2:	3001      	adds	r0, #1
 801a4f4:	d0e6      	beq.n	801a4c4 <_printf_common+0xa4>
 801a4f6:	3601      	adds	r6, #1
 801a4f8:	e7d9      	b.n	801a4ae <_printf_common+0x8e>
	...

0801a4fc <_printf_i>:
 801a4fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a500:	7e0f      	ldrb	r7, [r1, #24]
 801a502:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801a504:	2f78      	cmp	r7, #120	@ 0x78
 801a506:	4691      	mov	r9, r2
 801a508:	4680      	mov	r8, r0
 801a50a:	460c      	mov	r4, r1
 801a50c:	469a      	mov	sl, r3
 801a50e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801a512:	d807      	bhi.n	801a524 <_printf_i+0x28>
 801a514:	2f62      	cmp	r7, #98	@ 0x62
 801a516:	d80a      	bhi.n	801a52e <_printf_i+0x32>
 801a518:	2f00      	cmp	r7, #0
 801a51a:	f000 80d2 	beq.w	801a6c2 <_printf_i+0x1c6>
 801a51e:	2f58      	cmp	r7, #88	@ 0x58
 801a520:	f000 80b9 	beq.w	801a696 <_printf_i+0x19a>
 801a524:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a528:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801a52c:	e03a      	b.n	801a5a4 <_printf_i+0xa8>
 801a52e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801a532:	2b15      	cmp	r3, #21
 801a534:	d8f6      	bhi.n	801a524 <_printf_i+0x28>
 801a536:	a101      	add	r1, pc, #4	@ (adr r1, 801a53c <_printf_i+0x40>)
 801a538:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a53c:	0801a595 	.word	0x0801a595
 801a540:	0801a5a9 	.word	0x0801a5a9
 801a544:	0801a525 	.word	0x0801a525
 801a548:	0801a525 	.word	0x0801a525
 801a54c:	0801a525 	.word	0x0801a525
 801a550:	0801a525 	.word	0x0801a525
 801a554:	0801a5a9 	.word	0x0801a5a9
 801a558:	0801a525 	.word	0x0801a525
 801a55c:	0801a525 	.word	0x0801a525
 801a560:	0801a525 	.word	0x0801a525
 801a564:	0801a525 	.word	0x0801a525
 801a568:	0801a6a9 	.word	0x0801a6a9
 801a56c:	0801a5d3 	.word	0x0801a5d3
 801a570:	0801a663 	.word	0x0801a663
 801a574:	0801a525 	.word	0x0801a525
 801a578:	0801a525 	.word	0x0801a525
 801a57c:	0801a6cb 	.word	0x0801a6cb
 801a580:	0801a525 	.word	0x0801a525
 801a584:	0801a5d3 	.word	0x0801a5d3
 801a588:	0801a525 	.word	0x0801a525
 801a58c:	0801a525 	.word	0x0801a525
 801a590:	0801a66b 	.word	0x0801a66b
 801a594:	6833      	ldr	r3, [r6, #0]
 801a596:	1d1a      	adds	r2, r3, #4
 801a598:	681b      	ldr	r3, [r3, #0]
 801a59a:	6032      	str	r2, [r6, #0]
 801a59c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a5a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801a5a4:	2301      	movs	r3, #1
 801a5a6:	e09d      	b.n	801a6e4 <_printf_i+0x1e8>
 801a5a8:	6833      	ldr	r3, [r6, #0]
 801a5aa:	6820      	ldr	r0, [r4, #0]
 801a5ac:	1d19      	adds	r1, r3, #4
 801a5ae:	6031      	str	r1, [r6, #0]
 801a5b0:	0606      	lsls	r6, r0, #24
 801a5b2:	d501      	bpl.n	801a5b8 <_printf_i+0xbc>
 801a5b4:	681d      	ldr	r5, [r3, #0]
 801a5b6:	e003      	b.n	801a5c0 <_printf_i+0xc4>
 801a5b8:	0645      	lsls	r5, r0, #25
 801a5ba:	d5fb      	bpl.n	801a5b4 <_printf_i+0xb8>
 801a5bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 801a5c0:	2d00      	cmp	r5, #0
 801a5c2:	da03      	bge.n	801a5cc <_printf_i+0xd0>
 801a5c4:	232d      	movs	r3, #45	@ 0x2d
 801a5c6:	426d      	negs	r5, r5
 801a5c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a5cc:	4859      	ldr	r0, [pc, #356]	@ (801a734 <_printf_i+0x238>)
 801a5ce:	230a      	movs	r3, #10
 801a5d0:	e011      	b.n	801a5f6 <_printf_i+0xfa>
 801a5d2:	6821      	ldr	r1, [r4, #0]
 801a5d4:	6833      	ldr	r3, [r6, #0]
 801a5d6:	0608      	lsls	r0, r1, #24
 801a5d8:	f853 5b04 	ldr.w	r5, [r3], #4
 801a5dc:	d402      	bmi.n	801a5e4 <_printf_i+0xe8>
 801a5de:	0649      	lsls	r1, r1, #25
 801a5e0:	bf48      	it	mi
 801a5e2:	b2ad      	uxthmi	r5, r5
 801a5e4:	2f6f      	cmp	r7, #111	@ 0x6f
 801a5e6:	4853      	ldr	r0, [pc, #332]	@ (801a734 <_printf_i+0x238>)
 801a5e8:	6033      	str	r3, [r6, #0]
 801a5ea:	bf14      	ite	ne
 801a5ec:	230a      	movne	r3, #10
 801a5ee:	2308      	moveq	r3, #8
 801a5f0:	2100      	movs	r1, #0
 801a5f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801a5f6:	6866      	ldr	r6, [r4, #4]
 801a5f8:	60a6      	str	r6, [r4, #8]
 801a5fa:	2e00      	cmp	r6, #0
 801a5fc:	bfa2      	ittt	ge
 801a5fe:	6821      	ldrge	r1, [r4, #0]
 801a600:	f021 0104 	bicge.w	r1, r1, #4
 801a604:	6021      	strge	r1, [r4, #0]
 801a606:	b90d      	cbnz	r5, 801a60c <_printf_i+0x110>
 801a608:	2e00      	cmp	r6, #0
 801a60a:	d04b      	beq.n	801a6a4 <_printf_i+0x1a8>
 801a60c:	4616      	mov	r6, r2
 801a60e:	fbb5 f1f3 	udiv	r1, r5, r3
 801a612:	fb03 5711 	mls	r7, r3, r1, r5
 801a616:	5dc7      	ldrb	r7, [r0, r7]
 801a618:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a61c:	462f      	mov	r7, r5
 801a61e:	42bb      	cmp	r3, r7
 801a620:	460d      	mov	r5, r1
 801a622:	d9f4      	bls.n	801a60e <_printf_i+0x112>
 801a624:	2b08      	cmp	r3, #8
 801a626:	d10b      	bne.n	801a640 <_printf_i+0x144>
 801a628:	6823      	ldr	r3, [r4, #0]
 801a62a:	07df      	lsls	r7, r3, #31
 801a62c:	d508      	bpl.n	801a640 <_printf_i+0x144>
 801a62e:	6923      	ldr	r3, [r4, #16]
 801a630:	6861      	ldr	r1, [r4, #4]
 801a632:	4299      	cmp	r1, r3
 801a634:	bfde      	ittt	le
 801a636:	2330      	movle	r3, #48	@ 0x30
 801a638:	f806 3c01 	strble.w	r3, [r6, #-1]
 801a63c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801a640:	1b92      	subs	r2, r2, r6
 801a642:	6122      	str	r2, [r4, #16]
 801a644:	f8cd a000 	str.w	sl, [sp]
 801a648:	464b      	mov	r3, r9
 801a64a:	aa03      	add	r2, sp, #12
 801a64c:	4621      	mov	r1, r4
 801a64e:	4640      	mov	r0, r8
 801a650:	f7ff fee6 	bl	801a420 <_printf_common>
 801a654:	3001      	adds	r0, #1
 801a656:	d14a      	bne.n	801a6ee <_printf_i+0x1f2>
 801a658:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a65c:	b004      	add	sp, #16
 801a65e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a662:	6823      	ldr	r3, [r4, #0]
 801a664:	f043 0320 	orr.w	r3, r3, #32
 801a668:	6023      	str	r3, [r4, #0]
 801a66a:	4833      	ldr	r0, [pc, #204]	@ (801a738 <_printf_i+0x23c>)
 801a66c:	2778      	movs	r7, #120	@ 0x78
 801a66e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801a672:	6823      	ldr	r3, [r4, #0]
 801a674:	6831      	ldr	r1, [r6, #0]
 801a676:	061f      	lsls	r7, r3, #24
 801a678:	f851 5b04 	ldr.w	r5, [r1], #4
 801a67c:	d402      	bmi.n	801a684 <_printf_i+0x188>
 801a67e:	065f      	lsls	r7, r3, #25
 801a680:	bf48      	it	mi
 801a682:	b2ad      	uxthmi	r5, r5
 801a684:	6031      	str	r1, [r6, #0]
 801a686:	07d9      	lsls	r1, r3, #31
 801a688:	bf44      	itt	mi
 801a68a:	f043 0320 	orrmi.w	r3, r3, #32
 801a68e:	6023      	strmi	r3, [r4, #0]
 801a690:	b11d      	cbz	r5, 801a69a <_printf_i+0x19e>
 801a692:	2310      	movs	r3, #16
 801a694:	e7ac      	b.n	801a5f0 <_printf_i+0xf4>
 801a696:	4827      	ldr	r0, [pc, #156]	@ (801a734 <_printf_i+0x238>)
 801a698:	e7e9      	b.n	801a66e <_printf_i+0x172>
 801a69a:	6823      	ldr	r3, [r4, #0]
 801a69c:	f023 0320 	bic.w	r3, r3, #32
 801a6a0:	6023      	str	r3, [r4, #0]
 801a6a2:	e7f6      	b.n	801a692 <_printf_i+0x196>
 801a6a4:	4616      	mov	r6, r2
 801a6a6:	e7bd      	b.n	801a624 <_printf_i+0x128>
 801a6a8:	6833      	ldr	r3, [r6, #0]
 801a6aa:	6825      	ldr	r5, [r4, #0]
 801a6ac:	6961      	ldr	r1, [r4, #20]
 801a6ae:	1d18      	adds	r0, r3, #4
 801a6b0:	6030      	str	r0, [r6, #0]
 801a6b2:	062e      	lsls	r6, r5, #24
 801a6b4:	681b      	ldr	r3, [r3, #0]
 801a6b6:	d501      	bpl.n	801a6bc <_printf_i+0x1c0>
 801a6b8:	6019      	str	r1, [r3, #0]
 801a6ba:	e002      	b.n	801a6c2 <_printf_i+0x1c6>
 801a6bc:	0668      	lsls	r0, r5, #25
 801a6be:	d5fb      	bpl.n	801a6b8 <_printf_i+0x1bc>
 801a6c0:	8019      	strh	r1, [r3, #0]
 801a6c2:	2300      	movs	r3, #0
 801a6c4:	6123      	str	r3, [r4, #16]
 801a6c6:	4616      	mov	r6, r2
 801a6c8:	e7bc      	b.n	801a644 <_printf_i+0x148>
 801a6ca:	6833      	ldr	r3, [r6, #0]
 801a6cc:	1d1a      	adds	r2, r3, #4
 801a6ce:	6032      	str	r2, [r6, #0]
 801a6d0:	681e      	ldr	r6, [r3, #0]
 801a6d2:	6862      	ldr	r2, [r4, #4]
 801a6d4:	2100      	movs	r1, #0
 801a6d6:	4630      	mov	r0, r6
 801a6d8:	f7e5 fdba 	bl	8000250 <memchr>
 801a6dc:	b108      	cbz	r0, 801a6e2 <_printf_i+0x1e6>
 801a6de:	1b80      	subs	r0, r0, r6
 801a6e0:	6060      	str	r0, [r4, #4]
 801a6e2:	6863      	ldr	r3, [r4, #4]
 801a6e4:	6123      	str	r3, [r4, #16]
 801a6e6:	2300      	movs	r3, #0
 801a6e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a6ec:	e7aa      	b.n	801a644 <_printf_i+0x148>
 801a6ee:	6923      	ldr	r3, [r4, #16]
 801a6f0:	4632      	mov	r2, r6
 801a6f2:	4649      	mov	r1, r9
 801a6f4:	4640      	mov	r0, r8
 801a6f6:	47d0      	blx	sl
 801a6f8:	3001      	adds	r0, #1
 801a6fa:	d0ad      	beq.n	801a658 <_printf_i+0x15c>
 801a6fc:	6823      	ldr	r3, [r4, #0]
 801a6fe:	079b      	lsls	r3, r3, #30
 801a700:	d413      	bmi.n	801a72a <_printf_i+0x22e>
 801a702:	68e0      	ldr	r0, [r4, #12]
 801a704:	9b03      	ldr	r3, [sp, #12]
 801a706:	4298      	cmp	r0, r3
 801a708:	bfb8      	it	lt
 801a70a:	4618      	movlt	r0, r3
 801a70c:	e7a6      	b.n	801a65c <_printf_i+0x160>
 801a70e:	2301      	movs	r3, #1
 801a710:	4632      	mov	r2, r6
 801a712:	4649      	mov	r1, r9
 801a714:	4640      	mov	r0, r8
 801a716:	47d0      	blx	sl
 801a718:	3001      	adds	r0, #1
 801a71a:	d09d      	beq.n	801a658 <_printf_i+0x15c>
 801a71c:	3501      	adds	r5, #1
 801a71e:	68e3      	ldr	r3, [r4, #12]
 801a720:	9903      	ldr	r1, [sp, #12]
 801a722:	1a5b      	subs	r3, r3, r1
 801a724:	42ab      	cmp	r3, r5
 801a726:	dcf2      	bgt.n	801a70e <_printf_i+0x212>
 801a728:	e7eb      	b.n	801a702 <_printf_i+0x206>
 801a72a:	2500      	movs	r5, #0
 801a72c:	f104 0619 	add.w	r6, r4, #25
 801a730:	e7f5      	b.n	801a71e <_printf_i+0x222>
 801a732:	bf00      	nop
 801a734:	0801cb3f 	.word	0x0801cb3f
 801a738:	0801cb50 	.word	0x0801cb50

0801a73c <__sflush_r>:
 801a73c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801a740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a744:	0716      	lsls	r6, r2, #28
 801a746:	4605      	mov	r5, r0
 801a748:	460c      	mov	r4, r1
 801a74a:	d454      	bmi.n	801a7f6 <__sflush_r+0xba>
 801a74c:	684b      	ldr	r3, [r1, #4]
 801a74e:	2b00      	cmp	r3, #0
 801a750:	dc02      	bgt.n	801a758 <__sflush_r+0x1c>
 801a752:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801a754:	2b00      	cmp	r3, #0
 801a756:	dd48      	ble.n	801a7ea <__sflush_r+0xae>
 801a758:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a75a:	2e00      	cmp	r6, #0
 801a75c:	d045      	beq.n	801a7ea <__sflush_r+0xae>
 801a75e:	2300      	movs	r3, #0
 801a760:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801a764:	682f      	ldr	r7, [r5, #0]
 801a766:	6a21      	ldr	r1, [r4, #32]
 801a768:	602b      	str	r3, [r5, #0]
 801a76a:	d030      	beq.n	801a7ce <__sflush_r+0x92>
 801a76c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801a76e:	89a3      	ldrh	r3, [r4, #12]
 801a770:	0759      	lsls	r1, r3, #29
 801a772:	d505      	bpl.n	801a780 <__sflush_r+0x44>
 801a774:	6863      	ldr	r3, [r4, #4]
 801a776:	1ad2      	subs	r2, r2, r3
 801a778:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801a77a:	b10b      	cbz	r3, 801a780 <__sflush_r+0x44>
 801a77c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801a77e:	1ad2      	subs	r2, r2, r3
 801a780:	2300      	movs	r3, #0
 801a782:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a784:	6a21      	ldr	r1, [r4, #32]
 801a786:	4628      	mov	r0, r5
 801a788:	47b0      	blx	r6
 801a78a:	1c43      	adds	r3, r0, #1
 801a78c:	89a3      	ldrh	r3, [r4, #12]
 801a78e:	d106      	bne.n	801a79e <__sflush_r+0x62>
 801a790:	6829      	ldr	r1, [r5, #0]
 801a792:	291d      	cmp	r1, #29
 801a794:	d82b      	bhi.n	801a7ee <__sflush_r+0xb2>
 801a796:	4a2a      	ldr	r2, [pc, #168]	@ (801a840 <__sflush_r+0x104>)
 801a798:	410a      	asrs	r2, r1
 801a79a:	07d6      	lsls	r6, r2, #31
 801a79c:	d427      	bmi.n	801a7ee <__sflush_r+0xb2>
 801a79e:	2200      	movs	r2, #0
 801a7a0:	6062      	str	r2, [r4, #4]
 801a7a2:	04d9      	lsls	r1, r3, #19
 801a7a4:	6922      	ldr	r2, [r4, #16]
 801a7a6:	6022      	str	r2, [r4, #0]
 801a7a8:	d504      	bpl.n	801a7b4 <__sflush_r+0x78>
 801a7aa:	1c42      	adds	r2, r0, #1
 801a7ac:	d101      	bne.n	801a7b2 <__sflush_r+0x76>
 801a7ae:	682b      	ldr	r3, [r5, #0]
 801a7b0:	b903      	cbnz	r3, 801a7b4 <__sflush_r+0x78>
 801a7b2:	6560      	str	r0, [r4, #84]	@ 0x54
 801a7b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a7b6:	602f      	str	r7, [r5, #0]
 801a7b8:	b1b9      	cbz	r1, 801a7ea <__sflush_r+0xae>
 801a7ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a7be:	4299      	cmp	r1, r3
 801a7c0:	d002      	beq.n	801a7c8 <__sflush_r+0x8c>
 801a7c2:	4628      	mov	r0, r5
 801a7c4:	f7ff fb40 	bl	8019e48 <_free_r>
 801a7c8:	2300      	movs	r3, #0
 801a7ca:	6363      	str	r3, [r4, #52]	@ 0x34
 801a7cc:	e00d      	b.n	801a7ea <__sflush_r+0xae>
 801a7ce:	2301      	movs	r3, #1
 801a7d0:	4628      	mov	r0, r5
 801a7d2:	47b0      	blx	r6
 801a7d4:	4602      	mov	r2, r0
 801a7d6:	1c50      	adds	r0, r2, #1
 801a7d8:	d1c9      	bne.n	801a76e <__sflush_r+0x32>
 801a7da:	682b      	ldr	r3, [r5, #0]
 801a7dc:	2b00      	cmp	r3, #0
 801a7de:	d0c6      	beq.n	801a76e <__sflush_r+0x32>
 801a7e0:	2b1d      	cmp	r3, #29
 801a7e2:	d001      	beq.n	801a7e8 <__sflush_r+0xac>
 801a7e4:	2b16      	cmp	r3, #22
 801a7e6:	d11e      	bne.n	801a826 <__sflush_r+0xea>
 801a7e8:	602f      	str	r7, [r5, #0]
 801a7ea:	2000      	movs	r0, #0
 801a7ec:	e022      	b.n	801a834 <__sflush_r+0xf8>
 801a7ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a7f2:	b21b      	sxth	r3, r3
 801a7f4:	e01b      	b.n	801a82e <__sflush_r+0xf2>
 801a7f6:	690f      	ldr	r7, [r1, #16]
 801a7f8:	2f00      	cmp	r7, #0
 801a7fa:	d0f6      	beq.n	801a7ea <__sflush_r+0xae>
 801a7fc:	0793      	lsls	r3, r2, #30
 801a7fe:	680e      	ldr	r6, [r1, #0]
 801a800:	bf08      	it	eq
 801a802:	694b      	ldreq	r3, [r1, #20]
 801a804:	600f      	str	r7, [r1, #0]
 801a806:	bf18      	it	ne
 801a808:	2300      	movne	r3, #0
 801a80a:	eba6 0807 	sub.w	r8, r6, r7
 801a80e:	608b      	str	r3, [r1, #8]
 801a810:	f1b8 0f00 	cmp.w	r8, #0
 801a814:	dde9      	ble.n	801a7ea <__sflush_r+0xae>
 801a816:	6a21      	ldr	r1, [r4, #32]
 801a818:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801a81a:	4643      	mov	r3, r8
 801a81c:	463a      	mov	r2, r7
 801a81e:	4628      	mov	r0, r5
 801a820:	47b0      	blx	r6
 801a822:	2800      	cmp	r0, #0
 801a824:	dc08      	bgt.n	801a838 <__sflush_r+0xfc>
 801a826:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a82a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a82e:	81a3      	strh	r3, [r4, #12]
 801a830:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a838:	4407      	add	r7, r0
 801a83a:	eba8 0800 	sub.w	r8, r8, r0
 801a83e:	e7e7      	b.n	801a810 <__sflush_r+0xd4>
 801a840:	dfbffffe 	.word	0xdfbffffe

0801a844 <_fflush_r>:
 801a844:	b538      	push	{r3, r4, r5, lr}
 801a846:	690b      	ldr	r3, [r1, #16]
 801a848:	4605      	mov	r5, r0
 801a84a:	460c      	mov	r4, r1
 801a84c:	b913      	cbnz	r3, 801a854 <_fflush_r+0x10>
 801a84e:	2500      	movs	r5, #0
 801a850:	4628      	mov	r0, r5
 801a852:	bd38      	pop	{r3, r4, r5, pc}
 801a854:	b118      	cbz	r0, 801a85e <_fflush_r+0x1a>
 801a856:	6a03      	ldr	r3, [r0, #32]
 801a858:	b90b      	cbnz	r3, 801a85e <_fflush_r+0x1a>
 801a85a:	f7fe ffe3 	bl	8019824 <__sinit>
 801a85e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a862:	2b00      	cmp	r3, #0
 801a864:	d0f3      	beq.n	801a84e <_fflush_r+0xa>
 801a866:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801a868:	07d0      	lsls	r0, r2, #31
 801a86a:	d404      	bmi.n	801a876 <_fflush_r+0x32>
 801a86c:	0599      	lsls	r1, r3, #22
 801a86e:	d402      	bmi.n	801a876 <_fflush_r+0x32>
 801a870:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a872:	f7ff faa6 	bl	8019dc2 <__retarget_lock_acquire_recursive>
 801a876:	4628      	mov	r0, r5
 801a878:	4621      	mov	r1, r4
 801a87a:	f7ff ff5f 	bl	801a73c <__sflush_r>
 801a87e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a880:	07da      	lsls	r2, r3, #31
 801a882:	4605      	mov	r5, r0
 801a884:	d4e4      	bmi.n	801a850 <_fflush_r+0xc>
 801a886:	89a3      	ldrh	r3, [r4, #12]
 801a888:	059b      	lsls	r3, r3, #22
 801a88a:	d4e1      	bmi.n	801a850 <_fflush_r+0xc>
 801a88c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a88e:	f7ff fa99 	bl	8019dc4 <__retarget_lock_release_recursive>
 801a892:	e7dd      	b.n	801a850 <_fflush_r+0xc>

0801a894 <fiprintf>:
 801a894:	b40e      	push	{r1, r2, r3}
 801a896:	b503      	push	{r0, r1, lr}
 801a898:	4601      	mov	r1, r0
 801a89a:	ab03      	add	r3, sp, #12
 801a89c:	4805      	ldr	r0, [pc, #20]	@ (801a8b4 <fiprintf+0x20>)
 801a89e:	f853 2b04 	ldr.w	r2, [r3], #4
 801a8a2:	6800      	ldr	r0, [r0, #0]
 801a8a4:	9301      	str	r3, [sp, #4]
 801a8a6:	f7ff fca3 	bl	801a1f0 <_vfiprintf_r>
 801a8aa:	b002      	add	sp, #8
 801a8ac:	f85d eb04 	ldr.w	lr, [sp], #4
 801a8b0:	b003      	add	sp, #12
 801a8b2:	4770      	bx	lr
 801a8b4:	200009fc 	.word	0x200009fc

0801a8b8 <__swhatbuf_r>:
 801a8b8:	b570      	push	{r4, r5, r6, lr}
 801a8ba:	460c      	mov	r4, r1
 801a8bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a8c0:	2900      	cmp	r1, #0
 801a8c2:	b096      	sub	sp, #88	@ 0x58
 801a8c4:	4615      	mov	r5, r2
 801a8c6:	461e      	mov	r6, r3
 801a8c8:	da0d      	bge.n	801a8e6 <__swhatbuf_r+0x2e>
 801a8ca:	89a3      	ldrh	r3, [r4, #12]
 801a8cc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801a8d0:	f04f 0100 	mov.w	r1, #0
 801a8d4:	bf14      	ite	ne
 801a8d6:	2340      	movne	r3, #64	@ 0x40
 801a8d8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801a8dc:	2000      	movs	r0, #0
 801a8de:	6031      	str	r1, [r6, #0]
 801a8e0:	602b      	str	r3, [r5, #0]
 801a8e2:	b016      	add	sp, #88	@ 0x58
 801a8e4:	bd70      	pop	{r4, r5, r6, pc}
 801a8e6:	466a      	mov	r2, sp
 801a8e8:	f000 f848 	bl	801a97c <_fstat_r>
 801a8ec:	2800      	cmp	r0, #0
 801a8ee:	dbec      	blt.n	801a8ca <__swhatbuf_r+0x12>
 801a8f0:	9901      	ldr	r1, [sp, #4]
 801a8f2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801a8f6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801a8fa:	4259      	negs	r1, r3
 801a8fc:	4159      	adcs	r1, r3
 801a8fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801a902:	e7eb      	b.n	801a8dc <__swhatbuf_r+0x24>

0801a904 <__smakebuf_r>:
 801a904:	898b      	ldrh	r3, [r1, #12]
 801a906:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a908:	079d      	lsls	r5, r3, #30
 801a90a:	4606      	mov	r6, r0
 801a90c:	460c      	mov	r4, r1
 801a90e:	d507      	bpl.n	801a920 <__smakebuf_r+0x1c>
 801a910:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801a914:	6023      	str	r3, [r4, #0]
 801a916:	6123      	str	r3, [r4, #16]
 801a918:	2301      	movs	r3, #1
 801a91a:	6163      	str	r3, [r4, #20]
 801a91c:	b003      	add	sp, #12
 801a91e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a920:	ab01      	add	r3, sp, #4
 801a922:	466a      	mov	r2, sp
 801a924:	f7ff ffc8 	bl	801a8b8 <__swhatbuf_r>
 801a928:	9f00      	ldr	r7, [sp, #0]
 801a92a:	4605      	mov	r5, r0
 801a92c:	4639      	mov	r1, r7
 801a92e:	4630      	mov	r0, r6
 801a930:	f7fe fd46 	bl	80193c0 <_malloc_r>
 801a934:	b948      	cbnz	r0, 801a94a <__smakebuf_r+0x46>
 801a936:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a93a:	059a      	lsls	r2, r3, #22
 801a93c:	d4ee      	bmi.n	801a91c <__smakebuf_r+0x18>
 801a93e:	f023 0303 	bic.w	r3, r3, #3
 801a942:	f043 0302 	orr.w	r3, r3, #2
 801a946:	81a3      	strh	r3, [r4, #12]
 801a948:	e7e2      	b.n	801a910 <__smakebuf_r+0xc>
 801a94a:	89a3      	ldrh	r3, [r4, #12]
 801a94c:	6020      	str	r0, [r4, #0]
 801a94e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a952:	81a3      	strh	r3, [r4, #12]
 801a954:	9b01      	ldr	r3, [sp, #4]
 801a956:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801a95a:	b15b      	cbz	r3, 801a974 <__smakebuf_r+0x70>
 801a95c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a960:	4630      	mov	r0, r6
 801a962:	f000 f81d 	bl	801a9a0 <_isatty_r>
 801a966:	b128      	cbz	r0, 801a974 <__smakebuf_r+0x70>
 801a968:	89a3      	ldrh	r3, [r4, #12]
 801a96a:	f023 0303 	bic.w	r3, r3, #3
 801a96e:	f043 0301 	orr.w	r3, r3, #1
 801a972:	81a3      	strh	r3, [r4, #12]
 801a974:	89a3      	ldrh	r3, [r4, #12]
 801a976:	431d      	orrs	r5, r3
 801a978:	81a5      	strh	r5, [r4, #12]
 801a97a:	e7cf      	b.n	801a91c <__smakebuf_r+0x18>

0801a97c <_fstat_r>:
 801a97c:	b538      	push	{r3, r4, r5, lr}
 801a97e:	4d07      	ldr	r5, [pc, #28]	@ (801a99c <_fstat_r+0x20>)
 801a980:	2300      	movs	r3, #0
 801a982:	4604      	mov	r4, r0
 801a984:	4608      	mov	r0, r1
 801a986:	4611      	mov	r1, r2
 801a988:	602b      	str	r3, [r5, #0]
 801a98a:	f7e8 f923 	bl	8002bd4 <_fstat>
 801a98e:	1c43      	adds	r3, r0, #1
 801a990:	d102      	bne.n	801a998 <_fstat_r+0x1c>
 801a992:	682b      	ldr	r3, [r5, #0]
 801a994:	b103      	cbz	r3, 801a998 <_fstat_r+0x1c>
 801a996:	6023      	str	r3, [r4, #0]
 801a998:	bd38      	pop	{r3, r4, r5, pc}
 801a99a:	bf00      	nop
 801a99c:	2000bd1c 	.word	0x2000bd1c

0801a9a0 <_isatty_r>:
 801a9a0:	b538      	push	{r3, r4, r5, lr}
 801a9a2:	4d06      	ldr	r5, [pc, #24]	@ (801a9bc <_isatty_r+0x1c>)
 801a9a4:	2300      	movs	r3, #0
 801a9a6:	4604      	mov	r4, r0
 801a9a8:	4608      	mov	r0, r1
 801a9aa:	602b      	str	r3, [r5, #0]
 801a9ac:	f7e8 f922 	bl	8002bf4 <_isatty>
 801a9b0:	1c43      	adds	r3, r0, #1
 801a9b2:	d102      	bne.n	801a9ba <_isatty_r+0x1a>
 801a9b4:	682b      	ldr	r3, [r5, #0]
 801a9b6:	b103      	cbz	r3, 801a9ba <_isatty_r+0x1a>
 801a9b8:	6023      	str	r3, [r4, #0]
 801a9ba:	bd38      	pop	{r3, r4, r5, pc}
 801a9bc:	2000bd1c 	.word	0x2000bd1c

0801a9c0 <abort>:
 801a9c0:	b508      	push	{r3, lr}
 801a9c2:	2006      	movs	r0, #6
 801a9c4:	f000 f82c 	bl	801aa20 <raise>
 801a9c8:	2001      	movs	r0, #1
 801a9ca:	f7e8 f8b3 	bl	8002b34 <_exit>

0801a9ce <_raise_r>:
 801a9ce:	291f      	cmp	r1, #31
 801a9d0:	b538      	push	{r3, r4, r5, lr}
 801a9d2:	4605      	mov	r5, r0
 801a9d4:	460c      	mov	r4, r1
 801a9d6:	d904      	bls.n	801a9e2 <_raise_r+0x14>
 801a9d8:	2316      	movs	r3, #22
 801a9da:	6003      	str	r3, [r0, #0]
 801a9dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a9e0:	bd38      	pop	{r3, r4, r5, pc}
 801a9e2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801a9e4:	b112      	cbz	r2, 801a9ec <_raise_r+0x1e>
 801a9e6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a9ea:	b94b      	cbnz	r3, 801aa00 <_raise_r+0x32>
 801a9ec:	4628      	mov	r0, r5
 801a9ee:	f000 f831 	bl	801aa54 <_getpid_r>
 801a9f2:	4622      	mov	r2, r4
 801a9f4:	4601      	mov	r1, r0
 801a9f6:	4628      	mov	r0, r5
 801a9f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a9fc:	f000 b818 	b.w	801aa30 <_kill_r>
 801aa00:	2b01      	cmp	r3, #1
 801aa02:	d00a      	beq.n	801aa1a <_raise_r+0x4c>
 801aa04:	1c59      	adds	r1, r3, #1
 801aa06:	d103      	bne.n	801aa10 <_raise_r+0x42>
 801aa08:	2316      	movs	r3, #22
 801aa0a:	6003      	str	r3, [r0, #0]
 801aa0c:	2001      	movs	r0, #1
 801aa0e:	e7e7      	b.n	801a9e0 <_raise_r+0x12>
 801aa10:	2100      	movs	r1, #0
 801aa12:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801aa16:	4620      	mov	r0, r4
 801aa18:	4798      	blx	r3
 801aa1a:	2000      	movs	r0, #0
 801aa1c:	e7e0      	b.n	801a9e0 <_raise_r+0x12>
	...

0801aa20 <raise>:
 801aa20:	4b02      	ldr	r3, [pc, #8]	@ (801aa2c <raise+0xc>)
 801aa22:	4601      	mov	r1, r0
 801aa24:	6818      	ldr	r0, [r3, #0]
 801aa26:	f7ff bfd2 	b.w	801a9ce <_raise_r>
 801aa2a:	bf00      	nop
 801aa2c:	200009fc 	.word	0x200009fc

0801aa30 <_kill_r>:
 801aa30:	b538      	push	{r3, r4, r5, lr}
 801aa32:	4d07      	ldr	r5, [pc, #28]	@ (801aa50 <_kill_r+0x20>)
 801aa34:	2300      	movs	r3, #0
 801aa36:	4604      	mov	r4, r0
 801aa38:	4608      	mov	r0, r1
 801aa3a:	4611      	mov	r1, r2
 801aa3c:	602b      	str	r3, [r5, #0]
 801aa3e:	f7e8 f869 	bl	8002b14 <_kill>
 801aa42:	1c43      	adds	r3, r0, #1
 801aa44:	d102      	bne.n	801aa4c <_kill_r+0x1c>
 801aa46:	682b      	ldr	r3, [r5, #0]
 801aa48:	b103      	cbz	r3, 801aa4c <_kill_r+0x1c>
 801aa4a:	6023      	str	r3, [r4, #0]
 801aa4c:	bd38      	pop	{r3, r4, r5, pc}
 801aa4e:	bf00      	nop
 801aa50:	2000bd1c 	.word	0x2000bd1c

0801aa54 <_getpid_r>:
 801aa54:	f7e8 b856 	b.w	8002b04 <_getpid>

0801aa58 <atan2>:
 801aa58:	f000 bace 	b.w	801aff8 <__ieee754_atan2>

0801aa5c <sqrt>:
 801aa5c:	b538      	push	{r3, r4, r5, lr}
 801aa5e:	ed2d 8b02 	vpush	{d8}
 801aa62:	ec55 4b10 	vmov	r4, r5, d0
 801aa66:	f000 f9c7 	bl	801adf8 <__ieee754_sqrt>
 801aa6a:	4622      	mov	r2, r4
 801aa6c:	462b      	mov	r3, r5
 801aa6e:	4620      	mov	r0, r4
 801aa70:	4629      	mov	r1, r5
 801aa72:	eeb0 8a40 	vmov.f32	s16, s0
 801aa76:	eef0 8a60 	vmov.f32	s17, s1
 801aa7a:	f7e6 f88f 	bl	8000b9c <__aeabi_dcmpun>
 801aa7e:	b990      	cbnz	r0, 801aaa6 <sqrt+0x4a>
 801aa80:	2200      	movs	r2, #0
 801aa82:	2300      	movs	r3, #0
 801aa84:	4620      	mov	r0, r4
 801aa86:	4629      	mov	r1, r5
 801aa88:	f7e6 f860 	bl	8000b4c <__aeabi_dcmplt>
 801aa8c:	b158      	cbz	r0, 801aaa6 <sqrt+0x4a>
 801aa8e:	f7ff f96d 	bl	8019d6c <__errno>
 801aa92:	2321      	movs	r3, #33	@ 0x21
 801aa94:	6003      	str	r3, [r0, #0]
 801aa96:	2200      	movs	r2, #0
 801aa98:	2300      	movs	r3, #0
 801aa9a:	4610      	mov	r0, r2
 801aa9c:	4619      	mov	r1, r3
 801aa9e:	f7e5 ff0d 	bl	80008bc <__aeabi_ddiv>
 801aaa2:	ec41 0b18 	vmov	d8, r0, r1
 801aaa6:	eeb0 0a48 	vmov.f32	s0, s16
 801aaaa:	eef0 0a68 	vmov.f32	s1, s17
 801aaae:	ecbd 8b02 	vpop	{d8}
 801aab2:	bd38      	pop	{r3, r4, r5, pc}
 801aab4:	0000      	movs	r0, r0
	...

0801aab8 <atan>:
 801aab8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aabc:	ec55 4b10 	vmov	r4, r5, d0
 801aac0:	4bbf      	ldr	r3, [pc, #764]	@ (801adc0 <atan+0x308>)
 801aac2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801aac6:	429e      	cmp	r6, r3
 801aac8:	46ab      	mov	fp, r5
 801aaca:	d918      	bls.n	801aafe <atan+0x46>
 801aacc:	4bbd      	ldr	r3, [pc, #756]	@ (801adc4 <atan+0x30c>)
 801aace:	429e      	cmp	r6, r3
 801aad0:	d801      	bhi.n	801aad6 <atan+0x1e>
 801aad2:	d109      	bne.n	801aae8 <atan+0x30>
 801aad4:	b144      	cbz	r4, 801aae8 <atan+0x30>
 801aad6:	4622      	mov	r2, r4
 801aad8:	462b      	mov	r3, r5
 801aada:	4620      	mov	r0, r4
 801aadc:	4629      	mov	r1, r5
 801aade:	f7e5 fc0d 	bl	80002fc <__adddf3>
 801aae2:	4604      	mov	r4, r0
 801aae4:	460d      	mov	r5, r1
 801aae6:	e006      	b.n	801aaf6 <atan+0x3e>
 801aae8:	f1bb 0f00 	cmp.w	fp, #0
 801aaec:	f340 812b 	ble.w	801ad46 <atan+0x28e>
 801aaf0:	a597      	add	r5, pc, #604	@ (adr r5, 801ad50 <atan+0x298>)
 801aaf2:	e9d5 4500 	ldrd	r4, r5, [r5]
 801aaf6:	ec45 4b10 	vmov	d0, r4, r5
 801aafa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aafe:	4bb2      	ldr	r3, [pc, #712]	@ (801adc8 <atan+0x310>)
 801ab00:	429e      	cmp	r6, r3
 801ab02:	d813      	bhi.n	801ab2c <atan+0x74>
 801ab04:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 801ab08:	429e      	cmp	r6, r3
 801ab0a:	d80c      	bhi.n	801ab26 <atan+0x6e>
 801ab0c:	a392      	add	r3, pc, #584	@ (adr r3, 801ad58 <atan+0x2a0>)
 801ab0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab12:	4620      	mov	r0, r4
 801ab14:	4629      	mov	r1, r5
 801ab16:	f7e5 fbf1 	bl	80002fc <__adddf3>
 801ab1a:	4bac      	ldr	r3, [pc, #688]	@ (801adcc <atan+0x314>)
 801ab1c:	2200      	movs	r2, #0
 801ab1e:	f7e6 f833 	bl	8000b88 <__aeabi_dcmpgt>
 801ab22:	2800      	cmp	r0, #0
 801ab24:	d1e7      	bne.n	801aaf6 <atan+0x3e>
 801ab26:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 801ab2a:	e029      	b.n	801ab80 <atan+0xc8>
 801ab2c:	f000 f95c 	bl	801ade8 <fabs>
 801ab30:	4ba7      	ldr	r3, [pc, #668]	@ (801add0 <atan+0x318>)
 801ab32:	429e      	cmp	r6, r3
 801ab34:	ec55 4b10 	vmov	r4, r5, d0
 801ab38:	f200 80bc 	bhi.w	801acb4 <atan+0x1fc>
 801ab3c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 801ab40:	429e      	cmp	r6, r3
 801ab42:	f200 809e 	bhi.w	801ac82 <atan+0x1ca>
 801ab46:	4622      	mov	r2, r4
 801ab48:	462b      	mov	r3, r5
 801ab4a:	4620      	mov	r0, r4
 801ab4c:	4629      	mov	r1, r5
 801ab4e:	f7e5 fbd5 	bl	80002fc <__adddf3>
 801ab52:	4b9e      	ldr	r3, [pc, #632]	@ (801adcc <atan+0x314>)
 801ab54:	2200      	movs	r2, #0
 801ab56:	f7e5 fbcf 	bl	80002f8 <__aeabi_dsub>
 801ab5a:	2200      	movs	r2, #0
 801ab5c:	4606      	mov	r6, r0
 801ab5e:	460f      	mov	r7, r1
 801ab60:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801ab64:	4620      	mov	r0, r4
 801ab66:	4629      	mov	r1, r5
 801ab68:	f7e5 fbc8 	bl	80002fc <__adddf3>
 801ab6c:	4602      	mov	r2, r0
 801ab6e:	460b      	mov	r3, r1
 801ab70:	4630      	mov	r0, r6
 801ab72:	4639      	mov	r1, r7
 801ab74:	f7e5 fea2 	bl	80008bc <__aeabi_ddiv>
 801ab78:	f04f 0a00 	mov.w	sl, #0
 801ab7c:	4604      	mov	r4, r0
 801ab7e:	460d      	mov	r5, r1
 801ab80:	4622      	mov	r2, r4
 801ab82:	462b      	mov	r3, r5
 801ab84:	4620      	mov	r0, r4
 801ab86:	4629      	mov	r1, r5
 801ab88:	f7e5 fd6e 	bl	8000668 <__aeabi_dmul>
 801ab8c:	4602      	mov	r2, r0
 801ab8e:	460b      	mov	r3, r1
 801ab90:	4680      	mov	r8, r0
 801ab92:	4689      	mov	r9, r1
 801ab94:	f7e5 fd68 	bl	8000668 <__aeabi_dmul>
 801ab98:	a371      	add	r3, pc, #452	@ (adr r3, 801ad60 <atan+0x2a8>)
 801ab9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab9e:	4606      	mov	r6, r0
 801aba0:	460f      	mov	r7, r1
 801aba2:	f7e5 fd61 	bl	8000668 <__aeabi_dmul>
 801aba6:	a370      	add	r3, pc, #448	@ (adr r3, 801ad68 <atan+0x2b0>)
 801aba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abac:	f7e5 fba6 	bl	80002fc <__adddf3>
 801abb0:	4632      	mov	r2, r6
 801abb2:	463b      	mov	r3, r7
 801abb4:	f7e5 fd58 	bl	8000668 <__aeabi_dmul>
 801abb8:	a36d      	add	r3, pc, #436	@ (adr r3, 801ad70 <atan+0x2b8>)
 801abba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abbe:	f7e5 fb9d 	bl	80002fc <__adddf3>
 801abc2:	4632      	mov	r2, r6
 801abc4:	463b      	mov	r3, r7
 801abc6:	f7e5 fd4f 	bl	8000668 <__aeabi_dmul>
 801abca:	a36b      	add	r3, pc, #428	@ (adr r3, 801ad78 <atan+0x2c0>)
 801abcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abd0:	f7e5 fb94 	bl	80002fc <__adddf3>
 801abd4:	4632      	mov	r2, r6
 801abd6:	463b      	mov	r3, r7
 801abd8:	f7e5 fd46 	bl	8000668 <__aeabi_dmul>
 801abdc:	a368      	add	r3, pc, #416	@ (adr r3, 801ad80 <atan+0x2c8>)
 801abde:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abe2:	f7e5 fb8b 	bl	80002fc <__adddf3>
 801abe6:	4632      	mov	r2, r6
 801abe8:	463b      	mov	r3, r7
 801abea:	f7e5 fd3d 	bl	8000668 <__aeabi_dmul>
 801abee:	a366      	add	r3, pc, #408	@ (adr r3, 801ad88 <atan+0x2d0>)
 801abf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abf4:	f7e5 fb82 	bl	80002fc <__adddf3>
 801abf8:	4642      	mov	r2, r8
 801abfa:	464b      	mov	r3, r9
 801abfc:	f7e5 fd34 	bl	8000668 <__aeabi_dmul>
 801ac00:	a363      	add	r3, pc, #396	@ (adr r3, 801ad90 <atan+0x2d8>)
 801ac02:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac06:	4680      	mov	r8, r0
 801ac08:	4689      	mov	r9, r1
 801ac0a:	4630      	mov	r0, r6
 801ac0c:	4639      	mov	r1, r7
 801ac0e:	f7e5 fd2b 	bl	8000668 <__aeabi_dmul>
 801ac12:	a361      	add	r3, pc, #388	@ (adr r3, 801ad98 <atan+0x2e0>)
 801ac14:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac18:	f7e5 fb6e 	bl	80002f8 <__aeabi_dsub>
 801ac1c:	4632      	mov	r2, r6
 801ac1e:	463b      	mov	r3, r7
 801ac20:	f7e5 fd22 	bl	8000668 <__aeabi_dmul>
 801ac24:	a35e      	add	r3, pc, #376	@ (adr r3, 801ada0 <atan+0x2e8>)
 801ac26:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac2a:	f7e5 fb65 	bl	80002f8 <__aeabi_dsub>
 801ac2e:	4632      	mov	r2, r6
 801ac30:	463b      	mov	r3, r7
 801ac32:	f7e5 fd19 	bl	8000668 <__aeabi_dmul>
 801ac36:	a35c      	add	r3, pc, #368	@ (adr r3, 801ada8 <atan+0x2f0>)
 801ac38:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac3c:	f7e5 fb5c 	bl	80002f8 <__aeabi_dsub>
 801ac40:	4632      	mov	r2, r6
 801ac42:	463b      	mov	r3, r7
 801ac44:	f7e5 fd10 	bl	8000668 <__aeabi_dmul>
 801ac48:	a359      	add	r3, pc, #356	@ (adr r3, 801adb0 <atan+0x2f8>)
 801ac4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac4e:	f7e5 fb53 	bl	80002f8 <__aeabi_dsub>
 801ac52:	4632      	mov	r2, r6
 801ac54:	463b      	mov	r3, r7
 801ac56:	f7e5 fd07 	bl	8000668 <__aeabi_dmul>
 801ac5a:	4602      	mov	r2, r0
 801ac5c:	460b      	mov	r3, r1
 801ac5e:	4640      	mov	r0, r8
 801ac60:	4649      	mov	r1, r9
 801ac62:	f7e5 fb4b 	bl	80002fc <__adddf3>
 801ac66:	4622      	mov	r2, r4
 801ac68:	462b      	mov	r3, r5
 801ac6a:	f7e5 fcfd 	bl	8000668 <__aeabi_dmul>
 801ac6e:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 801ac72:	4602      	mov	r2, r0
 801ac74:	460b      	mov	r3, r1
 801ac76:	d148      	bne.n	801ad0a <atan+0x252>
 801ac78:	4620      	mov	r0, r4
 801ac7a:	4629      	mov	r1, r5
 801ac7c:	f7e5 fb3c 	bl	80002f8 <__aeabi_dsub>
 801ac80:	e72f      	b.n	801aae2 <atan+0x2a>
 801ac82:	4b52      	ldr	r3, [pc, #328]	@ (801adcc <atan+0x314>)
 801ac84:	2200      	movs	r2, #0
 801ac86:	4620      	mov	r0, r4
 801ac88:	4629      	mov	r1, r5
 801ac8a:	f7e5 fb35 	bl	80002f8 <__aeabi_dsub>
 801ac8e:	4b4f      	ldr	r3, [pc, #316]	@ (801adcc <atan+0x314>)
 801ac90:	4606      	mov	r6, r0
 801ac92:	460f      	mov	r7, r1
 801ac94:	2200      	movs	r2, #0
 801ac96:	4620      	mov	r0, r4
 801ac98:	4629      	mov	r1, r5
 801ac9a:	f7e5 fb2f 	bl	80002fc <__adddf3>
 801ac9e:	4602      	mov	r2, r0
 801aca0:	460b      	mov	r3, r1
 801aca2:	4630      	mov	r0, r6
 801aca4:	4639      	mov	r1, r7
 801aca6:	f7e5 fe09 	bl	80008bc <__aeabi_ddiv>
 801acaa:	f04f 0a01 	mov.w	sl, #1
 801acae:	4604      	mov	r4, r0
 801acb0:	460d      	mov	r5, r1
 801acb2:	e765      	b.n	801ab80 <atan+0xc8>
 801acb4:	4b47      	ldr	r3, [pc, #284]	@ (801add4 <atan+0x31c>)
 801acb6:	429e      	cmp	r6, r3
 801acb8:	d21c      	bcs.n	801acf4 <atan+0x23c>
 801acba:	4b47      	ldr	r3, [pc, #284]	@ (801add8 <atan+0x320>)
 801acbc:	2200      	movs	r2, #0
 801acbe:	4620      	mov	r0, r4
 801acc0:	4629      	mov	r1, r5
 801acc2:	f7e5 fb19 	bl	80002f8 <__aeabi_dsub>
 801acc6:	4b44      	ldr	r3, [pc, #272]	@ (801add8 <atan+0x320>)
 801acc8:	4606      	mov	r6, r0
 801acca:	460f      	mov	r7, r1
 801accc:	2200      	movs	r2, #0
 801acce:	4620      	mov	r0, r4
 801acd0:	4629      	mov	r1, r5
 801acd2:	f7e5 fcc9 	bl	8000668 <__aeabi_dmul>
 801acd6:	4b3d      	ldr	r3, [pc, #244]	@ (801adcc <atan+0x314>)
 801acd8:	2200      	movs	r2, #0
 801acda:	f7e5 fb0f 	bl	80002fc <__adddf3>
 801acde:	4602      	mov	r2, r0
 801ace0:	460b      	mov	r3, r1
 801ace2:	4630      	mov	r0, r6
 801ace4:	4639      	mov	r1, r7
 801ace6:	f7e5 fde9 	bl	80008bc <__aeabi_ddiv>
 801acea:	f04f 0a02 	mov.w	sl, #2
 801acee:	4604      	mov	r4, r0
 801acf0:	460d      	mov	r5, r1
 801acf2:	e745      	b.n	801ab80 <atan+0xc8>
 801acf4:	4622      	mov	r2, r4
 801acf6:	462b      	mov	r3, r5
 801acf8:	4938      	ldr	r1, [pc, #224]	@ (801addc <atan+0x324>)
 801acfa:	2000      	movs	r0, #0
 801acfc:	f7e5 fdde 	bl	80008bc <__aeabi_ddiv>
 801ad00:	f04f 0a03 	mov.w	sl, #3
 801ad04:	4604      	mov	r4, r0
 801ad06:	460d      	mov	r5, r1
 801ad08:	e73a      	b.n	801ab80 <atan+0xc8>
 801ad0a:	4b35      	ldr	r3, [pc, #212]	@ (801ade0 <atan+0x328>)
 801ad0c:	4e35      	ldr	r6, [pc, #212]	@ (801ade4 <atan+0x32c>)
 801ad0e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801ad12:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad16:	f7e5 faef 	bl	80002f8 <__aeabi_dsub>
 801ad1a:	4622      	mov	r2, r4
 801ad1c:	462b      	mov	r3, r5
 801ad1e:	f7e5 faeb 	bl	80002f8 <__aeabi_dsub>
 801ad22:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801ad26:	4602      	mov	r2, r0
 801ad28:	460b      	mov	r3, r1
 801ad2a:	e9d6 0100 	ldrd	r0, r1, [r6]
 801ad2e:	f7e5 fae3 	bl	80002f8 <__aeabi_dsub>
 801ad32:	f1bb 0f00 	cmp.w	fp, #0
 801ad36:	4604      	mov	r4, r0
 801ad38:	460d      	mov	r5, r1
 801ad3a:	f6bf aedc 	bge.w	801aaf6 <atan+0x3e>
 801ad3e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801ad42:	461d      	mov	r5, r3
 801ad44:	e6d7      	b.n	801aaf6 <atan+0x3e>
 801ad46:	a51c      	add	r5, pc, #112	@ (adr r5, 801adb8 <atan+0x300>)
 801ad48:	e9d5 4500 	ldrd	r4, r5, [r5]
 801ad4c:	e6d3      	b.n	801aaf6 <atan+0x3e>
 801ad4e:	bf00      	nop
 801ad50:	54442d18 	.word	0x54442d18
 801ad54:	3ff921fb 	.word	0x3ff921fb
 801ad58:	8800759c 	.word	0x8800759c
 801ad5c:	7e37e43c 	.word	0x7e37e43c
 801ad60:	e322da11 	.word	0xe322da11
 801ad64:	3f90ad3a 	.word	0x3f90ad3a
 801ad68:	24760deb 	.word	0x24760deb
 801ad6c:	3fa97b4b 	.word	0x3fa97b4b
 801ad70:	a0d03d51 	.word	0xa0d03d51
 801ad74:	3fb10d66 	.word	0x3fb10d66
 801ad78:	c54c206e 	.word	0xc54c206e
 801ad7c:	3fb745cd 	.word	0x3fb745cd
 801ad80:	920083ff 	.word	0x920083ff
 801ad84:	3fc24924 	.word	0x3fc24924
 801ad88:	5555550d 	.word	0x5555550d
 801ad8c:	3fd55555 	.word	0x3fd55555
 801ad90:	2c6a6c2f 	.word	0x2c6a6c2f
 801ad94:	bfa2b444 	.word	0xbfa2b444
 801ad98:	52defd9a 	.word	0x52defd9a
 801ad9c:	3fadde2d 	.word	0x3fadde2d
 801ada0:	af749a6d 	.word	0xaf749a6d
 801ada4:	3fb3b0f2 	.word	0x3fb3b0f2
 801ada8:	fe231671 	.word	0xfe231671
 801adac:	3fbc71c6 	.word	0x3fbc71c6
 801adb0:	9998ebc4 	.word	0x9998ebc4
 801adb4:	3fc99999 	.word	0x3fc99999
 801adb8:	54442d18 	.word	0x54442d18
 801adbc:	bff921fb 	.word	0xbff921fb
 801adc0:	440fffff 	.word	0x440fffff
 801adc4:	7ff00000 	.word	0x7ff00000
 801adc8:	3fdbffff 	.word	0x3fdbffff
 801adcc:	3ff00000 	.word	0x3ff00000
 801add0:	3ff2ffff 	.word	0x3ff2ffff
 801add4:	40038000 	.word	0x40038000
 801add8:	3ff80000 	.word	0x3ff80000
 801addc:	bff00000 	.word	0xbff00000
 801ade0:	0801cb68 	.word	0x0801cb68
 801ade4:	0801cb88 	.word	0x0801cb88

0801ade8 <fabs>:
 801ade8:	ec51 0b10 	vmov	r0, r1, d0
 801adec:	4602      	mov	r2, r0
 801adee:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801adf2:	ec43 2b10 	vmov	d0, r2, r3
 801adf6:	4770      	bx	lr

0801adf8 <__ieee754_sqrt>:
 801adf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801adfc:	4a68      	ldr	r2, [pc, #416]	@ (801afa0 <__ieee754_sqrt+0x1a8>)
 801adfe:	ec55 4b10 	vmov	r4, r5, d0
 801ae02:	43aa      	bics	r2, r5
 801ae04:	462b      	mov	r3, r5
 801ae06:	4621      	mov	r1, r4
 801ae08:	d110      	bne.n	801ae2c <__ieee754_sqrt+0x34>
 801ae0a:	4622      	mov	r2, r4
 801ae0c:	4620      	mov	r0, r4
 801ae0e:	4629      	mov	r1, r5
 801ae10:	f7e5 fc2a 	bl	8000668 <__aeabi_dmul>
 801ae14:	4602      	mov	r2, r0
 801ae16:	460b      	mov	r3, r1
 801ae18:	4620      	mov	r0, r4
 801ae1a:	4629      	mov	r1, r5
 801ae1c:	f7e5 fa6e 	bl	80002fc <__adddf3>
 801ae20:	4604      	mov	r4, r0
 801ae22:	460d      	mov	r5, r1
 801ae24:	ec45 4b10 	vmov	d0, r4, r5
 801ae28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae2c:	2d00      	cmp	r5, #0
 801ae2e:	dc0e      	bgt.n	801ae4e <__ieee754_sqrt+0x56>
 801ae30:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801ae34:	4322      	orrs	r2, r4
 801ae36:	d0f5      	beq.n	801ae24 <__ieee754_sqrt+0x2c>
 801ae38:	b19d      	cbz	r5, 801ae62 <__ieee754_sqrt+0x6a>
 801ae3a:	4622      	mov	r2, r4
 801ae3c:	4620      	mov	r0, r4
 801ae3e:	4629      	mov	r1, r5
 801ae40:	f7e5 fa5a 	bl	80002f8 <__aeabi_dsub>
 801ae44:	4602      	mov	r2, r0
 801ae46:	460b      	mov	r3, r1
 801ae48:	f7e5 fd38 	bl	80008bc <__aeabi_ddiv>
 801ae4c:	e7e8      	b.n	801ae20 <__ieee754_sqrt+0x28>
 801ae4e:	152a      	asrs	r2, r5, #20
 801ae50:	d115      	bne.n	801ae7e <__ieee754_sqrt+0x86>
 801ae52:	2000      	movs	r0, #0
 801ae54:	e009      	b.n	801ae6a <__ieee754_sqrt+0x72>
 801ae56:	0acb      	lsrs	r3, r1, #11
 801ae58:	3a15      	subs	r2, #21
 801ae5a:	0549      	lsls	r1, r1, #21
 801ae5c:	2b00      	cmp	r3, #0
 801ae5e:	d0fa      	beq.n	801ae56 <__ieee754_sqrt+0x5e>
 801ae60:	e7f7      	b.n	801ae52 <__ieee754_sqrt+0x5a>
 801ae62:	462a      	mov	r2, r5
 801ae64:	e7fa      	b.n	801ae5c <__ieee754_sqrt+0x64>
 801ae66:	005b      	lsls	r3, r3, #1
 801ae68:	3001      	adds	r0, #1
 801ae6a:	02dc      	lsls	r4, r3, #11
 801ae6c:	d5fb      	bpl.n	801ae66 <__ieee754_sqrt+0x6e>
 801ae6e:	1e44      	subs	r4, r0, #1
 801ae70:	1b12      	subs	r2, r2, r4
 801ae72:	f1c0 0420 	rsb	r4, r0, #32
 801ae76:	fa21 f404 	lsr.w	r4, r1, r4
 801ae7a:	4323      	orrs	r3, r4
 801ae7c:	4081      	lsls	r1, r0
 801ae7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ae82:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801ae86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801ae8a:	07d2      	lsls	r2, r2, #31
 801ae8c:	bf5c      	itt	pl
 801ae8e:	005b      	lslpl	r3, r3, #1
 801ae90:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801ae94:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801ae98:	bf58      	it	pl
 801ae9a:	0049      	lslpl	r1, r1, #1
 801ae9c:	2600      	movs	r6, #0
 801ae9e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801aea2:	106d      	asrs	r5, r5, #1
 801aea4:	0049      	lsls	r1, r1, #1
 801aea6:	2016      	movs	r0, #22
 801aea8:	4632      	mov	r2, r6
 801aeaa:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801aeae:	1917      	adds	r7, r2, r4
 801aeb0:	429f      	cmp	r7, r3
 801aeb2:	bfde      	ittt	le
 801aeb4:	193a      	addle	r2, r7, r4
 801aeb6:	1bdb      	suble	r3, r3, r7
 801aeb8:	1936      	addle	r6, r6, r4
 801aeba:	0fcf      	lsrs	r7, r1, #31
 801aebc:	3801      	subs	r0, #1
 801aebe:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801aec2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801aec6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801aeca:	d1f0      	bne.n	801aeae <__ieee754_sqrt+0xb6>
 801aecc:	4604      	mov	r4, r0
 801aece:	2720      	movs	r7, #32
 801aed0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801aed4:	429a      	cmp	r2, r3
 801aed6:	eb00 0e0c 	add.w	lr, r0, ip
 801aeda:	db02      	blt.n	801aee2 <__ieee754_sqrt+0xea>
 801aedc:	d113      	bne.n	801af06 <__ieee754_sqrt+0x10e>
 801aede:	458e      	cmp	lr, r1
 801aee0:	d811      	bhi.n	801af06 <__ieee754_sqrt+0x10e>
 801aee2:	f1be 0f00 	cmp.w	lr, #0
 801aee6:	eb0e 000c 	add.w	r0, lr, ip
 801aeea:	da42      	bge.n	801af72 <__ieee754_sqrt+0x17a>
 801aeec:	2800      	cmp	r0, #0
 801aeee:	db40      	blt.n	801af72 <__ieee754_sqrt+0x17a>
 801aef0:	f102 0801 	add.w	r8, r2, #1
 801aef4:	1a9b      	subs	r3, r3, r2
 801aef6:	458e      	cmp	lr, r1
 801aef8:	bf88      	it	hi
 801aefa:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 801aefe:	eba1 010e 	sub.w	r1, r1, lr
 801af02:	4464      	add	r4, ip
 801af04:	4642      	mov	r2, r8
 801af06:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801af0a:	3f01      	subs	r7, #1
 801af0c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801af10:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801af14:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801af18:	d1dc      	bne.n	801aed4 <__ieee754_sqrt+0xdc>
 801af1a:	4319      	orrs	r1, r3
 801af1c:	d01b      	beq.n	801af56 <__ieee754_sqrt+0x15e>
 801af1e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 801afa4 <__ieee754_sqrt+0x1ac>
 801af22:	f8df b084 	ldr.w	fp, [pc, #132]	@ 801afa8 <__ieee754_sqrt+0x1b0>
 801af26:	e9da 0100 	ldrd	r0, r1, [sl]
 801af2a:	e9db 2300 	ldrd	r2, r3, [fp]
 801af2e:	f7e5 f9e3 	bl	80002f8 <__aeabi_dsub>
 801af32:	e9da 8900 	ldrd	r8, r9, [sl]
 801af36:	4602      	mov	r2, r0
 801af38:	460b      	mov	r3, r1
 801af3a:	4640      	mov	r0, r8
 801af3c:	4649      	mov	r1, r9
 801af3e:	f7e5 fe0f 	bl	8000b60 <__aeabi_dcmple>
 801af42:	b140      	cbz	r0, 801af56 <__ieee754_sqrt+0x15e>
 801af44:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 801af48:	e9da 0100 	ldrd	r0, r1, [sl]
 801af4c:	e9db 2300 	ldrd	r2, r3, [fp]
 801af50:	d111      	bne.n	801af76 <__ieee754_sqrt+0x17e>
 801af52:	3601      	adds	r6, #1
 801af54:	463c      	mov	r4, r7
 801af56:	1072      	asrs	r2, r6, #1
 801af58:	0863      	lsrs	r3, r4, #1
 801af5a:	07f1      	lsls	r1, r6, #31
 801af5c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801af60:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801af64:	bf48      	it	mi
 801af66:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801af6a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801af6e:	4618      	mov	r0, r3
 801af70:	e756      	b.n	801ae20 <__ieee754_sqrt+0x28>
 801af72:	4690      	mov	r8, r2
 801af74:	e7be      	b.n	801aef4 <__ieee754_sqrt+0xfc>
 801af76:	f7e5 f9c1 	bl	80002fc <__adddf3>
 801af7a:	e9da 8900 	ldrd	r8, r9, [sl]
 801af7e:	4602      	mov	r2, r0
 801af80:	460b      	mov	r3, r1
 801af82:	4640      	mov	r0, r8
 801af84:	4649      	mov	r1, r9
 801af86:	f7e5 fde1 	bl	8000b4c <__aeabi_dcmplt>
 801af8a:	b120      	cbz	r0, 801af96 <__ieee754_sqrt+0x19e>
 801af8c:	1ca0      	adds	r0, r4, #2
 801af8e:	bf08      	it	eq
 801af90:	3601      	addeq	r6, #1
 801af92:	3402      	adds	r4, #2
 801af94:	e7df      	b.n	801af56 <__ieee754_sqrt+0x15e>
 801af96:	1c63      	adds	r3, r4, #1
 801af98:	f023 0401 	bic.w	r4, r3, #1
 801af9c:	e7db      	b.n	801af56 <__ieee754_sqrt+0x15e>
 801af9e:	bf00      	nop
 801afa0:	7ff00000 	.word	0x7ff00000
 801afa4:	20000a58 	.word	0x20000a58
 801afa8:	20000a50 	.word	0x20000a50

0801afac <roundf>:
 801afac:	ee10 0a10 	vmov	r0, s0
 801afb0:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 801afb4:	3a7f      	subs	r2, #127	@ 0x7f
 801afb6:	2a16      	cmp	r2, #22
 801afb8:	dc15      	bgt.n	801afe6 <roundf+0x3a>
 801afba:	2a00      	cmp	r2, #0
 801afbc:	da08      	bge.n	801afd0 <roundf+0x24>
 801afbe:	3201      	adds	r2, #1
 801afc0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 801afc4:	d101      	bne.n	801afca <roundf+0x1e>
 801afc6:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 801afca:	ee00 3a10 	vmov	s0, r3
 801afce:	4770      	bx	lr
 801afd0:	4907      	ldr	r1, [pc, #28]	@ (801aff0 <roundf+0x44>)
 801afd2:	4111      	asrs	r1, r2
 801afd4:	4201      	tst	r1, r0
 801afd6:	d0fa      	beq.n	801afce <roundf+0x22>
 801afd8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 801afdc:	4113      	asrs	r3, r2
 801afde:	4403      	add	r3, r0
 801afe0:	ea23 0301 	bic.w	r3, r3, r1
 801afe4:	e7f1      	b.n	801afca <roundf+0x1e>
 801afe6:	2a80      	cmp	r2, #128	@ 0x80
 801afe8:	d1f1      	bne.n	801afce <roundf+0x22>
 801afea:	ee30 0a00 	vadd.f32	s0, s0, s0
 801afee:	4770      	bx	lr
 801aff0:	007fffff 	.word	0x007fffff
 801aff4:	00000000 	.word	0x00000000

0801aff8 <__ieee754_atan2>:
 801aff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801affc:	ec57 6b11 	vmov	r6, r7, d1
 801b000:	4273      	negs	r3, r6
 801b002:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 801b180 <__ieee754_atan2+0x188>
 801b006:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 801b00a:	4333      	orrs	r3, r6
 801b00c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801b010:	4543      	cmp	r3, r8
 801b012:	ec51 0b10 	vmov	r0, r1, d0
 801b016:	4635      	mov	r5, r6
 801b018:	d809      	bhi.n	801b02e <__ieee754_atan2+0x36>
 801b01a:	4244      	negs	r4, r0
 801b01c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801b020:	4304      	orrs	r4, r0
 801b022:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801b026:	4544      	cmp	r4, r8
 801b028:	468e      	mov	lr, r1
 801b02a:	4681      	mov	r9, r0
 801b02c:	d907      	bls.n	801b03e <__ieee754_atan2+0x46>
 801b02e:	4632      	mov	r2, r6
 801b030:	463b      	mov	r3, r7
 801b032:	f7e5 f963 	bl	80002fc <__adddf3>
 801b036:	ec41 0b10 	vmov	d0, r0, r1
 801b03a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b03e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 801b042:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 801b046:	4334      	orrs	r4, r6
 801b048:	d103      	bne.n	801b052 <__ieee754_atan2+0x5a>
 801b04a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b04e:	f7ff bd33 	b.w	801aab8 <atan>
 801b052:	17bc      	asrs	r4, r7, #30
 801b054:	f004 0402 	and.w	r4, r4, #2
 801b058:	ea53 0909 	orrs.w	r9, r3, r9
 801b05c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801b060:	d107      	bne.n	801b072 <__ieee754_atan2+0x7a>
 801b062:	2c02      	cmp	r4, #2
 801b064:	d05f      	beq.n	801b126 <__ieee754_atan2+0x12e>
 801b066:	2c03      	cmp	r4, #3
 801b068:	d1e5      	bne.n	801b036 <__ieee754_atan2+0x3e>
 801b06a:	a141      	add	r1, pc, #260	@ (adr r1, 801b170 <__ieee754_atan2+0x178>)
 801b06c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b070:	e7e1      	b.n	801b036 <__ieee754_atan2+0x3e>
 801b072:	4315      	orrs	r5, r2
 801b074:	d106      	bne.n	801b084 <__ieee754_atan2+0x8c>
 801b076:	f1be 0f00 	cmp.w	lr, #0
 801b07a:	da5f      	bge.n	801b13c <__ieee754_atan2+0x144>
 801b07c:	a13e      	add	r1, pc, #248	@ (adr r1, 801b178 <__ieee754_atan2+0x180>)
 801b07e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b082:	e7d8      	b.n	801b036 <__ieee754_atan2+0x3e>
 801b084:	4542      	cmp	r2, r8
 801b086:	d10f      	bne.n	801b0a8 <__ieee754_atan2+0xb0>
 801b088:	4293      	cmp	r3, r2
 801b08a:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 801b08e:	d107      	bne.n	801b0a0 <__ieee754_atan2+0xa8>
 801b090:	2c02      	cmp	r4, #2
 801b092:	d84c      	bhi.n	801b12e <__ieee754_atan2+0x136>
 801b094:	4b34      	ldr	r3, [pc, #208]	@ (801b168 <__ieee754_atan2+0x170>)
 801b096:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801b09a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b09e:	e7ca      	b.n	801b036 <__ieee754_atan2+0x3e>
 801b0a0:	2c02      	cmp	r4, #2
 801b0a2:	d848      	bhi.n	801b136 <__ieee754_atan2+0x13e>
 801b0a4:	4b31      	ldr	r3, [pc, #196]	@ (801b16c <__ieee754_atan2+0x174>)
 801b0a6:	e7f6      	b.n	801b096 <__ieee754_atan2+0x9e>
 801b0a8:	4543      	cmp	r3, r8
 801b0aa:	d0e4      	beq.n	801b076 <__ieee754_atan2+0x7e>
 801b0ac:	1a9b      	subs	r3, r3, r2
 801b0ae:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801b0b2:	ea4f 5223 	mov.w	r2, r3, asr #20
 801b0b6:	da1e      	bge.n	801b0f6 <__ieee754_atan2+0xfe>
 801b0b8:	2f00      	cmp	r7, #0
 801b0ba:	da01      	bge.n	801b0c0 <__ieee754_atan2+0xc8>
 801b0bc:	323c      	adds	r2, #60	@ 0x3c
 801b0be:	db1e      	blt.n	801b0fe <__ieee754_atan2+0x106>
 801b0c0:	4632      	mov	r2, r6
 801b0c2:	463b      	mov	r3, r7
 801b0c4:	f7e5 fbfa 	bl	80008bc <__aeabi_ddiv>
 801b0c8:	ec41 0b10 	vmov	d0, r0, r1
 801b0cc:	f7ff fe8c 	bl	801ade8 <fabs>
 801b0d0:	f7ff fcf2 	bl	801aab8 <atan>
 801b0d4:	ec51 0b10 	vmov	r0, r1, d0
 801b0d8:	2c01      	cmp	r4, #1
 801b0da:	d013      	beq.n	801b104 <__ieee754_atan2+0x10c>
 801b0dc:	2c02      	cmp	r4, #2
 801b0de:	d015      	beq.n	801b10c <__ieee754_atan2+0x114>
 801b0e0:	2c00      	cmp	r4, #0
 801b0e2:	d0a8      	beq.n	801b036 <__ieee754_atan2+0x3e>
 801b0e4:	a318      	add	r3, pc, #96	@ (adr r3, 801b148 <__ieee754_atan2+0x150>)
 801b0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0ea:	f7e5 f905 	bl	80002f8 <__aeabi_dsub>
 801b0ee:	a318      	add	r3, pc, #96	@ (adr r3, 801b150 <__ieee754_atan2+0x158>)
 801b0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0f4:	e014      	b.n	801b120 <__ieee754_atan2+0x128>
 801b0f6:	a118      	add	r1, pc, #96	@ (adr r1, 801b158 <__ieee754_atan2+0x160>)
 801b0f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b0fc:	e7ec      	b.n	801b0d8 <__ieee754_atan2+0xe0>
 801b0fe:	2000      	movs	r0, #0
 801b100:	2100      	movs	r1, #0
 801b102:	e7e9      	b.n	801b0d8 <__ieee754_atan2+0xe0>
 801b104:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801b108:	4619      	mov	r1, r3
 801b10a:	e794      	b.n	801b036 <__ieee754_atan2+0x3e>
 801b10c:	a30e      	add	r3, pc, #56	@ (adr r3, 801b148 <__ieee754_atan2+0x150>)
 801b10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b112:	f7e5 f8f1 	bl	80002f8 <__aeabi_dsub>
 801b116:	4602      	mov	r2, r0
 801b118:	460b      	mov	r3, r1
 801b11a:	a10d      	add	r1, pc, #52	@ (adr r1, 801b150 <__ieee754_atan2+0x158>)
 801b11c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b120:	f7e5 f8ea 	bl	80002f8 <__aeabi_dsub>
 801b124:	e787      	b.n	801b036 <__ieee754_atan2+0x3e>
 801b126:	a10a      	add	r1, pc, #40	@ (adr r1, 801b150 <__ieee754_atan2+0x158>)
 801b128:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b12c:	e783      	b.n	801b036 <__ieee754_atan2+0x3e>
 801b12e:	a10c      	add	r1, pc, #48	@ (adr r1, 801b160 <__ieee754_atan2+0x168>)
 801b130:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b134:	e77f      	b.n	801b036 <__ieee754_atan2+0x3e>
 801b136:	2000      	movs	r0, #0
 801b138:	2100      	movs	r1, #0
 801b13a:	e77c      	b.n	801b036 <__ieee754_atan2+0x3e>
 801b13c:	a106      	add	r1, pc, #24	@ (adr r1, 801b158 <__ieee754_atan2+0x160>)
 801b13e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b142:	e778      	b.n	801b036 <__ieee754_atan2+0x3e>
 801b144:	f3af 8000 	nop.w
 801b148:	33145c07 	.word	0x33145c07
 801b14c:	3ca1a626 	.word	0x3ca1a626
 801b150:	54442d18 	.word	0x54442d18
 801b154:	400921fb 	.word	0x400921fb
 801b158:	54442d18 	.word	0x54442d18
 801b15c:	3ff921fb 	.word	0x3ff921fb
 801b160:	54442d18 	.word	0x54442d18
 801b164:	3fe921fb 	.word	0x3fe921fb
 801b168:	0801cbc0 	.word	0x0801cbc0
 801b16c:	0801cba8 	.word	0x0801cba8
 801b170:	54442d18 	.word	0x54442d18
 801b174:	c00921fb 	.word	0xc00921fb
 801b178:	54442d18 	.word	0x54442d18
 801b17c:	bff921fb 	.word	0xbff921fb
 801b180:	7ff00000 	.word	0x7ff00000

0801b184 <_init>:
 801b184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b186:	bf00      	nop
 801b188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b18a:	bc08      	pop	{r3}
 801b18c:	469e      	mov	lr, r3
 801b18e:	4770      	bx	lr

0801b190 <_fini>:
 801b190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b192:	bf00      	nop
 801b194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b196:	bc08      	pop	{r3}
 801b198:	469e      	mov	lr, r3
 801b19a:	4770      	bx	lr
